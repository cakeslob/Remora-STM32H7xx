
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e8a8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e04  0801eb48  0801eb48  0001fb48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f94c  0801f94c  0002094c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  0801f954  0801f954  00020954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801f960  0801f960  00020960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  24000000  0801f964  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b84  24000088  0801f9ec  00021088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000c0c  0801f9ec  00021c0c  2**0
                  ALLOC
  9 .dma_buffers  00000100  30000000  00000000  00001000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00021088  2**0
                  CONTENTS, READONLY
 11 .debug_info   000ec515  00000000  00000000  000210b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000edee  00000000  00000000  0010d5cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00004e10  00000000  00000000  0011c3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00003b8e  00000000  00000000  001211d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004aa0c  00000000  00000000  00124d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005986f  00000000  00000000  0016f76a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001b3363  00000000  00000000  001c8fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0037c33c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0001829c  00000000  00000000  0037c380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000069  00000000  00000000  0039461c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801eb30 	.word	0x0801eb30

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0801eb30 	.word	0x0801eb30

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_frsub>:
 8000728:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800072c:	e002      	b.n	8000734 <__addsf3>
 800072e:	bf00      	nop

08000730 <__aeabi_fsub>:
 8000730:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000734 <__addsf3>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	bf1f      	itttt	ne
 8000738:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800073c:	ea92 0f03 	teqne	r2, r3
 8000740:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000744:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000748:	d06a      	beq.n	8000820 <__addsf3+0xec>
 800074a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800074e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000752:	bfc1      	itttt	gt
 8000754:	18d2      	addgt	r2, r2, r3
 8000756:	4041      	eorgt	r1, r0
 8000758:	4048      	eorgt	r0, r1
 800075a:	4041      	eorgt	r1, r0
 800075c:	bfb8      	it	lt
 800075e:	425b      	neglt	r3, r3
 8000760:	2b19      	cmp	r3, #25
 8000762:	bf88      	it	hi
 8000764:	4770      	bxhi	lr
 8000766:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800076a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800076e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000772:	bf18      	it	ne
 8000774:	4240      	negne	r0, r0
 8000776:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800077a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800077e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000782:	bf18      	it	ne
 8000784:	4249      	negne	r1, r1
 8000786:	ea92 0f03 	teq	r2, r3
 800078a:	d03f      	beq.n	800080c <__addsf3+0xd8>
 800078c:	f1a2 0201 	sub.w	r2, r2, #1
 8000790:	fa41 fc03 	asr.w	ip, r1, r3
 8000794:	eb10 000c 	adds.w	r0, r0, ip
 8000798:	f1c3 0320 	rsb	r3, r3, #32
 800079c:	fa01 f103 	lsl.w	r1, r1, r3
 80007a0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a4:	d502      	bpl.n	80007ac <__addsf3+0x78>
 80007a6:	4249      	negs	r1, r1
 80007a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007ac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007b0:	d313      	bcc.n	80007da <__addsf3+0xa6>
 80007b2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007b6:	d306      	bcc.n	80007c6 <__addsf3+0x92>
 80007b8:	0840      	lsrs	r0, r0, #1
 80007ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80007be:	f102 0201 	add.w	r2, r2, #1
 80007c2:	2afe      	cmp	r2, #254	@ 0xfe
 80007c4:	d251      	bcs.n	800086a <__addsf3+0x136>
 80007c6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ce:	bf08      	it	eq
 80007d0:	f020 0001 	biceq.w	r0, r0, #1
 80007d4:	ea40 0003 	orr.w	r0, r0, r3
 80007d8:	4770      	bx	lr
 80007da:	0049      	lsls	r1, r1, #1
 80007dc:	eb40 0000 	adc.w	r0, r0, r0
 80007e0:	3a01      	subs	r2, #1
 80007e2:	bf28      	it	cs
 80007e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007e8:	d2ed      	bcs.n	80007c6 <__addsf3+0x92>
 80007ea:	fab0 fc80 	clz	ip, r0
 80007ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80007f2:	ebb2 020c 	subs.w	r2, r2, ip
 80007f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007fa:	bfaa      	itet	ge
 80007fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000800:	4252      	neglt	r2, r2
 8000802:	4318      	orrge	r0, r3
 8000804:	bfbc      	itt	lt
 8000806:	40d0      	lsrlt	r0, r2
 8000808:	4318      	orrlt	r0, r3
 800080a:	4770      	bx	lr
 800080c:	f092 0f00 	teq	r2, #0
 8000810:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000814:	bf06      	itte	eq
 8000816:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800081a:	3201      	addeq	r2, #1
 800081c:	3b01      	subne	r3, #1
 800081e:	e7b5      	b.n	800078c <__addsf3+0x58>
 8000820:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000824:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000828:	bf18      	it	ne
 800082a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800082e:	d021      	beq.n	8000874 <__addsf3+0x140>
 8000830:	ea92 0f03 	teq	r2, r3
 8000834:	d004      	beq.n	8000840 <__addsf3+0x10c>
 8000836:	f092 0f00 	teq	r2, #0
 800083a:	bf08      	it	eq
 800083c:	4608      	moveq	r0, r1
 800083e:	4770      	bx	lr
 8000840:	ea90 0f01 	teq	r0, r1
 8000844:	bf1c      	itt	ne
 8000846:	2000      	movne	r0, #0
 8000848:	4770      	bxne	lr
 800084a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800084e:	d104      	bne.n	800085a <__addsf3+0x126>
 8000850:	0040      	lsls	r0, r0, #1
 8000852:	bf28      	it	cs
 8000854:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000858:	4770      	bx	lr
 800085a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800085e:	bf3c      	itt	cc
 8000860:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000864:	4770      	bxcc	lr
 8000866:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800086a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800086e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000872:	4770      	bx	lr
 8000874:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000878:	bf16      	itet	ne
 800087a:	4608      	movne	r0, r1
 800087c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000880:	4601      	movne	r1, r0
 8000882:	0242      	lsls	r2, r0, #9
 8000884:	bf06      	itte	eq
 8000886:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800088a:	ea90 0f01 	teqeq	r0, r1
 800088e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000892:	4770      	bx	lr

08000894 <__aeabi_ui2f>:
 8000894:	f04f 0300 	mov.w	r3, #0
 8000898:	e004      	b.n	80008a4 <__aeabi_i2f+0x8>
 800089a:	bf00      	nop

0800089c <__aeabi_i2f>:
 800089c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008a0:	bf48      	it	mi
 80008a2:	4240      	negmi	r0, r0
 80008a4:	ea5f 0c00 	movs.w	ip, r0
 80008a8:	bf08      	it	eq
 80008aa:	4770      	bxeq	lr
 80008ac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008b0:	4601      	mov	r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	e01c      	b.n	80008f2 <__aeabi_l2f+0x2a>

080008b8 <__aeabi_ul2f>:
 80008b8:	ea50 0201 	orrs.w	r2, r0, r1
 80008bc:	bf08      	it	eq
 80008be:	4770      	bxeq	lr
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	e00a      	b.n	80008dc <__aeabi_l2f+0x14>
 80008c6:	bf00      	nop

080008c8 <__aeabi_l2f>:
 80008c8:	ea50 0201 	orrs.w	r2, r0, r1
 80008cc:	bf08      	it	eq
 80008ce:	4770      	bxeq	lr
 80008d0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008d4:	d502      	bpl.n	80008dc <__aeabi_l2f+0x14>
 80008d6:	4240      	negs	r0, r0
 80008d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008dc:	ea5f 0c01 	movs.w	ip, r1
 80008e0:	bf02      	ittt	eq
 80008e2:	4684      	moveq	ip, r0
 80008e4:	4601      	moveq	r1, r0
 80008e6:	2000      	moveq	r0, #0
 80008e8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008ec:	bf08      	it	eq
 80008ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008f2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008f6:	fabc f28c 	clz	r2, ip
 80008fa:	3a08      	subs	r2, #8
 80008fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000900:	db10      	blt.n	8000924 <__aeabi_l2f+0x5c>
 8000902:	fa01 fc02 	lsl.w	ip, r1, r2
 8000906:	4463      	add	r3, ip
 8000908:	fa00 fc02 	lsl.w	ip, r0, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000914:	fa20 f202 	lsr.w	r2, r0, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f102 0220 	add.w	r2, r2, #32
 8000928:	fa01 fc02 	lsl.w	ip, r1, r2
 800092c:	f1c2 0220 	rsb	r2, r2, #32
 8000930:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000934:	fa21 f202 	lsr.w	r2, r1, r2
 8000938:	eb43 0002 	adc.w	r0, r3, r2
 800093c:	bf08      	it	eq
 800093e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000942:	4770      	bx	lr

08000944 <__aeabi_uldivmod>:
 8000944:	b953      	cbnz	r3, 800095c <__aeabi_uldivmod+0x18>
 8000946:	b94a      	cbnz	r2, 800095c <__aeabi_uldivmod+0x18>
 8000948:	2900      	cmp	r1, #0
 800094a:	bf08      	it	eq
 800094c:	2800      	cmpeq	r0, #0
 800094e:	bf1c      	itt	ne
 8000950:	f04f 31ff 	movne.w	r1, #4294967295
 8000954:	f04f 30ff 	movne.w	r0, #4294967295
 8000958:	f000 b96a 	b.w	8000c30 <__aeabi_idiv0>
 800095c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000960:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000964:	f000 f806 	bl	8000974 <__udivmoddi4>
 8000968:	f8dd e004 	ldr.w	lr, [sp, #4]
 800096c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr

08000974 <__udivmoddi4>:
 8000974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000978:	9d08      	ldr	r5, [sp, #32]
 800097a:	460c      	mov	r4, r1
 800097c:	2b00      	cmp	r3, #0
 800097e:	d14e      	bne.n	8000a1e <__udivmoddi4+0xaa>
 8000980:	4694      	mov	ip, r2
 8000982:	458c      	cmp	ip, r1
 8000984:	4686      	mov	lr, r0
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	d962      	bls.n	8000a52 <__udivmoddi4+0xde>
 800098c:	b14a      	cbz	r2, 80009a2 <__udivmoddi4+0x2e>
 800098e:	f1c2 0320 	rsb	r3, r2, #32
 8000992:	4091      	lsls	r1, r2
 8000994:	fa20 f303 	lsr.w	r3, r0, r3
 8000998:	fa0c fc02 	lsl.w	ip, ip, r2
 800099c:	4319      	orrs	r1, r3
 800099e:	fa00 fe02 	lsl.w	lr, r0, r2
 80009a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a6:	fa1f f68c 	uxth.w	r6, ip
 80009aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80009ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b2:	fb07 1114 	mls	r1, r7, r4, r1
 80009b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ba:	fb04 f106 	mul.w	r1, r4, r6
 80009be:	4299      	cmp	r1, r3
 80009c0:	d90a      	bls.n	80009d8 <__udivmoddi4+0x64>
 80009c2:	eb1c 0303 	adds.w	r3, ip, r3
 80009c6:	f104 30ff 	add.w	r0, r4, #4294967295
 80009ca:	f080 8112 	bcs.w	8000bf2 <__udivmoddi4+0x27e>
 80009ce:	4299      	cmp	r1, r3
 80009d0:	f240 810f 	bls.w	8000bf2 <__udivmoddi4+0x27e>
 80009d4:	3c02      	subs	r4, #2
 80009d6:	4463      	add	r3, ip
 80009d8:	1a59      	subs	r1, r3, r1
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e2:	fb07 1110 	mls	r1, r7, r0, r1
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f606 	mul.w	r6, r0, r6
 80009ee:	429e      	cmp	r6, r3
 80009f0:	d90a      	bls.n	8000a08 <__udivmoddi4+0x94>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80009fa:	f080 80fc 	bcs.w	8000bf6 <__udivmoddi4+0x282>
 80009fe:	429e      	cmp	r6, r3
 8000a00:	f240 80f9 	bls.w	8000bf6 <__udivmoddi4+0x282>
 8000a04:	4463      	add	r3, ip
 8000a06:	3802      	subs	r0, #2
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a0e:	2100      	movs	r1, #0
 8000a10:	b11d      	cbz	r5, 8000a1a <__udivmoddi4+0xa6>
 8000a12:	40d3      	lsrs	r3, r2
 8000a14:	2200      	movs	r2, #0
 8000a16:	e9c5 3200 	strd	r3, r2, [r5]
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	428b      	cmp	r3, r1
 8000a20:	d905      	bls.n	8000a2e <__udivmoddi4+0xba>
 8000a22:	b10d      	cbz	r5, 8000a28 <__udivmoddi4+0xb4>
 8000a24:	e9c5 0100 	strd	r0, r1, [r5]
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e7f5      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a2e:	fab3 f183 	clz	r1, r3
 8000a32:	2900      	cmp	r1, #0
 8000a34:	d146      	bne.n	8000ac4 <__udivmoddi4+0x150>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d302      	bcc.n	8000a40 <__udivmoddi4+0xcc>
 8000a3a:	4290      	cmp	r0, r2
 8000a3c:	f0c0 80f0 	bcc.w	8000c20 <__udivmoddi4+0x2ac>
 8000a40:	1a86      	subs	r6, r0, r2
 8000a42:	eb64 0303 	sbc.w	r3, r4, r3
 8000a46:	2001      	movs	r0, #1
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d0e6      	beq.n	8000a1a <__udivmoddi4+0xa6>
 8000a4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000a50:	e7e3      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	f040 8090 	bne.w	8000b78 <__udivmoddi4+0x204>
 8000a58:	eba1 040c 	sub.w	r4, r1, ip
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	fa1f f78c 	uxth.w	r7, ip
 8000a64:	2101      	movs	r1, #1
 8000a66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000a72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a76:	fb07 f006 	mul.w	r0, r7, r6
 8000a7a:	4298      	cmp	r0, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x11c>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a86:	d202      	bcs.n	8000a8e <__udivmoddi4+0x11a>
 8000a88:	4298      	cmp	r0, r3
 8000a8a:	f200 80cd 	bhi.w	8000c28 <__udivmoddi4+0x2b4>
 8000a8e:	4626      	mov	r6, r4
 8000a90:	1a1c      	subs	r4, r3, r0
 8000a92:	fa1f f38e 	uxth.w	r3, lr
 8000a96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000a9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aa2:	fb00 f707 	mul.w	r7, r0, r7
 8000aa6:	429f      	cmp	r7, r3
 8000aa8:	d908      	bls.n	8000abc <__udivmoddi4+0x148>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab2:	d202      	bcs.n	8000aba <__udivmoddi4+0x146>
 8000ab4:	429f      	cmp	r7, r3
 8000ab6:	f200 80b0 	bhi.w	8000c1a <__udivmoddi4+0x2a6>
 8000aba:	4620      	mov	r0, r4
 8000abc:	1bdb      	subs	r3, r3, r7
 8000abe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac2:	e7a5      	b.n	8000a10 <__udivmoddi4+0x9c>
 8000ac4:	f1c1 0620 	rsb	r6, r1, #32
 8000ac8:	408b      	lsls	r3, r1
 8000aca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ace:	431f      	orrs	r7, r3
 8000ad0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ad4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ad8:	ea43 030c 	orr.w	r3, r3, ip
 8000adc:	40f4      	lsrs	r4, r6
 8000ade:	fa00 f801 	lsl.w	r8, r0, r1
 8000ae2:	0c38      	lsrs	r0, r7, #16
 8000ae4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ae8:	fbb4 fef0 	udiv	lr, r4, r0
 8000aec:	fa1f fc87 	uxth.w	ip, r7
 8000af0:	fb00 441e 	mls	r4, r0, lr, r4
 8000af4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000af8:	fb0e f90c 	mul.w	r9, lr, ip
 8000afc:	45a1      	cmp	r9, r4
 8000afe:	fa02 f201 	lsl.w	r2, r2, r1
 8000b02:	d90a      	bls.n	8000b1a <__udivmoddi4+0x1a6>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b0a:	f080 8084 	bcs.w	8000c16 <__udivmoddi4+0x2a2>
 8000b0e:	45a1      	cmp	r9, r4
 8000b10:	f240 8081 	bls.w	8000c16 <__udivmoddi4+0x2a2>
 8000b14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b18:	443c      	add	r4, r7
 8000b1a:	eba4 0409 	sub.w	r4, r4, r9
 8000b1e:	fa1f f983 	uxth.w	r9, r3
 8000b22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b26:	fb00 4413 	mls	r4, r0, r3, r4
 8000b2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b32:	45a4      	cmp	ip, r4
 8000b34:	d907      	bls.n	8000b46 <__udivmoddi4+0x1d2>
 8000b36:	193c      	adds	r4, r7, r4
 8000b38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b3c:	d267      	bcs.n	8000c0e <__udivmoddi4+0x29a>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0x29a>
 8000b42:	3b02      	subs	r3, #2
 8000b44:	443c      	add	r4, r7
 8000b46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b4e:	eba4 040c 	sub.w	r4, r4, ip
 8000b52:	429c      	cmp	r4, r3
 8000b54:	46ce      	mov	lr, r9
 8000b56:	469c      	mov	ip, r3
 8000b58:	d351      	bcc.n	8000bfe <__udivmoddi4+0x28a>
 8000b5a:	d04e      	beq.n	8000bfa <__udivmoddi4+0x286>
 8000b5c:	b155      	cbz	r5, 8000b74 <__udivmoddi4+0x200>
 8000b5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000b62:	eb64 040c 	sbc.w	r4, r4, ip
 8000b66:	fa04 f606 	lsl.w	r6, r4, r6
 8000b6a:	40cb      	lsrs	r3, r1
 8000b6c:	431e      	orrs	r6, r3
 8000b6e:	40cc      	lsrs	r4, r1
 8000b70:	e9c5 6400 	strd	r6, r4, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	e750      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000b78:	f1c2 0320 	rsb	r3, r2, #32
 8000b7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	fa24 f303 	lsr.w	r3, r4, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	430c      	orrs	r4, r1
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b94:	fa1f f78c 	uxth.w	r7, ip
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000ba0:	0c23      	lsrs	r3, r4, #16
 8000ba2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba6:	fb00 f107 	mul.w	r1, r0, r7
 8000baa:	4299      	cmp	r1, r3
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x24c>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bb6:	d22c      	bcs.n	8000c12 <__udivmoddi4+0x29e>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d92a      	bls.n	8000c12 <__udivmoddi4+0x29e>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb01 f307 	mul.w	r3, r1, r7
 8000bd4:	42a3      	cmp	r3, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x276>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000be0:	d213      	bcs.n	8000c0a <__udivmoddi4+0x296>
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	d911      	bls.n	8000c0a <__udivmoddi4+0x296>
 8000be6:	3902      	subs	r1, #2
 8000be8:	4464      	add	r4, ip
 8000bea:	1ae4      	subs	r4, r4, r3
 8000bec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bf0:	e739      	b.n	8000a66 <__udivmoddi4+0xf2>
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	e6f0      	b.n	80009d8 <__udivmoddi4+0x64>
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	e706      	b.n	8000a08 <__udivmoddi4+0x94>
 8000bfa:	45c8      	cmp	r8, r9
 8000bfc:	d2ae      	bcs.n	8000b5c <__udivmoddi4+0x1e8>
 8000bfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c06:	3801      	subs	r0, #1
 8000c08:	e7a8      	b.n	8000b5c <__udivmoddi4+0x1e8>
 8000c0a:	4631      	mov	r1, r6
 8000c0c:	e7ed      	b.n	8000bea <__udivmoddi4+0x276>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	e799      	b.n	8000b46 <__udivmoddi4+0x1d2>
 8000c12:	4630      	mov	r0, r6
 8000c14:	e7d4      	b.n	8000bc0 <__udivmoddi4+0x24c>
 8000c16:	46d6      	mov	lr, sl
 8000c18:	e77f      	b.n	8000b1a <__udivmoddi4+0x1a6>
 8000c1a:	4463      	add	r3, ip
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	e74d      	b.n	8000abc <__udivmoddi4+0x148>
 8000c20:	4606      	mov	r6, r0
 8000c22:	4623      	mov	r3, r4
 8000c24:	4608      	mov	r0, r1
 8000c26:	e70f      	b.n	8000a48 <__udivmoddi4+0xd4>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	e730      	b.n	8000a90 <__udivmoddi4+0x11c>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_idiv0>:
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <_ZN8rxData_tC1Ev>:
    uint8_t jointEnable;
    uint16_t outputs;
    uint8_t spare0;
  };

  rxData_t() {
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
      header = 0;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
      outputs = 0;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      jointEnable = 0;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e008      	b.n	8000c70 <_ZN8rxData_tC1Ev+0x3c>
         jointFreqCmd[i] = 0;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	d9f3      	bls.n	8000c5e <_ZN8rxData_tC1Ev+0x2a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	73bb      	strb	r3, [r7, #14]
 8000c7a:	e00b      	b.n	8000c94 <_ZN8rxData_tC1Ev+0x60>
         setPoint[i] = 0.0;
 8000c7c:	7bbb      	ldrb	r3, [r7, #14]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	3308      	adds	r3, #8
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	3304      	adds	r3, #4
 8000c88:	f04f 0200 	mov.w	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	3301      	adds	r3, #1
 8000c92:	73bb      	strb	r3, [r7, #14]
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	2b05      	cmp	r3, #5
 8000c98:	d9f0      	bls.n	8000c7c <_ZN8rxData_tC1Ev+0x48>
     }
  }
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	4798      	blx	r3
    }
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf0c      	ite	eq
 8000cde:	2301      	moveq	r3, #1
 8000ce0:	2300      	movne	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <_ZNK6Module17getUsesModulePostEv>:
		virtual void update();		// the standard interface for update of the module - use for stepgen, PWM etc
		virtual void updatePost();
		virtual void slowUpdate();	// the standard interface for the slow update - use for PID controller etc
        virtual void configure();   // the standard interface for one off configuration

        virtual bool getUsesModulePost() const { return usesModulePost; }
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7d1b      	ldrb	r3, [r3, #20]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>:

  size_t size() const {
    return size_;
  }

  char operator[](size_t i) const {
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
  }
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_ZN14DMA_RxBuffer_tC1Ev>:
} __attribute__((aligned(32))) txData_t;


typedef struct {
    volatile rxData_t buffer[2]; // DMA RX buffers
} DMA_RxBuffer_t;
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2401      	movs	r4, #1
 8000d34:	461d      	mov	r5, r3
 8000d36:	e004      	b.n	8000d42 <_ZN14DMA_RxBuffer_tC1Ev+0x1a>
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f7ff ff7b 	bl	8000c34 <_ZN8rxData_tC1Ev>
 8000d3e:	3c01      	subs	r4, #1
 8000d40:	3540      	adds	r5, #64	@ 0x40
 8000d42:	2c00      	cmp	r4, #0
 8000d44:	daf8      	bge.n	8000d38 <_ZN14DMA_RxBuffer_tC1Ev+0x10>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bdb0      	pop	{r4, r5, r7, pc}

08000d50 <_ZNSt8functionIFvbEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ffa4 	bl	8000ca8 <_ZNSt14_Function_baseD1Ev>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <_ZN14CommsInterfaceD1Ev>:

#include <functional>

#include "../../modules/module.h"

class CommsInterface : public Module {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <_ZN14CommsInterfaceD1Ev+0x2c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3318      	adds	r3, #24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ffe6 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00c fee2 	bl	800db50 <_ZN6ModuleD1Ev>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	0801f4b4 	.word	0x0801f4b4

08000d9c <_ZN14CommsInterfaceD0Ev>:
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ffe1 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000daa:	2128      	movs	r1, #40	@ 0x28
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f01c fb52 	bl	801d456 <_ZdlPvj>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>:
#include "SPIComms.h"

__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;


SPIComms::SPIComms(volatile rxData_t* _ptrRxData, volatile txData_t* _ptrTxData, SPI_TypeDef* _spiType) :
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
	ptrRxData(_ptrRxData),
	ptrTxData(_ptrTxData),
	spiType(_spiType)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 f9ab 	bl	8002128 <_ZN14CommsInterfaceC1Ev>
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x60>)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	601a      	str	r2, [r3, #0]
	ptrRxData(_ptrRxData),
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	629a      	str	r2, [r3, #40]	@ 0x28
	ptrTxData(_ptrTxData),
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	62da      	str	r2, [r3, #44]	@ 0x2c
	spiType(_spiType)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	635a      	str	r2, [r3, #52]	@ 0x34
{
    spiHandle.Instance = spiType;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	651a      	str	r2, [r3, #80]	@ 0x50
    ptrRxDMABuffer = &rxDMABuffer;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x64>)
 8000df6:	631a      	str	r2, [r3, #48]	@ 0x30

    irqNss = EXTI4_IRQn;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	220a      	movs	r2, #10
 8000dfc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    irqDMAtx = DMA1_Stream0_IRQn;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	220b      	movs	r2, #11
 8000e04:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    irqDMArx = DMA1_Stream1_IRQn;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
}
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	0801f484 	.word	0x0801f484
 8000e20:	30000000 	.word	0x30000000

08000e24 <_ZN8SPICommsD1Ev>:

SPIComms::~SPIComms() {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <_ZN8SPICommsD1Ev+0x20>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	601a      	str	r2, [r3, #0]

}
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff99 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	0801f484 	.word	0x0801f484

08000e48 <_ZN8SPICommsD0Ev>:
SPIComms::~SPIComms() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
}
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ffe7 	bl	8000e24 <_ZN8SPICommsD1Ev>
 8000e56:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f01c fafb 	bl	801d456 <_ZdlPvj>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <_ZN8SPIComms4initEv>:

void SPIComms::init() {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]

    if(spiHandle.Instance == SPI1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e88:	4ab1      	ldr	r2, [pc, #708]	@ (8001150 <_ZN8SPIComms4initEv+0x2e4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	f040 815c 	bne.w	8001148 <_ZN8SPIComms4initEv+0x2dc>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e90:	4bb0      	ldr	r3, [pc, #704]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e96:	4aaf      	ldr	r2, [pc, #700]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea0:	4bac      	ldr	r3, [pc, #688]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eae:	2310      	movs	r3, #16
 8000eb0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	48a5      	ldr	r0, [pc, #660]	@ (8001158 <_ZN8SPIComms4initEv+0x2ec>)
 8000ec4:	f012 fac8 	bl	8013458 <HAL_GPIO_Init>

        printf("	Initialising SPI1 slave\n");
 8000ec8:	48a4      	ldr	r0, [pc, #656]	@ (800115c <_ZN8SPIComms4initEv+0x2f0>)
 8000eca:	f01c ffd3 	bl	801de74 <puts>

        spiHandle.Init.Mode           			= SPI_MODE_SLAVE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	655a      	str	r2, [r3, #84]	@ 0x54
        spiHandle.Init.Direction      			= SPI_DIRECTION_2LINES;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	659a      	str	r2, [r3, #88]	@ 0x58
        spiHandle.Init.DataSize       			= SPI_DATASIZE_8BIT;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2207      	movs	r2, #7
 8000ede:	65da      	str	r2, [r3, #92]	@ 0x5c
        spiHandle.Init.CLKPolarity    			= SPI_POLARITY_LOW;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	661a      	str	r2, [r3, #96]	@ 0x60
        spiHandle.Init.CLKPhase       			= SPI_PHASE_1EDGE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	665a      	str	r2, [r3, #100]	@ 0x64
        spiHandle.Init.NSS            			= SPI_NSS_HARD_INPUT;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	669a      	str	r2, [r3, #104]	@ 0x68
        spiHandle.Init.FirstBit       			= SPI_FIRSTBIT_MSB;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	671a      	str	r2, [r3, #112]	@ 0x70
        spiHandle.Init.TIMode         			= SPI_TIMODE_DISABLE;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	675a      	str	r2, [r3, #116]	@ 0x74
        spiHandle.Init.CRCCalculation 			= SPI_CRCCALCULATION_DISABLE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	679a      	str	r2, [r3, #120]	@ 0x78
        spiHandle.Init.CRCPolynomial  			= 0x0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	67da      	str	r2, [r3, #124]	@ 0x7c
        spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        spiHandle.Init.NSSPolarity 				= SPI_NSS_POLARITY_LOW;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        spiHandle.Init.MasterInterDataIdleness 	= SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        spiHandle.Init.MasterReceiverAutoSusp 	= SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        spiHandle.Init.IOSwap 					= SPI_IO_SWAP_DISABLE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

        HAL_SPI_Init(&this->spiHandle);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3350      	adds	r3, #80	@ 0x50
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f017 fdde 	bl	8018b20 <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 8000f64:	4b7b      	ldr	r3, [pc, #492]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f6a:	4a7a      	ldr	r2, [pc, #488]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f74:	4b77      	ldr	r3, [pc, #476]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

		printf("	Initialising GPIO for SPI\n");
 8000f82:	4877      	ldr	r0, [pc, #476]	@ (8001160 <_ZN8SPIComms4initEv+0x2f4>)
 8000f84:	f01c ff76 	bl	801de74 <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b72      	ldr	r3, [pc, #456]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	4a71      	ldr	r2, [pc, #452]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f98:	4b6e      	ldr	r3, [pc, #440]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fb6:	23f0      	movs	r3, #240	@ 0xf0
 8000fb8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4861      	ldr	r0, [pc, #388]	@ (8001158 <_ZN8SPIComms4initEv+0x2ec>)
 8000fd2:	f012 fa41 	bl	8013458 <HAL_GPIO_Init>

        printf("	Initialising DMA for SPI\n");
 8000fd6:	4863      	ldr	r0, [pc, #396]	@ (8001164 <_ZN8SPIComms4initEv+0x2f8>)
 8000fd8:	f01c ff4c 	bl	801de74 <puts>

        hdma_spi_tx.Instance 					= DMA1_Stream0;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a62      	ldr	r2, [pc, #392]	@ (8001168 <_ZN8SPIComms4initEv+0x2fc>)
 8000fe0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2226      	movs	r2, #38	@ 0x26
 8000fe8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        hdma_spi_tx.Init.Direction 				= DMA_MEMORY_TO_PERIPH;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2240      	movs	r2, #64	@ 0x40
 8000ff0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        hdma_spi_tx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001002:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        hdma_spi_tx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        hdma_spi_tx.Init.Mode 					= DMA_CIRCULAR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800101c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        hdma_spi_tx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        hdma_spi_tx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

        HAL_DMA_Init(&hdma_spi_tx);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	33d8      	adds	r3, #216	@ 0xd8
 8001034:	4618      	mov	r0, r3
 8001036:	f00f fecf 	bl	8010dd8 <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmatx, hdma_spi_tx);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

        hdma_spi_rx.Instance 					= DMA1_Stream1;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a45      	ldr	r2, [pc, #276]	@ (800116c <_ZN8SPIComms4initEv+0x300>)
 8001056:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
        hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2225      	movs	r2, #37	@ 0x25
 800105e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        hdma_spi_rx.Init.Direction 				= DMA_PERIPH_TO_MEMORY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
        hdma_spi_rx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
        hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001078:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        hdma_spi_rx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        hdma_spi_rx.Init.Mode 					= DMA_CIRCULAR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001092:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        hdma_spi_rx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        hdma_spi_rx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174

        HAL_DMA_Init(&hdma_spi_rx);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80010ac:	4618      	mov	r0, r3
 80010ae:	f00f fe93 	bl	8010dd8 <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmarx, hdma_spi_rx);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f503 72a8 	add.w	r2, r3, #336	@ 0x150
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188

        printf("	Initialising DMA for Memory to Memory transfer\n");
 80010ca:	4829      	ldr	r0, [pc, #164]	@ (8001170 <_ZN8SPIComms4initEv+0x304>)
 80010cc:	f01c fed2 	bl	801de74 <puts>

        hdma_memtomem.Instance 					= DMA1_Stream2;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a28      	ldr	r2, [pc, #160]	@ (8001174 <_ZN8SPIComms4initEv+0x308>)
 80010d4:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
        hdma_memtomem.Init.Request 				= DMA_REQUEST_MEM2MEM;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
        hdma_memtomem.Init.Direction 			= DMA_MEMORY_TO_MEMORY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
        hdma_memtomem.Init.PeriphInc 			= DMA_PINC_ENABLE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ee:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
        hdma_memtomem.Init.MemInc 				= DMA_MINC_ENABLE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f8:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
        hdma_memtomem.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc
        hdma_memtomem.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        hdma_memtomem.Init.Mode 				= DMA_NORMAL;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        hdma_memtomem.Init.Priority 			= DMA_PRIORITY_LOW;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
        hdma_memtomem.Init.FIFOMode 			= DMA_FIFOMODE_ENABLE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2204      	movs	r2, #4
 8001120:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        hdma_memtomem.Init.FIFOThreshold 		= DMA_FIFO_THRESHOLD_FULL;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2203      	movs	r2, #3
 8001128:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
        hdma_memtomem.Init.MemBurst 			= DMA_MBURST_SINGLE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
        hdma_memtomem.Init.PeriphBurst 			= DMA_PBURST_SINGLE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8

        HAL_DMA_Init(&hdma_memtomem);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001142:	4618      	mov	r0, r3
 8001144:	f00f fe48 	bl	8010dd8 <HAL_DMA_Init>
    }
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	@ 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40013000 	.word	0x40013000
 8001154:	58024400 	.word	0x58024400
 8001158:	58020000 	.word	0x58020000
 800115c:	0801eb48 	.word	0x0801eb48
 8001160:	0801eb64 	.word	0x0801eb64
 8001164:	0801eb80 	.word	0x0801eb80
 8001168:	40020010 	.word	0x40020010
 800116c:	40020028 	.word	0x40020028
 8001170:	0801eb9c 	.word	0x0801eb9c
 8001174:	40020040 	.word	0x40020040

08001178 <_ZN8SPIComms5startEv>:

void SPIComms::start() {
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b08f      	sub	sp, #60	@ 0x3c
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
    // Register the NSS (slave select) interrupt
    NssInterrupt = new ModuleInterrupt<SPIComms>(
        irqNss,
        this,
        &SPIComms::handleNssInterrupt
    );
 8001180:	2010      	movs	r0, #16
 8001182:	f01c f979 	bl	801d478 <_Znwj>
 8001186:	4603      	mov	r3, r0
 8001188:	461c      	mov	r4, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	@ 0x48
 8001190:	4b6d      	ldr	r3, [pc, #436]	@ (8001348 <_ZN8SPIComms5startEv+0x1d0>)
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4620      	mov	r0, r4
 80011a2:	f000 fec5 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    NssInterrupt = new ModuleInterrupt<SPIComms>(
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	63dc      	str	r4, [r3, #60]	@ 0x3c
    HAL_NVIC_SetPriority(irqNss, Config::spiNssIrqPriority, 0);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011b0:	2200      	movs	r2, #0
 80011b2:	2106      	movs	r1, #6
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00f fd5e 	bl	8010c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqNss);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011c0:	4618      	mov	r0, r3
 80011c2:	f00f fd72 	bl	8010caa <HAL_NVIC_EnableIRQ>
    // Register the DMA Rx interrupt
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMArx,
        this,
        &SPIComms::handleRxInterrupt
    );
 80011c6:	2010      	movs	r0, #16
 80011c8:	f01c f956 	bl	801d478 <_Znwj>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461c      	mov	r4, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f9b3 104a 	ldrsh.w	r1, [r3, #74]	@ 0x4a
 80011d6:	4b5d      	ldr	r3, [pc, #372]	@ (800134c <_ZN8SPIComms5startEv+0x1d4>)
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4620      	mov	r0, r4
 80011e8:	f000 fea2 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	645c      	str	r4, [r3, #68]	@ 0x44
    HAL_NVIC_SetPriority(irqDMArx, Config::spiDmaRxIrqPriority, 0);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 80011f6:	2200      	movs	r2, #0
 80011f8:	2105      	movs	r1, #5
 80011fa:	4618      	mov	r0, r3
 80011fc:	f00f fd3b 	bl	8010c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMArx);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001206:	4618      	mov	r0, r3
 8001208:	f00f fd4f 	bl	8010caa <HAL_NVIC_EnableIRQ>
    // Register the DMA Tx interrupt
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMAtx,
        this,
        &SPIComms::handleTxInterrupt
    );
 800120c:	2010      	movs	r0, #16
 800120e:	f01c f933 	bl	801d478 <_Znwj>
 8001212:	4603      	mov	r3, r0
 8001214:	461c      	mov	r4, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f9b3 104c 	ldrsh.w	r1, [r3, #76]	@ 0x4c
 800121c:	4b4c      	ldr	r3, [pc, #304]	@ (8001350 <_ZN8SPIComms5startEv+0x1d8>)
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4620      	mov	r0, r4
 800122e:	f000 fe7f 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641c      	str	r4, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(irqDMAtx, Config::spiDmaTxIrqPriority, 0); // TX needs higher priority than RX
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800123c:	2200      	movs	r2, #0
 800123e:	2104      	movs	r1, #4
 8001240:	4618      	mov	r0, r3
 8001242:	f00f fd18 	bl	8010c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMAtx);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800124c:	4618      	mov	r0, r3
 800124e:	f00f fd2c 	bl	8010caa <HAL_NVIC_EnableIRQ>

    // Initialize the data buffers
    std::fill(std::begin(ptrTxData->txBuffer), std::end(ptrTxData->txBuffer), 0);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fe96 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 800125c:	4604      	mov	r4, r0
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fe9b 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001268:	4601      	mov	r1, r0
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	461a      	mov	r2, r3
 8001274:	4620      	mov	r0, r4
 8001276:	f000 fe9e 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxData->rxBuffer), std::end(ptrRxData->rxBuffer), 0);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fe82 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 8001284:	4604      	mov	r4, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fe87 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001290:	4601      	mov	r1, r0
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129a:	461a      	mov	r2, r3
 800129c:	4620      	mov	r0, r4
 800129e:	f000 fe8a 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[0].rxBuffer), std::end(ptrRxDMABuffer->buffer[0].rxBuffer), 0);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fe6e 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012ac:	4604      	mov	r4, r0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fe73 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012b8:	4601      	mov	r1, r0
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c2:	461a      	mov	r2, r3
 80012c4:	4620      	mov	r0, r4
 80012c6:	f000 fe76 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[1].rxBuffer), std::end(ptrRxDMABuffer->buffer[1].rxBuffer), 0);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	3340      	adds	r3, #64	@ 0x40
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fe59 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012d6:	4604      	mov	r4, r0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	3340      	adds	r3, #64	@ 0x40
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fe5d 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012e4:	4601      	mov	r1, r0
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ee:	461a      	mov	r2, r3
 80012f0:	4620      	mov	r0, r4
 80012f2:	f000 fe60 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>

    ptrTxData->header = Config::pruData;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fa:	4a16      	ldr	r2, [pc, #88]	@ (8001354 <_ZN8SPIComms5startEv+0x1dc>)
 80012fc:	601a      	str	r2, [r3, #0]

    // Start the multi-buffer DMA SPI communication
    dmaStatus = startMultiBufferDMASPI(
        (uint8_t*)ptrTxData->txBuffer,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001302:	4619      	mov	r1, r3
        (uint8_t*)ptrTxData->txBuffer,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001308:	4618      	mov	r0, r3
        (uint8_t*)ptrRxDMABuffer->buffer[0].rxBuffer,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	461c      	mov	r4, r3
        (uint8_t*)ptrRxDMABuffer->buffer[1].rxBuffer,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	3340      	adds	r3, #64	@ 0x40
    dmaStatus = startMultiBufferDMASPI(
 8001316:	2240      	movs	r2, #64	@ 0x40
 8001318:	9201      	str	r2, [sp, #4]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4623      	mov	r3, r4
 800131e:	4602      	mov	r2, r0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f81b 	bl	800135c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
        Config::dataBuffSize
    );

    // Check for DMA initialization errors
    if (dmaStatus != HAL_OK) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <_ZN8SPIComms5startEv+0x1c8>
        printf("DMA SPI error\n");
 800133a:	4807      	ldr	r0, [pc, #28]	@ (8001358 <_ZN8SPIComms5startEv+0x1e0>)
 800133c:	f01c fd9a 	bl	801de74 <puts>
    }
}
 8001340:	bf00      	nop
 8001342:	3734      	adds	r7, #52	@ 0x34
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	08001d7f 	.word	0x08001d7f
 800134c:	08001dd5 	.word	0x08001dd5
 8001350:	08001dad 	.word	0x08001dad
 8001354:	64617461 	.word	0x64617461
 8001358:	0801ebcc 	.word	0x0801ebcc

0800135c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>:

HAL_StatusTypeDef SPIComms::startMultiBufferDMASPI(uint8_t *pTxBuffer0, uint8_t *pTxBuffer1,
                                                   uint8_t *pRxBuffer0, uint8_t *pRxBuffer1,
                                                   uint16_t Size)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b087      	sub	sp, #28
 8001360:	af02      	add	r7, sp, #8
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
    /* Check Direction parameter */
    assert_param(IS_SPI_DIRECTION_2LINES(spiHandle.Init.Direction));

    if (spiHandle.State != HAL_SPI_STATE_READY)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b01      	cmp	r3, #1
 8001374:	bf14      	ite	ne
 8001376:	2301      	movne	r3, #1
 8001378:	2300      	moveq	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x28>
    {
        return HAL_BUSY;
 8001380:	2302      	movs	r3, #2
 8001382:	e13e      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    if ((pTxBuffer0 == NULL) || (pRxBuffer0 == NULL) || (Size == 0UL))
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 8001390:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3e>
    {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e133      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* If secondary Tx or Rx buffer is not provided, use the primary buffer */
    if (pTxBuffer1 == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x48>
    {
        pTxBuffer1 = pTxBuffer0;
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	607b      	str	r3, [r7, #4]
    }

    if (pRxBuffer1 == NULL)
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x52>
    {
        pRxBuffer1 = pRxBuffer0;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	623b      	str	r3, [r7, #32]
    }

    /* Lock the process */
    __HAL_LOCK(&spiHandle);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x60>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e122      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    /* Set the transaction information */
    spiHandle.State       = HAL_SPI_STATE_BUSY_TX_RX;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2205      	movs	r2, #5
 80013c8:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
    spiHandle.ErrorCode   = HAL_SPI_ERROR_NONE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    spiHandle.TxXferSize  = Size;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013d8:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    spiHandle.TxXferCount = Size;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e0:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
    spiHandle.RxXferSize  = Size;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e8:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
    spiHandle.RxXferCount = Size;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013f0:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba

    /* Init unused fields in handle to zero */
    spiHandle.RxISR       = NULL;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    spiHandle.TxISR       = NULL;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

    /* Set Full-Duplex mode */
    SPI_2LINES(&spiHandle);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800140e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8001412:	60da      	str	r2, [r3, #12]

    /* Reset the Tx/Rx DMA bits */
    CLEAR_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800141e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8001422:	609a      	str	r2, [r3, #8]

    /* Adjust XferCount according to DMA alignment / Data size */
    if (spiHandle.Init.DataSize <= SPI_DATASIZE_8BIT)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001428:	2b07      	cmp	r3, #7
 800142a:	d820      	bhi.n	800146e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x112>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001436:	d109      	bne.n	800144c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0xf0>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 800143e:	b29b      	uxth	r3, r3
 8001440:	3301      	adds	r3, #1
 8001442:	085b      	lsrs	r3, r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001456:	d12e      	bne.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800145e:	b29b      	uxth	r3, r3
 8001460:	3301      	adds	r3, #1
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	b29a      	uxth	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
 800146c:	e023      	b.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        }
    }
    else if (spiHandle.Init.DataSize <= SPI_DATASIZE_16BIT)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001472:	2b0f      	cmp	r3, #15
 8001474:	d81f      	bhi.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800147c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001480:	d109      	bne.n	8001496 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x13a>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8001488:	b29b      	uxth	r3, r3
 800148a:	3301      	adds	r3, #1
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800149c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80014a0:	d109      	bne.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3301      	adds	r3, #1
 80014ac:	085b      	lsrs	r3, r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
        }
    }

    /* Configure Tx DMA with Multi-Buffer */
    hdma_spi_tx.XferHalfCpltCallback = NULL;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    hdma_spi_tx.XferCpltCallback     = NULL;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    hdma_spi_tx.XferErrorCallback    = NULL;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 80014d4:	68b9      	ldr	r1, [r7, #8]
                                                (uint32_t)pTxBuffer0,
                                                (uint32_t)&spiHandle.Instance->TXDR,
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014da:	3320      	adds	r3, #32
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014dc:	461c      	mov	r4, r3
 80014de:	687a      	ldr	r2, [r7, #4]
                                                (uint32_t)pTxBuffer1,
                                                spiHandle.TxXferCount))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 80014e6:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4613      	mov	r3, r2
 80014ec:	4622      	mov	r2, r4
 80014ee:	f011 fb9f 	bl	8012c30 <HAL_DMAEx_MultiBufferStart_IT>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf14      	ite	ne
 80014f8:	2301      	movne	r3, #1
 80014fa:	2300      	moveq	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x1b2>
    {
        __HAL_UNLOCK(&spiHandle);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e079      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure Rx DMA with Multi-Buffer */
    hdma_spi_rx.XferHalfCpltCallback = NULL;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    hdma_spi_rx.XferCpltCallback     = NULL;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    hdma_spi_rx.XferErrorCallback    = NULL;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f503 70a8 	add.w	r0, r3, #336	@ 0x150
                                                (uint32_t)&spiHandle.Instance->RXDR,
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001530:	3330      	adds	r3, #48	@ 0x30
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001532:	461c      	mov	r4, r3
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	6a39      	ldr	r1, [r7, #32]
                                                (uint32_t)pRxBuffer0,
                                                (uint32_t)pRxBuffer1,
                                                spiHandle.RxXferCount))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800153e:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	460b      	mov	r3, r1
 8001544:	4621      	mov	r1, r4
 8001546:	f011 fb73 	bl	8012c30 <HAL_DMAEx_MultiBufferStart_IT>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf14      	ite	ne
 8001550:	2301      	movne	r3, #1
 8001552:	2300      	moveq	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00a      	beq.n	8001570 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x214>
    {
        (void)HAL_DMA_Abort(&hdma_spi_tx);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	33d8      	adds	r3, #216	@ 0xd8
 800155e:	4618      	mov	r0, r3
 8001560:	f010 f8b6 	bl	80116d0 <HAL_DMA_Abort>
        __HAL_UNLOCK(&spiHandle);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e048      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure SPI TSIZE for full transfer or circular mode */
    if (hdma_spi_rx.Init.Mode == DMA_CIRCULAR || hdma_spi_tx.Init.Mode == DMA_CIRCULAR)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8001576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800157a:	d005      	beq.n	8001588 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x22c>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001586:	d108      	bne.n	800159a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x23e>
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800158c:	6859      	ldr	r1, [r3, #4]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 8001594:	400b      	ands	r3, r1
 8001596:	6053      	str	r3, [r2, #4]
 8001598:	e009      	b.n	80015ae <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x252>
    }
    else
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, Size);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015aa:	430b      	orrs	r3, r1
 80015ac:	6053      	str	r3, [r2, #4]
    }

    /* Enable Tx and Rx DMA Requests */
    SET_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80015bc:	609a      	str	r2, [r3, #8]

    /* Enable SPI error interrupt */
    __HAL_SPI_ENABLE_IT(&spiHandle, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c8:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 80015cc:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&spiHandle);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

    if (spiHandle.Init.Mode == SPI_MODE_MASTER)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015e6:	d107      	bne.n	80015f8 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x29c>
    {
        SET_BIT(spiHandle.Instance->CR1, SPI_CR1_CSTART);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015f6:	601a      	str	r2, [r3, #0]
    }

    __HAL_UNLOCK(&spiHandle);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bd90      	pop	{r4, r7, pc}
 800160a:	bf00      	nop
 800160c:	ffff0000 	.word	0xffff0000

08001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>:

int SPIComms::DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr_dma;
  int interrupt;

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161e:	613b      	str	r3, [r7, #16]

  tmpisr_dma  = regs_dma->ISR;
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a5a      	ldr	r2, [pc, #360]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d04a      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a58      	ldr	r2, [pc, #352]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d045      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a57      	ldr	r2, [pc, #348]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d040      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a55      	ldr	r2, [pc, #340]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d03b      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a54      	ldr	r2, [pc, #336]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d036      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a52      	ldr	r2, [pc, #328]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d031      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a51      	ldr	r2, [pc, #324]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d02c      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a4f      	ldr	r2, [pc, #316]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d027      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a4e      	ldr	r2, [pc, #312]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d022      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a4c      	ldr	r2, [pc, #304]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01d      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a4b      	ldr	r2, [pc, #300]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d018      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a49      	ldr	r2, [pc, #292]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a48      	ldr	r2, [pc, #288]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d00e      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a46      	ldr	r2, [pc, #280]	@ (80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d009      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a45      	ldr	r2, [pc, #276]	@ (80017cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d004      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a43      	ldr	r2, [pc, #268]	@ (80017d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xba>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xbc>
 80016ca:	2300      	movs	r3, #0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 8338 	beq.w	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	2208      	movs	r2, #8
 80016dc:	409a      	lsls	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 809a 	beq.w	800181c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a29      	ldr	r2, [pc, #164]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d04a      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a28      	ldr	r2, [pc, #160]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d045      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a26      	ldr	r2, [pc, #152]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d040      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a25      	ldr	r2, [pc, #148]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d03b      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a23      	ldr	r2, [pc, #140]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d036      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a22      	ldr	r2, [pc, #136]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d031      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a20      	ldr	r2, [pc, #128]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d02c      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1f      	ldr	r2, [pc, #124]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d027      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1d      	ldr	r2, [pc, #116]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d022      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a1c      	ldr	r2, [pc, #112]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d01d      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1a      	ldr	r2, [pc, #104]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d018      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a19      	ldr	r2, [pc, #100]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d013      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00e      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a16      	ldr	r2, [pc, #88]	@ (80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d009      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a14      	ldr	r2, [pc, #80]	@ (80017cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d004      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a13      	ldr	r2, [pc, #76]	@ (80017d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d125      	bne.n	80017d4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c4>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	e024      	b.n	80017de <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ce>
 8001794:	40020010 	.word	0x40020010
 8001798:	40020028 	.word	0x40020028
 800179c:	40020040 	.word	0x40020040
 80017a0:	40020058 	.word	0x40020058
 80017a4:	40020070 	.word	0x40020070
 80017a8:	40020088 	.word	0x40020088
 80017ac:	400200a0 	.word	0x400200a0
 80017b0:	400200b8 	.word	0x400200b8
 80017b4:	40020410 	.word	0x40020410
 80017b8:	40020428 	.word	0x40020428
 80017bc:	40020440 	.word	0x40020440
 80017c0:	40020458 	.word	0x40020458
 80017c4:	40020470 	.word	0x40020470
 80017c8:	40020488 	.word	0x40020488
 80017cc:	400204a0 	.word	0x400204a0
 80017d0:	400204b8 	.word	0x400204b8
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf14      	ite	ne
 80017e2:	2301      	movne	r3, #1
 80017e4:	2300      	moveq	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d017      	beq.n	800181c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0204 	bic.w	r2, r2, #4
 80017fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	2208      	movs	r2, #8
 8001806:	409a      	lsls	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001818:	2303      	movs	r3, #3
 800181a:	617b      	str	r3, [r7, #20]
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d070      	beq.n	8001914 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a68      	ldr	r2, [pc, #416]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d04a      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a66      	ldr	r2, [pc, #408]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d045      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a65      	ldr	r2, [pc, #404]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d040      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a63      	ldr	r2, [pc, #396]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d03b      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a62      	ldr	r2, [pc, #392]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d036      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a60      	ldr	r2, [pc, #384]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d031      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a5f      	ldr	r2, [pc, #380]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d02c      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a5d      	ldr	r2, [pc, #372]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d027      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a5c      	ldr	r2, [pc, #368]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d022      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5a      	ldr	r2, [pc, #360]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d01d      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a59      	ldr	r2, [pc, #356]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d018      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a57      	ldr	r2, [pc, #348]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a56      	ldr	r2, [pc, #344]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00e      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a54      	ldr	r2, [pc, #336]	@ (8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d009      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a53      	ldr	r2, [pc, #332]	@ (8001a10 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d004      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a51      	ldr	r2, [pc, #324]	@ (8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d105      	bne.n	80018de <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2ce>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018dc:	e003      	b.n	80018e6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2d6>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2300      	movs	r3, #0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf14      	ite	ne
 80018ea:	2301      	movne	r3, #1
 80018ec:	2300      	moveq	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00f      	beq.n	8001914 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	2201      	movs	r2, #1
 80018fe:	409a      	lsls	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001908:	f043 0202 	orr.w	r2, r3, #2
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001910:	2303      	movs	r3, #3
 8001912:	617b      	str	r3, [r7, #20]
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	2204      	movs	r2, #4
 800191e:	409a      	lsls	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8092 	beq.w	8001a4e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2a      	ldr	r2, [pc, #168]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d04a      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a28      	ldr	r2, [pc, #160]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d045      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a27      	ldr	r2, [pc, #156]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d040      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a25      	ldr	r2, [pc, #148]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d03b      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a24      	ldr	r2, [pc, #144]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d036      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a22      	ldr	r2, [pc, #136]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d031      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a21      	ldr	r2, [pc, #132]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d02c      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1f      	ldr	r2, [pc, #124]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d027      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d022      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1c      	ldr	r2, [pc, #112]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01d      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1b      	ldr	r2, [pc, #108]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d018      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a18      	ldr	r2, [pc, #96]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00e      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a16      	ldr	r2, [pc, #88]	@ (8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d009      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a15      	ldr	r2, [pc, #84]	@ (8001a10 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d004      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a13      	ldr	r2, [pc, #76]	@ (8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d126      	bne.n	8001a18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x408>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	e024      	b.n	8001a20 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x410>
 80019d6:	bf00      	nop
 80019d8:	40020010 	.word	0x40020010
 80019dc:	40020028 	.word	0x40020028
 80019e0:	40020040 	.word	0x40020040
 80019e4:	40020058 	.word	0x40020058
 80019e8:	40020070 	.word	0x40020070
 80019ec:	40020088 	.word	0x40020088
 80019f0:	400200a0 	.word	0x400200a0
 80019f4:	400200b8 	.word	0x400200b8
 80019f8:	40020410 	.word	0x40020410
 80019fc:	40020428 	.word	0x40020428
 8001a00:	40020440 	.word	0x40020440
 8001a04:	40020458 	.word	0x40020458
 8001a08:	40020470 	.word	0x40020470
 8001a0c:	40020488 	.word	0x40020488
 8001a10:	400204a0 	.word	0x400204a0
 8001a14:	400204b8 	.word	0x400204b8
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf14      	ite	ne
 8001a24:	2301      	movne	r3, #1
 8001a26:	2300      	moveq	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00f      	beq.n	8001a4e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	2204      	movs	r2, #4
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a42:	f043 0204 	orr.w	r2, r3, #4
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	617b      	str	r3, [r7, #20]
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	2210      	movs	r2, #16
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d07f      	beq.n	8001b62 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x552>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6f      	ldr	r2, [pc, #444]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d04a      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a6d      	ldr	r2, [pc, #436]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d045      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d040      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a6a      	ldr	r2, [pc, #424]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d03b      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a69      	ldr	r2, [pc, #420]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d036      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a67      	ldr	r2, [pc, #412]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d031      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a66      	ldr	r2, [pc, #408]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d02c      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a64      	ldr	r2, [pc, #400]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d027      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a63      	ldr	r2, [pc, #396]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d022      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a61      	ldr	r2, [pc, #388]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01d      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a60      	ldr	r2, [pc, #384]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d018      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a5e      	ldr	r2, [pc, #376]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a5d      	ldr	r2, [pc, #372]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00e      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a5b      	ldr	r2, [pc, #364]	@ (8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d009      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c5c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d004      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a58      	ldr	r2, [pc, #352]	@ (8001c60 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d105      	bne.n	8001b0e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4fe>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	e004      	b.n	8001b18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x508>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d01b      	beq.n	8001b5e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2210      	movs	r2, #16
 8001b30:	409a      	lsls	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	609a      	str	r2, [r3, #8]

        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bf0c      	ite	eq
 8001b44:	2301      	moveq	r3, #1
 8001b46:	2300      	movne	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
        {
          /* Disable the half transfer interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0208 	bic.w	r2, r2, #8
 8001b5c:	601a      	str	r2, [r3, #0]
        }

      }
      interrupt = DMA_HALF_TRANSFER;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80e5 	beq.w	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a29      	ldr	r2, [pc, #164]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d04a      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a28      	ldr	r2, [pc, #160]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d045      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a26      	ldr	r2, [pc, #152]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d040      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a25      	ldr	r2, [pc, #148]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d03b      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a23      	ldr	r2, [pc, #140]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d036      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a22      	ldr	r2, [pc, #136]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d031      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a20      	ldr	r2, [pc, #128]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d02c      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d027      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d022      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d01d      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d018      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a19      	ldr	r2, [pc, #100]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d013      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a17      	ldr	r2, [pc, #92]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00e      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a16      	ldr	r2, [pc, #88]	@ (8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d009      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a14      	ldr	r2, [pc, #80]	@ (8001c5c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d004      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a13      	ldr	r2, [pc, #76]	@ (8001c60 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d125      	bne.n	8001c64 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x654>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	e024      	b.n	8001c6e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65e>
 8001c24:	40020010 	.word	0x40020010
 8001c28:	40020028 	.word	0x40020028
 8001c2c:	40020040 	.word	0x40020040
 8001c30:	40020058 	.word	0x40020058
 8001c34:	40020070 	.word	0x40020070
 8001c38:	40020088 	.word	0x40020088
 8001c3c:	400200a0 	.word	0x400200a0
 8001c40:	400200b8 	.word	0x400200b8
 8001c44:	40020410 	.word	0x40020410
 8001c48:	40020428 	.word	0x40020428
 8001c4c:	40020440 	.word	0x40020440
 8001c50:	40020458 	.word	0x40020458
 8001c54:	40020470 	.word	0x40020470
 8001c58:	40020488 	.word	0x40020488
 8001c5c:	400204a0 	.word	0x400204a0
 8001c60:	400204b8 	.word	0x400204b8
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf14      	ite	ne
 8001c72:	2301      	movne	r3, #1
 8001c74:	2300      	moveq	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d062      	beq.n	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2220      	movs	r2, #32
 8001c86:	409a      	lsls	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d031      	beq.n	8001d06 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6f6>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0216 	bic.w	r2, r2, #22
 8001cb0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cc0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d103      	bne.n	8001cd2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6c2>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6d2>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0208 	bic.w	r2, r2, #8
 8001ce0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	223f      	movs	r2, #63	@ 0x3f
 8001cec:	409a      	lsls	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          interrupt = DMA_TRANSFER_COMPLETE;
 8001d02:	2302      	movs	r3, #2
 8001d04:	617b      	str	r3, [r7, #20]
        }

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00f      	beq.n	8001d3e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x72e>
        {
          /* Disable the transfer complete interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0210 	bic.w	r2, r2, #16
 8001d2c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }
        interrupt =  2;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return interrupt;
 8001d42:	697b      	ldr	r3, [r7, #20]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>:

int SPIComms::getActiveDMAmemory(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
    DMA_Stream_TypeDef *dmaStream = (DMA_Stream_TypeDef *)hdma->Instance;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60fb      	str	r3, [r7, #12]

    return (dmaStream->CR & DMA_SxCR_CT) ? 1 : 0;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x20>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x22>
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <_ZN8SPIComms18handleNssInterruptEv>:

void SPIComms::handleNssInterrupt()
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
	// SPI packet has been fully received
	// Flag the copy the RX buffer if new WRITE data has been received
	// DMA copy is performed during the servo thread update
	if (newWriteData)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3242 	ldrb.w	r3, [r3, #578]	@ 0x242
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <_ZN8SPIComms18handleNssInterruptEv+0x22>
	{
		copyRXbuffer = true;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
		newWriteData = false;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
	}
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_ZN8SPIComms17handleTxInterruptEv>:

void SPIComms::handleTxInterrupt()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	DMA_IRQHandler(&hdma_spi_tx);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	33d8      	adds	r3, #216	@ 0xd8
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fc28 	bl	8001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
	HAL_NVIC_EnableIRQ(irqDMAtx);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f00e ff6f 	bl	8010caa <HAL_NVIC_EnableIRQ>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_ZN8SPIComms17handleRxInterruptEv>:

void SPIComms::handleRxInterrupt()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    // Handle the interrupt and determine the type of interrupt
    interruptType = DMA_IRQHandler(&hdma_spi_rx);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001de2:	4619      	mov	r1, r3
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fc13 	bl	8001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241

    RxDMAmemoryIdx = getActiveDMAmemory(&hdma_spi_rx);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ffa7 	bl	8001d50 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if (interruptType == DMA_HALF_TRANSFER) // Use the HTC interrupt to check the packet being received
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d12d      	bne.n	8001e72 <_ZN8SPIComms17handleRxInterruptEv+0x9e>
    {
        switch (ptrRxDMABuffer->buffer[RxDMAmemoryIdx].header)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e20:	019b      	lsls	r3, r3, #6
 8001e22:	4413      	add	r3, r2
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1c      	ldr	r2, [pc, #112]	@ (8001e98 <_ZN8SPIComms17handleRxInterruptEv+0xc4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d003      	beq.n	8001e34 <_ZN8SPIComms17handleRxInterruptEv+0x60>
 8001e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e9c <_ZN8SPIComms17handleRxInterruptEv+0xc8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <_ZN8SPIComms17handleRxInterruptEv+0x6e>
 8001e32:	e017      	b.n	8001e64 <_ZN8SPIComms17handleRxInterruptEv+0x90>
        {
            case Config::pruRead:
                // No action needed for PRU_READ.
            	dataCallback(true);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3318      	adds	r3, #24
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f8ca 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e40:	e01f      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            case Config::pruWrite:
            	// Valid PRU_WRITE header, flag RX data transfer.
            	dataCallback(true);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3318      	adds	r3, #24
 8001e46:	2101      	movs	r1, #1
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 f8c3 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
            	newWriteData = true;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
                RXbufferIdx = RxDMAmemoryIdx;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                break;
 8001e62:	e00e      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            default:
            	dataCallback(false);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3318      	adds	r3, #24
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f8b2 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e70:	e007      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>
        }
    }
    else if (interruptType == DMA_TRANSFER_COMPLETE) // Transfer complete interrupt
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d002      	beq.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>
    {
        // Placeholder for transfer complete handling if needed in the future.
    }
    else // Other interrupt sources
    {
        printf("DMA SPI Rx error\n");
 8001e7c:	4808      	ldr	r0, [pc, #32]	@ (8001ea0 <_ZN8SPIComms17handleRxInterruptEv+0xcc>)
 8001e7e:	f01b fff9 	bl	801de74 <puts>
    }

    HAL_NVIC_EnableIRQ(irqDMArx);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f00e ff0e 	bl	8010caa <HAL_NVIC_EnableIRQ>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	72656164 	.word	0x72656164
 8001e9c:	77726974 	.word	0x77726974
 8001ea0:	0801ebdc 	.word	0x0801ebdc

08001ea4 <_ZN8SPIComms5tasksEv>:

void SPIComms::tasks() {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

	if (copyRXbuffer == true)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d138      	bne.n	8001f28 <_ZN8SPIComms5tasksEv+0x84>
    {
	    uint8_t* srcBuffer = (uint8_t*)ptrRxDMABuffer->buffer[RXbufferIdx].rxBuffer;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001ec0:	019b      	lsls	r3, r3, #6
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
	    uint8_t* destBuffer = (uint8_t*)ptrRxData->rxBuffer;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop

	    __disable_irq();

	    dmaStatus = HAL_DMA_Start(
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f503 70e4 	add.w	r0, r3, #456	@ 0x1c8
 8001ed6:	68f9      	ldr	r1, [r7, #12]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	2340      	movs	r3, #64	@ 0x40
 8001edc:	f00f fad8 	bl	8011490 <HAL_DMA_Start>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
									(uint32_t)srcBuffer,
									(uint32_t)destBuffer,
									Config::dataBuffSize
	    							);

	    if (dmaStatus == HAL_OK) {
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10d      	bne.n	8001f10 <_ZN8SPIComms5tasksEv+0x6c>
	        dmaStatus = HAL_DMA_PollForTransfer(&hdma_memtomem, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001efa:	f04f 32ff 	mov.w	r2, #4294967295
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f00f ff03 	bl	8011d0c <HAL_DMA_PollForTransfer>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
  __ASM volatile ("cpsie i" : : : "memory");
 8001f10:	b662      	cpsie	i
}
 8001f12:	bf00      	nop
	    }

	    __enable_irq();
	    HAL_DMA_Abort(&hdma_memtomem);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f00f fbd8 	bl	80116d0 <HAL_DMA_Abort>
		copyRXbuffer = false;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>:
private:
	DerivedModule* InterruptOwnerPtr;                                // Pointer to the owning module
	void (DerivedModule::*InterruptHandler)();                       // Member function pointer for the ISR
	
public:
    ModuleInterrupt(IRQn_Type interruptNumber, DerivedModule* ownerPtr, void (DerivedModule::*handler)())
 8001f30:	b082      	sub	sp, #8
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	817b      	strh	r3, [r7, #10]
        : InterruptOwnerPtr(ownerPtr), InterruptHandler(handler)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fa89 	bl	800245c <_ZN9InterruptC1Ev>
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f84 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE+0x54>)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3308      	adds	r3, #8
 8001f5a:	f107 021c 	add.w	r2, r7, #28
 8001f5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f62:	e883 0003 	stmia.w	r3, {r0, r1}
    {
        // Register the interrupt
        Interrupt::Register(interruptNumber, this);
 8001f66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fa84 	bl	800247c <_ZN9Interrupt8RegisterEiPS_>
    }
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f80:	b002      	add	sp, #8
 8001f82:	4770      	bx	lr
 8001f84:	0801f478 	.word	0x0801f478

08001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    { return __arr; }
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3340      	adds	r3, #64	@ 0x40
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>:
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(__first, __last, __value);
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f82d 	bl	8002026 <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>
    }
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_ZNKSt8functionIFvbEEclEb>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
      {
	if (_M_empty())
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fe73 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <_ZNKSt8functionIFvbEEclEb+0x1e>
	  __throw_bad_function_call();
 8001fee:	f01b fa62 	bl	801d4b6 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68dc      	ldr	r4, [r3, #12]
 8001ff6:	687d      	ldr	r5, [r7, #4]
 8001ff8:	1cfb      	adds	r3, r7, #3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f808 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8002000:	4603      	mov	r3, r0
 8002002:	4619      	mov	r1, r3
 8002004:	4628      	mov	r0, r5
 8002006:	47a0      	blx	r4
 8002008:	bf00      	nop
      }
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bdb0      	pop	{r4, r5, r7, pc}

08002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f804 	bl	8002044 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8002056:	e006      	b.n	8002066 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x22>
	*__first = __tmp;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	701a      	strb	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3301      	adds	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	d1f4      	bne.n	8002058 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x14>
    }
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_Z41__static_initialization_and_destruction_0ii>:
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002092:	4293      	cmp	r3, r2
 8002094:	d102      	bne.n	800209c <_Z41__static_initialization_and_destruction_0ii+0x20>
__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;
 8002096:	4803      	ldr	r0, [pc, #12]	@ (80020a4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002098:	f7fe fe46 	bl	8000d28 <_ZN14DMA_RxBuffer_tC1Ev>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	30000000 	.word	0x30000000

080020a8 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv>:

    void ISR_Handler(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
        if (this->InterruptOwnerPtr && this->InterruptHandler) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d02a      	beq.n	800210e <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d107      	bne.n	80020d0 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x2a>
 80020d0:	2300      	movs	r3, #0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d01b      	beq.n	800210e <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
            (this->InterruptOwnerPtr->*InterruptHandler)(); // Call the member function of the owner
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d102      	bne.n	80020e8 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x40>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	e00a      	b.n	80020fe <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x56>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68d2      	ldr	r2, [r2, #12]
 80020f0:	1052      	asrs	r2, r2, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6892      	ldr	r2, [r2, #8]
 80020fa:	4413      	add	r3, r2
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6852      	ldr	r2, [r2, #4]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	68c9      	ldr	r1, [r1, #12]
 8002106:	1049      	asrs	r1, r1, #1
 8002108:	440a      	add	r2, r1
 800210a:	4610      	mov	r0, r2
 800210c:	4798      	blx	r3
        }
    }
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_GLOBAL__sub_I_rxDMABuffer>:
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
 800211a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800211e:	2001      	movs	r0, #1
 8002120:	f7ff ffac 	bl	800207c <_Z41__static_initialization_and_destruction_0ii>
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <_ZN14CommsInterfaceC1Ev>:
#include "commsInterface.h"

CommsInterface::CommsInterface() {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4618      	mov	r0, r3
 8002134:	f00b fcf0 	bl	800db18 <_ZN6ModuleC1Ev>
 8002138:	4a06      	ldr	r2, [pc, #24]	@ (8002154 <_ZN14CommsInterfaceC1Ev+0x2c>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3318      	adds	r3, #24
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f839 	bl	80021ba <_ZNSt8functionIFvbEEC1Ev>
    // Constructor implementation
}
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	0801f4b4 	.word	0x0801f4b4

08002158 <_ZN14CommsInterface4initEv>:

void CommsInterface::init(){}
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_ZN14CommsInterface5startEv>:
void CommsInterface::start(){}
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_ZN14CommsInterface5tasksEv>:
void CommsInterface::tasks(){}
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	461a      	mov	r2, r3
 80021a0:	2300      	movs	r3, #0
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	6053      	str	r3, [r2, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_ZNSt8functionIFvbEEC1Ev>:
      function() noexcept
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	461a      	mov	r2, r3
 80021c6:	2300      	movs	r3, #0
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	6053      	str	r3, [r2, #4]
 80021cc:	6093      	str	r3, [r2, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ffdf 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	60da      	str	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>:
#include <cstdio>
#include <cerrno>
#include <string>


Pin::Pin(std::string portAndPin, int dir) :
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
    portAndPin(portAndPin),
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f01b fae9 	bl	801d7ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    dir(dir)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	761a      	strb	r2, [r3, #24]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3330      	adds	r3, #48	@ 0x30
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
{
    // Set direction
    if (this->dir == INPUT)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	7e1b      	ldrb	r3, [r3, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d106      	bne.n	800222a <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x44>
    {
        this->mode = GPIO_MODE_INPUT;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	625a      	str	r2, [r3, #36]	@ 0x24
 8002228:	e005      	b.n	8002236 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x50>
    }
    else
    {
        this->mode = GPIO_MODE_OUTPUT_PP;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    this->configPin();
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f806 	bl	8002248 <_ZN3Pin9configPinEv>
}
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <_ZN3Pin9configPinEv>:

    this->configPin();
}

void Pin::configPin()
{
 8002248:	b5b0      	push	{r4, r5, r7, lr}
 800224a:	b08e      	sub	sp, #56	@ 0x38
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
    printf("Creating Pin @\n");
 8002250:	4868      	ldr	r0, [pc, #416]	@ (80023f4 <_ZN3Pin9configPinEv+0x1ac>)
 8002252:	f01b fe0f 	bl	801de74 <puts>

    //x can be (A..H) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
    GPIO_TypeDef* gpios[5] ={GPIOA,GPIOB,GPIOC,GPIOD,GPIOE};
 8002256:	4b68      	ldr	r3, [pc, #416]	@ (80023f8 <_ZN3Pin9configPinEv+0x1b0>)
 8002258:	f107 0420 	add.w	r4, r7, #32
 800225c:	461d      	mov	r5, r3
 800225e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002262:	682b      	ldr	r3, [r5, #0]
 8002264:	6023      	str	r3, [r4, #0]
    

    if (this->portAndPin[0] == 'P') // PXXX e.g.PA_2 PC_15
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f01b fa45 	bl	801d6fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8002270:	4603      	mov	r3, r0
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b50      	cmp	r3, #80	@ 0x50
 8002276:	bf0c      	ite	eq
 8002278:	2301      	moveq	r3, #1
 800227a:	2300      	movne	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d05e      	beq.n	8002340 <_ZN3Pin9configPinEv+0xf8>
    {  
        this->portIndex     = this->portAndPin[1] - 'A';
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2101      	movs	r1, #1
 8002286:	4618      	mov	r0, r3
 8002288:	f01b fa37 	bl	801d6fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800228c:	4603      	mov	r3, r0
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	3b41      	subs	r3, #65	@ 0x41
 8002292:	b2da      	uxtb	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	769a      	strb	r2, [r3, #26]
        this->pinNumber     = this->portAndPin[3] - '0';       
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2103      	movs	r1, #3
 800229c:	4618      	mov	r0, r3
 800229e:	f01b fa2c 	bl	801d6fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80022a2:	4603      	mov	r3, r0
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	3b30      	subs	r3, #48	@ 0x30
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	839a      	strh	r2, [r3, #28]
        uint16_t pin2       = this->portAndPin[4] - '0';       
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2104      	movs	r1, #4
 80022b2:	4618      	mov	r0, r3
 80022b4:	f01b fa21 	bl	801d6fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80022b8:	4603      	mov	r3, r0
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	3b30      	subs	r3, #48	@ 0x30
 80022be:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if (pin2 <= 8) 
 80022c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d80b      	bhi.n	80022de <_ZN3Pin9configPinEv+0x96>
        {
            this->pinNumber = this->pinNumber * 10 + pin2;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	8b9b      	ldrh	r3, [r3, #28]
 80022ca:	461a      	mov	r2, r3
 80022cc:	0092      	lsls	r2, r2, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80022d6:	4413      	add	r3, r2
 80022d8:	b29a      	uxth	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	839a      	strh	r2, [r3, #28]
        }

        this->pin = 1 << this->pinNumber; // this is equivalent to GPIO_PIN_x definition
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	8b9b      	ldrh	r3, [r3, #28]
 80022e2:	461a      	mov	r2, r3
 80022e4:	2301      	movs	r3, #1
 80022e6:	4093      	lsls	r3, r2
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	83da      	strh	r2, [r3, #30]
    {
        printf("  Invalid port and pin definition\n");
        return;
    }    

    printf("  port = GPIO%c\n", char('A' + this->portIndex));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7e9b      	ldrb	r3, [r3, #26]
 80022f2:	3341      	adds	r3, #65	@ 0x41
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	4619      	mov	r1, r3
 80022f8:	4840      	ldr	r0, [pc, #256]	@ (80023fc <_ZN3Pin9configPinEv+0x1b4>)
 80022fa:	f01b fd4b 	bl	801dd94 <iprintf>
    printf("  pin = %d\n", this->pinNumber);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	8b9b      	ldrh	r3, [r3, #28]
 8002302:	4619      	mov	r1, r3
 8002304:	483e      	ldr	r0, [pc, #248]	@ (8002400 <_ZN3Pin9configPinEv+0x1b8>)
 8002306:	f01b fd45 	bl	801dd94 <iprintf>

    // translate port index into something useful
    this->GPIOx = gpios[this->portIndex];
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7e9b      	ldrb	r3, [r3, #26]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	3338      	adds	r3, #56	@ 0x38
 8002312:	443b      	add	r3, r7
 8002314:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	62da      	str	r2, [r3, #44]	@ 0x2c

    // enable the peripheral clock
    switch (portIndex){
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7e9b      	ldrb	r3, [r3, #26]
 8002320:	2b04      	cmp	r3, #4
 8002322:	d861      	bhi.n	80023e8 <_ZN3Pin9configPinEv+0x1a0>
 8002324:	a201      	add	r2, pc, #4	@ (adr r2, 800232c <_ZN3Pin9configPinEv+0xe4>)
 8002326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232a:	bf00      	nop
 800232c:	08002349 	.word	0x08002349
 8002330:	08002369 	.word	0x08002369
 8002334:	08002389 	.word	0x08002389
 8002338:	080023a9 	.word	0x080023a9
 800233c:	080023c9 	.word	0x080023c9
        printf("  Invalid port and pin definition\n");
 8002340:	4830      	ldr	r0, [pc, #192]	@ (8002404 <_ZN3Pin9configPinEv+0x1bc>)
 8002342:	f01b fd97 	bl	801de74 <puts>
 8002346:	e052      	b.n	80023ee <_ZN3Pin9configPinEv+0x1a6>
        case 0:
            __HAL_RCC_GPIOA_CLK_ENABLE();
 8002348:	4b2f      	ldr	r3, [pc, #188]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 800234a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800234e:	4a2e      	ldr	r2, [pc, #184]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002358:	4b2b      	ldr	r3, [pc, #172]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 800235a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	61fb      	str	r3, [r7, #28]
 8002364:	69fb      	ldr	r3, [r7, #28]
            break;
 8002366:	e03f      	b.n	80023e8 <_ZN3Pin9configPinEv+0x1a0>

        case 1:
            __HAL_RCC_GPIOB_CLK_ENABLE();
 8002368:	4b27      	ldr	r3, [pc, #156]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 800236a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800236e:	4a26      	ldr	r2, [pc, #152]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 8002370:	f043 0302 	orr.w	r3, r3, #2
 8002374:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002378:	4b23      	ldr	r3, [pc, #140]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 800237a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	69bb      	ldr	r3, [r7, #24]
            break;
 8002386:	e02f      	b.n	80023e8 <_ZN3Pin9configPinEv+0x1a0>

        case 2:
            __HAL_RCC_GPIOC_CLK_ENABLE();
 8002388:	4b1f      	ldr	r3, [pc, #124]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 800238a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800238e:	4a1e      	ldr	r2, [pc, #120]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002398:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 800239a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	697b      	ldr	r3, [r7, #20]
            break;
 80023a6:	e01f      	b.n	80023e8 <_ZN3Pin9configPinEv+0x1a0>
        
        case 3:
            __HAL_RCC_GPIOD_CLK_ENABLE();
 80023a8:	4b17      	ldr	r3, [pc, #92]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 80023aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ae:	4a16      	ldr	r2, [pc, #88]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023b8:	4b13      	ldr	r3, [pc, #76]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 80023ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]
            break;
 80023c6:	e00f      	b.n	80023e8 <_ZN3Pin9configPinEv+0x1a0>

        case 4:
            __HAL_RCC_GPIOE_CLK_ENABLE();
 80023c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 80023ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 80023d0:	f043 0310 	orr.w	r3, r3, #16
 80023d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 80023da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
            break;
 80023e6:	bf00      	nop
    }

    this->initPin();
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f80f 	bl	800240c <_ZN3Pin7initPinEv>
}
 80023ee:	3738      	adds	r7, #56	@ 0x38
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bdb0      	pop	{r4, r5, r7, pc}
 80023f4:	0801ec44 	.word	0x0801ec44
 80023f8:	0801ec98 	.word	0x0801ec98
 80023fc:	0801ec78 	.word	0x0801ec78
 8002400:	0801ec8c 	.word	0x0801ec8c
 8002404:	0801ec54 	.word	0x0801ec54
 8002408:	58024400 	.word	0x58024400

0800240c <_ZN3Pin7initPinEv>:


void Pin::initPin()
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
    // Configure GPIO pin Output Level
    HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	8bdb      	ldrh	r3, [r3, #30]
 800241c:	2200      	movs	r2, #0
 800241e:	4619      	mov	r1, r3
 8002420:	f011 f9e2 	bl	80137e8 <HAL_GPIO_WritePin>

    // Configure the GPIO pin
    this->GPIO_InitStruct.Pin = this->pin;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	8bdb      	ldrh	r3, [r3, #30]
 8002428:	461a      	mov	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	631a      	str	r2, [r3, #48]	@ 0x30
    this->GPIO_InitStruct.Mode = this->mode;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1a      	ldr	r2, [r3, #32]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	635a      	str	r2, [r3, #52]	@ 0x34
    this->GPIO_InitStruct.Pull = this->pull;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	639a      	str	r2, [r3, #56]	@ 0x38
    this->GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2202      	movs	r2, #2
 8002442:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(this->GPIOx, &this->GPIO_InitStruct);  
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3330      	adds	r3, #48	@ 0x30
 800244c:	4619      	mov	r1, r3
 800244e:	4610      	mov	r0, r2
 8002450:	f011 f802 	bl	8013458 <HAL_GPIO_Init>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	4a04      	ldr	r2, [pc, #16]	@ (8002478 <_ZN9InterruptC1Ev+0x1c>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	0801f4e4 	.word	0x0801f4e4

0800247c <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4805      	ldr	r0, [pc, #20]	@ (80024a0 <_ZN9Interrupt8RegisterEiPS_+0x24>)
 800248a:	f01b fc83 	bl	801dd94 <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 800248e:	4905      	ldr	r1, [pc, #20]	@ (80024a4 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	0801ecac 	.word	0x0801ecac
 80024a4:	240000a4 	.word	0x240000a4

080024a8 <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 80024ac:	4b04      	ldr	r3, [pc, #16]	@ (80024c0 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 80024ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a02      	ldr	r2, [pc, #8]	@ (80024c0 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 80024b6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80024b8:	4610      	mov	r0, r2
 80024ba:	4798      	blx	r3
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	240000a4 	.word	0x240000a4

080024c4 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>:

void Interrupt::DMA1_Stream0_Wrapper(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream0_IRQn]->ISR_Handler();
 80024c8:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 80024ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a02      	ldr	r2, [pc, #8]	@ (80024dc <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 80024d2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024d4:	4610      	mov	r0, r2
 80024d6:	4798      	blx	r3
}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	240000a4 	.word	0x240000a4

080024e0 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>:

void Interrupt::DMA1_Stream1_Wrapper(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream1_IRQn]->ISR_Handler();
 80024e4:	4b04      	ldr	r3, [pc, #16]	@ (80024f8 <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a02      	ldr	r2, [pc, #8]	@ (80024f8 <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 80024ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024f0:	4610      	mov	r0, r2
 80024f2:	4798      	blx	r3
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	240000a4 	.word	0x240000a4

080024fc <_ZN9Interrupt12TIM2_WrapperEv>:


void Interrupt::TIM2_Wrapper(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM2_IRQn]->ISR_Handler();
 8002500:	4b04      	ldr	r3, [pc, #16]	@ (8002514 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a02      	ldr	r2, [pc, #8]	@ (8002514 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 800250a:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 800250c:	4610      	mov	r0, r2
 800250e:	4798      	blx	r3
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	240000a4 	.word	0x240000a4

08002518 <_ZN9Interrupt12TIM3_WrapperEv>:

void Interrupt::TIM3_Wrapper(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM3_IRQn]->ISR_Handler();
 800251c:	4b04      	ldr	r3, [pc, #16]	@ (8002530 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 800251e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a02      	ldr	r2, [pc, #8]	@ (8002530 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8002526:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002528:	4610      	mov	r0, r2
 800252a:	4798      	blx	r3
}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}
 8002530:	240000a4 	.word	0x240000a4

08002534 <_ZN9Interrupt12TIM4_WrapperEv>:

void Interrupt::TIM4_Wrapper(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM4_IRQn]->ISR_Handler();
 8002538:	4b04      	ldr	r3, [pc, #16]	@ (800254c <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 800253a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a02      	ldr	r2, [pc, #8]	@ (800254c <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8002542:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8002544:	4610      	mov	r0, r2
 8002546:	4798      	blx	r3
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	240000a4 	.word	0x240000a4

08002550 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8002554:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
 8002568:	f7ff fff2 	bl	8002550 <_ZSt23__is_constant_evaluatedv>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d004      	beq.n	800257c <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f002 f948 	bl	8004808 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 8002578:	4603      	mov	r3, r0
 800257a:	e004      	b.n	8002586 <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7fd ff0f 	bl	80003a0 <strlen>
 8002582:	4603      	mov	r3, r0
 8002584:	bf00      	nop
      }
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8allocateEj>:
};

namespace detail {
class DefaultAllocator : public Allocator {
 public:
  void* allocate(size_t size) override {
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
    return malloc(size);
 8002598:	6838      	ldr	r0, [r7, #0]
 800259a:	f01b fa45 	bl	801da28 <malloc>
 800259e:	4603      	mov	r3, r0
  }
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10deallocateEPv>:

  void deallocate(void* ptr) override {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
    free(ptr);
 80025b2:	6838      	ldr	r0, [r7, #0]
 80025b4:	f01b fa40 	bl	801da38 <free>
  }
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10reallocateEPvj>:

  void* reallocate(void* ptr, size_t new_size) override {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
    return realloc(ptr, new_size);
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	68b8      	ldr	r0, [r7, #8]
 80025d0:	f01b fae8 	bl	801dba4 <realloc>
 80025d4:	4603      	mov	r3, r0
  }
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>:

  static Allocator* instance() {
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
    static DefaultAllocator allocator;
    return &allocator;
 80025e4:	4b02      	ldr	r3, [pc, #8]	@ (80025f0 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv+0x10>)
  }
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	24000000 	.word	0x24000000

080025f4 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>:
  length_type length;
  char data[1];

  static constexpr size_t maxLength = numeric_limits<length_type>::highest();

  static constexpr size_t sizeForLength(size_t n) {
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
    return n + 1 + offsetof(StringNode, data);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3309      	adds	r3, #9
  }
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>:

  static StringNode* create(size_t length, Allocator* allocator) {
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
    if (length > maxLength)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800261c:	d301      	bcc.n	8002622 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x16>
      return nullptr;
 800261e:	2300      	movs	r3, #0
 8002620:	e01b      	b.n	800265a <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto size = sizeForLength(length);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ffe6 	bl	80025f4 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 8002628:	60f8      	str	r0, [r7, #12]
    if (size < length)  // integer overflow
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	429a      	cmp	r2, r3
 8002630:	d201      	bcs.n	8002636 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x2a>
      return nullptr;   // (not testable on 64-bit)
 8002632:	2300      	movs	r3, #0
 8002634:	e011      	b.n	800265a <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto node = reinterpret_cast<StringNode*>(allocator->allocate(size));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68f9      	ldr	r1, [r7, #12]
 800263e:	6838      	ldr	r0, [r7, #0]
 8002640:	4798      	blx	r3
 8002642:	60b8      	str	r0, [r7, #8]
    if (node) {
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d006      	beq.n	8002658 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4c>
      node->length = length_type(length);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	b29a      	uxth	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	80da      	strh	r2, [r3, #6]
      node->references = 1;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2201      	movs	r2, #1
 8002656:	809a      	strh	r2, [r3, #4]
    }
    return node;
 8002658:	68bb      	ldr	r3, [r7, #8]
  }
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>:

  static StringNode* resize(StringNode* node, size_t length,
 8002662:	b5b0      	push	{r4, r5, r7, lr}
 8002664:	b086      	sub	sp, #24
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
                            Allocator* allocator) {
    ARDUINOJSON_ASSERT(node != nullptr);
    StringNode* newNode;
    if (length <= maxLength)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002674:	d20e      	bcs.n	8002694 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x32>
      newNode = reinterpret_cast<StringNode*>(
          allocator->reallocate(node, sizeForLength(length)));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3308      	adds	r3, #8
 800267c:	681c      	ldr	r4, [r3, #0]
 800267e:	687d      	ldr	r5, [r7, #4]
 8002680:	68b8      	ldr	r0, [r7, #8]
 8002682:	f7ff ffb7 	bl	80025f4 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 8002686:	4603      	mov	r3, r0
 8002688:	461a      	mov	r2, r3
 800268a:	68f9      	ldr	r1, [r7, #12]
 800268c:	4628      	mov	r0, r5
 800268e:	47a0      	blx	r4
 8002690:	6178      	str	r0, [r7, #20]
 8002692:	e001      	b.n	8002698 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x36>
    else
      newNode = nullptr;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
    if (newNode)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d004      	beq.n	80026a8 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x46>
      newNode->length = length_type(length);
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	80da      	strh	r2, [r3, #6]
 80026a6:	e006      	b.n	80026b6 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x54>
    else
      allocator->deallocate(node);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	3304      	adds	r3, #4
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68f9      	ldr	r1, [r7, #12]
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	4798      	blx	r3
    return newNode;
 80026b6:	697b      	ldr	r3, [r7, #20]
  }
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bdb0      	pop	{r4, r5, r7, pc}

080026c0 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>:

  static void destroy(StringNode* node, Allocator* allocator) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
    allocator->deallocate(node);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	3304      	adds	r3, #4
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	6838      	ldr	r0, [r7, #0]
 80026d6:	4798      	blx	r3
  }
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>:
  RamString(const char* str, size_t sz, bool isStatic = false)
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	70fb      	strb	r3, [r7, #3]
      : str_(str), size_(sz & sizeMask), static_(isStatic) {
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	721a      	strb	r2, [r3, #8]
  }
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>:
  bool isNull() const {
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
    return !str_;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf0c      	ite	eq
 800271e:	2301      	moveq	r3, #1
 8002720:	2300      	movne	r3, #0
 8002722:	b2db      	uxtb	r3, r3
  }
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>:
  size_t size() const {
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
    return size_;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
  }
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>:

  const char* data() const {
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
    return str_;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
  }
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>:

  friend void swap(StringPool& a, StringPool& b) {
    swap_(a.strings_, b.strings_);
  }

  void clear(Allocator* allocator) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
    while (strings_) {
 800276a:	e00a      	b.n	8002782 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0x22>
      auto node = strings_;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
      strings_ = node->next;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	601a      	str	r2, [r3, #0]
      StringNode::destroy(node, allocator);
 800277a:	6839      	ldr	r1, [r7, #0]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7ff ff9f 	bl	80026c0 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
    while (strings_) {
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0xc>
    }
  }
 800278a:	bf00      	nop
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>:
    node->data[n] = 0;  // force NUL terminator
    add(node);
    return node;
  }

  void add(StringNode* node) {
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node != nullptr);
    node->next = strings_;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	601a      	str	r2, [r3, #0]
    strings_ = node;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	601a      	str	r2, [r3, #0]
  }
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>:
        return node;
    }
    return nullptr;
  }

  void dereference(const char* s, Allocator* allocator) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
    StringNode* prev = nullptr;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	e029      	b.n	8002824 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x6c>
      if (node->data == s) {
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	3308      	adds	r3, #8
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d11f      	bne.n	800281a <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x62>
        if (--node->references == 0) {
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	889b      	ldrh	r3, [r3, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	809a      	strh	r2, [r3, #4]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	889b      	ldrh	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bf0c      	ite	eq
 80027ee:	2301      	moveq	r3, #1
 80027f0:	2300      	movne	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d019      	beq.n	800282c <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
          if (prev)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d004      	beq.n	8002808 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x50>
            prev->next = node->next;
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	e003      	b.n	8002810 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x58>
          else
            strings_ = node->next;
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	601a      	str	r2, [r3, #0]
          StringNode::destroy(node, allocator);
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	6938      	ldr	r0, [r7, #16]
 8002814:	f7ff ff54 	bl	80026c0 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
        }
        return;
 8002818:	e008      	b.n	800282c <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
      }
      prev = node;
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1d2      	bne.n	80027d0 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x18>
 800282a:	e000      	b.n	800282e <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x76>
        return;
 800282c:	bf00      	nop
    }
  }
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>:
// https://arduinojson.org/v7/api/jsonstring/
class JsonString {
  friend struct detail::StringAdapter<JsonString>;

 public:
  JsonString() : str_(nullptr, 0, true) {}
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	2301      	movs	r3, #1
 8002840:	2200      	movs	r2, #0
 8002842:	2100      	movs	r1, #0
 8002844:	f7ff ff4c 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>:

  JsonString(const char* data, bool isStatic = false)
 8002852:	b590      	push	{r4, r7, lr}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	4613      	mov	r3, r2
 800285e:	71fb      	strb	r3, [r7, #7]
      : str_(data, data ? ::strlen(data) : 0, isStatic) {}
 8002860:	68fc      	ldr	r4, [r7, #12]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d004      	beq.n	8002872 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x20>
 8002868:	68b8      	ldr	r0, [r7, #8]
 800286a:	f7fd fd99 	bl	80003a0 <strlen>
 800286e:	4602      	mov	r2, r0
 8002870:	e000      	b.n	8002874 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x22>
 8002872:	2200      	movs	r2, #0
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	4620      	mov	r0, r4
 800287a:	f7ff ff31 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4618      	mov	r0, r3
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	bd90      	pop	{r4, r7, pc}

08002888 <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>:
                                int> = 0>
  JsonString(const char* data, TSize sz, bool isStatic = false)
      : str_(data, size_t(sz), isStatic) {}

  // Returns a pointer to the characters.
  const char* c_str() const {
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
    return str_.data();
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ff58 	bl	8002748 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 8002898:	4603      	mov	r3, r0
  }
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>:
namespace detail {
template <>
struct StringAdapter<JsonString> {
  using AdaptedString = RamString;

  static const AdaptedString& adapt(const JsonString& s) {
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
    return s.str_;
 80028aa:	687b      	ldr	r3, [r7, #4]
  }
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>:

class CollectionIterator {
  friend class CollectionData;

 public:
  CollectionIterator() : slot_(nullptr), currentId_(NULL_SLOT) {}
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028cc:	809a      	strh	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>:

  void next(const ResourceManager* resources);

  bool done() const {
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
    return slot_ == nullptr;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
  }
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>:

  bool operator==(const CollectionIterator& other) const {
    return slot_ == other.slot_;
  }

  bool operator!=(const CollectionIterator& other) const {
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
    return slot_ != other.slot_;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	bf14      	ite	ne
 8002914:	2301      	movne	r3, #1
 8002916:	2300      	moveq	r3, #0
 8002918:	b2db      	uxtb	r3, r3
  }
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>:

  VariantData* operator->() {
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return data();
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f805 	bl	800293e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8002934:	4603      	mov	r3, r0
  }
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>:
  const VariantData& operator*() const {
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return *data();
  }

  VariantData* data() {
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(slot_);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
  }
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>:
  SlotId head_ = NULL_SLOT;
  SlotId tail_ = NULL_SLOT;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
    return p;
 8002960:	683b      	ldr	r3, [r7, #0]
  }
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>:
    const CollectionData* collection) {
  const void* data = collection;  // prevent warning cast-align
  return reinterpret_cast<const VariantData*>(data);
}

inline VariantData* collectionToVariant(CollectionData* collection) {
 800296e:	b480      	push	{r7}
 8002970:	b085      	sub	sp, #20
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  void* data = collection;  // prevent warning cast-align
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	60fb      	str	r3, [r7, #12]
  return reinterpret_cast<VariantData*>(data);
 800297a:	68fb      	ldr	r3, [r7, #12]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>:
#endif
  Object = 0x20,
  Array = 0x40,
};

inline bool operator&(VariantType type, VariantTypeBits bit) {
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	460a      	mov	r2, r1
 8002992:	71fb      	strb	r3, [r7, #7]
 8002994:	4613      	mov	r3, r2
 8002996:	71bb      	strb	r3, [r7, #6]
  return (uint8_t(type) & uint8_t(bit)) != 0;
 8002998:	79fa      	ldrb	r2, [r7, #7]
 800299a:	79bb      	ldrb	r3, [r7, #6]
 800299c:	4013      	ands	r3, r2
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>:

union VariantContent {
  VariantContent() {}
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>:
  VariantType type_;
  SlotId next_;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
    return p;
 80029d6:	683b      	ldr	r3, [r7, #0]
  }
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>:

  static void operator delete(void*, void*) noexcept {}

  VariantData() : type_(VariantType::Null), next_(NULL_SLOT) {}
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff ffe1 	bl	80029b6 <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	711a      	strb	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a00:	80da      	strh	r2, [r3, #6]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>:

  SlotId next() const {
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
    return next_;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	88db      	ldrh	r3, [r3, #6]
  }
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>:

  void setNext(SlotId slot) {
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]
    next_ = slot;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	80da      	strh	r2, [r3, #6]
  }
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
      default:
        return true;
    }
  }

  ArrayData* asArray() {
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
    return isArray() ? &content_.asArray : 0;
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f85f 	bl	8002b0e <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x18>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	e000      	b.n	8002a5c <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x1a>
 8002a5a:	2300      	movs	r3, #0
  }
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>:

  const ArrayData* asArray() const {
    return const_cast<VariantData*>(this)->asArray();
  }

  CollectionData* asCollection() {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
    return isCollection() ? &content_.asCollection : 0;
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f85f 	bl	8002b30 <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x18>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	e000      	b.n	8002a7e <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x1a>
 8002a7c:	2300      	movs	r3, #0
  }
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:
      default:
        return 0;
    }
  }

  ObjectData* asObject() {
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
    return isObject() ? &content_.asObject : 0;
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f86c 	bl	8002b6c <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x18>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	e000      	b.n	8002aa0 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x1a>
 8002a9e:	2300      	movs	r3, #0
  }
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:

  const ObjectData* asObject() const {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asObject();
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff ffe8 	bl	8002a86 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8002ab6:	4603      	mov	r3, r0
  }
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>:
      default:
        return JsonString();
    }
  }

  JsonString asString() const {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
    switch (type_) {
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	791b      	ldrb	r3, [r3, #4]
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d002      	beq.n	8002ad8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x18>
 8002ad2:	2b05      	cmp	r3, #5
 8002ad4:	d008      	beq.n	8002ae8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x28>
 8002ad6:	e013      	b.n	8002b00 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x40>
      case VariantType::LinkedString:
        return JsonString(content_.asLinkedString, true);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2201      	movs	r2, #1
 8002ade:	4619      	mov	r1, r3
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff feb6 	bl	8002852 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>
 8002ae6:	e00e      	b.n	8002b06 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      case VariantType::OwnedString:
        return JsonString(content_.asOwnedString->data,
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f103 0108 	add.w	r1, r3, #8
                          content_.asOwnedString->length);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	88da      	ldrh	r2, [r3, #6]
 8002af6:	2300      	movs	r3, #0
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f001 fea5 	bl	8004848 <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>
 8002afe:	e002      	b.n	8002b06 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      default:
        return JsonString();
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff fe97 	bl	8002834 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>
    }
  }
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>:
    if (!obj)
      return nullptr;
    return obj->getOrAddMember(key, resources);
  }

  bool isArray() const {
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Array;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	791b      	ldrb	r3, [r3, #4]
 8002b1a:	2b40      	cmp	r3, #64	@ 0x40
 8002b1c:	bf0c      	ite	eq
 8002b1e:	2301      	moveq	r3, #1
 8002b20:	2300      	movne	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
  }
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>:

  bool isBoolean() const {
    return type_ == VariantType::Boolean;
  }

  bool isCollection() const {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::CollectionMask;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	791b      	ldrb	r3, [r3, #4]
 8002b3c:	2160      	movs	r1, #96	@ 0x60
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff ff22 	bl	8002988 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8002b44:	4603      	mov	r3, r0
  }
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>:

  bool isFloat() const {
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::NumberBit;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	791b      	ldrb	r3, [r3, #4]
 8002b5a:	2108      	movs	r1, #8
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff13 	bl	8002988 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8002b62:	4603      	mov	r3, r0
  }
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>:
    if (!var)
      return true;
    return var->isNull();
  }

  bool isObject() const {
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Object;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	791b      	ldrb	r3, [r3, #4]
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
  }
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>:
    if (!var)
      return;
    var->removeMember(key, resources);
  }

  void reset() {  // TODO: remove
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
    type_ = VariantType::Null;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	711a      	strb	r2, [r3, #4]
  }
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>:

  void setBoolean(bool value) {
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	70fb      	strb	r3, [r7, #3]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Boolean;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2206      	movs	r2, #6
 8002bb8:	711a      	strb	r2, [r3, #4]
    content_.asBoolean = value;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	701a      	strb	r2, [r3, #0]
  }
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>:
  }

  template <typename TAdaptedString>
  bool setString(TAdaptedString value, ResourceManager* resources);

  bool setString(StringNode* s, ResourceManager*) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
    setOwnedString(s);
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f805 	bl	8002bea <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 8002be0:	2301      	movs	r3, #1
  }
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>:
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::LinkedString;
    content_.asLinkedString = s;
  }

  void setOwnedString(StringNode* s) {
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::OwnedString;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2205      	movs	r2, #5
 8002bf8:	711a      	strb	r2, [r3, #4]
    content_.asOwnedString = s;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	601a      	str	r2, [r3, #0]
  }
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>:
class CollectionData {
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c1a:	801a      	strh	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c22:	805a      	strh	r2, [r3, #2]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ArrayData : public CollectionData {
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ffe5 	bl	8002c0c <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>:

  static size_t size(const VariantData* var, const ResourceManager* resources) {
    return var != 0 ? var->size(resources) : 0;
  }

  ArrayData& toArray() {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Array;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2240      	movs	r2, #64	@ 0x40
 8002c58:	711a      	strb	r2, [r3, #4]
    new (&content_.asArray) ArrayData();
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	2004      	movs	r0, #4
 8002c60:	f7ff fe79 	bl	8002956 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d006      	beq.n	8002c78 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv+0x2c>
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	801a      	strh	r2, [r3, #0]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	805a      	strh	r2, [r3, #2]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff ffdd 	bl	8002c32 <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>
    return content_.asArray;
 8002c78:	687b      	ldr	r3, [r7, #4]
  }
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ObjectData : public CollectionData {
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ffbd 	bl	8002c0c <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>:
      return 0;
    var->clear(resources);
    return &var->toArray();
  }

  ObjectData& toObject() {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Object;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	711a      	strb	r2, [r3, #4]
    new (&content_.asObject) ObjectData();
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4619      	mov	r1, r3
 8002cae:	2004      	movs	r0, #4
 8002cb0:	f7ff fe51 	bl	8002956 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d006      	beq.n	8002cc8 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv+0x2c>
 8002cba:	2200      	movs	r2, #0
 8002cbc:	801a      	strh	r2, [r3, #0]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	805a      	strh	r2, [r3, #2]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff ffdd 	bl	8002c82 <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>
    return content_.asObject;
 8002cc8:	687b      	ldr	r3, [r7, #4]
  }
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>:
  StringPool() = default;
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>:
  static_assert(sizeof(FreeSlot) <= sizeof(T), "T is too small");

 public:
  using Pool = MemoryPool<T>;

  MemoryPoolList() = default;
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	621a      	str	r2, [r3, #32]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	849a      	strh	r2, [r3, #36]	@ 0x24
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2204      	movs	r2, #4
 8002d06:	84da      	strh	r2, [r3, #38]	@ 0x26
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>:
  };

 public:
  constexpr static size_t slotSize = sizeof(SlotData);

  ResourceManager(Allocator* allocator = DefaultAllocator::instance())
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
      : allocator_(allocator), overflowed_(false) {}
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	711a      	strb	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3308      	adds	r3, #8
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ffca 	bl	8002cd2 <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	330c      	adds	r3, #12
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff ffd3 	bl	8002cee <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>:
      overflowed_ = true;

    return node;
  }

  void saveString(StringNode* node) {
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
    stringPool_.add(node);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3308      	adds	r3, #8
 8002d60:	6839      	ldr	r1, [r7, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fd16 	bl	8002794 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
  }
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>:
  template <typename TAdaptedString>
  StringNode* getString(const TAdaptedString& str) const {
    return stringPool_.get(str);
  }

  StringNode* createString(size_t length) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
    auto node = StringNode::create(length, allocator_);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	6838      	ldr	r0, [r7, #0]
 8002d82:	f7ff fc43 	bl	800260c <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 8002d86:	60f8      	str	r0, [r7, #12]
    if (!node)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d102      	bne.n	8002d94 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj+0x24>
      overflowed_ = true;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	711a      	strb	r2, [r3, #4]
    return node;
 8002d94:	68fb      	ldr	r3, [r7, #12]
  }
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>:

  StringNode* resizeString(StringNode* node, size_t length) {
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
    node = StringNode::resize(node, length, allocator_);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	68b8      	ldr	r0, [r7, #8]
 8002db4:	f7ff fc55 	bl	8002662 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>
 8002db8:	60b8      	str	r0, [r7, #8]
    if (!node)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d102      	bne.n	8002dc6 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj+0x28>
      overflowed_ = true;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	711a      	strb	r2, [r3, #4]
    return node;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
  }
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>:

  void destroyString(StringNode* node) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
    StringNode::destroy(node, allocator_);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4619      	mov	r1, r3
 8002de0:	6838      	ldr	r0, [r7, #0]
 8002de2:	f7ff fc6d 	bl	80026c0 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
  }
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>:

  void dereferenceString(const char* s) {
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
    stringPool_.dereference(s, allocator_);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f103 0008 	add.w	r0, r3, #8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	6839      	ldr	r1, [r7, #0]
 8002e06:	f7ff fcd7 	bl	80027b8 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>
  }
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>:

  void clear() {
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
    variantPools_.clear(allocator_);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f103 020c 	add.w	r2, r3, #12
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4619      	mov	r1, r3
 8002e26:	4610      	mov	r0, r2
 8002e28:	f001 fd24 	bl	8004874 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
    overflowed_ = false;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	711a      	strb	r2, [r3, #4]
    stringPool_.clear(allocator_);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f103 0208 	add.w	r2, r3, #8
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4610      	mov	r0, r2
 8002e40:	f7ff fc8e 	bl	8002760 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
  }
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>:

  void shrinkToFit() {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
    variantPools_.shrinkToFit(allocator_);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f103 020c 	add.w	r2, r3, #12
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4610      	mov	r0, r2
 8002e62:	f001 fd3f 	bl	80048e4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
  }
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariantConst() : data_(nullptr), resources_(nullptr) {}

  // INTERNAL USE ONLY
  explicit JsonVariantConst(const detail::VariantData* data,
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
                            const detail::ResourceManager* resources)
      : data_(data), resources_(resources) {}
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>:
  size_t memoryUsage() const {
    return 0;
  }

 protected:
  const detail::VariantData* getData() const {
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
    return data_;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
  }
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>:

  const detail::ResourceManager* getResourceManager() const {
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
    return resources_;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
  }
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariant() : data_(0), resources_(0) {}

  // INTERNAL USE ONLY
  JsonVariant(detail::VariantData* data, detail::ResourceManager* resources)
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>:

 private:
  detail::ResourceManager* getResourceManager() const {
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
    return resources_;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
  }
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>:

  detail::VariantData* getData() const {
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
    return data_;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
  }
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>:

  static JsonVariant fromJson(JsonVariant src) {
    return src;
  }

  static bool checkJson(JsonVariant src) {
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	463b      	mov	r3, r7
 8002f22:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8002f26:	463b      	mov	r3, r7
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f001 fd13 	bl	8004954 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8002f2e:	60f8      	str	r0, [r7, #12]
    return !!data;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	bf14      	ite	ne
 8002f36:	2301      	movne	r3, #1
 8002f38:	2300      	moveq	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
  }
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>:

class JsonArrayIterator {
  friend class JsonArray;

 public:
  JsonArrayIterator() {}
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fcb2 	bl	80028b8 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>:
  explicit JsonArrayIterator(detail::ArrayData::iterator iterator,
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	1d38      	adds	r0, r7, #4
 8002f68:	e880 0006 	stmia.w	r0, {r1, r2}
 8002f6c:	603b      	str	r3, [r7, #0]
                             detail::ResourceManager* resources)
      : iterator_(iterator), resources_(resources) {}
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	461a      	mov	r2, r3
 8002f72:	1d3b      	adds	r3, r7, #4
 8002f74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f78:	e882 0003 	stmia.w	r2, {r0, r1}
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	609a      	str	r2, [r3, #8]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>:

  JsonVariant operator*() {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
    return JsonVariant(iterator_.data(), resources_);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fcce 	bl	800293e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8002fa2:	4601      	mov	r1, r0
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff ff8a 	bl	8002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>:

  bool operator==(const JsonArrayIterator& other) const {
    return iterator_ == other.iterator_;
  }

  bool operator!=(const JsonArrayIterator& other) const {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
    return iterator_ != other.iterator_;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fc98 	bl	80028fe <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>
 8002fce:	4603      	mov	r3, r0
  }
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>:

  JsonArrayIterator& operator++() {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
    iterator_.next(resources_);
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4610      	mov	r0, r2
 8002fea:	f000 f936 	bl	800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    return *this;
 8002fee:	687b      	ldr	r3, [r7, #4]
  }
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>:

 public:
  using iterator = JsonArrayIterator;

  // Constructs an unbound reference.
  JsonArray() : data_(0), resources_(0) {}
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonArray(detail::ArrayData* data, detail::ResourceManager* resources)
 800301a:	b480      	push	{r7}
 800301c:	b085      	sub	sp, #20
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>:
    return detail::ArrayData::addValue(data_, value, resources_);
  }

  // Returns an iterator to the first element of the array.
  // https://arduinojson.org/v7/api/jsonarray/begin/
  iterator begin() const {
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
    if (!data_)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d103      	bne.n	800305a <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x1a>
      return iterator();
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff ff76 	bl	8002f44 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
 8003058:	e011      	b.n	800307e <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x3e>
    return iterator(data_->createIterator(resources_), resources_);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4619      	mov	r1, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	f107 0308 	add.w	r3, r7, #8
 8003068:	4618      	mov	r0, r3
 800306a:	f000 f919 	bl	80032a0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f107 0208 	add.w	r2, r7, #8
 8003076:	ca06      	ldmia	r2, {r1, r2}
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff ff70 	bl	8002f5e <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>
  }
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>:

  // Returns an iterator following the last element of the array.
  // https://arduinojson.org/v7/api/jsonarray/end/
  iterator end() const {
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
    return iterator();
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff ff57 	bl	8002f44 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
  }
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>:

 public:
  using iterator = JsonObjectIterator;

  // Creates an unbound reference.
  JsonObject() : data_(0), resources_(0) {}
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonObject(detail::ObjectData* data, detail::ResourceManager* resource)
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resource) {}
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	605a      	str	r2, [r3, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
    return resources_;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
  }
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>:

  detail::VariantData* getData() const {
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
    return detail::collectionToVariant(data_);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fc2f 	bl	800296e <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8003110:	4603      	mov	r3, r0
  }
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>:
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
  friend class detail::VariantAttorney;

 public:
  explicit JsonDocument(Allocator* alloc = detail::DefaultAllocator::instance())
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]
      : resources_(alloc) {}
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6839      	ldr	r1, [r7, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fdf8 	bl	8002d1e <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3338      	adds	r3, #56	@ 0x38
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff fc56 	bl	80029e4 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>:
    return resources_.allocator();
  }

  // Reduces the capacity of the memory pool to match the current usage.
  // https://arduinojson.org/v7/api/jsondocument/shrinktofit/
  void shrinkToFit() {
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
    resources_.shrinkToFit();
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fe7d 	bl	8002e4c <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>
  }
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>:
    return getVariant().template as<T>();
  }

  // Empties the document and resets the memory pool
  // https://arduinojson.org/v7/api/jsondocument/clear/
  void clear() {
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
    resources_.clear();
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fe54 	bl	8002e12 <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>
    data_.reset();
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3338      	adds	r3, #56	@ 0x38
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fd0d 	bl	8002b8e <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>
  }
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>:

  JsonVariantConst getVariant() const {
    return JsonVariantConst(&data_, &resources_);
  }

  detail::ResourceManager* getResourceManager() {
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
    return &resources_;
 8003184:	687b      	ldr	r3, [r7, #4]
  }
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>:

  detail::VariantData* getData() {
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
    return &data_;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3338      	adds	r3, #56	@ 0x38
  }
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>:

  const detail::VariantData* getData() const {
    return &data_;
  }

  detail::VariantData* getOrCreateData() {
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
    return &data_;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3338      	adds	r3, #56	@ 0x38
  }
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>:
    --index;
  }
  return it;
}

inline VariantData* ArrayData::addElement(ResourceManager* resources) {
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
  auto slot = resources->allocVariant();
 80031cc:	f107 0308 	add.w	r3, r7, #8
 80031d0:	6839      	ldr	r1, [r7, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 f93e 	bl	8003454 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!slot)
 80031d8:	f107 0308 	add.w	r3, r7, #8
 80031dc:	4618      	mov	r0, r3
 80031de:	f001 fbdd 	bl	800499c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f083 0301 	eor.w	r3, r3, #1
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x30>
    return nullptr;
 80031ee:	2300      	movs	r3, #0
 80031f0:	e00d      	b.n	800320e <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x4c>
  CollectionData::appendOne(slot, resources);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	f107 0208 	add.w	r2, r7, #8
 80031fa:	ca06      	ldmia	r2, {r1, r2}
 80031fc:	f000 f867 	bl	80032ce <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>
  return slot.ptr();
 8003200:	f107 0308 	add.w	r3, r7, #8
 8003204:	4618      	mov	r0, r3
 8003206:	f001 fbda 	bl	80049be <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800320a:	4603      	mov	r3, r0
 800320c:	bf00      	nop
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>:
#include <ArduinoJson/Variant/VariantCompare.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline CollectionIterator::CollectionIterator(VariantData* slot, SlotId slotId)
 8003216:	b580      	push	{r7, lr}
 8003218:	b084      	sub	sp, #16
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	4613      	mov	r3, r2
 8003222:	80fb      	strh	r3, [r7, #6]
    : slot_(slot), currentId_(slotId) {
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	88fa      	ldrh	r2, [r7, #6]
 800322e:	809a      	strh	r2, [r3, #4]
  nextId_ = slot_ ? slot_->next() : NULL_SLOT;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d007      	beq.n	8003248 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x32>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fbe5 	bl	8002a0c <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8003242:	4603      	mov	r3, r0
 8003244:	461a      	mov	r2, r3
 8003246:	e001      	b.n	800324c <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x36>
 8003248:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	80da      	strh	r2, [r3, #6]
}
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>:

inline void CollectionIterator::next(const ResourceManager* resources) {
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	6039      	str	r1, [r7, #0]
  ARDUINOJSON_ASSERT(currentId_ != NULL_SLOT);
  slot_ = resources->getVariant(nextId_);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	88db      	ldrh	r3, [r3, #6]
 8003268:	4619      	mov	r1, r3
 800326a:	6838      	ldr	r0, [r7, #0]
 800326c:	f000 f965 	bl	800353a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8003270:	4602      	mov	r2, r0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	601a      	str	r2, [r3, #0]
  currentId_ = nextId_;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	88da      	ldrh	r2, [r3, #6]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	809a      	strh	r2, [r3, #4]
  if (slot_)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE+0x3e>
    nextId_ = slot_->next();
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fbbe 	bl	8002a0c <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8003290:	4603      	mov	r3, r0
 8003292:	461a      	mov	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	80da      	strh	r2, [r3, #6]
}
 8003298:	bf00      	nop
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>:

inline CollectionData::iterator CollectionData::createIterator(
    const ResourceManager* resources) const {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  return iterator(resources->getVariant(head_), head_);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	4619      	mov	r1, r3
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f941 	bl	800353a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 80032b8:	4601      	mov	r1, r0
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f7ff ffa8 	bl	8003216 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>
}
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>:

inline void CollectionData::appendOne(Slot<VariantData> slot,
                                      const ResourceManager* resources) {
 80032ce:	b590      	push	{r4, r7, lr}
 80032d0:	b087      	sub	sp, #28
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	1d38      	adds	r0, r7, #4
 80032d8:	e880 0006 	stmia.w	r0, {r1, r2}
 80032dc:	603b      	str	r3, [r7, #0]
  if (tail_ != NULL_SLOT) {
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	885b      	ldrh	r3, [r3, #2]
 80032e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d019      	beq.n	800331e <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x50>
    auto tail = resources->getVariant(tail_);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	885b      	ldrh	r3, [r3, #2]
 80032ee:	4619      	mov	r1, r3
 80032f0:	6838      	ldr	r0, [r7, #0]
 80032f2:	f000 f922 	bl	800353a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 80032f6:	6178      	str	r0, [r7, #20]
    tail->setNext(slot.id());
 80032f8:	697c      	ldr	r4, [r7, #20]
 80032fa:	1d3b      	adds	r3, r7, #4
 80032fc:	4618      	mov	r0, r3
 80032fe:	f001 fb6a 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003302:	4603      	mov	r3, r0
 8003304:	4619      	mov	r1, r3
 8003306:	4620      	mov	r0, r4
 8003308:	f7ff fb8c 	bl	8002a24 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = slot.id();
 800330c:	1d3b      	adds	r3, r7, #4
 800330e:	4618      	mov	r0, r3
 8003310:	f001 fb61 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003314:	4603      	mov	r3, r0
 8003316:	461a      	mov	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = slot.id();
    tail_ = slot.id();
  }
}
 800331c:	e00f      	b.n	800333e <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x70>
    head_ = slot.id();
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	4618      	mov	r0, r3
 8003322:	f001 fb58 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003326:	4603      	mov	r3, r0
 8003328:	461a      	mov	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	801a      	strh	r2, [r3, #0]
    tail_ = slot.id();
 800332e:	1d3b      	adds	r3, r7, #4
 8003330:	4618      	mov	r0, r3
 8003332:	f001 fb50 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003336:	4603      	mov	r3, r0
 8003338:	461a      	mov	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	805a      	strh	r2, [r3, #2]
}
 800333e:	bf00      	nop
 8003340:	371c      	adds	r7, #28
 8003342:	46bd      	mov	sp, r7
 8003344:	bd90      	pop	{r4, r7, pc}

08003346 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>:

inline void CollectionData::appendPair(Slot<VariantData> key,
                                       Slot<VariantData> value,
                                       const ResourceManager* resources) {
 8003346:	b082      	sub	sp, #8
 8003348:	b590      	push	{r4, r7, lr}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	1d38      	adds	r0, r7, #4
 8003352:	e880 0006 	stmia.w	r0, {r1, r2}
 8003356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  key->setNext(value.id());
 8003358:	1d3b      	adds	r3, r7, #4
 800335a:	4618      	mov	r0, r3
 800335c:	f001 fb47 	bl	80049ee <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8003360:	4604      	mov	r4, r0
 8003362:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003366:	4618      	mov	r0, r3
 8003368:	f001 fb35 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 800336c:	4603      	mov	r3, r0
 800336e:	4619      	mov	r1, r3
 8003370:	4620      	mov	r0, r4
 8003372:	f7ff fb57 	bl	8002a24 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>

  if (tail_ != NULL_SLOT) {
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	885b      	ldrh	r3, [r3, #2]
 800337a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800337e:	4293      	cmp	r3, r2
 8003380:	d01a      	beq.n	80033b8 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x72>
    auto tail = resources->getVariant(tail_);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	885b      	ldrh	r3, [r3, #2]
 8003386:	4619      	mov	r1, r3
 8003388:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800338a:	f000 f8d6 	bl	800353a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 800338e:	6178      	str	r0, [r7, #20]
    tail->setNext(key.id());
 8003390:	697c      	ldr	r4, [r7, #20]
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	4618      	mov	r0, r3
 8003396:	f001 fb1e 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 800339a:	4603      	mov	r3, r0
 800339c:	4619      	mov	r1, r3
 800339e:	4620      	mov	r0, r4
 80033a0:	f7ff fb40 	bl	8002a24 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = value.id();
 80033a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033a8:	4618      	mov	r0, r3
 80033aa:	f001 fb14 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 80033ae:	4603      	mov	r3, r0
 80033b0:	461a      	mov	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = key.id();
    tail_ = value.id();
  }
}
 80033b6:	e010      	b.n	80033da <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x94>
    head_ = key.id();
 80033b8:	1d3b      	adds	r3, r7, #4
 80033ba:	4618      	mov	r0, r3
 80033bc:	f001 fb0b 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	801a      	strh	r2, [r3, #0]
    tail_ = value.id();
 80033c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033cc:	4618      	mov	r0, r3
 80033ce:	f001 fb02 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	805a      	strh	r2, [r3, #2]
}
 80033da:	bf00      	nop
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80033e4:	b002      	add	sp, #8
 80033e6:	4770      	bx	lr

080033e8 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>:

inline void CollectionData::clear(ResourceManager* resources) {
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  auto next = head_;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	82fb      	strh	r3, [r7, #22]
  while (next != NULL_SLOT) {
 80033f8:	e01b      	b.n	8003432 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x4a>
    auto currId = next;
 80033fa:	8afb      	ldrh	r3, [r7, #22]
 80033fc:	82bb      	strh	r3, [r7, #20]
    auto slot = resources->getVariant(next);
 80033fe:	8afb      	ldrh	r3, [r7, #22]
 8003400:	4619      	mov	r1, r3
 8003402:	6838      	ldr	r0, [r7, #0]
 8003404:	f000 f899 	bl	800353a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8003408:	6138      	str	r0, [r7, #16]
    next = slot->next();
 800340a:	6938      	ldr	r0, [r7, #16]
 800340c:	f7ff fafe 	bl	8002a0c <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8003410:	4603      	mov	r3, r0
 8003412:	82fb      	strh	r3, [r7, #22]
    resources->freeVariant({slot, currId});
 8003414:	683c      	ldr	r4, [r7, #0]
 8003416:	8aba      	ldrh	r2, [r7, #20]
 8003418:	f107 0308 	add.w	r3, r7, #8
 800341c:	6939      	ldr	r1, [r7, #16]
 800341e:	4618      	mov	r0, r3
 8003420:	f001 faf1 	bl	8004a06 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
 8003424:	f107 0308 	add.w	r3, r7, #8
 8003428:	e893 0006 	ldmia.w	r3, {r1, r2}
 800342c:	4620      	mov	r0, r4
 800342e:	f000 f851 	bl	80034d4 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>
  while (next != NULL_SLOT) {
 8003432:	8afb      	ldrh	r3, [r7, #22]
 8003434:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003438:	4293      	cmp	r3, r2
 800343a:	d1de      	bne.n	80033fa <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x12>
  }

  head_ = NULL_SLOT;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003442:	801a      	strh	r2, [r3, #0]
  tail_ = NULL_SLOT;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800344a:	805a      	strh	r2, [r3, #2]
}
 800344c:	bf00      	nop
 800344e:	371c      	adds	r7, #28
 8003450:	46bd      	mov	sp, r7
 8003452:	bd90      	pop	{r4, r7, pc}

08003454 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>:
#include <ArduinoJson/Polyfills/alias_cast.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline Slot<VariantData> ResourceManager::allocVariant() {
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	f103 010c 	add.w	r1, r3, #12
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	f107 0308 	add.w	r3, r7, #8
 800346c:	4618      	mov	r0, r3
 800346e:	f001 faf0 	bl	8004a52 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8003472:	f107 0308 	add.w	r3, r7, #8
 8003476:	4618      	mov	r0, r3
 8003478:	f001 fb2e 	bl	8004ad8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 800347c:	4603      	mov	r3, r0
 800347e:	f083 0301 	eor.w	r3, r3, #1
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d006      	beq.n	8003496 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x42>
    overflowed_ = true;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2201      	movs	r2, #1
 800348c:	711a      	strb	r2, [r3, #4]
    return {};
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f001 facd 	bl	8004a2e <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>
 8003494:	e01a      	b.n	80034cc <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x78>
  }
  return {new (&p->variant) VariantData, p.id()};
 8003496:	f107 0308 	add.w	r3, r7, #8
 800349a:	4618      	mov	r0, r3
 800349c:	f001 fb2d 	bl	8004afa <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 80034a0:	4603      	mov	r3, r0
 80034a2:	4619      	mov	r1, r3
 80034a4:	2008      	movs	r0, #8
 80034a6:	f7ff fa91 	bl	80029cc <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>
 80034aa:	4604      	mov	r4, r0
 80034ac:	2c00      	cmp	r4, #0
 80034ae:	d002      	beq.n	80034b6 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x62>
 80034b0:	4620      	mov	r0, r4
 80034b2:	f7ff fa97 	bl	80029e4 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 80034b6:	f107 0308 	add.w	r3, r7, #8
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 fb29 	bl	8004b12 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 80034c0:	4603      	mov	r3, r0
 80034c2:	461a      	mov	r2, r3
 80034c4:	4621      	mov	r1, r4
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f001 fa9d 	bl	8004a06 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
}
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd90      	pop	{r4, r7, pc}

080034d4 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>:

inline void ResourceManager::freeVariant(Slot<VariantData> variant) {
 80034d4:	b5b0      	push	{r4, r5, r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	1d3b      	adds	r3, r7, #4
 80034de:	e883 0006 	stmia.w	r3, {r1, r2}
  variant->clear(this);
 80034e2:	1d3b      	adds	r3, r7, #4
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 fa82 	bl	80049ee <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 80034ea:	4603      	mov	r3, r0
 80034ec:	68f9      	ldr	r1, [r7, #12]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fa1c 	bl	800392c <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
  variantPools_.freeSlot({alias_cast<SlotData*>(variant.ptr()), variant.id()});
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f103 040c 	add.w	r4, r3, #12
 80034fa:	1d3b      	adds	r3, r7, #4
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 fa5e 	bl	80049be <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8003502:	4603      	mov	r3, r0
 8003504:	4618      	mov	r0, r3
 8003506:	f001 fb10 	bl	8004b2a <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>
 800350a:	4605      	mov	r5, r0
 800350c:	1d3b      	adds	r3, r7, #4
 800350e:	4618      	mov	r0, r3
 8003510:	f001 fa61 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003514:	4603      	mov	r3, r0
 8003516:	461a      	mov	r2, r3
 8003518:	f107 0310 	add.w	r3, r7, #16
 800351c:	4629      	mov	r1, r5
 800351e:	4618      	mov	r0, r3
 8003520:	f001 fb10 	bl	8004b44 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 8003524:	f107 0310 	add.w	r3, r7, #16
 8003528:	e893 0006 	ldmia.w	r3, {r1, r2}
 800352c:	4620      	mov	r0, r4
 800352e:	f001 fb1d 	bl	8004b6c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 8003532:	bf00      	nop
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bdb0      	pop	{r4, r5, r7, pc}

0800353a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>:

inline VariantData* ResourceManager::getVariant(SlotId id) const {
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	460b      	mov	r3, r1
 8003544:	807b      	strh	r3, [r7, #2]
  return reinterpret_cast<VariantData*>(variantPools_.getSlot(id));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	330c      	adds	r3, #12
 800354a:	887a      	ldrh	r2, [r7, #2]
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f001 fb28 	bl	8004ba4 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8003554:	4603      	mov	r3, r0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>:

#if ARDUINOJSON_USE_EXTENSIONS
inline Slot<VariantExtension> ResourceManager::allocExtension() {
 800355e:	b590      	push	{r4, r7, lr}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	f103 010c 	add.w	r1, r3, #12
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	f107 0308 	add.w	r3, r7, #8
 8003576:	4618      	mov	r0, r3
 8003578:	f001 fa6b 	bl	8004a52 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 800357c:	f107 0308 	add.w	r3, r7, #8
 8003580:	4618      	mov	r0, r3
 8003582:	f001 faa9 	bl	8004ad8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8003586:	4603      	mov	r3, r0
 8003588:	f083 0301 	eor.w	r3, r3, #1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x42>
    overflowed_ = true;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2201      	movs	r2, #1
 8003596:	711a      	strb	r2, [r3, #4]
    return {};
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f001 fb27 	bl	8004bec <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>
 800359e:	e011      	b.n	80035c4 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x66>
  }
  return {&p->extension, p.id()};
 80035a0:	f107 0308 	add.w	r3, r7, #8
 80035a4:	4618      	mov	r0, r3
 80035a6:	f001 faa8 	bl	8004afa <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 80035aa:	4603      	mov	r3, r0
 80035ac:	461c      	mov	r4, r3
 80035ae:	f107 0308 	add.w	r3, r7, #8
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 faad 	bl	8004b12 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 80035b8:	4603      	mov	r3, r0
 80035ba:	461a      	mov	r2, r3
 80035bc:	4621      	mov	r1, r4
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f001 fb26 	bl	8004c10 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>
}
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd90      	pop	{r4, r7, pc}

080035cc <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>:

inline void ResourceManager::freeExtension(SlotId id) {
 80035cc:	b590      	push	{r4, r7, lr}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	807b      	strh	r3, [r7, #2]
  auto p = getExtension(id);
 80035d8:	887b      	ldrh	r3, [r7, #2]
 80035da:	4619      	mov	r1, r3
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f816 	bl	800360e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 80035e2:	6178      	str	r0, [r7, #20]
  variantPools_.freeSlot({reinterpret_cast<SlotData*>(p), id});
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f103 040c 	add.w	r4, r3, #12
 80035ea:	887a      	ldrh	r2, [r7, #2]
 80035ec:	f107 030c 	add.w	r3, r7, #12
 80035f0:	6979      	ldr	r1, [r7, #20]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 faa6 	bl	8004b44 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 80035f8:	f107 030c 	add.w	r3, r7, #12
 80035fc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003600:	4620      	mov	r0, r4
 8003602:	f001 fab3 	bl	8004b6c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	bd90      	pop	{r4, r7, pc}

0800360e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>:

inline VariantExtension* ResourceManager::getExtension(SlotId id) const {
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	460b      	mov	r3, r1
 8003618:	807b      	strh	r3, [r7, #2]
  return &variantPools_.getSlot(id)->extension;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	330c      	adds	r3, #12
 800361e:	887a      	ldrh	r2, [r7, #2]
 8003620:	4611      	mov	r1, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f001 fabe 	bl	8004ba4 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8003628:	4603      	mov	r3, r0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 8003632:	b580      	push	{r7, lr}
 8003634:	b084      	sub	sp, #16
 8003636:	af00      	add	r7, sp, #0
 8003638:	4603      	mov	r3, r0
 800363a:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(false);
 800363c:	2000      	movs	r0, #0
 800363e:	f000 f819 	bl	8003674 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>
 8003642:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0')
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x1e>
        return 0;
 800364c:	2300      	movs	r3, #0
 800364e:	e00c      	b.n	800366a <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	79fa      	ldrb	r2, [r7, #7]
 8003656:	429a      	cmp	r2, r3
 8003658:	d103      	bne.n	8003662 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x30>
        return p[1];
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3301      	adds	r3, #1
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	e003      	b.n	800366a <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3302      	adds	r3, #2
 8003666:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0')
 8003668:	e7ec      	b.n	8003644 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x12>
    }
  }
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>:

 private:
  static const char* escapeTable(bool isSerializing) {
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	71fb      	strb	r3, [r7, #7]
    return &"//''\"\"\\\\b\bf\fn\nr\rt\t"[isSerializing ? 4 : 0];
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x14>
 8003684:	2304      	movs	r3, #4
 8003686:	e000      	b.n	800368a <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x16>
 8003688:	2300      	movs	r3, #0
 800368a:	4a04      	ldr	r2, [pc, #16]	@ (800369c <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x28>)
 800368c:	4413      	add	r3, r2
  }
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	0801ece0 	.word	0x0801ece0

080036a0 <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>:

class StringBuilder {
 public:
  static const size_t initialCapacity = 31;

  StringBuilder(ResourceManager* resources) : resources_(resources) {}
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>:

  ~StringBuilder() {
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
    if (node_)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d007      	beq.n	80036ea <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev+0x20>
      resources_->destroyString(node_);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4619      	mov	r1, r3
 80036e4:	4610      	mov	r0, r2
 80036e6:	f7ff fb73 	bl	8002dd0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>
  }
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>:

  void startString() {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
    size_ = 0;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	609a      	str	r2, [r3, #8]
    if (!node_)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d108      	bne.n	800371c <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv+0x28>
      node_ = resources_->createString(initialCapacity);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	211f      	movs	r1, #31
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff fb2d 	bl	8002d70 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>
 8003716:	4602      	mov	r2, r0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	605a      	str	r2, [r3, #4]
  }
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>:

  StringNode* save() {
 8003724:	b590      	push	{r4, r7, lr}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	4413      	add	r3, r2
 8003736:	2200      	movs	r2, #0
 8003738:	721a      	strb	r2, [r3, #8]
    StringNode* node = resources_->getString(adaptString(node_->data, size_));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681c      	ldr	r4, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f103 0108 	add.w	r1, r3, #8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	f107 0308 	add.w	r3, r7, #8
 800374e:	4618      	mov	r0, r3
 8003750:	f001 fa72 	bl	8004c38 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8003754:	f107 0308 	add.w	r3, r7, #8
 8003758:	4619      	mov	r1, r3
 800375a:	4620      	mov	r0, r4
 800375c:	f001 fa7d 	bl	8004c5a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 8003760:	6178      	str	r0, [r7, #20]
    if (!node) {
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d113      	bne.n	8003790 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x6c>
      node = resources_->resizeString(node_, size_);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	461a      	mov	r2, r3
 8003776:	f7ff fb12 	bl	8002d9e <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 800377a:	6178      	str	r0, [r7, #20]
      ARDUINOJSON_ASSERT(node != nullptr);  // realloc to smaller can't fail
      resources_->saveString(node);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6979      	ldr	r1, [r7, #20]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fae5 	bl	8002d52 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>
      node_ = nullptr;  // next time we need a new string
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	e005      	b.n	800379c <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x78>
    } else {
      node->references++;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	889b      	ldrh	r3, [r3, #4]
 8003794:	3301      	adds	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	809a      	strh	r2, [r3, #4]
    }
    return node;
 800379c:	697b      	ldr	r3, [r7, #20]
  }
 800379e:	4618      	mov	r0, r3
 80037a0:	371c      	adds	r7, #28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd90      	pop	{r4, r7, pc}

080037a6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>:
  void append(const char* s, size_t n) {
    while (n-- > 0)  // TODO: memcpy
      append(*s++);
  }

  void append(char c) {
 80037a6:	b590      	push	{r4, r7, lr}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	460b      	mov	r3, r1
 80037b0:	70fb      	strb	r3, [r7, #3]
    if (node_ && size_ == node_->length)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d014      	beq.n	80037e4 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6852      	ldr	r2, [r2, #4]
 80037c2:	88d2      	ldrh	r2, [r2, #6]
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d10d      	bne.n	80037e4 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
      node_ = resources_->resizeString(node_, size_ * 2U + 1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6859      	ldr	r1, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	3301      	adds	r3, #1
 80037d8:	461a      	mov	r2, r3
 80037da:	f7ff fae0 	bl	8002d9e <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 80037de:	4602      	mov	r2, r0
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	605a      	str	r2, [r3, #4]
    if (node_)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x5c>
      node_->data[size_++] = c;
 80037ec:	78fc      	ldrb	r4, [r7, #3]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	1c58      	adds	r0, r3, #1
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	6088      	str	r0, [r1, #8]
 80037fc:	4413      	add	r3, r2
 80037fe:	4622      	mov	r2, r4
 8003800:	721a      	strb	r2, [r3, #8]
  }
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	bd90      	pop	{r4, r7, pc}

0800380a <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>:

  bool isValid() const {
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
    return node_ != nullptr;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	bf14      	ite	ne
 800381a:	2301      	movne	r3, #1
 800381c:	2300      	moveq	r3, #0
 800381e:	b2db      	uxtb	r3, r3
  }
 8003820:	4618      	mov	r0, r3
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>:

  size_t size() const {
    return size_;
  }

  JsonString str() const {
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	4413      	add	r3, r2
 8003840:	2200      	movs	r2, #0
 8003842:	721a      	strb	r2, [r3, #8]
    return JsonString(node_->data, size_);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f103 0108 	add.w	r1, r3, #8
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	2300      	movs	r3, #0
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f001 fa11 	bl	8004c7a <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>
  }
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>:
  static void toJson(const char* src, JsonVariant dst) {
    detail::VariantData::setString(getData(dst), detail::adaptString(src),
                                   getResourceManager(dst));
  }

  static const char* fromJson(JsonVariantConst src) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	463b      	mov	r3, r7
 8003868:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 800386c:	463b      	mov	r3, r7
 800386e:	4618      	mov	r0, r3
 8003870:	f001 f87c 	bl	800496c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8003874:	6178      	str	r0, [r7, #20]
    return data ? data->asString().c_str() : 0;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00c      	beq.n	8003896 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x36>
 800387c:	f107 0308 	add.w	r3, r7, #8
 8003880:	6979      	ldr	r1, [r7, #20]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff f91c 	bl	8002ac0 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8003888:	f107 0308 	add.w	r3, r7, #8
 800388c:	4618      	mov	r0, r3
 800388e:	f7fe fffb 	bl	8002888 <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 8003892:	4603      	mov	r3, r0
 8003894:	e000      	b.n	8003898 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x38>
 8003896:	2300      	movs	r3, #0
  }
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonArray>().set(src);
  }

  static JsonArray fromJson(JsonVariant src) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	1d3b      	adds	r3, r7, #4
 80038aa:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 80038ae:	1d3b      	adds	r3, r7, #4
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 f84f 	bl	8004954 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80038b6:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 80038b8:	1d3b      	adds	r3, r7, #4
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 f9ef 	bl	8004c9e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 80038c0:	6138      	str	r0, [r7, #16]
    return JsonArray(data != 0 ? data->asArray() : 0, resources);
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d004      	beq.n	80038d2 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x32>
 80038c8:	6978      	ldr	r0, [r7, #20]
 80038ca:	f7ff f8ba 	bl	8002a42 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 80038ce:	4603      	mov	r3, r0
 80038d0:	e000      	b.n	80038d4 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x34>
 80038d2:	2300      	movs	r3, #0
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4619      	mov	r1, r3
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f7ff fb9e 	bl	800301a <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>
  }
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonObject>().set(src);
  }

  static JsonObject fromJson(JsonVariant src) {
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b086      	sub	sp, #24
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	1d3b      	adds	r3, r7, #4
 80038f0:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 80038f4:	1d3b      	adds	r3, r7, #4
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 f82c 	bl	8004954 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80038fc:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 80038fe:	1d3b      	adds	r3, r7, #4
 8003900:	4618      	mov	r0, r3
 8003902:	f001 f9cc 	bl	8004c9e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8003906:	6138      	str	r0, [r7, #16]
    return JsonObject(data != 0 ? data->asObject() : 0, resources);
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d004      	beq.n	8003918 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x32>
 800390e:	6978      	ldr	r0, [r7, #20]
 8003910:	f7ff f8b9 	bl	8002a86 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8003914:	4603      	mov	r3, r0
 8003916:	e000      	b.n	800391a <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x34>
 8003918:	2300      	movs	r3, #0
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4619      	mov	r1, r3
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f7ff fbce 	bl	80030c0 <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>
  }
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>:
  }

  return false;
}

inline void VariantData::clear(ResourceManager* resources) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  if (type_ & VariantTypeBits::OwnedStringBit)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	791b      	ldrb	r3, [r3, #4]
 800393a:	2101      	movs	r1, #1
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff f823 	bl	8002988 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d006      	beq.n	8003956 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x2a>
    resources->dereferenceString(content_.asOwnedString->data);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3308      	adds	r3, #8
 800394e:	4619      	mov	r1, r3
 8003950:	6838      	ldr	r0, [r7, #0]
 8003952:	f7ff fa4c 	bl	8002dee <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>

#if ARDUINOJSON_USE_EXTENSIONS
  if (type_ & VariantTypeBits::ExtensionBit)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	791b      	ldrb	r3, [r3, #4]
 800395a:	2110      	movs	r1, #16
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff f813 	bl	8002988 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x48>
    resources->freeExtension(content_.asSlotId);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	4619      	mov	r1, r3
 800396e:	6838      	ldr	r0, [r7, #0]
 8003970:	f7ff fe2c 	bl	80035cc <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>
#endif

  auto collection = asCollection();
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff f875 	bl	8002a64 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>
 800397a:	60f8      	str	r0, [r7, #12]
  if (collection)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x5e>
    collection->clear(resources);
 8003982:	6839      	ldr	r1, [r7, #0]
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f7ff fd2f 	bl	80033e8 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>

  type_ = VariantType::Null;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	711a      	strb	r2, [r3, #4]
}
 8003990:	bf00      	nop
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>:

#if ARDUINOJSON_USE_EXTENSIONS
inline const VariantExtension* VariantData::getExtension(
    const ResourceManager* resources) const {
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  return type_ & VariantTypeBits::ExtensionBit
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	791b      	ldrb	r3, [r3, #4]
 80039a6:	2110      	movs	r1, #16
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fe ffed 	bl	8002988 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80039ae:	4603      	mov	r3, r0
             ? resources->getExtension(content_.asSlotId)
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	4619      	mov	r1, r3
 80039ba:	6838      	ldr	r0, [r7, #0]
 80039bc:	f7ff fe27 	bl	800360e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 80039c0:	4603      	mov	r3, r0
             : nullptr;
 80039c2:	e000      	b.n	80039c6 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2e>
             ? resources->getExtension(content_.asSlotId)
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>:
    NoMemory,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : code_(c) {}
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	460b      	mov	r3, r1
 80039d8:	70fb      	strb	r3, [r7, #3]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>:
  explicit operator bool() const {
    return code_ != Ok;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
    return code_;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	781b      	ldrb	r3, [r3, #0]
  }
 80039fa:	4618      	mov	r0, r3
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>:

  const char* c_str() const {
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
    static const char* messages[] = {
        "Ok",           "EmptyInput", "IncompleteInput",
        "InvalidInput", "NoMemory",   "TooDeep"};
    ARDUINOJSON_ASSERT(static_cast<size_t>(code_) <
                       sizeof(messages) / sizeof(messages[0]));
    return messages[code_];
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	4b04      	ldr	r3, [pc, #16]	@ (8003a28 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv+0x20>)
 8003a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  }
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	24000004 	.word	0x24000004

08003a2c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>:
};
}  // namespace DeserializationOption

namespace detail {
struct AllowAllFilter {
  bool allow() const {
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
    return true;
 8003a34:	2301      	movs	r3, #1
  }
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>:

  bool allowArray() const {
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
    return true;
 8003a4a:	2301      	movs	r3, #1
  }
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>:

  bool allowObject() const {
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
    return true;
 8003a60:	2301      	movs	r3, #1
  }
 8003a62:	4618      	mov	r0, r3
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>:

  bool allowValue() const {
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
    return true;
 8003a76:	2301      	movs	r3, #1
  }
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

namespace DeserializationOption {
class NestingLimit {
 public:
  NestingLimit() : value_(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	220a      	movs	r2, #10
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>:
  explicit NestingLimit(uint8_t n) : value_(n) {}
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	70fb      	strb	r3, [r7, #3]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>:

  NestingLimit decrement() const {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(value_ > 0);
    return NestingLimit(static_cast<uint8_t>(value_ - 1));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	f107 030c 	add.w	r3, r7, #12
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff ffe2 	bl	8003aa0 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>
 8003adc:	7b3b      	ldrb	r3, [r7, #12]
  }
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>:

  bool reached() const {
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
    return value_ == 0;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	bf0c      	ite	eq
 8003af6:	2301      	moveq	r3, #1
 8003af8:	2300      	movne	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
  }
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>:
    DeserializationOption::NestingLimit nestingLimit, TFilter filter) {
  return {filter, nestingLimit};
}

inline DeserializationOptions<AllowAllFilter> makeDeserializationOptions(
    DeserializationOption::NestingLimit nestingLimit = {}) {
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	7138      	strb	r0, [r7, #4]
  return {{}, nestingLimit};
 8003b10:	793b      	ldrb	r3, [r7, #4]
 8003b12:	737b      	strb	r3, [r7, #13]
 8003b14:	2300      	movs	r3, #0
 8003b16:	7b3a      	ldrb	r2, [r7, #12]
 8003b18:	f362 0307 	bfi	r3, r2, #0, #8
 8003b1c:	7b7a      	ldrb	r2, [r7, #13]
 8003b1e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>:
inline void shrinkJsonDocument(TDestination&) {
  // no-op by default
}

#if ARDUINOJSON_AUTO_SHRINK
inline void shrinkJsonDocument(JsonDocument& doc) {
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  doc.shrinkToFit();
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff fb03 	bl	8003142 <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>
}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf16 {
inline bool isHighSurrogate(uint16_t codeunit) {
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xD800 && codeunit < 0xDC00;
 8003b4e:	88fb      	ldrh	r3, [r7, #6]
 8003b50:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8003b54:	d305      	bcc.n	8003b62 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8003b5c:	d201      	bcs.n	8003b62 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x20>
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>:

inline bool isLowSurrogate(uint16_t codeunit) {
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xDC00 && codeunit < 0xE000;
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8003b80:	d305      	bcc.n	8003b8e <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8003b88:	d201      	bcs.n	8003b8e <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x20>
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>:

class Codepoint {
 public:
  Codepoint() : highSurrogate_(0), codepoint_(0) {}
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	801a      	strh	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	605a      	str	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>:

  bool append(uint16_t codeunit) {
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	807b      	strh	r3, [r7, #2]
    if (isHighSurrogate(codeunit)) {
 8003bca:	887b      	ldrh	r3, [r7, #2]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff ffb9 	bl	8003b44 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d007      	beq.n	8003be8 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x2a>
      highSurrogate_ = codeunit & 0x3FF;
 8003bd8:	887b      	ldrh	r3, [r7, #2]
 8003bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	801a      	strh	r2, [r3, #0]
      return false;
 8003be4:	2300      	movs	r3, #0
 8003be6:	e018      	b.n	8003c1a <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    if (isLowSurrogate(codeunit)) {
 8003be8:	887b      	ldrh	r3, [r7, #2]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff ffc0 	bl	8003b70 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00d      	beq.n	8003c12 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x54>
      codepoint_ =
          uint32_t(0x10000 + ((highSurrogate_ << 10) | (codeunit & 0x3FF)));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	029a      	lsls	r2, r3, #10
 8003bfc:	887b      	ldrh	r3, [r7, #2]
 8003bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003c08:	461a      	mov	r2, r3
      codepoint_ =
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	605a      	str	r2, [r3, #4]
      return true;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e003      	b.n	8003c1a <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    codepoint_ = codeunit;
 8003c12:	887a      	ldrh	r2, [r7, #2]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	605a      	str	r2, [r3, #4]
    return true;
 8003c18:	2301      	movs	r3, #1
  }
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>:

  uint32_t value() const {
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
    return codepoint_;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
  }
 8003c2e:	4618      	mov	r0, r3
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>:
#include <ArduinoJson/Namespace.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

#ifndef isdigit
inline bool isdigit(char c) {
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	4603      	mov	r3, r0
 8003c42:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	2b2f      	cmp	r3, #47	@ 0x2f
 8003c48:	d904      	bls.n	8003c54 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	2b39      	cmp	r3, #57	@ 0x39
 8003c4e:	d801      	bhi.n	8003c54 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1c>
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>:
  Double,
#endif
};

union NumberValue {
  NumberValue() {}
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>:
  NumberValue(float x) : asFloat(x) {}
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	ed87 0a00 	vstr	s0, [r7]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>:
  NumberValue(JsonInteger x) : asSignedInteger(x) {}
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	e9c7 2300 	strd	r2, r3, [r7]
 8003ca4:	68f9      	ldr	r1, [r7, #12]
 8003ca6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003caa:	e9c1 2300 	strd	r2, r3, [r1]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>:
  NumberValue(JsonUInt x) : asUnsignedInteger(x) {}
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	e9c7 2300 	strd	r2, r3, [r7]
 8003cc8:	68f9      	ldr	r1, [r7, #12]
 8003cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cce:	e9c1 2300 	strd	r2, r3, [r1]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  NumberValue(double x) : asDouble(x) {}
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	ed87 0b00 	vstr	d0, [r7]
 8003cec:	68f9      	ldr	r1, [r7, #12]
 8003cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cf2:	e9c1 2300 	strd	r2, r3, [r1]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>:
class Number {
  NumberType type_;
  NumberValue value_;

 public:
  Number() : type_(NumberType::Invalid) {}
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3308      	adds	r3, #8
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff ffa3 	bl	8003c62 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>:
  Number(float value) : type_(NumberType::Float), value_(value) {}
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	ed87 0a00 	vstr	s0, [r7]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	ed97 0a00 	vldr	s0, [r7]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff ff99 	bl	8003c78 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>:
  Number(JsonInteger value) : type_(NumberType::SignedInteger), value_(value) {}
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	e9c7 2300 	strd	r2, r3, [r7]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	701a      	strb	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f103 0108 	add.w	r1, r3, #8
 8003d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	f7ff ff93 	bl	8003c98 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>:
  Number(JsonUInt value) : type_(NumberType::UnsignedInteger), value_(value) {}
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	e9c7 2300 	strd	r2, r3, [r7]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f103 0108 	add.w	r1, r3, #8
 8003d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d98:	4608      	mov	r0, r1
 8003d9a:	f7ff ff8f 	bl	8003cbc <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  Number(double value) : type_(NumberType::Double), value_(value) {}
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	ed87 0b00 	vstr	d0, [r7]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2204      	movs	r2, #4
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	ed97 0b00 	vldr	d0, [r7]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff ff8c 	bl	8003ce0 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>:
      default:
        return T();
    }
  }

  NumberType type() const {
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
    return type_;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
  }
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>:

  JsonInteger asSignedInteger() const {
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::SignedInteger);
    return value_.asSignedInteger;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 8003df8:	4610      	mov	r0, r2
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>:

  JsonUInt asUnsignedInteger() const {
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::UnsignedInteger);
    return value_.asUnsignedInteger;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 8003e14:	4610      	mov	r0, r2
 8003e16:	4619      	mov	r1, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>:

  float asFloat() const {
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Float);
    return value_.asFloat;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	ee07 3a90 	vmov	s15, r3
  }
 8003e32:	eeb0 0a67 	vmov.f32	s0, s15
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>:

#if ARDUINOJSON_USE_DOUBLE
  double asDouble() const {
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Double);
    return value_.asDouble;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003e4e:	ec43 2b17 	vmov	d7, r2, r3
  }
 8003e52:	eeb0 0b47 	vmov.f64	d0, d7
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>:
#endif
};

inline Number parseNumber(const char* s) {
 8003e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e64:	b0a6      	sub	sp, #152	@ 0x98
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8003e6a:	64b9      	str	r1, [r7, #72]	@ 0x48
  using mantissa_t = largest_type<traits::mantissa_type, JsonUInt>;
  using exponent_t = traits::exponent_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  switch (*s) {
 8003e72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b2b      	cmp	r3, #43	@ 0x2b
 8003e78:	d008      	beq.n	8003e8c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c>
 8003e7a:	2b2d      	cmp	r3, #45	@ 0x2d
 8003e7c:	d10a      	bne.n	8003e94 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '-':
      is_negative = true;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      s++;
 8003e84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e86:	3301      	adds	r3, #1
 8003e88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e8a:	e003      	b.n	8003e94 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '+':
      s++;
 8003e8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e8e:	3301      	adds	r3, #1
 8003e90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e92:	bf00      	nop
  if (*s == 'i' || *s == 'I') {
    return Number(is_negative ? -traits::inf() : traits::inf());
  }
#endif

  if (!isdigit(*s) && *s != '.')
 8003e94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff fece 	bl	8003c3a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	f083 0301 	eor.w	r3, r3, #1
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 8003eaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b2e      	cmp	r3, #46	@ 0x2e
 8003eb0:	d001      	beq.n	8003eb6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x58>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x64>
    return Number();
 8003ebc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003ebe:	f7ff ff21 	bl	8003d04 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 8003ec2:	e1f5      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

  mantissa_t mantissa = 0;
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
  exponent_t exponent_offset = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  const mantissa_t maxUint = JsonUInt(-1);
 8003ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eda:	f04f 33ff 	mov.w	r3, #4294967295
 8003ede:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  while (isdigit(*s)) {
 8003ee2:	e054      	b.n	8003f8e <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x12e>
    uint8_t digit = uint8_t(*s - '0');
 8003ee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	3b30      	subs	r3, #48	@ 0x30
 8003eea:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (mantissa > maxUint / 10)
 8003eee:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003ef2:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8003ef6:	49ae      	ldr	r1, [pc, #696]	@ (80041b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x350>)
 8003ef8:	418b      	sbcs	r3, r1
 8003efa:	d251      	bcs.n	8003fa0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x140>
      break;
    mantissa *= 10;
 8003efc:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8003f00:	4622      	mov	r2, r4
 8003f02:	462b      	mov	r3, r5
 8003f04:	f04f 0000 	mov.w	r0, #0
 8003f08:	f04f 0100 	mov.w	r1, #0
 8003f0c:	0099      	lsls	r1, r3, #2
 8003f0e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003f12:	0090      	lsls	r0, r2, #2
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	eb12 0804 	adds.w	r8, r2, r4
 8003f1c:	eb43 0905 	adc.w	r9, r3, r5
 8003f20:	eb18 0308 	adds.w	r3, r8, r8
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	eb49 0309 	adc.w	r3, r9, r9
 8003f2a:	61fb      	str	r3, [r7, #28]
 8003f2c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003f30:	e9c7 8922 	strd	r8, r9, [r7, #136]	@ 0x88
    if (mantissa > maxUint - digit)
 8003f34:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003f38:	2200      	movs	r2, #0
 8003f3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f3c:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f3e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003f42:	460b      	mov	r3, r1
 8003f44:	43db      	mvns	r3, r3
 8003f46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f48:	4613      	mov	r3, r2
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f4e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003f52:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8003f56:	4621      	mov	r1, r4
 8003f58:	4291      	cmp	r1, r2
 8003f5a:	4629      	mov	r1, r5
 8003f5c:	eb71 0303 	sbcs.w	r3, r1, r3
 8003f60:	d320      	bcc.n	8003fa4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x144>
      break;
    mantissa += digit;
 8003f62:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003f66:	2200      	movs	r2, #0
 8003f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f6a:	637a      	str	r2, [r7, #52]	@ 0x34
 8003f6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003f70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f74:	4621      	mov	r1, r4
 8003f76:	1851      	adds	r1, r2, r1
 8003f78:	6139      	str	r1, [r7, #16]
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	414b      	adcs	r3, r1
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003f84:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    s++;
 8003f88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 8003f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff fe51 	bl	8003c3a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1a2      	bne.n	8003ee4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x84>
 8003f9e:	e002      	b.n	8003fa6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 8003fa0:	bf00      	nop
 8003fa2:	e000      	b.n	8003fa6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 8003fa4:	bf00      	nop
  }

  if (*s == '\0') {
 8003fa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d136      	bne.n	800401c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
    if (is_negative) {
 8003fae:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d019      	beq.n	8003fea <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x18a>
      const mantissa_t sintMantissaMax = mantissa_t(1)
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003fbe:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
                                         << (sizeof(JsonInteger) * 8 - 1);
      if (mantissa <= sintMantissaMax) {
 8003fc2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003fc6:	2a01      	cmp	r2, #1
 8003fc8:	f173 4300 	sbcs.w	r3, r3, #2147483648	@ 0x80000000
 8003fcc:	d226      	bcs.n	800401c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
        return Number(JsonInteger(~mantissa + 1));
 8003fce:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4250      	negs	r0, r2
 8003fd6:	62b8      	str	r0, [r7, #40]	@ 0x28
 8003fd8:	eb61 0303 	sbc.w	r3, r1, r3
 8003fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fe2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003fe4:	f7ff feb4 	bl	8003d50 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>
 8003fe8:	e162      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
      }
    } else {
      return Number(JsonUInt(mantissa));
 8003fea:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003fee:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003ff0:	f7ff fec4 	bl	8003d7c <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>
 8003ff4:	e15c      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
    }
  }

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8003ff6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8003ffa:	f04f 020a 	mov.w	r2, #10
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	f7fc fc9f 	bl	8000944 <__aeabi_uldivmod>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    exponent_offset++;
 800400e:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8004012:	b29b      	uxth	r3, r3
 8004014:	3301      	adds	r3, #1
 8004016:	b29b      	uxth	r3, r3
 8004018:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  while (mantissa > traits::mantissa_max) {
 800401c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004020:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004024:	d2e7      	bcs.n	8003ff6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x196>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8004026:	e009      	b.n	800403c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1dc>
    exponent_offset++;
 8004028:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 800402c:	b29b      	uxth	r3, r3
 800402e:	3301      	adds	r3, #1
 8004030:	b29b      	uxth	r3, r3
 8004032:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    s++;
 8004036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004038:	3301      	adds	r3, #1
 800403a:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 800403c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff fdfa 	bl	8003c3a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1ed      	bne.n	8004028 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1c8>
  }

  if (*s == '.') {
 800404c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b2e      	cmp	r3, #46	@ 0x2e
 8004052:	d14c      	bne.n	80040ee <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x28e>
    s++;
 8004054:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004056:	3301      	adds	r3, #1
 8004058:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 800405a:	e040      	b.n	80040de <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x27e>
      if (mantissa < traits::mantissa_max / 10) {
 800405c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004060:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8004064:	4953      	ldr	r1, [pc, #332]	@ (80041b4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x354>)
 8004066:	418b      	sbcs	r3, r1
 8004068:	d236      	bcs.n	80040d8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x278>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 800406a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800406e:	4622      	mov	r2, r4
 8004070:	462b      	mov	r3, r5
 8004072:	f04f 0000 	mov.w	r0, #0
 8004076:	f04f 0100 	mov.w	r1, #0
 800407a:	0099      	lsls	r1, r3, #2
 800407c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8004080:	0090      	lsls	r0, r2, #2
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	eb12 0a04 	adds.w	sl, r2, r4
 800408a:	eb43 0b05 	adc.w	fp, r3, r5
 800408e:	eb1a 030a 	adds.w	r3, sl, sl
 8004092:	60bb      	str	r3, [r7, #8]
 8004094:	eb4b 030b 	adc.w	r3, fp, fp
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800409e:	4652      	mov	r2, sl
 80040a0:	465b      	mov	r3, fp
 80040a2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80040a4:	7809      	ldrb	r1, [r1, #0]
 80040a6:	3930      	subs	r1, #48	@ 0x30
 80040a8:	b2c9      	uxtb	r1, r1
 80040aa:	b2c9      	uxtb	r1, r1
 80040ac:	2000      	movs	r0, #0
 80040ae:	6239      	str	r1, [r7, #32]
 80040b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80040b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80040b6:	4621      	mov	r1, r4
 80040b8:	1851      	adds	r1, r2, r1
 80040ba:	6039      	str	r1, [r7, #0]
 80040bc:	4629      	mov	r1, r5
 80040be:	414b      	adcs	r3, r1
 80040c0:	607b      	str	r3, [r7, #4]
 80040c2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80040c6:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
        exponent_offset--;
 80040ca:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
      }
      s++;
 80040d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040da:	3301      	adds	r3, #1
 80040dc:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 80040de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff fda9 	bl	8003c3a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1b6      	bne.n	800405c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1fc>
    }
  }

  int exponent = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (*s == 'e' || *s == 'E') {
 80040f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b65      	cmp	r3, #101	@ 0x65
 80040fa:	d003      	beq.n	8004104 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2a4>
 80040fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b45      	cmp	r3, #69	@ 0x45
 8004102:	d171      	bne.n	80041e8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
    s++;
 8004104:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004106:	3301      	adds	r3, #1
 8004108:	64bb      	str	r3, [r7, #72]	@ 0x48
    bool negative_exponent = false;
 800410a:	2300      	movs	r3, #0
 800410c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (*s == '-') {
 8004110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b2d      	cmp	r3, #45	@ 0x2d
 8004116:	d106      	bne.n	8004126 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c6>
      negative_exponent = true;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 800411e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004120:	3301      	adds	r3, #1
 8004122:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004124:	e04f      	b.n	80041c6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
    } else if (*s == '+') {
 8004126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b2b      	cmp	r3, #43	@ 0x2b
 800412c:	d14b      	bne.n	80041c6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      s++;
 800412e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004130:	3301      	adds	r3, #1
 8004132:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    while (isdigit(*s)) {
 8004134:	e047      	b.n	80041c6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      exponent = exponent * 10 + (*s - '0');
 8004136:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	461a      	mov	r2, r3
 8004144:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	3b30      	subs	r3, #48	@ 0x30
 800414a:	4413      	add	r3, r2
 800414c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      if (exponent + exponent_offset > traits::exponent_max) {
 8004150:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	@ 0x86
 8004154:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004158:	4413      	add	r3, r2
 800415a:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800415e:	dd2f      	ble.n	80041c0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x360>
        if (negative_exponent)
 8004160:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00e      	beq.n	8004186 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x326>
          return Number(is_negative ? -0.0f : 0.0f);
 8004168:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x316>
 8004170:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80041b8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x358>
 8004174:	e001      	b.n	800417a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x31a>
 8004176:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80041bc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x35c>
 800417a:	eeb0 0a67 	vmov.f32	s0, s15
 800417e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004180:	f7ff fdd1 	bl	8003d26 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
 8004184:	e094      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
        else
          return Number(is_negative ? -traits::inf() : traits::inf());
 8004186:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800418a:	2b00      	cmp	r3, #0
 800418c:	d006      	beq.n	800419c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x33c>
 800418e:	f000 fda7 	bl	8004ce0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 8004192:	eeb0 7b40 	vmov.f64	d7, d0
 8004196:	eeb1 7b47 	vneg.f64	d7, d7
 800419a:	e003      	b.n	80041a4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x344>
 800419c:	f000 fda0 	bl	8004ce0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 80041a0:	eeb0 7b40 	vmov.f64	d7, d0
 80041a4:	eeb0 0b47 	vmov.f64	d0, d7
 80041a8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80041aa:	f7ff fdfd 	bl	8003da8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 80041ae:	e07f      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
 80041b0:	19999999 	.word	0x19999999
 80041b4:	00019999 	.word	0x00019999
 80041b8:	80000000 	.word	0x80000000
 80041bc:	00000000 	.word	0x00000000
      }
      s++;
 80041c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041c2:	3301      	adds	r3, #1
 80041c4:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 80041c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff fd35 	bl	8003c3a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1af      	bne.n	8004136 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2d6>
    }
    if (negative_exponent)
 80041d6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d004      	beq.n	80041e8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
      exponent = -exponent;
 80041de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041e2:	425b      	negs	r3, r3
 80041e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  }
  exponent += exponent_offset;
 80041e8:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 80041ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041f0:	4413      	add	r3, r2
 80041f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0')
 80041f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3a6>
    return Number();
 80041fe:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004200:	f7ff fd80 	bl	8003d04 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 8004204:	e054      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

#if ARDUINOJSON_USE_DOUBLE
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
                  exponent > FloatTraits<float>::exponent_max ||
 8004206:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800420a:	f113 0f26 	cmn.w	r3, #38	@ 0x26
 800420e:	db0a      	blt.n	8004226 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8004210:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004214:	2b26      	cmp	r3, #38	@ 0x26
 8004216:	dc06      	bgt.n	8004226 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
                  exponent > FloatTraits<float>::exponent_max ||
 8004218:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800421c:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8004220:	f173 0300 	sbcs.w	r3, r3, #0
 8004224:	d301      	bcc.n	800422a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3ca>
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3cc>
 800422a:	2300      	movs	r3, #0
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 800422c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                  mantissa > FloatTraits<float>::mantissa_max;
  if (isDouble) {
 8004230:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01e      	beq.n	8004276 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x416>
    auto final_result = make_float(double(mantissa), exponent);
 8004238:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800423c:	f7fc fa3e 	bl	80006bc <__aeabi_ul2d>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8004248:	ec43 2b10 	vmov	d0, r2, r3
 800424c:	f000 fd56 	bl	8004cfc <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>
 8004250:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    return Number(is_negative ? -final_result : final_result);
 8004254:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004258:	2b00      	cmp	r3, #0
 800425a:	d004      	beq.n	8004266 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x406>
 800425c:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8004260:	eeb1 7b47 	vneg.f64	d7, d7
 8004264:	e001      	b.n	800426a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x40a>
 8004266:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 800426a:	eeb0 0b47 	vmov.f64	d0, d7
 800426e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004270:	f7ff fd9a 	bl	8003da8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 8004274:	e01c      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
  } else
#endif
  {
    auto final_result = make_float(float(mantissa), exponent);
 8004276:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800427a:	f7fc fb1d 	bl	80008b8 <__aeabi_ul2f>
 800427e:	4603      	mov	r3, r0
 8004280:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8004284:	ee00 3a10 	vmov	s0, r3
 8004288:	f000 fd79 	bl	8004d7e <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>
 800428c:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
    return Number(is_negative ? -final_result : final_result);
 8004290:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004294:	2b00      	cmp	r3, #0
 8004296:	d004      	beq.n	80042a2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x442>
 8004298:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800429c:	eef1 7a67 	vneg.f32	s15, s15
 80042a0:	e001      	b.n	80042a6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x446>
 80042a2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80042a6:	eeb0 0a67 	vmov.f32	s0, s15
 80042aa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80042ac:	f7ff fd3b 	bl	8003d26 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
  }
}
 80042b0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80042b2:	3798      	adds	r7, #152	@ 0x98
 80042b4:	46bd      	mov	sp, r7
 80042b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ba:	bf00      	nop

080042bc <_ZN6Remora11setBaseFreqEm>:

public:

	Remora();
	void run();
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <_ZN6Remora12setServoFreqEm>:
    void setServoFreq(uint32_t freq) { servoFreq = freq; }
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <_ZN17JsonConfigHandlerC1EP6Remora>:

#include "jsonConfigHandler.h"
#include "../remora.h"


JsonConfigHandler::JsonConfigHandler(Remora* _remora) :
 80042f4:	b590      	push	{r4, r7, lr}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
	remoraInstance(_remora),
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	601a      	str	r2, [r3, #0]
	configError(false)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	1d1c      	adds	r4, r3, #4
 8004308:	f107 030c 	add.w	r3, r7, #12
 800430c:	4618      	mov	r0, r3
 800430e:	f019 f8c4 	bl	801d49a <_ZNSaIcEC1Ev>
 8004312:	f107 030c 	add.w	r3, r7, #12
 8004316:	461a      	mov	r2, r3
 8004318:	4914      	ldr	r1, [pc, #80]	@ (800436c <_ZN17JsonConfigHandlerC1EP6Remora+0x78>)
 800431a:	4620      	mov	r0, r4
 800431c:	f000 fd70 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8004320:	f107 030c 	add.w	r3, r7, #12
 8004324:	4618      	mov	r0, r3
 8004326:	f019 f8b9 	bl	801d49c <_ZNSaIcED1Ev>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a10      	ldr	r2, [pc, #64]	@ (8004370 <_ZN17JsonConfigHandlerC1EP6Remora+0x7c>)
 800432e:	61da      	str	r2, [r3, #28]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f103 0420 	add.w	r4, r3, #32
 8004336:	f7fe f953 	bl	80025e0 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>
 800433a:	4603      	mov	r3, r0
 800433c:	4619      	mov	r1, r3
 800433e:	4620      	mov	r0, r4
 8004340:	f7fe feeb 	bl	800311a <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3360      	adds	r3, #96	@ 0x60
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe fea8 	bl	800309e <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
{
	loadConfiguration();
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f80c 	bl	8004374 <_ZN17JsonConfigHandler17loadConfigurationEv>
    updateThreadFreq();
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f82b 	bl	80043b8 <_ZN17JsonConfigHandler16updateThreadFreqEv>
}
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4618      	mov	r0, r3
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	bd90      	pop	{r4, r7, pc}
 800436c:	0801ed38 	.word	0x0801ed38
 8004370:	0801ed3c 	.word	0x0801ed3c

08004374 <_ZN17JsonConfigHandler17loadConfigurationEv>:

bool JsonConfigHandler::loadConfiguration() {
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	// Clear any existing configuration
    jsonContent.clear();
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	4618      	mov	r0, r3
 8004382:	f019 f9b5 	bl	801d6f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
    doc.clear();
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3320      	adds	r3, #32
 800438a:	4618      	mov	r0, r3
 800438c:	f7fe fee5 	bl	800315a <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Read and parse the configuration file
    if (!readFileContents()) {
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f903 	bl	800459c <_ZN17JsonConfigHandler16readFileContentsEv>
 8004396:	4603      	mov	r3, r0
 8004398:	f083 0301 	eor.w	r3, r3, #1
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <_ZN17JsonConfigHandler17loadConfigurationEv+0x32>
        return false;
 80043a2:	2300      	movs	r3, #0
 80043a4:	e003      	b.n	80043ae <_ZN17JsonConfigHandler17loadConfigurationEv+0x3a>
    }
    parseJson();
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f9c8 	bl	800473c <_ZN17JsonConfigHandler9parseJsonEv>
    return true;
 80043ac:	2301      	movs	r3, #1
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <_ZN17JsonConfigHandler16updateThreadFreqEv>:


void JsonConfigHandler::updateThreadFreq() {
 80043b8:	b590      	push	{r4, r7, lr}
 80043ba:	b0a1      	sub	sp, #132	@ 0x84
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
    if (configError) return;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f040 808e 	bne.w	80044e8 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x130>

    printf("\n5. Updating thread frequencies\n");
 80043cc:	4848      	ldr	r0, [pc, #288]	@ (80044f0 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x138>)
 80043ce:	f019 fd51 	bl	801de74 <puts>

    JsonArray Threads = doc["Threads"];
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f103 0120 	add.w	r1, r3, #32
 80043d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043dc:	4a45      	ldr	r2, [pc, #276]	@ (80044f4 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x13c>)
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fd38 	bl	8004e54 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 80043e4:	f107 031c 	add.w	r3, r7, #28
 80043e8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80043ec:	4611      	mov	r1, r2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fd49 	bl	8004e86 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 80043f4:	f107 0310 	add.w	r3, r7, #16
 80043f8:	f107 021c 	add.w	r2, r7, #28
 80043fc:	4611      	mov	r1, r2
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fe fe1e 	bl	8003040 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>
 8004404:	e05c      	b.n	80044c0 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x108>
        thread = *it;
 8004406:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800440a:	f107 0210 	add.w	r2, r7, #16
 800440e:	4611      	mov	r1, r2
 8004410:	4618      	mov	r0, r3
 8004412:	f7fe fdbd 	bl	8002f90 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>
 8004416:	68fc      	ldr	r4, [r7, #12]
 8004418:	463b      	mov	r3, r7
 800441a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800441e:	4611      	mov	r1, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fd3f 	bl	8004ea4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8004426:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 800442a:	463a      	mov	r2, r7
 800442c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004430:	e883 0003 	stmia.w	r3, {r0, r1}
        const char* configor = thread["Thread"];
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800443a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800443e:	4a2e      	ldr	r2, [pc, #184]	@ (80044f8 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x140>)
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fd3e 	bl	8004ec2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8004446:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fd5e 	bl	8004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8004450:	67f8      	str	r0, [r7, #124]	@ 0x7c
        uint32_t    freq = thread["Frequency"];
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8004458:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800445c:	4a27      	ldr	r2, [pc, #156]	@ (80044fc <_ZN17JsonConfigHandler16updateThreadFreqEv+0x144>)
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fd60 	bl	8004f24 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8004464:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fd80 	bl	8004f6e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 800446e:	67b8      	str	r0, [r7, #120]	@ 0x78
        if (!strcmp(configor,"Base")) {
 8004470:	4923      	ldr	r1, [pc, #140]	@ (8004500 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x148>)
 8004472:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004474:	f7fb ff34 	bl	80002e0 <strcmp>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xdc>
            printf("	Setting BASE thread frequency to %lu\n", freq);
 800447e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004480:	4820      	ldr	r0, [pc, #128]	@ (8004504 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x14c>)
 8004482:	f019 fc87 	bl	801dd94 <iprintf>
            remoraInstance->setBaseFreq(freq);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff ff15 	bl	80042bc <_ZN6Remora11setBaseFreqEm>
 8004492:	e010      	b.n	80044b6 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
        }
        else if (!strcmp(configor,"Servo")) {
 8004494:	491c      	ldr	r1, [pc, #112]	@ (8004508 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x150>)
 8004496:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004498:	f7fb ff22 	bl	80002e0 <strcmp>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
            printf("	Setting SERVO thread frequency to %lu\n", freq);
 80044a2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80044a4:	4819      	ldr	r0, [pc, #100]	@ (800450c <_ZN17JsonConfigHandler16updateThreadFreqEv+0x154>)
 80044a6:	f019 fc75 	bl	801dd94 <iprintf>
            remoraInstance->setServoFreq(freq);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff ff11 	bl	80042d8 <_ZN6Remora12setServoFreqEm>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 80044b6:	f107 0310 	add.w	r3, r7, #16
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe fd8c 	bl	8002fd8 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>
 80044c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80044c4:	f107 021c 	add.w	r2, r7, #28
 80044c8:	4611      	mov	r1, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe fddb 	bl	8003086 <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>
 80044d0:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80044d4:	f107 0310 	add.w	r3, r7, #16
 80044d8:	4611      	mov	r1, r2
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fe fd6c 	bl	8002fb8 <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d18f      	bne.n	8004406 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x4e>
 80044e6:	e000      	b.n	80044ea <_ZN17JsonConfigHandler16updateThreadFreqEv+0x132>
    if (configError) return;
 80044e8:	bf00      	nop
        }
    }
}
 80044ea:	3784      	adds	r7, #132	@ 0x84
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd90      	pop	{r4, r7, pc}
 80044f0:	0801ed48 	.word	0x0801ed48
 80044f4:	0801ed68 	.word	0x0801ed68
 80044f8:	0801ed70 	.word	0x0801ed70
 80044fc:	0801ed78 	.word	0x0801ed78
 8004500:	0801ed84 	.word	0x0801ed84
 8004504:	0801ed8c 	.word	0x0801ed8c
 8004508:	0801edb4 	.word	0x0801edb4
 800450c:	0801edbc 	.word	0x0801edbc

08004510 <_ZN17JsonConfigHandler10getModulesEv>:


JsonArray JsonConfigHandler::getModules() {
 8004510:	b590      	push	{r4, r7, lr}
 8004512:	b08f      	sub	sp, #60	@ 0x3c
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
	if (doc["Modules"].is<JsonVariant>())
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f103 0120 	add.w	r1, r3, #32
 8004520:	f107 0308 	add.w	r3, r7, #8
 8004524:	4a1c      	ldr	r2, [pc, #112]	@ (8004598 <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fc94 	bl	8004e54 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 800452c:	f107 0308 	add.w	r3, r7, #8
 8004530:	637b      	str	r3, [r7, #52]	@ 0x34
 8004532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004534:	633b      	str	r3, [r7, #48]	@ 0x30
  return containsKey(key.template as<const char*>());
}

template <typename TDerived>
inline JsonVariant VariantRefBase<TDerived>::getVariant() const {
  return JsonVariant(getData(), getResourceManager());
 8004536:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004538:	f001 fc9a 	bl	8005e70 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 800453c:	4604      	mov	r4, r0
 800453e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004540:	f001 fca6 	bl	8005e90 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 8004544:	4602      	mov	r2, r0
 8004546:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800454a:	4621      	mov	r1, r4
 800454c:	4618      	mov	r0, r3
 800454e:	f7fe fcb9 	bl	8002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }

  template <typename T>
  FORCE_INLINE enable_if_t<is_same<T, JsonVariant>::value, T> getVariant()
      const {
    return getVariant();
 8004552:	bf00      	nop
template <typename TDerived>
template <typename T>
inline bool VariantRefBase<TDerived>::is() const {
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::checkJson)>::arg1_type;
  return Converter<T>::checkJson(getVariant<variant_type>());
 8004554:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004558:	e893 0003 	ldmia.w	r3, {r0, r1}
 800455c:	f7fe fcdd 	bl	8002f1a <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>
 8004560:	4603      	mov	r3, r0
 8004562:	bf00      	nop
 8004564:	2b00      	cmp	r3, #0
 8004566:	d010      	beq.n	800458a <_ZN17JsonConfigHandler10getModulesEv+0x7a>
        return doc["Modules"].as<JsonArray>();
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	f103 0120 	add.w	r1, r3, #32
 800456e:	f107 0318 	add.w	r3, r7, #24
 8004572:	4a09      	ldr	r2, [pc, #36]	@ (8004598 <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fc6d 	bl	8004e54 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f107 0218 	add.w	r2, r7, #24
 8004580:	4611      	mov	r1, r2
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fcff 	bl	8004f86 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 8004588:	e002      	b.n	8004590 <_ZN17JsonConfigHandler10getModulesEv+0x80>
    else
        return JsonArray();
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fe fd34 	bl	8002ff8 <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>
}
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	373c      	adds	r7, #60	@ 0x3c
 8004594:	46bd      	mov	sp, r7
 8004596:	bd90      	pop	{r4, r7, pc}
 8004598:	0801ede4 	.word	0x0801ede4

0800459c <_ZN17JsonConfigHandler16readFileContentsEv>:
    }
    return JsonObject(); // Return empty object if not found
}
*/

bool JsonConfigHandler::readFileContents() {
 800459c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045a0:	b08f      	sub	sp, #60	@ 0x3c
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]

	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 80045a6:	485a      	ldr	r0, [pc, #360]	@ (8004710 <_ZN17JsonConfigHandler16readFileContentsEv+0x174>)
 80045a8:	f019 fc64 	bl	801de74 <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 80045ac:	4859      	ldr	r0, [pc, #356]	@ (8004714 <_ZN17JsonConfigHandler16readFileContentsEv+0x178>)
 80045ae:	f019 fc61 	bl	801de74 <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80045b2:	2200      	movs	r2, #0
 80045b4:	4958      	ldr	r1, [pc, #352]	@ (8004718 <_ZN17JsonConfigHandler16readFileContentsEv+0x17c>)
 80045b6:	4859      	ldr	r0, [pc, #356]	@ (800471c <_ZN17JsonConfigHandler16readFileContentsEv+0x180>)
 80045b8:	f018 fb0a 	bl	801cbd0 <f_mount>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	bf14      	ite	ne
 80045c2:	2301      	movne	r3, #1
 80045c4:	2300      	moveq	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <_ZN17JsonConfigHandler16readFileContentsEv+0x3c>
	{
    	printf("	Failed to mount SD card\n\r");
 80045cc:	4854      	ldr	r0, [pc, #336]	@ (8004720 <_ZN17JsonConfigHandler16readFileContentsEv+0x184>)
 80045ce:	f019 fbe1 	bl	801dd94 <iprintf>
    	Error_Handler();
 80045d2:	f003 fc4b 	bl	8007e6c <Error_Handler>
 80045d6:	e094      	b.n	8004702 <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
	}
    else
    {
		//Open file for reading
		if(f_open(&SDFile, filename, FA_READ) != FR_OK)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	2201      	movs	r2, #1
 80045de:	4619      	mov	r1, r3
 80045e0:	4850      	ldr	r0, [pc, #320]	@ (8004724 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 80045e2:	f018 fb3b 	bl	801cc5c <f_open>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bf14      	ite	ne
 80045ec:	2301      	movne	r3, #1
 80045ee:	2300      	moveq	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <_ZN17JsonConfigHandler16readFileContentsEv+0x66>
		{
			printf("	Failed to open JSON config file\n");
 80045f6:	484c      	ldr	r0, [pc, #304]	@ (8004728 <_ZN17JsonConfigHandler16readFileContentsEv+0x18c>)
 80045f8:	f019 fc3c 	bl	801de74 <puts>
			Error_Handler();
 80045fc:	f003 fc36 	bl	8007e6c <Error_Handler>
 8004600:	e07f      	b.n	8004702 <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
			    // Remove comments from next line to print out the JSON config file
			    printf("\n%s\n", jsonContent.c_str());
			}

			f_close(&SDFile);
		}
 8004602:	466b      	mov	r3, sp
 8004604:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 8004606:	4b47      	ldr	r3, [pc, #284]	@ (8004724 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	633b      	str	r3, [r7, #48]	@ 0x30
			printf("	JSON config file lenght = %2ld\n", length);
 800460c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800460e:	4847      	ldr	r0, [pc, #284]	@ (800472c <_ZN17JsonConfigHandler16readFileContentsEv+0x190>)
 8004610:	f019 fbc0 	bl	801dd94 <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 8004614:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004616:	1e4b      	subs	r3, r1, #1
 8004618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800461a:	460a      	mov	r2, r1
 800461c:	2300      	movs	r3, #0
 800461e:	4690      	mov	r8, r2
 8004620:	4699      	mov	r9, r3
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	f04f 0300 	mov.w	r3, #0
 800462a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800462e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004632:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004636:	460a      	mov	r2, r1
 8004638:	2300      	movs	r3, #0
 800463a:	4614      	mov	r4, r2
 800463c:	461d      	mov	r5, r3
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	00eb      	lsls	r3, r5, #3
 8004648:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800464c:	00e2      	lsls	r2, r4, #3
 800464e:	460b      	mov	r3, r1
 8004650:	3318      	adds	r3, #24
 8004652:	3307      	adds	r3, #7
 8004654:	08db      	lsrs	r3, r3, #3
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	ebad 0d03 	sub.w	sp, sp, r3
 800465c:	466b      	mov	r3, sp
 800465e:	331f      	adds	r3, #31
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	015b      	lsls	r3, r3, #5
 8004664:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 8004666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004668:	f107 030c 	add.w	r3, r7, #12
 800466c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800466e:	482d      	ldr	r0, [pc, #180]	@ (8004724 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8004670:	f018 fcae 	bl	801cfd0 <f_read>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	bf14      	ite	ne
 800467a:	2301      	movne	r3, #1
 800467c:	2300      	moveq	r3, #0
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <_ZN17JsonConfigHandler16readFileContentsEv+0xf0>
				printf("	JSON config file read FAILURE\n");
 8004684:	482a      	ldr	r0, [pc, #168]	@ (8004730 <_ZN17JsonConfigHandler16readFileContentsEv+0x194>)
 8004686:	f019 fbf5 	bl	801de74 <puts>
 800468a:	e036      	b.n	80046fa <_ZN17JsonConfigHandler16readFileContentsEv+0x15e>
				printf("	JSON config file read SUCCESS!\n");
 800468c:	4829      	ldr	r0, [pc, #164]	@ (8004734 <_ZN17JsonConfigHandler16readFileContentsEv+0x198>)
 800468e:	f019 fbf1 	bl	801de74 <puts>
				jsonContent.reserve(length + 1);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	1d1a      	adds	r2, r3, #4
 8004696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004698:	3301      	adds	r3, #1
 800469a:	4619      	mov	r1, r3
 800469c:	4610      	mov	r0, r2
 800469e:	f019 f80c 	bl	801d6ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 80046a2:	2300      	movs	r3, #0
 80046a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80046a6:	e01a      	b.n	80046de <_ZN17JsonConfigHandler16readFileContentsEv+0x142>
			    	jsonContent = jsonContent + rtext[i];
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	1d19      	adds	r1, r3, #4
 80046ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b0:	4413      	add	r3, r2
 80046b2:	781a      	ldrb	r2, [r3, #0]
 80046b4:	f107 0310 	add.w	r3, r7, #16
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fc88 	bl	8004fce <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3304      	adds	r3, #4
 80046c2:	f107 0210 	add.w	r2, r7, #16
 80046c6:	4611      	mov	r1, r2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f018 ff87 	bl	801d5dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80046ce:	f107 0310 	add.w	r3, r7, #16
 80046d2:	4618      	mov	r0, r3
 80046d4:	f018 ff7c 	bl	801d5d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 80046d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046da:	3301      	adds	r3, #1
 80046dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80046de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e2:	429a      	cmp	r2, r3
 80046e4:	dbe0      	blt.n	80046a8 <_ZN17JsonConfigHandler16readFileContentsEv+0x10c>
			    printf("\n%s\n", jsonContent.c_str());
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3304      	adds	r3, #4
 80046ea:	4618      	mov	r0, r3
 80046ec:	f019 f850 	bl	801d790 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80046f0:	4603      	mov	r3, r0
 80046f2:	4619      	mov	r1, r3
 80046f4:	4810      	ldr	r0, [pc, #64]	@ (8004738 <_ZN17JsonConfigHandler16readFileContentsEv+0x19c>)
 80046f6:	f019 fb4d 	bl	801dd94 <iprintf>
			f_close(&SDFile);
 80046fa:	480a      	ldr	r0, [pc, #40]	@ (8004724 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 80046fc:	f018 fe25 	bl	801d34a <f_close>
 8004700:	46b5      	mov	sp, r6
    }

	return true;
 8004702:	2301      	movs	r3, #1
}
 8004704:	4618      	mov	r0, r3
 8004706:	373c      	adds	r7, #60	@ 0x3c
 8004708:	46bd      	mov	sp, r7
 800470a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800470e:	bf00      	nop
 8004710:	0801edec 	.word	0x0801edec
 8004714:	0801ee10 	.word	0x0801ee10
 8004718:	2400041c 	.word	0x2400041c
 800471c:	24000420 	.word	0x24000420
 8004720:	0801ee30 	.word	0x0801ee30
 8004724:	24000650 	.word	0x24000650
 8004728:	0801ee4c 	.word	0x0801ee4c
 800472c:	0801ee70 	.word	0x0801ee70
 8004730:	0801ee94 	.word	0x0801ee94
 8004734:	0801eeb4 	.word	0x0801eeb4
 8004738:	0801eed4 	.word	0x0801eed4

0800473c <_ZN17JsonConfigHandler9parseJsonEv>:


bool JsonConfigHandler::parseJson() {
 800473c:	b590      	push	{r4, r7, lr}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	
	printf("\n3. Parsing json configuration file\n");
 8004744:	482a      	ldr	r0, [pc, #168]	@ (80047f0 <_ZN17JsonConfigHandler9parseJsonEv+0xb4>)
 8004746:	f019 fb95 	bl	801de74 <puts>
	
    // Clear any existing parsed data
    doc.clear();
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3320      	adds	r3, #32
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe fd03 	bl	800315a <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Parse JSON
    DeserializationError error = deserializeJson(doc, jsonContent.c_str());
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f103 0420 	add.w	r4, r3, #32
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3304      	adds	r3, #4
 800475e:	4618      	mov	r0, r3
 8004760:	f019 f816 	bl	801d790 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004764:	4603      	mov	r3, r0
 8004766:	4619      	mov	r1, r3
 8004768:	4620      	mov	r0, r4
 800476a:	f000 fc46 	bl	8004ffa <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>
 800476e:	4603      	mov	r3, r0
 8004770:	733b      	strb	r3, [r7, #12]

    printf("	Config deserialisation - ");
 8004772:	4820      	ldr	r0, [pc, #128]	@ (80047f4 <_ZN17JsonConfigHandler9parseJsonEv+0xb8>)
 8004774:	f019 fb0e 	bl	801dd94 <iprintf>

    switch (error.code())
 8004778:	f107 030c 	add.w	r3, r7, #12
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff f936 	bl	80039ee <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>
 8004782:	4603      	mov	r3, r0
 8004784:	2b04      	cmp	r3, #4
 8004786:	d012      	beq.n	80047ae <_ZN17JsonConfigHandler9parseJsonEv+0x72>
 8004788:	2b04      	cmp	r3, #4
 800478a:	dc18      	bgt.n	80047be <_ZN17JsonConfigHandler9parseJsonEv+0x82>
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <_ZN17JsonConfigHandler9parseJsonEv+0x5a>
 8004790:	2b03      	cmp	r3, #3
 8004792:	d004      	beq.n	800479e <_ZN17JsonConfigHandler9parseJsonEv+0x62>
 8004794:	e013      	b.n	80047be <_ZN17JsonConfigHandler9parseJsonEv+0x82>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 8004796:	4818      	ldr	r0, [pc, #96]	@ (80047f8 <_ZN17JsonConfigHandler9parseJsonEv+0xbc>)
 8004798:	f019 fb6c 	bl	801de74 <puts>
            break;
 800479c:	e023      	b.n	80047e6 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 800479e:	4817      	ldr	r0, [pc, #92]	@ (80047fc <_ZN17JsonConfigHandler9parseJsonEv+0xc0>)
 80047a0:	f019 fb68 	bl	801de74 <puts>
            configError = true;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 80047ac:	e01b      	b.n	80047e6 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 80047ae:	4814      	ldr	r0, [pc, #80]	@ (8004800 <_ZN17JsonConfigHandler9parseJsonEv+0xc4>)
 80047b0:	f019 fb60 	bl	801de74 <puts>
            configError = true;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 80047bc:	e013      	b.n	80047e6 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        default:
            printf("Deserialization failed: ");
 80047be:	4811      	ldr	r0, [pc, #68]	@ (8004804 <_ZN17JsonConfigHandler9parseJsonEv+0xc8>)
 80047c0:	f019 fae8 	bl	801dd94 <iprintf>
            printf(error.c_str());
 80047c4:	f107 030c 	add.w	r3, r7, #12
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff f91d 	bl	8003a08 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>
 80047ce:	4603      	mov	r3, r0
 80047d0:	4618      	mov	r0, r3
 80047d2:	f019 fadf 	bl	801dd94 <iprintf>
            printf("\n");
 80047d6:	200a      	movs	r0, #10
 80047d8:	f019 faee 	bl	801ddb8 <putchar>
            configError = true;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 80047e4:	bf00      	nop
    }

    return true;
 80047e6:	2301      	movs	r3, #1
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd90      	pop	{r4, r7, pc}
 80047f0:	0801eedc 	.word	0x0801eedc
 80047f4:	0801ef00 	.word	0x0801ef00
 80047f8:	0801ef1c 	.word	0x0801ef1c
 80047fc:	0801ef38 	.word	0x0801ef38
 8004800:	0801ef48 	.word	0x0801ef48
 8004804:	0801ef5c 	.word	0x0801ef5c

08004808 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8004814:	e002      	b.n	800481c <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x14>
        ++__i;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3301      	adds	r3, #1
 800481a:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4413      	add	r3, r2
 8004822:	2200      	movs	r2, #0
 8004824:	72fa      	strb	r2, [r7, #11]
 8004826:	f107 020b 	add.w	r2, r7, #11
 800482a:	4611      	mov	r1, r2
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fbf7 	bl	8005020 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 8004832:	4603      	mov	r3, r0
 8004834:	f083 0301 	eor.w	r3, r3, #1
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1eb      	bne.n	8004816 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xe>
      return __i;
 800483e:	68fb      	ldr	r3, [r7, #12]
    }
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	4611      	mov	r1, r2
 8004854:	461a      	mov	r2, r3
 8004856:	460b      	mov	r3, r1
 8004858:	80fb      	strh	r3, [r7, #6]
 800485a:	4613      	mov	r3, r2
 800485c:	717b      	strb	r3, [r7, #5]
      : str_(data, size_t(sz), isStatic) {}
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	88fa      	ldrh	r2, [r7, #6]
 8004862:	797b      	ldrb	r3, [r7, #5]
 8004864:	68b9      	ldr	r1, [r7, #8]
 8004866:	f7fd ff3b 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>:
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
    ARDUINOJSON_ASSERT(poolIndex < count_);
    return pools_[poolIndex].getSlot(indexInPool);
  }

  void clear(Allocator* allocator) {
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
    for (PoolCount i = 0; i < count_; i++)
 800487e:	2300      	movs	r3, #0
 8004880:	81fb      	strh	r3, [r7, #14]
 8004882:	e00b      	b.n	800489c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x28>
      pools_[i].destroy(allocator);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1a      	ldr	r2, [r3, #32]
 8004888:	89fb      	ldrh	r3, [r7, #14]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4413      	add	r3, r2
 800488e:	6839      	ldr	r1, [r7, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fc40 	bl	8005116 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>
    for (PoolCount i = 0; i < count_; i++)
 8004896:	89fb      	ldrh	r3, [r7, #14]
 8004898:	3301      	adds	r3, #1
 800489a:	81fb      	strh	r3, [r7, #14]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80048a0:	89fa      	ldrh	r2, [r7, #14]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d3ee      	bcc.n	8004884 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x10>
    count_ = 0;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	849a      	strh	r2, [r3, #36]	@ 0x24
    freeList_ = NULL_SLOT;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (pools_ != preallocatedPools_) {
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1a      	ldr	r2, [r3, #32]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d00e      	beq.n	80048dc <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x68>
      allocator->deallocate(pools_);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3304      	adds	r3, #4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6a12      	ldr	r2, [r2, #32]
 80048ca:	4611      	mov	r1, r2
 80048cc:	6838      	ldr	r0, [r7, #0]
 80048ce:	4798      	blx	r3
      pools_ = preallocatedPools_;
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	621a      	str	r2, [r3, #32]
      capacity_ = ARDUINOJSON_INITIAL_POOL_COUNT;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2204      	movs	r2, #4
 80048da:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 80048dc:	bf00      	nop
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:

  size_t size() const {
    return Pool::slotsToBytes(usage());
  }

  void shrinkToFit(Allocator* allocator) {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
    if (count_ > 0)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00d      	beq.n	8004912 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x2e>
      pools_[count_ - 1].shrinkToFit(allocator);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1a      	ldr	r2, [r3, #32]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80048fe:	4619      	mov	r1, r3
 8004900:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8004904:	440b      	add	r3, r1
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	4413      	add	r3, r2
 800490a:	6839      	ldr	r1, [r7, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fc2e 	bl	800516e <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
    if (pools_ != preallocatedPools_ && count_ != capacity_) {
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1a      	ldr	r2, [r3, #32]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	429a      	cmp	r2, r3
 800491a:	d017      	beq.n	800494c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004924:	429a      	cmp	r2, r3
 8004926:	d011      	beq.n	800494c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
      pools_ = static_cast<Pool*>(
          allocator->reallocate(pools_, count_ * sizeof(Pool)));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3308      	adds	r3, #8
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6a11      	ldr	r1, [r2, #32]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8004938:	00d2      	lsls	r2, r2, #3
 800493a:	6838      	ldr	r0, [r7, #0]
 800493c:	4798      	blx	r3
 800493e:	4602      	mov	r2, r0
      pools_ = static_cast<Pool*>(
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	621a      	str	r2, [r3, #32]
      ARDUINOJSON_ASSERT(pools_ != nullptr);  // realloc to smaller can't fail
      capacity_ = count_;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
      -> decltype(client.getResourceManager()) {
    return client.getResourceManager();
  }

  template <typename TClient>
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
    return client.getData();
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7fe fad0 	bl	8002f02 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 8004962:	4603      	mov	r3, r0
  }
 8004964:	4618      	mov	r0, r3
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
    return client.getData();
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7fe fa8d 	bl	8002e94 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>
 800497a:	4603      	mov	r3, r0
  }
 800497c:	4618      	mov	r0, r3
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7fe fa8d 	bl	8002eac <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>
 8004992:	4603      	mov	r3, r0
  }
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
    ARDUINOJSON_ASSERT((p == nullptr) == (id == NULL_SLOT));
  }

  explicit operator bool() const {
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	bf14      	ite	ne
 80049ac:	2301      	movne	r3, #1
 80049ae:	2300      	moveq	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
  }
 80049b2:	4618      	mov	r0, r3
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>:

  SlotId id() const {
    return id_;
  }

  T* ptr() const {
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
    return ptr_;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
  }
 80049ca:	4618      	mov	r0, r3
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>:
  SlotId id() const {
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
    return id_;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	889b      	ldrh	r3, [r3, #4]
  }
 80049e2:	4618      	mov	r0, r3
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>:

  T* operator->() const {
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(ptr_ != nullptr);
    return ptr_;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
  }
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8004a06:	b480      	push	{r7}
 8004a08:	b085      	sub	sp, #20
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	60f8      	str	r0, [r7, #12]
 8004a0e:	60b9      	str	r1, [r7, #8]
 8004a10:	4613      	mov	r3, r2
 8004a12:	80fb      	strh	r3, [r7, #6]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	88fa      	ldrh	r2, [r7, #6]
 8004a1e:	809a      	strh	r2, [r3, #4]
  }
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a42:	809a      	strh	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4618      	mov	r0, r3
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>:
  Slot<T> allocSlot(Allocator* allocator) {
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b088      	sub	sp, #32
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	607a      	str	r2, [r7, #4]
    if (freeList_ != NULL_SLOT) {
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d005      	beq.n	8004a76 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x24>
      return allocFromFreeList();
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fbda 	bl	8005228 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>
 8004a74:	e02c      	b.n	8004ad0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    if (count_) {
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d016      	beq.n	8004aac <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
      auto slot = allocFromLastPool();
 8004a7e:	f107 0314 	add.w	r3, r7, #20
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fbec 	bl	8005262 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
      if (slot)
 8004a8a:	f107 0314 	add.w	r3, r7, #20
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 f822 	bl	8004ad8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d008      	beq.n	8004aac <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
        return slot;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	f107 0314 	add.w	r3, r7, #20
 8004aa2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004aa6:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 8004aaa:	e011      	b.n	8004ad0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    auto pool = addPool(allocator);
 8004aac:	6879      	ldr	r1, [r7, #4]
 8004aae:	68b8      	ldr	r0, [r7, #8]
 8004ab0:	f000 fc14 	bl	80052dc <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>
 8004ab4:	61f8      	str	r0, [r7, #28]
    if (!pool)
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d103      	bne.n	8004ac4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x72>
      return {};
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 fc49 	bl	8005354 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8004ac2:	e005      	b.n	8004ad0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    return allocFromLastPool();
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fbca 	bl	8005262 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
 8004ace:	bf00      	nop
  }
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	3720      	adds	r7, #32
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>:
  explicit operator bool() const {
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf14      	ite	ne
 8004ae8:	2301      	movne	r3, #1
 8004aea:	2300      	moveq	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
  }
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>:
  T* operator->() const {
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
    return ptr_;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
  }
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>:
  SlotId id() const {
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
    return id_;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	889b      	ldrh	r3, [r3, #4]
  }
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	60fb      	str	r3, [r7, #12]
  return ac.data;
 8004b36:	68fb      	ldr	r3, [r7, #12]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	80fb      	strh	r3, [r7, #6]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	809a      	strh	r2, [r3, #4]
  }
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>:
  void freeSlot(Slot<T> slot) {
 8004b6c:	b590      	push	{r4, r7, lr}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	1d3b      	adds	r3, r7, #4
 8004b76:	e883 0006 	stmia.w	r3, {r1, r2}
    reinterpret_cast<FreeSlot*>(slot.ptr())->next = freeList_;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d1c      	ldrh	r4, [r3, #40]	@ 0x28
 8004b7e:	1d3b      	adds	r3, r7, #4
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 fbf9 	bl	8005378 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 8004b86:	4603      	mov	r3, r0
 8004b88:	4622      	mov	r2, r4
 8004b8a:	801a      	strh	r2, [r3, #0]
    freeList_ = slot.id();
 8004b8c:	1d3b      	adds	r3, r7, #4
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff ffbf 	bl	8004b12 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8004b94:	4603      	mov	r3, r0
 8004b96:	461a      	mov	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }
 8004b9c:	bf00      	nop
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd90      	pop	{r4, r7, pc}

08004ba4 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	807b      	strh	r3, [r7, #2]
    if (id == NULL_SLOT)
 8004bb0:	887b      	ldrh	r3, [r7, #2]
 8004bb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d101      	bne.n	8004bbe <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x1a>
      return nullptr;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e012      	b.n	8004be4 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x40>
    auto poolIndex = SlotId(id / ARDUINOJSON_POOL_CAPACITY);
 8004bbe:	887b      	ldrh	r3, [r7, #2]
 8004bc0:	09db      	lsrs	r3, r3, #7
 8004bc2:	81fb      	strh	r3, [r7, #14]
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
 8004bc4:	887b      	ldrh	r3, [r7, #2]
 8004bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bca:	81bb      	strh	r3, [r7, #12]
    return pools_[poolIndex].getSlot(indexInPool);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1a      	ldr	r2, [r3, #32]
 8004bd0:	89fb      	ldrh	r3, [r7, #14]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	89ba      	ldrh	r2, [r7, #12]
 8004bd8:	4611      	mov	r1, r2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fbd8 	bl	8005390 <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8004be0:	4603      	mov	r3, r0
 8004be2:	bf00      	nop
  }
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c00:	809a      	strh	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	80fb      	strh	r3, [r7, #6]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	88fa      	ldrh	r2, [r7, #6]
 8004c28:	809a      	strh	r2, [r3, #4]
  }
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>:
AdaptedString<TChar*> adaptString(TChar* p) {
  return StringAdapter<TChar*>::adapt(p);
}

template <typename TChar>
AdaptedString<TChar*> adaptString(TChar* p, size_t n) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  return SizedStringAdapter<TChar*>::adapt(p, n);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fbe6 	bl	800541c <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>
 8004c50:	bf00      	nop
}
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* getString(const TAdaptedString& str) const {
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b082      	sub	sp, #8
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	6039      	str	r1, [r7, #0]
    return stringPool_.get(str);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3308      	adds	r3, #8
 8004c68:	6839      	ldr	r1, [r7, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fbe6 	bl	800543c <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 8004c70:	4603      	mov	r3, r0
  }
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
 8004c86:	70fb      	strb	r3, [r7, #3]
      : str_(data, size_t(sz), isStatic) {}
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	78fb      	ldrb	r3, [r7, #3]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	f7fd fd26 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b082      	sub	sp, #8
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fe f91f 	bl	8002eea <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 8004cac:	4603      	mov	r3, r0
  }
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>:
AdaptedString<TString> adaptString(TString&& s) {
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b082      	sub	sp, #8
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8004cc0:	6838      	ldr	r0, [r7, #0]
 8004cc2:	f000 fbf6 	bl	80054b2 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fd fdea 	bl	80028a2 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8004cd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>:

  static T nan() {
    return forge(0x7ff8000000000000);
  }

  static T inf() {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
    return forge(0x7ff0000000000000);
 8004ce4:	f04f 0000 	mov.w	r0, #0
 8004ce8:	4903      	ldr	r1, [pc, #12]	@ (8004cf8 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv+0x18>)
 8004cea:	f000 fc0d 	bl	8005508 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>
 8004cee:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8004cf2:	eeb0 0b47 	vmov.f64	d0, d7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	7ff00000 	.word	0x7ff00000

08004cfc <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>:
    return forge(0xFf7fffff);
  }
};

template <typename TFloat, typename TExponent>
inline TFloat make_float(TFloat m, TExponent e) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	ed87 0b02 	vstr	d0, [r7, #8]
 8004d06:	6078      	str	r0, [r7, #4]
  using traits = FloatTraits<TFloat>;

  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	dd04      	ble.n	8004d18 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x1c>
 8004d0e:	f000 fb51 	bl	80053b4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 8004d12:	4603      	mov	r3, r0
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	e003      	b.n	8004d20 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8004d18:	f000 fb70 	bl	80053fc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	613b      	str	r3, [r7, #16]
  if (e <= 0)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	dc02      	bgt.n	8004d2c <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x30>
    e = TExponent(-e);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	425b      	negs	r3, r3
 8004d2a:	607b      	str	r3, [r7, #4]

  for (uint8_t index = 0; e != 0; index++) {
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	75fb      	strb	r3, [r7, #23]
 8004d30:	e019      	b.n	8004d66 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x6a>
    if (e & 1)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00e      	beq.n	8004d5a <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 8004d3c:	7dfa      	ldrb	r2, [r7, #23]
 8004d3e:	f107 0310 	add.w	r3, r7, #16
 8004d42:	4611      	mov	r1, r2
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fb45 	bl	80053d4 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 8004d4a:	eeb0 6b40 	vmov.f64	d6, d0
 8004d4e:	ed97 7b02 	vldr	d7, [r7, #8]
 8004d52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004d56:	ed87 7b02 	vstr	d7, [r7, #8]
    e >>= 1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	105b      	asrs	r3, r3, #1
 8004d5e:	607b      	str	r3, [r7, #4]
  for (uint8_t index = 0; e != 0; index++) {
 8004d60:	7dfb      	ldrb	r3, [r7, #23]
 8004d62:	3301      	adds	r3, #1
 8004d64:	75fb      	strb	r3, [r7, #23]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e2      	bne.n	8004d32 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x36>
  }
  return m;
 8004d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d70:	ec43 2b17 	vmov	d7, r2, r3
}
 8004d74:	eeb0 0b47 	vmov.f64	d0, d7
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>:
inline TFloat make_float(TFloat m, TExponent e) {
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	ed87 0a01 	vstr	s0, [r7, #4]
 8004d88:	6038      	str	r0, [r7, #0]
  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	dd04      	ble.n	8004d9a <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x1c>
 8004d90:	f000 fbca 	bl	8005528 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>
 8004d94:	4603      	mov	r3, r0
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	e003      	b.n	8004da2 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8004d9a:	f000 fbd5 	bl	8005548 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	60bb      	str	r3, [r7, #8]
  if (e <= 0)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	dc02      	bgt.n	8004dae <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x30>
    e = TExponent(-e);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	425b      	negs	r3, r3
 8004dac:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 8004dae:	2300      	movs	r3, #0
 8004db0:	73fb      	strb	r3, [r7, #15]
 8004db2:	e019      	b.n	8004de8 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x6a>
    if (e & 1)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00e      	beq.n	8004ddc <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 8004dbe:	7bfa      	ldrb	r2, [r7, #15]
 8004dc0:	f107 0308 	add.w	r3, r7, #8
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fbce 	bl	8005568 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>
 8004dcc:	eeb0 7a40 	vmov.f32	s14, s0
 8004dd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dd8:	edc7 7a01 	vstr	s15, [r7, #4]
    e >>= 1;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	105b      	asrs	r3, r3, #1
 8004de0:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	3301      	adds	r3, #1
 8004de6:	73fb      	strb	r3, [r7, #15]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e2      	bne.n	8004db4 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x36>
  return m;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	ee07 3a90 	vmov	s15, r3
}
 8004df4:	eeb0 0a67 	vmov.f32	s0, s15
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      _GLIBCXX20_CONSTEXPR
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8004e00:	b5b0      	push	{r4, r5, r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 8004e0c:	68fc      	ldr	r4, [r7, #12]
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f018 fb62 	bl	801d4d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8004e14:	4603      	mov	r3, r0
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f018 fcba 	bl	801d794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
      {
	// NB: Not required, but considered best practice.
	if (__s == 0)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d102      	bne.n	8004e2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2c>
	  std::__throw_logic_error(__N("basic_string: "
 8004e26:	480a      	ldr	r0, [pc, #40]	@ (8004e50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
 8004e28:	f018 fb3f 	bl	801d4aa <_ZSt19__throw_logic_errorPKc>
				       "construction from null is not valid"));
	const _CharT* __end = __s + traits_type::length(__s);
 8004e2c:	68b8      	ldr	r0, [r7, #8]
 8004e2e:	f7fd fb97 	bl	8002560 <_ZNSt11char_traitsIcE6lengthEPKc>
 8004e32:	4602      	mov	r2, r0
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4413      	add	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]
	_M_construct(__s, __end, forward_iterator_tag());
 8004e3a:	462b      	mov	r3, r5
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f922 	bl	800508a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e50:	0801ef78 	.word	0x0801ef78

08004e54 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>:
  detail::MemberProxy<JsonDocument&, detail::AdaptedString<TString>> operator[](
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08a      	sub	sp, #40	@ 0x28
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8004e60:	f107 0314 	add.w	r3, r7, #20
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fb92 	bl	8005590 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	f107 0314 	add.w	r3, r7, #20
 8004e74:	cb0c      	ldmia	r3, {r2, r3}
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 fb9c 	bl	80055b6 <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>
  }
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	3720      	adds	r7, #32
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>:
  operator T() const {
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	6039      	str	r1, [r7, #0]
    return as<T>();
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6839      	ldr	r1, [r7, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 f876 	bl	8004f86 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 8004e9a:	bf00      	nop
  }
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>:
  operator T() const {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
    return as<T>();
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6839      	ldr	r1, [r7, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fb9b 	bl	80055ee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>
 8004eb8:	bf00      	nop
  }
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b08c      	sub	sp, #48	@ 0x30
 8004ec6:	af02      	add	r7, sp, #8
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	f107 0314 	add.w	r3, r7, #20
 8004ed4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ed8:	e883 0003 	stmia.w	r3, {r0, r1}
 8004edc:	f107 031c 	add.w	r3, r7, #28
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fba7 	bl	8005636 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8004ee8:	466a      	mov	r2, sp
 8004eea:	f107 0320 	add.w	r3, r7, #32
 8004eee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ef2:	e882 0003 	stmia.w	r2, {r0, r1}
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	f107 0214 	add.w	r2, r7, #20
 8004efc:	ca06      	ldmia	r2, {r1, r2}
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 f973 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	3728      	adds	r7, #40	@ 0x28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
    return as<T>();
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fba1 	bl	800565c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>
 8004f1a:	4603      	mov	r3, r0
  }
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08c      	sub	sp, #48	@ 0x30
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	f107 0314 	add.w	r3, r7, #20
 8004f36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f3a:	e883 0003 	stmia.w	r3, {r0, r1}
 8004f3e:	f107 031c 	add.w	r3, r7, #28
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fbab 	bl	80056a0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8004f4a:	466a      	mov	r2, sp
 8004f4c:	f107 0320 	add.w	r3, r7, #32
 8004f50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f54:	e882 0003 	stmia.w	r2, {r0, r1}
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	f107 0214 	add.w	r2, r7, #20
 8004f5e:	ca06      	ldmia	r2, {r1, r2}
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f942 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	3728      	adds	r7, #40	@ 0x28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>:
  operator T() const {
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
    return as<T>();
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fba5 	bl	80056c6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>
 8004f7c:	4603      	mov	r3, r0
  }
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8004f86:	b590      	push	{r4, r7, lr}
 8004f88:	b087      	sub	sp, #28
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 8004f98:	6938      	ldr	r0, [r7, #16]
 8004f9a:	f000 ff69 	bl	8005e70 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	6938      	ldr	r0, [r7, #16]
 8004fa2:	f000 ff75 	bl	8005e90 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	f107 0308 	add.w	r3, r7, #8
 8004fac:	4621      	mov	r1, r4
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fd ff88 	bl	8002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 8004fb4:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f107 0308 	add.w	r3, r7, #8
 8004fbc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004fc0:	f7fe fc6e 	bl	80038a0 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>
 8004fc4:	bf00      	nop
}
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd90      	pop	{r4, r7, pc}

08004fce <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
   *  @return  New string with @a __lhs followed by @a __rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	71fb      	strb	r3, [r7, #7]
    {
      typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
      typedef typename __string_type::size_type		__size_type;
      __string_type __str(__lhs);
 8004fdc:	68b9      	ldr	r1, [r7, #8]
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f018 fbf5 	bl	801d7ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	2101      	movs	r1, #1
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f018 fbc6 	bl	801d77c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 8004ff0:	bf00      	nop
    }
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>:
// Parses a JSON input, filters, and puts the result in a JsonDocument.
// https://arduinojson.org/v7/api/json/deserializejson/
template <typename TDestination, typename TChar, typename... Args,
          detail::enable_if_t<
              detail::is_deserialize_destination<TDestination>::value, int> = 0>
inline DeserializationError deserializeJson(TDestination&& dst, TChar* input,
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
                                            Args&&... args) {
  using namespace detail;
  return deserialize<JsonDeserializer>(detail::forward<TDestination>(dst),
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fb80 	bl	800570a <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 800500a:	4602      	mov	r2, r0
 800500c:	463b      	mov	r3, r7
 800500e:	4619      	mov	r1, r3
 8005010:	4610      	mov	r0, r2
 8005012:	f000 fb85 	bl	8005720 <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>
 8005016:	4603      	mov	r3, r0
                                       input, detail::forward<Args>(args)...);
}
 8005018:	4618      	mov	r0, r3
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	781a      	ldrb	r2, [r3, #0]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	bf0c      	ite	eq
 8005036:	2301      	moveq	r3, #1
 8005038:	2300      	movne	r3, #0
 800503a:	b2db      	uxtb	r3, r3
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 8005066:	b580      	push	{r7, lr}
 8005068:	b082      	sub	sp, #8
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d004      	beq.n	8005080 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f018 fa5e 	bl	801d53c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 800508a:	b580      	push	{r7, lr}
 800508c:	b088      	sub	sp, #32
 800508e:	af00      	add	r7, sp, #0
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	607a      	str	r2, [r7, #4]
 8005096:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	68b8      	ldr	r0, [r7, #8]
 800509c:	f000 fb61 	bl	8005762 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 80050a0:	4603      	mov	r3, r0
 80050a2:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	2b0f      	cmp	r3, #15
 80050a8:	d911      	bls.n	80050ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 80050aa:	f107 0318 	add.w	r3, r7, #24
 80050ae:	2200      	movs	r2, #0
 80050b0:	4619      	mov	r1, r3
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f018 fa20 	bl	801d4f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80050b8:	4603      	mov	r3, r0
 80050ba:	4619      	mov	r1, r3
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f018 fa07 	bl	801d4d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	4619      	mov	r1, r3
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f018 fa08 	bl	801d4dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 80050cc:	e005      	b.n	80050da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x50>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 80050d2:	69f8      	ldr	r0, [r7, #28]
 80050d4:	f018 fa00 	bl	801d4d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80050d8:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 80050da:	f107 0314 	add.w	r3, r7, #20
 80050de:	68f9      	ldr	r1, [r7, #12]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7ff ffb1 	bl	8005048 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f018 f9f4 	bl	801d4d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80050ec:	4603      	mov	r3, r0
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f018 fa67 	bl	801d5c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	4619      	mov	r1, r3
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f018 f9ed 	bl	801d4e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8005106:	f107 0314 	add.w	r3, r7, #20
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff ffab 	bl	8005066 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>:
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
    capacity_ = slots_ ? cap : 0;
    usage_ = 0;
  }

  void destroy(Allocator* allocator) {
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]
    if (slots_)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE+0x24>
      allocator->deallocate(slots_);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3304      	adds	r3, #4
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6852      	ldr	r2, [r2, #4]
 8005134:	4611      	mov	r1, r2
 8005136:	6838      	ldr	r0, [r7, #0]
 8005138:	4798      	blx	r3
    slots_ = nullptr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	605a      	str	r2, [r3, #4]
    capacity_ = 0;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	805a      	strh	r2, [r3, #2]
  }
 800514c:	bf00      	nop
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>:

  static SlotCount bytesToSlots(size_t n) {
    return static_cast<SlotCount>(n / sizeof(T));
  }

  static size_t slotsToBytes(SlotCount n) {
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	80fb      	strh	r3, [r7, #6]
    return n * sizeof(T);
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	00db      	lsls	r3, r3, #3
  }
 8005162:	4618      	mov	r0, r3
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:
  void shrinkToFit(Allocator* allocator) {
 800516e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005170:	b085      	sub	sp, #20
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	6039      	str	r1, [r7, #0]
        allocator->reallocate(slots_, slotsToBytes(usage_)));
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3308      	adds	r3, #8
 800517e:	681c      	ldr	r4, [r3, #0]
 8005180:	683d      	ldr	r5, [r7, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685e      	ldr	r6, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	885b      	ldrh	r3, [r3, #2]
 800518a:	4618      	mov	r0, r3
 800518c:	f7ff ffe2 	bl	8005154 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 8005190:	4603      	mov	r3, r0
 8005192:	461a      	mov	r2, r3
 8005194:	4631      	mov	r1, r6
 8005196:	4628      	mov	r0, r5
 8005198:	47a0      	blx	r4
 800519a:	60f8      	str	r0, [r7, #12]
    if (newSlots) {
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d006      	beq.n	80051b0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x42>
      slots_ = newSlots;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	605a      	str	r2, [r3, #4]
      capacity_ = usage_;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	885a      	ldrh	r2, [r3, #2]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	801a      	strh	r2, [r3, #0]
  }
 80051b0:	bf00      	nop
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051b8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>:
  template <typename TAdaptedString>
  VariantData* getMember(TAdaptedString key,
                         const ResourceManager* resources) const;

  template <typename TAdaptedString>
  static VariantData* getMember(const ObjectData* object, TAdaptedString key,
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	4638      	mov	r0, r7
 80051c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                const ResourceManager* resources) {
    if (!object)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x18>
      return nullptr;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e008      	b.n	80051e2 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return object->getMember(key, resources);
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	463b      	mov	r3, r7
 80051d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051da:	f000 fad6 	bl	800578a <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 80051de:	4603      	mov	r3, r0
 80051e0:	bf00      	nop
  }
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>:

  template <typename>
  friend class ElementProxy;

 public:
  MemberProxy(TUpstream upstream, AdaptedString key)
 80051ea:	b082      	sub	sp, #8
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	1d38      	adds	r0, r7, #4
 80051f6:	e880 0006 	stmia.w	r0, {r1, r2}
 80051fa:	61fb      	str	r3, [r7, #28]
      : upstream_(upstream), key_(key) {}
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3304      	adds	r3, #4
 8005200:	1d3a      	adds	r2, r7, #4
 8005202:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005206:	e883 0003 	stmia.w	r3, {r0, r1}
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	330c      	adds	r3, #12
 800520e:	f107 021c 	add.w	r2, r7, #28
 8005212:	ca07      	ldmia	r2, {r0, r1, r2}
 8005214:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	b002      	add	sp, #8
 8005226:	4770      	bx	lr

08005228 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>:

 private:
  Slot<T> allocFromFreeList() {
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(freeList_ != NULL_SLOT);
    auto id = freeList_;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005236:	81fb      	strh	r3, [r7, #14]
    auto slot = getSlot(freeList_);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800523c:	4619      	mov	r1, r3
 800523e:	6838      	ldr	r0, [r7, #0]
 8005240:	f7ff fcb0 	bl	8004ba4 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8005244:	60b8      	str	r0, [r7, #8]
    freeList_ = reinterpret_cast<FreeSlot*>(slot)->next;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	881a      	ldrh	r2, [r3, #0]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	851a      	strh	r2, [r3, #40]	@ 0x28
    return {slot, id};
 800524e:	89fb      	ldrh	r3, [r7, #14]
 8005250:	461a      	mov	r2, r3
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff fc75 	bl	8004b44 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>:

  Slot<T> allocFromLastPool() {
 8005262:	b5b0      	push	{r4, r5, r7, lr}
 8005264:	b086      	sub	sp, #24
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(count_ > 0);
    auto poolIndex = SlotId(count_ - 1);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005270:	3b01      	subs	r3, #1
 8005272:	82fb      	strh	r3, [r7, #22]
    auto slot = pools_[poolIndex].allocSlot();
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	6a1a      	ldr	r2, [r3, #32]
 8005278:	8afb      	ldrh	r3, [r7, #22]
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	441a      	add	r2, r3
 800527e:	f107 030c 	add.w	r3, r7, #12
 8005282:	4611      	mov	r1, r2
 8005284:	4618      	mov	r0, r3
 8005286:	f000 faad 	bl	80057e4 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>
    if (!slot)
 800528a:	f107 030c 	add.w	r3, r7, #12
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff fc22 	bl	8004ad8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8005294:	4603      	mov	r3, r0
 8005296:	f083 0301 	eor.w	r3, r3, #1
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x46>
      return {};
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f857 	bl	8005354 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 80052a6:	e015      	b.n	80052d4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x72>
    return {slot.ptr(),
            SlotId(poolIndex * ARDUINOJSON_POOL_CAPACITY + slot.id())};
 80052a8:	f107 030c 	add.w	r3, r7, #12
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 f863 	bl	8005378 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 80052b2:	4605      	mov	r5, r0
 80052b4:	8afb      	ldrh	r3, [r7, #22]
 80052b6:	01db      	lsls	r3, r3, #7
 80052b8:	b29c      	uxth	r4, r3
 80052ba:	f107 030c 	add.w	r3, r7, #12
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff fc27 	bl	8004b12 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 80052c4:	4603      	mov	r3, r0
 80052c6:	4423      	add	r3, r4
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	4629      	mov	r1, r5
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7ff fc38 	bl	8004b44 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bdb0      	pop	{r4, r5, r7, pc}

080052dc <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>:

  Pool* addPool(Allocator* allocator) {
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
    if (count_ == capacity_ && !increaseCapacity(allocator))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d10b      	bne.n	800530a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 80052f2:	6839      	ldr	r1, [r7, #0]
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 faa1 	bl	800583c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f083 0301 	eor.w	r3, r3, #1
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x30>
 800530a:	2300      	movs	r3, #0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x38>
      return nullptr;
 8005310:	2300      	movs	r3, #0
 8005312:	e01b      	b.n	800534c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x70>
    auto pool = &pools_[count_++];
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1a      	ldr	r2, [r3, #32]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800531c:	1c59      	adds	r1, r3, #1
 800531e:	b288      	uxth	r0, r1
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	8488      	strh	r0, [r1, #36]	@ 0x24
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	60bb      	str	r3, [r7, #8]
    SlotCount poolCapacity = ARDUINOJSON_POOL_CAPACITY;
 800532a:	2380      	movs	r3, #128	@ 0x80
 800532c:	81fb      	strh	r3, [r7, #14]
    if (count_ == maxPools)  // last pool is smaller because of NULL_SLOT
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005332:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005336:	d102      	bne.n	800533e <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x62>
      poolCapacity--;
 8005338:	89fb      	ldrh	r3, [r7, #14]
 800533a:	3b01      	subs	r3, #1
 800533c:	81fb      	strh	r3, [r7, #14]
    pool->create(poolCapacity, allocator);
 800533e:	89fb      	ldrh	r3, [r7, #14]
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	4619      	mov	r1, r3
 8005344:	68b8      	ldr	r0, [r7, #8]
 8005346:	f000 fabe 	bl	80058c6 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>
    return pool;
 800534a:	68bb      	ldr	r3, [r7, #8]
  }
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005368:	809a      	strh	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>:
  T* ptr() const {
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
    return ptr_;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
  }
 8005384:	4618      	mov	r0, r3
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	807b      	strh	r3, [r7, #2]
    return slots_ + id;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	887b      	ldrh	r3, [r7, #2]
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	4413      	add	r3, r2
  }
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 80053ba:	1d3b      	adds	r3, r7, #4
 80053bc:	4904      	ldr	r1, [pc, #16]	@ (80053d0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv+0x1c>)
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 faa7 	bl	8005912 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 80053c4:	687b      	ldr	r3, [r7, #4]
  }
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	0801f4e8 	.word	0x0801f4e8

080053d4 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>:
template <typename T>
class pgm_ptr {
 public:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}

  T operator[](intptr_t index) const {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	4413      	add	r3, r2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 faa1 	bl	8005930 <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>
 80053ee:	eeb0 7b40 	vmov.f64	d7, d0
  }
 80053f2:	eeb0 0b47 	vmov.f64	d0, d7
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8005402:	1d3b      	adds	r3, r7, #4
 8005404:	4904      	ldr	r1, [pc, #16]	@ (8005418 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv+0x1c>)
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fa83 	bl	8005912 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 800540c:	687b      	ldr	r3, [r7, #4]
  }
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	0801f530 	.word	0x0801f530

0800541c <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>:

template <typename TChar>
struct SizedStringAdapter<TChar*, enable_if_t<IsChar<TChar>::value>> {
  using AdaptedString = RamString;

  static AdaptedString adapt(const TChar* p, size_t n) {
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
    return AdaptedString(reinterpret_cast<const char*>(p), n);
 8005428:	2300      	movs	r3, #0
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f7fd f956 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* get(const TAdaptedString& str) const {
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b089      	sub	sp, #36	@ 0x24
 8005440:	af02      	add	r7, sp, #8
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
    for (auto node = strings_; node; node = node->next) {
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	e01e      	b.n	800548c <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x50>
      if (stringEquals(str, adaptString(node->data, node->length)))
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f103 0108 	add.w	r1, r3, #8
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	88db      	ldrh	r3, [r3, #6]
 8005458:	461a      	mov	r2, r3
 800545a:	f107 0308 	add.w	r3, r7, #8
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff fbea 	bl	8004c38 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	466c      	mov	r4, sp
 8005468:	f107 030c 	add.w	r3, r7, #12
 800546c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005470:	e884 0003 	stmia.w	r4, {r0, r1}
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	ca07      	ldmia	r2, {r0, r1, r2}
 8005478:	f000 fa6a 	bl	8005950 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x4a>
        return node;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	e006      	b.n	8005494 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x58>
    for (auto node = strings_; node; node = node->next) {
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1dd      	bne.n	800544e <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x12>
    return nullptr;
 8005492:	2300      	movs	r3, #0
  }
 8005494:	4618      	mov	r0, r3
 8005496:	371c      	adds	r7, #28
 8005498:	46bd      	mov	sp, r7
 800549a:	bd90      	pop	{r4, r7, pc}

0800549c <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

using nullptr_t = decltype(nullptr);

template <class T>
T&& forward(remove_reference_t<T>& t) noexcept {
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80054a4:	687b      	ldr	r3, [r7, #4]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80054ba:	687b      	ldr	r3, [r7, #4]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fa7f 	bl	80059d4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 80054d6:	4603      	mov	r3, r0
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fa86 	bl	80059ea <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 80054de:	4603      	mov	r3, r0
  }
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>:
  VariantData* getData() const {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fa6f 	bl	80059d4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 80054f6:	4603      	mov	r3, r0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fa82 	bl	8005a02 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80054fe:	4603      	mov	r3, r0
  }
 8005500:	4618      	mov	r0, r3
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>:
  static T forge(uint64_t bits) {
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	e9c7 0100 	strd	r0, r1, [r7]
    return alias_cast<T>(bits);
 8005512:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005516:	f000 fa80 	bl	8005a1a <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>
 800551a:	eeb0 7b40 	vmov.f64	d7, d0
  }
 800551e:	eeb0 0b47 	vmov.f64	d0, d7
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 800552e:	1d3b      	adds	r3, r7, #4
 8005530:	4904      	ldr	r1, [pc, #16]	@ (8005544 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv+0x1c>)
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fa85 	bl	8005a42 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 8005538:	687b      	ldr	r3, [r7, #4]
  }
 800553a:	4618      	mov	r0, r3
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	0801f578 	.word	0x0801f578

08005548 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 800554e:	1d3b      	adds	r3, r7, #4
 8005550:	4904      	ldr	r1, [pc, #16]	@ (8005564 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv+0x1c>)
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fa75 	bl	8005a42 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 8005558:	687b      	ldr	r3, [r7, #4]
  }
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	0801f590 	.word	0x0801f590

08005568 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>:
  T operator[](intptr_t index) const {
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	4618      	mov	r0, r3
 800557e:	f000 fa6f 	bl	8005a60 <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>
 8005582:	eef0 7a40 	vmov.f32	s15, s0
  }
 8005586:	eeb0 0a67 	vmov.f32	s0, s15
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800559a:	6838      	ldr	r0, [r7, #0]
 800559c:	f000 fa6f 	bl	8005a7e <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80055a0:	4602      	mov	r2, r0
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4611      	mov	r1, r2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fa74 	bl	8005a94 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>
 80055ac:	bf00      	nop
}
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 80055b6:	b082      	sub	sp, #8
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
 80055c2:	f107 0110 	add.w	r1, r7, #16
 80055c6:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3304      	adds	r3, #4
 80055d4:	f107 0210 	add.w	r2, r7, #16
 80055d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80055da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	b002      	add	sp, #8
 80055ec:	4770      	bx	lr

080055ee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80055ee:	b590      	push	{r4, r7, lr}
 80055f0:	b087      	sub	sp, #28
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 8005600:	6938      	ldr	r0, [r7, #16]
 8005602:	f7ff ff71 	bl	80054e8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>
 8005606:	4604      	mov	r4, r0
 8005608:	6938      	ldr	r0, [r7, #16]
 800560a:	f7ff ff5d 	bl	80054c8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 800560e:	4602      	mov	r2, r0
 8005610:	f107 0308 	add.w	r3, r7, #8
 8005614:	4621      	mov	r1, r4
 8005616:	4618      	mov	r0, r3
 8005618:	f7fd fc54 	bl	8002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 800561c:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f107 0308 	add.w	r3, r7, #8
 8005624:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005628:	f7fe f95d 	bl	80038e6 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>
 800562c:	bf00      	nop
}
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	bd90      	pop	{r4, r7, pc}

08005636 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8005640:	6838      	ldr	r0, [r7, #0]
 8005642:	f000 fa36 	bl	8005ab2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8005646:	4602      	mov	r2, r0
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4611      	mov	r1, r2
 800564c:	4618      	mov	r0, r3
 800564e:	f000 fa3b 	bl	8005ac8 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>
 8005652:	bf00      	nop
}
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800565c:	b590      	push	{r4, r7, lr}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800566c:	6938      	ldr	r0, [r7, #16]
 800566e:	f000 fcce 	bl	800600e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8005672:	4604      	mov	r4, r0
 8005674:	6938      	ldr	r0, [r7, #16]
 8005676:	f000 fb58 	bl	8005d2a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 800567a:	4602      	mov	r2, r0
 800567c:	f107 0308 	add.w	r3, r7, #8
 8005680:	4621      	mov	r1, r4
 8005682:	4618      	mov	r0, r3
 8005684:	f7fd fbf3 	bl	8002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8005688:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800568a:	f107 0308 	add.w	r3, r7, #8
 800568e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005692:	f7fe f8e5 	bl	8003860 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 8005696:	4603      	mov	r3, r0
}
 8005698:	4618      	mov	r0, r3
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	bd90      	pop	{r4, r7, pc}

080056a0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 80056aa:	6838      	ldr	r0, [r7, #0]
 80056ac:	f000 fa1b 	bl	8005ae6 <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80056b0:	4602      	mov	r2, r0
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4611      	mov	r1, r2
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fa20 	bl	8005afc <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>
 80056bc:	bf00      	nop
}
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80056c6:	b590      	push	{r4, r7, lr}
 80056c8:	b087      	sub	sp, #28
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 80056d6:	6938      	ldr	r0, [r7, #16]
 80056d8:	f000 fc99 	bl	800600e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 80056dc:	4604      	mov	r4, r0
 80056de:	6938      	ldr	r0, [r7, #16]
 80056e0:	f000 fb23 	bl	8005d2a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 80056e4:	4602      	mov	r2, r0
 80056e6:	f107 0308 	add.w	r3, r7, #8
 80056ea:	4621      	mov	r1, r4
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fd fbbe 	bl	8002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 80056f2:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 80056f4:	f107 0308 	add.w	r3, r7, #8
 80056f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80056fc:	f000 fa0d 	bl	8005b1a <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>
 8005700:	4603      	mov	r3, r0
}
 8005702:	4618      	mov	r0, r3
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	bd90      	pop	{r4, r7, pc}

0800570a <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005712:	687b      	ldr	r3, [r7, #4]
}
 8005714:	4618      	mov	r0, r3
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>:
template <
    template <typename> class TDeserializer, typename TDestination,
    typename TStream, typename... Args,
    enable_if_t<  // issue #1897
        !is_integral<typename first_or_void<Args...>::type>::value, int> = 0>
DeserializationError deserialize(TDestination&& dst, TStream&& input,
 8005720:	b590      	push	{r4, r7, lr}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
                                 Args... args) {
  return doDeserialize<TDeserializer>(
 800572a:	6838      	ldr	r0, [r7, #0]
 800572c:	f7ff feb6 	bl	800549c <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8005730:	4603      	mov	r3, r0
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fa0f 	bl	8005b56 <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>
 8005738:	4604      	mov	r4, r0
 800573a:	f107 0308 	add.w	r3, r7, #8
 800573e:	4618      	mov	r0, r3
 8005740:	f7fe f9a0 	bl	8003a84 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>
 8005744:	7a38      	ldrb	r0, [r7, #8]
 8005746:	f7fe f9df 	bl	8003b08 <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>
 800574a:	4603      	mov	r3, r0
 800574c:	81bb      	strh	r3, [r7, #12]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4621      	mov	r1, r4
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fa20 	bl	8005b98 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>
 8005758:	4603      	mov	r3, r0
      dst, makeReader(detail::forward<TStream>(input)),
      makeDeserializationOptions(args...));
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	bd90      	pop	{r4, r7, pc}

08005762 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8005762:	b5b0      	push	{r4, r5, r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800576c:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800576e:	1d3b      	adds	r3, r7, #4
 8005770:	4618      	mov	r0, r3
 8005772:	f000 fa4a 	bl	8005c0a <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8005776:	462a      	mov	r2, r5
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	4620      	mov	r0, r4
 800577c:	f000 fa4f 	bl	8005c1e <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8005780:	4603      	mov	r3, r0
    }
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bdb0      	pop	{r4, r5, r7, pc}

0800578a <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TAdaptedString>
inline VariantData* ObjectData::getMember(
 800578a:	b580      	push	{r7, lr}
 800578c:	b088      	sub	sp, #32
 800578e:	af02      	add	r7, sp, #8
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	4638      	mov	r0, r7
 8005794:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  auto it = findKey(key, resources);
 8005798:	f107 0010 	add.w	r0, r7, #16
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	9301      	str	r3, [sp, #4]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	463b      	mov	r3, r7
 80057a6:	cb0c      	ldmia	r3, {r2, r3}
 80057a8:	68f9      	ldr	r1, [r7, #12]
 80057aa:	f000 fa47 	bl	8005c3c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>
  if (it.done())
 80057ae:	f107 0310 	add.w	r3, r7, #16
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fd f892 	bl	80028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x38>
    return nullptr;
 80057be:	2300      	movs	r3, #0
 80057c0:	e00c      	b.n	80057dc <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x52>
  it.next(resources);
 80057c2:	f107 0310 	add.w	r3, r7, #16
 80057c6:	6a39      	ldr	r1, [r7, #32]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fd fd46 	bl	800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
  return it.data();
 80057ce:	f107 0310 	add.w	r3, r7, #16
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fd f8b3 	bl	800293e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 80057d8:	4603      	mov	r3, r0
 80057da:	bf00      	nop
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>:
  Slot<T> allocSlot() {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
    if (!slots_)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d103      	bne.n	80057fe <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x1a>
      return {};
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff fdac 	bl	8005354 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 80057fc:	e01a      	b.n	8005834 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    if (usage_ >= capacity_)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	885a      	ldrh	r2, [r3, #2]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d303      	bcc.n	8005812 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x2e>
      return {};
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff fda2 	bl	8005354 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8005810:	e010      	b.n	8005834 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    auto index = usage_++;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	885b      	ldrh	r3, [r3, #2]
 8005816:	1c5a      	adds	r2, r3, #1
 8005818:	b291      	uxth	r1, r2
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	8051      	strh	r1, [r2, #2]
 800581e:	81fb      	strh	r3, [r7, #14]
    return {slots_ + index, SlotId(index)};
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	89fb      	ldrh	r3, [r7, #14]
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	4413      	add	r3, r2
 800582a:	89fa      	ldrh	r2, [r7, #14]
 800582c:	4619      	mov	r1, r3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff f988 	bl	8004b44 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>:

  bool increaseCapacity(Allocator* allocator) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
    if (capacity_ == maxPools)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800584a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800584e:	d101      	bne.n	8005854 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x18>
      return false;
 8005850:	2300      	movs	r3, #0
 8005852:	e034      	b.n	80058be <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    void* newPools;
    auto newCapacity = PoolCount(capacity_ * 2);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	817b      	strh	r3, [r7, #10]

    if (pools_ == preallocatedPools_) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a1a      	ldr	r2, [r3, #32]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	429a      	cmp	r2, r3
 8005864:	d114      	bne.n	8005890 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x54>
      newPools = allocator->allocate(newCapacity * sizeof(Pool));
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	897a      	ldrh	r2, [r7, #10]
 800586e:	00d2      	lsls	r2, r2, #3
 8005870:	4611      	mov	r1, r2
 8005872:	6838      	ldr	r0, [r7, #0]
 8005874:	4798      	blx	r3
 8005876:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x46>
        return false;
 800587e:	2300      	movs	r3, #0
 8005880:	e01d      	b.n	80058be <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
      memcpy(newPools, preallocatedPools_, sizeof(preallocatedPools_));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	4619      	mov	r1, r3
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f018 fcbc 	bl	801e206 <memcpy>
 800588e:	e00f      	b.n	80058b0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
    } else {
      newPools = allocator->reallocate(pools_, newCapacity * sizeof(Pool));
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3308      	adds	r3, #8
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6a11      	ldr	r1, [r2, #32]
 800589c:	897a      	ldrh	r2, [r7, #10]
 800589e:	00d2      	lsls	r2, r2, #3
 80058a0:	6838      	ldr	r0, [r7, #0]
 80058a2:	4798      	blx	r3
 80058a4:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
        return false;
 80058ac:	2300      	movs	r3, #0
 80058ae:	e006      	b.n	80058be <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    }

    pools_ = static_cast<Pool*>(newPools);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	621a      	str	r2, [r3, #32]
    capacity_ = newCapacity;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	897a      	ldrh	r2, [r7, #10]
 80058ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    return true;
 80058bc:	2301      	movs	r3, #1
  }
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>:
  void create(SlotCount cap, Allocator* allocator) {
 80058c6:	b5b0      	push	{r4, r5, r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	460b      	mov	r3, r1
 80058d0:	607a      	str	r2, [r7, #4]
 80058d2:	817b      	strh	r3, [r7, #10]
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681c      	ldr	r4, [r3, #0]
 80058da:	687d      	ldr	r5, [r7, #4]
 80058dc:	897b      	ldrh	r3, [r7, #10]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff fc38 	bl	8005154 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 80058e4:	4603      	mov	r3, r0
 80058e6:	4619      	mov	r1, r3
 80058e8:	4628      	mov	r0, r5
 80058ea:	47a0      	blx	r4
 80058ec:	4602      	mov	r2, r0
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	605a      	str	r2, [r3, #4]
    capacity_ = slots_ ? cap : 0;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x38>
 80058fa:	897a      	ldrh	r2, [r7, #10]
 80058fc:	e000      	b.n	8005900 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x3a>
 80058fe:	2200      	movs	r2, #0
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	805a      	strh	r2, [r3, #2]
  }
 800590a:	bf00      	nop
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bdb0      	pop	{r4, r5, r7, pc}

08005912 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>:
inline T pgm_read(const T* p) {
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  return *p;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	ec43 2b17 	vmov	d7, r2, r3
}
 8005942:	eeb0 0b47 	vmov.f64	d0, d7
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
  return -stringCompare(s2, s1);
}

template <typename TAdaptedString1, typename TAdaptedString2>
enable_if_t<TAdaptedString1::typeSortKey <= TAdaptedString2::typeSortKey, bool>
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8005950:	b082      	sub	sp, #8
 8005952:	b590      	push	{r4, r7, lr}
 8005954:	b089      	sub	sp, #36	@ 0x24
 8005956:	af00      	add	r7, sp, #0
 8005958:	1d3c      	adds	r4, r7, #4
 800595a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800595e:	637b      	str	r3, [r7, #52]	@ 0x34
  ARDUINOJSON_ASSERT(!s1.isNull());
  ARDUINOJSON_ASSERT(!s2.isNull());
  size_t size1 = s1.size();
 8005960:	1d3b      	adds	r3, r7, #4
 8005962:	4618      	mov	r0, r3
 8005964:	f7fc fee4 	bl	8002730 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 8005968:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 800596a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800596e:	4618      	mov	r0, r3
 8005970:	f7fc fede 	bl	8002730 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 8005974:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	429a      	cmp	r2, r3
 800597c:	d001      	beq.n	8005982 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x32>
    return false;
 800597e:	2300      	movs	r3, #0
 8005980:	e021      	b.n	80059c6 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 8005982:	2300      	movs	r3, #0
 8005984:	61fb      	str	r3, [r7, #28]
 8005986:	e019      	b.n	80059bc <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
    if (s1[i] != s2[i])
 8005988:	1d3b      	adds	r3, r7, #4
 800598a:	69f9      	ldr	r1, [r7, #28]
 800598c:	4618      	mov	r0, r3
 800598e:	f7fb f9bb 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 8005992:	4603      	mov	r3, r0
 8005994:	461c      	mov	r4, r3
 8005996:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800599a:	69f9      	ldr	r1, [r7, #28]
 800599c:	4618      	mov	r0, r3
 800599e:	f7fb f9b3 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 80059a2:	4603      	mov	r3, r0
 80059a4:	429c      	cmp	r4, r3
 80059a6:	bf14      	ite	ne
 80059a8:	2301      	movne	r3, #1
 80059aa:	2300      	moveq	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x66>
      return false;
 80059b2:	2300      	movs	r3, #0
 80059b4:	e007      	b.n	80059c6 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	3301      	adds	r3, #1
 80059ba:	61fb      	str	r3, [r7, #28]
 80059bc:	69fa      	ldr	r2, [r7, #28]
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d3e1      	bcc.n	8005988 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x38>
  }
  return true;
 80059c4:	2301      	movs	r3, #1
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3724      	adds	r7, #36	@ 0x24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80059d0:	b002      	add	sp, #8
 80059d2:	4770      	bx	lr

080059d4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>:
  const TDerived& derived() const {
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 80059dc:	687b      	ldr	r3, [r7, #4]
  }
 80059de:	4618      	mov	r0, r3
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b082      	sub	sp, #8
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7fd fa79 	bl	8002eea <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 80059f8:	4603      	mov	r3, r0
  }
 80059fa:	4618      	mov	r0, r3
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
    return client.getData();
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fd fa79 	bl	8002f02 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 8005a10:	4603      	mov	r3, r0
  }
 8005a12:	4618      	mov	r0, r3
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>:
T alias_cast(F raw_data) {
 8005a1a:	b480      	push	{r7}
 8005a1c:	b085      	sub	sp, #20
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	e9c7 0100 	strd	r0, r1, [r7]
  ac.raw = raw_data;
 8005a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a28:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 8005a2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a30:	ec43 2b17 	vmov	d7, r2, r3
}
 8005a34:	eeb0 0b47 	vmov.f64	d0, d7
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>:
inline T pgm_read(const T* p) {
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  return *p;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	ee07 3a90 	vmov	s15, r3
}
 8005a70:	eeb0 0a67 	vmov.f32	s0, s15
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005a86:	687b      	ldr	r3, [r7, #4]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	2207      	movs	r2, #7
 8005aa2:	6839      	ldr	r1, [r7, #0]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7fc fe1b 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005aba:	687b      	ldr	r3, [r7, #4]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	2206      	movs	r2, #6
 8005ad6:	6839      	ldr	r1, [r7, #0]
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7fc fe01 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005aee:	687b      	ldr	r3, [r7, #4]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8005b06:	2301      	movs	r3, #1
 8005b08:	2209      	movs	r2, #9
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7fc fde7 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	463b      	mov	r3, r7
 8005b22:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8005b26:	463b      	mov	r3, r7
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fe ff1f 	bl	800496c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8005b2e:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8005b30:	463b      	mov	r3, r7
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fe ff26 	bl	8004984 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8005b38:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d005      	beq.n	8005b4c <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x32>
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 f902 	bl	8005d4c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	e000      	b.n	8005b4e <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8005b4c:	2300      	movs	r3, #0
  }
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TInput>
Reader<remove_reference_t<TInput>> makeReader(TInput&& input) {
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  return Reader<remove_reference_t<TInput>>{detail::forward<TInput>(input)};
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7ff fc9c 	bl	800549c <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8005b64:	4603      	mov	r3, r0
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	f107 030c 	add.w	r3, r7, #12
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 f99e 	bl	8005eb0 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>
 8005b74:	68fb      	ldr	r3, [r7, #12]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>:
class JsonDeserializer {
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b082      	sub	sp, #8
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fd fd9e 	bl	80036ca <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>:
DeserializationError doDeserialize(TDestination&& dst, TReader reader,
 8005b98:	b590      	push	{r4, r7, lr}
 8005b9a:	b0a1      	sub	sp, #132	@ 0x84
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	80ba      	strh	r2, [r7, #4]
  auto data = VariantAttorney::getOrCreateData(dst);
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 f999 	bl	8005edc <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>
 8005baa:	67f8      	str	r0, [r7, #124]	@ 0x7c
  if (!data)
 8005bac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d107      	bne.n	8005bc2 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x2a>
    return DeserializationError::NoMemory;
 8005bb2:	f107 0318 	add.w	r3, r7, #24
 8005bb6:	2104      	movs	r1, #4
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fd ff08 	bl	80039ce <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8005bbe:	7e3b      	ldrb	r3, [r7, #24]
 8005bc0:	e01f      	b.n	8005c02 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x6a>
  auto resources = VariantAttorney::getResourceManager(dst);
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f996 	bl	8005ef4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8005bc8:	67b8      	str	r0, [r7, #120]	@ 0x78
  dst.clear();
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f7fd fac5 	bl	800315a <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>
  auto err = TDeserializer<TReader>(resources, reader)
 8005bd0:	f107 031c 	add.w	r3, r7, #28
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 f997 	bl	8005f0c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>
                 .parse(*data, options.filter, options.nestingLimit);
 8005bde:	f107 001c 	add.w	r0, r7, #28
 8005be2:	797b      	ldrb	r3, [r7, #5]
 8005be4:	4622      	mov	r2, r4
 8005be6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005be8:	f000 f9ac 	bl	8005f44 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8005bec:	4603      	mov	r3, r0
 8005bee:	753b      	strb	r3, [r7, #20]
  auto err = TDeserializer<TReader>(resources, reader)
 8005bf0:	f107 031c 	add.w	r3, r7, #28
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff ffc2 	bl	8005b7e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>
  shrinkJsonDocument(dst);
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f7fd ff97 	bl	8003b2e <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>
  return err;
 8005c00:	7d3b      	ldrb	r3, [r7, #20]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3784      	adds	r7, #132	@ 0x84
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd90      	pop	{r4, r7, pc}

08005c0a <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	60f8      	str	r0, [r7, #12]
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	1ad3      	subs	r3, r2, r3
    }
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>:
    return data;
  return addMember(key, resources);
}

template <typename TAdaptedString>
inline ObjectData::iterator ObjectData::findKey(
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b08e      	sub	sp, #56	@ 0x38
 8005c42:	af02      	add	r7, sp, #8
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	6039      	str	r1, [r7, #0]
 8005c48:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8005c4c:	e881 000c 	stmia.w	r1, {r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  if (key.isNull())
 8005c50:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8005c54:	f7fc fd5b 	bl	800270e <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x2a>
    return iterator();
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fc fe2a 	bl	80028b8 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 8005c64:	e05a      	b.n	8005d1c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
  bool isKey = true;
 8005c66:	2301      	movs	r3, #1
 8005c68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	f107 030c 	add.w	r3, r7, #12
 8005c72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fd fb13 	bl	80032a0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8005c7a:	e041      	b.n	8005d00 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xc4>
    if (isKey && stringEquals(key, adaptString(it->asString())))
 8005c7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d025      	beq.n	8005cd0 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8005c84:	f107 030c 	add.w	r3, r7, #12
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fc fe4c 	bl	8002926 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	f107 0314 	add.w	r3, r7, #20
 8005c94:	4611      	mov	r1, r2
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fc ff12 	bl	8002ac0 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8005c9c:	f107 0320 	add.w	r3, r7, #32
 8005ca0:	f107 0214 	add.w	r2, r7, #20
 8005ca4:	4611      	mov	r1, r2
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 f985 	bl	8005fb6 <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>
 8005cac:	466a      	mov	r2, sp
 8005cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cb2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005cb6:	e882 0003 	stmia.w	r2, {r0, r1}
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8005cc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005cc2:	f7ff fe45 	bl	8005950 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e000      	b.n	8005cd2 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x96>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d008      	beq.n	8005ce8 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xac>
      return it;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	f107 030c 	add.w	r3, r7, #12
 8005cde:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005ce2:	e882 0003 	stmia.w	r2, {r0, r1}
    isKey = !isKey;
  }
  return iterator();
}
 8005ce6:	e019      	b.n	8005d1c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
    isKey = !isKey;
 8005ce8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005cec:	f083 0301 	eor.w	r3, r3, #1
 8005cf0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 8005cf4:	f107 030c 	add.w	r3, r7, #12
 8005cf8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fd faad 	bl	800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 8005d00:	f107 030c 	add.w	r3, r7, #12
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fc fde9 	bl	80028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f083 0301 	eor.w	r3, r3, #1
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1b2      	bne.n	8005c7c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x40>
  return iterator();
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fc fdce 	bl	80028b8 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
}
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	3730      	adds	r7, #48	@ 0x30
 8005d20:	46bd      	mov	sp, r7
 8005d22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d26:	b002      	add	sp, #8
 8005d28:	4770      	bx	lr

08005d2a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f954 	bl	8005fe0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 f95b 	bl	8005ff6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 8005d40:	4603      	mov	r3, r0
  }
 8005d42:	4618      	mov	r0, r3
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
	...

08005d4c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8005d56:	6839      	ldr	r1, [r7, #0]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7fd fe1d 	bl	8003998 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8005d5e:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	791b      	ldrb	r3, [r3, #4]
 8005d64:	3b04      	subs	r3, #4
 8005d66:	2b1a      	cmp	r3, #26
 8005d68:	d87c      	bhi.n	8005e64 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x118>
 8005d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d70 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x24>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005e23 	.word	0x08005e23
 8005d74:	08005e31 	.word	0x08005e31
 8005d78:	08005ddd 	.word	0x08005ddd
 8005d7c:	08005e65 	.word	0x08005e65
 8005d80:	08005e65 	.word	0x08005e65
 8005d84:	08005e65 	.word	0x08005e65
 8005d88:	08005de3 	.word	0x08005de3
 8005d8c:	08005e65 	.word	0x08005e65
 8005d90:	08005df1 	.word	0x08005df1
 8005d94:	08005e65 	.word	0x08005e65
 8005d98:	08005e41 	.word	0x08005e41
 8005d9c:	08005e65 	.word	0x08005e65
 8005da0:	08005e65 	.word	0x08005e65
 8005da4:	08005e65 	.word	0x08005e65
 8005da8:	08005e65 	.word	0x08005e65
 8005dac:	08005e65 	.word	0x08005e65
 8005db0:	08005e65 	.word	0x08005e65
 8005db4:	08005e65 	.word	0x08005e65
 8005db8:	08005e65 	.word	0x08005e65
 8005dbc:	08005e65 	.word	0x08005e65
 8005dc0:	08005e65 	.word	0x08005e65
 8005dc4:	08005e65 	.word	0x08005e65
 8005dc8:	08005dff 	.word	0x08005dff
 8005dcc:	08005e65 	.word	0x08005e65
 8005dd0:	08005e11 	.word	0x08005e11
 8005dd4:	08005e65 	.word	0x08005e65
 8005dd8:	08005e53 	.word	0x08005e53
        return content_.asBoolean;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	e041      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 f921 	bl	800602e <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>
 8005dec:	4603      	mov	r3, r0
 8005dee:	e03a      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 f92b 	bl	8006050 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	e033      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	4610      	mov	r0, r2
 8005e06:	4619      	mov	r1, r3
 8005e08:	f000 f933 	bl	8006072 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	e02a      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	4610      	mov	r0, r2
 8005e18:	4619      	mov	r1, r3
 8005e1a:	f000 f93d 	bl	8006098 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	e021      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 f949 	bl	80060be <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	e01a      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3308      	adds	r3, #8
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 f941 	bl	80060be <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	e012      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	edd3 7a00 	vldr	s15, [r3]
 8005e46:	eeb0 0a67 	vmov.f32	s0, s15
 8005e4a:	f000 f94c 	bl	80060e6 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	e009      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	ed93 7b00 	vldr	d7, [r3]
 8005e58:	eeb0 0b47 	vmov.f64	d0, d7
 8005e5c:	f000 f95b 	bl	8006116 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 8005e60:	4603      	mov	r3, r0
 8005e62:	e000      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 8005e64:	2300      	movs	r3, #0
  }
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop

08005e70 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f964 	bl	8006146 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 f96b 	bl	800615c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 8005e86:	4603      	mov	r3, r0
  }
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f954 	bl	8006146 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 f967 	bl	8006174 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 8005ea6:	4603      	mov	r3, r0
  }
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>:
template <typename TSource>
struct Reader<TSource*, enable_if_t<IsCharOrVoid<TSource>::value>> {
  const char* ptr_;

 public:
  explicit Reader(const void* ptr)
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
      : ptr_(ptr ? reinterpret_cast<const char*>(ptr) : "") {}
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x14>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	e000      	b.n	8005ec6 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x16>
 8005ec4:	4b04      	ldr	r3, [pc, #16]	@ (8005ed8 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x28>)
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	0801ed38 	.word	0x0801ed38

08005edc <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>:

  template <typename TClient>
  static VariantData* getOrCreateData(TClient& client) {
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7fd f960 	bl	80031aa <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>
 8005eea:	4603      	mov	r3, r0
  }
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7fd f93d 	bl	800317c <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>
 8005f02:	4603      	mov	r3, r0
  }
 8005f04:	4618      	mov	r0, r3
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>:
  JsonDeserializer(ResourceManager* resources, TReader reader)
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
      : stringBuilder_(resources),
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	68b9      	ldr	r1, [r7, #8]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fd fbbf 	bl	80036a0 <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>
        foundSomething_(false),
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	731a      	strb	r2, [r3, #12]
        latch_(reader),
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3310      	adds	r3, #16
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 f92c 	bl	800618c <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>
        resources_(resources) {}
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	619a      	str	r2, [r3, #24]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError parse(VariantData& variant, TFilter filter,
 8005f44:	b590      	push	{r4, r7, lr}
 8005f46:	b089      	sub	sp, #36	@ 0x24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	713a      	strb	r2, [r7, #4]
 8005f50:	703b      	strb	r3, [r7, #0]
    err = parseVariant(variant, filter, nestingLimit);
 8005f52:	783b      	ldrb	r3, [r7, #0]
 8005f54:	4622      	mov	r2, r4
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f929 	bl	80061b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	75fb      	strb	r3, [r7, #23]
    if (!err && latch_.last() != 0 && variant.isFloat()) {
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10f      	bne.n	8005f88 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3310      	adds	r3, #16
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 fa0d 	bl	800638c <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d007      	beq.n	8005f88 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8005f78:	68b8      	ldr	r0, [r7, #8]
 8005f7a:	f7fc fde8 	bl	8002b4e <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8005f84:	2301      	movs	r3, #1
 8005f86:	e000      	b.n	8005f8a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x46>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d007      	beq.n	8005f9e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x5a>
      return DeserializationError::InvalidInput;
 8005f8e:	f107 0318 	add.w	r3, r7, #24
 8005f92:	2103      	movs	r1, #3
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fd fd1a 	bl	80039ce <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8005f9a:	7e3b      	ldrb	r3, [r7, #24]
 8005f9c:	e007      	b.n	8005fae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x6a>
    return err;
 8005f9e:	7dfa      	ldrb	r2, [r7, #23]
 8005fa0:	f107 031c 	add.w	r3, r7, #28
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fd fd11 	bl	80039ce <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8005fac:	7f3b      	ldrb	r3, [r7, #28]
  }
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3724      	adds	r7, #36	@ 0x24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd90      	pop	{r4, r7, pc}

08005fb6 <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>:
AdaptedString<TString> adaptString(TString&& s) {
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b082      	sub	sp, #8
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8005fc0:	6838      	ldr	r0, [r7, #0]
 8005fc2:	f000 f9ef 	bl	80063a4 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fc fc6a 	bl	80028a2 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8005fd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8005fe8:	687b      	ldr	r3, [r7, #4]
  }
 8005fea:	4618      	mov	r0, r3
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b082      	sub	sp, #8
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f9db 	bl	80063ba <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>
 8006004:	4603      	mov	r3, r0
  }
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 800600e:	b580      	push	{r7, lr}
 8006010:	b082      	sub	sp, #8
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff ffe2 	bl	8005fe0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 800601c:	4603      	mov	r3, r0
 800601e:	4618      	mov	r0, r3
 8006020:	f000 f9d9 	bl	80063d6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 8006024:	4603      	mov	r3, r0
  }
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>:
canConvertNumber(TIn) {
  return true;
}

template <typename TOut, typename TIn>
TOut convertNumber(TIn value) {
 800602e:	b580      	push	{r7, lr}
 8006030:	b082      	sub	sp, #8
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f9d9 	bl	80063ee <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x18>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	e000      	b.n	8006048 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x1a>
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>:
TOut convertNumber(TIn value) {
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f9d9 	bl	8006410 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x18>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	e000      	b.n	800606a <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x1a>
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>:
TOut convertNumber(TIn value) {
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800607c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006080:	f000 f9dc 	bl	800643c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1c>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	e000      	b.n	8006090 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1e>
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>:
TOut convertNumber(TIn value) {
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80060a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060a6:	f000 f9e1 	bl	800646c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1c>
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	e000      	b.n	80060b6 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1e>
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>:

template <typename T>
inline T parseNumber(const char* s) {
 80060be:	b580      	push	{r7, lr}
 80060c0:	b086      	sub	sp, #24
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 80060c6:	f107 0308 	add.w	r3, r7, #8
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fd fec7 	bl	8003e60 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 80060d2:	f107 0308 	add.w	r3, r7, #8
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 f9e6 	bl	80064a8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>
 80060dc:	4603      	mov	r3, r0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>:
TOut convertNumber(TIn value) {
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b082      	sub	sp, #8
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80060f0:	ed97 0a01 	vldr	s0, [r7, #4]
 80060f4:	f000 fa1e 	bl	8006534 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d006      	beq.n	800610c <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x26>
 80060fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8006102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006106:	ee17 3a90 	vmov	r3, s15
 800610a:	e000      	b.n	800610e <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x28>
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>:
TOut convertNumber(TIn value) {
 8006116:	b580      	push	{r7, lr}
 8006118:	b082      	sub	sp, #8
 800611a:	af00      	add	r7, sp, #0
 800611c:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006120:	ed97 0b00 	vldr	d0, [r7]
 8006124:	f000 fa34 	bl	8006590 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d006      	beq.n	800613c <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x26>
 800612e:	ed97 7b00 	vldr	d7, [r7]
 8006132:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006136:	ee17 3a90 	vmov	r3, s15
 800613a:	e000      	b.n	800613e <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x28>
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800614e:	687b      	ldr	r3, [r7, #4]
  }
 8006150:	4618      	mov	r0, r3
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
    return client.getData();
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fa39 	bl	80065dc <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>
 800616a:	4603      	mov	r3, r0
  }
 800616c:	4618      	mov	r0, r3
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fa49 	bl	8006614 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>
 8006182:	4603      	mov	r3, r0
  }
 8006184:	4618      	mov	r0, r3
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TReader>
class Latch {
 public:
  Latch(TReader reader) : reader_(reader), loaded_(false) {
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	715a      	strb	r2, [r3, #5]
#if ARDUINOJSON_DEBUG
    ended_ = false;
#endif
  }
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4618      	mov	r0, r3
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseVariant(
 80061b0:	b5b0      	push	{r4, r5, r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	713a      	strb	r2, [r7, #4]
 80061bc:	703b      	strb	r3, [r7, #0]
    err = skipSpacesAndComments();
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 fa36 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80061c4:	4603      	mov	r3, r0
 80061c6:	75fb      	strb	r3, [r7, #23]
    if (err)
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x22>
      return err;
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
 80061d0:	e0d2      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
    switch (current()) {
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 fa62 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b7b      	cmp	r3, #123	@ 0x7b
 80061dc:	f300 80ba 	bgt.w	8006354 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 80061e0:	2b5b      	cmp	r3, #91	@ 0x5b
 80061e2:	da04      	bge.n	80061ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x3e>
 80061e4:	2b22      	cmp	r3, #34	@ 0x22
 80061e6:	d07b      	beq.n	80062e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 80061e8:	2b27      	cmp	r3, #39	@ 0x27
 80061ea:	d079      	beq.n	80062e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 80061ec:	e0b2      	b.n	8006354 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 80061ee:	3b5b      	subs	r3, #91	@ 0x5b
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	f200 80af 	bhi.w	8006354 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 80061f6:	a201      	add	r2, pc, #4	@ (adr r2, 80061fc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>)
 80061f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fc:	08006281 	.word	0x08006281
 8006200:	08006355 	.word	0x08006355
 8006204:	08006355 	.word	0x08006355
 8006208:	08006355 	.word	0x08006355
 800620c:	08006355 	.word	0x08006355
 8006210:	08006355 	.word	0x08006355
 8006214:	08006355 	.word	0x08006355
 8006218:	08006355 	.word	0x08006355
 800621c:	08006355 	.word	0x08006355
 8006220:	08006355 	.word	0x08006355
 8006224:	08006355 	.word	0x08006355
 8006228:	08006327 	.word	0x08006327
 800622c:	08006355 	.word	0x08006355
 8006230:	08006355 	.word	0x08006355
 8006234:	08006355 	.word	0x08006355
 8006238:	08006355 	.word	0x08006355
 800623c:	08006355 	.word	0x08006355
 8006240:	08006355 	.word	0x08006355
 8006244:	08006355 	.word	0x08006355
 8006248:	08006349 	.word	0x08006349
 800624c:	08006355 	.word	0x08006355
 8006250:	08006355 	.word	0x08006355
 8006254:	08006355 	.word	0x08006355
 8006258:	08006355 	.word	0x08006355
 800625c:	08006355 	.word	0x08006355
 8006260:	08006305 	.word	0x08006305
 8006264:	08006355 	.word	0x08006355
 8006268:	08006355 	.word	0x08006355
 800626c:	08006355 	.word	0x08006355
 8006270:	08006355 	.word	0x08006355
 8006274:	08006355 	.word	0x08006355
 8006278:	08006355 	.word	0x08006355
 800627c:	080062b1 	.word	0x080062b1
        if (filter.allowArray())
 8006280:	1d3b      	adds	r3, r7, #4
 8006282:	4618      	mov	r0, r3
 8006284:	f7fd fbdd 	bl	8003a42 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0xf4>
          return parseArray(variant.toArray(), filter, nestingLimit);
 800628e:	68b8      	ldr	r0, [r7, #8]
 8006290:	f7fc fcdc 	bl	8002c4c <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 8006294:	4601      	mov	r1, r0
 8006296:	783b      	ldrb	r3, [r7, #0]
 8006298:	462a      	mov	r2, r5
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 fa15 	bl	80066ca <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>
 80062a0:	4603      	mov	r3, r0
 80062a2:	e069      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipArray(nestingLimit);
 80062a4:	7839      	ldrb	r1, [r7, #0]
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 fa95 	bl	80067d6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 80062ac:	4603      	mov	r3, r0
 80062ae:	e063      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowObject())
 80062b0:	1d3b      	adds	r3, r7, #4
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fd fbd0 	bl	8003a58 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
          return parseObject(variant.toObject(), filter, nestingLimit);
 80062be:	68b8      	ldr	r0, [r7, #8]
 80062c0:	f7fc fcec 	bl	8002c9c <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 80062c4:	4601      	mov	r1, r0
 80062c6:	783b      	ldrb	r3, [r7, #0]
 80062c8:	4622      	mov	r2, r4
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 fac6 	bl	800685c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>
 80062d0:	4603      	mov	r3, r0
 80062d2:	e051      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipObject(nestingLimit);
 80062d4:	7839      	ldrb	r1, [r7, #0]
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 fbac 	bl	8006a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 80062dc:	4603      	mov	r3, r0
 80062de:	e04b      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 80062e0:	1d3b      	adds	r3, r7, #4
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fd fbc3 	bl	8003a6e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d005      	beq.n	80062fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x14a>
          return parseStringValue(variant);
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 fc1f 	bl	8006b34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>
 80062f6:	4603      	mov	r3, r0
 80062f8:	e03e      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipQuotedString();
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 fc3b 	bl	8006b76 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8006300:	4603      	mov	r3, r0
 8006302:	e039      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8006304:	1d3b      	adds	r3, r7, #4
 8006306:	4618      	mov	r0, r3
 8006308:	f7fd fbb1 	bl	8003a6e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x16a>
          variant.setBoolean(true);
 8006312:	2101      	movs	r1, #1
 8006314:	68b8      	ldr	r0, [r7, #8]
 8006316:	f7fc fc47 	bl	8002ba8 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("true");
 800631a:	4919      	ldr	r1, [pc, #100]	@ (8006380 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>)
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 fc5f 	bl	8006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006322:	4603      	mov	r3, r0
 8006324:	e028      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8006326:	1d3b      	adds	r3, r7, #4
 8006328:	4618      	mov	r0, r3
 800632a:	f7fd fba0 	bl	8003a6e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
          variant.setBoolean(false);
 8006334:	2100      	movs	r1, #0
 8006336:	68b8      	ldr	r0, [r7, #8]
 8006338:	f7fc fc36 	bl	8002ba8 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("false");
 800633c:	4911      	ldr	r1, [pc, #68]	@ (8006384 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d4>)
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 fc4e 	bl	8006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006344:	4603      	mov	r3, r0
 8006346:	e017      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        return skipKeyword("null");
 8006348:	490f      	ldr	r1, [pc, #60]	@ (8006388 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d8>)
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 fc48 	bl	8006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006350:	4603      	mov	r3, r0
 8006352:	e011      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8006354:	1d3b      	adds	r3, r7, #4
 8006356:	4618      	mov	r0, r3
 8006358:	f7fd fb89 	bl	8003a6e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1be>
          return parseNumericValue(variant);
 8006362:	68b9      	ldr	r1, [r7, #8]
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 fc61 	bl	8006c2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>
 800636a:	4603      	mov	r3, r0
 800636c:	e004      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipNumericValue();
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 fd04 	bl	8006d7c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 8006374:	4603      	mov	r3, r0
 8006376:	bf00      	nop
  }
 8006378:	4618      	mov	r0, r3
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bdb0      	pop	{r4, r5, r7, pc}
 8006380:	0801efac 	.word	0x0801efac
 8006384:	0801efb4 	.word	0x0801efb4
 8006388:	0801efbc 	.word	0x0801efbc

0800638c <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>:

  void clear() {
    loaded_ = false;
  }

  int last() const {
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
    return current_;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	791b      	ldrb	r3, [r3, #4]
  }
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80063ac:	687b      	ldr	r3, [r7, #4]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>:
  // clang-format off
  MemberProxy(const MemberProxy& src) // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
      : upstream_(src.upstream_), key_(src.key_) {}
  // clang-format on

  ResourceManager* getResourceManager() const {
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b082      	sub	sp, #8
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3304      	adds	r3, #4
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fcf6 	bl	8006db8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 80063cc:	4603      	mov	r3, r0
  }
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
    return client.getData();
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fd04 	bl	8006dec <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>
 80063e4:	4603      	mov	r3, r0
  }
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b082      	sub	sp, #8
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 80063f6:	f000 f8c2 	bl	800657e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 80063fa:	4602      	mov	r2, r0
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4293      	cmp	r3, r2
 8006400:	bf94      	ite	ls
 8006402:	2301      	movls	r3, #1
 8006404:	2300      	movhi	r3, #0
 8006406:	b2db      	uxtb	r3, r3
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	da01      	bge.n	8006422 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x12>
    return false;
 800641e:	2300      	movs	r3, #0
 8006420:	e008      	b.n	8006434 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x24>
  return TOut(value) <= numeric_limits<TOut>::highest();
 8006422:	f000 f8ac 	bl	800657e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8006426:	4602      	mov	r2, r0
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	429a      	cmp	r2, r3
 800642c:	bf2c      	ite	cs
 800642e:	2301      	movcs	r3, #1
 8006430:	2300      	movcc	r3, #0
 8006432:	b2db      	uxtb	r3, r3
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800643c:	b5b0      	push	{r4, r5, r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8006446:	f000 f89a 	bl	800657e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 800644a:	4603      	mov	r3, r0
 800644c:	2200      	movs	r2, #0
 800644e:	461c      	mov	r4, r3
 8006450:	4615      	mov	r5, r2
 8006452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006456:	4294      	cmp	r4, r2
 8006458:	eb75 0303 	sbcs.w	r3, r5, r3
 800645c:	bf2c      	ite	cs
 800645e:	2301      	movcs	r3, #1
 8006460:	2300      	movcc	r3, #0
 8006462:	b2db      	uxtb	r3, r3
}
 8006464:	4618      	mov	r0, r3
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bdb0      	pop	{r4, r5, r7, pc}

0800646c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800646c:	b5b0      	push	{r4, r5, r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8006476:	e9d7 2300 	ldrd	r2, r3, [r7]
 800647a:	2b00      	cmp	r3, #0
 800647c:	da01      	bge.n	8006482 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 800647e:	2300      	movs	r3, #0
 8006480:	e00e      	b.n	80064a0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x34>
  return value <= TIn(numeric_limits<TOut>::highest());
 8006482:	f000 f87c 	bl	800657e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8006486:	4603      	mov	r3, r0
 8006488:	2200      	movs	r2, #0
 800648a:	461c      	mov	r4, r3
 800648c:	4615      	mov	r5, r2
 800648e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006492:	4294      	cmp	r4, r2
 8006494:	eb75 0303 	sbcs.w	r3, r5, r3
 8006498:	bfac      	ite	ge
 800649a:	2301      	movge	r3, #1
 800649c:	2300      	movlt	r3, #0
 800649e:	b2db      	uxtb	r3, r3
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bdb0      	pop	{r4, r5, r7, pc}

080064a8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>:
  T convertTo() const {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
    switch (type_) {
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d82e      	bhi.n	8006518 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x70>
 80064ba:	a201      	add	r2, pc, #4	@ (adr r2, 80064c0 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x18>)
 80064bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c0:	080064d1 	.word	0x080064d1
 80064c4:	080064e3 	.word	0x080064e3
 80064c8:	080064f5 	.word	0x080064f5
 80064cc:	08006507 	.word	0x08006507
        return convertNumber<T>(value_.asFloat);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80064d6:	eeb0 0a67 	vmov.f32	s0, s15
 80064da:	f7ff fe04 	bl	80060e6 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 80064de:	4603      	mov	r3, r0
 80064e0:	e01b      	b.n	800651a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80064e8:	4610      	mov	r0, r2
 80064ea:	4619      	mov	r1, r3
 80064ec:	f7ff fdd4 	bl	8006098 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 80064f0:	4603      	mov	r3, r0
 80064f2:	e012      	b.n	800651a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80064fa:	4610      	mov	r0, r2
 80064fc:	4619      	mov	r1, r3
 80064fe:	f7ff fdb8 	bl	8006072 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 8006502:	4603      	mov	r3, r0
 8006504:	e009      	b.n	800651a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	ed93 7b02 	vldr	d7, [r3, #8]
 800650c:	eeb0 0b47 	vmov.f64	d0, d7
 8006510:	f7ff fe01 	bl	8006116 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 8006514:	4603      	mov	r3, r0
 8006516:	e000      	b.n	800651a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return T();
 8006518:	2300      	movs	r3, #0
  }
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop

08006524 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>:
template <typename T, typename Enable = void>
struct numeric_limits;

template <typename T>
struct numeric_limits<T, enable_if_t<is_unsigned<T>::value>> {
  static constexpr T lowest() {
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
    return 0;
 8006528:	2300      	movs	r3, #0
  }
 800652a:	4618      	mov	r0, r3
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 800653e:	f7ff fff1 	bl	8006524 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 8006542:	ee07 0a90 	vmov	s15, r0
 8006546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654a:	ed97 7a01 	vldr	s14, [r7, #4]
 800654e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006556:	db0d      	blt.n	8006574 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 8006558:	2000      	movs	r0, #0
 800655a:	f000 fc63 	bl	8006e24 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>
 800655e:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 8006562:	edd7 7a01 	vldr	s15, [r7, #4]
 8006566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800656a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800656e:	d801      	bhi.n	8006574 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 8006570:	2301      	movs	r3, #1
 8006572:	e000      	b.n	8006576 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>:
  static constexpr T highest() {
 800657e:	b480      	push	{r7}
 8006580:	af00      	add	r7, sp, #0
    return T(-1);
 8006582:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8006586:	4618      	mov	r0, r3
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 800659a:	f7ff ffc3 	bl	8006524 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 800659e:	ee07 0a90 	vmov	s15, r0
 80065a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80065a6:	ed97 6b00 	vldr	d6, [r7]
 80065aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80065ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b2:	db0e      	blt.n	80065d2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 80065b4:	f7ff ffe3 	bl	800657e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 80065b8:	ee07 0a90 	vmov	s15, r0
 80065bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 80065c0:	ed97 6b00 	vldr	d6, [r7]
 80065c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80065c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065cc:	d801      	bhi.n	80065d2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>:

  VariantData* getData() const {
 80065dc:	b590      	push	{r4, r7, lr}
 80065de:	b085      	sub	sp, #20
 80065e0:	af02      	add	r7, sp, #8
 80065e2:	6078      	str	r0, [r7, #4]
    return VariantData::getMember(
        VariantAttorney::getData(upstream_), key_,
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fc2b 	bl	8006e44 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>
 80065ee:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff fc7d 	bl	8005ef4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 80065fa:	4602      	mov	r2, r0
    return VariantData::getMember(
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	9200      	str	r2, [sp, #0]
 8006600:	3304      	adds	r3, #4
 8006602:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006604:	4620      	mov	r0, r4
 8006606:	f000 fc29 	bl	8006e5c <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 800660a:	4603      	mov	r3, r0
  }
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	bd90      	pop	{r4, r7, pc}

08006614 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4618      	mov	r0, r3
 8006622:	f7ff fc67 	bl	8005ef4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8006626:	4603      	mov	r3, r0
  }
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>:
  DeserializationError::Code skipSpacesAndComments() {
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
      switch (current()) {
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f82f 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d013      	beq.n	800666c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x3c>
 8006644:	2b00      	cmp	r3, #0
 8006646:	db1d      	blt.n	8006684 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8006648:	2b20      	cmp	r3, #32
 800664a:	dc1b      	bgt.n	8006684 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 800664c:	2b09      	cmp	r3, #9
 800664e:	db19      	blt.n	8006684 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8006650:	3b09      	subs	r3, #9
 8006652:	4a11      	ldr	r2, [pc, #68]	@ (8006698 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x68>)
 8006654:	fa22 f303 	lsr.w	r3, r2, r3
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	bf14      	ite	ne
 8006660:	2301      	movne	r3, #1
 8006662:	2300      	moveq	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d108      	bne.n	800667c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x4c>
 800666a:	e00b      	b.n	8006684 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
          return foundSomething_ ? DeserializationError::IncompleteInput
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	7b1b      	ldrb	r3, [r3, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x48>
 8006674:	2302      	movs	r3, #2
                                 : DeserializationError::EmptyInput;
 8006676:	e00b      	b.n	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          return foundSomething_ ? DeserializationError::IncompleteInput
 8006678:	2301      	movs	r3, #1
                                 : DeserializationError::EmptyInput;
 800667a:	e009      	b.n	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          move();
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fc06 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          continue;
 8006682:	e004      	b.n	800668e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x5e>
          foundSomething_ = true;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	731a      	strb	r2, [r3, #12]
          return DeserializationError::Ok;
 800668a:	2300      	movs	r3, #0
 800668c:	e000      	b.n	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
      switch (current()) {
 800668e:	e7d3      	b.n	8006638 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x8>
  }
 8006690:	4618      	mov	r0, r3
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	00800013 	.word	0x00800013

0800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>:
  char current() {
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
    return latch_.current();
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	3310      	adds	r3, #16
 80066a8:	60fb      	str	r3, [r7, #12]

  FORCE_INLINE char current() {
    if (!loaded_) {
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	795b      	ldrb	r3, [r3, #5]
 80066ae:	f083 0301 	eor.w	r3, r3, #1
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv+0x22>
      load();
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 ff1a 	bl	80074f2 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>
    }
    return current_;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	791b      	ldrb	r3, [r3, #4]
  }
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseArray(
 80066ca:	b590      	push	{r4, r7, lr}
 80066cc:	b089      	sub	sp, #36	@ 0x24
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	713a      	strb	r2, [r7, #4]
 80066d6:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 80066d8:	463b      	mov	r3, r7
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fd fa03 	bl	8003ae6 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 80066e6:	2305      	movs	r3, #5
 80066e8:	e071      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    move();
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f000 fbcf 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7ff ff9d 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80066f6:	4603      	mov	r3, r0
 80066f8:	77fb      	strb	r3, [r7, #31]
    if (err)
 80066fa:	7ffb      	ldrb	r3, [r7, #31]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x3a>
      return err;
 8006700:	7ffb      	ldrb	r3, [r7, #31]
 8006702:	e064      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    if (eat(']'))
 8006704:	215d      	movs	r1, #93	@ 0x5d
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 fbce 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>
      return DeserializationError::Ok;
 8006712:	2300      	movs	r3, #0
 8006714:	e05b      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    TFilter elementFilter = filter[0UL];
 8006716:	2300      	movs	r3, #0
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	f107 0214 	add.w	r2, r7, #20
 800671e:	1d3b      	adds	r3, r7, #4
 8006720:	4611      	mov	r1, r2
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fbdd 	bl	8006ee2 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>
      if (elementFilter.allow()) {
 8006728:	f107 0310 	add.w	r3, r7, #16
 800672c:	4618      	mov	r0, r3
 800672e:	f7fd f97d 	bl	8003a2c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d01c      	beq.n	8006772 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xa8>
        VariantData* value = array.addElement(resources_);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	4619      	mov	r1, r3
 800673e:	68b8      	ldr	r0, [r7, #8]
 8006740:	f7fc fd3f 	bl	80031c2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 8006744:	61b8      	str	r0, [r7, #24]
        if (!value)
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
          return DeserializationError::NoMemory;
 800674c:	2304      	movs	r3, #4
 800674e:	e03e      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = parseVariant(*value, elementFilter, nestingLimit.decrement());
 8006750:	463b      	mov	r3, r7
 8006752:	4618      	mov	r0, r3
 8006754:	f7fd f9b4 	bl	8003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8006758:	4603      	mov	r3, r0
 800675a:	4622      	mov	r2, r4
 800675c:	69b9      	ldr	r1, [r7, #24]
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f7ff fd26 	bl	80061b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8006764:	4603      	mov	r3, r0
 8006766:	77fb      	strb	r3, [r7, #31]
        if (err)
 8006768:	7ffb      	ldrb	r3, [r7, #31]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d011      	beq.n	8006792 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 800676e:	7ffb      	ldrb	r3, [r7, #31]
 8006770:	e02d      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = skipVariant(nestingLimit.decrement());
 8006772:	463b      	mov	r3, r7
 8006774:	4618      	mov	r0, r3
 8006776:	f7fd f9a3 	bl	8003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800677a:	4603      	mov	r3, r0
 800677c:	4619      	mov	r1, r3
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 fbbc 	bl	8006efc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8006784:	4603      	mov	r3, r0
 8006786:	77fb      	strb	r3, [r7, #31]
        if (err)
 8006788:	7ffb      	ldrb	r3, [r7, #31]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 800678e:	7ffb      	ldrb	r3, [r7, #31]
 8006790:	e01d      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      err = skipSpacesAndComments();
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7ff ff4c 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006798:	4603      	mov	r3, r0
 800679a:	77fb      	strb	r3, [r7, #31]
      if (err)
 800679c:	7ffb      	ldrb	r3, [r7, #31]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xdc>
        return err;
 80067a2:	7ffb      	ldrb	r3, [r7, #31]
 80067a4:	e013      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (eat(']'))
 80067a6:	215d      	movs	r1, #93	@ 0x5d
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 fb7d 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xee>
        return DeserializationError::Ok;
 80067b4:	2300      	movs	r3, #0
 80067b6:	e00a      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (!eat(','))
 80067b8:	212c      	movs	r1, #44	@ 0x2c
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 fb74 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f083 0301 	eor.w	r3, r3, #1
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0ad      	beq.n	8006728 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x5e>
        return DeserializationError::InvalidInput;
 80067cc:	2303      	movs	r3, #3
  }
 80067ce:	4618      	mov	r0, r3
 80067d0:	3724      	adds	r7, #36	@ 0x24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd90      	pop	{r4, r7, pc}

080067d6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipArray(
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 80067e0:	463b      	mov	r3, r7
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fd f97f 	bl	8003ae6 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 80067ee:	2305      	movs	r3, #5
 80067f0:	e030      	b.n	8006854 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
    move();
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fb4b 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      err = skipVariant(nestingLimit.decrement());
 80067f8:	463b      	mov	r3, r7
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fd f960 	bl	8003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8006800:	4603      	mov	r3, r0
 8006802:	4619      	mov	r1, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fb79 	bl	8006efc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 800680a:	4603      	mov	r3, r0
 800680c:	73fb      	strb	r3, [r7, #15]
      if (err)
 800680e:	7bfb      	ldrb	r3, [r7, #15]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x42>
        return err;
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	e01d      	b.n	8006854 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      err = skipSpacesAndComments();
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff ff09 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800681e:	4603      	mov	r3, r0
 8006820:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006822:	7bfb      	ldrb	r3, [r7, #15]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x56>
        return err;
 8006828:	7bfb      	ldrb	r3, [r7, #15]
 800682a:	e013      	b.n	8006854 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (eat(']'))
 800682c:	215d      	movs	r1, #93	@ 0x5d
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fb3a 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x68>
        return DeserializationError::Ok;
 800683a:	2300      	movs	r3, #0
 800683c:	e00a      	b.n	8006854 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (!eat(','))
 800683e:	212c      	movs	r1, #44	@ 0x2c
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fb31 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006846:	4603      	mov	r3, r0
 8006848:	f083 0301 	eor.w	r3, r3, #1
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d0d2      	beq.n	80067f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x22>
        return DeserializationError::InvalidInput;
 8006852:	2303      	movs	r3, #3
  }
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseObject(
 800685c:	b590      	push	{r4, r7, lr}
 800685e:	b091      	sub	sp, #68	@ 0x44
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	713a      	strb	r2, [r7, #4]
 8006868:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 800686a:	463b      	mov	r3, r7
 800686c:	4618      	mov	r0, r3
 800686e:	f7fd f93a 	bl	8003ae6 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 8006878:	2305      	movs	r3, #5
 800687a:	e0d7      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    move();
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 fb06 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f7ff fed4 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006888:	4603      	mov	r3, r0
 800688a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (err)
 800688e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x40>
      return err;
 8006896:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800689a:	e0c7      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    if (eat('}'))
 800689c:	217d      	movs	r1, #125	@ 0x7d
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f000 fb02 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
      return DeserializationError::Ok;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e0be      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = parseKey();
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 fbba 	bl	8007028 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>
 80068b4:	4603      	mov	r3, r0
 80068b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 80068ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x6c>
        return err;
 80068c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80068c6:	e0b1      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f7ff feb1 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80068ce:	4603      	mov	r3, r0
 80068d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 80068d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
        return err;
 80068dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80068e0:	e0a4      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(':'))
 80068e2:	213a      	movs	r1, #58	@ 0x3a
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 fadf 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80068ea:	4603      	mov	r3, r0
 80068ec:	f083 0301 	eor.w	r3, r3, #1
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x9e>
        return DeserializationError::InvalidInput;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e098      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      JsonString key = stringBuilder_.str();
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	f107 0314 	add.w	r3, r7, #20
 8006900:	4611      	mov	r1, r2
 8006902:	4618      	mov	r0, r3
 8006904:	f7fc ff92 	bl	800382c <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>
      TFilter memberFilter = filter[key];
 8006908:	f107 0214 	add.w	r2, r7, #20
 800690c:	1d3b      	adds	r3, r7, #4
 800690e:	4611      	mov	r1, r2
 8006910:	4618      	mov	r0, r3
 8006912:	f000 fba9 	bl	8007068 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>
      if (memberFilter.allow()) {
 8006916:	f107 0310 	add.w	r3, r7, #16
 800691a:	4618      	mov	r0, r3
 800691c:	f7fd f886 	bl	8003a2c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d040      	beq.n	80069a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x14c>
        auto member = object.getMember(adaptString(key), resources_);
 8006926:	f107 0320 	add.w	r3, r7, #32
 800692a:	f107 0214 	add.w	r2, r7, #20
 800692e:	4611      	mov	r1, r2
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe f9c0 	bl	8004cb6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	f107 0320 	add.w	r3, r7, #32
 8006940:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006942:	68b8      	ldr	r0, [r7, #8]
 8006944:	f7fe ff21 	bl	800578a <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 8006948:	6378      	str	r0, [r7, #52]	@ 0x34
        if (!member) {
 800694a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800694c:	2b00      	cmp	r3, #0
 800694e:	d111      	bne.n	8006974 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x118>
          auto savedKey = stringBuilder_.save();
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4618      	mov	r0, r3
 8006954:	f7fc fee6 	bl	8003724 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 8006958:	62f8      	str	r0, [r7, #44]	@ 0x2c
          member = object.addMember(savedKey, resources_);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	461a      	mov	r2, r3
 8006960:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006962:	68b8      	ldr	r0, [r7, #8]
 8006964:	f000 fb8c 	bl	8007080 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 8006968:	6378      	str	r0, [r7, #52]	@ 0x34
          if (!member)
 800696a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800696c:	2b00      	cmp	r3, #0
 800696e:	d107      	bne.n	8006980 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
            return DeserializationError::NoMemory;
 8006970:	2304      	movs	r3, #4
 8006972:	e05b      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
          member->clear(resources_);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	4619      	mov	r1, r3
 800697a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800697c:	f7fc ffd6 	bl	800392c <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
        err = parseVariant(*member, memberFilter, nestingLimit.decrement());
 8006980:	463b      	mov	r3, r7
 8006982:	4618      	mov	r0, r3
 8006984:	f7fd f89c 	bl	8003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8006988:	4603      	mov	r3, r0
 800698a:	4622      	mov	r2, r4
 800698c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f7ff fc0e 	bl	80061b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8006994:	4603      	mov	r3, r0
 8006996:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 800699a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d015      	beq.n	80069ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 80069a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069a6:	e041      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
        err = skipVariant(nestingLimit.decrement());
 80069a8:	463b      	mov	r3, r7
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fd f888 	bl	8003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 80069b0:	4603      	mov	r3, r0
 80069b2:	4619      	mov	r1, r3
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 faa1 	bl	8006efc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 80069ba:	4603      	mov	r3, r0
 80069bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 80069c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 80069c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069cc:	e02e      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f7ff fe2e 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 80069da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
        return err;
 80069e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069e6:	e021      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (eat('}'))
 80069e8:	217d      	movs	r1, #125	@ 0x7d
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 fa5c 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x19e>
        return DeserializationError::Ok;
 80069f6:	2300      	movs	r3, #0
 80069f8:	e018      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(','))
 80069fa:	212c      	movs	r1, #44	@ 0x2c
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 fa53 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006a02:	4603      	mov	r3, r0
 8006a04:	f083 0301 	eor.w	r3, r3, #1
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1b6>
        return DeserializationError::InvalidInput;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e00c      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f7ff fe0c 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8006a1e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f43f af43 	beq.w	80068ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
        return err;
 8006a28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
  }
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	373c      	adds	r7, #60	@ 0x3c
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd90      	pop	{r4, r7, pc}

08006a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipObject(
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 8006a3e:	463b      	mov	r3, r7
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fd f850 	bl	8003ae6 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 8006a4c:	2305      	movs	r3, #5
 8006a4e:	e06d      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    move();
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fa1c 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7ff fdea 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73fb      	strb	r3, [r7, #15]
    if (err)
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x36>
      return err;
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
 8006a68:	e060      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    if (eat('}'))
 8006a6a:	217d      	movs	r1, #125	@ 0x7d
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fa1b 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
      return DeserializationError::Ok;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e057      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipKey();
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fb54 	bl	800712a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>
 8006a82:	4603      	mov	r3, r0
 8006a84:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x5c>
        return err;
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
 8006a8e:	e04d      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7ff fdcd 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006a96:	4603      	mov	r3, r0
 8006a98:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x70>
        return err;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	e043      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(':'))
 8006aa4:	213a      	movs	r1, #58	@ 0x3a
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f9fe 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006aac:	4603      	mov	r3, r0
 8006aae:	f083 0301 	eor.w	r3, r3, #1
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x88>
        return DeserializationError::InvalidInput;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e037      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipVariant(nestingLimit.decrement());
 8006abc:	463b      	mov	r3, r7
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fc fffe 	bl	8003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fa17 	bl	8006efc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xa8>
        return err;
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	e027      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff fda7 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xbc>
        return err;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	e01d      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (eat('}'))
 8006af0:	217d      	movs	r1, #125	@ 0x7d
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f9d8 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xce>
        return DeserializationError::Ok;
 8006afe:	2300      	movs	r3, #0
 8006b00:	e014      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(','))
 8006b02:	212c      	movs	r1, #44	@ 0x2c
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f9cf 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	f083 0301 	eor.w	r3, r3, #1
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xe6>
        return DeserializationError::InvalidInput;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e008      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff fd88 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006b20:	4603      	mov	r3, r0
 8006b22:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0a8      	beq.n	8006a7c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
        return err;
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
  }
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>:
  DeserializationError::Code parseStringValue(VariantData& variant) {
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
    stringBuilder_.startString();
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fc fdd7 	bl	80036f4 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    err = parseQuotedString();
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fb0b 	bl	8007162 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	73fb      	strb	r3, [r7, #15]
    if (err)
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x26>
      return err;
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	e009      	b.n	8006b6e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x3a>
    variant.setOwnedString(stringBuilder_.save());
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fc fde1 	bl	8003724 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 8006b62:	4603      	mov	r3, r0
 8006b64:	4619      	mov	r1, r3
 8006b66:	6838      	ldr	r0, [r7, #0]
 8006b68:	f7fc f83f 	bl	8002bea <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return DeserializationError::Ok;
 8006b6c:	2300      	movs	r3, #0
  }
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>:
  DeserializationError::Code skipQuotedString() {
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
    const char stopChar = current();
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7ff fd8c 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006b84:	4603      	mov	r3, r0
 8006b86:	73fb      	strb	r3, [r7, #15]
    move();
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f980 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff fd84 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006b94:	4603      	mov	r3, r0
 8006b96:	73bb      	strb	r3, [r7, #14]
      move();
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f978 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 8006b9e:	7bba      	ldrb	r2, [r7, #14]
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d016      	beq.n	8006bd4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x5e>
      if (c == '\0')
 8006ba6:	7bbb      	ldrb	r3, [r7, #14]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x3a>
        return DeserializationError::IncompleteInput;
 8006bac:	2302      	movs	r3, #2
 8006bae:	e013      	b.n	8006bd8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x62>
      if (c == '\\') {
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	2b5c      	cmp	r3, #92	@ 0x5c
 8006bb4:	d1eb      	bne.n	8006b8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        if (current() != '\0')
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7ff fd70 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bf14      	ite	ne
 8006bc2:	2301      	movne	r3, #1
 8006bc4:	2300      	moveq	r3, #0
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0e0      	beq.n	8006b8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
          move();
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f95e 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (;;) {
 8006bd2:	e7dc      	b.n	8006b8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        break;
 8006bd4:	bf00      	nop
    return DeserializationError::Ok;
 8006bd6:	2300      	movs	r3, #0
  }
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>:
  DeserializationError::Code skipKeyword(const char* s) {
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
    while (*s) {
 8006bea:	e016      	b.n	8006c1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x3a>
      char c = current();
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7ff fd55 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	73fb      	strb	r3, [r7, #15]
      if (c == '\0')
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x20>
        return DeserializationError::IncompleteInput;
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	e011      	b.n	8006c24 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      if (*s != c)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	7bfa      	ldrb	r2, [r7, #15]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d001      	beq.n	8006c0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x2e>
        return DeserializationError::InvalidInput;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e00a      	b.n	8006c24 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      ++s;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	3301      	adds	r3, #1
 8006c12:	603b      	str	r3, [r7, #0]
      move();
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f93a 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    while (*s) {
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e4      	bne.n	8006bec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0xc>
    return DeserializationError::Ok;
 8006c22:	2300      	movs	r3, #0
  }
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>:
  DeserializationError::Code parseNumericValue(VariantData& result) {
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08a      	sub	sp, #40	@ 0x28
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	77fb      	strb	r3, [r7, #31]
    char c = current();
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7ff fd2e 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006c40:	4603      	mov	r3, r0
 8006c42:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 8006c44:	e00f      	b.n	8006c66 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x3a>
      move();
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f921 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      buffer_[n++] = c;
 8006c4c:	7fba      	ldrb	r2, [r7, #30]
 8006c4e:	7ffb      	ldrb	r3, [r7, #31]
 8006c50:	1c59      	adds	r1, r3, #1
 8006c52:	77f9      	strb	r1, [r7, #31]
 8006c54:	4619      	mov	r1, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	440b      	add	r3, r1
 8006c5a:	771a      	strb	r2, [r3, #28]
      c = current();
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff fd1d 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006c62:	4603      	mov	r3, r0
 8006c64:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 8006c66:	7fbb      	ldrb	r3, [r7, #30]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 fafb 	bl	8007264 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 8006c74:	7ffb      	ldrb	r3, [r7, #31]
 8006c76:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c78:	d801      	bhi.n	8006c7e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e000      	b.n	8006c80 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x54>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e0      	bne.n	8006c46 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x1a>
    buffer_[n] = 0;
 8006c84:	7ffb      	ldrb	r3, [r7, #31]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	4413      	add	r3, r2
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	771a      	strb	r2, [r3, #28]
    auto number = parseNumber(buffer_);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f103 021c 	add.w	r2, r3, #28
 8006c94:	f107 0308 	add.w	r3, r7, #8
 8006c98:	4611      	mov	r1, r2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fd f8e0 	bl	8003e60 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
    switch (number.type()) {
 8006ca0:	f107 0308 	add.w	r3, r7, #8
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fd f894 	bl	8003dd2 <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>
 8006caa:	4603      	mov	r3, r0
 8006cac:	3b01      	subs	r3, #1
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d85e      	bhi.n	8006d70 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x144>
 8006cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x8c>)
 8006cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb8:	08006d19 	.word	0x08006d19
 8006cbc:	08006cf1 	.word	0x08006cf1
 8006cc0:	08006cc9 	.word	0x08006cc9
 8006cc4:	08006d45 	.word	0x08006d45
        if (result.setInteger(number.asUnsignedInteger(), resources_))
 8006cc8:	f107 0308 	add.w	r3, r7, #8
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fd f89a 	bl	8003e06 <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	6989      	ldr	r1, [r1, #24]
 8006cda:	9100      	str	r1, [sp, #0]
 8006cdc:	6838      	ldr	r0, [r7, #0]
 8006cde:	f000 fae5 	bl	80072ac <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xc0>
          return DeserializationError::Ok;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	e042      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8006cec:	2304      	movs	r3, #4
 8006cee:	e040      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setInteger(number.asSignedInteger(), resources_))
 8006cf0:	f107 0308 	add.w	r3, r7, #8
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fd f878 	bl	8003dea <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	6989      	ldr	r1, [r1, #24]
 8006d02:	9100      	str	r1, [sp, #0]
 8006d04:	6838      	ldr	r0, [r7, #0]
 8006d06:	f000 fb13 	bl	8007330 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xe8>
          return DeserializationError::Ok;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e02e      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8006d14:	2304      	movs	r3, #4
 8006d16:	e02c      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asFloat(), resources_))
 8006d18:	f107 0308 	add.w	r3, r7, #8
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fd f880 	bl	8003e22 <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>
 8006d22:	eef0 7a40 	vmov.f32	s15, s0
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8006d30:	6838      	ldr	r0, [r7, #0]
 8006d32:	f000 fb3f 	bl	80073b4 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x114>
          return DeserializationError::Ok;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e018      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8006d40:	2304      	movs	r3, #4
 8006d42:	e016      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asDouble(), resources_))
 8006d44:	f107 0308 	add.w	r3, r7, #8
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fd f879 	bl	8003e40 <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>
 8006d4e:	eeb0 7b40 	vmov.f64	d7, d0
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	4619      	mov	r1, r3
 8006d58:	eeb0 0b47 	vmov.f64	d0, d7
 8006d5c:	6838      	ldr	r0, [r7, #0]
 8006d5e:	f000 fb3d 	bl	80073dc <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x140>
          return DeserializationError::Ok;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	e002      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8006d6c:	2304      	movs	r3, #4
 8006d6e:	e000      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        return DeserializationError::InvalidInput;
 8006d70:	2303      	movs	r3, #3
  }
 8006d72:	4618      	mov	r0, r3
 8006d74:	3720      	adds	r7, #32
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop

08006d7c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>:
  DeserializationError::Code skipNumericValue() {
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
    char c = current();
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff fc89 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 8006d8e:	e007      	b.n	8006da0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x24>
      move();
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f87c 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff fc80 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 fa5e 	bl	8007264 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1f0      	bne.n	8006d90 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x14>
    return DeserializationError::Ok;
 8006dae:	2300      	movs	r3, #0
  }
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7fc f990 	bl	80030e6 <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>
 8006dc6:	4603      	mov	r3, r0
  }
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>:
  static T forge(uint32_t bits) {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
    return alias_cast<T>(bits);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fb4c 	bl	8007476 <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>
 8006dde:	eef0 7a40 	vmov.f32	s15, s0
  }
 8006de2:	eeb0 0a67 	vmov.f32	s0, s15
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 8006dec:	b590      	push	{r4, r7, lr}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af02      	add	r7, sp, #8
 8006df2:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3304      	adds	r3, #4
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 fb4c 	bl	8007496 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>
 8006dfe:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3304      	adds	r3, #4
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff ffd7 	bl	8006db8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 8006e0a:	4602      	mov	r2, r0
    return VariantData::getMember(
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	9200      	str	r2, [sp, #0]
 8006e10:	330c      	adds	r3, #12
 8006e12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e14:	4620      	mov	r0, r4
 8006e16:	f000 f821 	bl	8006e5c <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 8006e1a:	4603      	mov	r3, r0
  }
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd90      	pop	{r4, r7, pc}

08006e24 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>:
  static T highest_for(
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
    return forge(0x4F7FFFFF);  // 4.29496704E9
 8006e2c:	4804      	ldr	r0, [pc, #16]	@ (8006e40 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE+0x1c>)
 8006e2e:	f7ff ffcf 	bl	8006dd0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 8006e32:	eef0 7a40 	vmov.f32	s15, s0
  }
 8006e36:	eeb0 0a67 	vmov.f32	s0, s15
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	4f7fffff 	.word	0x4f7fffff

08006e44 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
    return client.getData();
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7fc f9a0 	bl	8003192 <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>
 8006e52:	4603      	mov	r3, r0
  }
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>:
  static VariantData* getMember(const VariantData* var, TAdaptedString key,
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af02      	add	r7, sp, #8
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	4638      	mov	r0, r7
 8006e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!var)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x18>
      return 0;
 8006e70:	2300      	movs	r3, #0
 8006e72:	e008      	b.n	8006e86 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return var->getMember(key, resources);
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	463b      	mov	r3, r7
 8006e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e7e:	f000 fb16 	bl	80074ae <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>
 8006e82:	4603      	mov	r3, r0
 8006e84:	bf00      	nop
  }
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>:
  void move() {
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
    latch_.clear();
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3310      	adds	r3, #16
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fb1c 	bl	80074d8 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>
  }
 8006ea0:	bf00      	nop
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>:
  bool eat(char charToSkip) {
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	70fb      	strb	r3, [r7, #3]
    if (current() != charToSkip)
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7ff fbf1 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	78fb      	ldrb	r3, [r7, #3]
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	bf14      	ite	ne
 8006ec4:	2301      	movne	r3, #1
 8006ec6:	2300      	moveq	r3, #0
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x2a>
      return false;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	e003      	b.n	8006eda <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x32>
    move();
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7ff ffdb 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    return true;
 8006ed8:	2301      	movs	r3, #1
  }
 8006eda:	4618      	mov	r0, r3
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>:

  template <typename TKey>
  AllowAllFilter operator[](const TKey&) const {
 8006ee2:	b480      	push	{r7}
 8006ee4:	b083      	sub	sp, #12
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8006eec:	bf00      	nop
  }
 8006eee:	4618      	mov	r0, r3
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
	...

08006efc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipVariant(
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	7039      	strb	r1, [r7, #0]
    err = skipSpacesAndComments();
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff fb92 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]
    if (err)
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x1e>
      return err;
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
 8006f18:	e07c      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
    switch (current()) {
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff fbbe 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b7b      	cmp	r3, #123	@ 0x7b
 8006f24:	dc71      	bgt.n	800700a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8006f26:	2b5b      	cmp	r3, #91	@ 0x5b
 8006f28:	da04      	bge.n	8006f34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x38>
 8006f2a:	2b22      	cmp	r3, #34	@ 0x22
 8006f2c:	d056      	beq.n	8006fdc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 8006f2e:	2b27      	cmp	r3, #39	@ 0x27
 8006f30:	d054      	beq.n	8006fdc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 8006f32:	e06a      	b.n	800700a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8006f34:	3b5b      	subs	r3, #91	@ 0x5b
 8006f36:	2b20      	cmp	r3, #32
 8006f38:	d867      	bhi.n	800700a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8006f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f40 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x44>)
 8006f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f40:	08006fc5 	.word	0x08006fc5
 8006f44:	0800700b 	.word	0x0800700b
 8006f48:	0800700b 	.word	0x0800700b
 8006f4c:	0800700b 	.word	0x0800700b
 8006f50:	0800700b 	.word	0x0800700b
 8006f54:	0800700b 	.word	0x0800700b
 8006f58:	0800700b 	.word	0x0800700b
 8006f5c:	0800700b 	.word	0x0800700b
 8006f60:	0800700b 	.word	0x0800700b
 8006f64:	0800700b 	.word	0x0800700b
 8006f68:	0800700b 	.word	0x0800700b
 8006f6c:	08006ff3 	.word	0x08006ff3
 8006f70:	0800700b 	.word	0x0800700b
 8006f74:	0800700b 	.word	0x0800700b
 8006f78:	0800700b 	.word	0x0800700b
 8006f7c:	0800700b 	.word	0x0800700b
 8006f80:	0800700b 	.word	0x0800700b
 8006f84:	0800700b 	.word	0x0800700b
 8006f88:	0800700b 	.word	0x0800700b
 8006f8c:	08006fff 	.word	0x08006fff
 8006f90:	0800700b 	.word	0x0800700b
 8006f94:	0800700b 	.word	0x0800700b
 8006f98:	0800700b 	.word	0x0800700b
 8006f9c:	0800700b 	.word	0x0800700b
 8006fa0:	0800700b 	.word	0x0800700b
 8006fa4:	08006fe7 	.word	0x08006fe7
 8006fa8:	0800700b 	.word	0x0800700b
 8006fac:	0800700b 	.word	0x0800700b
 8006fb0:	0800700b 	.word	0x0800700b
 8006fb4:	0800700b 	.word	0x0800700b
 8006fb8:	0800700b 	.word	0x0800700b
 8006fbc:	0800700b 	.word	0x0800700b
 8006fc0:	08006fd1 	.word	0x08006fd1
        return skipArray(nestingLimit);
 8006fc4:	7839      	ldrb	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7ff fc05 	bl	80067d6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	e021      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipObject(nestingLimit);
 8006fd0:	7839      	ldrb	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff fd2e 	bl	8006a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	e01b      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipQuotedString();
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7ff fdca 	bl	8006b76 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	e016      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("true");
 8006fe6:	490d      	ldr	r1, [pc, #52]	@ (800701c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x120>)
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff fdf9 	bl	8006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	e010      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("false");
 8006ff2:	490b      	ldr	r1, [pc, #44]	@ (8007020 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x124>)
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff fdf3 	bl	8006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	e00a      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("null");
 8006ffe:	4909      	ldr	r1, [pc, #36]	@ (8007024 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x128>)
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff fded 	bl	8006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8007006:	4603      	mov	r3, r0
 8007008:	e004      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipNumericValue();
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7ff feb6 	bl	8006d7c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 8007010:	4603      	mov	r3, r0
 8007012:	bf00      	nop
  }
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	0801efac 	.word	0x0801efac
 8007020:	0801efb4 	.word	0x0801efb4
 8007024:	0801efbc 	.word	0x0801efbc

08007028 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>:
  DeserializationError::Code parseKey() {
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
    stringBuilder_.startString();
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4618      	mov	r0, r3
 8007034:	f7fc fb5e 	bl	80036f4 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    if (isQuote(current())) {
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff fb2f 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800703e:	4603      	mov	r3, r0
 8007040:	4618      	mov	r0, r3
 8007042:	f000 fa6c 	bl	800751e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d004      	beq.n	8007056 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x2e>
      return parseQuotedString();
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f888 	bl	8007162 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 8007052:	4603      	mov	r3, r0
 8007054:	e004      	b.n	8007060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x38>
      return parseNonQuotedString();
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fa75 	bl	8007546 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>
 800705c:	4603      	mov	r3, r0
 800705e:	bf00      	nop
  }
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>:
  AllowAllFilter operator[](const TKey&) const {
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8007072:	bf00      	nop
  }
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 8007080:	b580      	push	{r7, lr}
 8007082:	b08a      	sub	sp, #40	@ 0x28
 8007084:	af02      	add	r7, sp, #8
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 800708c:	f107 0318 	add.w	r3, r7, #24
 8007090:	6879      	ldr	r1, [r7, #4]
 8007092:	4618      	mov	r0, r3
 8007094:	f7fc f9de 	bl	8003454 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 8007098:	f107 0318 	add.w	r3, r7, #24
 800709c:	4618      	mov	r0, r3
 800709e:	f7fd fc7d 	bl	800499c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 80070a2:	4603      	mov	r3, r0
 80070a4:	f083 0301 	eor.w	r3, r3, #1
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x32>
    return nullptr;
 80070ae:	2300      	movs	r3, #0
 80070b0:	e037      	b.n	8007122 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  auto valueSlot = resources->allocVariant();
 80070b2:	f107 0310 	add.w	r3, r7, #16
 80070b6:	6879      	ldr	r1, [r7, #4]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fc f9cb 	bl	8003454 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 80070be:	f107 0310 	add.w	r3, r7, #16
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fd fc6a 	bl	800499c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 80070c8:	4603      	mov	r3, r0
 80070ca:	f083 0301 	eor.w	r3, r3, #1
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x58>
    return nullptr;
 80070d4:	2300      	movs	r3, #0
 80070d6:	e024      	b.n	8007122 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  if (!keySlot->setString(key, resources))
 80070d8:	f107 0318 	add.w	r3, r7, #24
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fd fc86 	bl	80049ee <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 80070e2:	4603      	mov	r3, r0
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	68b9      	ldr	r1, [r7, #8]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fb fd6f 	bl	8002bcc <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>
 80070ee:	4603      	mov	r3, r0
 80070f0:	f083 0301 	eor.w	r3, r3, #1
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x7e>
    return nullptr;
 80070fa:	2300      	movs	r3, #0
 80070fc:	e011      	b.n	8007122 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	f107 0218 	add.w	r2, r7, #24
 800710e:	ca06      	ldmia	r2, {r1, r2}
 8007110:	f7fc f919 	bl	8003346 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 8007114:	f107 0310 	add.w	r3, r7, #16
 8007118:	4618      	mov	r0, r3
 800711a:	f7fd fc50 	bl	80049be <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800711e:	4603      	mov	r3, r0
 8007120:	bf00      	nop
}
 8007122:	4618      	mov	r0, r3
 8007124:	3720      	adds	r7, #32
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>:
  DeserializationError::Code skipKey() {
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
    if (isQuote(current())) {
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff fab2 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007138:	4603      	mov	r3, r0
 800713a:	4618      	mov	r0, r3
 800713c:	f000 f9ef 	bl	800751e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d004      	beq.n	8007150 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x26>
      return skipQuotedString();
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff fd15 	bl	8006b76 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 800714c:	4603      	mov	r3, r0
 800714e:	e004      	b.n	800715a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x30>
      return skipNonQuotedString();
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fa31 	bl	80075b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>
 8007156:	4603      	mov	r3, r0
 8007158:	bf00      	nop
  }
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>:
  DeserializationError::Code parseQuotedString() {
 8007162:	b580      	push	{r7, lr}
 8007164:	b086      	sub	sp, #24
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
    Utf16::Codepoint codepoint;
 800716a:	f107 030c 	add.w	r3, r7, #12
 800716e:	4618      	mov	r0, r3
 8007170:	f7fc fd14 	bl	8003b9c <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>
    const char stopChar = current();
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7ff fa91 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800717a:	4603      	mov	r3, r0
 800717c:	75bb      	strb	r3, [r7, #22]
    move();
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7ff fe85 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7ff fa89 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800718a:	4603      	mov	r3, r0
 800718c:	75fb      	strb	r3, [r7, #23]
      move();
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7ff fe7d 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 8007194:	7dfa      	ldrb	r2, [r7, #23]
 8007196:	7dbb      	ldrb	r3, [r7, #22]
 8007198:	429a      	cmp	r2, r3
 800719a:	d051      	beq.n	8007240 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xde>
      if (c == '\0')
 800719c:	7dfb      	ldrb	r3, [r7, #23]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x44>
        return DeserializationError::IncompleteInput;
 80071a2:	2302      	movs	r3, #2
 80071a4:	e05a      	b.n	800725c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
      if (c == '\\') {
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	2b5c      	cmp	r3, #92	@ 0x5c
 80071aa:	d140      	bne.n	800722e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xcc>
        c = current();
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff fa75 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80071b2:	4603      	mov	r3, r0
 80071b4:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x5e>
          return DeserializationError::IncompleteInput;
 80071bc:	2302      	movs	r3, #2
 80071be:	e04d      	b.n	800725c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        if (c == 'u') {
 80071c0:	7dfb      	ldrb	r3, [r7, #23]
 80071c2:	2b75      	cmp	r3, #117	@ 0x75
 80071c4:	d125      	bne.n	8007212 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xb0>
          move();
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7ff fe61 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          err = parseHex4(codeunit);
 80071cc:	f107 030a 	add.w	r3, r7, #10
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fa0e 	bl	80075f4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>
 80071d8:	4603      	mov	r3, r0
 80071da:	757b      	strb	r3, [r7, #21]
          if (err)
 80071dc:	7d7b      	ldrb	r3, [r7, #21]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x84>
            return err;
 80071e2:	7d7b      	ldrb	r3, [r7, #21]
 80071e4:	e03a      	b.n	800725c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
          if (codepoint.append(codeunit))
 80071e6:	897a      	ldrh	r2, [r7, #10]
 80071e8:	f107 030c 	add.w	r3, r7, #12
 80071ec:	4611      	mov	r1, r2
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fc fce5 	bl	8003bbe <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d020      	beq.n	800723c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xda>
            Utf8::encodeCodepoint(codepoint.value(), stringBuilder_);
 80071fa:	f107 030c 	add.w	r3, r7, #12
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fc fd0f 	bl	8003c22 <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>
 8007204:	4602      	mov	r2, r0
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4619      	mov	r1, r3
 800720a:	4610      	mov	r0, r2
 800720c:	f000 fa2b 	bl	8007666 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>
 8007210:	e7b8      	b.n	8007184 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        c = EscapeSequence::unescapeChar(c);
 8007212:	7dfb      	ldrb	r3, [r7, #23]
 8007214:	4618      	mov	r0, r3
 8007216:	f7fc fa0c 	bl	8003632 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>
 800721a:	4603      	mov	r3, r0
 800721c:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 800721e:	7dfb      	ldrb	r3, [r7, #23]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xc6>
          return DeserializationError::InvalidInput;
 8007224:	2303      	movs	r3, #3
 8007226:	e019      	b.n	800725c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        move();
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7ff fe30 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      stringBuilder_.append(c);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	7dfa      	ldrb	r2, [r7, #23]
 8007232:	4611      	mov	r1, r2
 8007234:	4618      	mov	r0, r3
 8007236:	f7fc fab6 	bl	80037a6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
 800723a:	e7a3      	b.n	8007184 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
          continue;
 800723c:	bf00      	nop
    for (;;) {
 800723e:	e7a1      	b.n	8007184 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        break;
 8007240:	bf00      	nop
    if (!stringBuilder_.isValid())
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4618      	mov	r0, r3
 8007246:	f7fc fae0 	bl	800380a <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 800724a:	4603      	mov	r3, r0
 800724c:	f083 0301 	eor.w	r3, r3, #1
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xf8>
      return DeserializationError::NoMemory;
 8007256:	2304      	movs	r3, #4
 8007258:	e000      	b.n	800725c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
    return DeserializationError::Ok;
 800725a:	2300      	movs	r3, #0
  }
 800725c:	4618      	mov	r0, r3
 800725e:	3718      	adds	r7, #24
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>:
  static inline bool canBeInNumber(char c) {
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	4603      	mov	r3, r0
 800726c:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 800726e:	79fb      	ldrb	r3, [r7, #7]
 8007270:	2239      	movs	r2, #57	@ 0x39
 8007272:	2130      	movs	r1, #48	@ 0x30
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fa7a 	bl	800776e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800727a:	4603      	mov	r3, r0
           c == 'e' || c == 'E';
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10e      	bne.n	800729e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8007280:	79fb      	ldrb	r3, [r7, #7]
 8007282:	2b2b      	cmp	r3, #43	@ 0x2b
 8007284:	d00b      	beq.n	800729e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8007286:	79fb      	ldrb	r3, [r7, #7]
 8007288:	2b2d      	cmp	r3, #45	@ 0x2d
 800728a:	d008      	beq.n	800729e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007290:	d005      	beq.n	800729e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8007292:	79fb      	ldrb	r3, [r7, #7]
 8007294:	2b65      	cmp	r3, #101	@ 0x65
 8007296:	d002      	beq.n	800729e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
           c == 'e' || c == 'E';
 8007298:	79fb      	ldrb	r3, [r7, #7]
 800729a:	2b45      	cmp	r3, #69	@ 0x45
 800729c:	d101      	bne.n	80072a2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3e>
 800729e:	2301      	movs	r3, #1
 80072a0:	e000      	b.n	80072a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x40>
 80072a2:	2300      	movs	r3, #0
  }
 80072a4:	4618      	mov	r0, r3
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 80072ac:	b5b0      	push	{r4, r5, r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	e9c7 2300 	strd	r2, r3, [r7]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 80072b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072bc:	f7ff f8be 	bl	800643c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d006      	beq.n	80072d4 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Uint32;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	220a      	movs	r2, #10
 80072ca:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	e028      	b.n	8007326 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 80072d4:	f107 0310 	add.w	r3, r7, #16
 80072d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fc f93f 	bl	800355e <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 80072e0:	f107 0310 	add.w	r3, r7, #16
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 fa5c 	bl	80077a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 80072ea:	4603      	mov	r3, r0
 80072ec:	f083 0301 	eor.w	r3, r3, #1
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 80072f6:	2300      	movs	r3, #0
 80072f8:	e016      	b.n	8007328 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Uint64;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	221a      	movs	r2, #26
 80072fe:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8007300:	f107 0310 	add.w	r3, r7, #16
 8007304:	4618      	mov	r0, r3
 8007306:	f000 fa5d 	bl	80077c4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800730a:	4603      	mov	r3, r0
 800730c:	461a      	mov	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 8007312:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007316:	f107 0310 	add.w	r3, r7, #16
 800731a:	4618      	mov	r0, r3
 800731c:	f000 fa5e 	bl	80077dc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8007320:	4603      	mov	r3, r0
 8007322:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 8007326:	2301      	movs	r3, #1
}
 8007328:	4618      	mov	r0, r3
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bdb0      	pop	{r4, r5, r7, pc}

08007330 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
enable_if_t<is_signed<T>::value, bool> VariantData::setInteger(
 8007330:	b5b0      	push	{r4, r5, r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	e9c7 2300 	strd	r2, r3, [r7]
  if (canConvertNumber<int32_t>(value)) {
 800733c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007340:	f000 fa58 	bl	80077f4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d006      	beq.n	8007358 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Int32;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	220c      	movs	r2, #12
 800734e:	711a      	strb	r2, [r3, #4]
    content_.asInt32 = static_cast<int32_t>(value);
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	e028      	b.n	80073aa <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
    auto extension = resources->allocExtension();
 8007358:	f107 0310 	add.w	r3, r7, #16
 800735c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800735e:	4618      	mov	r0, r3
 8007360:	f7fc f8fd 	bl	800355e <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8007364:	f107 0310 	add.w	r3, r7, #16
 8007368:	4618      	mov	r0, r3
 800736a:	f000 fa1a 	bl	80077a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 800736e:	4603      	mov	r3, r0
 8007370:	f083 0301 	eor.w	r3, r3, #1
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 800737a:	2300      	movs	r3, #0
 800737c:	e016      	b.n	80073ac <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Int64;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	221c      	movs	r2, #28
 8007382:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8007384:	f107 0310 	add.w	r3, r7, #16
 8007388:	4618      	mov	r0, r3
 800738a:	f000 fa1b 	bl	80077c4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800738e:	4603      	mov	r3, r0
 8007390:	461a      	mov	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	801a      	strh	r2, [r3, #0]
    extension->asInt64 = value;
 8007396:	e9d7 4500 	ldrd	r4, r5, [r7]
 800739a:	f107 0310 	add.w	r3, r7, #16
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 fa1c 	bl	80077dc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 80073a4:	4603      	mov	r3, r0
 80073a6:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 80073aa:	2301      	movs	r3, #1
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bdb0      	pop	{r4, r5, r7, pc}

080073b4 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>:
  enable_if_t<sizeof(T) == 4, bool> setFloat(T value, ResourceManager*) {
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80073c0:	6079      	str	r1, [r7, #4]
    type_ = VariantType::Float;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	220e      	movs	r2, #14
 80073c6:	711a      	strb	r2, [r3, #4]
    content_.asFloat = value;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	601a      	str	r2, [r3, #0]
    return true;
 80073ce:	2301      	movs	r3, #1
  }
 80073d0:	4618      	mov	r0, r3
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>:
enable_if_t<sizeof(T) == 8, bool> VariantData::setFloat(
 80073dc:	b5b0      	push	{r4, r5, r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	ed87 0b00 	vstr	d0, [r7]
 80073e8:	60b9      	str	r1, [r7, #8]
  float valueAsFloat = static_cast<float>(value);
 80073ea:	ed97 7b00 	vldr	d7, [r7]
 80073ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80073f2:	edc7 7a07 	vstr	s15, [r7, #28]
  if (value == valueAsFloat) {
 80073f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80073fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80073fe:	ed97 6b00 	vldr	d6, [r7]
 8007402:	eeb4 6b47 	vcmp.f64	d6, d7
 8007406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800740a:	d106      	bne.n	800741a <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x3e>
    type_ = VariantType::Float;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	220e      	movs	r2, #14
 8007410:	711a      	strb	r2, [r3, #4]
    content_.asFloat = valueAsFloat;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	69fa      	ldr	r2, [r7, #28]
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	e028      	b.n	800746c <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x90>
    auto extension = resources->allocExtension();
 800741a:	f107 0314 	add.w	r3, r7, #20
 800741e:	68b9      	ldr	r1, [r7, #8]
 8007420:	4618      	mov	r0, r3
 8007422:	f7fc f89c 	bl	800355e <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8007426:	f107 0314 	add.w	r3, r7, #20
 800742a:	4618      	mov	r0, r3
 800742c:	f000 f9b9 	bl	80077a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8007430:	4603      	mov	r3, r0
 8007432:	f083 0301 	eor.w	r3, r3, #1
 8007436:	b2db      	uxtb	r3, r3
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x64>
      return false;
 800743c:	2300      	movs	r3, #0
 800743e:	e016      	b.n	800746e <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x92>
    type_ = VariantType::Double;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	221e      	movs	r2, #30
 8007444:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8007446:	f107 0314 	add.w	r3, r7, #20
 800744a:	4618      	mov	r0, r3
 800744c:	f000 f9ba 	bl	80077c4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8007450:	4603      	mov	r3, r0
 8007452:	461a      	mov	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	801a      	strh	r2, [r3, #0]
    extension->asDouble = value;
 8007458:	e9d7 4500 	ldrd	r4, r5, [r7]
 800745c:	f107 0314 	add.w	r3, r7, #20
 8007460:	4618      	mov	r0, r3
 8007462:	f000 f9bb 	bl	80077dc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8007466:	4603      	mov	r3, r0
 8007468:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 800746c:	2301      	movs	r3, #1
}
 800746e:	4618      	mov	r0, r3
 8007470:	3720      	adds	r7, #32
 8007472:	46bd      	mov	sp, r7
 8007474:	bdb0      	pop	{r4, r5, r7, pc}

08007476 <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>:
T alias_cast(F raw_data) {
 8007476:	b480      	push	{r7}
 8007478:	b085      	sub	sp, #20
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  ac.raw = raw_data;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	60fb      	str	r3, [r7, #12]
  return ac.data;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	ee07 3a90 	vmov	s15, r3
}
 8007488:	eeb0 0a67 	vmov.f32	s0, s15
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8007496:	b580      	push	{r7, lr}
 8007498:	b082      	sub	sp, #8
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
    return client.getData();
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7fb fe2d 	bl	80030fe <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>
 80074a4:	4603      	mov	r3, r0
  }
 80074a6:	4618      	mov	r0, r3
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>:
  VariantData* getMember(TAdaptedString key,
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b086      	sub	sp, #24
 80074b2:	af02      	add	r7, sp, #8
 80074b4:	60f8      	str	r0, [r7, #12]
 80074b6:	4638      	mov	r0, r7
 80074b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    return ObjectData::getMember(asObject(), key, resources);
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f7fb faf3 	bl	8002aa8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	463b      	mov	r3, r7
 80074c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074ca:	f7fd fe75 	bl	80051b8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>
 80074ce:	4603      	mov	r3, r0
  }
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>:
  void clear() {
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
    loaded_ = false;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	715a      	strb	r2, [r3, #5]
  }
 80074e6:	bf00      	nop
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>:
  }

 private:
  void load() {
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(!ended_);
    int c = reader_.read();
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 f99f 	bl	8007840 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>
 8007502:	60f8      	str	r0, [r7, #12]
#if ARDUINOJSON_DEBUG
    if (c <= 0)
      ended_ = true;
#endif
    current_ = static_cast<char>(c > 0 ? c : 0);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800750a:	b2da      	uxtb	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	711a      	strb	r2, [r3, #4]
    loaded_ = true;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	715a      	strb	r2, [r3, #5]
  }
 8007516:	bf00      	nop
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	4603      	mov	r3, r0
 8007526:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 8007528:	79fb      	ldrb	r3, [r7, #7]
 800752a:	2b27      	cmp	r3, #39	@ 0x27
 800752c:	d002      	beq.n	8007534 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x16>
 800752e:	79fb      	ldrb	r3, [r7, #7]
 8007530:	2b22      	cmp	r3, #34	@ 0x22
 8007532:	d101      	bne.n	8007538 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1a>
 8007534:	2301      	movs	r3, #1
 8007536:	e000      	b.n	800753a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1c>
 8007538:	2300      	movs	r3, #0
  }
 800753a:	4618      	mov	r0, r3
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>:
  DeserializationError::Code parseNonQuotedString() {
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
    char c = current();
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff f8a4 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007554:	4603      	mov	r3, r0
 8007556:	73fb      	strb	r3, [r7, #15]
    if (canBeInNonQuotedString(c)) {  // no quotes
 8007558:	7bfb      	ldrb	r3, [r7, #15]
 800755a:	4618      	mov	r0, r3
 800755c:	f000 f980 	bl	8007860 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d015      	beq.n	8007592 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x4c>
        move();
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff fc91 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
        stringBuilder_.append(c);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	7bfa      	ldrb	r2, [r7, #15]
 8007570:	4611      	mov	r1, r2
 8007572:	4618      	mov	r0, r3
 8007574:	f7fc f917 	bl	80037a6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
        c = current();
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7ff f88f 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800757e:	4603      	mov	r3, r0
 8007580:	73fb      	strb	r3, [r7, #15]
      } while (canBeInNonQuotedString(c));
 8007582:	7bfb      	ldrb	r3, [r7, #15]
 8007584:	4618      	mov	r0, r3
 8007586:	f000 f96b 	bl	8007860 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1ea      	bne.n	8007566 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x20>
 8007590:	e001      	b.n	8007596 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x50>
      return DeserializationError::InvalidInput;
 8007592:	2303      	movs	r3, #3
 8007594:	e00c      	b.n	80075b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    if (!stringBuilder_.isValid())
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4618      	mov	r0, r3
 800759a:	f7fc f936 	bl	800380a <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 800759e:	4603      	mov	r3, r0
 80075a0:	f083 0301 	eor.w	r3, r3, #1
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x68>
      return DeserializationError::NoMemory;
 80075aa:	2304      	movs	r3, #4
 80075ac:	e000      	b.n	80075b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    return DeserializationError::Ok;
 80075ae:	2300      	movs	r3, #0
  }
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>:
  DeserializationError::Code skipNonQuotedString() {
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
    char c = current();
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff f86b 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80075c6:	4603      	mov	r3, r0
 80075c8:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 80075ca:	e007      	b.n	80075dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x24>
      move();
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7ff fc5e 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff f862 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80075d8:	4603      	mov	r3, r0
 80075da:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 f93e 	bl	8007860 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1f0      	bne.n	80075cc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x14>
    return DeserializationError::Ok;
 80075ea:	2300      	movs	r3, #0
  }
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>:
  DeserializationError::Code parseHex4(uint16_t& result) {
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
    result = 0;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2200      	movs	r2, #0
 8007602:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; ++i) {
 8007604:	2300      	movs	r3, #0
 8007606:	73fb      	strb	r3, [r7, #15]
 8007608:	e025      	b.n	8007656 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x62>
      char digit = current();
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff f846 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007610:	4603      	mov	r3, r0
 8007612:	73bb      	strb	r3, [r7, #14]
      if (!digit)
 8007614:	7bbb      	ldrb	r3, [r7, #14]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x2a>
        return DeserializationError::IncompleteInput;
 800761a:	2302      	movs	r3, #2
 800761c:	e01f      	b.n	800765e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      uint8_t value = decodeHex(digit);
 800761e:	7bbb      	ldrb	r3, [r7, #14]
 8007620:	4618      	mov	r0, r3
 8007622:	f000 f944 	bl	80078ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>
 8007626:	4603      	mov	r3, r0
 8007628:	737b      	strb	r3, [r7, #13]
      if (value > 0x0F)
 800762a:	7b7b      	ldrb	r3, [r7, #13]
 800762c:	2b0f      	cmp	r3, #15
 800762e:	d901      	bls.n	8007634 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x40>
        return DeserializationError::InvalidInput;
 8007630:	2303      	movs	r3, #3
 8007632:	e014      	b.n	800765e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      result = uint16_t((result << 4) | value);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	b21a      	sxth	r2, r3
 800763c:	7b7b      	ldrb	r3, [r7, #13]
 800763e:	b21b      	sxth	r3, r3
 8007640:	4313      	orrs	r3, r2
 8007642:	b21b      	sxth	r3, r3
 8007644:	b29a      	uxth	r2, r3
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	801a      	strh	r2, [r3, #0]
      move();
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7ff fc1f 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (uint8_t i = 0; i < 4; ++i) {
 8007650:	7bfb      	ldrb	r3, [r7, #15]
 8007652:	3301      	adds	r3, #1
 8007654:	73fb      	strb	r3, [r7, #15]
 8007656:	7bfb      	ldrb	r3, [r7, #15]
 8007658:	2b03      	cmp	r3, #3
 800765a:	d9d6      	bls.n	800760a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x16>
    return DeserializationError::Ok;
 800765c:	2300      	movs	r3, #0
  }
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf8 {
template <typename TStringBuilder>
inline void encodeCodepoint(uint32_t codepoint32, TStringBuilder& str) {
 8007666:	b580      	push	{r7, lr}
 8007668:	b086      	sub	sp, #24
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	6039      	str	r1, [r7, #0]
  // this function was optimize for code size on AVR

  if (codepoint32 < 0x80) {
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b7f      	cmp	r3, #127	@ 0x7f
 8007674:	d806      	bhi.n	8007684 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x1e>
    str.append(char(codepoint32));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	4619      	mov	r1, r3
 800767c:	6838      	ldr	r0, [r7, #0]
 800767e:	f7fc f892 	bl	80037a6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>

    while (*(--p)) {
      str.append(*p);
    }
  }
}
 8007682:	e070      	b.n	8007766 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x100>
    char* p = buf;
 8007684:	f107 030c 	add.w	r3, r7, #12
 8007688:	617b      	str	r3, [r7, #20]
    *(p++) = 0;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	617a      	str	r2, [r7, #20]
 8007690:	2200      	movs	r2, #0
 8007692:	701a      	strb	r2, [r3, #0]
    *(p++) = char((codepoint32 | 0x80) & 0xBF);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	b2db      	uxtb	r3, r3
 8007698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800769c:	b2db      	uxtb	r3, r3
 800769e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80076a2:	b2d9      	uxtb	r1, r3
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	1c5a      	adds	r2, r3, #1
 80076a8:	617a      	str	r2, [r7, #20]
 80076aa:	460a      	mov	r2, r1
 80076ac:	701a      	strb	r2, [r3, #0]
    uint16_t codepoint16 = uint16_t(codepoint32 >> 6);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	099b      	lsrs	r3, r3, #6
 80076b2:	827b      	strh	r3, [r7, #18]
    if (codepoint16 < 0x20) {  // 0x800
 80076b4:	8a7b      	ldrh	r3, [r7, #18]
 80076b6:	2b1f      	cmp	r3, #31
 80076b8:	d80a      	bhi.n	80076d0 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x6a>
      *(p++) = char(codepoint16 | 0xC0);
 80076ba:	8a7b      	ldrh	r3, [r7, #18]
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80076c2:	b2d9      	uxtb	r1, r3
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	617a      	str	r2, [r7, #20]
 80076ca:	460a      	mov	r2, r1
 80076cc:	701a      	strb	r2, [r3, #0]
 80076ce:	e03e      	b.n	800774e <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      *(p++) = char((codepoint16 | 0x80) & 0xBF);
 80076d0:	8a7b      	ldrh	r3, [r7, #18]
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80076de:	b2d9      	uxtb	r1, r3
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	1c5a      	adds	r2, r3, #1
 80076e4:	617a      	str	r2, [r7, #20]
 80076e6:	460a      	mov	r2, r1
 80076e8:	701a      	strb	r2, [r3, #0]
      codepoint16 = uint16_t(codepoint16 >> 6);
 80076ea:	8a7b      	ldrh	r3, [r7, #18]
 80076ec:	099b      	lsrs	r3, r3, #6
 80076ee:	827b      	strh	r3, [r7, #18]
      if (codepoint16 < 0x10) {  // 0x10000
 80076f0:	8a7b      	ldrh	r3, [r7, #18]
 80076f2:	2b0f      	cmp	r3, #15
 80076f4:	d80a      	bhi.n	800770c <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xa6>
        *(p++) = char(codepoint16 | 0xE0);
 80076f6:	8a7b      	ldrh	r3, [r7, #18]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	f063 031f 	orn	r3, r3, #31
 80076fe:	b2d9      	uxtb	r1, r3
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	617a      	str	r2, [r7, #20]
 8007706:	460a      	mov	r2, r1
 8007708:	701a      	strb	r2, [r3, #0]
 800770a:	e020      	b.n	800774e <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
        *(p++) = char((codepoint16 | 0x80) & 0xBF);
 800770c:	8a7b      	ldrh	r3, [r7, #18]
 800770e:	b2db      	uxtb	r3, r3
 8007710:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007714:	b2db      	uxtb	r3, r3
 8007716:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800771a:	b2d9      	uxtb	r1, r3
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	1c5a      	adds	r2, r3, #1
 8007720:	617a      	str	r2, [r7, #20]
 8007722:	460a      	mov	r2, r1
 8007724:	701a      	strb	r2, [r3, #0]
        codepoint16 = uint16_t(codepoint16 >> 6);
 8007726:	8a7b      	ldrh	r3, [r7, #18]
 8007728:	099b      	lsrs	r3, r3, #6
 800772a:	827b      	strh	r3, [r7, #18]
        *(p++) = char(codepoint16 | 0xF0);
 800772c:	8a7b      	ldrh	r3, [r7, #18]
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f063 030f 	orn	r3, r3, #15
 8007734:	b2d9      	uxtb	r1, r3
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	617a      	str	r2, [r7, #20]
 800773c:	460a      	mov	r2, r1
 800773e:	701a      	strb	r2, [r3, #0]
    while (*(--p)) {
 8007740:	e005      	b.n	800774e <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      str.append(*p);
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	4619      	mov	r1, r3
 8007748:	6838      	ldr	r0, [r7, #0]
 800774a:	f7fc f82c 	bl	80037a6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
    while (*(--p)) {
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	3b01      	subs	r3, #1
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	bf14      	ite	ne
 800775c:	2301      	movne	r3, #1
 800775e:	2300      	moveq	r3, #0
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1ed      	bne.n	8007742 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xdc>
}
 8007766:	bf00      	nop
 8007768:	3718      	adds	r7, #24
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	4603      	mov	r3, r0
 8007776:	71fb      	strb	r3, [r7, #7]
 8007778:	460b      	mov	r3, r1
 800777a:	71bb      	strb	r3, [r7, #6]
 800777c:	4613      	mov	r3, r2
 800777e:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 8007780:	79ba      	ldrb	r2, [r7, #6]
 8007782:	79fb      	ldrb	r3, [r7, #7]
 8007784:	429a      	cmp	r2, r3
 8007786:	d805      	bhi.n	8007794 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 8007788:	79fa      	ldrb	r2, [r7, #7]
 800778a:	797b      	ldrb	r3, [r7, #5]
 800778c:	429a      	cmp	r2, r3
 800778e:	d801      	bhi.n	8007794 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 8007790:	2301      	movs	r3, #1
 8007792:	e000      	b.n	8007796 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x28>
 8007794:	2300      	movs	r3, #0
  }
 8007796:	4618      	mov	r0, r3
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>:
  explicit operator bool() const {
 80077a2:	b480      	push	{r7}
 80077a4:	b083      	sub	sp, #12
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	bf14      	ite	ne
 80077b2:	2301      	movne	r3, #1
 80077b4:	2300      	moveq	r3, #0
 80077b6:	b2db      	uxtb	r3, r3
  }
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>:
  SlotId id() const {
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
    return id_;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	889b      	ldrh	r3, [r3, #4]
  }
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>:
  T* operator->() const {
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
    return ptr_;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
  }
 80077e8:	4618      	mov	r0, r3
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80077f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80077f8:	b082      	sub	sp, #8
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 8007800:	f000 f86e 	bl	80078e0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 8007804:	4603      	mov	r3, r0
 8007806:	17da      	asrs	r2, r3, #31
 8007808:	4698      	mov	r8, r3
 800780a:	4691      	mov	r9, r2
 800780c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007810:	4542      	cmp	r2, r8
 8007812:	eb73 0309 	sbcs.w	r3, r3, r9
 8007816:	db0d      	blt.n	8007834 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 8007818:	f000 f86b 	bl	80078f2 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>
 800781c:	4603      	mov	r3, r0
 800781e:	17da      	asrs	r2, r3, #31
 8007820:	461c      	mov	r4, r3
 8007822:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 8007824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007828:	4294      	cmp	r4, r2
 800782a:	eb75 0303 	sbcs.w	r3, r5, r3
 800782e:	db01      	blt.n	8007834 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08007840 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>:

  int read() {
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
    return static_cast<unsigned char>(*ptr_++);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	1c59      	adds	r1, r3, #1
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	6011      	str	r1, [r2, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
  }
 8007854:	4618      	mov	r0, r3
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	4603      	mov	r3, r0
 8007868:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800786a:	79fb      	ldrb	r3, [r7, #7]
 800786c:	2239      	movs	r2, #57	@ 0x39
 800786e:	2130      	movs	r1, #48	@ 0x30
 8007870:	4618      	mov	r0, r3
 8007872:	f7ff ff7c 	bl	800776e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d111      	bne.n	80078a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
 800787c:	79fb      	ldrb	r3, [r7, #7]
 800787e:	227a      	movs	r2, #122	@ 0x7a
 8007880:	215f      	movs	r1, #95	@ 0x5f
 8007882:	4618      	mov	r0, r3
 8007884:	f7ff ff73 	bl	800776e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d108      	bne.n	80078a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
           isBetween(c, 'A', 'Z');
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	225a      	movs	r2, #90	@ 0x5a
 8007892:	2141      	movs	r1, #65	@ 0x41
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff ff6a 	bl	800776e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800789a:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x44>
 80078a0:	2301      	movs	r3, #1
 80078a2:	e000      	b.n	80078a6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x46>
 80078a4:	2300      	movs	r3, #0
  }
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>:
  static inline uint8_t decodeHex(char c) {
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	4603      	mov	r3, r0
 80078b6:	71fb      	strb	r3, [r7, #7]
    if (c < 'A')
 80078b8:	79fb      	ldrb	r3, [r7, #7]
 80078ba:	2b40      	cmp	r3, #64	@ 0x40
 80078bc:	d803      	bhi.n	80078c6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x18>
      return uint8_t(c - '0');
 80078be:	79fb      	ldrb	r3, [r7, #7]
 80078c0:	3b30      	subs	r3, #48	@ 0x30
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	e006      	b.n	80078d4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x26>
    c = char(c & ~0x20);  // uppercase
 80078c6:	79fb      	ldrb	r3, [r7, #7]
 80078c8:	f023 0320 	bic.w	r3, r3, #32
 80078cc:	71fb      	strb	r3, [r7, #7]
    return uint8_t(c - 'A' + 10);
 80078ce:	79fb      	ldrb	r3, [r7, #7]
 80078d0:	3b37      	subs	r3, #55	@ 0x37
 80078d2:	b2db      	uxtb	r3, r3
  }
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>:
};

template <typename T>
struct numeric_limits<
    T, enable_if_t<is_integral<T>::value && is_signed<T>::value>> {
  static constexpr T lowest() {
 80078e0:	b480      	push	{r7}
 80078e2:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 80078e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 80078e8:	4618      	mov	r0, r3
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>:
  static constexpr T highest() {
 80078f2:	b580      	push	{r7, lr}
 80078f4:	af00      	add	r7, sp, #0
    return T(~lowest());
 80078f6:	f7ff fff3 	bl	80078e0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 80078fa:	4603      	mov	r3, r0
 80078fc:	43db      	mvns	r3, r3
  }
 80078fe:	4618      	mov	r0, r3
 8007900:	bd80      	pop	{r7, pc}
	...

08007904 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800790c:	1d39      	adds	r1, r7, #4
 800790e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007912:	2201      	movs	r2, #1
 8007914:	4803      	ldr	r0, [pc, #12]	@ (8007924 <__io_putchar+0x20>)
 8007916:	f011 fa9c 	bl	8018e52 <HAL_UART_Transmit>
	  return ch;
 800791a:	687b      	ldr	r3, [r7, #4]
	}
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	24000374 	.word	0x24000374

08007928 <main>:
}

int main(void)
{
 8007928:	b590      	push	{r4, r7, lr}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
	MPU_Config();
 800792e:	f000 fa55 	bl	8007ddc <_ZL10MPU_Configv>
	//SCB->VTOR = 0x08000000;
	HAL_Init();
 8007932:	f008 ffed 	bl	8010910 <HAL_Init>
	SystemClock_Config();
 8007936:	f000 f867 	bl	8007a08 <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 800793a:	f000 f92f 	bl	8007b9c <_Z24PeriphCommonClock_Configv>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800793e:	f3bf 8f4f 	dsb	sy
}
 8007942:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007944:	f3bf 8f6f 	isb	sy
}
 8007948:	bf00      	nop
__STATIC_FORCEINLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 800794a:	4b2d      	ldr	r3, [pc, #180]	@ (8007a00 <main+0xd8>)
 800794c:	2200      	movs	r2, #0
 800794e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8007952:	f3bf 8f4f 	dsb	sy
}
 8007956:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007958:	f3bf 8f6f 	isb	sy
}
 800795c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800795e:	bf00      	nop
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8007960:	4b27      	ldr	r3, [pc, #156]	@ (8007a00 <main+0xd8>)
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007968:	2b00      	cmp	r3, #0
 800796a:	bf14      	ite	ne
 800796c:	2301      	movne	r3, #1
 800796e:	2300      	moveq	r3, #0
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d11b      	bne.n	80079ae <main+0x86>
  __ASM volatile ("dsb 0xF":::"memory");
 8007976:	f3bf 8f4f 	dsb	sy
}
 800797a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800797c:	f3bf 8f6f 	isb	sy
}
 8007980:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8007982:	4b1f      	ldr	r3, [pc, #124]	@ (8007a00 <main+0xd8>)
 8007984:	2200      	movs	r2, #0
 8007986:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800798a:	f3bf 8f4f 	dsb	sy
}
 800798e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007990:	f3bf 8f6f 	isb	sy
}
 8007994:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8007996:	4b1a      	ldr	r3, [pc, #104]	@ (8007a00 <main+0xd8>)
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	4a19      	ldr	r2, [pc, #100]	@ (8007a00 <main+0xd8>)
 800799c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80079a2:	f3bf 8f4f 	dsb	sy
}
 80079a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80079a8:	f3bf 8f6f 	isb	sy
}
 80079ac:	e000      	b.n	80079b0 <main+0x88>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80079ae:	bf00      	nop
	SCB_InvalidateICache();
	SCB_EnableICache();
	//SCB_InvalidateDCache();
	//SCB_EnableDCache();

    __HAL_RCC_DMA1_CLK_ENABLE();
 80079b0:	4b14      	ldr	r3, [pc, #80]	@ (8007a04 <main+0xdc>)
 80079b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80079b6:	4a13      	ldr	r2, [pc, #76]	@ (8007a04 <main+0xdc>)
 80079b8:	f043 0301 	orr.w	r3, r3, #1
 80079bc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80079c0:	4b10      	ldr	r3, [pc, #64]	@ (8007a04 <main+0xdc>)
 80079c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	683b      	ldr	r3, [r7, #0]

	MX_GPIO_Init(); 			// used for SD card detect
 80079ce:	f000 f9a9 	bl	8007d24 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 80079d2:	f000 f947 	bl	8007c64 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();		// uncomment line 62 #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 in FATFT/Target/sd_diskio.c
 80079d6:	f000 f919 	bl	8007c0c <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 80079da:	f013 f91f 	bl	801ac1c <MX_FATFS_Init>

	Remora *remora = new Remora();
 80079de:	2034      	movs	r0, #52	@ 0x34
 80079e0:	f015 fd4a 	bl	801d478 <_Znwj>
 80079e4:	4603      	mov	r3, r0
 80079e6:	461c      	mov	r4, r3
 80079e8:	4620      	mov	r0, r4
 80079ea:	f000 fe27 	bl	800863c <_ZN6RemoraC1Ev>
 80079ee:	607c      	str	r4, [r7, #4]
	remora->run();
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f001 f85f 	bl	8008ab4 <_ZN6Remora3runEv>
}
 80079f6:	2300      	movs	r3, #0
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd90      	pop	{r4, r7, pc}
 8007a00:	e000ed00 	.word	0xe000ed00
 8007a04:	58024400 	.word	0x58024400

08007a08 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b09e      	sub	sp, #120	@ 0x78
 8007a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007a0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007a12:	224c      	movs	r2, #76	@ 0x4c
 8007a14:	2100      	movs	r1, #0
 8007a16:	4618      	mov	r0, r3
 8007a18:	f016 fb26 	bl	801e068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007a1c:	f107 030c 	add.w	r3, r7, #12
 8007a20:	2220      	movs	r2, #32
 8007a22:	2100      	movs	r1, #0
 8007a24:	4618      	mov	r0, r3
 8007a26:	f016 fb1f 	bl	801e068 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8007a2a:	2002      	movs	r0, #2
 8007a2c:	f00b fef6 	bl	801381c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a30:	2300      	movs	r3, #0
 8007a32:	60bb      	str	r3, [r7, #8]
 8007a34:	4b56      	ldr	r3, [pc, #344]	@ (8007b90 <_Z18SystemClock_Configv+0x188>)
 8007a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a38:	4a55      	ldr	r2, [pc, #340]	@ (8007b90 <_Z18SystemClock_Configv+0x188>)
 8007a3a:	f023 0301 	bic.w	r3, r3, #1
 8007a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a40:	4b53      	ldr	r3, [pc, #332]	@ (8007b90 <_Z18SystemClock_Configv+0x188>)
 8007a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	60bb      	str	r3, [r7, #8]
 8007a4a:	4b52      	ldr	r3, [pc, #328]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	4a51      	ldr	r2, [pc, #324]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007a50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a54:	6193      	str	r3, [r2, #24]
 8007a56:	4b4f      	ldr	r3, [pc, #316]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007a5e:	60bb      	str	r3, [r7, #8]
 8007a60:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007a62:	bf00      	nop
 8007a64:	4b4b      	ldr	r3, [pc, #300]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a70:	bf14      	ite	ne
 8007a72:	2301      	movne	r3, #1
 8007a74:	2300      	moveq	r3, #0
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1f3      	bne.n	8007a64 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a7c:	4b46      	ldr	r3, [pc, #280]	@ (8007b98 <_Z18SystemClock_Configv+0x190>)
 8007a7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a82:	4a45      	ldr	r2, [pc, #276]	@ (8007b98 <_Z18SystemClock_Configv+0x190>)
 8007a84:	f043 0302 	orr.w	r3, r3, #2
 8007a88:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007a8c:	4b42      	ldr	r3, [pc, #264]	@ (8007b98 <_Z18SystemClock_Configv+0x190>)
 8007a8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	607b      	str	r3, [r7, #4]
 8007a98:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	603b      	str	r3, [r7, #0]
 8007a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	4a3c      	ldr	r2, [pc, #240]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007aa4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007aa8:	6193      	str	r3, [r2, #24]
 8007aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	4b36      	ldr	r3, [pc, #216]	@ (8007b90 <_Z18SystemClock_Configv+0x188>)
 8007ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab8:	4a35      	ldr	r2, [pc, #212]	@ (8007b90 <_Z18SystemClock_Configv+0x188>)
 8007aba:	f043 0301 	orr.w	r3, r3, #1
 8007abe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ac0:	4b33      	ldr	r3, [pc, #204]	@ (8007b90 <_Z18SystemClock_Configv+0x188>)
 8007ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	603b      	str	r3, [r7, #0]
 8007aca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007acc:	bf00      	nop
 8007ace:	4b31      	ldr	r3, [pc, #196]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ad6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ada:	bf14      	ite	ne
 8007adc:	2301      	movne	r3, #1
 8007ade:	2300      	moveq	r3, #0
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1f3      	bne.n	8007ace <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8007ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8007b98 <_Z18SystemClock_Configv+0x190>)
 8007ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	4a2a      	ldr	r2, [pc, #168]	@ (8007b98 <_Z18SystemClock_Configv+0x190>)
 8007af0:	f043 0302 	orr.w	r3, r3, #2
 8007af4:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007af6:	2301      	movs	r3, #1
 8007af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007afa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007afe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b00:	2302      	movs	r3, #2
 8007b02:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007b04:	2302      	movs	r3, #2
 8007b06:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8007b08:	2305      	movs	r3, #5
 8007b0a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8007b0c:	23c0      	movs	r3, #192	@ 0xc0
 8007b0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8007b10:	2302      	movs	r3, #2
 8007b12:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007b14:	2304      	movs	r3, #4
 8007b16:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007b18:	2302      	movs	r3, #2
 8007b1a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8007b1c:	2308      	movs	r3, #8
 8007b1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007b20:	2300      	movs	r3, #0
 8007b22:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8007b24:	2300      	movs	r3, #0
 8007b26:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f00b feaf 	bl	8013890 <HAL_RCC_OscConfig>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	bf14      	ite	ne
 8007b38:	2301      	movne	r3, #1
 8007b3a:	2300      	moveq	r3, #0
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d001      	beq.n	8007b46 <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 8007b42:	f000 f993 	bl	8007e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b46:	233f      	movs	r3, #63	@ 0x3f
 8007b48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8007b52:	2308      	movs	r3, #8
 8007b54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8007b56:	2340      	movs	r3, #64	@ 0x40
 8007b58:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8007b5a:	2340      	movs	r3, #64	@ 0x40
 8007b5c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8007b5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b62:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8007b64:	2340      	movs	r3, #64	@ 0x40
 8007b66:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007b68:	f107 030c 	add.w	r3, r7, #12
 8007b6c:	2104      	movs	r1, #4
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f00c fae8 	bl	8014144 <HAL_RCC_ClockConfig>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	bf14      	ite	ne
 8007b7a:	2301      	movne	r3, #1
 8007b7c:	2300      	moveq	r3, #0
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 8007b84:	f000 f972 	bl	8007e6c <Error_Handler>
  }
}
 8007b88:	bf00      	nop
 8007b8a:	3778      	adds	r7, #120	@ 0x78
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	58000400 	.word	0x58000400
 8007b94:	58024800 	.word	0x58024800
 8007b98:	58024400 	.word	0x58024400

08007b9c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b0b0      	sub	sp, #192	@ 0xc0
 8007ba0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007ba2:	463b      	mov	r3, r7
 8007ba4:	22c0      	movs	r2, #192	@ 0xc0
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f016 fa5d 	bl	801e068 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 8007bae:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 8007bb2:	f04f 0300 	mov.w	r3, #0
 8007bb6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8007bba:	2302      	movs	r3, #2
 8007bbc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8007bbe:	230c      	movs	r3, #12
 8007bc0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 8007bc6:	230a      	movs	r3, #10
 8007bc8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8007bca:	2302      	movs	r3, #2
 8007bcc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8007bce:	23c0      	movs	r3, #192	@ 0xc0
 8007bd0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8007bd2:	2320      	movs	r3, #32
 8007bd4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8007bda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007bde:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8007be0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007be4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007be6:	463b      	mov	r3, r7
 8007be8:	4618      	mov	r0, r3
 8007bea:	f00c fe37 	bl	801485c <HAL_RCCEx_PeriphCLKConfig>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	bf14      	ite	ne
 8007bf4:	2301      	movne	r3, #1
 8007bf6:	2300      	moveq	r3, #0
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 8007bfe:	f000 f935 	bl	8007e6c <Error_Handler>
  }
}
 8007c02:	bf00      	nop
 8007c04:	37c0      	adds	r7, #192	@ 0xc0
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8007c10:	4b11      	ldr	r3, [pc, #68]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c12:	4a12      	ldr	r2, [pc, #72]	@ (8007c5c <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 8007c14:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8007c16:	4b10      	ldr	r3, [pc, #64]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8007c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c1e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007c22:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8007c24:	4b0c      	ldr	r3, [pc, #48]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007c2a:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8007c32:	4b09      	ldr	r3, [pc, #36]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c34:	2208      	movs	r2, #8
 8007c36:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8007c38:	4807      	ldr	r0, [pc, #28]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c3a:	f00f fb0d 	bl	8017258 <HAL_SD_Init>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	bf14      	ite	ne
 8007c44:	2301      	movne	r3, #1
 8007c46:	2300      	moveq	r3, #0
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d002      	beq.n	8007c54 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 8007c4e:	4804      	ldr	r0, [pc, #16]	@ (8007c60 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 8007c50:	f016 f910 	bl	801de74 <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 8007c54:	bf00      	nop
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	240002f8 	.word	0x240002f8
 8007c5c:	52007000 	.word	0x52007000
 8007c60:	0801efc4 	.word	0x0801efc4

08007c64 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007c68:	4b2c      	ldr	r3, [pc, #176]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c6a:	4a2d      	ldr	r2, [pc, #180]	@ (8007d20 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8007c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = Config::pcBaud;
 8007c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007c76:	4b29      	ldr	r3, [pc, #164]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007c7c:	4b27      	ldr	r3, [pc, #156]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007c82:	4b26      	ldr	r3, [pc, #152]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007c88:	4b24      	ldr	r3, [pc, #144]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c8a:	220c      	movs	r2, #12
 8007c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007c8e:	4b23      	ldr	r3, [pc, #140]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007c94:	4b21      	ldr	r3, [pc, #132]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007c9a:	4b20      	ldr	r3, [pc, #128]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007cac:	481b      	ldr	r0, [pc, #108]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007cae:	f011 f880 	bl	8018db2 <HAL_UART_Init>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	bf14      	ite	ne
 8007cb8:	2301      	movne	r3, #1
 8007cba:	2300      	moveq	r3, #0
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8007cc2:	f000 f8d3 	bl	8007e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	4814      	ldr	r0, [pc, #80]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007cca:	f012 f912 	bl	8019ef2 <HAL_UARTEx_SetTxFifoThreshold>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	bf14      	ite	ne
 8007cd4:	2301      	movne	r3, #1
 8007cd6:	2300      	moveq	r3, #0
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8007cde:	f000 f8c5 	bl	8007e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	480d      	ldr	r0, [pc, #52]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007ce6:	f012 f942 	bl	8019f6e <HAL_UARTEx_SetRxFifoThreshold>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	bf14      	ite	ne
 8007cf0:	2301      	movne	r3, #1
 8007cf2:	2300      	moveq	r3, #0
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8007cfa:	f000 f8b7 	bl	8007e6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007cfe:	4807      	ldr	r0, [pc, #28]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007d00:	f012 f8be 	bl	8019e80 <HAL_UARTEx_DisableFifoMode>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	bf14      	ite	ne
 8007d0a:	2301      	movne	r3, #1
 8007d0c:	2300      	moveq	r3, #0
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8007d14:	f000 f8aa 	bl	8007e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007d18:	bf00      	nop
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	24000374 	.word	0x24000374
 8007d20:	40011000 	.word	0x40011000

08007d24 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08a      	sub	sp, #40	@ 0x28
 8007d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d2a:	f107 0314 	add.w	r3, r7, #20
 8007d2e:	2200      	movs	r2, #0
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	605a      	str	r2, [r3, #4]
 8007d34:	609a      	str	r2, [r3, #8]
 8007d36:	60da      	str	r2, [r3, #12]
 8007d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007d3a:	4b26      	ldr	r3, [pc, #152]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d40:	4a24      	ldr	r2, [pc, #144]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007d4a:	4b22      	ldr	r3, [pc, #136]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d54:	613b      	str	r3, [r7, #16]
 8007d56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d58:	4b1e      	ldr	r3, [pc, #120]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d60:	f043 0304 	orr.w	r3, r3, #4
 8007d64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007d68:	4b1a      	ldr	r3, [pc, #104]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d6e:	f003 0304 	and.w	r3, r3, #4
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d76:	4b17      	ldr	r3, [pc, #92]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d7c:	4a15      	ldr	r2, [pc, #84]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d7e:	f043 0301 	orr.w	r3, r3, #1
 8007d82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007d86:	4b13      	ldr	r3, [pc, #76]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	60bb      	str	r3, [r7, #8]
 8007d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d94:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d9c:	f043 0308 	orr.w	r3, r3, #8
 8007da0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007da4:	4b0b      	ldr	r3, [pc, #44]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007daa:	f003 0308 	and.w	r3, r3, #8
 8007dae:	607b      	str	r3, [r7, #4]
 8007db0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007db2:	2310      	movs	r3, #16
 8007db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007db6:	2300      	movs	r3, #0
 8007db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dbe:	f107 0314 	add.w	r3, r7, #20
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4804      	ldr	r0, [pc, #16]	@ (8007dd8 <_ZL12MX_GPIO_Initv+0xb4>)
 8007dc6:	f00b fb47 	bl	8013458 <HAL_GPIO_Init>

}
 8007dca:	bf00      	nop
 8007dcc:	3728      	adds	r7, #40	@ 0x28
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	58024400 	.word	0x58024400
 8007dd8:	58020800 	.word	0x58020800

08007ddc <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007de2:	463b      	mov	r3, r7
 8007de4:	2200      	movs	r2, #0
 8007de6:	601a      	str	r2, [r3, #0]
 8007de8:	605a      	str	r2, [r3, #4]
 8007dea:	609a      	str	r2, [r3, #8]
 8007dec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8007dee:	f008 ff7b 	bl	8010ce8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007df2:	2301      	movs	r3, #1
 8007df4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8007dfe:	231f      	movs	r3, #31
 8007e00:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8007e02:	2387      	movs	r3, #135	@ 0x87
 8007e04:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007e12:	2301      	movs	r3, #1
 8007e14:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007e16:	2300      	movs	r3, #0
 8007e18:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007e1e:	463b      	mov	r3, r7
 8007e20:	4618      	mov	r0, r3
 8007e22:	f008 ff99 	bl	8010d58 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for DMA buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007e26:	2301      	movs	r3, #1
 8007e28:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8007e2a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8007e2e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8007e30:	2307      	movs	r3, #7
 8007e32:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8007e34:	2303      	movs	r3, #3
 8007e36:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8007e40:	2300      	movs	r3, #0
 8007e42:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8007e44:	2301      	movs	r3, #1
 8007e46:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8007e50:	2300      	movs	r3, #0
 8007e52:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007e54:	463b      	mov	r3, r7
 8007e56:	4618      	mov	r0, r3
 8007e58:	f008 ff7e 	bl	8010d58 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007e5c:	2004      	movs	r0, #4
 8007e5e:	f008 ff5b 	bl	8010d18 <HAL_MPU_Enable>

}
 8007e62:	bf00      	nop
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
	...

08007e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 8007e70:	4803      	ldr	r0, [pc, #12]	@ (8007e80 <Error_Handler+0x14>)
 8007e72:	f015 ff8f 	bl	801dd94 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 8007e76:	b672      	cpsid	i
}
 8007e78:	bf00      	nop

  __disable_irq();
  while (1)
 8007e7a:	bf00      	nop
 8007e7c:	e7fd      	b.n	8007e7a <Error_Handler+0xe>
 8007e7e:	bf00      	nop
 8007e80:	0801efd4 	.word	0x0801efd4

08007e84 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	4618      	mov	r0, r3
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	605a      	str	r2, [r3, #4]
 8007eae:	bf00      	nop
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	1e5a      	subs	r2, r3, #1
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	605a      	str	r2, [r3, #4]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	bf0c      	ite	eq
 8007ed4:	2301      	moveq	r3, #1
 8007ed6:	2300      	movne	r3, #0
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d019      	beq.n	8007f12 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3308      	adds	r3, #8
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	1e5a      	subs	r2, r3, #1
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	609a      	str	r2, [r3, #8]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	bf0c      	ite	eq
 8007efc:	2301      	moveq	r3, #1
 8007efe:	2300      	movne	r3, #0
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d005      	beq.n	8007f12 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	330c      	adds	r3, #12
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	4798      	blx	r3
        }
    }
 8007f12:	bf00      	nop
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <_ZNSt19_Sp_make_shared_tag5_S_tiEv>:
  private:
    template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
      friend class _Sp_counted_ptr_inplace;

    static const type_info&
    _S_ti() noexcept _GLIBCXX_VISIBILITY(default)
 8007f1c:	b480      	push	{r7}
 8007f1e:	af00      	add	r7, sp, #0
    {
      alignas(type_info) static constexpr char __tag[sizeof(type_info)] = { };
      return reinterpret_cast<const type_info&>(__tag);
 8007f20:	4b02      	ldr	r3, [pc, #8]	@ (8007f2c <_ZNSt19_Sp_make_shared_tag5_S_tiEv+0x10>)
    }
 8007f22:	4618      	mov	r0, r3
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	0801f5bc 	.word	0x0801f5bc

08007f30 <_ZN8txData_tC1Ev>:
    int32_t jointFeedback[Config::joints];	  // Base thread feedback ??
    float processVariable[Config::variables];		     // Servo thread feedback ??
	uint16_t inputs;
  };

  txData_t() {
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
      header = 0;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	601a      	str	r2, [r3, #0]
      inputs = 0;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	879a      	strh	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 8007f44:	2300      	movs	r3, #0
 8007f46:	73fb      	strb	r3, [r7, #15]
 8007f48:	e008      	b.n	8007f5c <_ZN8txData_tC1Ev+0x2c>
         jointFeedback[i] = 0;
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	2200      	movs	r2, #0
 8007f54:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	73fb      	strb	r3, [r7, #15]
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	2b07      	cmp	r3, #7
 8007f60:	d9f3      	bls.n	8007f4a <_ZN8txData_tC1Ev+0x1a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 8007f62:	2300      	movs	r3, #0
 8007f64:	73bb      	strb	r3, [r7, #14]
 8007f66:	e00b      	b.n	8007f80 <_ZN8txData_tC1Ev+0x50>
         processVariable[i] = 0.0;
 8007f68:	7bbb      	ldrb	r3, [r7, #14]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	3308      	adds	r3, #8
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	3304      	adds	r3, #4
 8007f74:	f04f 0200 	mov.w	r2, #0
 8007f78:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	73bb      	strb	r3, [r7, #14]
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	2b05      	cmp	r3, #5
 8007f84:	d9f0      	bls.n	8007f68 <_ZN8txData_tC1Ev+0x38>
     }
  }
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>:
  bool isStatic() const {
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
    return static_;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	7a1b      	ldrb	r3, [r3, #8]
  }
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>:
  ~StringPool() {
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  }
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>:

  VariantData* getOrAddElement(size_t index, ResourceManager* resources);

  VariantData* getElement(size_t index, const ResourceManager* resources) const;

  static VariantData* getElement(const ArrayData* array, size_t index,
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	607a      	str	r2, [r7, #4]
                                 const ResourceManager* resources) {
    if (!array)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d101      	bne.n	8007fd8 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x16>
      return nullptr;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	e006      	b.n	8007fe6 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x24>
    return array->getElement(index, resources);
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	68b9      	ldr	r1, [r7, #8]
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 f9ab 	bl	8008338 <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	bf00      	nop
  }
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
  const ArrayData* asArray() const {
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asArray();
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7fa fd23 	bl	8002a42 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 8007ffc:	4603      	mov	r3, r0
  }
 8007ffe:	4618      	mov	r0, r3
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>:
  VariantData* getElement(size_t index,
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	60f8      	str	r0, [r7, #12]
 800800e:	60b9      	str	r1, [r7, #8]
 8008010:	607a      	str	r2, [r7, #4]
    return ArrayData::getElement(asArray(), index, resources);
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f7ff ffeb 	bl	8007fee <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 8008018:	4603      	mov	r3, r0
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	68b9      	ldr	r1, [r7, #8]
 800801e:	4618      	mov	r0, r3
 8008020:	f7ff ffcf 	bl	8007fc2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 8008024:	4603      	mov	r3, r0
  }
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>:
  static VariantData* getElement(const VariantData* var, size_t index,
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	60f8      	str	r0, [r7, #12]
 8008036:	60b9      	str	r1, [r7, #8]
 8008038:	607a      	str	r2, [r7, #4]
    return var != 0 ? var->getElement(index, resources) : 0;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d006      	beq.n	800804e <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x20>
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	68b9      	ldr	r1, [r7, #8]
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f7ff ffde 	bl	8008006 <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>
 800804a:	4603      	mov	r3, r0
 800804c:	e000      	b.n	8008050 <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x22>
 800804e:	2300      	movs	r3, #0
  }
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>:
  VariantData* getOrAddElement(size_t index, ResourceManager* resources) {
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
    auto array = isNull() ? &toArray() : asArray();
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f000 f81d 	bl	80080a4 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d004      	beq.n	800807a <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x22>
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7fa fdeb 	bl	8002c4c <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 8008076:	4603      	mov	r3, r0
 8008078:	e003      	b.n	8008082 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x2a>
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f7fa fce1 	bl	8002a42 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 8008080:	4603      	mov	r3, r0
 8008082:	617b      	str	r3, [r7, #20]
    if (!array)
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x36>
      return nullptr;
 800808a:	2300      	movs	r3, #0
 800808c:	e006      	b.n	800809c <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x44>
    return array->getOrAddElement(index, resources);
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	68b9      	ldr	r1, [r7, #8]
 8008092:	6978      	ldr	r0, [r7, #20]
 8008094:	f000 f8ff 	bl	8008296 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>
 8008098:	4603      	mov	r3, r0
 800809a:	bf00      	nop
  }
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>:
  bool isNull() const {
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Null;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	791b      	ldrb	r3, [r3, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	bf0c      	ite	eq
 80080b4:	2301      	moveq	r3, #1
 80080b6:	2300      	movne	r3, #0
 80080b8:	b2db      	uxtb	r3, r3
  }
 80080ba:	4618      	mov	r0, r3
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>:
  bool isString() const {
 80080c6:	b480      	push	{r7}
 80080c8:	b083      	sub	sp, #12
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::LinkedString ||
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	791b      	ldrb	r3, [r3, #4]
 80080d2:	2b04      	cmp	r3, #4
 80080d4:	d003      	beq.n	80080de <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x18>
           type_ == VariantType::OwnedString;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	791b      	ldrb	r3, [r3, #4]
    return type_ == VariantType::LinkedString ||
 80080da:	2b05      	cmp	r3, #5
 80080dc:	d101      	bne.n	80080e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1c>
 80080de:	2301      	movs	r3, #1
 80080e0:	e000      	b.n	80080e4 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1e>
 80080e2:	2300      	movs	r3, #0
  }
 80080e4:	4618      	mov	r0, r3
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>:
  void setLinkedString(const char* s) {
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
    type_ = VariantType::LinkedString;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2204      	movs	r2, #4
 80080fe:	711a      	strb	r2, [r3, #4]
    content_.asLinkedString = s;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	601a      	str	r2, [r3, #0]
  }
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>:
  ~ResourceManager() {
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
    stringPool_.clear(allocator_);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f103 0208 	add.w	r2, r3, #8
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4619      	mov	r1, r3
 8008126:	4610      	mov	r0, r2
 8008128:	f7fa fb1a 	bl	8002760 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
    variantPools_.clear(allocator_);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f103 020c 	add.w	r2, r3, #12
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4619      	mov	r1, r3
 8008138:	4610      	mov	r0, r2
 800813a:	f7fc fb9b 	bl	8004874 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
  }
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	330c      	adds	r3, #12
 8008142:	4618      	mov	r0, r3
 8008144:	f000 ffc7 	bl	80090d6 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3308      	adds	r3, #8
 800814c:	4618      	mov	r0, r3
 800814e:	f7ff ff2d 	bl	8007fac <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4618      	mov	r0, r3
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>:
  static JsonVariant fromJson(JsonVariant src) {
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	1d3b      	adds	r3, r7, #4
 8008166:	e883 0006 	stmia.w	r3, {r1, r2}
    return src;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	461a      	mov	r2, r3
 800816e:	1d3b      	adds	r3, r7, #4
 8008170:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008174:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>:
    return JsonVariantConst(collectionToVariant(data_), resources_);
  }

  // Returns true if the reference is unbound.
  // https://arduinojson.org/v7/api/jsonarray/isnull/
  bool isNull() const {
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
    return data_ == 0;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	bf0c      	ite	eq
 8008194:	2301      	moveq	r3, #1
 8008196:	2300      	movne	r3, #0
 8008198:	b2db      	uxtb	r3, r3
  }
 800819a:	4618      	mov	r0, r3
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>:
    return detail::VariantData::nesting(collectionToVariant(data_), resources_);
  }

  // Returns the number of elements in the array.
  // https://arduinojson.org/v7/api/jsonarray/size/
  size_t size() const {
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b082      	sub	sp, #8
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
    return data_ ? data_->size(resources_) : 0;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x26>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	461a      	mov	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	4619      	mov	r1, r3
 80081c2:	4610      	mov	r0, r2
 80081c4:	f000 f8cf 	bl	8008366 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>
 80081c8:	4603      	mov	r3, r0
 80081ca:	e000      	b.n	80081ce <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x28>
 80081cc:	2300      	movs	r3, #0
  }
 80081ce:	4618      	mov	r0, r3
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
    return resources_;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	685b      	ldr	r3, [r3, #4]
  }
 80081e2:	4618      	mov	r0, r3
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>:

  detail::VariantData* getData() const {
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b082      	sub	sp, #8
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fa fbb7 	bl	800296e <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8008200:	4603      	mov	r3, r0
  }
 8008202:	4618      	mov	r0, r3
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>:

  detail::VariantData* getOrCreateData() const {
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4618      	mov	r0, r3
 8008218:	f7fa fba9 	bl	800296e <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 800821c:	4603      	mov	r3, r0
  }
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>:

ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// A JSON document.
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
 8008226:	b580      	push	{r7, lr}
 8008228:	b082      	sub	sp, #8
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4618      	mov	r0, r3
 8008232:	f7ff ff6e 	bl	8008112 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4618      	mov	r0, r3
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline ArrayData::iterator ArrayData::at(
    size_t index, const ResourceManager* resources) const {
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]
 800824c:	603b      	str	r3, [r7, #0]
  auto it = createIterator(resources);
 800824e:	68b9      	ldr	r1, [r7, #8]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	4618      	mov	r0, r3
 8008256:	f7fb f823 	bl	80032a0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index) {
 800825a:	e006      	b.n	800826a <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x2a>
    it.next(resources);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f7fa fffb 	bl	800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    --index;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3b01      	subs	r3, #1
 8008268:	607b      	str	r3, [r7, #4]
  while (!it.done() && index) {
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f7fa fb36 	bl	80028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8008270:	4603      	mov	r3, r0
 8008272:	f083 0301 	eor.w	r3, r3, #1
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	d004      	beq.n	8008286 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 8008282:	2301      	movs	r3, #1
 8008284:	e000      	b.n	8008288 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x48>
 8008286:	2300      	movs	r3, #0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1e7      	bne.n	800825c <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x1c>
  }
  return it;
 800828c:	bf00      	nop
}
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>:
  CollectionData::appendOne(slot, resources);
  return slot.ptr();
}

inline VariantData* ArrayData::getOrAddElement(size_t index,
                                               ResourceManager* resources) {
 8008296:	b580      	push	{r7, lr}
 8008298:	b088      	sub	sp, #32
 800829a:	af00      	add	r7, sp, #0
 800829c:	60f8      	str	r0, [r7, #12]
 800829e:	60b9      	str	r1, [r7, #8]
 80082a0:	607a      	str	r2, [r7, #4]
  auto it = createIterator(resources);
 80082a2:	68f9      	ldr	r1, [r7, #12]
 80082a4:	f107 0314 	add.w	r3, r7, #20
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fa fff8 	bl	80032a0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index > 0) {
 80082b0:	e008      	b.n	80082c4 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x2e>
    it.next(resources);
 80082b2:	f107 0314 	add.w	r3, r7, #20
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fa ffce 	bl	800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    index--;
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	3b01      	subs	r3, #1
 80082c2:	60bb      	str	r3, [r7, #8]
  while (!it.done() && index > 0) {
 80082c4:	f107 0314 	add.w	r3, r7, #20
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fa fb07 	bl	80028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 80082ce:	4603      	mov	r3, r0
 80082d0:	f083 0301 	eor.w	r3, r3, #1
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d004      	beq.n	80082e4 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 80082e0:	2301      	movs	r3, #1
 80082e2:	e000      	b.n	80082e6 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x50>
 80082e4:	2300      	movs	r3, #0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e3      	bne.n	80082b2 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x1c>
  }
  if (it.done())
 80082ea:	f107 0314 	add.w	r3, r7, #20
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fa faf4 	bl	80028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d002      	beq.n	8008300 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x6a>
    index++;
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	3301      	adds	r3, #1
 80082fe:	60bb      	str	r3, [r7, #8]
  VariantData* element = it.data();
 8008300:	f107 0314 	add.w	r3, r7, #20
 8008304:	4618      	mov	r0, r3
 8008306:	f7fa fb1a 	bl	800293e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 800830a:	61f8      	str	r0, [r7, #28]
  while (index > 0) {
 800830c:	e00c      	b.n	8008328 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x92>
    element = addElement(resources);
 800830e:	6879      	ldr	r1, [r7, #4]
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f7fa ff56 	bl	80031c2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 8008316:	61f8      	str	r0, [r7, #28]
    if (!element)
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d101      	bne.n	8008322 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x8c>
      return nullptr;
 800831e:	2300      	movs	r3, #0
 8008320:	e006      	b.n	8008330 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x9a>
    index--;
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	3b01      	subs	r3, #1
 8008326:	60bb      	str	r3, [r7, #8]
  while (index > 0) {
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1ef      	bne.n	800830e <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x78>
  }
  return element;
 800832e:	69fb      	ldr	r3, [r7, #28]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3720      	adds	r7, #32
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>:

inline VariantData* ArrayData::getElement(
    size_t index, const ResourceManager* resources) const {
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
  return at(index, resources).data();
 8008344:	f107 0010 	add.w	r0, r7, #16
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	68f9      	ldr	r1, [r7, #12]
 800834e:	f7ff ff77 	bl	8008240 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>
 8008352:	f107 0310 	add.w	r3, r7, #16
 8008356:	4618      	mov	r0, r3
 8008358:	f7fa faf1 	bl	800293e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 800835c:	4603      	mov	r3, r0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3718      	adds	r7, #24
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>:
      maxChildNesting = childNesting;
  }
  return maxChildNesting + 1;
}

inline size_t CollectionData::size(const ResourceManager* resources) const {
 8008366:	b580      	push	{r7, lr}
 8008368:	b086      	sub	sp, #24
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	6039      	str	r1, [r7, #0]
  size_t count = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 8008374:	f107 030c 	add.w	r3, r7, #12
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	6879      	ldr	r1, [r7, #4]
 800837c:	4618      	mov	r0, r3
 800837e:	f7fa ff8f 	bl	80032a0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8008382:	e008      	b.n	8008396 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x30>
    count++;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	3301      	adds	r3, #1
 8008388:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 800838a:	f107 030c 	add.w	r3, r7, #12
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	4618      	mov	r0, r3
 8008392:	f7fa ff62 	bl	800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 8008396:	f107 030c 	add.w	r3, r7, #12
 800839a:	4618      	mov	r0, r3
 800839c:	f7fa fa9e 	bl	80028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 80083a0:	4603      	mov	r3, r0
 80083a2:	f083 0301 	eor.w	r3, r3, #1
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1eb      	bne.n	8008384 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x1e>
  return count;
 80083ac:	697b      	ldr	r3, [r7, #20]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>:
  static const char* fromJson(JsonVariantConst src) {
    auto data = getData(src);
    return data ? data->asString().c_str() : 0;
  }

  static bool checkJson(JsonVariantConst src) {
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	463b      	mov	r3, r7
 80083be:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80083c2:	463b      	mov	r3, r7
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fc fad1 	bl	800496c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80083ca:	60f8      	str	r0, [r7, #12]
    return data && data->isString();
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d007      	beq.n	80083e2 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f7ff fe77 	bl	80080c6 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d001      	beq.n	80083e2 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 80083de:	2301      	movs	r3, #1
 80083e0:	e000      	b.n	80083e4 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2e>
 80083e2:	2300      	movs	r3, #0
  }
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	4611      	mov	r1, r2
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 fe80 	bl	8009102 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4611      	mov	r1, r2
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff ffe5 	bl	80083ec <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4618      	mov	r0, r3
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>:
	virtual ~CommsHandler();

	void update(void) override;
	void tasks();

    void setInterface(std::unique_ptr<CommsInterface> commsInterface) {
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
        interface = std::move(commsInterface);
 8008436:	6838      	ldr	r0, [r7, #0]
 8008438:	f000 fe58 	bl	80090ec <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800843c:	4602      	mov	r2, r0
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3318      	adds	r3, #24
 8008442:	4611      	mov	r1, r2
 8008444:	4618      	mov	r0, r3
 8008446:	f7ff ffe1 	bl	800840c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
    }
 800844a:	bf00      	nop
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <_ZNK12CommsHandler9getStatusEv>:
    void setNoDataCount(int count) { noDataCount = count; }
    void setStatus(bool value) { status = value; }

    bool getData() const { return data; }
    int getNoDataCount() const { return noDataCount; }
    bool getStatus() const { return status; }
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	7f9b      	ldrb	r3, [r3, #30]
 800845e:	4618      	mov	r0, r3
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 800846a:	b580      	push	{r7, lr}
 800846c:	af00      	add	r7, sp, #0
		// Chip select pin is PA_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 800846e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008476:	f003 0310 	and.w	r3, r3, #16
 800847a:	2b00      	cmp	r3, #0
 800847c:	bf14      	ite	ne
 800847e:	2301      	movne	r3, #1
 8008480:	2300      	moveq	r3, #0
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b00      	cmp	r3, #0
 8008486:	d006      	beq.n	8008496 <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8008488:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800848c:	2210      	movs	r2, #16
 800848e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 8008492:	f7fa f809 	bl	80024a8 <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 8008496:	bf00      	nop
 8008498:	bd80      	pop	{r7, pc}

0800849a <DMA1_Stream0_IRQHandler>:

	void DMA1_Stream0_IRQHandler()
	{
 800849a:	b580      	push	{r7, lr}
 800849c:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream0_Wrapper();
 800849e:	f7fa f811 	bl	80024c4 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>
	}
 80084a2:	bf00      	nop
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <DMA1_Stream1_IRQHandler>:

	void DMA1_Stream1_IRQHandler()
	{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream1_Wrapper();
 80084aa:	f7fa f819 	bl	80024e0 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>
	}
 80084ae:	bf00      	nop
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <TIM2_IRQHandler>:


	void TIM2_IRQHandler()
	{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	af00      	add	r7, sp, #0
	  if(TIM2->SR & TIM_SR_UIF) // if UIF flag is set
 80084b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	bf14      	ite	ne
 80084c4:	2301      	movne	r3, #1
 80084c6:	2300      	moveq	r3, #0
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d009      	beq.n	80084e2 <TIM2_IRQHandler+0x30>
	  {
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 80084ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80084d8:	f023 0301 	bic.w	r3, r3, #1
 80084dc:	6113      	str	r3, [r2, #16]

		Interrupt::TIM2_Wrapper();
 80084de:	f7fa f80d 	bl	80024fc <_ZN9Interrupt12TIM2_WrapperEv>
	  }
	}
 80084e2:	bf00      	nop
 80084e4:	bd80      	pop	{r7, pc}
	...

080084e8 <TIM3_IRQHandler>:


	void TIM3_IRQHandler()
	{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	af00      	add	r7, sp, #0
	  if(TIM3->SR & TIM_SR_UIF) // if UIF flag is set
 80084ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008518 <TIM3_IRQHandler+0x30>)
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	bf14      	ite	ne
 80084f8:	2301      	movne	r3, #1
 80084fa:	2300      	moveq	r3, #0
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d007      	beq.n	8008512 <TIM3_IRQHandler+0x2a>
	  {
		TIM3->SR &= ~TIM_SR_UIF; // clear UIF flag
 8008502:	4b05      	ldr	r3, [pc, #20]	@ (8008518 <TIM3_IRQHandler+0x30>)
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	4a04      	ldr	r2, [pc, #16]	@ (8008518 <TIM3_IRQHandler+0x30>)
 8008508:	f023 0301 	bic.w	r3, r3, #1
 800850c:	6113      	str	r3, [r2, #16]

		Interrupt::TIM3_Wrapper();
 800850e:	f7fa f803 	bl	8002518 <_ZN9Interrupt12TIM3_WrapperEv>
	  }
	}
 8008512:	bf00      	nop
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	40000400 	.word	0x40000400

0800851c <TIM4_IRQHandler>:

	void TIM4_IRQHandler()
	{
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
	  if(TIM4->SR & TIM_SR_UIF) // if UIF flag is set
 8008520:	4b0a      	ldr	r3, [pc, #40]	@ (800854c <TIM4_IRQHandler+0x30>)
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	2b00      	cmp	r3, #0
 800852a:	bf14      	ite	ne
 800852c:	2301      	movne	r3, #1
 800852e:	2300      	moveq	r3, #0
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d007      	beq.n	8008546 <TIM4_IRQHandler+0x2a>
	  {
		TIM4->SR &= ~TIM_SR_UIF; // clear UIF flag
 8008536:	4b05      	ldr	r3, [pc, #20]	@ (800854c <TIM4_IRQHandler+0x30>)
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	4a04      	ldr	r2, [pc, #16]	@ (800854c <TIM4_IRQHandler+0x30>)
 800853c:	f023 0301 	bic.w	r3, r3, #1
 8008540:	6113      	str	r3, [r2, #16]

		Interrupt::TIM4_Wrapper();
 8008542:	f7f9 fff7 	bl	8002534 <_ZN9Interrupt12TIM4_WrapperEv>
	  }
	}
 8008546:	bf00      	nop
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	40000800 	.word	0x40000800

08008550 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3304      	adds	r3, #4
 800855c:	4618      	mov	r0, r3
 800855e:	f000 fe45 	bl	80091ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4618      	mov	r0, r3
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <_ZNSt10shared_ptrI12CommsHandlerED1Ev>:
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4618      	mov	r0, r3
 8008578:	f7ff ffea 	bl	8008550 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8008586:	b580      	push	{r7, lr}
 8008588:	b082      	sub	sp, #8
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	6039      	str	r1, [r7, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	4611      	mov	r1, r2
 8008596:	4618      	mov	r0, r3
 8008598:	f000 fea1 	bl	80092de <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4618      	mov	r0, r3
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b082      	sub	sp, #8
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	6039      	str	r1, [r7, #0]
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4611      	mov	r1, r2
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7ff ffe5 	bl	8008586 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b082      	sub	sp, #8
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	6039      	str	r1, [r7, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	4611      	mov	r1, r2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 ffc0 	bl	800955c <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4618      	mov	r0, r3
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b082      	sub	sp, #8
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	6039      	str	r1, [r7, #0]
 80085f0:	683a      	ldr	r2, [r7, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4611      	mov	r1, r2
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7ff ffe5 	bl	80085c6 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8008606:	b580      	push	{r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	3304      	adds	r3, #4
 8008612:	4618      	mov	r0, r3
 8008614:	f000 fdea 	bl	80091ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <_ZNSt10shared_ptrI6ModuleED1Ev>:
 8008622:	b580      	push	{r7, lr}
 8008624:	b082      	sub	sp, #8
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff ffea 	bl	8008606 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <_ZN6RemoraC1Ev>:

// unions for TX and RX data
__attribute__((section(".DmaSection"))) volatile txData_t txData;
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;

Remora::Remora() :
 800863c:	b590      	push	{r4, r7, lr}
 800863e:	b095      	sub	sp, #84	@ 0x54
 8008640:	af02      	add	r7, sp, #8
 8008642:	6078      	str	r0, [r7, #4]
	baseFreq(Config::pruBaseFreq),
	servoFreq(Config::pruServoFreq),
	commsFreq(Config::pruCommsFreq)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3310      	adds	r3, #16
 8008648:	4618      	mov	r0, r3
 800864a:	f000 fd90 	bl	800916e <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3314      	adds	r3, #20
 8008652:	4618      	mov	r0, r3
 8008654:	f000 fdbd 	bl	80091d2 <_ZNSt10shared_ptrI12CommsHandlerEC1Ev>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	331c      	adds	r3, #28
 800865c:	4618      	mov	r0, r3
 800865e:	f000 fdf1 	bl	8009244 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	3320      	adds	r3, #32
 8008666:	4618      	mov	r0, r3
 8008668:	f000 fdec 	bl	8009244 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
	baseFreq(Config::pruBaseFreq),
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8008672:	625a      	str	r2, [r3, #36]	@ 0x24
	servoFreq(Config::pruServoFreq),
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800867a:	629a      	str	r2, [r3, #40]	@ 0x28
	commsFreq(Config::pruCommsFreq)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8008682:	62da      	str	r2, [r3, #44]	@ 0x2c
{
	threadsRunning = false;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	currentState = ST_SETUP;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	701a      	strb	r2, [r3, #0]
	prevState = ST_RESET;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2205      	movs	r2, #5
 8008696:	705a      	strb	r2, [r3, #1]

	configHandler = std::make_unique<JsonConfigHandler>(this);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	617b      	str	r3, [r7, #20]
 800869c:	f107 0310 	add.w	r3, r7, #16
 80086a0:	f107 0214 	add.w	r2, r7, #20
 80086a4:	4611      	mov	r1, r2
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 fdfe 	bl	80092a8 <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	3310      	adds	r3, #16
 80086b0:	f107 0210 	add.w	r2, r7, #16
 80086b4:	4611      	mov	r1, r2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff ff75 	bl	80085a6 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 80086bc:	f107 0310 	add.w	r3, r7, #16
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 fd64 	bl	800918e <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>

    ptrTxData = &txData;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a5b      	ldr	r2, [pc, #364]	@ (8008838 <_ZN6RemoraC1Ev+0x1fc>)
 80086ca:	605a      	str	r2, [r3, #4]
    ptrRxData = &rxData;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a5b      	ldr	r2, [pc, #364]	@ (800883c <_ZN6RemoraC1Ev+0x200>)
 80086d0:	609a      	str	r2, [r3, #8]

	auto spiComms = std::make_unique<SPIComms>(ptrRxData, ptrTxData, SPI1);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f103 0108 	add.w	r1, r3, #8
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	1d1a      	adds	r2, r3, #4
 80086dc:	4b58      	ldr	r3, [pc, #352]	@ (8008840 <_ZN6RemoraC1Ev+0x204>)
 80086de:	61bb      	str	r3, [r7, #24]
 80086e0:	f107 000c 	add.w	r0, r7, #12
 80086e4:	f107 0318 	add.w	r3, r7, #24
 80086e8:	f000 fe15 	bl	8009316 <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>

	comms = std::make_shared<CommsHandler>();
 80086ec:	f107 031c 	add.w	r3, r7, #28
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 fe5b 	bl	80093ac <_ZSt11make_sharedI12CommsHandlerJEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueES4_E4typeEEDpOT0_>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	3314      	adds	r3, #20
 80086fa:	f107 021c 	add.w	r2, r7, #28
 80086fe:	4611      	mov	r1, r2
 8008700:	4618      	mov	r0, r3
 8008702:	f000 fe61 	bl	80093c8 <_ZNSt10shared_ptrI12CommsHandlerEaSEOS1_>
 8008706:	f107 031c 	add.w	r3, r7, #28
 800870a:	4618      	mov	r0, r3
 800870c:	f7ff ff2e 	bl	800856c <_ZNSt10shared_ptrI12CommsHandlerED1Ev>
	comms->setInterface(std::move(spiComms));
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3314      	adds	r3, #20
 8008714:	4618      	mov	r0, r3
 8008716:	f000 fe6a 	bl	80093ee <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800871a:	4604      	mov	r4, r0
 800871c:	f107 030c 	add.w	r3, r7, #12
 8008720:	4618      	mov	r0, r3
 8008722:	f000 fe70 	bl	8009406 <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8008726:	4602      	mov	r2, r0
 8008728:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800872c:	4611      	mov	r1, r2
 800872e:	4618      	mov	r0, r3
 8008730:	f000 fe85 	bl	800943e <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>
 8008734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008738:	4619      	mov	r1, r3
 800873a:	4620      	mov	r0, r4
 800873c:	f7ff fe76 	bl	800842c <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>
 8008740:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008744:	4618      	mov	r0, r3
 8008746:	f000 fe96 	bl	8009476 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
	comms->init();
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	3314      	adds	r3, #20
 800874e:	4618      	mov	r0, r3
 8008750:	f000 fe4d 	bl	80093ee <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008754:	4603      	mov	r3, r0
 8008756:	4618      	mov	r0, r3
 8008758:	f004 fdfd 	bl	800d356 <_ZN12CommsHandler4initEv>
	comms->start();
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	3314      	adds	r3, #20
 8008760:	4618      	mov	r0, r3
 8008762:	f000 fe44 	bl	80093ee <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008766:	4603      	mov	r3, r0
 8008768:	4618      	mov	r0, r3
 800876a:	f004 fe22 	bl	800d3b2 <_ZN12CommsHandler5startEv>

    baseThread = make_unique<pruThread>(
    									"Base",
										TIM3,
 800876e:	4b35      	ldr	r3, [pc, #212]	@ (8008844 <_ZN6RemoraC1Ev+0x208>)
 8008770:	62fb      	str	r3, [r7, #44]	@ 0x2c
										TIM3_IRQn,
 8008772:	231d      	movs	r3, #29
 8008774:	867b      	strh	r3, [r7, #50]	@ 0x32
										baseFreq,
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	3324      	adds	r3, #36	@ 0x24
    baseThread = make_unique<pruThread>(
 800877a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800877e:	f107 0132 	add.w	r1, r7, #50	@ 0x32
 8008782:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008786:	4c30      	ldr	r4, [pc, #192]	@ (8008848 <_ZN6RemoraC1Ev+0x20c>)
 8008788:	9401      	str	r4, [sp, #4]
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	460b      	mov	r3, r1
 800878e:	492f      	ldr	r1, [pc, #188]	@ (800884c <_ZN6RemoraC1Ev+0x210>)
 8008790:	f000 fe93 	bl	80094ba <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::baseThreadIrqPriority
										);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	331c      	adds	r3, #28
 8008798:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800879c:	4611      	mov	r1, r2
 800879e:	4618      	mov	r0, r3
 80087a0:	f7ff ff21 	bl	80085e6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    baseThread = make_unique<pruThread>(
 80087a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 fd5b 	bl	8009264 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
    servoThread = make_unique<pruThread>(
    									"Servo",
										TIM2,
 80087ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80087b2:	63bb      	str	r3, [r7, #56]	@ 0x38
										TIM2_IRQn,
 80087b4:	231c      	movs	r3, #28
 80087b6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
										servoFreq,
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	3328      	adds	r3, #40	@ 0x28
    servoThread = make_unique<pruThread>(
 80087bc:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80087c0:	f107 013e 	add.w	r1, r7, #62	@ 0x3e
 80087c4:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80087c8:	4c21      	ldr	r4, [pc, #132]	@ (8008850 <_ZN6RemoraC1Ev+0x214>)
 80087ca:	9401      	str	r4, [sp, #4]
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	460b      	mov	r3, r1
 80087d0:	4920      	ldr	r1, [pc, #128]	@ (8008854 <_ZN6RemoraC1Ev+0x218>)
 80087d2:	f000 fedf 	bl	8009594 <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::servoThreadIrqPriority
										);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	3320      	adds	r3, #32
 80087da:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80087de:	4611      	mov	r1, r2
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7ff ff00 	bl	80085e6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    servoThread = make_unique<pruThread>(
 80087e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 fd3a 	bl	8009264 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
	commsThread = new pruThread(TIM4, TIM4_IRQn, PRU_COMMSFREQ, commsCount);
	NVIC_SetPriority(TIM4_IRQn, COMMS_THREAD_IRQ_PRIORITY);
	*/


    servoThread->registerModule(comms);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	3320      	adds	r3, #32
 80087f4:	4618      	mov	r0, r3
 80087f6:	f000 ff1e 	bl	8009636 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 80087fa:	4604      	mov	r4, r0
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f103 0214 	add.w	r2, r3, #20
 8008802:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008806:	4611      	mov	r1, r2
 8008808:	4618      	mov	r0, r3
 800880a:	f000 ff20 	bl	800964e <_ZNSt10shared_ptrI6ModuleEC1I12CommsHandlervEERKS_IT_E>
 800880e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008812:	4619      	mov	r1, r3
 8008814:	4620      	mov	r0, r4
 8008816:	f007 facf 	bl	800fdb8 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800881a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800881e:	4618      	mov	r0, r3
 8008820:	f7ff feff 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 8008824:	f107 030c 	add.w	r3, r7, #12
 8008828:	4618      	mov	r0, r3
 800882a:	f000 fd9d 	bl	8009368 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4618      	mov	r0, r3
 8008832:	374c      	adds	r7, #76	@ 0x4c
 8008834:	46bd      	mov	sp, r7
 8008836:	bd90      	pop	{r4, r7, pc}
 8008838:	30000080 	.word	0x30000080
 800883c:	300000c0 	.word	0x300000c0
 8008840:	40013000 	.word	0x40013000
 8008844:	40000400 	.word	0x40000400
 8008848:	0801f5c4 	.word	0x0801f5c4
 800884c:	0801efdc 	.word	0x0801efdc
 8008850:	0801f5c8 	.word	0x0801f5c8
 8008854:	0801efe4 	.word	0x0801efe4

08008858 <_ZN6Remora17transitionToStateENS_5StateE>:

void Remora::transitionToState(State newState) {
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	70fb      	strb	r3, [r7, #3]
    if (currentState != newState) {
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	78fa      	ldrb	r2, [r7, #3]
 800886a:	429a      	cmp	r2, r3
 800886c:	d00e      	beq.n	800888c <_ZN6Remora17transitionToStateENS_5StateE+0x34>
        printf("\n## Transitioning from state %d to state %d\n", currentState, newState);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	4619      	mov	r1, r3
 8008874:	78fb      	ldrb	r3, [r7, #3]
 8008876:	461a      	mov	r2, r3
 8008878:	4806      	ldr	r0, [pc, #24]	@ (8008894 <_ZN6Remora17transitionToStateENS_5StateE+0x3c>)
 800887a:	f015 fa8b 	bl	801dd94 <iprintf>
        prevState = currentState;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	781a      	ldrb	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	705a      	strb	r2, [r3, #1]
        currentState = newState;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	78fa      	ldrb	r2, [r7, #3]
 800888a:	701a      	strb	r2, [r3, #0]
    }
}
 800888c:	bf00      	nop
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	0801efec 	.word	0x0801efec

08008898 <_ZN6Remora16handleSetupStateEv>:

void Remora::handleSetupState() {
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	781a      	ldrb	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	785b      	ldrb	r3, [r3, #1]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d002      	beq.n	80088b2 <_ZN6Remora16handleSetupStateEv+0x1a>
        printf("\n## Entering SETUP state\n");
 80088ac:	4808      	ldr	r0, [pc, #32]	@ (80088d0 <_ZN6Remora16handleSetupStateEv+0x38>)
 80088ae:	f015 fae1 	bl	801de74 <puts>
    }
    prevState = currentState;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	781a      	ldrb	r2, [r3, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	705a      	strb	r2, [r3, #1]

    loadModules();
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 f962 	bl	8008b84 <_ZN6Remora11loadModulesEv>
    transitionToState(ST_START);
 80088c0:	2101      	movs	r1, #1
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7ff ffc8 	bl	8008858 <_ZN6Remora17transitionToStateENS_5StateE>
}
 80088c8:	bf00      	nop
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	0801f01c 	.word	0x0801f01c

080088d4 <_ZN6Remora16handleStartStateEv>:

void Remora::handleStartState() {
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	781a      	ldrb	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	785b      	ldrb	r3, [r3, #1]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d002      	beq.n	80088ee <_ZN6Remora16handleStartStateEv+0x1a>
        printf("\n## Entering START state\n");
 80088e8:	4814      	ldr	r0, [pc, #80]	@ (800893c <_ZN6Remora16handleStartStateEv+0x68>)
 80088ea:	f015 fac3 	bl	801de74 <puts>
    }
    prevState = currentState;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	781a      	ldrb	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	705a      	strb	r2, [r3, #1]

    if (!threadsRunning) {
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80088fc:	f083 0301 	eor.w	r3, r3, #1
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	d011      	beq.n	800892a <_ZN6Remora16handleStartStateEv+0x56>
        startThread(servoThread, "SERVO");
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	3320      	adds	r3, #32
 800890a:	4a0d      	ldr	r2, [pc, #52]	@ (8008940 <_ZN6Remora16handleStartStateEv+0x6c>)
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f8a8 	bl	8008a64 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>
        startThread(baseThread, "BASE");
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	331c      	adds	r3, #28
 8008918:	4a0a      	ldr	r2, [pc, #40]	@ (8008944 <_ZN6Remora16handleStartStateEv+0x70>)
 800891a:	4619      	mov	r1, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f8a1 	bl	8008a64 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>
        threadsRunning = true;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    }

    transitionToState(ST_IDLE);
 800892a:	2102      	movs	r1, #2
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7ff ff93 	bl	8008858 <_ZN6Remora17transitionToStateENS_5StateE>
}
 8008932:	bf00      	nop
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	0801f038 	.word	0x0801f038
 8008940:	0801f054 	.word	0x0801f054
 8008944:	0801f05c 	.word	0x0801f05c

08008948 <_ZN6Remora15handleIdleStateEv>:

void Remora::handleIdleState() {
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	781a      	ldrb	r2, [r3, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	785b      	ldrb	r3, [r3, #1]
 8008958:	429a      	cmp	r2, r3
 800895a:	d002      	beq.n	8008962 <_ZN6Remora15handleIdleStateEv+0x1a>
        printf("\n## Entering IDLE state\n");
 800895c:	480d      	ldr	r0, [pc, #52]	@ (8008994 <_ZN6Remora15handleIdleStateEv+0x4c>)
 800895e:	f015 fa89 	bl	801de74 <puts>
    }
    prevState = currentState;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	781a      	ldrb	r2, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	705a      	strb	r2, [r3, #1]

    if (comms->getStatus()) {
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	3314      	adds	r3, #20
 800896e:	4618      	mov	r0, r3
 8008970:	f000 fd3d 	bl	80093ee <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008974:	4603      	mov	r3, r0
 8008976:	4618      	mov	r0, r3
 8008978:	f7ff fd6b 	bl	8008452 <_ZNK12CommsHandler9getStatusEv>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <_ZN6Remora15handleIdleStateEv+0x42>
        transitionToState(ST_RUNNING);
 8008982:	2103      	movs	r1, #3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f7ff ff67 	bl	8008858 <_ZN6Remora17transitionToStateENS_5StateE>
    }
}
 800898a:	bf00      	nop
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	0801f064 	.word	0x0801f064

08008998 <_ZN6Remora18handleRunningStateEv>:

void Remora::handleRunningState() {
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	781a      	ldrb	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	785b      	ldrb	r3, [r3, #1]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d002      	beq.n	80089b2 <_ZN6Remora18handleRunningStateEv+0x1a>
        printf("\n## Entering RUNNING state\n");
 80089ac:	4813      	ldr	r0, [pc, #76]	@ (80089fc <_ZN6Remora18handleRunningStateEv+0x64>)
 80089ae:	f015 fa61 	bl	801de74 <puts>
    }
    prevState = currentState;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	781a      	ldrb	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	705a      	strb	r2, [r3, #1]

    if (!comms->getStatus()) {
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	3314      	adds	r3, #20
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 fd15 	bl	80093ee <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80089c4:	4603      	mov	r3, r0
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7ff fd43 	bl	8008452 <_ZNK12CommsHandler9getStatusEv>
 80089cc:	4603      	mov	r3, r0
 80089ce:	f083 0301 	eor.w	r3, r3, #1
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d003      	beq.n	80089e0 <_ZN6Remora18handleRunningStateEv+0x48>
        transitionToState(ST_RESET);
 80089d8:	2105      	movs	r1, #5
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f7ff ff3c 	bl	8008858 <_ZN6Remora17transitionToStateENS_5StateE>
    }

    if (reset) {
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	7b1b      	ldrb	r3, [r3, #12]
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <_ZN6Remora18handleRunningStateEv+0x5a>
    	transitionToState(ST_SYSRESET);
 80089ea:	2106      	movs	r1, #6
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7ff ff33 	bl	8008858 <_ZN6Remora17transitionToStateENS_5StateE>
    }
}
 80089f2:	bf00      	nop
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	0801f07c 	.word	0x0801f07c

08008a00 <_ZN6Remora16handleResetStateEv>:

void Remora::handleResetState() {
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	781a      	ldrb	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	785b      	ldrb	r3, [r3, #1]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d002      	beq.n	8008a1a <_ZN6Remora16handleResetStateEv+0x1a>
        printf("\n## Entering RESET state\n");
 8008a14:	480c      	ldr	r0, [pc, #48]	@ (8008a48 <_ZN6Remora16handleResetStateEv+0x48>)
 8008a16:	f015 fa2d 	bl	801de74 <puts>
    }
    prevState = currentState;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	781a      	ldrb	r2, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	705a      	strb	r2, [r3, #1]

    printf("   Resetting rxBuffer\n");
 8008a22:	480a      	ldr	r0, [pc, #40]	@ (8008a4c <_ZN6Remora16handleResetStateEv+0x4c>)
 8008a24:	f015 fa26 	bl	801de74 <puts>
    resetBuffer(ptrRxData->rxBuffer, Config::dataBuffSize);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	2240      	movs	r2, #64	@ 0x40
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f82f 	bl	8008a94 <_ZN6Remora11resetBufferEPVhj>
    transitionToState(ST_IDLE);
 8008a36:	2102      	movs	r1, #2
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7ff ff0d 	bl	8008858 <_ZN6Remora17transitionToStateENS_5StateE>
}
 8008a3e:	bf00      	nop
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	0801f098 	.word	0x0801f098
 8008a4c:	0801f0b4 	.word	0x0801f0b4

08008a50 <_ZN6Remora19handleSysResetStateEv>:

void Remora::handleSysResetState() {
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
	HAL_NVIC_SystemReset();
 8008a58:	f008 f935 	bl	8010cc6 <HAL_NVIC_SystemReset>
}
 8008a5c:	bf00      	nop
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>:

void Remora::startThread(const std::unique_ptr<pruThread>& thread, const char* name) {
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
    printf("Starting the %s thread\n", name);
 8008a70:	6879      	ldr	r1, [r7, #4]
 8008a72:	4807      	ldr	r0, [pc, #28]	@ (8008a90 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc+0x2c>)
 8008a74:	f015 f98e 	bl	801dd94 <iprintf>
    thread->startThread();
 8008a78:	68b8      	ldr	r0, [r7, #8]
 8008a7a:	f000 fddc 	bl	8009636 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	4618      	mov	r0, r3
 8008a82:	f007 f9d5 	bl	800fe30 <_ZN9pruThread11startThreadEv>
}
 8008a86:	bf00      	nop
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	0801f0cc 	.word	0x0801f0cc

08008a94 <_ZN6Remora11resetBufferEPVhj>:

void Remora::resetBuffer(volatile uint8_t* buffer, size_t size) {
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
    memset((void*)buffer, 0, size);
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	68b8      	ldr	r0, [r7, #8]
 8008aa6:	f015 fadf 	bl	801e068 <memset>
}
 8008aaa:	bf00      	nop
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
	...

08008ab4 <_ZN6Remora3runEv>:

void Remora::run() {
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
    while (true) {
        switch (currentState) {
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	2b06      	cmp	r3, #6
 8008ac2:	d829      	bhi.n	8008b18 <_ZN6Remora3runEv+0x64>
 8008ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8008acc <_ZN6Remora3runEv+0x18>)
 8008ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aca:	bf00      	nop
 8008acc:	08008ae9 	.word	0x08008ae9
 8008ad0:	08008af1 	.word	0x08008af1
 8008ad4:	08008af9 	.word	0x08008af9
 8008ad8:	08008b01 	.word	0x08008b01
 8008adc:	08008b19 	.word	0x08008b19
 8008ae0:	08008b09 	.word	0x08008b09
 8008ae4:	08008b11 	.word	0x08008b11
            case ST_SETUP:
                handleSetupState();
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f7ff fed5 	bl	8008898 <_ZN6Remora16handleSetupStateEv>
                break;
 8008aee:	e017      	b.n	8008b20 <_ZN6Remora3runEv+0x6c>
            case ST_START:
                handleStartState();
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7ff feef 	bl	80088d4 <_ZN6Remora16handleStartStateEv>
                break;
 8008af6:	e013      	b.n	8008b20 <_ZN6Remora3runEv+0x6c>
            case ST_IDLE:
                handleIdleState();
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f7ff ff25 	bl	8008948 <_ZN6Remora15handleIdleStateEv>
                break;
 8008afe:	e00f      	b.n	8008b20 <_ZN6Remora3runEv+0x6c>
            case ST_RUNNING:
                handleRunningState();
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7ff ff49 	bl	8008998 <_ZN6Remora18handleRunningStateEv>
                break;
 8008b06:	e00b      	b.n	8008b20 <_ZN6Remora3runEv+0x6c>
            case ST_RESET:
                handleResetState();
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7ff ff79 	bl	8008a00 <_ZN6Remora16handleResetStateEv>
                break;
 8008b0e:	e007      	b.n	8008b20 <_ZN6Remora3runEv+0x6c>
            case ST_SYSRESET:
                handleSysResetState();
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7ff ff9d 	bl	8008a50 <_ZN6Remora19handleSysResetStateEv>
                break;
 8008b16:	e003      	b.n	8008b20 <_ZN6Remora3runEv+0x6c>
            default:
                printf("Error: Invalid state\n");
 8008b18:	4806      	ldr	r0, [pc, #24]	@ (8008b34 <_ZN6Remora3runEv+0x80>)
 8008b1a:	f015 f9ab 	bl	801de74 <puts>
                break;
 8008b1e:	bf00      	nop
        }
        comms->tasks();
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3314      	adds	r3, #20
 8008b24:	4618      	mov	r0, r3
 8008b26:	f000 fc62 	bl	80093ee <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f004 fc53 	bl	800d3d8 <_ZN12CommsHandler5tasksEv>
        switch (currentState) {
 8008b32:	e7c3      	b.n	8008abc <_ZN6Remora3runEv+0x8>
 8008b34:	0801f0e4 	.word	0x0801f0e4

08008b38 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	601a      	str	r2, [r3, #0]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	1d1a      	adds	r2, r3, #4
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	3304      	adds	r3, #4
 8008b52:	4619      	mov	r1, r3
 8008b54:	4610      	mov	r0, r2
 8008b56:	f000 fdec 	bl	8009732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	4611      	mov	r1, r2
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7ff ffdf 	bl	8008b38 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <_ZN6Remora11loadModulesEv>:
    }
}

void Remora::loadModules() {
 8008b84:	b5b0      	push	{r4, r5, r7, lr}
 8008b86:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8008b8a:	af04      	add	r7, sp, #16
 8008b8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008b90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008b94:	6018      	str	r0, [r3, #0]
    ModuleFactory* factory = ModuleFactory::getInstance();
 8008b96:	f005 f8c1 	bl	800dd1c <_ZN13ModuleFactory11getInstanceEv>
 8008b9a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
    JsonArray modules = configHandler->getModules();
 8008b9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008ba2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	3310      	adds	r3, #16
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 fd5f 	bl	800966e <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008bb6:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8008bba:	4611      	mov	r1, r2
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7fb fca7 	bl	8004510 <_ZN17JsonConfigHandler10getModulesEv>
    if (modules.isNull()) {
 8008bc2:	f107 0318 	add.w	r3, r7, #24
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7ff fadc 	bl	8008184 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>
      //printf something here
    }

    for (size_t i = 0; i < modules.size(); i++) {
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8008bd2:	e254      	b.n	800907e <_ZN6Remora11loadModulesEv+0x4fa>
        //if (modules[i].containsKey("Thread") && modules[i].containsKey("Type")) {
    	if (modules[i]["Thread"].is<const char*>() && modules[i]["Type"].is<const char*>()) {
 8008bd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008bd8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8008bdc:	f107 0118 	add.w	r1, r7, #24
 8008be0:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 fd4e 	bl	8009686 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008bea:	f107 0420 	add.w	r4, r7, #32

template <typename TDerived>
template <typename TString, enable_if_t<IsString<TString>::value, int>>
inline MemberProxy<TDerived, AdaptedString<TString>>
VariantRefBase<TDerived>::operator[](const TString& key) const {
  return {derived(), adaptString(key)};
 8008bee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f001 f9a9 	bl	8009f4a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8008bfe:	4611      	mov	r1, r2
 8008c00:	4618      	mov	r0, r3
 8008c02:	f001 f9ad 	bl	8009f60 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8008c06:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008c0a:	49c3      	ldr	r1, [pc, #780]	@ (8008f18 <_ZN6Remora11loadModulesEv+0x394>)
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7fc fd12 	bl	8005636 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8008c12:	f507 71ae 	add.w	r1, r7, #348	@ 0x15c
 8008c16:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008c20:	cb0c      	ldmia	r3, {r2, r3}
 8008c22:	4620      	mov	r0, r4
 8008c24:	f001 f9b4 	bl	8009f90 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8008c28:	f107 0320 	add.w	r3, r7, #32
 8008c2c:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8008c30:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8008c34:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8008c38:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 8008c3c:	f001 fe3f 	bl	800a8be <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 8008c40:	4604      	mov	r4, r0
 8008c42:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 8008c46:	f001 fe4a 	bl	800a8de <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8008c50:	4621      	mov	r1, r4
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7fa f90b 	bl	8002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8008c58:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 8008c5a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8008c5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008c62:	f7ff fba8 	bl	80083b6 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 8008c66:	4603      	mov	r3, r0
 8008c68:	bf00      	nop
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d04e      	beq.n	8008d0c <_ZN6Remora11loadModulesEv+0x188>
 8008c6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008c72:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8008c76:	f107 0118 	add.w	r1, r7, #24
 8008c7a:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 fd01 	bl	8009686 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008c84:	f107 0450 	add.w	r4, r7, #80	@ 0x50
  return {derived(), adaptString(key)};
 8008c88:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f001 f95c 	bl	8009f4a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008c92:	4602      	mov	r2, r0
 8008c94:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8008c98:	4611      	mov	r1, r2
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f001 f960 	bl	8009f60 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8008ca0:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8008ca4:	499d      	ldr	r1, [pc, #628]	@ (8008f1c <_ZN6Remora11loadModulesEv+0x398>)
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f001 f991 	bl	8009fce <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8008cac:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8008cb0:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8008cba:	cb0c      	ldmia	r3, {r2, r3}
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f001 f967 	bl	8009f90 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8008cc2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008cc6:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8008cca:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8008cce:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8008cd2:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 8008cd6:	f001 fdf2 	bl	800a8be <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 8008cda:	4604      	mov	r4, r0
 8008cdc:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 8008ce0:	f001 fdfd 	bl	800a8de <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8008cea:	4621      	mov	r1, r4
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7fa f8be 	bl	8002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8008cf2:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 8008cf4:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8008cf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008cfc:	f7ff fb5b 	bl	80083b6 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 8008d00:	4603      	mov	r3, r0
 8008d02:	bf00      	nop
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d001      	beq.n	8008d0c <_ZN6Remora11loadModulesEv+0x188>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e000      	b.n	8008d0e <_ZN6Remora11loadModulesEv+0x18a>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f000 81b0 	beq.w	8009074 <_ZN6Remora11loadModulesEv+0x4f0>
            const char* threadName = modules[i]["Thread"];
 8008d14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008d18:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8008d1c:	f107 0118 	add.w	r1, r7, #24
 8008d20:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 fcae 	bl	8009686 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008d2a:	f107 0480 	add.w	r4, r7, #128	@ 0x80
  return {derived(), adaptString(key)};
 8008d2e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8008d32:	4618      	mov	r0, r3
 8008d34:	f001 f909 	bl	8009f4a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8008d3e:	4611      	mov	r1, r2
 8008d40:	4618      	mov	r0, r3
 8008d42:	f001 f90d 	bl	8009f60 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8008d46:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 8008d4a:	4973      	ldr	r1, [pc, #460]	@ (8008f18 <_ZN6Remora11loadModulesEv+0x394>)
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7fc fc72 	bl	8005636 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8008d52:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 8008d56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 8008d60:	cb0c      	ldmia	r3, {r2, r3}
 8008d62:	4620      	mov	r0, r4
 8008d64:	f001 f914 	bl	8009f90 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8008d68:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f000 fc9a 	bl	80096a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8008d72:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
            const char* moduleType = modules[i]["Type"];
 8008d76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008d7a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008d7e:	f107 0118 	add.w	r1, r7, #24
 8008d82:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 fc7d 	bl	8009686 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008d8c:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 8008d90:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8008d94:	4618      	mov	r0, r3
 8008d96:	f001 f8d8 	bl	8009f4a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 8008da0:	4611      	mov	r1, r2
 8008da2:	4618      	mov	r0, r3
 8008da4:	f001 f8dc 	bl	8009f60 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8008da8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008dac:	495b      	ldr	r1, [pc, #364]	@ (8008f1c <_ZN6Remora11loadModulesEv+0x398>)
 8008dae:	4618      	mov	r0, r3
 8008db0:	f001 f90d 	bl	8009fce <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8008db4:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 8008db8:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008dc2:	cb0c      	ldmia	r3, {r2, r3}
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f001 f8e3 	bl	8009f90 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8008dca:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 fc69 	bl	80096a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8008dd4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
            uint32_t threadFreq = 0;
 8008dd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008ddc:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8008de0:	2200      	movs	r2, #0
 8008de2:	601a      	str	r2, [r3, #0]

            // Determine the thread frequency based on the thread name
            if (strcmp(threadName, "Servo") == 0) {
 8008de4:	494e      	ldr	r1, [pc, #312]	@ (8008f20 <_ZN6Remora11loadModulesEv+0x39c>)
 8008de6:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 8008dea:	f7f7 fa79 	bl	80002e0 <strcmp>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10b      	bne.n	8008e0c <_ZN6Remora11loadModulesEv+0x288>
                threadFreq = servoFreq;
 8008df4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008df8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008e04:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8008e08:	601a      	str	r2, [r3, #0]
 8008e0a:	e012      	b.n	8008e32 <_ZN6Remora11loadModulesEv+0x2ae>
            } else if (strcmp(threadName, "Base") == 0) {
 8008e0c:	4945      	ldr	r1, [pc, #276]	@ (8008f24 <_ZN6Remora11loadModulesEv+0x3a0>)
 8008e0e:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 8008e12:	f7f7 fa65 	bl	80002e0 <strcmp>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10a      	bne.n	8008e32 <_ZN6Remora11loadModulesEv+0x2ae>
                threadFreq = baseFreq;
 8008e1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008e20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008e2c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8008e30:	601a      	str	r2, [r3, #0]
            }

            // Add the "ThreadFreq" key and its value to the module's JSON object
            modules[i]["ThreadFreq"] = threadFreq;
 8008e32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008e36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e3a:	f107 0118 	add.w	r1, r7, #24
 8008e3e:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 fc1f 	bl	8009686 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008e48:	f107 04e0 	add.w	r4, r7, #224	@ 0xe0
 8008e4c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8008e50:	4618      	mov	r0, r3
 8008e52:	f001 f87a 	bl	8009f4a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008e56:	4602      	mov	r2, r0
 8008e58:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f001 f87e 	bl	8009f60 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8008e64:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8008e68:	492f      	ldr	r1, [pc, #188]	@ (8008f28 <_ZN6Remora11loadModulesEv+0x3a4>)
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f001 f8e4 	bl	800a038 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8008e70:	f507 71ea 	add.w	r1, r7, #468	@ 0x1d4
 8008e74:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8008e7e:	cb0c      	ldmia	r3, {r2, r3}
 8008e80:	4620      	mov	r0, r4
 8008e82:	f001 f885 	bl	8009f90 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8008e86:	f107 0214 	add.w	r2, r7, #20
 8008e8a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8008e8e:	4611      	mov	r1, r2
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 fc14 	bl	80096be <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>

            // Create module using factory
            std::shared_ptr<Module> _mod = factory->createModule(threadName, moduleType, modules[i], this);
 8008e96:	f8d7 5200 	ldr.w	r5, [r7, #512]	@ 0x200
 8008e9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e9e:	f107 0118 	add.w	r1, r7, #24
 8008ea2:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 fbed 	bl	8009686 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008eac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008eb0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 fc0f 	bl	80096da <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>
 8008ebc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008ec0:	f5a3 74fe 	sub.w	r4, r3, #508	@ 0x1fc
 8008ec4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008ec8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	9302      	str	r3, [sp, #8]
 8008ed0:	466a      	mov	r2, sp
 8008ed2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008ed6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008eda:	e882 0003 	stmia.w	r2, {r0, r1}
 8008ede:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8008ee2:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	4620      	mov	r0, r4
 8008eea:	f004 fea7 	bl	800dc3c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora>

            // Check if the module creation was successful
            if (!_mod) {
 8008eee:	f107 030c 	add.w	r3, r7, #12
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 fc00 	bl	80096f8 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	f083 0301 	eor.w	r3, r3, #1
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d015      	beq.n	8008f30 <_ZN6Remora11loadModulesEv+0x3ac>
            	printf("Error: Failed to create module of type '%s' for thread '%s'. Skipping registration.\n",
 8008f04:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8008f08:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 8008f0c:	4807      	ldr	r0, [pc, #28]	@ (8008f2c <_ZN6Remora11loadModulesEv+0x3a8>)
 8008f0e:	f014 ff41 	bl	801dd94 <iprintf>
						moduleType, threadName);
				continue; // Skip to the next iteration
 8008f12:	2400      	movs	r4, #0
 8008f14:	e0a8      	b.n	8009068 <_ZN6Remora11loadModulesEv+0x4e4>
 8008f16:	bf00      	nop
 8008f18:	0801f0fc 	.word	0x0801f0fc
 8008f1c:	0801f104 	.word	0x0801f104
 8008f20:	0801efe4 	.word	0x0801efe4
 8008f24:	0801efdc 	.word	0x0801efdc
 8008f28:	0801f10c 	.word	0x0801f10c
 8008f2c:	0801f118 	.word	0x0801f118
			}

            bool _modPost = _mod->getUsesModulePost();
 8008f30:	f107 030c 	add.w	r3, r7, #12
 8008f34:	4618      	mov	r0, r3
 8008f36:	f000 fbf0 	bl	800971a <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	3218      	adds	r2, #24
 8008f40:	6812      	ldr	r2, [r2, #0]
 8008f42:	4618      	mov	r0, r3
 8008f44:	4790      	blx	r2
 8008f46:	4603      	mov	r3, r0
 8008f48:	f887 31f7 	strb.w	r3, [r7, #503]	@ 0x1f7

            if (strcmp(threadName, "Servo") == 0) {
 8008f4c:	4957      	ldr	r1, [pc, #348]	@ (80090ac <_ZN6Remora11loadModulesEv+0x528>)
 8008f4e:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 8008f52:	f7f7 f9c5 	bl	80002e0 <strcmp>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d13e      	bne.n	8008fda <_ZN6Remora11loadModulesEv+0x456>
                servoThread->registerModule(_mod);
 8008f5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008f60:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	3320      	adds	r3, #32
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 fb64 	bl	8009636 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 8008f6e:	4604      	mov	r4, r0
 8008f70:	f107 020c 	add.w	r2, r7, #12
 8008f74:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008f78:	4611      	mov	r1, r2
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7ff fdf2 	bl	8008b64 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 8008f80:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008f84:	4619      	mov	r1, r3
 8008f86:	4620      	mov	r0, r4
 8008f88:	f006 ff16 	bl	800fdb8 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 8008f8c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7ff fb46 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 8008f96:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d063      	beq.n	8009066 <_ZN6Remora11loadModulesEv+0x4e2>
            		servoThread->registerModulePost(_mod);
 8008f9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008fa2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	3320      	adds	r3, #32
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 fb43 	bl	8009636 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	f107 020c 	add.w	r2, r7, #12
 8008fb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fba:	4611      	mov	r1, r2
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7ff fdd1 	bl	8008b64 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 8008fc2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	4620      	mov	r0, r4
 8008fca:	f006 ff11 	bl	800fdf0 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 8008fce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7ff fb25 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
 8008fd8:	e045      	b.n	8009066 <_ZN6Remora11loadModulesEv+0x4e2>
            	}
            }
            else if (strcmp(threadName, "Base") == 0) {
 8008fda:	4935      	ldr	r1, [pc, #212]	@ (80090b0 <_ZN6Remora11loadModulesEv+0x52c>)
 8008fdc:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 8008fe0:	f7f7 f97e 	bl	80002e0 <strcmp>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d13d      	bne.n	8009066 <_ZN6Remora11loadModulesEv+0x4e2>
                baseThread->registerModule(_mod);
 8008fea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008fee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	331c      	adds	r3, #28
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 fb1d 	bl	8009636 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	f107 020c 	add.w	r2, r7, #12
 8009002:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009006:	4611      	mov	r1, r2
 8009008:	4618      	mov	r0, r3
 800900a:	f7ff fdab 	bl	8008b64 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800900e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009012:	4619      	mov	r1, r3
 8009014:	4620      	mov	r0, r4
 8009016:	f006 fecf 	bl	800fdb8 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800901a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800901e:	4618      	mov	r0, r3
 8009020:	f7ff faff 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 8009024:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 8009028:	2b00      	cmp	r3, #0
 800902a:	d01c      	beq.n	8009066 <_ZN6Remora11loadModulesEv+0x4e2>
            		servoThread->registerModulePost(_mod);
 800902c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009030:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3320      	adds	r3, #32
 8009038:	4618      	mov	r0, r3
 800903a:	f000 fafc 	bl	8009636 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800903e:	4604      	mov	r4, r0
 8009040:	f107 020c 	add.w	r2, r7, #12
 8009044:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009048:	4611      	mov	r1, r2
 800904a:	4618      	mov	r0, r3
 800904c:	f7ff fd8a 	bl	8008b64 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 8009050:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009054:	4619      	mov	r1, r3
 8009056:	4620      	mov	r0, r4
 8009058:	f006 feca 	bl	800fdf0 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 800905c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009060:	4618      	mov	r0, r3
 8009062:	f7ff fade 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	}
            }
            else {
                //onLoad.push_back(move(_mod));
            }
        }
 8009066:	2401      	movs	r4, #1
 8009068:	f107 030c 	add.w	r3, r7, #12
 800906c:	4618      	mov	r0, r3
 800906e:	f7ff fad8 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
 8009072:	2c01      	cmp	r4, #1
    for (size_t i = 0; i < modules.size(); i++) {
 8009074:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8009078:	3301      	adds	r3, #1
 800907a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800907e:	f107 0318 	add.w	r3, r7, #24
 8009082:	4618      	mov	r0, r3
 8009084:	f7ff f88f 	bl	80081a6 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>
 8009088:	4602      	mov	r2, r0
 800908a:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800908e:	4293      	cmp	r3, r2
 8009090:	bf34      	ite	cc
 8009092:	2301      	movcc	r3, #1
 8009094:	2300      	movcs	r3, #0
 8009096:	b2db      	uxtb	r3, r3
 8009098:	2b00      	cmp	r3, #0
 800909a:	f47f ad9b 	bne.w	8008bd4 <_ZN6Remora11loadModulesEv+0x50>
    }

}
 800909e:	bf00      	nop
 80090a0:	bf00      	nop
 80090a2:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bdb0      	pop	{r4, r5, r7, pc}
 80090aa:	bf00      	nop
 80090ac:	0801efe4 	.word	0x0801efe4
 80090b0:	0801efdc 	.word	0x0801efdc

080090b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
      { delete this; }
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d005      	beq.n	80090ce <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3304      	adds	r3, #4
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	4798      	blx	r3
 80090ce:	bf00      	nop
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>:
  ~MemoryPoolList() {
 80090d6:	b480      	push	{r7}
 80090d8:	b083      	sub	sp, #12
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  }
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4618      	mov	r0, r3
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr

08009102 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 8009102:	b580      	push	{r7, lr}
 8009104:	b082      	sub	sp, #8
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
 800910a:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800910c:	6838      	ldr	r0, [r7, #0]
 800910e:	f000 fb9d 	bl	800984c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>
 8009112:	4603      	mov	r3, r0
 8009114:	4619      	mov	r1, r3
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fb78 	bl	800980c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800911c:	6838      	ldr	r0, [r7, #0]
 800911e:	f000 fbaa 	bl	8009876 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 8009122:	4603      	mov	r3, r0
 8009124:	4618      	mov	r0, r3
 8009126:	f000 fbb3 	bl	8009890 <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fba3 	bl	8009876 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 8009130:	687b      	ldr	r3, [r7, #4]
      }
 8009132:	4618      	mov	r0, r3
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800913a:	b580      	push	{r7, lr}
 800913c:	b082      	sub	sp, #8
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fbae 	bl	80098a6 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4618      	mov	r0, r3
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff ffeb 	bl	800913a <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4618      	mov	r0, r3
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800916e:	b580      	push	{r7, lr}
 8009170:	b082      	sub	sp, #8
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
	: _M_t()
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	601a      	str	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4618      	mov	r0, r3
 8009180:	f7ff ffe8 	bl	8009154 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4618      	mov	r0, r3
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800918e:	b590      	push	{r4, r7, lr}
 8009190:	b085      	sub	sp, #20
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4618      	mov	r0, r3
 800919a:	f000 fb91 	bl	80098c0 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800919e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00c      	beq.n	80091c2 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fb96 	bl	80098da <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>
 80091ae:	4604      	mov	r4, r0
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f000 fb9f 	bl	80098f4 <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 80091b6:	4603      	mov	r3, r0
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4619      	mov	r1, r3
 80091bc:	4620      	mov	r0, r4
 80091be:	f000 fbb7 	bl	8009930 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
	__ptr = pointer();
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	601a      	str	r2, [r3, #0]
      }
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4618      	mov	r0, r3
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd90      	pop	{r4, r7, pc}

080091d2 <_ZNSt10shared_ptrI12CommsHandlerEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b082      	sub	sp, #8
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 fbba 	bl	8009956 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4618      	mov	r0, r3
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d004      	beq.n	8009206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4618      	mov	r0, r3
 8009202:	f7fe fe5a 	bl	8007eba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4618      	mov	r0, r3
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4618      	mov	r0, r3
 800921c:	f000 fbac 	bl	8009978 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4618      	mov	r0, r3
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800922a:	b580      	push	{r7, lr}
 800922c:	b082      	sub	sp, #8
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4618      	mov	r0, r3
 8009236:	f7ff ffeb 	bl	8009210 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4618      	mov	r0, r3
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
	: _M_t()
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	601a      	str	r2, [r3, #0]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4618      	mov	r0, r3
 8009256:	f7ff ffe8 	bl	800922a <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4618      	mov	r0, r3
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8009264:	b590      	push	{r4, r7, lr}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4618      	mov	r0, r3
 8009270:	f000 fb8f 	bl	8009992 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8009274:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00c      	beq.n	8009298 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fb94 	bl	80099ac <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>
 8009284:	4604      	mov	r4, r0
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f000 fb9d 	bl	80099c6 <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>
 800928c:	4603      	mov	r3, r0
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4619      	mov	r1, r3
 8009292:	4620      	mov	r0, r4
 8009294:	f000 fbb9 	bl	8009a0a <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
	__ptr = pointer();
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	601a      	str	r2, [r3, #0]
      }
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4618      	mov	r0, r3
 80092a2:	3714      	adds	r7, #20
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd90      	pop	{r4, r7, pc}

080092a8 <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 80092a8:	b590      	push	{r4, r7, lr}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80092b2:	206c      	movs	r0, #108	@ 0x6c
 80092b4:	f014 f8e0 	bl	801d478 <_Znwj>
 80092b8:	4603      	mov	r3, r0
 80092ba:	461c      	mov	r4, r3
 80092bc:	6838      	ldr	r0, [r7, #0]
 80092be:	f000 fbb7 	bl	8009a30 <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>
 80092c2:	4603      	mov	r3, r0
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4619      	mov	r1, r3
 80092c8:	4620      	mov	r0, r4
 80092ca:	f7fb f813 	bl	80042f4 <_ZN17JsonConfigHandlerC1EP6Remora>
 80092ce:	4621      	mov	r1, r4
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fbc8 	bl	8009a66 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd90      	pop	{r4, r7, pc}

080092de <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 80092de:	b580      	push	{r7, lr}
 80092e0:	b082      	sub	sp, #8
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 80092e8:	6838      	ldr	r0, [r7, #0]
 80092ea:	f000 fbeb 	bl	8009ac4 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>
 80092ee:	4603      	mov	r3, r0
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fbc6 	bl	8009a84 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 80092f8:	6838      	ldr	r0, [r7, #0]
 80092fa:	f000 fbf8 	bl	8009aee <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 80092fe:	4603      	mov	r3, r0
 8009300:	4618      	mov	r0, r3
 8009302:	f000 fc01 	bl	8009b08 <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 fbf1 	bl	8009aee <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800930c:	687b      	ldr	r3, [r7, #4]
      }
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8009316:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009318:	b085      	sub	sp, #20
 800931a:	af00      	add	r7, sp, #0
 800931c:	60f8      	str	r0, [r7, #12]
 800931e:	60b9      	str	r1, [r7, #8]
 8009320:	607a      	str	r2, [r7, #4]
 8009322:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8009324:	f44f 7011 	mov.w	r0, #580	@ 0x244
 8009328:	f014 f8a6 	bl	801d478 <_Znwj>
 800932c:	4603      	mov	r3, r0
 800932e:	461e      	mov	r6, r3
 8009330:	68b8      	ldr	r0, [r7, #8]
 8009332:	f000 fbf4 	bl	8009b1e <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 8009336:	4603      	mov	r3, r0
 8009338:	681c      	ldr	r4, [r3, #0]
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 fbfa 	bl	8009b34 <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 8009340:	4603      	mov	r3, r0
 8009342:	681d      	ldr	r5, [r3, #0]
 8009344:	6838      	ldr	r0, [r7, #0]
 8009346:	f000 fc00 	bl	8009b4a <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800934a:	4603      	mov	r3, r0
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	462a      	mov	r2, r5
 8009350:	4621      	mov	r1, r4
 8009352:	4630      	mov	r0, r6
 8009354:	f7f7 fd32 	bl	8000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>
 8009358:	4631      	mov	r1, r6
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f000 fc10 	bl	8009b80 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	3714      	adds	r7, #20
 8009364:	46bd      	mov	sp, r7
 8009366:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009368 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8009368:	b590      	push	{r4, r7, lr}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4618      	mov	r0, r3
 8009374:	f000 fc13 	bl	8009b9e <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 8009378:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00c      	beq.n	800939c <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fc18 	bl	8009bb8 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 8009388:	4604      	mov	r4, r0
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f000 fc21 	bl	8009bd2 <_ZSt4moveIRP8SPICommsEONSt16remove_referenceIT_E4typeEOS4_>
 8009390:	4603      	mov	r3, r0
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4619      	mov	r1, r3
 8009396:	4620      	mov	r0, r4
 8009398:	f000 fc26 	bl	8009be8 <_ZNKSt14default_deleteI8SPICommsEclEPS0_>
	__ptr = pointer();
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	601a      	str	r2, [r3, #0]
      }
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4618      	mov	r0, r3
 80093a6:	3714      	adds	r7, #20
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd90      	pop	{r4, r7, pc}

080093ac <_ZSt11make_sharedI12CommsHandlerJEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueES4_E4typeEEDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_NonArray<_Tp>>
    make_shared(_Args&&... __args)
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
    {
      using _Alloc = allocator<void>;
      _Alloc __a;
      return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
			     std::forward<_Args>(__args)...);
 80093b4:	f107 030c 	add.w	r3, r7, #12
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fc25 	bl	8009c0a <_ZNSt10shared_ptrI12CommsHandlerEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <_ZNSt10shared_ptrI12CommsHandlerEaSEOS1_>:
      operator=(shared_ptr&& __r) noexcept
 80093c8:	b590      	push	{r4, r7, lr}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 80093d2:	687c      	ldr	r4, [r7, #4]
 80093d4:	6838      	ldr	r0, [r7, #0]
 80093d6:	f000 fc27 	bl	8009c28 <_ZSt4moveIRSt10shared_ptrI12CommsHandlerEEONSt16remove_referenceIT_E4typeEOS5_>
 80093da:	4603      	mov	r3, r0
 80093dc:	4619      	mov	r1, r3
 80093de:	4620      	mov	r0, r4
 80093e0:	f000 fc2d 	bl	8009c3e <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 80093e4:	687b      	ldr	r3, [r7, #4]
      }
 80093e6:	4618      	mov	r0, r3
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd90      	pop	{r4, r7, pc}

080093ee <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b082      	sub	sp, #8
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
	return _M_get();
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fc40 	bl	8009c7c <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80093fc:	4603      	mov	r3, r0
      }
 80093fe:	4618      	mov	r0, r3
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8009406:	b480      	push	{r7}
 8009408:	b083      	sub	sp, #12
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4618      	mov	r0, r3
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	68b9      	ldr	r1, [r7, #8]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	4618      	mov	r0, r3
 8009430:	f000 fc48 	bl	8009cc4 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 800943e:	b5b0      	push	{r4, r5, r7, lr}
 8009440:	b082      	sub	sp, #8
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	6039      	str	r1, [r7, #0]
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 8009448:	687c      	ldr	r4, [r7, #4]
 800944a:	6838      	ldr	r0, [r7, #0]
 800944c:	f000 fc22 	bl	8009c94 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 8009450:	4605      	mov	r5, r0
 8009452:	6838      	ldr	r0, [r7, #0]
 8009454:	f000 fbb0 	bl	8009bb8 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 8009458:	4603      	mov	r3, r0
 800945a:	4618      	mov	r0, r3
 800945c:	f000 fc27 	bl	8009cae <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009460:	4603      	mov	r3, r0
 8009462:	461a      	mov	r2, r3
 8009464:	4629      	mov	r1, r5
 8009466:	4620      	mov	r0, r4
 8009468:	f7ff ffd8 	bl	800941c <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>
	{ }
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4618      	mov	r0, r3
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bdb0      	pop	{r4, r5, r7, pc}

08009476 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8009476:	b590      	push	{r4, r7, lr}
 8009478:	b085      	sub	sp, #20
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4618      	mov	r0, r3
 8009482:	f000 fc35 	bl	8009cf0 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 8009486:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00c      	beq.n	80094aa <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fc3a 	bl	8009d0a <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>
 8009496:	4604      	mov	r4, r0
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f000 fc43 	bl	8009d24 <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 800949e:	4603      	mov	r3, r0
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4619      	mov	r1, r3
 80094a4:	4620      	mov	r0, r4
 80094a6:	f000 fc48 	bl	8009d3a <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
	__ptr = pointer();
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	601a      	str	r2, [r3, #0]
      }
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4618      	mov	r0, r3
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd90      	pop	{r4, r7, pc}

080094ba <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80094ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094be:	b08e      	sub	sp, #56	@ 0x38
 80094c0:	af02      	add	r7, sp, #8
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
 80094c8:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80094ca:	2044      	movs	r0, #68	@ 0x44
 80094cc:	f013 ffd4 	bl	801d478 <_Znwj>
 80094d0:	4603      	mov	r3, r0
 80094d2:	4698      	mov	r8, r3
 80094d4:	68b8      	ldr	r0, [r7, #8]
 80094d6:	f000 fc41 	bl	8009d5c <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80094da:	4604      	mov	r4, r0
 80094dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80094e0:	4618      	mov	r0, r3
 80094e2:	f013 ffda 	bl	801d49a <_ZNSaIcEC1Ev>
 80094e6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80094ea:	f107 0314 	add.w	r3, r7, #20
 80094ee:	4621      	mov	r1, r4
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7fb fc85 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fc3b 	bl	8009d72 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80094fc:	4603      	mov	r3, r0
 80094fe:	681d      	ldr	r5, [r3, #0]
 8009500:	6838      	ldr	r0, [r7, #0]
 8009502:	f000 fc41 	bl	8009d88 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8009506:	4603      	mov	r3, r0
 8009508:	f9b3 6000 	ldrsh.w	r6, [r3]
 800950c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800950e:	f000 fc46 	bl	8009d9e <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 8009512:	4603      	mov	r3, r0
 8009514:	681c      	ldr	r4, [r3, #0]
 8009516:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8009518:	f000 fc4c 	bl	8009db4 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800951c:	4603      	mov	r3, r0
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	b2db      	uxtb	r3, r3
 8009522:	f107 0114 	add.w	r1, r7, #20
 8009526:	9301      	str	r3, [sp, #4]
 8009528:	9400      	str	r4, [sp, #0]
 800952a:	4633      	mov	r3, r6
 800952c:	462a      	mov	r2, r5
 800952e:	4640      	mov	r0, r8
 8009530:	f006 fb86 	bl	800fc40 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 8009534:	4641      	mov	r1, r8
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f000 fc57 	bl	8009dea <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800953c:	f107 0314 	add.w	r3, r7, #20
 8009540:	4618      	mov	r0, r3
 8009542:	f014 f845 	bl	801d5d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009546:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800954a:	4618      	mov	r0, r3
 800954c:	f013 ffa6 	bl	801d49c <_ZNSaIcED1Ev>
 8009550:	bf00      	nop
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	3730      	adds	r7, #48	@ 0x30
 8009556:	46bd      	mov	sp, r7
 8009558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800955c <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8009566:	6838      	ldr	r0, [r7, #0]
 8009568:	f000 fc6e 	bl	8009e48 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>
 800956c:	4603      	mov	r3, r0
 800956e:	4619      	mov	r1, r3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 fc49 	bl	8009e08 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 8009576:	6838      	ldr	r0, [r7, #0]
 8009578:	f000 fc7b 	bl	8009e72 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800957c:	4603      	mov	r3, r0
 800957e:	4618      	mov	r0, r3
 8009580:	f000 fc84 	bl	8009e8c <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 fc74 	bl	8009e72 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800958a:	687b      	ldr	r3, [r7, #4]
      }
 800958c:	4618      	mov	r0, r3
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8009594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009598:	b08e      	sub	sp, #56	@ 0x38
 800959a:	af02      	add	r7, sp, #8
 800959c:	60f8      	str	r0, [r7, #12]
 800959e:	60b9      	str	r1, [r7, #8]
 80095a0:	607a      	str	r2, [r7, #4]
 80095a2:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80095a4:	2044      	movs	r0, #68	@ 0x44
 80095a6:	f013 ff67 	bl	801d478 <_Znwj>
 80095aa:	4603      	mov	r3, r0
 80095ac:	4698      	mov	r8, r3
 80095ae:	68b8      	ldr	r0, [r7, #8]
 80095b0:	f000 fc77 	bl	8009ea2 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80095b4:	4604      	mov	r4, r0
 80095b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80095ba:	4618      	mov	r0, r3
 80095bc:	f013 ff6d 	bl	801d49a <_ZNSaIcEC1Ev>
 80095c0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80095c4:	f107 0314 	add.w	r3, r7, #20
 80095c8:	4621      	mov	r1, r4
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fb fc18 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fbce 	bl	8009d72 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80095d6:	4603      	mov	r3, r0
 80095d8:	681d      	ldr	r5, [r3, #0]
 80095da:	6838      	ldr	r0, [r7, #0]
 80095dc:	f000 fbd4 	bl	8009d88 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 80095e0:	4603      	mov	r3, r0
 80095e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80095e6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80095e8:	f000 fbd9 	bl	8009d9e <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 80095ec:	4603      	mov	r3, r0
 80095ee:	681c      	ldr	r4, [r3, #0]
 80095f0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80095f2:	f000 fbdf 	bl	8009db4 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80095f6:	4603      	mov	r3, r0
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	f107 0114 	add.w	r1, r7, #20
 8009600:	9301      	str	r3, [sp, #4]
 8009602:	9400      	str	r4, [sp, #0]
 8009604:	4633      	mov	r3, r6
 8009606:	462a      	mov	r2, r5
 8009608:	4640      	mov	r0, r8
 800960a:	f006 fb19 	bl	800fc40 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800960e:	4641      	mov	r1, r8
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f000 fbea 	bl	8009dea <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8009616:	f107 0314 	add.w	r3, r7, #20
 800961a:	4618      	mov	r0, r3
 800961c:	f013 ffd8 	bl	801d5d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009620:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009624:	4618      	mov	r0, r3
 8009626:	f013 ff39 	bl	801d49c <_ZNSaIcED1Ev>
 800962a:	bf00      	nop
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	3730      	adds	r7, #48	@ 0x30
 8009630:	46bd      	mov	sp, r7
 8009632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009636 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8009636:	b580      	push	{r7, lr}
 8009638:	b082      	sub	sp, #8
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
	return get();
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fc3a 	bl	8009eb8 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>
 8009644:	4603      	mov	r3, r0
      }
 8009646:	4618      	mov	r0, r3
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <_ZNSt10shared_ptrI6ModuleEC1I12CommsHandlervEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 800964e:	b580      	push	{r7, lr}
 8009650:	b082      	sub	sp, #8
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	683a      	ldr	r2, [r7, #0]
 800965c:	4611      	mov	r1, r2
 800965e:	4618      	mov	r0, r3
 8009660:	f000 fc37 	bl	8009ed2 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlervEERKS_IT_LS2_0EE>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4618      	mov	r0, r3
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800966e:	b580      	push	{r7, lr}
 8009670:	b082      	sub	sp, #8
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
	return get();
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fc41 	bl	8009efe <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>
 800967c:	4603      	mov	r3, r0
      }
 800967e:	4618      	mov	r0, r3
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>:
  detail::ElementProxy<JsonArray> operator[](T index) const {
 8009686:	b580      	push	{r7, lr}
 8009688:	b084      	sub	sp, #16
 800968a:	af00      	add	r7, sp, #0
 800968c:	60f8      	str	r0, [r7, #12]
 800968e:	60b9      	str	r1, [r7, #8]
 8009690:	607a      	str	r2, [r7, #4]
    return {*this, size_t(index)};
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	ca06      	ldmia	r2, {r1, r2}
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 fc3d 	bl	8009f18 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>
  }
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b082      	sub	sp, #8
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
    return as<T>();
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fca0 	bl	8009ff4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>
 80096b4:	4603      	mov	r3, r0
  }
 80096b6:	4618      	mov	r0, r3
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 80096be:	b580      	push	{r7, lr}
 80096c0:	b082      	sub	sp, #8
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	6039      	str	r1, [r7, #0]
    this->set(src);
 80096c8:	6839      	ldr	r1, [r7, #0]
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fcc7 	bl	800a05e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>
    return *this;
 80096d0:	687b      	ldr	r3, [r7, #4]
  }
 80096d2:	4618      	mov	r0, r3
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>:
  operator T() const {
 80096da:	b580      	push	{r7, lr}
 80096dc:	b082      	sub	sp, #8
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
 80096e2:	6039      	str	r1, [r7, #0]
    return as<T>();
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f000 fcc6 	bl	800a07a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>
 80096ee:	bf00      	nop
  }
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>:
      element_type*
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const noexcept
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
      { return _M_ptr != nullptr; }
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	bf14      	ite	ne
 8009708:	2301      	movne	r3, #1
 800970a:	2300      	moveq	r3, #0
 800970c:	b2db      	uxtb	r3, r3
 800970e:	4618      	mov	r0, r3
 8009710:	370c      	adds	r7, #12
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr

0800971a <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800971a:	b580      	push	{r7, lr}
 800971c:	b082      	sub	sp, #8
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
	return _M_get();
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 fccd 	bl	800a0c2 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8009728:	4603      	mov	r3, r0
      }
 800972a:	4618      	mov	r0, r3
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 8009732:	b580      	push	{r7, lr}
 8009734:	b082      	sub	sp, #8
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d004      	beq.n	8009756 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4618      	mov	r0, r3
 8009752:	f7fe fba3 	bl	8007e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4618      	mov	r0, r3
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
      { }
 8009768:	4a04      	ldr	r2, [pc, #16]	@ (800977c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4618      	mov	r0, r3
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	0801f5f0 	.word	0x0801f5f0

08009780 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
      { }
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f7ff ffe9 	bl	8009760 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800978e:	210c      	movs	r1, #12
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f013 fe60 	bl	801d456 <_ZdlPvj>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4618      	mov	r0, r3
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>:
  if (dup)
    setRawString(dup);
}

template <typename TAdaptedString>
inline bool VariantData::setString(TAdaptedString value,
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b086      	sub	sp, #24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	4638      	mov	r0, r7
 80097aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                   ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first

  if (value.isNull())
 80097ae:	463b      	mov	r3, r7
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7f8 ffac 	bl	800270e <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d001      	beq.n	80097c0 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x20>
    return false;
 80097bc:	2300      	movs	r3, #0
 80097be:	e021      	b.n	8009804 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>

  if (value.isStatic()) {
 80097c0:	463b      	mov	r3, r7
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7fe fbe6 	bl	8007f94 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00a      	beq.n	80097e4 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x44>
    setLinkedString(value.data());
 80097ce:	463b      	mov	r3, r7
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7f8 ffb9 	bl	8002748 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 80097d6:	4603      	mov	r3, r0
 80097d8:	4619      	mov	r1, r3
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f7fe fc88 	bl	80080f0 <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>
    return true;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e00f      	b.n	8009804 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  auto dup = resources->saveString(value);
 80097e4:	6a38      	ldr	r0, [r7, #32]
 80097e6:	463b      	mov	r3, r7
 80097e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097ea:	f000 fc76 	bl	800a0da <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>
 80097ee:	6178      	str	r0, [r7, #20]
  if (dup) {
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d005      	beq.n	8009802 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x62>
    setOwnedString(dup);
 80097f6:	6979      	ldr	r1, [r7, #20]
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f7f9 f9f6 	bl	8002bea <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 80097fe:	2301      	movs	r3, #1
 8009800:	e000      	b.n	8009804 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  return false;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3718      	adds	r7, #24
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800980c:	b590      	push	{r4, r7, lr}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fa6a 	bl	8009cf0 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800981c:	4603      	mov	r3, r0
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8009822:	683c      	ldr	r4, [r7, #0]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fa63 	bl	8009cf0 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800982a:	4603      	mov	r3, r0
 800982c:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d007      	beq.n	8009844 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 f81e 	bl	8009876 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800983a:	4603      	mov	r3, r0
 800983c:	68f9      	ldr	r1, [r7, #12]
 800983e:	4618      	mov	r0, r3
 8009840:	f000 fa7b 	bl	8009d3a <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
      }
 8009844:	bf00      	nop
 8009846:	3714      	adds	r7, #20
 8009848:	46bd      	mov	sp, r7
 800984a:	bd90      	pop	{r4, r7, pc}

0800984c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fa4b 	bl	8009cf0 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800985a:	4603      	mov	r3, r0
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fa45 	bl	8009cf0 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 8009866:	4603      	mov	r3, r0
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]
	return __p;
 800986c:	68fb      	ldr	r3, [r7, #12]
      }
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4618      	mov	r0, r3
 8009882:	f000 fc50 	bl	800a126 <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009886:	4603      	mov	r3, r0
 8009888:	4618      	mov	r0, r3
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4618      	mov	r0, r3
 800989c:	370c      	adds	r7, #12
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr

080098a6 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b082      	sub	sp, #8
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 fc44 	bl	800a13e <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4618      	mov	r0, r3
 80098ba:	3708      	adds	r7, #8
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f000 fc47 	bl	800a15e <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80098d0:	4603      	mov	r3, r0
 80098d2:	4618      	mov	r0, r3
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80098da:	b580      	push	{r7, lr}
 80098dc:	b082      	sub	sp, #8
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 f902 	bl	8009aee <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 80098ea:	4603      	mov	r3, r0
 80098ec:	4618      	mov	r0, r3
 80098ee:	3708      	adds	r7, #8
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4618      	mov	r0, r3
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <_ZN17JsonConfigHandlerD1Ev>:
#include "../lib/ArduinoJson7/ArduinoJson.h"
#include "fatfs.h"

class Remora; //forward declaration

class JsonConfigHandler {
 800990a:	b580      	push	{r7, lr}
 800990c:	b082      	sub	sp, #8
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	3320      	adds	r3, #32
 8009916:	4618      	mov	r0, r3
 8009918:	f7fe fc85 	bl	8008226 <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	3304      	adds	r3, #4
 8009920:	4618      	mov	r0, r3
 8009922:	f013 fe55 	bl	801d5d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4618      	mov	r0, r3
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>:
      operator()(_Tp* __ptr) const
 8009930:	b590      	push	{r4, r7, lr}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800993a:	683c      	ldr	r4, [r7, #0]
 800993c:	2c00      	cmp	r4, #0
 800993e:	d006      	beq.n	800994e <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_+0x1e>
 8009940:	4620      	mov	r0, r4
 8009942:	f7ff ffe2 	bl	800990a <_ZN17JsonConfigHandlerD1Ev>
 8009946:	216c      	movs	r1, #108	@ 0x6c
 8009948:	4620      	mov	r0, r4
 800994a:	f013 fd84 	bl	801d456 <_ZdlPvj>
      }
 800994e:	bf00      	nop
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	bd90      	pop	{r4, r7, pc}

08009956 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8009956:	b580      	push	{r7, lr}
 8009958:	b082      	sub	sp, #8
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	3304      	adds	r3, #4
 8009968:	4618      	mov	r0, r3
 800996a:	f000 fc05 	bl	800a178 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4618      	mov	r0, r3
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4618      	mov	r0, r3
 8009984:	f000 fc06 	bl	800a194 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4618      	mov	r0, r3
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8009992:	b580      	push	{r7, lr}
 8009994:	b082      	sub	sp, #8
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4618      	mov	r0, r3
 800999e:	f000 fc09 	bl	800a1b4 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80099a2:	4603      	mov	r3, r0
 80099a4:	4618      	mov	r0, r3
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f000 fa5b 	bl	8009e72 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 80099bc:	4603      	mov	r3, r0
 80099be:	4618      	mov	r0, r3
 80099c0:	3708      	adds	r7, #8
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80099c6:	b480      	push	{r7}
 80099c8:	b083      	sub	sp, #12
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4618      	mov	r0, r3
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <_ZN9pruThreadD1Ev>:

using namespace std;

class Module;

class pruThread
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	3338      	adds	r3, #56	@ 0x38
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 fbf0 	bl	800a1ce <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	332c      	adds	r3, #44	@ 0x2c
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 fbeb 	bl	800a1ce <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4618      	mov	r0, r3
 80099fc:	f013 fde8 	bl	801d5d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4618      	mov	r0, r3
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <_ZNKSt14default_deleteI9pruThreadEclEPS0_>:
      operator()(_Tp* __ptr) const
 8009a0a:	b590      	push	{r4, r7, lr}
 8009a0c:	b083      	sub	sp, #12
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
 8009a12:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8009a14:	683c      	ldr	r4, [r7, #0]
 8009a16:	2c00      	cmp	r4, #0
 8009a18:	d006      	beq.n	8009a28 <_ZNKSt14default_deleteI9pruThreadEclEPS0_+0x1e>
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	f7ff ffde 	bl	80099dc <_ZN9pruThreadD1Ev>
 8009a20:	2144      	movs	r1, #68	@ 0x44
 8009a22:	4620      	mov	r0, r4
 8009a24:	f013 fd17 	bl	801d456 <_ZdlPvj>
      }
 8009a28:	bf00      	nop
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd90      	pop	{r4, r7, pc}

08009a30 <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	370c      	adds	r7, #12
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr

08009a46 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b082      	sub	sp, #8
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	6039      	str	r1, [r7, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	683a      	ldr	r2, [r7, #0]
 8009a54:	4611      	mov	r1, r2
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 fbd4 	bl	800a204 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b082      	sub	sp, #8
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
 8009a6e:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7ff ffe6 	bl	8009a46 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3708      	adds	r7, #8
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8009a84:	b590      	push	{r4, r7, lr}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7ff ff16 	bl	80098c0 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8009a94:	4603      	mov	r3, r0
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8009a9a:	683c      	ldr	r4, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f7ff ff0f 	bl	80098c0 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d007      	beq.n	8009abc <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f81e 	bl	8009aee <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	68f9      	ldr	r1, [r7, #12]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7ff ff3a 	bl	8009930 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
      }
 8009abc:	bf00      	nop
 8009abe:	3714      	adds	r7, #20
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd90      	pop	{r4, r7, pc}

08009ac4 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7ff fef7 	bl	80098c0 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7ff fef1 	bl	80098c0 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	601a      	str	r2, [r3, #0]
	return __p;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
      }
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b082      	sub	sp, #8
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 fb97 	bl	800a22c <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009afe:	4603      	mov	r3, r0
 8009b00:	4618      	mov	r0, r3
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4618      	mov	r0, r3
 8009b14:	370c      	adds	r7, #12
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009b1e:	b480      	push	{r7}
 8009b20:	b083      	sub	sp, #12
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4618      	mov	r0, r3
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	370c      	adds	r7, #12
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr

08009b4a <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009b4a:	b480      	push	{r7}
 8009b4c:	b083      	sub	sp, #12
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4618      	mov	r0, r3
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	683a      	ldr	r2, [r7, #0]
 8009b6e:	4611      	mov	r1, r2
 8009b70:	4618      	mov	r0, r3
 8009b72:	f000 fb67 	bl	800a244 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3708      	adds	r7, #8
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7ff ffe6 	bl	8009b60 <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4618      	mov	r0, r3
 8009b98:	3708      	adds	r7, #8
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b082      	sub	sp, #8
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 fb5f 	bl	800a26c <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 fb5f 	bl	800a286 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <_ZSt4moveIRP8SPICommsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009bd2:	b480      	push	{r7}
 8009bd4:	b083      	sub	sp, #12
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <_ZNKSt14default_deleteI8SPICommsEclEPS0_>:
      operator()(_Tp* __ptr) const
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d004      	beq.n	8009c02 <_ZNKSt14default_deleteI8SPICommsEclEPS0_+0x1a>
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	3204      	adds	r2, #4
 8009bfc:	6812      	ldr	r2, [r2, #0]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	4790      	blx	r2
      }
 8009c02:	bf00      	nop
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <_ZNSt10shared_ptrI12CommsHandlerEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b082      	sub	sp, #8
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f000 fb41 	bl	800a2a0 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4618      	mov	r0, r3
 8009c22:	3708      	adds	r7, #8
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <_ZSt4moveIRSt10shared_ptrI12CommsHandlerEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4618      	mov	r0, r3
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
      operator=(__shared_ptr&& __r) noexcept
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b084      	sub	sp, #16
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 8009c48:	6838      	ldr	r0, [r7, #0]
 8009c4a:	f000 fb43 	bl	800a2d4 <_ZSt4moveIRSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	f107 0308 	add.w	r3, r7, #8
 8009c54:	4611      	mov	r1, r2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f000 fb47 	bl	800a2ea <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 8009c5c:	f107 0308 	add.w	r3, r7, #8
 8009c60:	6879      	ldr	r1, [r7, #4]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 fb5f 	bl	800a326 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 8009c68:	f107 0308 	add.w	r3, r7, #8
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fe fc6f 	bl	8008550 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8009c72:	687b      	ldr	r3, [r7, #4]
      }
 8009c74:	4618      	mov	r0, r3
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fb65 	bl	800a354 <_ZNKSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f000 fb64 	bl	800a36c <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009cae:	b480      	push	{r7}
 8009cb0:	b083      	sub	sp, #12
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>:
	__uniq_ptr_impl(pointer __p, _Del&& __d)
 8009cc4:	b590      	push	{r4, r7, lr}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8009cd0:	68fc      	ldr	r4, [r7, #12]
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7ff ffeb 	bl	8009cae <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	f107 0308 	add.w	r3, r7, #8
 8009cde:	4619      	mov	r1, r3
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f000 fb58 	bl	800a396 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3714      	adds	r7, #20
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd90      	pop	{r4, r7, pc}

08009cf0 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f000 fb64 	bl	800a3c8 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009d00:	4603      	mov	r3, r0
 8009d02:	4618      	mov	r0, r3
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b082      	sub	sp, #8
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7ff fdae 	bl	8009876 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	370c      	adds	r7, #12
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>:
      operator()(_Tp* __ptr) const
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b082      	sub	sp, #8
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d004      	beq.n	8009d54 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_+0x1a>
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	3204      	adds	r2, #4
 8009d4e:	6812      	ldr	r2, [r2, #0]
 8009d50:	4618      	mov	r0, r3
 8009d52:	4790      	blx	r2
      }
 8009d54:	bf00      	nop
 8009d56:	3708      	adds	r7, #8
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4618      	mov	r0, r3
 8009d68:	370c      	adds	r7, #12
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr

08009d72 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009d72:	b480      	push	{r7}
 8009d74:	b083      	sub	sp, #12
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4618      	mov	r0, r3
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009d9e:	b480      	push	{r7}
 8009da0:	b083      	sub	sp, #12
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4618      	mov	r0, r3
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	370c      	adds	r7, #12
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b082      	sub	sp, #8
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	6039      	str	r1, [r7, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	683a      	ldr	r2, [r7, #0]
 8009dd8:	4611      	mov	r1, r2
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f000 fb01 	bl	800a3e2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4618      	mov	r0, r3
 8009de4:	3708      	adds	r7, #8
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b082      	sub	sp, #8
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
 8009df2:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6839      	ldr	r1, [r7, #0]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7ff ffe6 	bl	8009dca <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4618      	mov	r0, r3
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8009e08:	b590      	push	{r4, r7, lr}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7ff fdbd 	bl	8009992 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8009e1e:	683c      	ldr	r4, [r7, #0]
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f7ff fdb6 	bl	8009992 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8009e26:	4603      	mov	r3, r0
 8009e28:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d007      	beq.n	8009e40 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f81e 	bl	8009e72 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 8009e36:	4603      	mov	r3, r0
 8009e38:	68f9      	ldr	r1, [r7, #12]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7ff fde5 	bl	8009a0a <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
      }
 8009e40:	bf00      	nop
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd90      	pop	{r4, r7, pc}

08009e48 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7ff fd9e 	bl	8009992 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8009e56:	4603      	mov	r3, r0
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7ff fd98 	bl	8009992 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2200      	movs	r2, #0
 8009e66:	601a      	str	r2, [r3, #0]
	return __p;
 8009e68:	68fb      	ldr	r3, [r7, #12]
      }
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b082      	sub	sp, #8
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f000 fac4 	bl	800a40a <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009e82:	4603      	mov	r3, r0
 8009e84:	4618      	mov	r0, r3
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4618      	mov	r0, r3
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009ea2:	b480      	push	{r7}
 8009ea4:	b083      	sub	sp, #12
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4618      	mov	r0, r3
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f000 faad 	bl	800a422 <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlervEERKS_IT_LS2_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	1d1a      	adds	r2, r3, #4
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	3304      	adds	r3, #4
 8009eec:	4619      	mov	r1, r3
 8009eee:	4610      	mov	r0, r2
 8009ef0:	f7ff fc1f 	bl	8009732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b082      	sub	sp, #8
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 fa98 	bl	800a43e <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	4618      	mov	r0, r3
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>:

  template <typename>
  friend class ElementProxy;

 public:
  ElementProxy(TUpstream upstream, size_t index)
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	1d38      	adds	r0, r7, #4
 8009f22:	e880 0006 	stmia.w	r0, {r1, r2}
 8009f26:	603b      	str	r3, [r7, #0]
      : upstream_(upstream), index_(index) {}
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	3304      	adds	r3, #4
 8009f2c:	1d3a      	adds	r2, r7, #4
 8009f2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f32:	e883 0003 	stmia.w	r3, {r0, r1}
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	60da      	str	r2, [r3, #12]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3714      	adds	r7, #20
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr

08009f4a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>:
  const TDerived& derived() const {
 8009f4a:	b480      	push	{r7}
 8009f4c:	b083      	sub	sp, #12
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8009f52:	687b      	ldr	r3, [r7, #4]
  }
 8009f54:	4618      	mov	r0, r3
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>:
    return *this;
  }

 private:
  // clang-format off
  ElementProxy(const ElementProxy& src)  // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
      : upstream_(src.upstream_), index_(src.index_) {}
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	683a      	ldr	r2, [r7, #0]
 8009f6e:	3304      	adds	r3, #4
 8009f70:	3204      	adds	r2, #4
 8009f72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f76:	e883 0003 	stmia.w	r3, {r0, r1}
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	68da      	ldr	r2, [r3, #12]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	60da      	str	r2, [r3, #12]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4618      	mov	r0, r3
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 8009f90:	b082      	sub	sp, #8
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b082      	sub	sp, #8
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	6039      	str	r1, [r7, #0]
 8009f9c:	f107 0110 	add.w	r1, r7, #16
 8009fa0:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	3304      	adds	r3, #4
 8009fa8:	6839      	ldr	r1, [r7, #0]
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7ff ffd8 	bl	8009f60 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3314      	adds	r3, #20
 8009fb4:	f107 0210 	add.w	r2, r7, #16
 8009fb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8009fba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009fca:	b002      	add	sp, #8
 8009fcc:	4770      	bx	lr

08009fce <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b082      	sub	sp, #8
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8009fd8:	6838      	ldr	r0, [r7, #0]
 8009fda:	f000 fa3e 	bl	800a45a <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4611      	mov	r1, r2
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 fa43 	bl	800a470 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>
 8009fea:	bf00      	nop
}
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8009ff4:	b590      	push	{r4, r7, lr}
 8009ff6:	b087      	sub	sp, #28
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	617b      	str	r3, [r7, #20]
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800a004:	6938      	ldr	r0, [r7, #16]
 800a006:	f000 fc5a 	bl	800a8be <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800a00a:	4604      	mov	r4, r0
 800a00c:	6938      	ldr	r0, [r7, #16]
 800a00e:	f000 fc66 	bl	800a8de <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800a012:	4602      	mov	r2, r0
 800a014:	f107 0308 	add.w	r3, r7, #8
 800a018:	4621      	mov	r1, r4
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7f8 ff27 	bl	8002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800a020:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800a022:	f107 0308 	add.w	r3, r7, #8
 800a026:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a02a:	f7f9 fc19 	bl	8003860 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 800a02e:	4603      	mov	r3, r0
}
 800a030:	4618      	mov	r0, r3
 800a032:	371c      	adds	r7, #28
 800a034:	46bd      	mov	sp, r7
 800a036:	bd90      	pop	{r4, r7, pc}

0800a038 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800a042:	6838      	ldr	r0, [r7, #0]
 800a044:	f000 fa23 	bl	800a48e <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800a048:	4602      	mov	r2, r0
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4611      	mov	r1, r2
 800a04e:	4618      	mov	r0, r3
 800a050:	f000 fa28 	bl	800a4a4 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>
 800a054:	bf00      	nop
}
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>:
  bool set(const T& value) const {
 800a05e:	b580      	push	{r7, lr}
 800a060:	b082      	sub	sp, #8
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	6039      	str	r1, [r7, #0]
    return doSet<Converter<TypeForConverter>>(value);
 800a068:	6839      	ldr	r1, [r7, #0]
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 fa29 	bl	800a4c2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>
 800a070:	4603      	mov	r3, r0
  }
 800a072:	4618      	mov	r0, r3
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800a07a:	b590      	push	{r4, r7, lr}
 800a07c:	b087      	sub	sp, #28
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
 800a082:	6039      	str	r1, [r7, #0]
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	617b      	str	r3, [r7, #20]
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 800a08c:	6938      	ldr	r0, [r7, #16]
 800a08e:	f000 fe59 	bl	800ad44 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>
 800a092:	4604      	mov	r4, r0
 800a094:	6938      	ldr	r0, [r7, #16]
 800a096:	f000 fe65 	bl	800ad64 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>
 800a09a:	4602      	mov	r2, r0
 800a09c:	f107 0308 	add.w	r3, r7, #8
 800a0a0:	4621      	mov	r1, r4
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7f8 ff0e 	bl	8002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 800a0a8:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f107 0308 	add.w	r3, r7, #8
 800a0b0:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a0b4:	f7fe f852 	bl	800815c <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>
 800a0b8:	bf00      	nop
}
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	371c      	adds	r7, #28
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd90      	pop	{r4, r7, pc}

0800a0c2 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b082      	sub	sp, #8
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 fa08 	bl	800a4e0 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>:
  StringNode* saveString(TAdaptedString str) {
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b088      	sub	sp, #32
 800a0de:	af02      	add	r7, sp, #8
 800a0e0:	60f8      	str	r0, [r7, #12]
 800a0e2:	4638      	mov	r0, r7
 800a0e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (str.isNull())
 800a0e8:	463b      	mov	r3, r7
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7f8 fb0f 	bl	800270e <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d001      	beq.n	800a0fa <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x20>
      return 0;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	e011      	b.n	800a11e <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x44>
    auto node = stringPool_.add(str, allocator_);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f103 0008 	add.w	r0, r3, #8
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	463b      	mov	r3, r7
 800a108:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a10a:	f000 f9f5 	bl	800a4f8 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>
 800a10e:	6178      	str	r0, [r7, #20]
    if (!node)
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d102      	bne.n	800a11c <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x42>
      overflowed_ = true;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2201      	movs	r2, #1
 800a11a:	711a      	strb	r2, [r3, #4]
    return node;
 800a11c:	697b      	ldr	r3, [r7, #20]
  }
 800a11e:	4618      	mov	r0, r3
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800a126:	b580      	push	{r7, lr}
 800a128:	b082      	sub	sp, #8
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fa22 	bl	800a578 <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a134:	4603      	mov	r3, r0
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800a13e:	b580      	push	{r7, lr}
 800a140:	b082      	sub	sp, #8
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 fa22 	bl	800a590 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4618      	mov	r0, r3
 800a150:	f000 fa2a 	bl	800a5a8 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4618      	mov	r0, r3
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a15e:	b580      	push	{r7, lr}
 800a160:	b082      	sub	sp, #8
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4618      	mov	r0, r3
 800a16a:	f000 fa2b 	bl	800a5c4 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a16e:	4603      	mov	r3, r0
 800a170:	4618      	mov	r0, r3
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	601a      	str	r2, [r3, #0]
      { }
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4618      	mov	r0, r3
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 fa1d 	bl	800a5dc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f000 fa25 	bl	800a5f4 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f000 fa26 	bl	800a610 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 800a1ce:	b5b0      	push	{r4, r5, r7, lr}
 800a1d0:	b082      	sub	sp, #8
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681c      	ldr	r4, [r3, #0]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 fa46 	bl	800a672 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800a1e6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	4629      	mov	r1, r5
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f000 fa4b 	bl	800a688 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f000 fa23 	bl	800a640 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3708      	adds	r7, #8
 800a200:	46bd      	mov	sp, r7
 800a202:	bdb0      	pop	{r4, r5, r7, pc}

0800a204 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800a204:	b590      	push	{r4, r7, lr}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4618      	mov	r0, r3
 800a212:	f7ff fb48 	bl	80098a6 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800a216:	683c      	ldr	r4, [r7, #0]
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f7ff fb51 	bl	80098c0 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800a21e:	4603      	mov	r3, r0
 800a220:	601c      	str	r4, [r3, #0]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4618      	mov	r0, r3
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd90      	pop	{r4, r7, pc}

0800a22c <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fa35 	bl	800a6a4 <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a23a:	4603      	mov	r3, r0
 800a23c:	4618      	mov	r0, r3
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>:
 800a244:	b590      	push	{r4, r7, lr}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4618      	mov	r0, r3
 800a252:	f000 fa33 	bl	800a6bc <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800a256:	683c      	ldr	r4, [r7, #0]
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f7ff fca0 	bl	8009b9e <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800a25e:	4603      	mov	r3, r0
 800a260:	601c      	str	r4, [r3, #0]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4618      	mov	r0, r3
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd90      	pop	{r4, r7, pc}

0800a26c <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4618      	mov	r0, r3
 800a278:	f000 fa2d 	bl	800a6d6 <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a27c:	4603      	mov	r3, r0
 800a27e:	4618      	mov	r0, r3
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800a286:	b580      	push	{r7, lr}
 800a288:	b082      	sub	sp, #8
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4618      	mov	r0, r3
 800a292:	f000 fa2c 	bl	800a6ee <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800a296:	4603      	mov	r3, r0
 800a298:	4618      	mov	r0, r3
 800a29a:	3708      	adds	r7, #8
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
      /// @}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	601a      	str	r2, [r3, #0]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	3304      	adds	r3, #4
 800a2b4:	6879      	ldr	r1, [r7, #4]
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f000 fa24 	bl	800a706 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlerSaIvEJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 fa62 	bl	800a78e <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <_ZSt4moveIRSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	370c      	adds	r7, #12
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr

0800a2ea <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b082      	sub	sp, #8
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
 800a2f2:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	601a      	str	r2, [r3, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	3304      	adds	r3, #4
 800a300:	4618      	mov	r0, r3
 800a302:	f7ff ff39 	bl	800a178 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	1d1a      	adds	r2, r3, #4
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	3304      	adds	r3, #4
 800a30e:	4619      	mov	r1, r3
 800a310:	4610      	mov	r0, r2
 800a312:	f000 fa47 	bl	800a7a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	2200      	movs	r2, #0
 800a31a:	601a      	str	r2, [r3, #0]
      }
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4618      	mov	r0, r3
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 800a326:	b580      	push	{r7, lr}
 800a328:	b082      	sub	sp, #8
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	4611      	mov	r1, r2
 800a336:	4618      	mov	r0, r3
 800a338:	f000 fa49 	bl	800a7ce <_ZSt4swapIP12CommsHandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	1d1a      	adds	r2, r3, #4
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	3304      	adds	r3, #4
 800a344:	4619      	mov	r1, r3
 800a346:	4610      	mov	r0, r2
 800a348:	f000 fa2c 	bl	800a7a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 800a34c:	bf00      	nop
 800a34e:	3708      	adds	r7, #8
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <_ZNKSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4618      	mov	r0, r3
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7ff fc12 	bl	8009b9e <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800a37a:	4603      	mov	r3, r0
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f7ff fc0c 	bl	8009b9e <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800a386:	4603      	mov	r3, r0
 800a388:	2200      	movs	r2, #0
 800a38a:	601a      	str	r2, [r3, #0]
	return __p;
 800a38c:	68fb      	ldr	r3, [r7, #12]
      }
 800a38e:	4618      	mov	r0, r3
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 800a396:	b5b0      	push	{r4, r5, r7, lr}
 800a398:	b084      	sub	sp, #16
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	60f8      	str	r0, [r7, #12]
 800a39e:	60b9      	str	r1, [r7, #8]
 800a3a0:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a3a2:	68fc      	ldr	r4, [r7, #12]
 800a3a4:	68b8      	ldr	r0, [r7, #8]
 800a3a6:	f000 fa31 	bl	800a80c <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800a3aa:	4605      	mov	r5, r0
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7ff fc7e 	bl	8009cae <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f000 fa32 	bl	800a822 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bdb0      	pop	{r4, r5, r7, pc}

0800a3c8 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f000 fa41 	bl	800a85a <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800a3e2:	b590      	push	{r4, r7, lr}
 800a3e4:	b083      	sub	sp, #12
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
 800a3ea:	6039      	str	r1, [r7, #0]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7ff fac2 	bl	8009978 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800a3f4:	683c      	ldr	r4, [r7, #0]
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7ff facb 	bl	8009992 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	601c      	str	r4, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4618      	mov	r0, r3
 800a404:	370c      	adds	r7, #12
 800a406:	46bd      	mov	sp, r7
 800a408:	bd90      	pop	{r4, r7, pc}

0800a40a <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b082      	sub	sp, #8
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 fa2d 	bl	800a872 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a418:	4603      	mov	r3, r0
 800a41a:	4618      	mov	r0, r3
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800a422:	b580      	push	{r7, lr}
 800a424:	b082      	sub	sp, #8
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f000 fa2c 	bl	800a88a <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800a432:	4603      	mov	r3, r0
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4618      	mov	r0, r3
 800a438:	3708      	adds	r7, #8
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
 800a43e:	b580      	push	{r7, lr}
 800a440:	b082      	sub	sp, #8
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4618      	mov	r0, r3
 800a44a:	f000 fa2b 	bl	800a8a4 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800a44e:	4603      	mov	r3, r0
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4618      	mov	r0, r3
 800a454:	3708      	adds	r7, #8
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}

0800a45a <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800a45a:	b480      	push	{r7}
 800a45c:	b083      	sub	sp, #12
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800a462:	687b      	ldr	r3, [r7, #4]
}
 800a464:	4618      	mov	r0, r3
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800a47a:	2301      	movs	r3, #1
 800a47c:	2204      	movs	r2, #4
 800a47e:	6839      	ldr	r1, [r7, #0]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f7f8 f92d 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800a496:	687b      	ldr	r3, [r7, #4]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	220a      	movs	r2, #10
 800a4b2:	6839      	ldr	r1, [r7, #0]
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7f8 f913 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	3708      	adds	r7, #8
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>:
  }

  template <typename TConverter, typename T>
  bool doSet(const T& value) const {
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b084      	sub	sp, #16
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	6839      	ldr	r1, [r7, #0]
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 fa14 	bl	800a8fe <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>
 800a4d6:	4603      	mov	r3, r0
        value, is_same<typename function_traits<
                           decltype(&TConverter::toJson)>::return_type,
                       bool>{});
  }
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>:
  StringNode* add(TAdaptedString str, Allocator* allocator) {
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b088      	sub	sp, #32
 800a4fc:	af02      	add	r7, sp, #8
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	4638      	mov	r0, r7
 800a502:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    auto node = get(str);
 800a506:	463b      	mov	r3, r7
 800a508:	4619      	mov	r1, r3
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	f7fa ff96 	bl	800543c <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 800a510:	6178      	str	r0, [r7, #20]
    if (node) {
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d007      	beq.n	800a528 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x30>
      node->references++;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	889b      	ldrh	r3, [r3, #4]
 800a51c:	3301      	adds	r3, #1
 800a51e:	b29a      	uxth	r2, r3
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	809a      	strh	r2, [r3, #4]
      return node;
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	e023      	b.n	800a570 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    size_t n = str.size();
 800a528:	463b      	mov	r3, r7
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7f8 f900 	bl	8002730 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 800a530:	6138      	str	r0, [r7, #16]
    node = StringNode::create(n, allocator);
 800a532:	6a39      	ldr	r1, [r7, #32]
 800a534:	6938      	ldr	r0, [r7, #16]
 800a536:	f7f8 f869 	bl	800260c <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 800a53a:	6178      	str	r0, [r7, #20]
    if (!node)
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d101      	bne.n	800a546 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x4e>
      return nullptr;
 800a542:	2300      	movs	r3, #0
 800a544:	e014      	b.n	800a570 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    stringGetChars(str, node->data, n);
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	f103 0208 	add.w	r2, r3, #8
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	4613      	mov	r3, r2
 800a552:	463a      	mov	r2, r7
 800a554:	ca07      	ldmia	r2, {r0, r1, r2}
 800a556:	f000 f9ec 	bl	800a932 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>
    node->data[n] = 0;  // force NUL terminator
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	4413      	add	r3, r2
 800a560:	3308      	adds	r3, #8
 800a562:	2200      	movs	r2, #0
 800a564:	701a      	strb	r2, [r3, #0]
    add(node);
 800a566:	6979      	ldr	r1, [r7, #20]
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f7f8 f913 	bl	8002794 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
    return node;
 800a56e:	697b      	ldr	r3, [r7, #20]
  }
 800a570:	4618      	mov	r0, r3
 800a572:	3718      	adds	r7, #24
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 f9f6 	bl	800a972 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>
 800a586:	4603      	mov	r3, r0
 800a588:	4618      	mov	r0, r3
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>:
      _Tuple_impl()
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f9f6 	bl	800a98a <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>:
      constexpr _Head_base()
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 f9e7 	bl	800a9a0 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>:
      _Tuple_impl()
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 f9e8 	bl	800a9ba <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>:
      constexpr _Head_base()
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	601a      	str	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4618      	mov	r0, r3
 800a606:	370c      	adds	r7, #12
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 f9d9 	bl	800a9d0 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>
 800a61e:	4603      	mov	r3, r0
 800a620:	4618      	mov	r0, r3
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 f9da 	bl	800a9ea <_ZNSaISt10shared_ptrI6ModuleEED1Ev>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4618      	mov	r0, r3
 800a63a:	3708      	adds	r7, #8
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	689a      	ldr	r2, [r3, #8]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	1ad3      	subs	r3, r2, r3
 800a656:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800a658:	461a      	mov	r2, r3
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f9d1 	bl	800aa02 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      }
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4618      	mov	r0, r3
 800a664:	f7ff ffe0 	bl	800a628 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4618      	mov	r0, r3
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800a672:	b480      	push	{r7}
 800a674:	b083      	sub	sp, #12
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4618      	mov	r0, r3
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800a694:	68b9      	ldr	r1, [r7, #8]
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f000 f9c6 	bl	800aa28 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>
    }
 800a69c:	bf00      	nop
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 f9c8 	bl	800aa42 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3708      	adds	r7, #8
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f000 f9c7 	bl	800aa5a <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b082      	sub	sp, #8
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f9cb 	bl	800aa7a <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b082      	sub	sp, #8
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 f9cc 	bl	800aa94 <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	4618      	mov	r0, r3
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlerSaIvEJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 800a706:	b5b0      	push	{r4, r5, r7, lr}
 800a708:	b08a      	sub	sp, #40	@ 0x28
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	60f8      	str	r0, [r7, #12]
 800a70e:	60b9      	str	r1, [r7, #8]
 800a710:	607a      	str	r2, [r7, #4]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	f107 031c 	add.w	r3, r7, #28
 800a718:	4611      	mov	r1, r2
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 f9c6 	bl	800aaac <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 800a720:	f107 0314 	add.w	r3, r7, #20
 800a724:	f107 021c 	add.w	r2, r7, #28
 800a728:	4611      	mov	r1, r2
 800a72a:	4618      	mov	r0, r3
 800a72c:	f000 f9d7 	bl	800aade <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 800a730:	f107 0314 	add.w	r3, r7, #20
 800a734:	4618      	mov	r0, r3
 800a736:	f000 f9fa 	bl	800ab2e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 800a73a:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 800a73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73e:	4619      	mov	r1, r3
 800a740:	202c      	movs	r0, #44	@ 0x2c
 800a742:	f7fd fb9f 	bl	8007e84 <_ZnwjPv>
 800a746:	4604      	mov	r4, r0
 800a748:	4629      	mov	r1, r5
 800a74a:	4620      	mov	r0, r4
 800a74c:	f000 f9fe 	bl	800ab4c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>
 800a750:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 800a752:	f107 0314 	add.w	r3, r7, #20
 800a756:	2100      	movs	r1, #0
 800a758:	4618      	mov	r0, r3
 800a75a:	f000 fa19 	bl	800ab90 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6a3a      	ldr	r2, [r7, #32]
 800a762:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 800a764:	6a38      	ldr	r0, [r7, #32]
 800a766:	f000 fa22 	bl	800abae <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800a76a:	4602      	mov	r2, r0
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	601a      	str	r2, [r3, #0]
	}
 800a770:	f107 0314 	add.w	r3, r7, #20
 800a774:	4618      	mov	r0, r3
 800a776:	f000 f9c5 	bl	800ab04 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800a77a:	f107 031c 	add.w	r3, r7, #28
 800a77e:	4618      	mov	r0, r3
 800a780:	f000 f9a1 	bl	800aac6 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	4618      	mov	r0, r3
 800a788:	3728      	adds	r7, #40	@ 0x28
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bdb0      	pop	{r4, r5, r7, pc}

0800a78e <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800a78e:	b480      	push	{r7}
 800a790:	b083      	sub	sp, #12
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	6039      	str	r1, [r7, #0]
	{ }
 800a798:	bf00      	nop
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 800a7a4:	b480      	push	{r7}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	601a      	str	r2, [r3, #0]
      }
 800a7c2:	bf00      	nop
 800a7c4:	3714      	adds	r7, #20
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <_ZSt4swapIP12CommsHandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b084      	sub	sp, #16
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f9f6 	bl	800abca <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800a7e4:	6838      	ldr	r0, [r7, #0]
 800a7e6:	f000 f9f0 	bl	800abca <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800a7f2:	f107 030c 	add.w	r3, r7, #12
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f000 f9e7 	bl	800abca <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	601a      	str	r2, [r3, #0]
    }
 800a804:	bf00      	nop
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4618      	mov	r0, r3
 800a818:	370c      	adds	r7, #12
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr

0800a822 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a822:	b590      	push	{r4, r7, lr}
 800a824:	b085      	sub	sp, #20
 800a826:	af00      	add	r7, sp, #0
 800a828:	60f8      	str	r0, [r7, #12]
 800a82a:	60b9      	str	r1, [r7, #8]
 800a82c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f7ff fa3d 	bl	8009cae <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a834:	4603      	mov	r3, r0
 800a836:	4619      	mov	r1, r3
 800a838:	68f8      	ldr	r0, [r7, #12]
 800a83a:	f000 f9d1 	bl	800abe0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>
 800a83e:	68fc      	ldr	r4, [r7, #12]
 800a840:	68b8      	ldr	r0, [r7, #8]
 800a842:	f7ff ffe3 	bl	800a80c <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800a846:	4603      	mov	r3, r0
 800a848:	4619      	mov	r1, r3
 800a84a:	4620      	mov	r0, r4
 800a84c:	f000 f9da 	bl	800ac04 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>
	{ }
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	4618      	mov	r0, r3
 800a854:	3714      	adds	r7, #20
 800a856:	46bd      	mov	sp, r7
 800a858:	bd90      	pop	{r4, r7, pc}

0800a85a <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b082      	sub	sp, #8
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f9df 	bl	800ac26 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>
 800a868:	4603      	mov	r3, r0
 800a86a:	4618      	mov	r0, r3
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a872:	b580      	push	{r7, lr}
 800a874:	b082      	sub	sp, #8
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 f9e0 	bl	800ac40 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>
 800a880:	4603      	mov	r3, r0
 800a882:	4618      	mov	r0, r3
 800a884:	3708      	adds	r7, #8
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b082      	sub	sp, #8
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4618      	mov	r0, r3
 800a896:	f000 f9df 	bl	800ac58 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a89a:	4603      	mov	r3, r0
 800a89c:	4618      	mov	r0, r3
 800a89e:	3708      	adds	r7, #8
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f000 f9de 	bl	800ac70 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3708      	adds	r7, #8
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b082      	sub	sp, #8
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 f9de 	bl	800ac88 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 f9e5 	bl	800ac9e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 800a8d4:	4603      	mov	r3, r0
  }
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b082      	sub	sp, #8
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 f9ce 	bl	800ac88 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f000 f9e1 	bl	800acb6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 800a8f4:	4603      	mov	r3, r0
  }
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>:
  return resources && !resources->overflowed();
}

template <typename TDerived>
template <typename TConverter, typename T>
inline bool VariantRefBase<TDerived>::doSet(const T& value, true_type) const {
 800a8fe:	b590      	push	{r4, r7, lr}
 800a900:	b087      	sub	sp, #28
 800a902:	af00      	add	r7, sp, #0
 800a904:	60f8      	str	r0, [r7, #12]
 800a906:	60b9      	str	r1, [r7, #8]
 800a908:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	681c      	ldr	r4, [r3, #0]
 800a90e:	f107 0310 	add.w	r3, r7, #16
 800a912:	68f9      	ldr	r1, [r7, #12]
 800a914:	4618      	mov	r0, r3
 800a916:	f000 f9da 	bl	800acce <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>
 800a91a:	f107 0310 	add.w	r3, r7, #16
 800a91e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a922:	4620      	mov	r0, r4
 800a924:	f000 f9e9 	bl	800acfa <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>
 800a928:	4603      	mov	r3, r0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	371c      	adds	r7, #28
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd90      	pop	{r4, r7, pc}

0800a932 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
  return stringEquals(s2, s1);
}

template <typename TAdaptedString>
static void stringGetChars(TAdaptedString s, char* p, size_t n) {
 800a932:	b590      	push	{r4, r7, lr}
 800a934:	b087      	sub	sp, #28
 800a936:	af00      	add	r7, sp, #0
 800a938:	1d3c      	adds	r4, r7, #4
 800a93a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a93e:	603b      	str	r3, [r7, #0]
  ARDUINOJSON_ASSERT(s.size() <= n);
  for (size_t i = 0; i < n; i++) {
 800a940:	2300      	movs	r3, #0
 800a942:	617b      	str	r3, [r7, #20]
 800a944:	e00c      	b.n	800a960 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x2e>
    p[i] = s[i];
 800a946:	683a      	ldr	r2, [r7, #0]
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	18d4      	adds	r4, r2, r3
 800a94c:	1d3b      	adds	r3, r7, #4
 800a94e:	6979      	ldr	r1, [r7, #20]
 800a950:	4618      	mov	r0, r3
 800a952:	f7f6 f9d9 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 800a956:	4603      	mov	r3, r0
 800a958:	7023      	strb	r3, [r4, #0]
  for (size_t i = 0; i < n; i++) {
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	3301      	adds	r3, #1
 800a95e:	617b      	str	r3, [r7, #20]
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a964:	429a      	cmp	r2, r3
 800a966:	d3ee      	bcc.n	800a946 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x14>
  }
}
 800a968:	bf00      	nop
 800a96a:	bf00      	nop
 800a96c:	371c      	adds	r7, #28
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd90      	pop	{r4, r7, pc}

0800a972 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a972:	b580      	push	{r7, lr}
 800a974:	b082      	sub	sp, #8
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fa02 	bl	800ad84 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>
 800a980:	4603      	mov	r3, r0
 800a982:	4618      	mov	r0, r3
 800a984:	3708      	adds	r7, #8
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>:
      constexpr _Head_base()
 800a98a:	b480      	push	{r7}
 800a98c:	b083      	sub	sp, #12
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4618      	mov	r0, r3
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f000 f9f5 	bl	800ad9a <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>:
      constexpr _Head_base()
 800a9ba:	b480      	push	{r7}
 800a9bc:	b083      	sub	sp, #12
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 f9e8 	bl	800adb0 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <_ZNSaISt10shared_ptrI6ModuleEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b082      	sub	sp, #8
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 f9e7 	bl	800adc6 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3708      	adds	r7, #8
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b084      	sub	sp, #16
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	60f8      	str	r0, [r7, #12]
 800aa0a:	60b9      	str	r1, [r7, #8]
 800aa0c:	607a      	str	r2, [r7, #4]
	if (__p)
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d005      	beq.n	800aa20 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	68b9      	ldr	r1, [r7, #8]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f000 f9de 	bl	800addc <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>
      }
 800aa20:	bf00      	nop
 800aa22:	3710      	adds	r7, #16
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800aa32:	6839      	ldr	r1, [r7, #0]
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 f9e0 	bl	800adfa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>
    }
 800aa3a:	bf00      	nop
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b082      	sub	sp, #8
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 f9ee 	bl	800ae2c <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>
 800aa50:	4603      	mov	r3, r0
 800aa52:	4618      	mov	r0, r3
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b082      	sub	sp, #8
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 f9ed 	bl	800ae42 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f000 f9f5 	bl	800ae5a <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4618      	mov	r0, r3
 800aa74:	3708      	adds	r7, #8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b082      	sub	sp, #8
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4618      	mov	r0, r3
 800aa86:	f000 f9f6 	bl	800ae76 <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3708      	adds	r7, #8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 f9f5 	bl	800ae8c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3708      	adds	r7, #8
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 f9f4 	bl	800aea4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4618      	mov	r0, r3
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b082      	sub	sp, #8
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 f9f3 	bl	800aeba <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4618      	mov	r0, r3
 800aad8:	3708      	adds	r7, #8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 800aade:	b580      	push	{r7, lr}
 800aae0:	b082      	sub	sp, #8
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
 800aae6:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800aae8:	2101      	movs	r1, #1
 800aaea:	6838      	ldr	r0, [r7, #0]
 800aaec:	f000 f9f0 	bl	800aed0 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	6839      	ldr	r1, [r7, #0]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 f9f9 	bl	800aeee <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d007      	beq.n	800ab24 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6818      	ldr	r0, [r3, #0]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	4619      	mov	r1, r3
 800ab20:	f000 f9f9 	bl	800af16 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4618      	mov	r0, r3
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b082      	sub	sp, #8
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 f9fa 	bl	800af34 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 800ab40:	4603      	mov	r3, r0
 800ab42:	4618      	mov	r0, r3
 800ab44:	3708      	adds	r7, #8
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
	...

0800ab4c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 800ab4c:	b590      	push	{r4, r7, lr}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	7039      	strb	r1, [r7, #0]
	: _M_impl(__a)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f000 f9f7 	bl	800af4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800ab5e:	4a0b      	ldr	r2, [pc, #44]	@ (800ab8c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_+0x40>)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	601a      	str	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	330c      	adds	r3, #12
 800ab68:	4621      	mov	r1, r4
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f000 fa04 	bl	800af78 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 f81c 	bl	800abae <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800ab76:	4602      	mov	r2, r0
 800ab78:	463b      	mov	r3, r7
 800ab7a:	4611      	mov	r1, r2
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f000 fa0a 	bl	800af96 <_ZNSt16allocator_traitsISaIvEE9constructI12CommsHandlerJEEEvRS0_PT_DpOT0_>
	}
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4618      	mov	r0, r3
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd90      	pop	{r4, r7, pc}
 800ab8c:	0801f5d4 	.word	0x0801f5d4

0800ab90 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	605a      	str	r2, [r3, #4]
	return *this;
 800aba0:	687b      	ldr	r3, [r7, #4]
      }
 800aba2:	4618      	mov	r0, r3
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr

0800abae <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 800abae:	b580      	push	{r7, lr}
 800abb0:	b082      	sub	sp, #8
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	330c      	adds	r3, #12
 800abba:	4618      	mov	r0, r3
 800abbc:	f000 f9f7 	bl	800afae <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE6_M_ptrEv>
 800abc0:	4603      	mov	r3, r0
 800abc2:	4618      	mov	r0, r3
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800abca:	b480      	push	{r7}
 800abcc:	b083      	sub	sp, #12
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4618      	mov	r0, r3
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>:
	_Tuple_impl(_UHead&& __head)
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800abea:	6838      	ldr	r0, [r7, #0]
 800abec:	f7ff f85f 	bl	8009cae <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800abf0:	4603      	mov	r3, r0
 800abf2:	4619      	mov	r1, r3
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 f9e6 	bl	800afc6 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>
	{ }
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4618      	mov	r0, r3
 800abfe:	3708      	adds	r7, #8
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800ac0e:	6838      	ldr	r0, [r7, #0]
 800ac10:	f7ff fdfc 	bl	800a80c <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800ac14:	4603      	mov	r3, r0
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	601a      	str	r2, [r3, #0]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3708      	adds	r7, #8
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b082      	sub	sp, #8
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4618      	mov	r0, r3
 800ac32:	f000 f9db 	bl	800afec <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>
 800ac36:	4603      	mov	r3, r0
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 f9da 	bl	800b002 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	4618      	mov	r0, r3
 800ac52:	3708      	adds	r7, #8
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 f9d9 	bl	800b018 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>
 800ac66:	4603      	mov	r3, r0
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3708      	adds	r7, #8
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f9da 	bl	800b032 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	4618      	mov	r0, r3
 800ac82:	3708      	adds	r7, #8
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800ac90:	687b      	ldr	r3, [r7, #4]
  }
 800ac92:	4618      	mov	r0, r3
 800ac94:	370c      	adds	r7, #12
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b082      	sub	sp, #8
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
    return client.getData();
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 f9d0 	bl	800b04c <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>
 800acac:	4603      	mov	r3, r0
  }
 800acae:	4618      	mov	r0, r3
 800acb0:	3708      	adds	r7, #8
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b082      	sub	sp, #8
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 f9e0 	bl	800b084 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>
 800acc4:	4603      	mov	r3, r0
  }
 800acc6:	4618      	mov	r0, r3
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>:
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
 800acce:	b590      	push	{r4, r7, lr}
 800acd0:	b083      	sub	sp, #12
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
 800acd6:	6039      	str	r1, [r7, #0]
  return JsonVariant(getOrCreateData(), getResourceManager());
 800acd8:	6838      	ldr	r0, [r7, #0]
 800acda:	f000 f9e1 	bl	800b0a0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>
 800acde:	4604      	mov	r4, r0
 800ace0:	6838      	ldr	r0, [r7, #0]
 800ace2:	f7ff fdfc 	bl	800a8de <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800ace6:	4603      	mov	r3, r0
 800ace8:	461a      	mov	r2, r3
 800acea:	4621      	mov	r1, r4
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7f8 f8e9 	bl	8002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
}
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	370c      	adds	r7, #12
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd90      	pop	{r4, r7, pc}

0800acfa <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b086      	sub	sp, #24
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	60f8      	str	r0, [r7, #12]
 800ad02:	1d3b      	adds	r3, r7, #4
 800ad04:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(dst);
 800ad08:	1d3b      	adds	r3, r7, #4
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7f9 fe22 	bl	8004954 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 800ad10:	6178      	str	r0, [r7, #20]
    if (!data)
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d101      	bne.n	800ad1c <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x22>
      return false;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	e00f      	b.n	800ad3c <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x42>
    auto resources = getResourceManager(dst);
 800ad1c:	1d3b      	adds	r3, r7, #4
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7f9 ffbd 	bl	8004c9e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 800ad24:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 800ad26:	6939      	ldr	r1, [r7, #16]
 800ad28:	6978      	ldr	r0, [r7, #20]
 800ad2a:	f7f8 fdff 	bl	800392c <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setInteger(src, resources);
 800ad2e:	693a      	ldr	r2, [r7, #16]
 800ad30:	68f9      	ldr	r1, [r7, #12]
 800ad32:	6978      	ldr	r0, [r7, #20]
 800ad34:	f000 f9c4 	bl	800b0c0 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	bf00      	nop
  }
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3718      	adds	r7, #24
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>:
  VariantData* getData() const {
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7ff f8fc 	bl	8009f4a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800ad52:	4603      	mov	r3, r0
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 f9f6 	bl	800b146 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800ad5a:	4603      	mov	r3, r0
  }
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f7ff f8ec 	bl	8009f4a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800ad72:	4603      	mov	r3, r0
 800ad74:	4618      	mov	r0, r3
 800ad76:	f000 fa05 	bl	800b184 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800ad7a:	4603      	mov	r3, r0
  }
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	370c      	adds	r7, #12
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr

0800ad9a <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ad9a:	b480      	push	{r7}
 800ad9c:	b083      	sub	sp, #12
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4618      	mov	r0, r3
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>:
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4618      	mov	r0, r3
 800adbc:	370c      	adds	r7, #12
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr

0800adc6 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800adc6:	b480      	push	{r7}
 800adc8:	b083      	sub	sp, #12
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	4618      	mov	r0, r3
 800add2:	370c      	adds	r7, #12
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	68b9      	ldr	r1, [r7, #8]
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	f000 f9d5 	bl	800b19c <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>
 800adf2:	bf00      	nop
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b082      	sub	sp, #8
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
 800ae02:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800ae04:	e009      	b.n	800ae1a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 f9d7 	bl	800b1ba <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f000 f9de 	bl	800b1d0 <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>
	  for (; __first != __last; ++__first)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	3308      	adds	r3, #8
 800ae18:	607b      	str	r3, [r7, #4]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d1f1      	bne.n	800ae06 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0xc>
	}
 800ae22:	bf00      	nop
 800ae24:	bf00      	nop
 800ae26:	3708      	adds	r7, #8
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	4618      	mov	r0, r3
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr

0800ae42 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>:
      _Tuple_impl()
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b082      	sub	sp, #8
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 f9cb 	bl	800b1e6 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4618      	mov	r0, r3
 800ae54:	3708      	adds	r7, #8
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>:
      constexpr _Head_base()
 800ae5a:	b480      	push	{r7}
 800ae5c:	b083      	sub	sp, #12
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2200      	movs	r2, #0
 800ae66:	601a      	str	r2, [r3, #0]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	370c      	adds	r7, #12
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr

0800ae76 <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ae76:	b480      	push	{r7}
 800ae78:	b083      	sub	sp, #12
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4618      	mov	r0, r3
 800ae82:	370c      	adds	r7, #12
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f9b1 	bl	800b1fc <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	4618      	mov	r0, r3
 800aeb0:	370c      	adds	r7, #12
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr

0800aeba <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800aeba:	b480      	push	{r7}
 800aebc:	b083      	sub	sp, #12
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4618      	mov	r0, r3
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800aeda:	2200      	movs	r2, #0
 800aedc:	6839      	ldr	r1, [r7, #0]
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 f998 	bl	800b214 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800aee4:	4603      	mov	r3, r0
 800aee6:	4618      	mov	r0, r3
 800aee8:	3708      	adds	r7, #8
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b084      	sub	sp, #16
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	60f8      	str	r0, [r7, #12]
 800aef6:	60b9      	str	r1, [r7, #8]
 800aef8:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800aefa:	68b8      	ldr	r0, [r7, #8]
 800aefc:	f000 f9b8 	bl	800b270 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 800af00:	4602      	mov	r2, r0
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	601a      	str	r2, [r3, #0]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	605a      	str	r2, [r3, #4]
      { }
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800af16:	b580      	push	{r7, lr}
 800af18:	b084      	sub	sp, #16
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	60f8      	str	r0, [r7, #12]
 800af1e:	60b9      	str	r1, [r7, #8]
 800af20:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	68b9      	ldr	r1, [r7, #8]
 800af26:	68f8      	ldr	r0, [r7, #12]
 800af28:	f000 f9ad 	bl	800b286 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 800af2c:	bf00      	nop
 800af2e:	3710      	adds	r7, #16
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 800af3c:	687b      	ldr	r3, [r7, #4]
    }
 800af3e:	4618      	mov	r0, r3
 800af40:	370c      	adds	r7, #12
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr
	...

0800af4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 800af54:	4a07      	ldr	r2, [pc, #28]	@ (800af74 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	601a      	str	r2, [r3, #0]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2201      	movs	r2, #1
 800af5e:	605a      	str	r2, [r3, #4]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	609a      	str	r2, [r3, #8]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4618      	mov	r0, r3
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr
 800af74:	0801f5f0 	.word	0x0801f5f0

0800af78 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	7039      	strb	r1, [r7, #0]
 800af82:	463b      	mov	r3, r7
 800af84:	4619      	mov	r1, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f98e 	bl	800b2a8 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4618      	mov	r0, r3
 800af90:	3708      	adds	r7, #8
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <_ZNSt16allocator_traitsISaIvEE9constructI12CommsHandlerJEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 800af96:	b580      	push	{r7, lr}
 800af98:	b082      	sub	sp, #8
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
 800af9e:	6039      	str	r1, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 800afa0:	6838      	ldr	r0, [r7, #0]
 800afa2:	f000 f98d 	bl	800b2c0 <_ZSt10_ConstructI12CommsHandlerJEEvPT_DpOT0_>
 800afa6:	bf00      	nop
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 800afae:	b580      	push	{r7, lr}
 800afb0:	b082      	sub	sp, #8
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 f993 	bl	800b2e2 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE7_M_addrEv>
 800afbc:	4603      	mov	r3, r0
 800afbe:	4618      	mov	r0, r3
 800afc0:	3708      	adds	r7, #8
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>:
	constexpr _Head_base(_UHead&& __h)
 800afc6:	b590      	push	{r4, r7, lr}
 800afc8:	b083      	sub	sp, #12
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
 800afce:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800afd0:	687c      	ldr	r4, [r7, #4]
 800afd2:	6838      	ldr	r0, [r7, #0]
 800afd4:	f7fe fe6b 	bl	8009cae <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800afd8:	4603      	mov	r3, r0
 800afda:	4619      	mov	r1, r3
 800afdc:	4620      	mov	r0, r4
 800afde:	f000 f98b 	bl	800b2f8 <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4618      	mov	r0, r3
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd90      	pop	{r4, r7, pc}

0800afec <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4618      	mov	r0, r3
 800aff8:	370c      	adds	r7, #12
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr

0800b002 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b002:	b480      	push	{r7}
 800b004:	b083      	sub	sp, #12
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	4618      	mov	r0, r3
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4618      	mov	r0, r3
 800b024:	f000 f974 	bl	800b310 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>
 800b028:	4603      	mov	r3, r0
 800b02a:	4618      	mov	r0, r3
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>:
 800b032:	b580      	push	{r7, lr}
 800b034:	b082      	sub	sp, #8
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f000 f972 	bl	800b326 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>
 800b042:	4603      	mov	r3, r0
 800b044:	4618      	mov	r0, r3
 800b046:	3708      	adds	r7, #8
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 800b04c:	b590      	push	{r4, r7, lr}
 800b04e:	b085      	sub	sp, #20
 800b050:	af02      	add	r7, sp, #8
 800b052:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3304      	adds	r3, #4
 800b058:	4618      	mov	r0, r3
 800b05a:	f000 f874 	bl	800b146 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800b05e:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	3304      	adds	r3, #4
 800b064:	4618      	mov	r0, r3
 800b066:	f000 f88d 	bl	800b184 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800b06a:	4602      	mov	r2, r0
    return VariantData::getMember(
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	9200      	str	r2, [sp, #0]
 800b070:	3314      	adds	r3, #20
 800b072:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b074:	4620      	mov	r0, r4
 800b076:	f7fb fef1 	bl	8006e5c <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 800b07a:	4603      	mov	r3, r0
  }
 800b07c:	4618      	mov	r0, r3
 800b07e:	370c      	adds	r7, #12
 800b080:	46bd      	mov	sp, r7
 800b082:	bd90      	pop	{r4, r7, pc}

0800b084 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	3304      	adds	r3, #4
 800b090:	4618      	mov	r0, r3
 800b092:	f000 f877 	bl	800b184 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800b096:	4603      	mov	r3, r0
  }
 800b098:	4618      	mov	r0, r3
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>:
  VariantData* getOrCreateData() const {
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getOrCreateData(derived());
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f7ff fded 	bl	800ac88 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f000 f943 	bl	800b33c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>
 800b0b6:	4603      	mov	r3, r0
  }
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 800b0c0:	b5b0      	push	{r4, r5, r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 800b0cc:	68b8      	ldr	r0, [r7, #8]
 800b0ce:	f7fb f98e 	bl	80063ee <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d006      	beq.n	800b0e6 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x26>
    type_ = VariantType::Uint32;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	220a      	movs	r2, #10
 800b0dc:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	68ba      	ldr	r2, [r7, #8]
 800b0e2:	601a      	str	r2, [r3, #0]
 800b0e4:	e02a      	b.n	800b13c <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 800b0e6:	f107 0310 	add.w	r3, r7, #16
 800b0ea:	6879      	ldr	r1, [r7, #4]
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7f8 fa36 	bl	800355e <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 800b0f2:	f107 0310 	add.w	r3, r7, #16
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7fc fb53 	bl	80077a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	f083 0301 	eor.w	r3, r3, #1
 800b102:	b2db      	uxtb	r3, r3
 800b104:	2b00      	cmp	r3, #0
 800b106:	d001      	beq.n	800b10c <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4c>
      return false;
 800b108:	2300      	movs	r3, #0
 800b10a:	e018      	b.n	800b13e <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7e>
    type_ = VariantType::Uint64;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	221a      	movs	r2, #26
 800b110:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 800b112:	f107 0310 	add.w	r3, r7, #16
 800b116:	4618      	mov	r0, r3
 800b118:	f7fc fb54 	bl	80077c4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800b11c:	4603      	mov	r3, r0
 800b11e:	461a      	mov	r2, r3
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	2200      	movs	r2, #0
 800b128:	461c      	mov	r4, r3
 800b12a:	4615      	mov	r5, r2
 800b12c:	f107 0310 	add.w	r3, r7, #16
 800b130:	4618      	mov	r0, r3
 800b132:	f7fc fb53 	bl	80077dc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 800b136:	4603      	mov	r3, r0
 800b138:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 800b13c:	2301      	movs	r3, #1
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3718      	adds	r7, #24
 800b142:	46bd      	mov	sp, r7
 800b144:	bdb0      	pop	{r4, r5, r7, pc}

0800b146 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800b146:	b5b0      	push	{r4, r5, r7, lr}
 800b148:	b084      	sub	sp, #16
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	60fb      	str	r3, [r7, #12]
    return VariantAttorney::getResourceManager(upstream_);
  }

  FORCE_INLINE VariantData* getData() const {
    return VariantData::getElement(
        VariantAttorney::getData(upstream_), index_,
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3304      	adds	r3, #4
 800b156:	4618      	mov	r0, r3
 800b158:	f000 f96d 	bl	800b436 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>
 800b15c:	4605      	mov	r5, r0
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	68dc      	ldr	r4, [r3, #12]
        VariantAttorney::getResourceManager(upstream_));
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	3304      	adds	r3, #4
 800b166:	4618      	mov	r0, r3
 800b168:	f000 f971 	bl	800b44e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800b16c:	4603      	mov	r3, r0
    return VariantData::getElement(
 800b16e:	461a      	mov	r2, r3
 800b170:	4621      	mov	r1, r4
 800b172:	4628      	mov	r0, r5
 800b174:	f7fc ff5b 	bl	800802e <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 800b178:	4603      	mov	r3, r0
        VariantAttorney::getResourceManager(upstream_));
 800b17a:	bf00      	nop
  }
 800b17c:	4618      	mov	r0, r3
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bdb0      	pop	{r4, r5, r7, pc}

0800b184 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 f8e1 	bl	800b354 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>
 800b192:	4603      	mov	r3, r0
  }
 800b194:	4618      	mov	r0, r3
 800b196:	3708      	adds	r7, #8
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	00db      	lsls	r3, r3, #3
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	68b8      	ldr	r0, [r7, #8]
 800b1b0:	f012 f951 	bl	801d456 <_ZdlPvj>
      }
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b1ba:	b480      	push	{r7}
 800b1bc:	b083      	sub	sp, #12
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>:
    _Destroy(_Tp* __pointer)
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f7fd fa22 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
    }
 800b1de:	bf00      	nop
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>:
      constexpr _Head_base()
 800b1e6:	b480      	push	{r7}
 800b1e8:	b083      	sub	sp, #12
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4618      	mov	r0, r3
 800b208:	370c      	adds	r7, #12
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr
	...

0800b214 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f000 f8d7 	bl	800b3d4 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800b226:	4602      	mov	r2, r0
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	4293      	cmp	r3, r2
 800b22c:	bf8c      	ite	hi
 800b22e:	2301      	movhi	r3, #1
 800b230:	2300      	movls	r3, #0
 800b232:	b2db      	uxtb	r3, r3
 800b234:	2b00      	cmp	r3, #0
 800b236:	bf14      	ite	ne
 800b238:	2301      	movne	r3, #1
 800b23a:	2300      	moveq	r3, #0
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d007      	beq.n	800b252 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	4a09      	ldr	r2, [pc, #36]	@ (800b26c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d901      	bls.n	800b24e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800b24a:	f012 f92b 	bl	801d4a4 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800b24e:	f012 f926 	bl	801d49e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	222c      	movs	r2, #44	@ 0x2c
 800b256:	fb02 f303 	mul.w	r3, r2, r3
 800b25a:	4618      	mov	r0, r3
 800b25c:	f012 f90c 	bl	801d478 <_Znwj>
 800b260:	4603      	mov	r3, r0
 800b262:	bf00      	nop
      }
 800b264:	4618      	mov	r0, r3
 800b266:	3710      	adds	r7, #16
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	05d1745d 	.word	0x05d1745d

0800b270 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4618      	mov	r0, r3
 800b27c:	370c      	adds	r7, #12
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr

0800b286 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800b286:	b580      	push	{r7, lr}
 800b288:	b084      	sub	sp, #16
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	60f8      	str	r0, [r7, #12]
 800b28e:	60b9      	str	r1, [r7, #8]
 800b290:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	222c      	movs	r2, #44	@ 0x2c
 800b296:	fb02 f303 	mul.w	r3, r2, r3
 800b29a:	4619      	mov	r1, r3
 800b29c:	68b8      	ldr	r0, [r7, #8]
 800b29e:	f012 f8da 	bl	801d456 <_ZdlPvj>
      }
 800b2a2:	3710      	adds	r7, #16
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <_ZSt10_ConstructI12CommsHandlerJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	2020      	movs	r0, #32
 800b2ce:	f7fc fdd9 	bl	8007e84 <_ZnwjPv>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f001 ffe5 	bl	800d2a4 <_ZN12CommsHandlerC1Ev>
    }
 800b2da:	bf00      	nop
 800b2dc:	3708      	adds	r7, #8
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE7_M_addrEv>:
      _M_addr() noexcept
 800b2e2:	b480      	push	{r7}
 800b2e4:	b083      	sub	sp, #12
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800b2ea:	687b      	ldr	r3, [r7, #4]
      }
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	370c      	adds	r7, #12
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4618      	mov	r0, r3
 800b306:	370c      	adds	r7, #12
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4618      	mov	r0, r3
 800b31c:	370c      	adds	r7, #12
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr

0800b326 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>:
 800b326:	b480      	push	{r7}
 800b328:	b083      	sub	sp, #12
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4618      	mov	r0, r3
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 f853 	bl	800b3f0 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>
 800b34a:	4603      	mov	r3, r0
  }
 800b34c:	4618      	mov	r0, r3
 800b34e:	3708      	adds	r7, #8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	3304      	adds	r3, #4
 800b360:	4618      	mov	r0, r3
 800b362:	f000 f874 	bl	800b44e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800b366:	4603      	mov	r3, r0
  }
 800b368:	4618      	mov	r0, r3
 800b36a:	3708      	adds	r7, #8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>:
  VariantData* getOrAddMember(TAdaptedString key, ResourceManager* resources) {
 800b370:	b580      	push	{r7, lr}
 800b372:	b088      	sub	sp, #32
 800b374:	af02      	add	r7, sp, #8
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	4638      	mov	r0, r7
 800b37a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (key.isNull())
 800b37e:	463b      	mov	r3, r7
 800b380:	4618      	mov	r0, r3
 800b382:	f7f7 f9c4 	bl	800270e <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d001      	beq.n	800b390 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x20>
      return nullptr;
 800b38c:	2300      	movs	r3, #0
 800b38e:	e01d      	b.n	800b3cc <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    auto obj = isNull() ? &toObject() : asObject();
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	f7fc fe87 	bl	80080a4 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800b396:	4603      	mov	r3, r0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d004      	beq.n	800b3a6 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x36>
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f7f7 fc7d 	bl	8002c9c <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	e003      	b.n	800b3ae <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x3e>
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f7f7 fb6d 	bl	8002a86 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	617b      	str	r3, [r7, #20]
    if (!obj)
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d101      	bne.n	800b3ba <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x4a>
      return nullptr;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	e008      	b.n	800b3cc <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    return obj->getOrAddMember(key, resources);
 800b3ba:	6978      	ldr	r0, [r7, #20]
 800b3bc:	6a3b      	ldr	r3, [r7, #32]
 800b3be:	9300      	str	r3, [sp, #0]
 800b3c0:	463b      	mov	r3, r7
 800b3c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b3c4:	f000 f84f 	bl	800b466 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	bf00      	nop
  }
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3718      	adds	r7, #24
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800b3dc:	4b03      	ldr	r3, [pc, #12]	@ (800b3ec <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800b3de:	4618      	mov	r0, r3
 800b3e0:	370c      	adds	r7, #12
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	02e8ba2e 	.word	0x02e8ba2e

0800b3f0 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>:

  VariantData* getOrCreateData() const {
 800b3f0:	b590      	push	{r4, r7, lr}
 800b3f2:	b087      	sub	sp, #28
 800b3f4:	af02      	add	r7, sp, #8
 800b3f6:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	3304      	adds	r3, #4
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f000 f853 	bl	800b4a8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>
 800b402:	60f8      	str	r0, [r7, #12]
    if (!data)
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d101      	bne.n	800b40e <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800b40a:	2300      	movs	r3, #0
 800b40c:	e00f      	b.n	800b42e <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x3e>
    return data->getOrAddMember(key_,
 800b40e:	68fc      	ldr	r4, [r7, #12]
                                VariantAttorney::getResourceManager(upstream_));
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	3304      	adds	r3, #4
    return data->getOrAddMember(key_,
 800b414:	4618      	mov	r0, r3
 800b416:	f7ff feb5 	bl	800b184 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800b41a:	4602      	mov	r2, r0
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	9200      	str	r2, [sp, #0]
 800b420:	3314      	adds	r3, #20
 800b422:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b424:	4620      	mov	r0, r4
 800b426:	f7ff ffa3 	bl	800b370 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>
 800b42a:	4603      	mov	r3, r0
                                VariantAttorney::getResourceManager(upstream_));
 800b42c:	bf00      	nop
  }
 800b42e:	4618      	mov	r0, r3
 800b430:	3714      	adds	r7, #20
 800b432:	46bd      	mov	sp, r7
 800b434:	bd90      	pop	{r4, r7, pc}

0800b436 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800b436:	b580      	push	{r7, lr}
 800b438:	b082      	sub	sp, #8
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
    return client.getData();
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7fc fed5 	bl	80081ee <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>
 800b444:	4603      	mov	r3, r0
  }
 800b446:	4618      	mov	r0, r3
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800b44e:	b580      	push	{r7, lr}
 800b450:	b082      	sub	sp, #8
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f7fc febd 	bl	80081d6 <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>
 800b45c:	4603      	mov	r3, r0
  }
 800b45e:	4618      	mov	r0, r3
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}

0800b466 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
  it.next(resources);
  return it.data();
}

template <typename TAdaptedString>
VariantData* ObjectData::getOrAddMember(TAdaptedString key,
 800b466:	b580      	push	{r7, lr}
 800b468:	b088      	sub	sp, #32
 800b46a:	af02      	add	r7, sp, #8
 800b46c:	60f8      	str	r0, [r7, #12]
 800b46e:	4638      	mov	r0, r7
 800b470:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                        ResourceManager* resources) {
  auto data = getMember(key, resources);
 800b474:	6a3b      	ldr	r3, [r7, #32]
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	463b      	mov	r3, r7
 800b47a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b47c:	68f8      	ldr	r0, [r7, #12]
 800b47e:	f7fa f984 	bl	800578a <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 800b482:	6178      	str	r0, [r7, #20]
  if (data)
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d001      	beq.n	800b48e <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x28>
    return data;
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	e008      	b.n	800b4a0 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x3a>
  return addMember(key, resources);
 800b48e:	6a3b      	ldr	r3, [r7, #32]
 800b490:	9300      	str	r3, [sp, #0]
 800b492:	463b      	mov	r3, r7
 800b494:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b496:	68f8      	ldr	r0, [r7, #12]
 800b498:	f000 f812 	bl	800b4c0 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800b49c:	4603      	mov	r3, r0
 800b49e:	bf00      	nop
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3718      	adds	r7, #24
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f85b 	bl	800b56c <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>
 800b4b6:	4603      	mov	r3, r0
  }
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3708      	adds	r7, #8
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b08a      	sub	sp, #40	@ 0x28
 800b4c4:	af02      	add	r7, sp, #8
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	4638      	mov	r0, r7
 800b4ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 800b4ce:	f107 0318 	add.w	r3, r7, #24
 800b4d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7f7 ffbd 	bl	8003454 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 800b4da:	f107 0318 	add.w	r3, r7, #24
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7f9 fa5c 	bl	800499c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	f083 0301 	eor.w	r3, r3, #1
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d001      	beq.n	800b4f4 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x34>
    return nullptr;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	e037      	b.n	800b564 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  auto valueSlot = resources->allocVariant();
 800b4f4:	f107 0310 	add.w	r3, r7, #16
 800b4f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7f7 ffaa 	bl	8003454 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 800b500:	f107 0310 	add.w	r3, r7, #16
 800b504:	4618      	mov	r0, r3
 800b506:	f7f9 fa49 	bl	800499c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800b50a:	4603      	mov	r3, r0
 800b50c:	f083 0301 	eor.w	r3, r3, #1
 800b510:	b2db      	uxtb	r3, r3
 800b512:	2b00      	cmp	r3, #0
 800b514:	d001      	beq.n	800b51a <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x5a>
    return nullptr;
 800b516:	2300      	movs	r3, #0
 800b518:	e024      	b.n	800b564 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  if (!keySlot->setString(key, resources))
 800b51a:	f107 0318 	add.w	r3, r7, #24
 800b51e:	4618      	mov	r0, r3
 800b520:	f7f9 fa65 	bl	80049ee <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 800b524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	463b      	mov	r3, r7
 800b52a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b52c:	f7fe f938 	bl	80097a0 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>
 800b530:	4603      	mov	r3, r0
 800b532:	f083 0301 	eor.w	r3, r3, #1
 800b536:	b2db      	uxtb	r3, r3
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d001      	beq.n	800b540 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x80>
    return nullptr;
 800b53c:	2300      	movs	r3, #0
 800b53e:	e011      	b.n	800b564 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 800b540:	68f8      	ldr	r0, [r7, #12]
 800b542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b544:	9301      	str	r3, [sp, #4]
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	9300      	str	r3, [sp, #0]
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	f107 0218 	add.w	r2, r7, #24
 800b550:	ca06      	ldmia	r2, {r1, r2}
 800b552:	f7f7 fef8 	bl	8003346 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 800b556:	f107 0310 	add.w	r3, r7, #16
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7f9 fa2f 	bl	80049be <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800b560:	4603      	mov	r3, r0
 800b562:	bf00      	nop
}
 800b564:	4618      	mov	r0, r3
 800b566:	3720      	adds	r7, #32
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>:
  }

  VariantData* getOrCreateData() const {
 800b56c:	b5b0      	push	{r4, r5, r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	3304      	adds	r3, #4
 800b578:	4618      	mov	r0, r3
 800b57a:	f000 f81a 	bl	800b5b2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>
 800b57e:	60f8      	str	r0, [r7, #12]
    if (!data)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800b586:	2300      	movs	r3, #0
 800b588:	e00f      	b.n	800b5aa <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x3e>
    return data->getOrAddElement(
 800b58a:	68fc      	ldr	r4, [r7, #12]
        index_, VariantAttorney::getResourceManager(upstream_));
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	68dd      	ldr	r5, [r3, #12]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	3304      	adds	r3, #4
    return data->getOrAddElement(
 800b594:	4618      	mov	r0, r3
 800b596:	f7ff ff5a 	bl	800b44e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800b59a:	4603      	mov	r3, r0
 800b59c:	461a      	mov	r2, r3
 800b59e:	4629      	mov	r1, r5
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f7fc fd59 	bl	8008058 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>
 800b5a6:	4603      	mov	r3, r0
        index_, VariantAttorney::getResourceManager(upstream_));
 800b5a8:	bf00      	nop
  }
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bdb0      	pop	{r4, r5, r7, pc}

0800b5b2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b082      	sub	sp, #8
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f7fc fe25 	bl	800820a <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>
 800b5c0:	4603      	mov	r3, r0
  }
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3708      	adds	r7, #8
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
	...

0800b5cc <_Z41__static_initialization_and_destruction_0ii>:
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d10a      	bne.n	800b5f2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d105      	bne.n	800b5f2 <_Z41__static_initialization_and_destruction_0ii+0x26>
__attribute__((section(".DmaSection"))) volatile txData_t txData;
 800b5e6:	4805      	ldr	r0, [pc, #20]	@ (800b5fc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800b5e8:	f7fc fca2 	bl	8007f30 <_ZN8txData_tC1Ev>
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;
 800b5ec:	4804      	ldr	r0, [pc, #16]	@ (800b600 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800b5ee:	f7f5 fb21 	bl	8000c34 <_ZN8rxData_tC1Ev>
}
 800b5f2:	bf00      	nop
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	30000080 	.word	0x30000080
 800b600:	300000c0 	.word	0x300000c0

0800b604 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	4a05      	ldr	r2, [pc, #20]	@ (800b624 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	601a      	str	r2, [r3, #0]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4618      	mov	r0, r3
 800b616:	f7fe f8a3 	bl	8009760 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4618      	mov	r0, r3
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	0801f5d4 	.word	0x0801f5d4

0800b628 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f7ff ffe7 	bl	800b604 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b636:	212c      	movs	r1, #44	@ 0x2c
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f011 ff0c 	bl	801d456 <_ZdlPvj>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4618      	mov	r0, r3
 800b642:	3708      	adds	r7, #8
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800b648:	b590      	push	{r4, r7, lr}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	330c      	adds	r3, #12
 800b654:	4618      	mov	r0, r3
 800b656:	f000 f856 	bl	800b706 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800b65a:	4604      	mov	r4, r0
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f7ff faa6 	bl	800abae <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800b662:	4603      	mov	r3, r0
 800b664:	4619      	mov	r1, r3
 800b666:	4620      	mov	r0, r4
 800b668:	f000 f859 	bl	800b71e <_ZNSt16allocator_traitsISaIvEE7destroyI12CommsHandlerEEvRS0_PT_>
      }
 800b66c:	bf00      	nop
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	bd90      	pop	{r4, r7, pc}

0800b674 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	330c      	adds	r3, #12
 800b680:	4618      	mov	r0, r3
 800b682:	f000 f840 	bl	800b706 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800b686:	4602      	mov	r2, r0
 800b688:	f107 0314 	add.w	r3, r7, #20
 800b68c:	4611      	mov	r1, r2
 800b68e:	4618      	mov	r0, r3
 800b690:	f7ff fa0c 	bl	800aaac <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800b694:	f107 0114 	add.w	r1, r7, #20
 800b698:	f107 030c 	add.w	r3, r7, #12
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7ff fc25 	bl	800aeee <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f7ff ffad 	bl	800b604 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800b6aa:	f107 030c 	add.w	r3, r7, #12
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7ff fa28 	bl	800ab04 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800b6b4:	f107 0314 	add.w	r3, r7, #20
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7ff fa04 	bl	800aac6 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800b6be:	3718      	adds	r7, #24
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f7ff fa6d 	bl	800abae <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800b6d4:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800b6d6:	f7fc fc21 	bl	8007f1c <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 800b6da:	4602      	mov	r2, r0
	    ||
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d005      	beq.n	800b6ee <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 800b6e2:	6838      	ldr	r0, [r7, #0]
 800b6e4:	f011 feea 	bl	801d4bc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 800b6e8:	4603      	mov	r3, r0
	    ||
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d001      	beq.n	800b6f2 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	e000      	b.n	800b6f4 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 800b6f2:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d001      	beq.n	800b6fc <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	e000      	b.n	800b6fe <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 800b6fc:	2300      	movs	r3, #0
      }
 800b6fe:	4618      	mov	r0, r3
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 800b706:	b580      	push	{r7, lr}
 800b708:	b082      	sub	sp, #8
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 f811 	bl	800b736 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 800b714:	4603      	mov	r3, r0
 800b716:	4618      	mov	r0, r3
 800b718:	3708      	adds	r7, #8
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}

0800b71e <_ZNSt16allocator_traitsISaIvEE7destroyI12CommsHandlerEEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 800b71e:	b580      	push	{r7, lr}
 800b720:	b082      	sub	sp, #8
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
 800b726:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 800b728:	6838      	ldr	r0, [r7, #0]
 800b72a:	f000 f80f 	bl	800b74c <_ZSt8_DestroyI12CommsHandlerEvPT_>
 800b72e:	bf00      	nop
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800b736:	b480      	push	{r7}
 800b738:	b083      	sub	sp, #12
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	4618      	mov	r0, r3
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <_ZSt8_DestroyI12CommsHandlerEvPT_>:
    _Destroy(_Tp* __pointer)
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	4798      	blx	r3
    }
 800b75e:	bf00      	nop
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 800b766:	b580      	push	{r7, lr}
 800b768:	af00      	add	r7, sp, #0
 800b76a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800b76e:	2001      	movs	r0, #1
 800b770:	f7ff ff2c 	bl	800b5cc <_Z41__static_initialization_and_destruction_0ii>
 800b774:	bd80      	pop	{r7, pc}
	...

0800b778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b778:	b480      	push	{r7}
 800b77a:	b083      	sub	sp, #12
 800b77c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b77e:	4b0a      	ldr	r3, [pc, #40]	@ (800b7a8 <HAL_MspInit+0x30>)
 800b780:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b784:	4a08      	ldr	r2, [pc, #32]	@ (800b7a8 <HAL_MspInit+0x30>)
 800b786:	f043 0302 	orr.w	r3, r3, #2
 800b78a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b78e:	4b06      	ldr	r3, [pc, #24]	@ (800b7a8 <HAL_MspInit+0x30>)
 800b790:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b794:	f003 0302 	and.w	r3, r3, #2
 800b798:	607b      	str	r3, [r7, #4]
 800b79a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b79c:	bf00      	nop
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr
 800b7a8:	58024400 	.word	0x58024400

0800b7ac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b0bc      	sub	sp, #240	@ 0xf0
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7b4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	601a      	str	r2, [r3, #0]
 800b7bc:	605a      	str	r2, [r3, #4]
 800b7be:	609a      	str	r2, [r3, #8]
 800b7c0:	60da      	str	r2, [r3, #12]
 800b7c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b7c4:	f107 0318 	add.w	r3, r7, #24
 800b7c8:	22c0      	movs	r2, #192	@ 0xc0
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f012 fc4b 	bl	801e068 <memset>
  if(hsd->Instance==SDMMC1)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a3c      	ldr	r2, [pc, #240]	@ (800b8c8 <HAL_SD_MspInit+0x11c>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d171      	bne.n	800b8c0 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800b7dc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800b7e0:	f04f 0300 	mov.w	r3, #0
 800b7e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b7ec:	f107 0318 	add.w	r3, r7, #24
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f009 f833 	bl	801485c <HAL_RCCEx_PeriphCLKConfig>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d001      	beq.n	800b800 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800b7fc:	f7fc fb36 	bl	8007e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b800:	4b32      	ldr	r3, [pc, #200]	@ (800b8cc <HAL_SD_MspInit+0x120>)
 800b802:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b806:	4a31      	ldr	r2, [pc, #196]	@ (800b8cc <HAL_SD_MspInit+0x120>)
 800b808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b80c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800b810:	4b2e      	ldr	r3, [pc, #184]	@ (800b8cc <HAL_SD_MspInit+0x120>)
 800b812:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b816:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b81a:	617b      	str	r3, [r7, #20]
 800b81c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b81e:	4b2b      	ldr	r3, [pc, #172]	@ (800b8cc <HAL_SD_MspInit+0x120>)
 800b820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b824:	4a29      	ldr	r2, [pc, #164]	@ (800b8cc <HAL_SD_MspInit+0x120>)
 800b826:	f043 0304 	orr.w	r3, r3, #4
 800b82a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b82e:	4b27      	ldr	r3, [pc, #156]	@ (800b8cc <HAL_SD_MspInit+0x120>)
 800b830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b834:	f003 0304 	and.w	r3, r3, #4
 800b838:	613b      	str	r3, [r7, #16]
 800b83a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b83c:	4b23      	ldr	r3, [pc, #140]	@ (800b8cc <HAL_SD_MspInit+0x120>)
 800b83e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b842:	4a22      	ldr	r2, [pc, #136]	@ (800b8cc <HAL_SD_MspInit+0x120>)
 800b844:	f043 0308 	orr.w	r3, r3, #8
 800b848:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b84c:	4b1f      	ldr	r3, [pc, #124]	@ (800b8cc <HAL_SD_MspInit+0x120>)
 800b84e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b852:	f003 0308 	and.w	r3, r3, #8
 800b856:	60fb      	str	r3, [r7, #12]
 800b858:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800b85a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800b85e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b862:	2302      	movs	r3, #2
 800b864:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b868:	2300      	movs	r3, #0
 800b86a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b86e:	2303      	movs	r3, #3
 800b870:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800b874:	230c      	movs	r3, #12
 800b876:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b87a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800b87e:	4619      	mov	r1, r3
 800b880:	4813      	ldr	r0, [pc, #76]	@ (800b8d0 <HAL_SD_MspInit+0x124>)
 800b882:	f007 fde9 	bl	8013458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b886:	2304      	movs	r3, #4
 800b888:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b88c:	2302      	movs	r3, #2
 800b88e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b892:	2300      	movs	r3, #0
 800b894:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b898:	2303      	movs	r3, #3
 800b89a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800b89e:	230c      	movs	r3, #12
 800b8a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b8a4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	480a      	ldr	r0, [pc, #40]	@ (800b8d4 <HAL_SD_MspInit+0x128>)
 800b8ac:	f007 fdd4 	bl	8013458 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	2100      	movs	r1, #0
 800b8b4:	2031      	movs	r0, #49	@ 0x31
 800b8b6:	f005 f9de 	bl	8010c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800b8ba:	2031      	movs	r0, #49	@ 0x31
 800b8bc:	f005 f9f5 	bl	8010caa <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800b8c0:	bf00      	nop
 800b8c2:	37f0      	adds	r7, #240	@ 0xf0
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	52007000 	.word	0x52007000
 800b8cc:	58024400 	.word	0x58024400
 800b8d0:	58020800 	.word	0x58020800
 800b8d4:	58020c00 	.word	0x58020c00

0800b8d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b0ba      	sub	sp, #232	@ 0xe8
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8e0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	601a      	str	r2, [r3, #0]
 800b8e8:	605a      	str	r2, [r3, #4]
 800b8ea:	609a      	str	r2, [r3, #8]
 800b8ec:	60da      	str	r2, [r3, #12]
 800b8ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b8f0:	f107 0310 	add.w	r3, r7, #16
 800b8f4:	22c0      	movs	r2, #192	@ 0xc0
 800b8f6:	2100      	movs	r1, #0
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f012 fbb5 	bl	801e068 <memset>
  if(huart->Instance==USART1)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a27      	ldr	r2, [pc, #156]	@ (800b9a0 <HAL_UART_MspInit+0xc8>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d146      	bne.n	800b996 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800b908:	f04f 0201 	mov.w	r2, #1
 800b90c:	f04f 0300 	mov.w	r3, #0
 800b910:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800b914:	2300      	movs	r3, #0
 800b916:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b91a:	f107 0310 	add.w	r3, r7, #16
 800b91e:	4618      	mov	r0, r3
 800b920:	f008 ff9c 	bl	801485c <HAL_RCCEx_PeriphCLKConfig>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d001      	beq.n	800b92e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800b92a:	f7fc fa9f 	bl	8007e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b92e:	4b1d      	ldr	r3, [pc, #116]	@ (800b9a4 <HAL_UART_MspInit+0xcc>)
 800b930:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b934:	4a1b      	ldr	r2, [pc, #108]	@ (800b9a4 <HAL_UART_MspInit+0xcc>)
 800b936:	f043 0310 	orr.w	r3, r3, #16
 800b93a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b93e:	4b19      	ldr	r3, [pc, #100]	@ (800b9a4 <HAL_UART_MspInit+0xcc>)
 800b940:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b944:	f003 0310 	and.w	r3, r3, #16
 800b948:	60fb      	str	r3, [r7, #12]
 800b94a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b94c:	4b15      	ldr	r3, [pc, #84]	@ (800b9a4 <HAL_UART_MspInit+0xcc>)
 800b94e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b952:	4a14      	ldr	r2, [pc, #80]	@ (800b9a4 <HAL_UART_MspInit+0xcc>)
 800b954:	f043 0301 	orr.w	r3, r3, #1
 800b958:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b95c:	4b11      	ldr	r3, [pc, #68]	@ (800b9a4 <HAL_UART_MspInit+0xcc>)
 800b95e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b962:	f003 0301 	and.w	r3, r3, #1
 800b966:	60bb      	str	r3, [r7, #8]
 800b968:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b96a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800b96e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b972:	2302      	movs	r3, #2
 800b974:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b978:	2300      	movs	r3, #0
 800b97a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b97e:	2300      	movs	r3, #0
 800b980:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b984:	2307      	movs	r3, #7
 800b986:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b98a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800b98e:	4619      	mov	r1, r3
 800b990:	4805      	ldr	r0, [pc, #20]	@ (800b9a8 <HAL_UART_MspInit+0xd0>)
 800b992:	f007 fd61 	bl	8013458 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800b996:	bf00      	nop
 800b998:	37e8      	adds	r7, #232	@ 0xe8
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	40011000 	.word	0x40011000
 800b9a4:	58024400 	.word	0x58024400
 800b9a8:	58020000 	.word	0x58020000

0800b9ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b9b0:	bf00      	nop
 800b9b2:	e7fd      	b.n	800b9b0 <NMI_Handler+0x4>

0800b9b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b9b8:	bf00      	nop
 800b9ba:	e7fd      	b.n	800b9b8 <HardFault_Handler+0x4>

0800b9bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b9c0:	bf00      	nop
 800b9c2:	e7fd      	b.n	800b9c0 <MemManage_Handler+0x4>

0800b9c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b9c8:	bf00      	nop
 800b9ca:	e7fd      	b.n	800b9c8 <BusFault_Handler+0x4>

0800b9cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b9d0:	bf00      	nop
 800b9d2:	e7fd      	b.n	800b9d0 <UsageFault_Handler+0x4>

0800b9d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b9d8:	bf00      	nop
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b9e2:	b480      	push	{r7}
 800b9e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b9e6:	bf00      	nop
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b9f4:	bf00      	nop
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ba02:	f004 fff7 	bl	80109f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ba06:	bf00      	nop
 800ba08:	bd80      	pop	{r7, pc}
	...

0800ba0c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800ba10:	4802      	ldr	r0, [pc, #8]	@ (800ba1c <SDMMC1_IRQHandler+0x10>)
 800ba12:	f00b fe91 	bl	8017738 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800ba16:	bf00      	nop
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	240002f8 	.word	0x240002f8

0800ba20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ba20:	b480      	push	{r7}
 800ba22:	af00      	add	r7, sp, #0
	return 1;
 800ba24:	2301      	movs	r3, #1
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <_kill>:

int _kill(int pid, int sig)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800ba3a:	f012 fbb7 	bl	801e1ac <__errno>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2216      	movs	r2, #22
 800ba42:	601a      	str	r2, [r3, #0]
	return -1;
 800ba44:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3708      	adds	r7, #8
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <_exit>:

void _exit (int status)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800ba58:	f04f 31ff 	mov.w	r1, #4294967295
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f7ff ffe7 	bl	800ba30 <_kill>
	while (1) {}		/* Make sure we hang here */
 800ba62:	bf00      	nop
 800ba64:	e7fd      	b.n	800ba62 <_exit+0x12>

0800ba66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b086      	sub	sp, #24
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	60f8      	str	r0, [r7, #12]
 800ba6e:	60b9      	str	r1, [r7, #8]
 800ba70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba72:	2300      	movs	r3, #0
 800ba74:	617b      	str	r3, [r7, #20]
 800ba76:	e00a      	b.n	800ba8e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800ba78:	f3af 8000 	nop.w
 800ba7c:	4601      	mov	r1, r0
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	1c5a      	adds	r2, r3, #1
 800ba82:	60ba      	str	r2, [r7, #8]
 800ba84:	b2ca      	uxtb	r2, r1
 800ba86:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	617b      	str	r3, [r7, #20]
 800ba8e:	697a      	ldr	r2, [r7, #20]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	dbf0      	blt.n	800ba78 <_read+0x12>
	}

return len;
 800ba96:	687b      	ldr	r3, [r7, #4]
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3718      	adds	r7, #24
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b086      	sub	sp, #24
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	60f8      	str	r0, [r7, #12]
 800baa8:	60b9      	str	r1, [r7, #8]
 800baaa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800baac:	2300      	movs	r3, #0
 800baae:	617b      	str	r3, [r7, #20]
 800bab0:	e009      	b.n	800bac6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	1c5a      	adds	r2, r3, #1
 800bab6:	60ba      	str	r2, [r7, #8]
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	4618      	mov	r0, r3
 800babc:	f7fb ff22 	bl	8007904 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	3301      	adds	r3, #1
 800bac4:	617b      	str	r3, [r7, #20]
 800bac6:	697a      	ldr	r2, [r7, #20]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	429a      	cmp	r2, r3
 800bacc:	dbf1      	blt.n	800bab2 <_write+0x12>
	}
	return len;
 800bace:	687b      	ldr	r3, [r7, #4]
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3718      	adds	r7, #24
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <_close>:

int _close(int file)
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
	return -1;
 800bae0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	370c      	adds	r7, #12
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800bb00:	605a      	str	r2, [r3, #4]
	return 0;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <_isatty>:

int _isatty(int file)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
	return 1;
 800bb18:	2301      	movs	r3, #1
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	370c      	adds	r7, #12
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr

0800bb26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bb26:	b480      	push	{r7}
 800bb28:	b085      	sub	sp, #20
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	60f8      	str	r0, [r7, #12]
 800bb2e:	60b9      	str	r1, [r7, #8]
 800bb30:	607a      	str	r2, [r7, #4]
	return 0;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b086      	sub	sp, #24
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800bb48:	4a14      	ldr	r2, [pc, #80]	@ (800bb9c <_sbrk+0x5c>)
 800bb4a:	4b15      	ldr	r3, [pc, #84]	@ (800bba0 <_sbrk+0x60>)
 800bb4c:	1ad3      	subs	r3, r2, r3
 800bb4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800bb54:	4b13      	ldr	r3, [pc, #76]	@ (800bba4 <_sbrk+0x64>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d102      	bne.n	800bb62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800bb5c:	4b11      	ldr	r3, [pc, #68]	@ (800bba4 <_sbrk+0x64>)
 800bb5e:	4a12      	ldr	r2, [pc, #72]	@ (800bba8 <_sbrk+0x68>)
 800bb60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800bb62:	4b10      	ldr	r3, [pc, #64]	@ (800bba4 <_sbrk+0x64>)
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	4413      	add	r3, r2
 800bb6a:	693a      	ldr	r2, [r7, #16]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d207      	bcs.n	800bb80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800bb70:	f012 fb1c 	bl	801e1ac <__errno>
 800bb74:	4603      	mov	r3, r0
 800bb76:	220c      	movs	r2, #12
 800bb78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800bb7a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb7e:	e009      	b.n	800bb94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800bb80:	4b08      	ldr	r3, [pc, #32]	@ (800bba4 <_sbrk+0x64>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800bb86:	4b07      	ldr	r3, [pc, #28]	@ (800bba4 <_sbrk+0x64>)
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	4a05      	ldr	r2, [pc, #20]	@ (800bba4 <_sbrk+0x64>)
 800bb90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800bb92:	68fb      	ldr	r3, [r7, #12]
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3718      	adds	r7, #24
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	24080000 	.word	0x24080000
 800bba0:	00000400 	.word	0x00000400
 800bba4:	24000408 	.word	0x24000408
 800bba8:	24000c10 	.word	0x24000c10

0800bbac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800bbac:	b480      	push	{r7}
 800bbae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800bbb0:	4b37      	ldr	r3, [pc, #220]	@ (800bc90 <SystemInit+0xe4>)
 800bbb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bbb6:	4a36      	ldr	r2, [pc, #216]	@ (800bc90 <SystemInit+0xe4>)
 800bbb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bbbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800bbc0:	4b34      	ldr	r3, [pc, #208]	@ (800bc94 <SystemInit+0xe8>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f003 030f 	and.w	r3, r3, #15
 800bbc8:	2b06      	cmp	r3, #6
 800bbca:	d807      	bhi.n	800bbdc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800bbcc:	4b31      	ldr	r3, [pc, #196]	@ (800bc94 <SystemInit+0xe8>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f023 030f 	bic.w	r3, r3, #15
 800bbd4:	4a2f      	ldr	r2, [pc, #188]	@ (800bc94 <SystemInit+0xe8>)
 800bbd6:	f043 0307 	orr.w	r3, r3, #7
 800bbda:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800bbdc:	4b2e      	ldr	r3, [pc, #184]	@ (800bc98 <SystemInit+0xec>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a2d      	ldr	r2, [pc, #180]	@ (800bc98 <SystemInit+0xec>)
 800bbe2:	f043 0301 	orr.w	r3, r3, #1
 800bbe6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800bbe8:	4b2b      	ldr	r3, [pc, #172]	@ (800bc98 <SystemInit+0xec>)
 800bbea:	2200      	movs	r2, #0
 800bbec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800bbee:	4b2a      	ldr	r3, [pc, #168]	@ (800bc98 <SystemInit+0xec>)
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	4929      	ldr	r1, [pc, #164]	@ (800bc98 <SystemInit+0xec>)
 800bbf4:	4b29      	ldr	r3, [pc, #164]	@ (800bc9c <SystemInit+0xf0>)
 800bbf6:	4013      	ands	r3, r2
 800bbf8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800bbfa:	4b26      	ldr	r3, [pc, #152]	@ (800bc94 <SystemInit+0xe8>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f003 0308 	and.w	r3, r3, #8
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d007      	beq.n	800bc16 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800bc06:	4b23      	ldr	r3, [pc, #140]	@ (800bc94 <SystemInit+0xe8>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f023 030f 	bic.w	r3, r3, #15
 800bc0e:	4a21      	ldr	r2, [pc, #132]	@ (800bc94 <SystemInit+0xe8>)
 800bc10:	f043 0307 	orr.w	r3, r3, #7
 800bc14:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800bc16:	4b20      	ldr	r3, [pc, #128]	@ (800bc98 <SystemInit+0xec>)
 800bc18:	2200      	movs	r2, #0
 800bc1a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800bc1c:	4b1e      	ldr	r3, [pc, #120]	@ (800bc98 <SystemInit+0xec>)
 800bc1e:	2200      	movs	r2, #0
 800bc20:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800bc22:	4b1d      	ldr	r3, [pc, #116]	@ (800bc98 <SystemInit+0xec>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800bc28:	4b1b      	ldr	r3, [pc, #108]	@ (800bc98 <SystemInit+0xec>)
 800bc2a:	4a1d      	ldr	r2, [pc, #116]	@ (800bca0 <SystemInit+0xf4>)
 800bc2c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800bc2e:	4b1a      	ldr	r3, [pc, #104]	@ (800bc98 <SystemInit+0xec>)
 800bc30:	4a1c      	ldr	r2, [pc, #112]	@ (800bca4 <SystemInit+0xf8>)
 800bc32:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800bc34:	4b18      	ldr	r3, [pc, #96]	@ (800bc98 <SystemInit+0xec>)
 800bc36:	4a1c      	ldr	r2, [pc, #112]	@ (800bca8 <SystemInit+0xfc>)
 800bc38:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800bc3a:	4b17      	ldr	r3, [pc, #92]	@ (800bc98 <SystemInit+0xec>)
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800bc40:	4b15      	ldr	r3, [pc, #84]	@ (800bc98 <SystemInit+0xec>)
 800bc42:	4a19      	ldr	r2, [pc, #100]	@ (800bca8 <SystemInit+0xfc>)
 800bc44:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800bc46:	4b14      	ldr	r3, [pc, #80]	@ (800bc98 <SystemInit+0xec>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800bc4c:	4b12      	ldr	r3, [pc, #72]	@ (800bc98 <SystemInit+0xec>)
 800bc4e:	4a16      	ldr	r2, [pc, #88]	@ (800bca8 <SystemInit+0xfc>)
 800bc50:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800bc52:	4b11      	ldr	r3, [pc, #68]	@ (800bc98 <SystemInit+0xec>)
 800bc54:	2200      	movs	r2, #0
 800bc56:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800bc58:	4b0f      	ldr	r3, [pc, #60]	@ (800bc98 <SystemInit+0xec>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a0e      	ldr	r2, [pc, #56]	@ (800bc98 <SystemInit+0xec>)
 800bc5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bc62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800bc64:	4b0c      	ldr	r3, [pc, #48]	@ (800bc98 <SystemInit+0xec>)
 800bc66:	2200      	movs	r2, #0
 800bc68:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800bc6a:	4b10      	ldr	r3, [pc, #64]	@ (800bcac <SystemInit+0x100>)
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	4b10      	ldr	r3, [pc, #64]	@ (800bcb0 <SystemInit+0x104>)
 800bc70:	4013      	ands	r3, r2
 800bc72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc76:	d202      	bcs.n	800bc7e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800bc78:	4b0e      	ldr	r3, [pc, #56]	@ (800bcb4 <SystemInit+0x108>)
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800bc7e:	4b0e      	ldr	r3, [pc, #56]	@ (800bcb8 <SystemInit+0x10c>)
 800bc80:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800bc84:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800bc86:	bf00      	nop
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr
 800bc90:	e000ed00 	.word	0xe000ed00
 800bc94:	52002000 	.word	0x52002000
 800bc98:	58024400 	.word	0x58024400
 800bc9c:	eaf6ed7f 	.word	0xeaf6ed7f
 800bca0:	02020200 	.word	0x02020200
 800bca4:	01ff0000 	.word	0x01ff0000
 800bca8:	01010280 	.word	0x01010280
 800bcac:	5c001000 	.word	0x5c001000
 800bcb0:	ffff0000 	.word	0xffff0000
 800bcb4:	51008108 	.word	0x51008108
 800bcb8:	52004000 	.word	0x52004000

0800bcbc <_ZN3Pin3setEb>:
        inline bool get()
        {
            return HAL_GPIO_ReadPin(this->GPIOx, this->pin);
        }

        inline void set(bool value)
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	70fb      	strb	r3, [r7, #3]
        {
            if (value)
 800bcc8:	78fb      	ldrb	r3, [r7, #3]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d008      	beq.n	800bce0 <_ZN3Pin3setEb+0x24>
            {
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_SET);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	8bdb      	ldrh	r3, [r3, #30]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	4619      	mov	r1, r3
 800bcda:	f007 fd85 	bl	80137e8 <HAL_GPIO_WritePin>
            }
            else
            {
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
            }
        }
 800bcde:	e007      	b.n	800bcf0 <_ZN3Pin3setEb+0x34>
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	8bdb      	ldrh	r3, [r3, #30]
 800bce8:	2200      	movs	r2, #0
 800bcea:	4619      	mov	r1, r3
 800bcec:	f007 fd7c 	bl	80137e8 <HAL_GPIO_WritePin>
        }
 800bcf0:	bf00      	nop
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "blink.h"


shared_ptr<Module> Blink::create(const JsonObject& config, Remora* instance) {
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b09a      	sub	sp, #104	@ 0x68
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
    const char* pin = config["Pin"];
 800bd04:	f107 031c 	add.w	r3, r7, #28
 800bd08:	4a23      	ldr	r2, [pc, #140]	@ (800bd98 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa0>)
 800bd0a:	68b9      	ldr	r1, [r7, #8]
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f000 f8b7 	bl	800be80 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800bd12:	f107 031c 	add.w	r3, r7, #28
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7f9 f8f8 	bl	8004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	61bb      	str	r3, [r7, #24]
    int frequency = config["Frequency"];
 800bd20:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800bd24:	4a1d      	ldr	r2, [pc, #116]	@ (800bd9c <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa4>)
 800bd26:	68b9      	ldr	r1, [r7, #8]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7f9 f8fb 	bl	8004f24 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800bd2e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800bd32:	4618      	mov	r0, r3
 800bd34:	f000 f8c9 	bl	800beca <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	617b      	str	r3, [r7, #20]
    uint32_t threadFreq = config["ThreadFreq"];
 800bd3c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800bd40:	4a17      	ldr	r2, [pc, #92]	@ (800bda0 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa8>)
 800bd42:	68b9      	ldr	r1, [r7, #8]
 800bd44:	4618      	mov	r0, r3
 800bd46:	f000 f8cc 	bl	800bee2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800bd4a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7f9 f90d 	bl	8004f6e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 800bd54:	4603      	mov	r3, r0
 800bd56:	613b      	str	r3, [r7, #16]
    
    printf("Creating Blink module on pin %s with frequency %d Hz\n", pin, frequency);
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	697a      	ldr	r2, [r7, #20]
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	4811      	ldr	r0, [pc, #68]	@ (800bda4 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xac>)
 800bd60:	f012 f818 	bl	801dd94 <iprintf>
	return std::make_unique<Blink>(pin, threadFreq, frequency);
 800bd64:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800bd68:	f107 0314 	add.w	r3, r7, #20
 800bd6c:	f107 0210 	add.w	r2, r7, #16
 800bd70:	f107 0118 	add.w	r1, r7, #24
 800bd74:	f000 f8da 	bl	800bf2c <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800bd78:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f000 f937 	bl	800bff2 <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 800bd84:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f000 f910 	bl	800bfae <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>
 800bd8e:	bf00      	nop
}
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	3768      	adds	r7, #104	@ 0x68
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	0801f1a4 	.word	0x0801f1a4
 800bd9c:	0801f1a8 	.word	0x0801f1a8
 800bda0:	0801f1b4 	.word	0x0801f1b4
 800bda4:	0801f1c0 	.word	0x0801f1c0

0800bda8 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>:
 * @brief Constructs a Blink module.
 * 
 * Initializes the blink pin and sets up the toggle period based on the 
 * servo thread frequency and desired blink frequency.
 */
Blink::Blink(std::string _portAndPin, uint32_t _threadFreq, uint32_t _freq) :
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b086      	sub	sp, #24
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
 800bdb4:	603b      	str	r3, [r7, #0]
	bState(false),
    periodCount(_threadFreq / _freq),
    blinkCount(0),
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f001 fead 	bl	800db18 <_ZN6ModuleC1Ev>
 800bdbe:	4a15      	ldr	r2, [pc, #84]	@ (800be14 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm+0x6c>)
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	601a      	str	r2, [r3, #0]
	bState(false),
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	755a      	strb	r2, [r3, #21]
    periodCount(_threadFreq / _freq),
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	fbb2 f2f3 	udiv	r2, r2, r3
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	619a      	str	r2, [r3, #24]
    blinkCount(0),
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	61da      	str	r2, [r3, #28]
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800bddc:	2301      	movs	r3, #1
 800bdde:	617b      	str	r3, [r7, #20]
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	3320      	adds	r3, #32
 800bde4:	f107 0214 	add.w	r2, r7, #20
 800bde8:	68b9      	ldr	r1, [r7, #8]
 800bdea:	4618      	mov	r0, r3
 800bdec:	f000 f914 	bl	800c018 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
{
	blinkPin->set(bState);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	3320      	adds	r3, #32
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f000 f95f 	bl	800c0b8 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	7d5b      	ldrb	r3, [r3, #21]
 800be00:	4619      	mov	r1, r3
 800be02:	4610      	mov	r0, r2
 800be04:	f7ff ff5a 	bl	800bcbc <_ZN3Pin3setEb>
}
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	4618      	mov	r0, r3
 800be0c:	3718      	adds	r7, #24
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	0801f638 	.word	0x0801f638

0800be18 <_ZN5Blink6updateEv>:

void Blink::update(void)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
	++blinkCount;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	69db      	ldr	r3, [r3, #28]
 800be24:	1c5a      	adds	r2, r3, #1
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	61da      	str	r2, [r3, #28]
	if (blinkCount >= periodCount / 2)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	69da      	ldr	r2, [r3, #28]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	699b      	ldr	r3, [r3, #24]
 800be32:	085b      	lsrs	r3, r3, #1
 800be34:	429a      	cmp	r2, r3
 800be36:	d315      	bcc.n	800be64 <_ZN5Blink6updateEv+0x4c>
	{
        bState = !bState;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	7d5b      	ldrb	r3, [r3, #21]
 800be3c:	f083 0301 	eor.w	r3, r3, #1
 800be40:	b2da      	uxtb	r2, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	755a      	strb	r2, [r3, #21]
        blinkPin->set(bState);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	3320      	adds	r3, #32
 800be4a:	4618      	mov	r0, r3
 800be4c:	f000 f934 	bl	800c0b8 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800be50:	4602      	mov	r2, r0
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	7d5b      	ldrb	r3, [r3, #21]
 800be56:	4619      	mov	r1, r3
 800be58:	4610      	mov	r0, r2
 800be5a:	f7ff ff2f 	bl	800bcbc <_ZN3Pin3setEb>
        blinkCount = 0;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	61da      	str	r2, [r3, #28]
	}
}
 800be64:	bf00      	nop
 800be66:	3708      	adds	r7, #8
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <_ZN5Blink10slowUpdateEv>:

void Blink::slowUpdate(void)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
	return;
 800be74:	bf00      	nop
}
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800be80:	b580      	push	{r7, lr}
 800be82:	b08c      	sub	sp, #48	@ 0x30
 800be84:	af02      	add	r7, sp, #8
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800be8c:	68ba      	ldr	r2, [r7, #8]
 800be8e:	f107 0314 	add.w	r3, r7, #20
 800be92:	e892 0003 	ldmia.w	r2, {r0, r1}
 800be96:	e883 0003 	stmia.w	r3, {r0, r1}
 800be9a:	f107 031c 	add.w	r3, r7, #28
 800be9e:	6879      	ldr	r1, [r7, #4]
 800bea0:	4618      	mov	r0, r3
 800bea2:	f000 f920 	bl	800c0e6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800bea6:	466a      	mov	r2, sp
 800bea8:	f107 0320 	add.w	r3, r7, #32
 800beac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800beb0:	e882 0003 	stmia.w	r2, {r0, r1}
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	f107 0214 	add.w	r2, r7, #20
 800beba:	ca06      	ldmia	r2, {r1, r2}
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	f7f9 f994 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800bec2:	68f8      	ldr	r0, [r7, #12]
 800bec4:	3728      	adds	r7, #40	@ 0x28
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>:
  operator T() const {
 800beca:	b580      	push	{r7, lr}
 800becc:	b082      	sub	sp, #8
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
    return as<T>();
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 f91a 	bl	800c10c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>
 800bed8:	4603      	mov	r3, r0
  }
 800beda:	4618      	mov	r0, r3
 800bedc:	3708      	adds	r7, #8
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b08c      	sub	sp, #48	@ 0x30
 800bee6:	af02      	add	r7, sp, #8
 800bee8:	60f8      	str	r0, [r7, #12]
 800beea:	60b9      	str	r1, [r7, #8]
 800beec:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800beee:	68ba      	ldr	r2, [r7, #8]
 800bef0:	f107 0314 	add.w	r3, r7, #20
 800bef4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bef8:	e883 0003 	stmia.w	r3, {r0, r1}
 800befc:	f107 031c 	add.w	r3, r7, #28
 800bf00:	6879      	ldr	r1, [r7, #4]
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7fe f898 	bl	800a038 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800bf08:	466a      	mov	r2, sp
 800bf0a:	f107 0320 	add.w	r3, r7, #32
 800bf0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf12:	e882 0003 	stmia.w	r2, {r0, r1}
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	f107 0214 	add.w	r2, r7, #20
 800bf1c:	ca06      	ldmia	r2, {r1, r2}
 800bf1e:	68f8      	ldr	r0, [r7, #12]
 800bf20:	f7f9 f963 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800bf24:	68f8      	ldr	r0, [r7, #12]
 800bf26:	3728      	adds	r7, #40	@ 0x28
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800bf2c:	b5b0      	push	{r4, r5, r7, lr}
 800bf2e:	b08c      	sub	sp, #48	@ 0x30
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	607a      	str	r2, [r7, #4]
 800bf38:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800bf3a:	2024      	movs	r0, #36	@ 0x24
 800bf3c:	f011 fa9c 	bl	801d478 <_Znwj>
 800bf40:	4603      	mov	r3, r0
 800bf42:	461d      	mov	r5, r3
 800bf44:	68b8      	ldr	r0, [r7, #8]
 800bf46:	f000 f903 	bl	800c150 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	681c      	ldr	r4, [r3, #0]
 800bf4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bf52:	4618      	mov	r0, r3
 800bf54:	f011 faa1 	bl	801d49a <_ZNSaIcEC1Ev>
 800bf58:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800bf5c:	f107 0314 	add.w	r3, r7, #20
 800bf60:	4621      	mov	r1, r4
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7f8 ff4c 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f7fd ff18 	bl	8009d9e <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	681c      	ldr	r4, [r3, #0]
 800bf72:	6838      	ldr	r0, [r7, #0]
 800bf74:	f000 f8f7 	bl	800c166 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f107 0114 	add.w	r1, r7, #20
 800bf80:	4622      	mov	r2, r4
 800bf82:	4628      	mov	r0, r5
 800bf84:	f7ff ff10 	bl	800bda8 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>
 800bf88:	4629      	mov	r1, r5
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f000 f906 	bl	800c19c <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800bf90:	f107 0314 	add.w	r3, r7, #20
 800bf94:	4618      	mov	r0, r3
 800bf96:	f011 fb1b 	bl	801d5d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800bf9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f011 fa7c 	bl	801d49c <_ZNSaIcED1Ev>
 800bfa4:	bf00      	nop
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	3730      	adds	r7, #48	@ 0x30
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bdb0      	pop	{r4, r5, r7, pc}

0800bfae <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800bfae:	b590      	push	{r4, r7, lr}
 800bfb0:	b085      	sub	sp, #20
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f000 f8fe 	bl	800c1ba <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800bfbe:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00c      	beq.n	800bfe2 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 f903 	bl	800c1d4 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800bfce:	4604      	mov	r4, r0
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f000 f90c 	bl	800c1ee <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4619      	mov	r1, r3
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f000 f939 	bl	800c254 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
	__ptr = pointer();
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	601a      	str	r2, [r3, #0]
      }
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4618      	mov	r0, r3
 800bfec:	3714      	adds	r7, #20
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd90      	pop	{r4, r7, pc}

0800bff2 <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800bff2:	b590      	push	{r4, r7, lr}
 800bff4:	b083      	sub	sp, #12
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
 800bffa:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800bffc:	687c      	ldr	r4, [r7, #4]
 800bffe:	6838      	ldr	r0, [r7, #0]
 800c000:	f000 f939 	bl	800c276 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800c004:	4603      	mov	r3, r0
 800c006:	4619      	mov	r1, r3
 800c008:	4620      	mov	r0, r4
 800c00a:	f000 f93f 	bl	800c28c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4618      	mov	r0, r3
 800c012:	370c      	adds	r7, #12
 800c014:	46bd      	mov	sp, r7
 800c016:	bd90      	pop	{r4, r7, pc}

0800c018 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800c018:	b590      	push	{r4, r7, lr}
 800c01a:	b08b      	sub	sp, #44	@ 0x2c
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c024:	2044      	movs	r0, #68	@ 0x44
 800c026:	f011 fa27 	bl	801d478 <_Znwj>
 800c02a:	4603      	mov	r3, r0
 800c02c:	461c      	mov	r4, r3
 800c02e:	68b8      	ldr	r0, [r7, #8]
 800c030:	f000 f964 	bl	800c2fc <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800c034:	4602      	mov	r2, r0
 800c036:	f107 0310 	add.w	r3, r7, #16
 800c03a:	4611      	mov	r1, r2
 800c03c:	4618      	mov	r0, r3
 800c03e:	f011 fbc6 	bl	801d7ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f844 	bl	800c0d0 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800c048:	4603      	mov	r3, r0
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	f107 0310 	add.w	r3, r7, #16
 800c050:	4619      	mov	r1, r3
 800c052:	4620      	mov	r0, r4
 800c054:	f7f6 f8c7 	bl	80021e6 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800c058:	4621      	mov	r1, r4
 800c05a:	68f8      	ldr	r0, [r7, #12]
 800c05c:	f000 f969 	bl	800c332 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c060:	f107 0310 	add.w	r3, r7, #16
 800c064:	4618      	mov	r0, r3
 800c066:	f011 fab3 	bl	801d5d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c06a:	bf00      	nop
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	372c      	adds	r7, #44	@ 0x2c
 800c070:	46bd      	mov	sp, r7
 800c072:	bd90      	pop	{r4, r7, pc}

0800c074 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800c074:	b590      	push	{r4, r7, lr}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4618      	mov	r0, r3
 800c080:	f000 f966 	bl	800c350 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800c084:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00c      	beq.n	800c0a8 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 f96b 	bl	800c36a <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>
 800c094:	4604      	mov	r4, r0
 800c096:	68f8      	ldr	r0, [r7, #12]
 800c098:	f000 f974 	bl	800c384 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>
 800c09c:	4603      	mov	r3, r0
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	f000 f986 	bl	800c3b4 <_ZNKSt14default_deleteI3PinEclEPS0_>
	__ptr = pointer();
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	601a      	str	r2, [r3, #0]
      }
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3714      	adds	r7, #20
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd90      	pop	{r4, r7, pc}

0800c0b8 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
	return get();
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 f98a 	bl	800c3da <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>
 800c0c6:	4603      	mov	r3, r0
      }
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3708      	adds	r7, #8
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c0d0:	b480      	push	{r7}
 800c0d2:	b083      	sub	sp, #12
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	370c      	adds	r7, #12
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr

0800c0e6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b082      	sub	sp, #8
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800c0f0:	6838      	ldr	r0, [r7, #0]
 800c0f2:	f000 f97f 	bl	800c3f4 <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4611      	mov	r1, r2
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f000 f984 	bl	800c40a <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>
 800c102:	bf00      	nop
}
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	3708      	adds	r7, #8
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>:
  return add<JsonVariant>();
}

template <typename TDerived>
template <typename T>
inline T VariantRefBase<TDerived>::as() const {
 800c10c:	b590      	push	{r4, r7, lr}
 800c10e:	b087      	sub	sp, #28
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	617b      	str	r3, [r7, #20]
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800c11c:	6938      	ldr	r0, [r7, #16]
 800c11e:	f7f9 ff76 	bl	800600e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 800c122:	4604      	mov	r4, r0
 800c124:	6938      	ldr	r0, [r7, #16]
 800c126:	f7f9 fe00 	bl	8005d2a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 800c12a:	4602      	mov	r2, r0
 800c12c:	f107 0308 	add.w	r3, r7, #8
 800c130:	4621      	mov	r1, r4
 800c132:	4618      	mov	r0, r3
 800c134:	f7f6 fe9b 	bl	8002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800c138:	bf00      	nop
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::fromJson)>::arg1_type;
  return Converter<T>::fromJson(getVariant<variant_type>());
 800c13a:	f107 0308 	add.w	r3, r7, #8
 800c13e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c142:	f000 f971 	bl	800c428 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>
 800c146:	4603      	mov	r3, r0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	371c      	adds	r7, #28
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd90      	pop	{r4, r7, pc}

0800c150 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	4618      	mov	r0, r3
 800c15c:	370c      	adds	r7, #12
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr

0800c166 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c166:	b480      	push	{r7}
 800c168:	b083      	sub	sp, #12
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4618      	mov	r0, r3
 800c172:	370c      	adds	r7, #12
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	683a      	ldr	r2, [r7, #0]
 800c18a:	4611      	mov	r1, r2
 800c18c:	4618      	mov	r0, r3
 800c18e:	f000 f969 	bl	800c464 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4618      	mov	r0, r3
 800c196:	3708      	adds	r7, #8
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6839      	ldr	r1, [r7, #0]
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7ff ffe6 	bl	800c17c <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3708      	adds	r7, #8
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b082      	sub	sp, #8
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f000 f961 	bl	800c48c <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3708      	adds	r7, #8
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f000 f961 	bl	800c4a6 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c1ee:	b480      	push	{r7}
 800c1f0:	b083      	sub	sp, #12
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	370c      	adds	r7, #12
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <_ZN5BlinkD1Ev>:
 * @class Blink
 * @brief A module for toggling a pin at a specific frequency.
 * 
 * The Blink class controls a GPIO pin, toggling its state at a specified frequency.
 */
class Blink : public Module
 800c204:	b580      	push	{r7, lr}
 800c206:	b082      	sub	sp, #8
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	4a08      	ldr	r2, [pc, #32]	@ (800c230 <_ZN5BlinkD1Ev+0x2c>)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	601a      	str	r2, [r3, #0]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	3320      	adds	r3, #32
 800c216:	4618      	mov	r0, r3
 800c218:	f7ff ff2c 	bl	800c074 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	4618      	mov	r0, r3
 800c220:	f001 fc96 	bl	800db50 <_ZN6ModuleD1Ev>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	4618      	mov	r0, r3
 800c228:	3708      	adds	r7, #8
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	0801f638 	.word	0x0801f638

0800c234 <_ZN5BlinkD0Ev>:
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f7ff ffe1 	bl	800c204 <_ZN5BlinkD1Ev>
 800c242:	2124      	movs	r1, #36	@ 0x24
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f011 f906 	bl	801d456 <_ZdlPvj>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4618      	mov	r0, r3
 800c24e:	3708      	adds	r7, #8
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <_ZNKSt14default_deleteI5BlinkEclEPS0_>:
      operator()(_Tp* __ptr) const
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d004      	beq.n	800c26e <_ZNKSt14default_deleteI5BlinkEclEPS0_+0x1a>
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	3204      	adds	r2, #4
 800c268:	6812      	ldr	r2, [r2, #0]
 800c26a:	4618      	mov	r0, r3
 800c26c:	4790      	blx	r2
      }
 800c26e:	bf00      	nop
 800c270:	3708      	adds	r7, #8
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800c276:	b480      	push	{r7}
 800c278:	b083      	sub	sp, #12
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4618      	mov	r0, r3
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 800c296:	6838      	ldr	r0, [r7, #0]
 800c298:	f000 f912 	bl	800c4c0 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800c29c:	4602      	mov	r2, r0
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	601a      	str	r2, [r3, #0]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	3304      	adds	r3, #4
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7fd ff66 	bl	800a178 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 800c2ac:	6838      	ldr	r0, [r7, #0]
 800c2ae:	f000 f907 	bl	800c4c0 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f000 f910 	bl	800c4da <_ZSt12__to_addressI5BlinkEPT_S2_>
 800c2ba:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 800c2bc:	6838      	ldr	r0, [r7, #0]
 800c2be:	f7ff ffda 	bl	800c276 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	f107 0308 	add.w	r3, r7, #8
 800c2c8:	4611      	mov	r1, r2
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f000 f910 	bl	800c4f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	3304      	adds	r3, #4
 800c2d4:	f107 0208 	add.w	r2, r7, #8
 800c2d8:	4611      	mov	r1, r2
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f000 f94a 	bl	800c574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800c2e0:	f107 0308 	add.w	r3, r7, #8
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7fc ff81 	bl	80091ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 800c2ea:	68f9      	ldr	r1, [r7, #12]
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 f965 	bl	800c5bc <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3710      	adds	r7, #16
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4618      	mov	r0, r3
 800c308:	370c      	adds	r7, #12
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr

0800c312 <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800c312:	b580      	push	{r7, lr}
 800c314:	b082      	sub	sp, #8
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	6039      	str	r1, [r7, #0]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	683a      	ldr	r2, [r7, #0]
 800c320:	4611      	mov	r1, r2
 800c322:	4618      	mov	r0, r3
 800c324:	f000 f955 	bl	800c5d2 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	4618      	mov	r0, r3
 800c32c:	3708      	adds	r7, #8
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800c332:	b580      	push	{r7, lr}
 800c334:	b082      	sub	sp, #8
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
 800c33a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6839      	ldr	r1, [r7, #0]
 800c340:	4618      	mov	r0, r3
 800c342:	f7ff ffe6 	bl	800c312 <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	4618      	mov	r0, r3
 800c34a:	3708      	adds	r7, #8
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	4618      	mov	r0, r3
 800c35c:	f000 f94d 	bl	800c5fa <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c360:	4603      	mov	r3, r0
 800c362:	4618      	mov	r0, r3
 800c364:	3708      	adds	r7, #8
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b082      	sub	sp, #8
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	4618      	mov	r0, r3
 800c376:	f000 f94d 	bl	800c614 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>
 800c37a:	4603      	mov	r3, r0
 800c37c:	4618      	mov	r0, r3
 800c37e:	3708      	adds	r7, #8
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	4618      	mov	r0, r3
 800c390:	370c      	adds	r7, #12
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr

0800c39a <_ZN3PinD1Ev>:
class Pin
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b082      	sub	sp, #8
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f011 f913 	bl	801d5d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3708      	adds	r7, #8
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <_ZNKSt14default_deleteI3PinEclEPS0_>:
      operator()(_Tp* __ptr) const
 800c3b4:	b590      	push	{r4, r7, lr}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c3be:	683c      	ldr	r4, [r7, #0]
 800c3c0:	2c00      	cmp	r4, #0
 800c3c2:	d006      	beq.n	800c3d2 <_ZNKSt14default_deleteI3PinEclEPS0_+0x1e>
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f7ff ffe8 	bl	800c39a <_ZN3PinD1Ev>
 800c3ca:	2144      	movs	r1, #68	@ 0x44
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	f011 f842 	bl	801d456 <_ZdlPvj>
      }
 800c3d2:	bf00      	nop
 800c3d4:	370c      	adds	r7, #12
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd90      	pop	{r4, r7, pc}

0800c3da <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b082      	sub	sp, #8
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f000 f922 	bl	800c62e <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3708      	adds	r7, #8
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800c3fc:	687b      	ldr	r3, [r7, #4]
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	370c      	adds	r7, #12
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr

0800c40a <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b082      	sub	sp, #8
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
 800c412:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800c414:	2301      	movs	r3, #1
 800c416:	2203      	movs	r2, #3
 800c418:	6839      	ldr	r1, [r7, #0]
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f7f6 f960 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>:
    auto resources = getResourceManager(dst);
    data->clear(resources);
    return data->setInteger(src, resources);
  }

  static T fromJson(JsonVariantConst src) {
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	463b      	mov	r3, r7
 800c430:	e883 0003 	stmia.w	r3, {r0, r1}
    ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED(T);
    auto data = getData(src);
 800c434:	463b      	mov	r3, r7
 800c436:	4618      	mov	r0, r3
 800c438:	f7f8 fa98 	bl	800496c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800c43c:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 800c43e:	463b      	mov	r3, r7
 800c440:	4618      	mov	r0, r3
 800c442:	f7f8 fa9f 	bl	8004984 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 800c446:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d005      	beq.n	800c45a <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x32>
 800c44e:	68b9      	ldr	r1, [r7, #8]
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f000 f8fb 	bl	800c64c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>
 800c456:	4603      	mov	r3, r0
 800c458:	e000      	b.n	800c45c <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x34>
 800c45a:	2300      	movs	r3, #0
  }
 800c45c:	4618      	mov	r0, r3
 800c45e:	3710      	adds	r7, #16
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c464:	b590      	push	{r4, r7, lr}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4618      	mov	r0, r3
 800c472:	f000 f97d 	bl	800c770 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800c476:	683c      	ldr	r4, [r7, #0]
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f7ff fe9e 	bl	800c1ba <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800c47e:	4603      	mov	r3, r0
 800c480:	601c      	str	r4, [r3, #0]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	4618      	mov	r0, r3
 800c486:	370c      	adds	r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd90      	pop	{r4, r7, pc}

0800c48c <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	4618      	mov	r0, r3
 800c498:	f000 f977 	bl	800c78a <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c49c:	4603      	mov	r3, r0
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3708      	adds	r7, #8
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b082      	sub	sp, #8
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f000 f976 	bl	800c7a2 <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f000 f975 	bl	800c7ba <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3708      	adds	r7, #8
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}

0800c4da <_ZSt12__to_addressI5BlinkEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 800c4da:	b480      	push	{r7}
 800c4dc:	b083      	sub	sp, #12
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	6078      	str	r0, [r7, #4]
      return __ptr;
 800c4e2:	687b      	ldr	r3, [r7, #4]
    }
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b086      	sub	sp, #24
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 800c500:	6838      	ldr	r0, [r7, #0]
 800c502:	f7ff ffdd 	bl	800c4c0 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	bf0c      	ite	eq
 800c50c:	2301      	moveq	r3, #1
 800c50e:	2300      	movne	r3, #0
 800c510:	b2db      	uxtb	r3, r3
 800c512:	2b00      	cmp	r3, #0
 800c514:	d128      	bne.n	800c568 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 800c516:	f107 030c 	add.w	r3, r7, #12
 800c51a:	4618      	mov	r0, r3
 800c51c:	f000 f95b 	bl	800c7d6 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 800c520:	f107 030c 	add.w	r3, r7, #12
 800c524:	2101      	movs	r1, #1
 800c526:	4618      	mov	r0, r3
 800c528:	f000 f96d 	bl	800c806 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 800c52c:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800c52e:	6838      	ldr	r0, [r7, #0]
 800c530:	f000 f978 	bl	800c824 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800c534:	4603      	mov	r3, r0
 800c536:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 800c538:	6838      	ldr	r0, [r7, #0]
 800c53a:	f7ff fe4b 	bl	800c1d4 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800c53e:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800c540:	4618      	mov	r0, r3
 800c542:	f000 f97c 	bl	800c83e <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c546:	4603      	mov	r3, r0
 800c548:	f107 0210 	add.w	r2, r7, #16
 800c54c:	f107 000c 	add.w	r0, r7, #12
 800c550:	6979      	ldr	r1, [r7, #20]
 800c552:	f000 f97f 	bl	800c854 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	697a      	ldr	r2, [r7, #20]
 800c55a:	601a      	str	r2, [r3, #0]
	}
 800c55c:	f107 030c 	add.w	r3, r7, #12
 800c560:	4618      	mov	r0, r3
 800c562:	f000 f944 	bl	800c7ee <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800c566:	e000      	b.n	800c56a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 800c568:	bf00      	nop
	}
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4618      	mov	r0, r3
 800c56e:	3718      	adds	r7, #24
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
      operator=(const __shared_count& __r) noexcept
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	60fb      	str	r3, [r7, #12]
	if (__tmp != _M_pi)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	68fa      	ldr	r2, [r7, #12]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d011      	beq.n	800c5b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x3e>
	    if (__tmp != nullptr)
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d002      	beq.n	800c59a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	      __tmp->_M_add_ref_copy();
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	f7fb fc81 	bl	8007e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
	    if (_M_pi != nullptr)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d004      	beq.n	800c5ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x38>
	      _M_pi->_M_release();
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7fb fc87 	bl	8007eba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	68fa      	ldr	r2, [r7, #12]
 800c5b0:	601a      	str	r2, [r3, #0]
	return *this;
 800c5b2:	687b      	ldr	r3, [r7, #4]
      }
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3710      	adds	r7, #16
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
	{ }
 800c5c6:	bf00      	nop
 800c5c8:	370c      	adds	r7, #12
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr

0800c5d2 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c5d2:	b590      	push	{r4, r7, lr}
 800c5d4:	b083      	sub	sp, #12
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	6039      	str	r1, [r7, #0]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f000 f950 	bl	800c884 <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800c5e4:	683c      	ldr	r4, [r7, #0]
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f7ff feb2 	bl	800c350 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	601c      	str	r4, [r3, #0]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	370c      	adds	r7, #12
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd90      	pop	{r4, r7, pc}

0800c5fa <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b082      	sub	sp, #8
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	4618      	mov	r0, r3
 800c606:	f000 f94a 	bl	800c89e <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c60a:	4603      	mov	r3, r0
 800c60c:	4618      	mov	r0, r3
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	4618      	mov	r0, r3
 800c620:	f000 f949 	bl	800c8b6 <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c624:	4603      	mov	r3, r0
 800c626:	4618      	mov	r0, r3
 800c628:	3708      	adds	r7, #8
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}

0800c62e <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800c62e:	b580      	push	{r7, lr}
 800c630:	b082      	sub	sp, #8
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	4618      	mov	r0, r3
 800c63a:	f000 f948 	bl	800c8ce <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800c63e:	4603      	mov	r3, r0
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4618      	mov	r0, r3
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
	...

0800c64c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 800c656:	6839      	ldr	r1, [r7, #0]
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f7f7 f99d 	bl	8003998 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 800c65e:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	791b      	ldrb	r3, [r3, #4]
 800c664:	3b04      	subs	r3, #4
 800c666:	2b1a      	cmp	r3, #26
 800c668:	d87c      	bhi.n	800c764 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x118>
 800c66a:	a201      	add	r2, pc, #4	@ (adr r2, 800c670 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x24>)
 800c66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c670:	0800c723 	.word	0x0800c723
 800c674:	0800c731 	.word	0x0800c731
 800c678:	0800c6dd 	.word	0x0800c6dd
 800c67c:	0800c765 	.word	0x0800c765
 800c680:	0800c765 	.word	0x0800c765
 800c684:	0800c765 	.word	0x0800c765
 800c688:	0800c6e3 	.word	0x0800c6e3
 800c68c:	0800c765 	.word	0x0800c765
 800c690:	0800c6f1 	.word	0x0800c6f1
 800c694:	0800c765 	.word	0x0800c765
 800c698:	0800c741 	.word	0x0800c741
 800c69c:	0800c765 	.word	0x0800c765
 800c6a0:	0800c765 	.word	0x0800c765
 800c6a4:	0800c765 	.word	0x0800c765
 800c6a8:	0800c765 	.word	0x0800c765
 800c6ac:	0800c765 	.word	0x0800c765
 800c6b0:	0800c765 	.word	0x0800c765
 800c6b4:	0800c765 	.word	0x0800c765
 800c6b8:	0800c765 	.word	0x0800c765
 800c6bc:	0800c765 	.word	0x0800c765
 800c6c0:	0800c765 	.word	0x0800c765
 800c6c4:	0800c765 	.word	0x0800c765
 800c6c8:	0800c6ff 	.word	0x0800c6ff
 800c6cc:	0800c765 	.word	0x0800c765
 800c6d0:	0800c711 	.word	0x0800c711
 800c6d4:	0800c765 	.word	0x0800c765
 800c6d8:	0800c753 	.word	0x0800c753
        return content_.asBoolean;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	e041      	b.n	800c766 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f000 f8fe 	bl	800c8e8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	e03a      	b.n	800c766 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f000 f908 	bl	800c90a <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	e033      	b.n	800c766 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c704:	4610      	mov	r0, r2
 800c706:	4619      	mov	r1, r3
 800c708:	f000 f910 	bl	800c92c <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 800c70c:	4603      	mov	r3, r0
 800c70e:	e02a      	b.n	800c766 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c716:	4610      	mov	r0, r2
 800c718:	4619      	mov	r1, r3
 800c71a:	f000 f91a 	bl	800c952 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 800c71e:	4603      	mov	r3, r0
 800c720:	e021      	b.n	800c766 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4618      	mov	r0, r3
 800c728:	f000 f926 	bl	800c978 <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800c72c:	4603      	mov	r3, r0
 800c72e:	e01a      	b.n	800c766 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	3308      	adds	r3, #8
 800c736:	4618      	mov	r0, r3
 800c738:	f000 f91e 	bl	800c978 <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800c73c:	4603      	mov	r3, r0
 800c73e:	e012      	b.n	800c766 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	edd3 7a00 	vldr	s15, [r3]
 800c746:	eeb0 0a67 	vmov.f32	s0, s15
 800c74a:	f000 f929 	bl	800c9a0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800c74e:	4603      	mov	r3, r0
 800c750:	e009      	b.n	800c766 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	ed93 7b00 	vldr	d7, [r3]
 800c758:	eeb0 0b47 	vmov.f64	d0, d7
 800c75c:	f000 f938 	bl	800c9d0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 800c760:	4603      	mov	r3, r0
 800c762:	e000      	b.n	800c766 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 800c764:	2300      	movs	r3, #0
  }
 800c766:	4618      	mov	r0, r3
 800c768:	3710      	adds	r7, #16
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop

0800c770 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	4618      	mov	r0, r3
 800c77c:	f000 f940 	bl	800ca00 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	4618      	mov	r0, r3
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}

0800c78a <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b082      	sub	sp, #8
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f944 	bl	800ca20 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>
 800c798:	4603      	mov	r3, r0
 800c79a:	4618      	mov	r0, r3
 800c79c:	3708      	adds	r7, #8
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}

0800c7a2 <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b082      	sub	sp, #8
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 f945 	bl	800ca3a <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3708      	adds	r7, #8
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}

0800c7ba <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b082      	sub	sp, #8
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f000 f944 	bl	800ca52 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3708      	adds	r7, #8
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b082      	sub	sp, #8
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 f944 	bl	800ca6c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3708      	adds	r7, #8
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b082      	sub	sp, #8
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 f943 	bl	800ca82 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	4618      	mov	r0, r3
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}

0800c806 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800c806:	b580      	push	{r7, lr}
 800c808:	b082      	sub	sp, #8
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
 800c80e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800c810:	2200      	movs	r2, #0
 800c812:	6839      	ldr	r1, [r7, #0]
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 f93f 	bl	800ca98 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800c81a:	4603      	mov	r3, r0
 800c81c:	4618      	mov	r0, r3
 800c81e:	3708      	adds	r7, #8
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 f95c 	bl	800caec <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800c834:	4603      	mov	r3, r0
 800c836:	4618      	mov	r0, r3
 800c838:	3708      	adds	r7, #8
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c83e:	b480      	push	{r7}
 800c840:	b083      	sub	sp, #12
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	4618      	mov	r0, r3
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800c854:	b590      	push	{r4, r7, lr}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	60f8      	str	r0, [r7, #12]
 800c85c:	60b9      	str	r1, [r7, #8]
 800c85e:	607a      	str	r2, [r7, #4]
 800c860:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 f957 	bl	800cb16 <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 800c868:	4604      	mov	r4, r0
 800c86a:	6838      	ldr	r0, [r7, #0]
 800c86c:	f7ff ffe7 	bl	800c83e <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c870:	4603      	mov	r3, r0
 800c872:	4622      	mov	r2, r4
 800c874:	68b9      	ldr	r1, [r7, #8]
 800c876:	68f8      	ldr	r0, [r7, #12]
 800c878:	f000 f958 	bl	800cb2c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 800c87c:	bf00      	nop
 800c87e:	3714      	adds	r7, #20
 800c880:	46bd      	mov	sp, r7
 800c882:	bd90      	pop	{r4, r7, pc}

0800c884 <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800c884:	b580      	push	{r7, lr}
 800c886:	b082      	sub	sp, #8
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	4618      	mov	r0, r3
 800c890:	f000 f96a 	bl	800cb68 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	4618      	mov	r0, r3
 800c898:	3708      	adds	r7, #8
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}

0800c89e <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c89e:	b580      	push	{r7, lr}
 800c8a0:	b082      	sub	sp, #8
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 f96e 	bl	800cb88 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b082      	sub	sp, #8
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 f96f 	bl	800cba2 <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3708      	adds	r7, #8
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800c8ce:	b580      	push	{r7, lr}
 800c8d0:	b082      	sub	sp, #8
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f000 f96e 	bl	800cbba <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3708      	adds	r7, #8
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>:
TOut convertNumber(TIn value) {
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 f96e 	bl	800cbd2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d001      	beq.n	800c900 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x18>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	e000      	b.n	800c902 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x1a>
 800c900:	2300      	movs	r3, #0
}
 800c902:	4618      	mov	r0, r3
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>:
TOut convertNumber(TIn value) {
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b082      	sub	sp, #8
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 f96f 	bl	800cbf6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d001      	beq.n	800c922 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x18>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	e000      	b.n	800c924 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x1a>
 800c922:	2300      	movs	r3, #0
}
 800c924:	4618      	mov	r0, r3
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>:
TOut convertNumber(TIn value) {
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800c936:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c93a:	f000 f967 	bl	800cc0c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800c93e:	4603      	mov	r3, r0
 800c940:	2b00      	cmp	r3, #0
 800c942:	d001      	beq.n	800c948 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1c>
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	e000      	b.n	800c94a <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1e>
 800c948:	2300      	movs	r3, #0
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3708      	adds	r7, #8
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}

0800c952 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>:
TOut convertNumber(TIn value) {
 800c952:	b580      	push	{r7, lr}
 800c954:	b082      	sub	sp, #8
 800c956:	af00      	add	r7, sp, #0
 800c958:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800c95c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c960:	f000 f96c 	bl	800cc3c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d001      	beq.n	800c96e <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1c>
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	e000      	b.n	800c970 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1e>
 800c96e:	2300      	movs	r3, #0
}
 800c970:	4618      	mov	r0, r3
 800c972:	3708      	adds	r7, #8
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>:
inline T parseNumber(const char* s) {
 800c978:	b580      	push	{r7, lr}
 800c97a:	b086      	sub	sp, #24
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 800c980:	f107 0308 	add.w	r3, r7, #8
 800c984:	6879      	ldr	r1, [r7, #4]
 800c986:	4618      	mov	r0, r3
 800c988:	f7f7 fa6a 	bl	8003e60 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 800c98c:	f107 0308 	add.w	r3, r7, #8
 800c990:	4618      	mov	r0, r3
 800c992:	f000 f979 	bl	800cc88 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>
 800c996:	4603      	mov	r3, r0
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3718      	adds	r7, #24
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>:
TOut convertNumber(TIn value) {
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800c9aa:	ed97 0a01 	vldr	s0, [r7, #4]
 800c9ae:	f000 f9b2 	bl	800cd16 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d006      	beq.n	800c9c6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x26>
 800c9b8:	edd7 7a01 	vldr	s15, [r7, #4]
 800c9bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c9c0:	ee17 3a90 	vmov	r3, s15
 800c9c4:	e000      	b.n	800c9c8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x28>
 800c9c6:	2300      	movs	r3, #0
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3708      	adds	r7, #8
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>:
TOut convertNumber(TIn value) {
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800c9da:	ed97 0b00 	vldr	d0, [r7]
 800c9de:	f000 f9c7 	bl	800cd70 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d006      	beq.n	800c9f6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x26>
 800c9e8:	ed97 7b00 	vldr	d7, [r7]
 800c9ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c9f0:	ee17 3a90 	vmov	r3, s15
 800c9f4:	e000      	b.n	800c9f8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x28>
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 f9d7 	bl	800cdbc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4618      	mov	r0, r3
 800ca12:	f000 f9df 	bl	800cdd4 <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3708      	adds	r7, #8
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f000 f9e0 	bl	800cdf0 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>
 800ca30:	4603      	mov	r3, r0
 800ca32:	4618      	mov	r0, r3
 800ca34:	3708      	adds	r7, #8
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b082      	sub	sp, #8
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f9df 	bl	800ce06 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3708      	adds	r7, #8
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800ca52:	b580      	push	{r7, lr}
 800ca54:	b082      	sub	sp, #8
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f000 f9de 	bl	800ce1e <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800ca62:	4603      	mov	r3, r0
 800ca64:	4618      	mov	r0, r3
 800ca66:	3708      	adds	r7, #8
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	4618      	mov	r0, r3
 800ca78:	370c      	adds	r7, #12
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr

0800ca82 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ca82:	b480      	push	{r7}
 800ca84:	b083      	sub	sp, #12
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	370c      	adds	r7, #12
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr

0800ca98 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800caa4:	68f8      	ldr	r0, [r7, #12]
 800caa6:	f000 f9c6 	bl	800ce36 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800caaa:	4602      	mov	r2, r0
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	4293      	cmp	r3, r2
 800cab0:	bf8c      	ite	hi
 800cab2:	2301      	movhi	r3, #1
 800cab4:	2300      	movls	r3, #0
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	2b00      	cmp	r3, #0
 800caba:	bf14      	ite	ne
 800cabc:	2301      	movne	r3, #1
 800cabe:	2300      	moveq	r3, #0
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d007      	beq.n	800cad6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cacc:	d301      	bcc.n	800cad2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800cace:	f010 fce9 	bl	801d4a4 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800cad2:	f010 fce4 	bl	801d49e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	011b      	lsls	r3, r3, #4
 800cada:	4618      	mov	r0, r3
 800cadc:	f010 fccc 	bl	801d478 <_Znwj>
 800cae0:	4603      	mov	r3, r0
 800cae2:	bf00      	nop
      }
 800cae4:	4618      	mov	r0, r3
 800cae6:	3710      	adds	r7, #16
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f7ff fb60 	bl	800c1ba <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800cafa:	4603      	mov	r3, r0
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f7ff fb5a 	bl	800c1ba <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2200      	movs	r2, #0
 800cb0a:	601a      	str	r2, [r3, #0]
	return __p;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
      }
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cb16:	b480      	push	{r7}
 800cb18:	b083      	sub	sp, #12
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4618      	mov	r0, r3
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr

0800cb2c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800cb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb2e:	b085      	sub	sp, #20
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	607a      	str	r2, [r7, #4]
 800cb38:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	2010      	movs	r0, #16
 800cb40:	f7fb f9a0 	bl	8007e84 <_ZnwjPv>
 800cb44:	4605      	mov	r5, r0
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f7ff ffe5 	bl	800cb16 <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	681c      	ldr	r4, [r3, #0]
 800cb50:	6838      	ldr	r0, [r7, #0]
 800cb52:	f7ff fe74 	bl	800c83e <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800cb56:	4632      	mov	r2, r6
 800cb58:	4621      	mov	r1, r4
 800cb5a:	4628      	mov	r0, r5
 800cb5c:	f000 f978 	bl	800ce50 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 800cb60:	bf00      	nop
 800cb62:	3714      	adds	r7, #20
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb68 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f000 f98f 	bl	800ce94 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f000 f997 	bl	800ceac <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4618      	mov	r0, r3
 800cb82:	3708      	adds	r7, #8
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	4618      	mov	r0, r3
 800cb94:	f000 f998 	bl	800cec8 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3708      	adds	r7, #8
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b082      	sub	sp, #8
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 f997 	bl	800cede <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b082      	sub	sp, #8
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f997 	bl	800cef6 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3708      	adds	r7, #8
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}

0800cbd2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800cbd2:	b580      	push	{r7, lr}
 800cbd4:	b082      	sub	sp, #8
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 800cbda:	f000 f8c1 	bl	800cd60 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	bf94      	ite	ls
 800cbe8:	2301      	movls	r3, #1
 800cbea:	2300      	movhi	r3, #0
 800cbec:	b2db      	uxtb	r3, r3
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3708      	adds	r7, #8
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}

0800cbf6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>:
canConvertNumber(TIn) {
 800cbf6:	b480      	push	{r7}
 800cbf8:	b083      	sub	sp, #12
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	6078      	str	r0, [r7, #4]
  return true;
 800cbfe:	2301      	movs	r3, #1
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	370c      	adds	r7, #12
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800cc0c:	b5b0      	push	{r4, r5, r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 800cc16:	f000 f8a3 	bl	800cd60 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	17da      	asrs	r2, r3, #31
 800cc1e:	461c      	mov	r4, r3
 800cc20:	4615      	mov	r5, r2
 800cc22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc26:	4294      	cmp	r4, r2
 800cc28:	eb75 0303 	sbcs.w	r3, r5, r3
 800cc2c:	bf2c      	ite	cs
 800cc2e:	2301      	movcs	r3, #1
 800cc30:	2300      	movcc	r3, #0
 800cc32:	b2db      	uxtb	r3, r3
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3708      	adds	r7, #8
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bdb0      	pop	{r4, r5, r7, pc}

0800cc3c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800cc3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800cc40:	b082      	sub	sp, #8
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800cc48:	f000 f85c 	bl	800cd04 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	17da      	asrs	r2, r3, #31
 800cc50:	4698      	mov	r8, r3
 800cc52:	4691      	mov	r9, r2
 800cc54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc58:	4542      	cmp	r2, r8
 800cc5a:	eb73 0309 	sbcs.w	r3, r3, r9
 800cc5e:	db0d      	blt.n	800cc7c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 800cc60:	f000 f87e 	bl	800cd60 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800cc64:	4603      	mov	r3, r0
 800cc66:	17da      	asrs	r2, r3, #31
 800cc68:	461c      	mov	r4, r3
 800cc6a:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800cc6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc70:	4294      	cmp	r4, r2
 800cc72:	eb75 0303 	sbcs.w	r3, r5, r3
 800cc76:	db01      	blt.n	800cc7c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 800cc78:	2301      	movs	r3, #1
 800cc7a:	e000      	b.n	800cc7e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 800cc7c:	2300      	movs	r3, #0
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3708      	adds	r7, #8
 800cc82:	46bd      	mov	sp, r7
 800cc84:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800cc88 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>:
  T convertTo() const {
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
    switch (type_) {
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	3b01      	subs	r3, #1
 800cc96:	2b03      	cmp	r3, #3
 800cc98:	d82e      	bhi.n	800ccf8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x70>
 800cc9a:	a201      	add	r2, pc, #4	@ (adr r2, 800cca0 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x18>)
 800cc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca0:	0800ccb1 	.word	0x0800ccb1
 800cca4:	0800ccc3 	.word	0x0800ccc3
 800cca8:	0800ccd5 	.word	0x0800ccd5
 800ccac:	0800cce7 	.word	0x0800cce7
        return convertNumber<T>(value_.asFloat);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	edd3 7a02 	vldr	s15, [r3, #8]
 800ccb6:	eeb0 0a67 	vmov.f32	s0, s15
 800ccba:	f7ff fe71 	bl	800c9a0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	e01b      	b.n	800ccfa <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ccc8:	4610      	mov	r0, r2
 800ccca:	4619      	mov	r1, r3
 800cccc:	f7ff fe41 	bl	800c952 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	e012      	b.n	800ccfa <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ccda:	4610      	mov	r0, r2
 800ccdc:	4619      	mov	r1, r3
 800ccde:	f7ff fe25 	bl	800c92c <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 800cce2:	4603      	mov	r3, r0
 800cce4:	e009      	b.n	800ccfa <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	ed93 7b02 	vldr	d7, [r3, #8]
 800ccec:	eeb0 0b47 	vmov.f64	d0, d7
 800ccf0:	f7ff fe6e 	bl	800c9d0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	e000      	b.n	800ccfa <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return T();
 800ccf8:	2300      	movs	r3, #0
  }
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3708      	adds	r7, #8
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	bf00      	nop

0800cd04 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>:
  static constexpr T lowest() {
 800cd04:	b480      	push	{r7}
 800cd06:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 800cd08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b082      	sub	sp, #8
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 800cd20:	f7ff fff0 	bl	800cd04 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800cd24:	ee07 0a90 	vmov	s15, r0
 800cd28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd2c:	ed97 7a01 	vldr	s14, [r7, #4]
 800cd30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd38:	db0d      	blt.n	800cd56 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 800cd3a:	2000      	movs	r0, #0
 800cd3c:	f000 f8e8 	bl	800cf10 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>
 800cd40:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 800cd44:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd48:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cd4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd50:	d801      	bhi.n	800cd56 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 800cd52:	2301      	movs	r3, #1
 800cd54:	e000      	b.n	800cd58 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 800cd56:	2300      	movs	r3, #0
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3708      	adds	r7, #8
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>:
  static constexpr T highest() {
 800cd60:	b580      	push	{r7, lr}
 800cd62:	af00      	add	r7, sp, #0
    return T(~lowest());
 800cd64:	f7ff ffce 	bl	800cd04 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	43db      	mvns	r3, r3
  }
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 800cd7a:	f7ff ffc3 	bl	800cd04 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800cd7e:	ee07 0a90 	vmov	s15, r0
 800cd82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cd86:	ed97 6b00 	vldr	d6, [r7]
 800cd8a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cd8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd92:	db0e      	blt.n	800cdb2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 800cd94:	f7ff ffe4 	bl	800cd60 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800cd98:	ee07 0a90 	vmov	s15, r0
 800cd9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 800cda0:	ed97 6b00 	vldr	d6, [r7]
 800cda4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cda8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdac:	d801      	bhi.n	800cdb2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e000      	b.n	800cdb4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 800cdb2:	2300      	movs	r3, #0
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3708      	adds	r7, #8
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>:
      _Tuple_impl()
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 f8b2 	bl	800cf2e <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3708      	adds	r7, #8
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>:
      constexpr _Head_base()
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2200      	movs	r2, #0
 800cde0:	601a      	str	r2, [r3, #0]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	4618      	mov	r0, r3
 800cde6:	370c      	adds	r7, #12
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cdf0:	b480      	push	{r7}
 800cdf2:	b083      	sub	sp, #12
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	370c      	adds	r7, #12
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr

0800ce06 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ce06:	b580      	push	{r7, lr}
 800ce08:	b082      	sub	sp, #8
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 f898 	bl	800cf44 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>
 800ce14:	4603      	mov	r3, r0
 800ce16:	4618      	mov	r0, r3
 800ce18:	3708      	adds	r7, #8
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b082      	sub	sp, #8
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f000 f897 	bl	800cf5a <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3708      	adds	r7, #8
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800ce36:	b480      	push	{r7}
 800ce38:	b083      	sub	sp, #12
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800ce3e:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 800ce42:	4618      	mov	r0, r3
 800ce44:	370c      	adds	r7, #12
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr
	...

0800ce50 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 800ce50:	b5b0      	push	{r4, r5, r7, lr}
 800ce52:	b086      	sub	sp, #24
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7fe f874 	bl	800af4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800ce64:	4a0a      	ldr	r2, [pc, #40]	@ (800ce90 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	601a      	str	r2, [r3, #0]
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f103 040c 	add.w	r4, r3, #12
 800ce70:	1d3b      	adds	r3, r7, #4
 800ce72:	4618      	mov	r0, r3
 800ce74:	f000 f87e 	bl	800cf74 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800ce78:	f107 0314 	add.w	r3, r7, #20
 800ce7c:	462a      	mov	r2, r5
 800ce7e:	68b9      	ldr	r1, [r7, #8]
 800ce80:	4620      	mov	r0, r4
 800ce82:	f000 f882 	bl	800cf8a <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3718      	adds	r7, #24
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bdb0      	pop	{r4, r5, r7, pc}
 800ce90:	0801f61c 	.word	0x0801f61c

0800ce94 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>:
      _Tuple_impl()
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 f890 	bl	800cfc2 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	4618      	mov	r0, r3
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>:
      constexpr _Head_base()
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	601a      	str	r2, [r3, #0]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	4618      	mov	r0, r3
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	4618      	mov	r0, r3
 800ced4:	370c      	adds	r7, #12
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr

0800cede <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cede:	b580      	push	{r7, lr}
 800cee0:	b082      	sub	sp, #8
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 f876 	bl	800cfd8 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>
 800ceec:	4603      	mov	r3, r0
 800ceee:	4618      	mov	r0, r3
 800cef0:	3708      	adds	r7, #8
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b082      	sub	sp, #8
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	4618      	mov	r0, r3
 800cf02:	f000 f874 	bl	800cfee <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>
 800cf06:	4603      	mov	r3, r0
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3708      	adds	r7, #8
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>:
  static T highest_for(
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b082      	sub	sp, #8
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
    return forge(0x4EFFFFFF);  // 2.14748352E9
 800cf18:	f06f 4031 	mvn.w	r0, #2969567232	@ 0xb1000000
 800cf1c:	f7f9 ff58 	bl	8006dd0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 800cf20:	eef0 7a40 	vmov.f32	s15, s0
  }
 800cf24:	eeb0 0a67 	vmov.f32	s0, s15
 800cf28:	3708      	adds	r7, #8
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>:
      constexpr _Head_base()
 800cf2e:	b480      	push	{r7}
 800cf30:	b083      	sub	sp, #12
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cf44:	b480      	push	{r7}
 800cf46:	b083      	sub	sp, #12
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	4618      	mov	r0, r3
 800cf50:	370c      	adds	r7, #12
 800cf52:	46bd      	mov	sp, r7
 800cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf58:	4770      	bx	lr

0800cf5a <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b082      	sub	sp, #8
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	4618      	mov	r0, r3
 800cf66:	f000 f84d 	bl	800d004 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3708      	adds	r7, #8
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	4618      	mov	r0, r3
 800cf80:	370c      	adds	r7, #12
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr

0800cf8a <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800cf8a:	b580      	push	{r7, lr}
 800cf8c:	b084      	sub	sp, #16
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	60f8      	str	r0, [r7, #12]
 800cf92:	60b9      	str	r1, [r7, #8]
 800cf94:	713a      	strb	r2, [r7, #4]
 800cf96:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 800cf98:	1d3b      	adds	r3, r7, #4
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7ff ffea 	bl	800cf74 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	68f8      	ldr	r0, [r7, #12]
 800cfa6:	f000 f838 	bl	800d01a <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>
 800cfaa:	6839      	ldr	r1, [r7, #0]
 800cfac:	68f8      	ldr	r0, [r7, #12]
 800cfae:	f000 f841 	bl	800d034 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	68ba      	ldr	r2, [r7, #8]
 800cfb6:	601a      	str	r2, [r3, #0]
	{ }
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3710      	adds	r7, #16
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>:
      constexpr _Head_base()
 800cfc2:	b480      	push	{r7}
 800cfc4:	b083      	sub	sp, #12
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	370c      	adds	r7, #12
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	370c      	adds	r7, #12
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr

0800cfee <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800cfee:	b480      	push	{r7}
 800cff0:	b083      	sub	sp, #12
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	4618      	mov	r0, r3
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>:
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	4618      	mov	r0, r3
 800d010:	370c      	adds	r7, #12
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr

0800d01a <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 800d01a:	b580      	push	{r7, lr}
 800d01c:	b082      	sub	sp, #8
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
 800d022:	6039      	str	r1, [r7, #0]
 800d024:	6838      	ldr	r0, [r7, #0]
 800d026:	f7ff ffa5 	bl	800cf74 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	4618      	mov	r0, r3
 800d02e:	3708      	adds	r7, #8
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	4618      	mov	r0, r3
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	4a05      	ldr	r2, [pc, #20]	@ (800d06c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	601a      	str	r2, [r3, #0]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7fc fb7f 	bl	8009760 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	4618      	mov	r0, r3
 800d066:	3708      	adds	r7, #8
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}
 800d06c:	0801f61c 	.word	0x0801f61c

0800d070 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f7ff ffe7 	bl	800d04c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d07e:	2110      	movs	r1, #16
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f010 f9e8 	bl	801d456 <_ZdlPvj>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	4618      	mov	r0, r3
 800d08a:	3708      	adds	r7, #8
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	330c      	adds	r3, #12
 800d09c:	4618      	mov	r0, r3
 800d09e:	f000 f83f 	bl	800d120 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	4610      	mov	r0, r2
 800d0ac:	f7ff f8d2 	bl	800c254 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
 800d0b0:	bf00      	nop
 800d0b2:	3708      	adds	r7, #8
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b086      	sub	sp, #24
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	330c      	adds	r3, #12
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f000 f837 	bl	800d138 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	f107 0314 	add.w	r3, r7, #20
 800d0d0:	4611      	mov	r1, r2
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f000 f83c 	bl	800d150 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800d0d8:	f107 0114 	add.w	r1, r7, #20
 800d0dc:	f107 030c 	add.w	r3, r7, #12
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f000 f841 	bl	800d16a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f7ff ffaf 	bl	800d04c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800d0ee:	f107 030c 	add.w	r3, r7, #12
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f000 f84d 	bl	800d192 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800d0f8:	f107 0314 	add.w	r3, r7, #20
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7ff fb76 	bl	800c7ee <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800d102:	3718      	adds	r7, #24
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 800d108:	b480      	push	{r7}
 800d10a:	b083      	sub	sp, #12
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
        return nullptr;
 800d112:	2300      	movs	r3, #0
      }
 800d114:	4618      	mov	r0, r3
 800d116:	370c      	adds	r7, #12
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f000 f847 	bl	800d1bc <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>
 800d12e:	4603      	mov	r3, r0
 800d130:	4618      	mov	r0, r3
 800d132:	3708      	adds	r7, #8
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f000 f846 	bl	800d1d2 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 800d146:	4603      	mov	r3, r0
 800d148:	4618      	mov	r0, r3
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f7ff fc86 	bl	800ca6c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	4618      	mov	r0, r3
 800d164:	3708      	adds	r7, #8
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}

0800d16a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800d16a:	b580      	push	{r7, lr}
 800d16c:	b084      	sub	sp, #16
 800d16e:	af00      	add	r7, sp, #0
 800d170:	60f8      	str	r0, [r7, #12]
 800d172:	60b9      	str	r1, [r7, #8]
 800d174:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800d176:	68b8      	ldr	r0, [r7, #8]
 800d178:	f000 f836 	bl	800d1e8 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 800d17c:	4602      	mov	r2, r0
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	601a      	str	r2, [r3, #0]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	605a      	str	r2, [r3, #4]
      { }
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	4618      	mov	r0, r3
 800d18c:	3710      	adds	r7, #16
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}

0800d192 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800d192:	b580      	push	{r7, lr}
 800d194:	b082      	sub	sp, #8
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d007      	beq.n	800d1b2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6818      	ldr	r0, [r3, #0]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	f000 f826 	bl	800d1fe <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3708      	adds	r7, #8
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800d1bc:	b480      	push	{r7}
 800d1be:	b083      	sub	sp, #12
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	370c      	adds	r7, #12
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d0:	4770      	bx	lr

0800d1d2 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>:
 800d1d2:	b480      	push	{r7}
 800d1d4:	b083      	sub	sp, #12
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	6078      	str	r0, [r7, #4]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	4618      	mov	r0, r3
 800d1de:	370c      	adds	r7, #12
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr

0800d1e8 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	370c      	adds	r7, #12
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b084      	sub	sp, #16
 800d202:	af00      	add	r7, sp, #0
 800d204:	60f8      	str	r0, [r7, #12]
 800d206:	60b9      	str	r1, [r7, #8]
 800d208:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	68b9      	ldr	r1, [r7, #8]
 800d20e:	68f8      	ldr	r0, [r7, #12]
 800d210:	f000 f804 	bl	800d21c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 800d214:	bf00      	nop
 800d216:	3710      	adds	r7, #16
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	011b      	lsls	r3, r3, #4
 800d22c:	4619      	mov	r1, r3
 800d22e:	68b8      	ldr	r0, [r7, #8]
 800d230:	f010 f911 	bl	801d456 <_ZdlPvj>
      }
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}

0800d23a <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 800d23a:	b480      	push	{r7}
 800d23c:	b083      	sub	sp, #12
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	4618      	mov	r0, r3
 800d246:	370c      	adds	r7, #12
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr

0800d250 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 800d250:	b480      	push	{r7}
 800d252:	b083      	sub	sp, #12
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	4618      	mov	r0, r3
 800d25c:	370c      	adds	r7, #12
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr

0800d266 <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>:

	virtual void init(void);
	virtual void start(void);
	virtual void tasks(void);

    void setDataCallback(const std::function<void(bool)>& callback) {
 800d266:	b580      	push	{r7, lr}
 800d268:	b082      	sub	sp, #8
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
 800d26e:	6039      	str	r1, [r7, #0]
        dataCallback = callback;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	3318      	adds	r3, #24
 800d274:	6839      	ldr	r1, [r7, #0]
 800d276:	4618      	mov	r0, r3
 800d278:	f000 f8e9 	bl	800d44e <_ZNSt8functionIFvbEEaSERKS1_>
    }
 800d27c:	bf00      	nop
 800d27e:	3708      	adds	r7, #8
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}

0800d284 <_ZN12CommsHandler7setDataEb>:
    void setData(bool value) { data = value; }
 800d284:	b480      	push	{r7}
 800d286:	b083      	sub	sp, #12
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	460b      	mov	r3, r1
 800d28e:	70fb      	strb	r3, [r7, #3]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	78fa      	ldrb	r2, [r7, #3]
 800d294:	771a      	strb	r2, [r3, #28]
 800d296:	bf00      	nop
 800d298:	370c      	adds	r7, #12
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr
	...

0800d2a4 <_ZN12CommsHandlerC1Ev>:
#include "commsHandler.h"
#include "../../remora.h"

CommsHandler::CommsHandler() : data(false), noDataCount(0), status(false) {
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f000 fc32 	bl	800db18 <_ZN6ModuleC1Ev>
 800d2b4:	4a0a      	ldr	r2, [pc, #40]	@ (800d2e0 <_ZN12CommsHandlerC1Ev+0x3c>)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	601a      	str	r2, [r3, #0]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	3318      	adds	r3, #24
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f000 f8fa 	bl	800d4b8 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	771a      	strb	r2, [r3, #28]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	775a      	strb	r2, [r3, #29]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	779a      	strb	r2, [r3, #30]

}
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3708      	adds	r7, #8
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	0801f65c 	.word	0x0801f65c

0800d2e4 <_ZN12CommsHandlerD1Ev>:

CommsHandler::~CommsHandler() {}
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	4a08      	ldr	r2, [pc, #32]	@ (800d310 <_ZN12CommsHandlerD1Ev+0x2c>)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	601a      	str	r2, [r3, #0]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	3318      	adds	r3, #24
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7fc f8bd 	bl	8009476 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	4618      	mov	r0, r3
 800d300:	f000 fc26 	bl	800db50 <_ZN6ModuleD1Ev>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	4618      	mov	r0, r3
 800d308:	3708      	adds	r7, #8
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	0801f65c 	.word	0x0801f65c

0800d314 <_ZN12CommsHandlerD0Ev>:
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f7ff ffe1 	bl	800d2e4 <_ZN12CommsHandlerD1Ev>
 800d322:	2120      	movs	r1, #32
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f010 f896 	bl	801d456 <_ZdlPvj>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	4618      	mov	r0, r3
 800d32e:	3708      	adds	r7, #8
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <_ZZN12CommsHandler4initEvENKUlbE_clEb>:

void CommsHandler::init() {
    interface->setDataCallback([this](bool dataReceived) {
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	460b      	mov	r3, r1
 800d33e:	70fb      	strb	r3, [r7, #3]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
        this->setData(dataReceived);
 800d344:	78fa      	ldrb	r2, [r7, #3]
 800d346:	4611      	mov	r1, r2
 800d348:	4618      	mov	r0, r3
 800d34a:	f7ff ff9b 	bl	800d284 <_ZN12CommsHandler7setDataEb>
    });
 800d34e:	bf00      	nop
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <_ZN12CommsHandler4initEv>:
void CommsHandler::init() {
 800d356:	b590      	push	{r4, r7, lr}
 800d358:	b089      	sub	sp, #36	@ 0x24
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
    interface->setDataCallback([this](bool dataReceived) {
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	3318      	adds	r3, #24
 800d362:	4618      	mov	r0, r3
 800d364:	f000 f8b8 	bl	800d4d8 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800d368:	4604      	mov	r4, r0
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	61fb      	str	r3, [r7, #28]
 800d36e:	f107 021c 	add.w	r2, r7, #28
 800d372:	f107 030c 	add.w	r3, r7, #12
 800d376:	4611      	mov	r1, r2
 800d378:	4618      	mov	r0, r3
 800d37a:	f000 f8b9 	bl	800d4f0 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>
 800d37e:	f107 030c 	add.w	r3, r7, #12
 800d382:	4619      	mov	r1, r3
 800d384:	4620      	mov	r0, r4
 800d386:	f7ff ff6e 	bl	800d266 <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>
 800d38a:	f107 030c 	add.w	r3, r7, #12
 800d38e:	4618      	mov	r0, r3
 800d390:	f7f3 fcde 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>

    interface->init();
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	3318      	adds	r3, #24
 800d398:	4618      	mov	r0, r3
 800d39a:	f000 f89d 	bl	800d4d8 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	321c      	adds	r2, #28
 800d3a4:	6812      	ldr	r2, [r2, #0]
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	4790      	blx	r2
}
 800d3aa:	bf00      	nop
 800d3ac:	3724      	adds	r7, #36	@ 0x24
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd90      	pop	{r4, r7, pc}

0800d3b2 <_ZN12CommsHandler5startEv>:

void CommsHandler::start() {
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b082      	sub	sp, #8
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
	interface->start();
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	3318      	adds	r3, #24
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f000 f88a 	bl	800d4d8 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	3220      	adds	r2, #32
 800d3ca:	6812      	ldr	r2, [r2, #0]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	4790      	blx	r2
}
 800d3d0:	bf00      	nop
 800d3d2:	3708      	adds	r7, #8
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <_ZN12CommsHandler5tasksEv>:

// tasks is run in the main loop to do polling tasks, eg Ethernet, processing data etc
void CommsHandler::tasks() {
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
	interface->tasks();
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	3318      	adds	r3, #24
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f000 f877 	bl	800d4d8 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	681a      	ldr	r2, [r3, #0]
 800d3ee:	3224      	adds	r2, #36	@ 0x24
 800d3f0:	6812      	ldr	r2, [r2, #0]
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	4790      	blx	r2
}
 800d3f6:	bf00      	nop
 800d3f8:	3708      	adds	r7, #8
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}

0800d3fe <_ZN12CommsHandler6updateEv>:

// update it run in the servo thread to monitor communications
void CommsHandler::update() {
 800d3fe:	b480      	push	{r7}
 800d400:	b083      	sub	sp, #12
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
	if (data)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	7f1b      	ldrb	r3, [r3, #28]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d006      	beq.n	800d41c <_ZN12CommsHandler6updateEv+0x1e>
	{
		noDataCount = 0;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2200      	movs	r2, #0
 800d412:	775a      	strb	r2, [r3, #29]
		status = true;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2201      	movs	r2, #1
 800d418:	779a      	strb	r2, [r3, #30]
 800d41a:	e005      	b.n	800d428 <_ZN12CommsHandler6updateEv+0x2a>
	}
	else
	{
		noDataCount++;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	7f5b      	ldrb	r3, [r3, #29]
 800d420:	3301      	adds	r3, #1
 800d422:	b2da      	uxtb	r2, r3
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	775a      	strb	r2, [r3, #29]
	}

	if (noDataCount > Config::dataErrMax)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	7f5b      	ldrb	r3, [r3, #29]
 800d42c:	2b64      	cmp	r3, #100	@ 0x64
 800d42e:	d905      	bls.n	800d43c <_ZN12CommsHandler6updateEv+0x3e>
	{
		noDataCount = 0;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2200      	movs	r2, #0
 800d434:	775a      	strb	r2, [r3, #29]
		status = false;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2200      	movs	r2, #0
 800d43a:	779a      	strb	r2, [r3, #30]
	}

	data = false;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2200      	movs	r2, #0
 800d440:	771a      	strb	r2, [r3, #28]
}
 800d442:	bf00      	nop
 800d444:	370c      	adds	r7, #12
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr

0800d44e <_ZNSt8functionIFvbEEaSERKS1_>:
      operator=(const function& __x)
 800d44e:	b580      	push	{r7, lr}
 800d450:	b086      	sub	sp, #24
 800d452:	af00      	add	r7, sp, #0
 800d454:	6078      	str	r0, [r7, #4]
 800d456:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800d458:	f107 0308 	add.w	r3, r7, #8
 800d45c:	6839      	ldr	r1, [r7, #0]
 800d45e:	4618      	mov	r0, r3
 800d460:	f000 f876 	bl	800d550 <_ZNSt8functionIFvbEEC1ERKS1_>
 800d464:	f107 0308 	add.w	r3, r7, #8
 800d468:	6879      	ldr	r1, [r7, #4]
 800d46a:	4618      	mov	r0, r3
 800d46c:	f000 f89b 	bl	800d5a6 <_ZNSt8functionIFvbEE4swapERS1_>
 800d470:	f107 0308 	add.w	r3, r7, #8
 800d474:	4618      	mov	r0, r3
 800d476:	f7f3 fc6b 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
	return *this;
 800d47a:	687b      	ldr	r3, [r7, #4]
      }
 800d47c:	4618      	mov	r0, r3
 800d47e:	3718      	adds	r7, #24
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	4618      	mov	r0, r3
 800d490:	f000 f8aa 	bl	800d5e8 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	4618      	mov	r0, r3
 800d498:	3708      	adds	r7, #8
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}

0800d49e <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b082      	sub	sp, #8
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7ff ffeb 	bl	800d484 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3708      	adds	r7, #8
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
	: _M_t()
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	601a      	str	r2, [r3, #0]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7ff ffe8 	bl	800d49e <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3708      	adds	r7, #8
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
	return get();
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f000 f88e 	bl	800d602 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>
 800d4e6:	4603      	mov	r3, r0
      }
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3708      	adds	r7, #8
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>:
	function(_Functor&& __f)
 800d4f0:	b590      	push	{r4, r7, lr}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	2300      	movs	r3, #0
 800d500:	6013      	str	r3, [r2, #0]
 800d502:	6053      	str	r3, [r2, #4]
 800d504:	6093      	str	r3, [r2, #8]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	4618      	mov	r0, r3
 800d50a:	f7f4 fe43 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2200      	movs	r2, #0
 800d512:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800d514:	6838      	ldr	r0, [r7, #0]
 800d516:	f000 f881 	bl	800d61c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>
 800d51a:	4603      	mov	r3, r0
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d00e      	beq.n	800d53e <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 800d520:	687c      	ldr	r4, [r7, #4]
 800d522:	6838      	ldr	r0, [r7, #0]
 800d524:	f000 f885 	bl	800d632 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800d528:	4603      	mov	r3, r0
 800d52a:	4619      	mov	r1, r3
 800d52c:	4620      	mov	r0, r4
 800d52e:	f000 f88b 	bl	800d648 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4a04      	ldr	r2, [pc, #16]	@ (800d548 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x58>)
 800d536:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	4a04      	ldr	r2, [pc, #16]	@ (800d54c <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x5c>)
 800d53c:	609a      	str	r2, [r3, #8]
	}
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4618      	mov	r0, r3
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	bd90      	pop	{r4, r7, pc}
 800d548:	0800d66d 	.word	0x0800d66d
 800d54c:	0800d697 	.word	0x0800d697

0800d550 <_ZNSt8functionIFvbEEC1ERKS1_>:
      function(const function& __x)
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	461a      	mov	r2, r3
 800d55e:	2300      	movs	r3, #0
 800d560:	6013      	str	r3, [r2, #0]
 800d562:	6053      	str	r3, [r2, #4]
 800d564:	6093      	str	r3, [r2, #8]
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	4618      	mov	r0, r3
 800d56a:	f7f4 fe13 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2200      	movs	r2, #0
 800d572:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 800d574:	6838      	ldr	r0, [r7, #0]
 800d576:	f000 f8ad 	bl	800d6d4 <_ZNKSt8functionIFvbEEcvbEv>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d00d      	beq.n	800d59c <_ZNSt8functionIFvbEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	689b      	ldr	r3, [r3, #8]
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	6839      	ldr	r1, [r7, #0]
 800d588:	2202      	movs	r2, #2
 800d58a:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	68da      	ldr	r2, [r3, #12]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	689a      	ldr	r2, [r3, #8]
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	609a      	str	r2, [r3, #8]
      }
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3708      	adds	r7, #8
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}

0800d5a6 <_ZNSt8functionIFvbEE4swapERS1_>:
      void swap(function& __x) noexcept
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	b082      	sub	sp, #8
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
 800d5ae:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	683a      	ldr	r2, [r7, #0]
 800d5b4:	4611      	mov	r1, r2
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f000 f89c 	bl	800d6f4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f103 0208 	add.w	r2, r3, #8
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	3308      	adds	r3, #8
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	4610      	mov	r0, r2
 800d5ca:	f000 f8ba 	bl	800d742 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f103 020c 	add.w	r2, r3, #12
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	330c      	adds	r3, #12
 800d5d8:	4619      	mov	r1, r3
 800d5da:	4610      	mov	r0, r2
 800d5dc:	f000 f8d0 	bl	800d780 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 800d5e0:	bf00      	nop
 800d5e2:	3708      	adds	r7, #8
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f000 f8e3 	bl	800d7be <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800d602:	b580      	push	{r7, lr}
 800d604:	b082      	sub	sp, #8
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	4618      	mov	r0, r3
 800d60e:	f000 f8e6 	bl	800d7de <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800d612:	4603      	mov	r3, r0
 800d614:	4618      	mov	r0, r3
 800d616:	3708      	adds	r7, #8
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}

0800d61c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
	  { return true; }
 800d624:	2301      	movs	r3, #1
 800d626:	4618      	mov	r0, r3
 800d628:	370c      	adds	r7, #12
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr

0800d632 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d632:	b480      	push	{r7}
 800d634:	b083      	sub	sp, #12
 800d636:	af00      	add	r7, sp, #0
 800d638:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	4618      	mov	r0, r3
 800d63e:	370c      	adds	r7, #12
 800d640:	46bd      	mov	sp, r7
 800d642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d646:	4770      	bx	lr

0800d648 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800d648:	b590      	push	{r4, r7, lr}
 800d64a:	b083      	sub	sp, #12
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800d652:	6838      	ldr	r0, [r7, #0]
 800d654:	f7ff ffed 	bl	800d632 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800d658:	4603      	mov	r3, r0
 800d65a:	4622      	mov	r2, r4
 800d65c:	4619      	mov	r1, r3
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 f8cb 	bl	800d7fa <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800d664:	bf00      	nop
 800d666:	370c      	adds	r7, #12
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd90      	pop	{r4, r7, pc}

0800d66c <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800d66c:	b590      	push	{r4, r7, lr}
 800d66e:	b083      	sub	sp, #12
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f000 f8d8 	bl	800d82c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800d67c:	4604      	mov	r4, r0
 800d67e:	6838      	ldr	r0, [r7, #0]
 800d680:	f7f4 fcc6 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800d684:	4603      	mov	r3, r0
 800d686:	4619      	mov	r1, r3
 800d688:	4620      	mov	r0, r4
 800d68a:	f000 f8df 	bl	800d84c <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 800d68e:	bf00      	nop
      }
 800d690:	370c      	adds	r7, #12
 800d692:	46bd      	mov	sp, r7
 800d694:	bd90      	pop	{r4, r7, pc}

0800d696 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800d696:	b590      	push	{r4, r7, lr}
 800d698:	b085      	sub	sp, #20
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	60f8      	str	r0, [r7, #12]
 800d69e:	60b9      	str	r1, [r7, #8]
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800d6a4:	79fb      	ldrb	r3, [r7, #7]
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d109      	bne.n	800d6be <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800d6aa:	68b8      	ldr	r0, [r7, #8]
 800d6ac:	f000 f8be 	bl	800d82c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800d6b0:	4604      	mov	r4, r0
 800d6b2:	68f8      	ldr	r0, [r7, #12]
 800d6b4:	f000 f8e0 	bl	800d878 <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	601c      	str	r4, [r3, #0]
	    break;
 800d6bc:	e005      	b.n	800d6ca <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800d6be:	79fb      	ldrb	r3, [r7, #7]
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	68b9      	ldr	r1, [r7, #8]
 800d6c4:	68f8      	ldr	r0, [r7, #12]
 800d6c6:	f000 f8e3 	bl	800d890 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 800d6ca:	2300      	movs	r3, #0
      }
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3714      	adds	r7, #20
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd90      	pop	{r4, r7, pc}

0800d6d4 <_ZNKSt8functionIFvbEEcvbEv>:
      explicit operator bool() const noexcept
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7f3 faf5 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	f083 0301 	eor.w	r3, r3, #1
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3708      	adds	r7, #8
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f000 f900 	bl	800d904 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800d704:	4602      	mov	r2, r0
 800d706:	f107 0308 	add.w	r3, r7, #8
 800d70a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d70e:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800d712:	6838      	ldr	r0, [r7, #0]
 800d714:	f000 f8f6 	bl	800d904 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800d718:	4602      	mov	r2, r0
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d720:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800d724:	f107 0308 	add.w	r3, r7, #8
 800d728:	4618      	mov	r0, r3
 800d72a:	f000 f8eb 	bl	800d904 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800d72e:	4602      	mov	r2, r0
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d736:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800d73a:	bf00      	nop
 800d73c:	3710      	adds	r7, #16
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}

0800d742 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800d742:	b580      	push	{r7, lr}
 800d744:	b084      	sub	sp, #16
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
 800d74a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f000 f8e4 	bl	800d91a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800d752:	4603      	mov	r3, r0
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800d758:	6838      	ldr	r0, [r7, #0]
 800d75a:	f000 f8de 	bl	800d91a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800d75e:	4603      	mov	r3, r0
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800d766:	f107 030c 	add.w	r3, r7, #12
 800d76a:	4618      	mov	r0, r3
 800d76c:	f000 f8d5 	bl	800d91a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800d770:	4603      	mov	r3, r0
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	601a      	str	r2, [r3, #0]
    }
 800d778:	bf00      	nop
 800d77a:	3710      	adds	r7, #16
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 800d780:	b580      	push	{r7, lr}
 800d782:	b084      	sub	sp, #16
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 f8d0 	bl	800d930 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800d790:	4603      	mov	r3, r0
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800d796:	6838      	ldr	r0, [r7, #0]
 800d798:	f000 f8ca 	bl	800d930 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800d79c:	4603      	mov	r3, r0
 800d79e:	681a      	ldr	r2, [r3, #0]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800d7a4:	f107 030c 	add.w	r3, r7, #12
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f000 f8c1 	bl	800d930 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	601a      	str	r2, [r3, #0]
    }
 800d7b6:	bf00      	nop
 800d7b8:	3710      	adds	r7, #16
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}

0800d7be <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800d7be:	b580      	push	{r7, lr}
 800d7c0:	b082      	sub	sp, #8
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 f8bd 	bl	800d946 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f000 f8c5 	bl	800d95e <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3708      	adds	r7, #8
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}

0800d7de <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800d7de:	b580      	push	{r7, lr}
 800d7e0:	b082      	sub	sp, #8
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	6078      	str	r0, [r7, #4]
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f000 f8c6 	bl	800d97a <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3708      	adds	r7, #8
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}

0800d7fa <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800d7fa:	b590      	push	{r4, r7, lr}
 800d7fc:	b085      	sub	sp, #20
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	60f8      	str	r0, [r7, #12]
 800d802:	60b9      	str	r1, [r7, #8]
 800d804:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f7ff fd17 	bl	800d23a <_ZNSt9_Any_data9_M_accessEv>
 800d80c:	4603      	mov	r3, r0
 800d80e:	4619      	mov	r1, r3
 800d810:	2004      	movs	r0, #4
 800d812:	f7fa fb37 	bl	8007e84 <_ZnwjPv>
 800d816:	4604      	mov	r4, r0
 800d818:	68b8      	ldr	r0, [r7, #8]
 800d81a:	f7ff ff0a 	bl	800d632 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800d81e:	4603      	mov	r3, r0
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	6023      	str	r3, [r4, #0]
	  }
 800d824:	bf00      	nop
 800d826:	3714      	adds	r7, #20
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd90      	pop	{r4, r7, pc}

0800d82c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 f8ad 	bl	800d994 <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>
 800d83a:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800d83c:	68f8      	ldr	r0, [r7, #12]
 800d83e:	f000 f8b5 	bl	800d9ac <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>
 800d842:	4603      	mov	r3, r0
	}
 800d844:	4618      	mov	r0, r3
 800d846:	3710      	adds	r7, #16
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800d84c:	b5b0      	push	{r4, r5, r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f000 f8b3 	bl	800d9c2 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800d85c:	4604      	mov	r4, r0
 800d85e:	6838      	ldr	r0, [r7, #0]
 800d860:	f7f4 fbd6 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800d864:	4603      	mov	r3, r0
 800d866:	461a      	mov	r2, r3
 800d868:	4621      	mov	r1, r4
 800d86a:	4628      	mov	r0, r5
 800d86c:	f000 f8b4 	bl	800d9d8 <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 800d870:	bf00      	nop
 800d872:	3708      	adds	r7, #8
 800d874:	46bd      	mov	sp, r7
 800d876:	bdb0      	pop	{r4, r5, r7, pc}

0800d878 <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 800d878:	b580      	push	{r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f7ff fcda 	bl	800d23a <_ZNSt9_Any_data9_M_accessEv>
 800d886:	4603      	mov	r3, r0
 800d888:	4618      	mov	r0, r3
 800d88a:	3708      	adds	r7, #8
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800d890:	b590      	push	{r4, r7, lr}
 800d892:	b085      	sub	sp, #20
 800d894:	af00      	add	r7, sp, #0
 800d896:	60f8      	str	r0, [r7, #12]
 800d898:	60b9      	str	r1, [r7, #8]
 800d89a:	4613      	mov	r3, r2
 800d89c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800d89e:	79fb      	ldrb	r3, [r7, #7]
 800d8a0:	2b03      	cmp	r3, #3
 800d8a2:	d82a      	bhi.n	800d8fa <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 800d8a4:	a201      	add	r2, pc, #4	@ (adr r2, 800d8ac <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 800d8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8aa:	bf00      	nop
 800d8ac:	0800d8bd 	.word	0x0800d8bd
 800d8b0:	0800d8cb 	.word	0x0800d8cb
 800d8b4:	0800d8df 	.word	0x0800d8df
 800d8b8:	0800d8f1 	.word	0x0800d8f1
	      __dest._M_access<const type_info*>() = nullptr;
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f000 f8a2 	bl	800da06 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	601a      	str	r2, [r3, #0]
	      break;
 800d8c8:	e017      	b.n	800d8fa <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800d8ca:	68b8      	ldr	r0, [r7, #8]
 800d8cc:	f7ff ffae 	bl	800d82c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800d8d0:	4604      	mov	r4, r0
 800d8d2:	68f8      	ldr	r0, [r7, #12]
 800d8d4:	f7ff ffd0 	bl	800d878 <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	601c      	str	r4, [r3, #0]
	      break;
 800d8dc:	e00d      	b.n	800d8fa <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800d8de:	68b8      	ldr	r0, [r7, #8]
 800d8e0:	f7ff ffa4 	bl	800d82c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800d8e4:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	68f8      	ldr	r0, [r7, #12]
 800d8ea:	f000 f898 	bl	800da1e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 800d8ee:	e004      	b.n	800d8fa <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800d8f0:	4621      	mov	r1, r4
 800d8f2:	68f8      	ldr	r0, [r7, #12]
 800d8f4:	f000 f8a5 	bl	800da42 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800d8f8:	bf00      	nop
	  return false;
 800d8fa:	2300      	movs	r3, #0
	}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3714      	adds	r7, #20
 800d900:	46bd      	mov	sp, r7
 800d902:	bd90      	pop	{r4, r7, pc}

0800d904 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	4618      	mov	r0, r3
 800d910:	370c      	adds	r7, #12
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr

0800d91a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800d91a:	b480      	push	{r7}
 800d91c:	b083      	sub	sp, #12
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	4618      	mov	r0, r3
 800d926:	370c      	adds	r7, #12
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr

0800d930 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 800d930:	b480      	push	{r7}
 800d932:	b083      	sub	sp, #12
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	4618      	mov	r0, r3
 800d93c:	370c      	adds	r7, #12
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr

0800d946 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>:
      _Tuple_impl()
 800d946:	b580      	push	{r7, lr}
 800d948:	b082      	sub	sp, #8
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 f883 	bl	800da5a <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	4618      	mov	r0, r3
 800d958:	3708      	adds	r7, #8
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}

0800d95e <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>:
      constexpr _Head_base()
 800d95e:	b480      	push	{r7}
 800d960:	b083      	sub	sp, #12
 800d962:	af00      	add	r7, sp, #0
 800d964:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2200      	movs	r2, #0
 800d96a:	601a      	str	r2, [r3, #0]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	4618      	mov	r0, r3
 800d970:	370c      	adds	r7, #12
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr

0800d97a <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800d97a:	b580      	push	{r7, lr}
 800d97c:	b082      	sub	sp, #8
 800d97e:	af00      	add	r7, sp, #0
 800d980:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	4618      	mov	r0, r3
 800d986:	f000 f873 	bl	800da70 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d98a:	4603      	mov	r3, r0
 800d98c:	4618      	mov	r0, r3
 800d98e:	3708      	adds	r7, #8
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>:
      _M_access() const noexcept
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f7ff fc57 	bl	800d250 <_ZNKSt9_Any_data9_M_accessEv>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3708      	adds	r7, #8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800d9ac:	b480      	push	{r7}
 800d9ae:	b083      	sub	sp, #12
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr

0800d9c2 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d9c2:	b480      	push	{r7}
 800d9c4:	b083      	sub	sp, #12
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	370c      	adds	r7, #12
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800d9d8:	b590      	push	{r4, r7, lr}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	7338      	strb	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800d9e4:	68b8      	ldr	r0, [r7, #8]
 800d9e6:	f7ff ffec 	bl	800d9c2 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f7f4 fb0f 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	f7ff fc9b 	bl	800d334 <_ZZN12CommsHandler4initEvENKUlbE_clEb>
 800d9fe:	bf00      	nop
 800da00:	3714      	adds	r7, #20
 800da02:	46bd      	mov	sp, r7
 800da04:	bd90      	pop	{r4, r7, pc}

0800da06 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 800da06:	b580      	push	{r7, lr}
 800da08:	b082      	sub	sp, #8
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f7ff fc13 	bl	800d23a <_ZNSt9_Any_data9_M_accessEv>
 800da14:	4603      	mov	r3, r0
 800da16:	4618      	mov	r0, r3
 800da18:	3708      	adds	r7, #8
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}

0800da1e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800da1e:	b590      	push	{r4, r7, lr}
 800da20:	b083      	sub	sp, #12
 800da22:	af00      	add	r7, sp, #0
 800da24:	6078      	str	r0, [r7, #4]
 800da26:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800da28:	6838      	ldr	r0, [r7, #0]
 800da2a:	f000 f82d 	bl	800da88 <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800da2e:	4603      	mov	r3, r0
 800da30:	4622      	mov	r2, r4
 800da32:	4619      	mov	r1, r3
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 f832 	bl	800da9e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800da3a:	bf00      	nop
 800da3c:	370c      	adds	r7, #12
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd90      	pop	{r4, r7, pc}

0800da42 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800da42:	b580      	push	{r7, lr}
 800da44:	b082      	sub	sp, #8
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
 800da4a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 f83f 	bl	800dad0 <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>
	}
 800da52:	bf00      	nop
 800da54:	3708      	adds	r7, #8
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>:
      constexpr _Head_base()
 800da5a:	b480      	push	{r7}
 800da5c:	b083      	sub	sp, #12
 800da5e:	af00      	add	r7, sp, #0
 800da60:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	4618      	mov	r0, r3
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f000 f835 	bl	800dae8 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>
 800da7e:	4603      	mov	r3, r0
 800da80:	4618      	mov	r0, r3
 800da82:	3708      	adds	r7, #8
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800da88:	b480      	push	{r7}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	4618      	mov	r0, r3
 800da94:	370c      	adds	r7, #12
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr

0800da9e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800da9e:	b590      	push	{r4, r7, lr}
 800daa0:	b085      	sub	sp, #20
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	60f8      	str	r0, [r7, #12]
 800daa6:	60b9      	str	r1, [r7, #8]
 800daa8:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800daaa:	68f8      	ldr	r0, [r7, #12]
 800daac:	f7ff fbc5 	bl	800d23a <_ZNSt9_Any_data9_M_accessEv>
 800dab0:	4603      	mov	r3, r0
 800dab2:	4619      	mov	r1, r3
 800dab4:	2004      	movs	r0, #4
 800dab6:	f7fa f9e5 	bl	8007e84 <_ZnwjPv>
 800daba:	4604      	mov	r4, r0
 800dabc:	68b8      	ldr	r0, [r7, #8]
 800dabe:	f7ff ffe3 	bl	800da88 <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800dac2:	4603      	mov	r3, r0
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	6023      	str	r3, [r4, #0]
	  }
 800dac8:	bf00      	nop
 800daca:	3714      	adds	r7, #20
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd90      	pop	{r4, r7, pc}

0800dad0 <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f7ff fbae 	bl	800d23a <_ZNSt9_Any_data9_M_accessEv>
 800dade:	4603      	mov	r3, r0
 800dae0:	4618      	mov	r0, r3
 800dae2:	3708      	adds	r7, #8
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	4618      	mov	r0, r3
 800daf4:	f000 f805 	bl	800db02 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>
 800daf8:	4603      	mov	r3, r0
 800dafa:	4618      	mov	r0, r3
 800dafc:	3708      	adds	r7, #8
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}

0800db02 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800db02:	b480      	push	{r7}
 800db04:	b083      	sub	sp, #12
 800db06:	af00      	add	r7, sp, #0
 800db08:	6078      	str	r0, [r7, #4]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	4618      	mov	r0, r3
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	4a09      	ldr	r2, [pc, #36]	@ (800db48 <_ZN6ModuleC1Ev+0x30>)
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	601a      	str	r2, [r3, #0]
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2200      	movs	r2, #0
 800db2a:	751a      	strb	r2, [r3, #20]
{
	this->counter = 0;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2200      	movs	r2, #0
 800db30:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2201      	movs	r2, #1
 800db36:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 800db38:	4804      	ldr	r0, [pc, #16]	@ (800db4c <_ZN6ModuleC1Ev+0x34>)
 800db3a:	f010 f99b 	bl	801de74 <puts>
}
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	4618      	mov	r0, r3
 800db42:	3708      	adds	r7, #8
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	0801f680 	.word	0x0801f680
 800db4c:	0801f22c 	.word	0x0801f22c

0800db50 <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 800db50:	b480      	push	{r7}
 800db52:	b083      	sub	sp, #12
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	4a04      	ldr	r2, [pc, #16]	@ (800db6c <_ZN6ModuleD1Ev+0x1c>)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	601a      	str	r2, [r3, #0]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	4618      	mov	r0, r3
 800db62:	370c      	adds	r7, #12
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr
 800db6c:	0801f680 	.word	0x0801f680

0800db70 <_ZN6ModuleD0Ev>:
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f7ff ffe9 	bl	800db50 <_ZN6ModuleD1Ev>
 800db7e:	2118      	movs	r1, #24
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f00f fc68 	bl	801d456 <_ZdlPvj>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	4618      	mov	r0, r3
 800db8a:	3708      	adds	r7, #8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
	++this->counter;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	691b      	ldr	r3, [r3, #16]
 800db9c:	1c5a      	adds	r2, r3, #1
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	691a      	ldr	r2, [r3, #16]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	68db      	ldr	r3, [r3, #12]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	db08      	blt.n	800dbc0 <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	3310      	adds	r3, #16
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	4798      	blx	r3
		this->counter = 0;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	611a      	str	r2, [r3, #16]
	}

	this->update();
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	3308      	adds	r3, #8
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	4798      	blx	r3
}
 800dbcc:	bf00      	nop
 800dbce:	3708      	adds	r7, #8
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <_ZN6Module6updateEv>:
void Module::runModulePost()
{
	this->updatePost();
}

void Module::update(){}
 800dbd4:	b480      	push	{r7}
 800dbd6:	b083      	sub	sp, #12
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	bf00      	nop
 800dbde:	370c      	adds	r7, #12
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr

0800dbe8 <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	bf00      	nop
 800dbf2:	370c      	adds	r7, #12
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfa:	4770      	bx	lr

0800dbfc <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 800dbfc:	b480      	push	{r7}
 800dbfe:	b083      	sub	sp, #12
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	bf00      	nop
 800dc06:	370c      	adds	r7, #12
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr

0800dc10 <_ZN6Module9configureEv>:
void Module::configure(){}
 800dc10:	b480      	push	{r7}
 800dc12:	b083      	sub	sp, #12
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	bf00      	nop
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <_ZN13ModuleFactoryC1Ev>:

class ModuleFactory {
private:

    // Private constructor for singleton
    ModuleFactory() {};
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	4618      	mov	r0, r3
 800dc30:	370c      	adds	r7, #12
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr
	...

0800dc3c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora>:

// Create module based on thread and type
std::shared_ptr<Module> ModuleFactory::createModule(const char* _tname,
                                   const char* _mtype,
                                   const JsonVariant config,
								   Remora* instance) {
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b08a      	sub	sp, #40	@ 0x28
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	607a      	str	r2, [r7, #4]
 800dc48:	603b      	str	r3, [r7, #0]
    if (strcmp(_tname, "Base") == 0) {
 800dc4a:	492e      	ldr	r1, [pc, #184]	@ (800dd04 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xc8>)
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f7f2 fb47 	bl	80002e0 <strcmp>
 800dc52:	4603      	mov	r3, r0
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d115      	bne.n	800dc84 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x48>
        if (strcmp(_mtype, "Stepgen") == 0)
 800dc58:	492b      	ldr	r1, [pc, #172]	@ (800dd08 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xcc>)
 800dc5a:	6838      	ldr	r0, [r7, #0]
 800dc5c:	f7f2 fb40 	bl	80002e0 <strcmp>
 800dc60:	4603      	mov	r3, r0
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d10e      	bne.n	800dc84 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x48>
            return Stepgen::create(config, instance);
 800dc66:	f107 0310 	add.w	r3, r7, #16
 800dc6a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7f7 f918 	bl	8004ea4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f107 0110 	add.w	r1, r7, #16
 800dc7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f000 fe71 	bl	800e964 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
    if (strcmp(_tname, "On load") == 0) {
        // Future on-load modules can follow the same pattern
    }

    return nullptr;
}
 800dc82:	e03a      	b.n	800dcfa <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xbe>
    if (strcmp(_tname, "Servo") == 0) {
 800dc84:	4921      	ldr	r1, [pc, #132]	@ (800dd0c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xd0>)
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f7f2 fb2a 	bl	80002e0 <strcmp>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d12b      	bne.n	800dcea <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xae>
        if (strcmp(_mtype, "Blink") == 0)
 800dc92:	491f      	ldr	r1, [pc, #124]	@ (800dd10 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xd4>)
 800dc94:	6838      	ldr	r0, [r7, #0]
 800dc96:	f7f2 fb23 	bl	80002e0 <strcmp>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d10e      	bne.n	800dcbe <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x82>
            return Blink::create(config, instance);
 800dca0:	f107 0318 	add.w	r3, r7, #24
 800dca4:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7f7 f8fb 	bl	8004ea4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f107 0118 	add.w	r1, r7, #24
 800dcb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7fe f81e 	bl	800bcf8 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 800dcbc:	e01d      	b.n	800dcfa <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xbe>
        if (strcmp(_mtype, "Reset Pin") == 0)
 800dcbe:	4915      	ldr	r1, [pc, #84]	@ (800dd14 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xd8>)
 800dcc0:	6838      	ldr	r0, [r7, #0]
 800dcc2:	f7f2 fb0d 	bl	80002e0 <strcmp>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d10e      	bne.n	800dcea <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xae>
                    return ResetPin::create(config, instance);
 800dccc:	f107 0320 	add.w	r3, r7, #32
 800dcd0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7f7 f8e5 	bl	8004ea4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f107 0120 	add.w	r1, r7, #32
 800dce0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dce2:	4618      	mov	r0, r3
 800dce4:	f000 f898 	bl	800de18 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 800dce8:	e007      	b.n	800dcfa <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xbe>
    if (strcmp(_tname, "On load") == 0) {
 800dcea:	490b      	ldr	r1, [pc, #44]	@ (800dd18 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xdc>)
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f7f2 faf7 	bl	80002e0 <strcmp>
    return nullptr;
 800dcf2:	2100      	movs	r1, #0
 800dcf4:	68f8      	ldr	r0, [r7, #12]
 800dcf6:	f000 f841 	bl	800dd7c <_ZNSt10shared_ptrI6ModuleEC1EDn>
}
 800dcfa:	68f8      	ldr	r0, [r7, #12]
 800dcfc:	3728      	adds	r7, #40	@ 0x28
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	0801f284 	.word	0x0801f284
 800dd08:	0801f28c 	.word	0x0801f28c
 800dd0c:	0801f294 	.word	0x0801f294
 800dd10:	0801f29c 	.word	0x0801f29c
 800dd14:	0801f2a4 	.word	0x0801f2a4
 800dd18:	0801f2b0 	.word	0x0801f2b0

0800dd1c <_ZN13ModuleFactory11getInstanceEv>:

// Static instance accessor
ModuleFactory* ModuleFactory::getInstance() {
 800dd1c:	b598      	push	{r3, r4, r7, lr}
 800dd1e:	af00      	add	r7, sp, #0
    static ModuleFactory* instance = new ModuleFactory();
 800dd20:	4b14      	ldr	r3, [pc, #80]	@ (800dd74 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f3bf 8f5b 	dmb	ish
 800dd28:	f003 0301 	and.w	r3, r3, #1
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	bf0c      	ite	eq
 800dd30:	2301      	moveq	r3, #1
 800dd32:	2300      	movne	r3, #0
 800dd34:	b2db      	uxtb	r3, r3
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d017      	beq.n	800dd6a <_ZN13ModuleFactory11getInstanceEv+0x4e>
 800dd3a:	480e      	ldr	r0, [pc, #56]	@ (800dd74 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 800dd3c:	f00f fb8d 	bl	801d45a <__cxa_guard_acquire>
 800dd40:	4603      	mov	r3, r0
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	bf14      	ite	ne
 800dd46:	2301      	movne	r3, #1
 800dd48:	2300      	moveq	r3, #0
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d00c      	beq.n	800dd6a <_ZN13ModuleFactory11getInstanceEv+0x4e>
 800dd50:	2001      	movs	r0, #1
 800dd52:	f00f fb91 	bl	801d478 <_Znwj>
 800dd56:	4603      	mov	r3, r0
 800dd58:	461c      	mov	r4, r3
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	f7ff ff62 	bl	800dc24 <_ZN13ModuleFactoryC1Ev>
 800dd60:	4b05      	ldr	r3, [pc, #20]	@ (800dd78 <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 800dd62:	601c      	str	r4, [r3, #0]
 800dd64:	4803      	ldr	r0, [pc, #12]	@ (800dd74 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 800dd66:	f00f fb84 	bl	801d472 <__cxa_guard_release>
    return instance;
 800dd6a:	4b03      	ldr	r3, [pc, #12]	@ (800dd78 <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	bd98      	pop	{r3, r4, r7, pc}
 800dd72:	bf00      	nop
 800dd74:	24000410 	.word	0x24000410
 800dd78:	2400040c 	.word	0x2400040c

0800dd7c <_ZNSt10shared_ptrI6ModuleEC1EDn>:
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b082      	sub	sp, #8
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 f805 	bl	800dd96 <_ZNSt10shared_ptrI6ModuleEC1Ev>
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3708      	adds	r7, #8
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}

0800dd96 <_ZNSt10shared_ptrI6ModuleEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 800dd96:	b580      	push	{r7, lr}
 800dd98:	b082      	sub	sp, #8
 800dd9a:	af00      	add	r7, sp, #0
 800dd9c:	6078      	str	r0, [r7, #4]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	4618      	mov	r0, r3
 800dda2:	f000 f805 	bl	800ddb0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3708      	adds	r7, #8
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	601a      	str	r2, [r3, #0]
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	3304      	adds	r3, #4
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7fc f9d8 	bl	800a178 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3708      	adds	r7, #8
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}

0800ddd2 <_ZN3Pin3getEv>:
        void setAsInput();
        void pull_none();
        void pull_up();
        void pull_down();

        inline bool get()
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b082      	sub	sp, #8
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
        {
            return HAL_GPIO_ReadPin(this->GPIOx, this->pin);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	8bdb      	ldrh	r3, [r3, #30]
 800dde2:	4619      	mov	r1, r3
 800dde4:	4610      	mov	r0, r2
 800dde6:	f005 fce7 	bl	80137b8 <HAL_GPIO_ReadPin>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	bf14      	ite	ne
 800ddf0:	2301      	movne	r3, #1
 800ddf2:	2300      	moveq	r3, #0
 800ddf4:	b2db      	uxtb	r3, r3
        }
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3708      	adds	r7, #8
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <_ZN6Remora8getResetEv>:
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
    volatile rxData_t* getRxData() { return &rxData; }
    volatile bool* getReset() { return &reset; };
 800ddfe:	b480      	push	{r7}
 800de00:	b083      	sub	sp, #12
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	330c      	adds	r3, #12
 800de0a:	4618      	mov	r0, r3
 800de0c:	370c      	adds	r7, #12
 800de0e:	46bd      	mov	sp, r7
 800de10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de14:	4770      	bx	lr
	...

0800de18 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "resetPin.h"
#include <cstdio>

std::shared_ptr<Module> ResetPin::create(const JsonObject& config, Remora* instance) {
 800de18:	b580      	push	{r7, lr}
 800de1a:	b094      	sub	sp, #80	@ 0x50
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	60b9      	str	r1, [r7, #8]
 800de22:	607a      	str	r2, [r7, #4]
	const char* comment = config["Comment"];
 800de24:	f107 0314 	add.w	r3, r7, #20
 800de28:	4a1f      	ldr	r2, [pc, #124]	@ (800dea8 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x90>)
 800de2a:	68b9      	ldr	r1, [r7, #8]
 800de2c:	4618      	mov	r0, r3
 800de2e:	f000 f892 	bl	800df56 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800de32:	f107 0314 	add.w	r3, r7, #20
 800de36:	4618      	mov	r0, r3
 800de38:	f7f7 f868 	bl	8004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800de3c:	64f8      	str	r0, [r7, #76]	@ 0x4c
	printf("%s\n", comment);
 800de3e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800de40:	f010 f818 	bl	801de74 <puts>

	const char* pin = config["Pin"];
 800de44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800de48:	4a18      	ldr	r2, [pc, #96]	@ (800deac <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x94>)
 800de4a:	68b9      	ldr	r1, [r7, #8]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7fe f817 	bl	800be80 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800de52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800de56:	4618      	mov	r0, r3
 800de58:	f7f7 f858 	bl	8004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800de5c:	4603      	mov	r3, r0
 800de5e:	613b      	str	r3, [r7, #16]
	printf("Make Reset Pin at pin %s\n", pin);
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	4619      	mov	r1, r3
 800de64:	4812      	ldr	r0, [pc, #72]	@ (800deb0 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x98>)
 800de66:	f00f ff95 	bl	801dd94 <iprintf>

	return std::make_unique<ResetPin>(instance->getReset(), pin);
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f7ff ffc7 	bl	800ddfe <_ZN6Remora8getResetEv>
 800de70:	4603      	mov	r3, r0
 800de72:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de74:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800de78:	f107 0210 	add.w	r2, r7, #16
 800de7c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800de80:	4618      	mov	r0, r3
 800de82:	f000 f88d 	bl	800dfa0 <_ZSt11make_uniqueI8ResetPinJPVbRPKcEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800de86:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800de8a:	4619      	mov	r1, r3
 800de8c:	68f8      	ldr	r0, [r7, #12]
 800de8e:	f000 f8e5 	bl	800e05c <_ZNSt10shared_ptrI6ModuleEC1I8ResetPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 800de92:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800de96:	4618      	mov	r0, r3
 800de98:	f000 f8be 	bl	800e018 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev>
 800de9c:	bf00      	nop
}
 800de9e:	68f8      	ldr	r0, [r7, #12]
 800dea0:	3750      	adds	r7, #80	@ 0x50
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	0801f2b8 	.word	0x0801f2b8
 800deac:	0801f2c0 	.word	0x0801f2c0
 800deb0:	0801f2c4 	.word	0x0801f2c4

0800deb4 <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

ResetPin::ResetPin(volatile bool* ptrReset, const std::string& portAndPin) :
 800deb4:	b590      	push	{r4, r7, lr}
 800deb6:	b08b      	sub	sp, #44	@ 0x2c
 800deb8:	af00      	add	r7, sp, #0
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	607a      	str	r2, [r7, #4]
    ptrReset(ptrReset),
    portAndPin(portAndPin),
    pin(new Pin(portAndPin, 0)) {}  // Input mode (0x0)
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7ff fe28 	bl	800db18 <_ZN6ModuleC1Ev>
 800dec8:	4a14      	ldr	r2, [pc, #80]	@ (800df1c <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x68>)
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	601a      	str	r2, [r3, #0]
    ptrReset(ptrReset),
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	68ba      	ldr	r2, [r7, #8]
 800ded2:	619a      	str	r2, [r3, #24]
    portAndPin(portAndPin),
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	331c      	adds	r3, #28
 800ded8:	6879      	ldr	r1, [r7, #4]
 800deda:	4618      	mov	r0, r3
 800dedc:	f00f fc77 	bl	801d7ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    pin(new Pin(portAndPin, 0)) {}  // Input mode (0x0)
 800dee0:	2044      	movs	r0, #68	@ 0x44
 800dee2:	f00f fac9 	bl	801d478 <_Znwj>
 800dee6:	4603      	mov	r3, r0
 800dee8:	461c      	mov	r4, r3
 800deea:	f107 0310 	add.w	r3, r7, #16
 800deee:	6879      	ldr	r1, [r7, #4]
 800def0:	4618      	mov	r0, r3
 800def2:	f00f fc6c 	bl	801d7ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800def6:	f107 0310 	add.w	r3, r7, #16
 800defa:	2200      	movs	r2, #0
 800defc:	4619      	mov	r1, r3
 800defe:	4620      	mov	r0, r4
 800df00:	f7f4 f971 	bl	80021e6 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	635c      	str	r4, [r3, #52]	@ 0x34
 800df08:	f107 0310 	add.w	r3, r7, #16
 800df0c:	4618      	mov	r0, r3
 800df0e:	f00f fb5f 	bl	801d5d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	4618      	mov	r0, r3
 800df16:	372c      	adds	r7, #44	@ 0x2c
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd90      	pop	{r4, r7, pc}
 800df1c:	0801f6c0 	.word	0x0801f6c0

0800df20 <_ZN8ResetPin6updateEv>:

void ResetPin::update() {
 800df20:	b590      	push	{r4, r7, lr}
 800df22:	b083      	sub	sp, #12
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
    *ptrReset = pin->get();
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	699c      	ldr	r4, [r3, #24]
 800df30:	4610      	mov	r0, r2
 800df32:	f7ff ff4e 	bl	800ddd2 <_ZN3Pin3getEv>
 800df36:	4603      	mov	r3, r0
 800df38:	7023      	strb	r3, [r4, #0]
}
 800df3a:	bf00      	nop
 800df3c:	370c      	adds	r7, #12
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd90      	pop	{r4, r7, pc}

0800df42 <_ZN8ResetPin10slowUpdateEv>:

void ResetPin::slowUpdate() {
 800df42:	b480      	push	{r7}
 800df44:	b083      	sub	sp, #12
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
    return;
 800df4a:	bf00      	nop
}
 800df4c:	370c      	adds	r7, #12
 800df4e:	46bd      	mov	sp, r7
 800df50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df54:	4770      	bx	lr

0800df56 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800df56:	b580      	push	{r7, lr}
 800df58:	b08c      	sub	sp, #48	@ 0x30
 800df5a:	af02      	add	r7, sp, #8
 800df5c:	60f8      	str	r0, [r7, #12]
 800df5e:	60b9      	str	r1, [r7, #8]
 800df60:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800df62:	68ba      	ldr	r2, [r7, #8]
 800df64:	f107 0314 	add.w	r3, r7, #20
 800df68:	e892 0003 	ldmia.w	r2, {r0, r1}
 800df6c:	e883 0003 	stmia.w	r3, {r0, r1}
 800df70:	f107 031c 	add.w	r3, r7, #28
 800df74:	6879      	ldr	r1, [r7, #4]
 800df76:	4618      	mov	r0, r3
 800df78:	f7f7 fb0a 	bl	8005590 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800df7c:	466a      	mov	r2, sp
 800df7e:	f107 0320 	add.w	r3, r7, #32
 800df82:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df86:	e882 0003 	stmia.w	r2, {r0, r1}
 800df8a:	69fb      	ldr	r3, [r7, #28]
 800df8c:	f107 0214 	add.w	r2, r7, #20
 800df90:	ca06      	ldmia	r2, {r1, r2}
 800df92:	68f8      	ldr	r0, [r7, #12]
 800df94:	f7f7 f929 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800df98:	68f8      	ldr	r0, [r7, #12]
 800df9a:	3728      	adds	r7, #40	@ 0x28
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <_ZSt11make_uniqueI8ResetPinJPVbRPKcEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800dfa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfa2:	b08d      	sub	sp, #52	@ 0x34
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800dfac:	2038      	movs	r0, #56	@ 0x38
 800dfae:	f00f fa63 	bl	801d478 <_Znwj>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	461e      	mov	r6, r3
 800dfb6:	68b8      	ldr	r0, [r7, #8]
 800dfb8:	f000 f863 	bl	800e082 <_ZSt7forwardIPVbEOT_RNSt16remove_referenceIS2_E4typeE>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	681c      	ldr	r4, [r3, #0]
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f7fe f8c5 	bl	800c150 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	681d      	ldr	r5, [r3, #0]
 800dfca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f00f fa63 	bl	801d49a <_ZNSaIcEC1Ev>
 800dfd4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800dfd8:	f107 0314 	add.w	r3, r7, #20
 800dfdc:	4629      	mov	r1, r5
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7f6 ff0e 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800dfe4:	f107 0314 	add.w	r3, r7, #20
 800dfe8:	461a      	mov	r2, r3
 800dfea:	4621      	mov	r1, r4
 800dfec:	4630      	mov	r0, r6
 800dfee:	f7ff ff61 	bl	800deb4 <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800dff2:	4631      	mov	r1, r6
 800dff4:	68f8      	ldr	r0, [r7, #12]
 800dff6:	f000 f85f 	bl	800e0b8 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800dffa:	f107 0314 	add.w	r3, r7, #20
 800dffe:	4618      	mov	r0, r3
 800e000:	f00f fae6 	bl	801d5d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e004:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e008:	4618      	mov	r0, r3
 800e00a:	f00f fa47 	bl	801d49c <_ZNSaIcED1Ev>
 800e00e:	bf00      	nop
 800e010:	68f8      	ldr	r0, [r7, #12]
 800e012:	3734      	adds	r7, #52	@ 0x34
 800e014:	46bd      	mov	sp, r7
 800e016:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e018 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800e018:	b590      	push	{r4, r7, lr}
 800e01a:	b085      	sub	sp, #20
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	4618      	mov	r0, r3
 800e024:	f000 f857 	bl	800e0d6 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 800e028:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d00c      	beq.n	800e04c <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 f85c 	bl	800e0f0 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>
 800e038:	4604      	mov	r4, r0
 800e03a:	68f8      	ldr	r0, [r7, #12]
 800e03c:	f000 f865 	bl	800e10a <_ZSt4moveIRP8ResetPinEONSt16remove_referenceIT_E4typeEOS4_>
 800e040:	4603      	mov	r3, r0
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	4619      	mov	r1, r3
 800e046:	4620      	mov	r0, r4
 800e048:	f000 f892 	bl	800e170 <_ZNKSt14default_deleteI8ResetPinEclEPS0_>
	__ptr = pointer();
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	2200      	movs	r2, #0
 800e050:	601a      	str	r2, [r3, #0]
      }
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	4618      	mov	r0, r3
 800e056:	3714      	adds	r7, #20
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd90      	pop	{r4, r7, pc}

0800e05c <_ZNSt10shared_ptrI6ModuleEC1I8ResetPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800e05c:	b590      	push	{r4, r7, lr}
 800e05e:	b083      	sub	sp, #12
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800e066:	687c      	ldr	r4, [r7, #4]
 800e068:	6838      	ldr	r0, [r7, #0]
 800e06a:	f000 f892 	bl	800e192 <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800e06e:	4603      	mov	r3, r0
 800e070:	4619      	mov	r1, r3
 800e072:	4620      	mov	r0, r4
 800e074:	f000 f898 	bl	800e1a8 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	4618      	mov	r0, r3
 800e07c:	370c      	adds	r7, #12
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd90      	pop	{r4, r7, pc}

0800e082 <_ZSt7forwardIPVbEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e082:	b480      	push	{r7}
 800e084:	b083      	sub	sp, #12
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	4618      	mov	r0, r3
 800e08e:	370c      	adds	r7, #12
 800e090:	46bd      	mov	sp, r7
 800e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e096:	4770      	bx	lr

0800e098 <_ZNSt15__uniq_ptr_dataI8ResetPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	683a      	ldr	r2, [r7, #0]
 800e0a6:	4611      	mov	r1, r2
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f000 f8b5 	bl	800e218 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EEC1EPS0_>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3708      	adds	r7, #8
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}

0800e0b8 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6839      	ldr	r1, [r7, #0]
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7ff ffe6 	bl	800e098 <_ZNSt15__uniq_ptr_dataI8ResetPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b082      	sub	sp, #8
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f000 f8ad 	bl	800e240 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3708      	adds	r7, #8
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b082      	sub	sp, #8
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f000 f8ad 	bl	800e25a <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE10_M_deleterEv>
 800e100:	4603      	mov	r3, r0
 800e102:	4618      	mov	r0, r3
 800e104:	3708      	adds	r7, #8
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}

0800e10a <_ZSt4moveIRP8ResetPinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800e10a:	b480      	push	{r7}
 800e10c:	b083      	sub	sp, #12
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	4618      	mov	r0, r3
 800e116:	370c      	adds	r7, #12
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr

0800e120 <_ZN8ResetPinD1Ev>:
#include "../../drivers/pin/pin.h"

// Global PRUreset variable (declared in extern.h or another source file)
extern volatile bool PRUreset;

class ResetPin : public Module {
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
 800e128:	4a08      	ldr	r2, [pc, #32]	@ (800e14c <_ZN8ResetPinD1Ev+0x2c>)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	601a      	str	r2, [r3, #0]
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	331c      	adds	r3, #28
 800e132:	4618      	mov	r0, r3
 800e134:	f00f fa4c 	bl	801d5d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7ff fd08 	bl	800db50 <_ZN6ModuleD1Ev>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	4618      	mov	r0, r3
 800e144:	3708      	adds	r7, #8
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	0801f6c0 	.word	0x0801f6c0

0800e150 <_ZN8ResetPinD0Ev>:
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f7ff ffe1 	bl	800e120 <_ZN8ResetPinD1Ev>
 800e15e:	2138      	movs	r1, #56	@ 0x38
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f00f f978 	bl	801d456 <_ZdlPvj>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4618      	mov	r0, r3
 800e16a:	3708      	adds	r7, #8
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <_ZNKSt14default_deleteI8ResetPinEclEPS0_>:
      operator()(_Tp* __ptr) const
 800e170:	b580      	push	{r7, lr}
 800e172:	b082      	sub	sp, #8
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d004      	beq.n	800e18a <_ZNKSt14default_deleteI8ResetPinEclEPS0_+0x1a>
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	3204      	adds	r2, #4
 800e184:	6812      	ldr	r2, [r2, #0]
 800e186:	4618      	mov	r0, r3
 800e188:	4790      	blx	r2
      }
 800e18a:	bf00      	nop
 800e18c:	3708      	adds	r7, #8
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}

0800e192 <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800e192:	b480      	push	{r7}
 800e194:	b083      	sub	sp, #12
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	4618      	mov	r0, r3
 800e19e:	370c      	adds	r7, #12
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 800e1b2:	6838      	ldr	r0, [r7, #0]
 800e1b4:	f000 f85e 	bl	800e274 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 800e1b8:	4602      	mov	r2, r0
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	601a      	str	r2, [r3, #0]
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	3304      	adds	r3, #4
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7fb ffd8 	bl	800a178 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 800e1c8:	6838      	ldr	r0, [r7, #0]
 800e1ca:	f000 f853 	bl	800e274 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f000 f85c 	bl	800e28e <_ZSt12__to_addressI8ResetPinEPT_S2_>
 800e1d6:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 800e1d8:	6838      	ldr	r0, [r7, #0]
 800e1da:	f7ff ffda 	bl	800e192 <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800e1de:	4602      	mov	r2, r0
 800e1e0:	f107 0308 	add.w	r3, r7, #8
 800e1e4:	4611      	mov	r1, r2
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f000 f85c 	bl	800e2a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	3304      	adds	r3, #4
 800e1f0:	f107 0208 	add.w	r2, r7, #8
 800e1f4:	4611      	mov	r1, r2
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7fe f9bc 	bl	800c574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800e1fc:	f107 0308 	add.w	r3, r7, #8
 800e200:	4618      	mov	r0, r3
 800e202:	f7fa fff3 	bl	80091ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 800e206:	68f9      	ldr	r1, [r7, #12]
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f000 f88d 	bl	800e328 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI8ResetPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	4618      	mov	r0, r3
 800e212:	3710      	adds	r7, #16
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}

0800e218 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800e218:	b590      	push	{r4, r7, lr}
 800e21a:	b083      	sub	sp, #12
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	4618      	mov	r0, r3
 800e226:	f000 f88a 	bl	800e33e <_ZNSt5tupleIJP8ResetPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800e22a:	683c      	ldr	r4, [r7, #0]
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f7ff ff52 	bl	800e0d6 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 800e232:	4603      	mov	r3, r0
 800e234:	601c      	str	r4, [r3, #0]
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	4618      	mov	r0, r3
 800e23a:	370c      	adds	r7, #12
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd90      	pop	{r4, r7, pc}

0800e240 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	4618      	mov	r0, r3
 800e24c:	f000 f884 	bl	800e358 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800e250:	4603      	mov	r3, r0
 800e252:	4618      	mov	r0, r3
 800e254:	3708      	adds	r7, #8
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}

0800e25a <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800e25a:	b580      	push	{r7, lr}
 800e25c:	b082      	sub	sp, #8
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	4618      	mov	r0, r3
 800e266:	f000 f883 	bl	800e370 <_ZSt3getILj1EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800e26a:	4603      	mov	r3, r0
 800e26c:	4618      	mov	r0, r3
 800e26e:	3708      	adds	r7, #8
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}

0800e274 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800e274:	b580      	push	{r7, lr}
 800e276:	b082      	sub	sp, #8
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	4618      	mov	r0, r3
 800e280:	f000 f882 	bl	800e388 <_ZNKSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 800e284:	4603      	mov	r3, r0
 800e286:	4618      	mov	r0, r3
 800e288:	3708      	adds	r7, #8
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}

0800e28e <_ZSt12__to_addressI8ResetPinEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 800e28e:	b480      	push	{r7}
 800e290:	b083      	sub	sp, #12
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
      return __ptr;
 800e296:	687b      	ldr	r3, [r7, #4]
    }
 800e298:	4618      	mov	r0, r3
 800e29a:	370c      	adds	r7, #12
 800e29c:	46bd      	mov	sp, r7
 800e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a2:	4770      	bx	lr

0800e2a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b086      	sub	sp, #24
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 800e2b4:	6838      	ldr	r0, [r7, #0]
 800e2b6:	f7ff ffdd 	bl	800e274 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	bf0c      	ite	eq
 800e2c0:	2301      	moveq	r3, #1
 800e2c2:	2300      	movne	r3, #0
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d128      	bne.n	800e31c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 800e2ca:	f107 030c 	add.w	r3, r7, #12
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f000 f868 	bl	800e3a4 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 800e2d4:	f107 030c 	add.w	r3, r7, #12
 800e2d8:	2101      	movs	r1, #1
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f000 f87a 	bl	800e3d4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 800e2e0:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800e2e2:	6838      	ldr	r0, [r7, #0]
 800e2e4:	f000 f885 	bl	800e3f2 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE7releaseEv>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 800e2ec:	6838      	ldr	r0, [r7, #0]
 800e2ee:	f7ff feff 	bl	800e0f0 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>
 800e2f2:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f000 f889 	bl	800e40c <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	f107 0210 	add.w	r2, r7, #16
 800e300:	f107 000c 	add.w	r0, r7, #12
 800e304:	6979      	ldr	r1, [r7, #20]
 800e306:	f000 f88c 	bl	800e422 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	697a      	ldr	r2, [r7, #20]
 800e30e:	601a      	str	r2, [r3, #0]
	}
 800e310:	f107 030c 	add.w	r3, r7, #12
 800e314:	4618      	mov	r0, r3
 800e316:	f000 f851 	bl	800e3bc <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800e31a:	e000      	b.n	800e31e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 800e31c:	bf00      	nop
	}
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	4618      	mov	r0, r3
 800e322:	3718      	adds	r7, #24
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI8ResetPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800e328:	b480      	push	{r7}
 800e32a:	b083      	sub	sp, #12
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
	{ }
 800e332:	bf00      	nop
 800e334:	370c      	adds	r7, #12
 800e336:	46bd      	mov	sp, r7
 800e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33c:	4770      	bx	lr

0800e33e <_ZNSt5tupleIJP8ResetPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800e33e:	b580      	push	{r7, lr}
 800e340:	b082      	sub	sp, #8
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	4618      	mov	r0, r3
 800e34a:	f000 f882 	bl	800e452 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEEC1Ev>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	4618      	mov	r0, r3
 800e352:	3708      	adds	r7, #8
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f000 f886 	bl	800e472 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERS4_>
 800e366:	4603      	mov	r3, r0
 800e368:	4618      	mov	r0, r3
 800e36a:	3708      	adds	r7, #8
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}

0800e370 <_ZSt3getILj1EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800e370:	b580      	push	{r7, lr}
 800e372:	b082      	sub	sp, #8
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f000 f887 	bl	800e48c <_ZSt12__get_helperILj1ESt14default_deleteI8ResetPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800e37e:	4603      	mov	r3, r0
 800e380:	4618      	mov	r0, r3
 800e382:	3708      	adds	r7, #8
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}

0800e388 <_ZNKSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	4618      	mov	r0, r3
 800e394:	f000 f886 	bl	800e4a4 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800e398:	4603      	mov	r3, r0
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4618      	mov	r0, r3
 800e39e:	3708      	adds	r7, #8
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f000 f886 	bl	800e4be <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3708      	adds	r7, #8
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b082      	sub	sp, #8
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f000 f885 	bl	800e4d4 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3708      	adds	r7, #8
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e3de:	2200      	movs	r2, #0
 800e3e0:	6839      	ldr	r1, [r7, #0]
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 f881 	bl	800e4ea <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3708      	adds	r7, #8
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}

0800e3f2 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800e3f2:	b580      	push	{r7, lr}
 800e3f4:	b082      	sub	sp, #8
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f000 f89e 	bl	800e53e <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE7releaseEv>
 800e402:	4603      	mov	r3, r0
 800e404:	4618      	mov	r0, r3
 800e406:	3708      	adds	r7, #8
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e40c:	b480      	push	{r7}
 800e40e:	b083      	sub	sp, #12
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	4618      	mov	r0, r3
 800e418:	370c      	adds	r7, #12
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr

0800e422 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800e422:	b590      	push	{r4, r7, lr}
 800e424:	b085      	sub	sp, #20
 800e426:	af00      	add	r7, sp, #0
 800e428:	60f8      	str	r0, [r7, #12]
 800e42a:	60b9      	str	r1, [r7, #8]
 800e42c:	607a      	str	r2, [r7, #4]
 800e42e:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 f899 	bl	800e568 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>
 800e436:	4604      	mov	r4, r0
 800e438:	6838      	ldr	r0, [r7, #0]
 800e43a:	f7ff ffe7 	bl	800e40c <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e43e:	4603      	mov	r3, r0
 800e440:	4622      	mov	r2, r4
 800e442:	68b9      	ldr	r1, [r7, #8]
 800e444:	68f8      	ldr	r0, [r7, #12]
 800e446:	f000 f89a 	bl	800e57e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 800e44a:	bf00      	nop
 800e44c:	3714      	adds	r7, #20
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd90      	pop	{r4, r7, pc}

0800e452 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800e452:	b580      	push	{r7, lr}
 800e454:	b082      	sub	sp, #8
 800e456:	af00      	add	r7, sp, #0
 800e458:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f000 f8ad 	bl	800e5ba <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEEC1Ev>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	4618      	mov	r0, r3
 800e464:	f000 f8b5 	bl	800e5d2 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EEC1Ev>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	4618      	mov	r0, r3
 800e46c:	3708      	adds	r7, #8
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}

0800e472 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e472:	b580      	push	{r7, lr}
 800e474:	b082      	sub	sp, #8
 800e476:	af00      	add	r7, sp, #0
 800e478:	6078      	str	r0, [r7, #4]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	4618      	mov	r0, r3
 800e47e:	f000 f8b6 	bl	800e5ee <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERS2_>
 800e482:	4603      	mov	r3, r0
 800e484:	4618      	mov	r0, r3
 800e486:	3708      	adds	r7, #8
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <_ZSt12__get_helperILj1ESt14default_deleteI8ResetPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f000 f8b5 	bl	800e604 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEE7_M_headERS3_>
 800e49a:	4603      	mov	r3, r0
 800e49c:	4618      	mov	r0, r3
 800e49e:	3708      	adds	r7, #8
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}

0800e4a4 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f000 f8b4 	bl	800e61c <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3708      	adds	r7, #8
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}

0800e4be <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e4be:	b480      	push	{r7}
 800e4c0:	b083      	sub	sp, #12
 800e4c2:	af00      	add	r7, sp, #0
 800e4c4:	6078      	str	r0, [r7, #4]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	370c      	adds	r7, #12
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr

0800e4d4 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	4618      	mov	r0, r3
 800e4e0:	370c      	adds	r7, #12
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e8:	4770      	bx	lr

0800e4ea <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e4ea:	b580      	push	{r7, lr}
 800e4ec:	b084      	sub	sp, #16
 800e4ee:	af00      	add	r7, sp, #0
 800e4f0:	60f8      	str	r0, [r7, #12]
 800e4f2:	60b9      	str	r1, [r7, #8]
 800e4f4:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800e4f6:	68f8      	ldr	r0, [r7, #12]
 800e4f8:	f000 f89c 	bl	800e634 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	4293      	cmp	r3, r2
 800e502:	bf8c      	ite	hi
 800e504:	2301      	movhi	r3, #1
 800e506:	2300      	movls	r3, #0
 800e508:	b2db      	uxtb	r3, r3
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	bf14      	ite	ne
 800e50e:	2301      	movne	r3, #1
 800e510:	2300      	moveq	r3, #0
 800e512:	b2db      	uxtb	r3, r3
 800e514:	2b00      	cmp	r3, #0
 800e516:	d007      	beq.n	800e528 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e51e:	d301      	bcc.n	800e524 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800e520:	f00e ffc0 	bl	801d4a4 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800e524:	f00e ffbb 	bl	801d49e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	011b      	lsls	r3, r3, #4
 800e52c:	4618      	mov	r0, r3
 800e52e:	f00e ffa3 	bl	801d478 <_Znwj>
 800e532:	4603      	mov	r3, r0
 800e534:	bf00      	nop
      }
 800e536:	4618      	mov	r0, r3
 800e538:	3710      	adds	r7, #16
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}

0800e53e <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800e53e:	b580      	push	{r7, lr}
 800e540:	b084      	sub	sp, #16
 800e542:	af00      	add	r7, sp, #0
 800e544:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f7ff fdc5 	bl	800e0d6 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 800e54c:	4603      	mov	r3, r0
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f7ff fdbf 	bl	800e0d6 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 800e558:	4603      	mov	r3, r0
 800e55a:	2200      	movs	r2, #0
 800e55c:	601a      	str	r2, [r3, #0]
	return __p;
 800e55e:	68fb      	ldr	r3, [r7, #12]
      }
 800e560:	4618      	mov	r0, r3
 800e562:	3710      	adds	r7, #16
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e568:	b480      	push	{r7}
 800e56a:	b083      	sub	sp, #12
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	4618      	mov	r0, r3
 800e574:	370c      	adds	r7, #12
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr

0800e57e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800e57e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e580:	b085      	sub	sp, #20
 800e582:	af00      	add	r7, sp, #0
 800e584:	60f8      	str	r0, [r7, #12]
 800e586:	60b9      	str	r1, [r7, #8]
 800e588:	607a      	str	r2, [r7, #4]
 800e58a:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	4619      	mov	r1, r3
 800e590:	2010      	movs	r0, #16
 800e592:	f7f9 fc77 	bl	8007e84 <_ZnwjPv>
 800e596:	4605      	mov	r5, r0
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f7ff ffe5 	bl	800e568 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	681c      	ldr	r4, [r3, #0]
 800e5a2:	6838      	ldr	r0, [r7, #0]
 800e5a4:	f7ff ff32 	bl	800e40c <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e5a8:	4632      	mov	r2, r6
 800e5aa:	4621      	mov	r1, r4
 800e5ac:	4628      	mov	r0, r5
 800e5ae:	f000 f84d 	bl	800e64c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 800e5b2:	bf00      	nop
 800e5b4:	3714      	adds	r7, #20
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e5ba <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEEC1Ev>:
      _Tuple_impl()
 800e5ba:	b580      	push	{r7, lr}
 800e5bc:	b082      	sub	sp, #8
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f000 f864 	bl	800e690 <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EEC1Ev>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3708      	adds	r7, #8
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}

0800e5d2 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EEC1Ev>:
      constexpr _Head_base()
 800e5d2:	b480      	push	{r7}
 800e5d4:	b083      	sub	sp, #12
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	601a      	str	r2, [r3, #0]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	370c      	adds	r7, #12
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ec:	4770      	bx	lr

0800e5ee <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e5ee:	b480      	push	{r7}
 800e5f0:	b083      	sub	sp, #12
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	6078      	str	r0, [r7, #4]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	370c      	adds	r7, #12
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e602:	4770      	bx	lr

0800e604 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e604:	b580      	push	{r7, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f000 f84a 	bl	800e6a6 <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EE7_M_headERS3_>
 800e612:	4603      	mov	r3, r0
 800e614:	4618      	mov	r0, r3
 800e616:	3708      	adds	r7, #8
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f000 f849 	bl	800e6bc <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERKS4_>
 800e62a:	4603      	mov	r3, r0
 800e62c:	4618      	mov	r0, r3
 800e62e:	3708      	adds	r7, #8
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800e634:	b480      	push	{r7}
 800e636:	b083      	sub	sp, #12
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800e63c:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 800e640:	4618      	mov	r0, r3
 800e642:	370c      	adds	r7, #12
 800e644:	46bd      	mov	sp, r7
 800e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64a:	4770      	bx	lr

0800e64c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 800e64c:	b5b0      	push	{r4, r5, r7, lr}
 800e64e:	b086      	sub	sp, #24
 800e650:	af00      	add	r7, sp, #0
 800e652:	60f8      	str	r0, [r7, #12]
 800e654:	60b9      	str	r1, [r7, #8]
 800e656:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7fc fc76 	bl	800af4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800e660:	4a0a      	ldr	r2, [pc, #40]	@ (800e68c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	601a      	str	r2, [r3, #0]
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	f103 040c 	add.w	r4, r3, #12
 800e66c:	1d3b      	adds	r3, r7, #4
 800e66e:	4618      	mov	r0, r3
 800e670:	f000 f831 	bl	800e6d6 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 800e674:	f107 0314 	add.w	r3, r7, #20
 800e678:	462a      	mov	r2, r5
 800e67a:	68b9      	ldr	r1, [r7, #8]
 800e67c:	4620      	mov	r0, r4
 800e67e:	f000 f835 	bl	800e6ec <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	4618      	mov	r0, r3
 800e686:	3718      	adds	r7, #24
 800e688:	46bd      	mov	sp, r7
 800e68a:	bdb0      	pop	{r4, r5, r7, pc}
 800e68c:	0801f6a4 	.word	0x0801f6a4

0800e690 <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EEC1Ev>:
      constexpr _Head_base()
 800e690:	b480      	push	{r7}
 800e692:	b083      	sub	sp, #12
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	4618      	mov	r0, r3
 800e69c:	370c      	adds	r7, #12
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a4:	4770      	bx	lr

0800e6a6 <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e6a6:	b480      	push	{r7}
 800e6a8:	b083      	sub	sp, #12
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	6078      	str	r0, [r7, #4]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	370c      	adds	r7, #12
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr

0800e6bc <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f000 f82c 	bl	800e724 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERKS2_>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3708      	adds	r7, #8
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800e6d6:	b480      	push	{r7}
 800e6d8:	b083      	sub	sp, #12
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	370c      	adds	r7, #12
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr

0800e6ec <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b084      	sub	sp, #16
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	60f8      	str	r0, [r7, #12]
 800e6f4:	60b9      	str	r1, [r7, #8]
 800e6f6:	713a      	strb	r2, [r7, #4]
 800e6f8:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 800e6fa:	1d3b      	adds	r3, r7, #4
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7ff ffea 	bl	800e6d6 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 800e702:	4603      	mov	r3, r0
 800e704:	4619      	mov	r1, r3
 800e706:	68f8      	ldr	r0, [r7, #12]
 800e708:	f000 f817 	bl	800e73a <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EEC1EOS2_>
 800e70c:	6839      	ldr	r1, [r7, #0]
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	f7fe fc90 	bl	800d034 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	68ba      	ldr	r2, [r7, #8]
 800e718:	601a      	str	r2, [r3, #0]
	{ }
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	4618      	mov	r0, r3
 800e71e:	3710      	adds	r7, #16
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	4618      	mov	r0, r3
 800e730:	370c      	adds	r7, #12
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr

0800e73a <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 800e73a:	b580      	push	{r7, lr}
 800e73c:	b082      	sub	sp, #8
 800e73e:	af00      	add	r7, sp, #0
 800e740:	6078      	str	r0, [r7, #4]
 800e742:	6039      	str	r1, [r7, #0]
 800e744:	6838      	ldr	r0, [r7, #0]
 800e746:	f7ff ffc6 	bl	800e6d6 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	4618      	mov	r0, r3
 800e74e:	3708      	adds	r7, #8
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}

0800e754 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	4a05      	ldr	r2, [pc, #20]	@ (800e774 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	601a      	str	r2, [r3, #0]
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	4618      	mov	r0, r3
 800e766:	f7fa fffb 	bl	8009760 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	4618      	mov	r0, r3
 800e76e:	3708      	adds	r7, #8
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}
 800e774:	0801f6a4 	.word	0x0801f6a4

0800e778 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800e778:	b580      	push	{r7, lr}
 800e77a:	b082      	sub	sp, #8
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f7ff ffe7 	bl	800e754 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800e786:	2110      	movs	r1, #16
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f00e fe64 	bl	801d456 <_ZdlPvj>
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	4618      	mov	r0, r3
 800e792:	3708      	adds	r7, #8
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}

0800e798 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	330c      	adds	r3, #12
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f000 f83f 	bl	800e828 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	68db      	ldr	r3, [r3, #12]
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	4610      	mov	r0, r2
 800e7b4:	f7ff fcdc 	bl	800e170 <_ZNKSt14default_deleteI8ResetPinEclEPS0_>
 800e7b8:	bf00      	nop
 800e7ba:	3708      	adds	r7, #8
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}

0800e7c0 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b086      	sub	sp, #24
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	330c      	adds	r3, #12
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f000 f837 	bl	800e840 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	f107 0314 	add.w	r3, r7, #20
 800e7d8:	4611      	mov	r1, r2
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f000 f83c 	bl	800e858 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800e7e0:	f107 0114 	add.w	r1, r7, #20
 800e7e4:	f107 030c 	add.w	r3, r7, #12
 800e7e8:	687a      	ldr	r2, [r7, #4]
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f000 f841 	bl	800e872 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f7ff ffaf 	bl	800e754 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800e7f6:	f107 030c 	add.w	r3, r7, #12
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f000 f84d 	bl	800e89a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800e800:	f107 0314 	add.w	r3, r7, #20
 800e804:	4618      	mov	r0, r3
 800e806:	f7ff fdd9 	bl	800e3bc <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800e80a:	3718      	adds	r7, #24
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 800e810:	b480      	push	{r7}
 800e812:	b083      	sub	sp, #12
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	6039      	str	r1, [r7, #0]
        return nullptr;
 800e81a:	2300      	movs	r3, #0
      }
 800e81c:	4618      	mov	r0, r3
 800e81e:	370c      	adds	r7, #12
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr

0800e828 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800e828:	b580      	push	{r7, lr}
 800e82a:	b082      	sub	sp, #8
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f000 f847 	bl	800e8c4 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EE6_S_getERS3_>
 800e836:	4603      	mov	r3, r0
 800e838:	4618      	mov	r0, r3
 800e83a:	3708      	adds	r7, #8
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800e840:	b580      	push	{r7, lr}
 800e842:	b082      	sub	sp, #8
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f7fe fcc2 	bl	800d1d2 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 800e84e:	4603      	mov	r3, r0
 800e850:	4618      	mov	r0, r3
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800e858:	b580      	push	{r7, lr}
 800e85a:	b082      	sub	sp, #8
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	6039      	str	r1, [r7, #0]
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f7ff fe2b 	bl	800e4be <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	4618      	mov	r0, r3
 800e86c:	3708      	adds	r7, #8
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}

0800e872 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800e872:	b580      	push	{r7, lr}
 800e874:	b084      	sub	sp, #16
 800e876:	af00      	add	r7, sp, #0
 800e878:	60f8      	str	r0, [r7, #12]
 800e87a:	60b9      	str	r1, [r7, #8]
 800e87c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800e87e:	68b8      	ldr	r0, [r7, #8]
 800e880:	f000 f82b 	bl	800e8da <_ZSt11__addressofISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 800e884:	4602      	mov	r2, r0
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	601a      	str	r2, [r3, #0]
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	605a      	str	r2, [r3, #4]
      { }
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	4618      	mov	r0, r3
 800e894:	3710      	adds	r7, #16
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}

0800e89a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800e89a:	b580      	push	{r7, lr}
 800e89c:	b082      	sub	sp, #8
 800e89e:	af00      	add	r7, sp, #0
 800e8a0:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d007      	beq.n	800e8ba <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6818      	ldr	r0, [r3, #0]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	685b      	ldr	r3, [r3, #4]
 800e8b2:	2201      	movs	r2, #1
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	f000 f81b 	bl	800e8f0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3708      	adds	r7, #8
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}

0800e8c4 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	370c      	adds	r7, #12
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d8:	4770      	bx	lr

0800e8da <_ZSt11__addressofISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e8da:	b480      	push	{r7}
 800e8dc:	b083      	sub	sp, #12
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	370c      	adds	r7, #12
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr

0800e8f0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b084      	sub	sp, #16
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	60f8      	str	r0, [r7, #12]
 800e8f8:	60b9      	str	r1, [r7, #8]
 800e8fa:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800e8fc:	687a      	ldr	r2, [r7, #4]
 800e8fe:	68b9      	ldr	r1, [r7, #8]
 800e900:	68f8      	ldr	r0, [r7, #12]
 800e902:	f000 f804 	bl	800e90e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 800e906:	bf00      	nop
 800e908:	3710      	adds	r7, #16
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}

0800e90e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800e90e:	b580      	push	{r7, lr}
 800e910:	b084      	sub	sp, #16
 800e912:	af00      	add	r7, sp, #0
 800e914:	60f8      	str	r0, [r7, #12]
 800e916:	60b9      	str	r1, [r7, #8]
 800e918:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	011b      	lsls	r3, r3, #4
 800e91e:	4619      	mov	r1, r3
 800e920:	68b8      	ldr	r0, [r7, #8]
 800e922:	f00e fd98 	bl	801d456 <_ZdlPvj>
      }
 800e926:	3710      	adds	r7, #16
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}

0800e92c <_ZN6Remora9getTxDataEv>:
	Remora();
	void run();
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
 800e92c:	b480      	push	{r7}
 800e92e:	b083      	sub	sp, #12
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	4b03      	ldr	r3, [pc, #12]	@ (800e944 <_ZN6Remora9getTxDataEv+0x18>)
 800e936:	4618      	mov	r0, r3
 800e938:	370c      	adds	r7, #12
 800e93a:	46bd      	mov	sp, r7
 800e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e940:	4770      	bx	lr
 800e942:	bf00      	nop
 800e944:	30000080 	.word	0x30000080

0800e948 <_ZN6Remora9getRxDataEv>:
    volatile rxData_t* getRxData() { return &rxData; }
 800e948:	b480      	push	{r7}
 800e94a:	b083      	sub	sp, #12
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	4b03      	ldr	r3, [pc, #12]	@ (800e960 <_ZN6Remora9getRxDataEv+0x18>)
 800e952:	4618      	mov	r0, r3
 800e954:	370c      	adds	r7, #12
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr
 800e95e:	bf00      	nop
 800e960:	300000c0 	.word	0x300000c0

0800e964 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "stepgen.h"


shared_ptr<Module> Stepgen::create(const JsonObject& config, Remora* instance)
	{
 800e964:	b590      	push	{r4, r7, lr}
 800e966:	b0bd      	sub	sp, #244	@ 0xf4
 800e968:	af08      	add	r7, sp, #32
 800e96a:	60f8      	str	r0, [r7, #12]
 800e96c:	60b9      	str	r1, [r7, #8]
 800e96e:	607a      	str	r2, [r7, #4]
	    const char* comment = config["Comment"];
 800e970:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e974:	4a50      	ldr	r2, [pc, #320]	@ (800eab8 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x154>)
 800e976:	68b9      	ldr	r1, [r7, #8]
 800e978:	4618      	mov	r0, r3
 800e97a:	f7ff faec 	bl	800df56 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800e97e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e982:	4618      	mov	r0, r3
 800e984:	f7f6 fac2 	bl	8004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800e988:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
	    uint32_t threadFreq = config["ThreadFreq"];
 800e98c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800e990:	4a4a      	ldr	r2, [pc, #296]	@ (800eabc <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x158>)
 800e992:	68b9      	ldr	r1, [r7, #8]
 800e994:	4618      	mov	r0, r3
 800e996:	f7fd faa4 	bl	800bee2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800e99a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7f6 fae5 	bl	8004f6e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	62bb      	str	r3, [r7, #40]	@ 0x28

	    printf("%s\n", comment);
 800e9a8:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 800e9ac:	f00f fa62 	bl	801de74 <puts>

	    int joint = config["Joint Number"];
 800e9b0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800e9b4:	4a42      	ldr	r2, [pc, #264]	@ (800eac0 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x15c>)
 800e9b6:	68b9      	ldr	r1, [r7, #8]
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f000 fa1d 	bl	800edf8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800e9be:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7fd fa81 	bl	800beca <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	627b      	str	r3, [r7, #36]	@ 0x24
	    const char* enable = config["Enable Pin"];
 800e9cc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e9d0:	4a3c      	ldr	r2, [pc, #240]	@ (800eac4 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x160>)
 800e9d2:	68b9      	ldr	r1, [r7, #8]
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f7fd fa84 	bl	800bee2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800e9da:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7f6 fa94 	bl	8004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	623b      	str	r3, [r7, #32]
	    const char* step = config["Step Pin"];
 800e9e8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800e9ec:	4a36      	ldr	r2, [pc, #216]	@ (800eac8 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x164>)
 800e9ee:	68b9      	ldr	r1, [r7, #8]
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f000 fa26 	bl	800ee42 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800e9f6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7f6 fa86 	bl	8004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800ea00:	4603      	mov	r3, r0
 800ea02:	61fb      	str	r3, [r7, #28]
	    const char* dir = config["Direction Pin"];
 800ea04:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ea08:	4a30      	ldr	r2, [pc, #192]	@ (800eacc <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x168>)
 800ea0a:	68b9      	ldr	r1, [r7, #8]
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f000 fa3d 	bl	800ee8c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800ea12:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7f6 fa78 	bl	8004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	61bb      	str	r3, [r7, #24]

	    // Configure pointers to data source and feedback location
	    volatile int32_t* ptrJointFreqCmd = &instance->getRxData()->jointFreqCmd[joint];
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f7ff ff91 	bl	800e948 <_ZN6Remora9getRxDataEv>
 800ea26:	4602      	mov	r2, r0
 800ea28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea2a:	009b      	lsls	r3, r3, #2
 800ea2c:	4413      	add	r3, r2
 800ea2e:	3304      	adds	r3, #4
 800ea30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    volatile int32_t* ptrJointFeedback = &instance->getTxData()->jointFeedback[joint];
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f7ff ff79 	bl	800e92c <_ZN6Remora9getTxDataEv>
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea3e:	009b      	lsls	r3, r3, #2
 800ea40:	4413      	add	r3, r2
 800ea42:	3304      	adds	r3, #4
 800ea44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	    volatile uint8_t* ptrJointEnable = &instance->getRxData()->jointEnable;
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f7ff ff7d 	bl	800e948 <_ZN6Remora9getRxDataEv>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	333c      	adds	r3, #60	@ 0x3c
 800ea52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

	    bool usesModulePost = true;		// stepgen uses the thread modulesPost vector
 800ea56:	2301      	movs	r3, #1
 800ea58:	75fb      	strb	r3, [r7, #23]

	    // Create the step generator and register it in the thread
	    return make_unique<Stepgen>(threadFreq, joint, enable, step, dir, Config::stepBit, *ptrJointFreqCmd, *ptrJointFeedback, *ptrJointEnable, usesModulePost);
 800ea5a:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 800ea5e:	f107 0420 	add.w	r4, r7, #32
 800ea62:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800ea66:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800ea6a:	f107 0317 	add.w	r3, r7, #23
 800ea6e:	9306      	str	r3, [sp, #24]
 800ea70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ea74:	9305      	str	r3, [sp, #20]
 800ea76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ea7a:	9304      	str	r3, [sp, #16]
 800ea7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ea80:	9303      	str	r3, [sp, #12]
 800ea82:	4b13      	ldr	r3, [pc, #76]	@ (800ead0 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x16c>)
 800ea84:	9302      	str	r3, [sp, #8]
 800ea86:	f107 0318 	add.w	r3, r7, #24
 800ea8a:	9301      	str	r3, [sp, #4]
 800ea8c:	f107 031c 	add.w	r3, r7, #28
 800ea90:	9300      	str	r3, [sp, #0]
 800ea92:	4623      	mov	r3, r4
 800ea94:	f000 fa1f 	bl	800eed6 <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800ea98:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	68f8      	ldr	r0, [r7, #12]
 800eaa0:	f000 fa95 	bl	800efce <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 800eaa4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f000 fa6e 	bl	800ef8a <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>
 800eaae:	bf00      	nop
	}
 800eab0:	68f8      	ldr	r0, [r7, #12]
 800eab2:	37d4      	adds	r7, #212	@ 0xd4
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd90      	pop	{r4, r7, pc}
 800eab8:	0801f314 	.word	0x0801f314
 800eabc:	0801f31c 	.word	0x0801f31c
 800eac0:	0801f328 	.word	0x0801f328
 800eac4:	0801f338 	.word	0x0801f338
 800eac8:	0801f344 	.word	0x0801f344
 800eacc:	0801f350 	.word	0x0801f350
 800ead0:	0801f6dc 	.word	0x0801f6dc

0800ead4 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>:
 * @param _stepBit The number of bits used for the step value.
 * @param _ptrFrequencyCommand A reference to the frequency command data for the joint.
 * @param _ptrFeedback A reference to the feedback data for the joint.
 * @param _ptrJointEnable A reference to the joint enable data.
 */
Stepgen::Stepgen(int32_t _threadFreq, int _jointNumber, const char* _enable, const char* _step, const char* _direction, int _stepBit, volatile int32_t& _ptrFrequencyCommand, volatile int32_t& _ptrFeedback,  volatile uint8_t& _ptrJointEnable, bool _usesModulePost)
 800ead4:	b590      	push	{r4, r7, lr}
 800ead6:	b09b      	sub	sp, #108	@ 0x6c
 800ead8:	af00      	add	r7, sp, #0
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	607a      	str	r2, [r7, #4]
 800eae0:	603b      	str	r3, [r7, #0]
      DDSaccumulator(0),
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
      mask(1 << _jointNumber),  // Mask for checking the joint number
      isEnabled(false),
      isForward(false),
      isStepping(false)
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	4618      	mov	r0, r3
 800eae6:	f7ff f817 	bl	800db18 <_ZN6ModuleC1Ev>
 800eaea:	4a5c      	ldr	r2, [pc, #368]	@ (800ec5c <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb+0x188>)
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	601a      	str	r2, [r3, #0]
    : jointNumber(_jointNumber),
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	687a      	ldr	r2, [r7, #4]
 800eaf4:	619a      	str	r2, [r3, #24]
      enable(_enable),
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	683a      	ldr	r2, [r7, #0]
 800eafa:	61da      	str	r2, [r3, #28]
      step(_step),
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800eb00:	621a      	str	r2, [r3, #32]
      direction(_direction),
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800eb06:	625a      	str	r2, [r3, #36]	@ 0x24
      stepBit(_stepBit),
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800eb0e:	629a      	str	r2, [r3, #40]	@ 0x28
      ptrFrequencyCommand(&_ptrFrequencyCommand),
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800eb16:	62da      	str	r2, [r3, #44]	@ 0x2c
      ptrFeedback(&_ptrFeedback),
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800eb1e:	631a      	str	r2, [r3, #48]	@ 0x30
      ptrJointEnable(&_ptrJointEnable),
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800eb26:	635a      	str	r2, [r3, #52]	@ 0x34
	  enablePin(_enable, OUTPUT),
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 800eb2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eb32:	4618      	mov	r0, r3
 800eb34:	f00e fcb1 	bl	801d49a <_ZNSaIcEC1Ev>
 800eb38:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800eb3c:	f107 0314 	add.w	r3, r7, #20
 800eb40:	6839      	ldr	r1, [r7, #0]
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7f6 f95c 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800eb48:	f107 0314 	add.w	r3, r7, #20
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	4619      	mov	r1, r3
 800eb50:	4620      	mov	r0, r4
 800eb52:	f7f3 fb48 	bl	80021e6 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800eb56:	f107 0314 	add.w	r3, r7, #20
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f00e fd38 	bl	801d5d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800eb60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eb64:	4618      	mov	r0, r3
 800eb66:	f00e fc99 	bl	801d49c <_ZNSaIcED1Ev>
      stepPin(_step, OUTPUT),
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	f103 047c 	add.w	r4, r3, #124	@ 0x7c
 800eb70:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800eb74:	4618      	mov	r0, r3
 800eb76:	f00e fc90 	bl	801d49a <_ZNSaIcEC1Ev>
 800eb7a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800eb7e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800eb82:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800eb84:	4618      	mov	r0, r3
 800eb86:	f7f6 f93b 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800eb8a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800eb8e:	2201      	movs	r2, #1
 800eb90:	4619      	mov	r1, r3
 800eb92:	4620      	mov	r0, r4
 800eb94:	f7f3 fb27 	bl	80021e6 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800eb98:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f00e fd17 	bl	801d5d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800eba2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800eba6:	4618      	mov	r0, r3
 800eba8:	f00e fc78 	bl	801d49c <_ZNSaIcED1Ev>
      directionPin(_direction, OUTPUT),
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	f103 04c0 	add.w	r4, r3, #192	@ 0xc0
 800ebb2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f00e fc6f 	bl	801d49a <_ZNSaIcEC1Ev>
 800ebbc:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800ebc0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ebc4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7f6 f91a 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800ebcc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ebd0:	2201      	movs	r2, #1
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	f7f3 fb06 	bl	80021e6 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800ebda:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f00e fcf6 	bl	801d5d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ebe4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f00e fc57 	bl	801d49c <_ZNSaIcED1Ev>
      rawCount(0),
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      DDSaccumulator(0),
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
 800ebfe:	2201      	movs	r2, #1
 800ec00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ec04:	fa02 f303 	lsl.w	r3, r2, r3
 800ec08:	ee07 3a90 	vmov	s15, r3
 800ec0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	ee07 3a90 	vmov	s15, r3
 800ec16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ec1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	edc3 7a43 	vstr	s15, [r3, #268]	@ 0x10c
      mask(1 << _jointNumber),  // Mask for checking the joint number
 800ec24:	2201      	movs	r2, #1
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	409a      	lsls	r2, r3
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
      isEnabled(false),
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	2200      	movs	r2, #0
 800ec34:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
      isForward(false),
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
      isStepping(false)
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2200      	movs	r2, #0
 800ec44:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
{
	usesModulePost = _usesModulePost;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 800ec4e:	751a      	strb	r2, [r3, #20]
}
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	4618      	mov	r0, r3
 800ec54:	376c      	adds	r7, #108	@ 0x6c
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd90      	pop	{r4, r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	0801f704 	.word	0x0801f704

0800ec60 <_ZN7Stepgen6updateEv>:
 * 
 * This method generates pulses for stepping according to the current
 * frequency command and direction.
 */
void Stepgen::update()
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
    makePulses();  // Generate pulses for stepping and direction
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f000 f819 	bl	800eca0 <_ZN7Stepgen10makePulsesEv>
}
 800ec6e:	bf00      	nop
 800ec70:	3708      	adds	r7, #8
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}

0800ec76 <_ZN7Stepgen10updatePostEv>:
 * @brief Post-update method for the Stepgen.
 * 
 * This method stops any ongoing pulses after the update phase.
 */
void Stepgen::updatePost()
{
 800ec76:	b580      	push	{r7, lr}
 800ec78:	b082      	sub	sp, #8
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	6078      	str	r0, [r7, #4]
    stopPulses();  // Stop pulse generation after update
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f000 f8a8 	bl	800edd4 <_ZN7Stepgen10stopPulsesEv>
}
 800ec84:	bf00      	nop
 800ec86:	3708      	adds	r7, #8
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}

0800ec8c <_ZN7Stepgen10slowUpdateEv>:
 * 
 * This is a placeholder for performing any slow or low-priority updates,
 * though it currently does nothing.
 */
void Stepgen::slowUpdate()
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
    // Currently no operation for slow update
}
 800ec94:	bf00      	nop
 800ec96:	370c      	adds	r7, #12
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr

0800eca0 <_ZN7Stepgen10makePulsesEv>:
 * This method calculates the next step and updates the step and direction
 * pins accordingly. It uses the DDS (Direct Digital Synthesis) technique
 * to generate precise frequency-based stepping.
 */
void Stepgen::makePulses()
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
    isEnabled = ((*(ptrJointEnable) & mask) != 0);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	b2db      	uxtb	r3, r3
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800ecb8:	4013      	ands	r3, r2
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	bf14      	ite	ne
 800ecbe:	2301      	movne	r3, #1
 800ecc0:	2300      	moveq	r3, #0
 800ecc2:	b2da      	uxtb	r2, r3
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    if (!isEnabled)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800ecd0:	f083 0301 	eor.w	r3, r3, #1
 800ecd4:	b2db      	uxtb	r3, r3
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d006      	beq.n	800ece8 <_ZN7Stepgen10makePulsesEv+0x48>
    {
        enablePin.set(true);  	// Disable the driver if not enabled
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	3338      	adds	r3, #56	@ 0x38
 800ecde:	2101      	movs	r1, #1
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7fc ffeb 	bl	800bcbc <_ZN3Pin3setEb>
        return;  				// Exit early if the generator is disabled
 800ece6:	e072      	b.n	800edce <_ZN7Stepgen10makePulsesEv+0x12e>
    }

    enablePin.set(false); 		// Enable the driver
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	3338      	adds	r3, #56	@ 0x38
 800ecec:	2100      	movs	r1, #0
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7fc ffe4 	bl	800bcbc <_ZN3Pin3setEb>

    // Get the current frequency command and scale it using the frequency scale
    frequencyCommand = *ptrFrequencyCommand;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
    DDSaddValue = frequencyCommand * frequencyScale;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800ed06:	ee07 3a90 	vmov	s15, r3
 800ed0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	edd3 7a43 	vldr	s15, [r3, #268]	@ 0x10c
 800ed14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed1c:	ee17 2a90 	vmov	r2, s15
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

    // Save the current DDS accumulator value and update it
    int32_t stepNow = DDSaccumulator;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ed2c:	60fb      	str	r3, [r7, #12]
    DDSaccumulator += DDSaddValue;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ed3a:	441a      	add	r2, r3
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

    // Check for changes in the low half of the DDS accumulator
    stepNow ^= DDSaccumulator;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ed48:	68fa      	ldr	r2, [r7, #12]
 800ed4a:	4053      	eors	r3, r2
 800ed4c:	60fb      	str	r3, [r7, #12]
    stepNow &= (1L << stepBit);  // Check for the step bit
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed52:	2201      	movs	r2, #1
 800ed54:	fa02 f303 	lsl.w	r3, r2, r3
 800ed58:	68fa      	ldr	r2, [r7, #12]
 800ed5a:	4013      	ands	r3, r2
 800ed5c:	60fb      	str	r3, [r7, #12]

    // Determine direction based on the sign of DDSaddValue
    isForward = DDSaddValue > 0;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	bfcc      	ite	gt
 800ed68:	2301      	movgt	r3, #1
 800ed6a:	2300      	movle	r3, #0
 800ed6c:	b2da      	uxtb	r2, r3
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d

    // If a step is to be made, set the direction and step pins accordingly
    if (stepNow)
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d029      	beq.n	800edce <_ZN7Stepgen10makePulsesEv+0x12e>
    {
        directionPin.set(isForward);  // Set direction pin
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 800ed86:	4619      	mov	r1, r3
 800ed88:	4610      	mov	r0, r2
 800ed8a:	f7fc ff97 	bl	800bcbc <_ZN3Pin3setEb>
        stepPin.set(true);  // Set the step pin
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	337c      	adds	r3, #124	@ 0x7c
 800ed92:	2101      	movs	r1, #1
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7fc ff91 	bl	800bcbc <_ZN3Pin3setEb>
        rawCount += (isForward ? 1 : -1);  // Update rawCount based on direction
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800eda0:	687a      	ldr	r2, [r7, #4]
 800eda2:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 800eda6:	2a00      	cmp	r2, #0
 800eda8:	d001      	beq.n	800edae <_ZN7Stepgen10makePulsesEv+0x10e>
 800edaa:	2201      	movs	r2, #1
 800edac:	e001      	b.n	800edb2 <_ZN7Stepgen10makePulsesEv+0x112>
 800edae:	f04f 32ff 	mov.w	r2, #4294967295
 800edb2:	441a      	add	r2, r3
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
        *ptrFeedback = rawCount;  // Update the feedback with the raw count
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edbe:	687a      	ldr	r2, [r7, #4]
 800edc0:	f8d2 2104 	ldr.w	r2, [r2, #260]	@ 0x104
 800edc4:	601a      	str	r2, [r3, #0]
        isStepping = true;  // Indicate that stepping is occurring
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2201      	movs	r2, #1
 800edca:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
    }
}
 800edce:	3710      	adds	r7, #16
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <_ZN7Stepgen10stopPulsesEv>:
 * @brief Stops the pulse generation.
 * 
 * This method resets the step pin to low and stops any ongoing stepping.
 */
void Stepgen::stopPulses()
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b082      	sub	sp, #8
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
    stepPin.set(false);  // Reset step pin to low
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	337c      	adds	r3, #124	@ 0x7c
 800ede0:	2100      	movs	r1, #0
 800ede2:	4618      	mov	r0, r3
 800ede4:	f7fc ff6a 	bl	800bcbc <_ZN3Pin3setEb>
    isStepping = false;  // Indicate that stepping has stopped
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2200      	movs	r2, #0
 800edec:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
}
 800edf0:	bf00      	nop
 800edf2:	3708      	adds	r7, #8
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b08c      	sub	sp, #48	@ 0x30
 800edfc:	af02      	add	r7, sp, #8
 800edfe:	60f8      	str	r0, [r7, #12]
 800ee00:	60b9      	str	r1, [r7, #8]
 800ee02:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800ee04:	68ba      	ldr	r2, [r7, #8]
 800ee06:	f107 0314 	add.w	r3, r7, #20
 800ee0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee0e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee12:	f107 031c 	add.w	r3, r7, #28
 800ee16:	6879      	ldr	r1, [r7, #4]
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f000 f8eb 	bl	800eff4 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800ee1e:	466a      	mov	r2, sp
 800ee20:	f107 0320 	add.w	r3, r7, #32
 800ee24:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ee28:	e882 0003 	stmia.w	r2, {r0, r1}
 800ee2c:	69fb      	ldr	r3, [r7, #28]
 800ee2e:	f107 0214 	add.w	r2, r7, #20
 800ee32:	ca06      	ldmia	r2, {r1, r2}
 800ee34:	68f8      	ldr	r0, [r7, #12]
 800ee36:	f7f6 f9d8 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800ee3a:	68f8      	ldr	r0, [r7, #12]
 800ee3c:	3728      	adds	r7, #40	@ 0x28
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800ee42:	b580      	push	{r7, lr}
 800ee44:	b08c      	sub	sp, #48	@ 0x30
 800ee46:	af02      	add	r7, sp, #8
 800ee48:	60f8      	str	r0, [r7, #12]
 800ee4a:	60b9      	str	r1, [r7, #8]
 800ee4c:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800ee4e:	68ba      	ldr	r2, [r7, #8]
 800ee50:	f107 0314 	add.w	r3, r7, #20
 800ee54:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee58:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee5c:	f107 031c 	add.w	r3, r7, #28
 800ee60:	6879      	ldr	r1, [r7, #4]
 800ee62:	4618      	mov	r0, r3
 800ee64:	f000 f8d9 	bl	800f01a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800ee68:	466a      	mov	r2, sp
 800ee6a:	f107 0320 	add.w	r3, r7, #32
 800ee6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ee72:	e882 0003 	stmia.w	r2, {r0, r1}
 800ee76:	69fb      	ldr	r3, [r7, #28]
 800ee78:	f107 0214 	add.w	r2, r7, #20
 800ee7c:	ca06      	ldmia	r2, {r1, r2}
 800ee7e:	68f8      	ldr	r0, [r7, #12]
 800ee80:	f7f6 f9b3 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800ee84:	68f8      	ldr	r0, [r7, #12]
 800ee86:	3728      	adds	r7, #40	@ 0x28
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}

0800ee8c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b08c      	sub	sp, #48	@ 0x30
 800ee90:	af02      	add	r7, sp, #8
 800ee92:	60f8      	str	r0, [r7, #12]
 800ee94:	60b9      	str	r1, [r7, #8]
 800ee96:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800ee98:	68ba      	ldr	r2, [r7, #8]
 800ee9a:	f107 0314 	add.w	r3, r7, #20
 800ee9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eea2:	e883 0003 	stmia.w	r3, {r0, r1}
 800eea6:	f107 031c 	add.w	r3, r7, #28
 800eeaa:	6879      	ldr	r1, [r7, #4]
 800eeac:	4618      	mov	r0, r3
 800eeae:	f000 f8c7 	bl	800f040 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800eeb2:	466a      	mov	r2, sp
 800eeb4:	f107 0320 	add.w	r3, r7, #32
 800eeb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eebc:	e882 0003 	stmia.w	r2, {r0, r1}
 800eec0:	69fb      	ldr	r3, [r7, #28]
 800eec2:	f107 0214 	add.w	r2, r7, #20
 800eec6:	ca06      	ldmia	r2, {r1, r2}
 800eec8:	68f8      	ldr	r0, [r7, #12]
 800eeca:	f7f6 f98e 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800eece:	68f8      	ldr	r0, [r7, #12]
 800eed0:	3728      	adds	r7, #40	@ 0x28
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800eed6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eeda:	b093      	sub	sp, #76	@ 0x4c
 800eedc:	af08      	add	r7, sp, #32
 800eede:	6278      	str	r0, [r7, #36]	@ 0x24
 800eee0:	6239      	str	r1, [r7, #32]
 800eee2:	61fa      	str	r2, [r7, #28]
 800eee4:	61bb      	str	r3, [r7, #24]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800eee6:	f44f 7090 	mov.w	r0, #288	@ 0x120
 800eeea:	f00e fac5 	bl	801d478 <_Znwj>
 800eeee:	4603      	mov	r3, r0
 800eef0:	4698      	mov	r8, r3
 800eef2:	6a38      	ldr	r0, [r7, #32]
 800eef4:	f7fa ff53 	bl	8009d9e <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800eef8:	4603      	mov	r3, r0
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	4699      	mov	r9, r3
 800eefe:	69f8      	ldr	r0, [r7, #28]
 800ef00:	f7fd f931 	bl	800c166 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800ef04:	4603      	mov	r3, r0
 800ef06:	681e      	ldr	r6, [r3, #0]
 800ef08:	69b8      	ldr	r0, [r7, #24]
 800ef0a:	f7fd f921 	bl	800c150 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	617b      	str	r3, [r7, #20]
 800ef14:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800ef16:	f7fd f91b 	bl	800c150 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	681c      	ldr	r4, [r3, #0]
 800ef1e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800ef20:	f7fd f916 	bl	800c150 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800ef24:	4603      	mov	r3, r0
 800ef26:	681d      	ldr	r5, [r3, #0]
 800ef28:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ef2a:	f7fa ff43 	bl	8009db4 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	613b      	str	r3, [r7, #16]
 800ef34:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ef36:	f000 f896 	bl	800f066 <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ef3e:	f000 f892 	bl	800f066 <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 800ef42:	60b8      	str	r0, [r7, #8]
 800ef44:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800ef46:	f000 f899 	bl	800f07c <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800ef4e:	f000 f8a0 	bl	800f092 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 800ef52:	4603      	mov	r3, r0
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	9306      	str	r3, [sp, #24]
 800ef58:	687a      	ldr	r2, [r7, #4]
 800ef5a:	9205      	str	r2, [sp, #20]
 800ef5c:	68ba      	ldr	r2, [r7, #8]
 800ef5e:	9204      	str	r2, [sp, #16]
 800ef60:	68fa      	ldr	r2, [r7, #12]
 800ef62:	9203      	str	r2, [sp, #12]
 800ef64:	693a      	ldr	r2, [r7, #16]
 800ef66:	9202      	str	r2, [sp, #8]
 800ef68:	9501      	str	r5, [sp, #4]
 800ef6a:	9400      	str	r4, [sp, #0]
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	4632      	mov	r2, r6
 800ef70:	4649      	mov	r1, r9
 800ef72:	4640      	mov	r0, r8
 800ef74:	f7ff fdae 	bl	800ead4 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>
 800ef78:	4641      	mov	r1, r8
 800ef7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef7c:	f000 f8a4 	bl	800f0c8 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800ef80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef82:	372c      	adds	r7, #44	@ 0x2c
 800ef84:	46bd      	mov	sp, r7
 800ef86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ef8a <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800ef8a:	b590      	push	{r4, r7, lr}
 800ef8c:	b085      	sub	sp, #20
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	4618      	mov	r0, r3
 800ef96:	f000 f8a6 	bl	800f0e6 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 800ef9a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d00c      	beq.n	800efbe <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f000 f8ab 	bl	800f100 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 800efaa:	4604      	mov	r4, r0
 800efac:	68f8      	ldr	r0, [r7, #12]
 800efae:	f000 f8b4 	bl	800f11a <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>
 800efb2:	4603      	mov	r3, r0
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4619      	mov	r1, r3
 800efb8:	4620      	mov	r0, r4
 800efba:	f000 f8ec 	bl	800f196 <_ZNKSt14default_deleteI7StepgenEclEPS0_>
	__ptr = pointer();
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	2200      	movs	r2, #0
 800efc2:	601a      	str	r2, [r3, #0]
      }
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	4618      	mov	r0, r3
 800efc8:	3714      	adds	r7, #20
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd90      	pop	{r4, r7, pc}

0800efce <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800efce:	b590      	push	{r4, r7, lr}
 800efd0:	b083      	sub	sp, #12
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	6078      	str	r0, [r7, #4]
 800efd6:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800efd8:	687c      	ldr	r4, [r7, #4]
 800efda:	6838      	ldr	r0, [r7, #0]
 800efdc:	f000 f8ec 	bl	800f1b8 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800efe0:	4603      	mov	r3, r0
 800efe2:	4619      	mov	r1, r3
 800efe4:	4620      	mov	r0, r4
 800efe6:	f000 f8f2 	bl	800f1ce <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	4618      	mov	r0, r3
 800efee:	370c      	adds	r7, #12
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd90      	pop	{r4, r7, pc}

0800eff4 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b082      	sub	sp, #8
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800effe:	6838      	ldr	r0, [r7, #0]
 800f000:	f000 f91d 	bl	800f23e <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800f004:	4602      	mov	r2, r0
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	4611      	mov	r1, r2
 800f00a:	4618      	mov	r0, r3
 800f00c:	f000 f922 	bl	800f254 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>
 800f010:	bf00      	nop
}
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	3708      	adds	r7, #8
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}

0800f01a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800f01a:	b580      	push	{r7, lr}
 800f01c:	b082      	sub	sp, #8
 800f01e:	af00      	add	r7, sp, #0
 800f020:	6078      	str	r0, [r7, #4]
 800f022:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800f024:	6838      	ldr	r0, [r7, #0]
 800f026:	f000 f924 	bl	800f272 <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800f02a:	4602      	mov	r2, r0
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	4611      	mov	r1, r2
 800f030:	4618      	mov	r0, r3
 800f032:	f000 f929 	bl	800f288 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>
 800f036:	bf00      	nop
}
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	3708      	adds	r7, #8
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800f040:	b580      	push	{r7, lr}
 800f042:	b082      	sub	sp, #8
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800f04a:	6838      	ldr	r0, [r7, #0]
 800f04c:	f000 f92b 	bl	800f2a6 <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800f050:	4602      	mov	r2, r0
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	4611      	mov	r1, r2
 800f056:	4618      	mov	r0, r3
 800f058:	f000 f930 	bl	800f2bc <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>
 800f05c:	bf00      	nop
}
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	3708      	adds	r7, #8
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}

0800f066 <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f066:	b480      	push	{r7}
 800f068:	b083      	sub	sp, #12
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	4618      	mov	r0, r3
 800f072:	370c      	adds	r7, #12
 800f074:	46bd      	mov	sp, r7
 800f076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07a:	4770      	bx	lr

0800f07c <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f07c:	b480      	push	{r7}
 800f07e:	b083      	sub	sp, #12
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	4618      	mov	r0, r3
 800f088:	370c      	adds	r7, #12
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr

0800f092 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f092:	b480      	push	{r7}
 800f094:	b083      	sub	sp, #12
 800f096:	af00      	add	r7, sp, #0
 800f098:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	4618      	mov	r0, r3
 800f09e:	370c      	adds	r7, #12
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a6:	4770      	bx	lr

0800f0a8 <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	6039      	str	r1, [r7, #0]
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	683a      	ldr	r2, [r7, #0]
 800f0b6:	4611      	mov	r1, r2
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f000 f90e 	bl	800f2da <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6839      	ldr	r1, [r7, #0]
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7ff ffe6 	bl	800f0a8 <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3708      	adds	r7, #8
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}

0800f0e6 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800f0e6:	b580      	push	{r7, lr}
 800f0e8:	b082      	sub	sp, #8
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f000 f906 	bl	800f302 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3708      	adds	r7, #8
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}

0800f100 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800f100:	b580      	push	{r7, lr}
 800f102:	b082      	sub	sp, #8
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	4618      	mov	r0, r3
 800f10c:	f000 f906 	bl	800f31c <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>
 800f110:	4603      	mov	r3, r0
 800f112:	4618      	mov	r0, r3
 800f114:	3708      	adds	r7, #8
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}

0800f11a <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800f11a:	b480      	push	{r7}
 800f11c:	b083      	sub	sp, #12
 800f11e:	af00      	add	r7, sp, #0
 800f120:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	4618      	mov	r0, r3
 800f126:	370c      	adds	r7, #12
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr

0800f130 <_ZN7StepgenD1Ev>:
 *
 * The Stepgen class is responsible for controlling a stepper motor by generating
 * pulses based on frequency commands received from a controller, as well as managing
 * the motor's direction and enable states.
 */
class Stepgen : public Module
 800f130:	b580      	push	{r7, lr}
 800f132:	b082      	sub	sp, #8
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	4a0d      	ldr	r2, [pc, #52]	@ (800f170 <_ZN7StepgenD1Ev+0x40>)
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	601a      	str	r2, [r3, #0]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	33c0      	adds	r3, #192	@ 0xc0
 800f142:	4618      	mov	r0, r3
 800f144:	f7fd f929 	bl	800c39a <_ZN3PinD1Ev>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	337c      	adds	r3, #124	@ 0x7c
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7fd f924 	bl	800c39a <_ZN3PinD1Ev>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	3338      	adds	r3, #56	@ 0x38
 800f156:	4618      	mov	r0, r3
 800f158:	f7fd f91f 	bl	800c39a <_ZN3PinD1Ev>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	4618      	mov	r0, r3
 800f160:	f7fe fcf6 	bl	800db50 <_ZN6ModuleD1Ev>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	4618      	mov	r0, r3
 800f168:	3708      	adds	r7, #8
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	bf00      	nop
 800f170:	0801f704 	.word	0x0801f704

0800f174 <_ZN7StepgenD0Ev>:
 800f174:	b580      	push	{r7, lr}
 800f176:	b082      	sub	sp, #8
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f7ff ffd7 	bl	800f130 <_ZN7StepgenD1Ev>
 800f182:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f00e f965 	bl	801d456 <_ZdlPvj>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	4618      	mov	r0, r3
 800f190:	3708      	adds	r7, #8
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}

0800f196 <_ZNKSt14default_deleteI7StepgenEclEPS0_>:
      operator()(_Tp* __ptr) const
 800f196:	b580      	push	{r7, lr}
 800f198:	b082      	sub	sp, #8
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	6078      	str	r0, [r7, #4]
 800f19e:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d004      	beq.n	800f1b0 <_ZNKSt14default_deleteI7StepgenEclEPS0_+0x1a>
 800f1a6:	681a      	ldr	r2, [r3, #0]
 800f1a8:	3204      	adds	r2, #4
 800f1aa:	6812      	ldr	r2, [r2, #0]
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	4790      	blx	r2
      }
 800f1b0:	bf00      	nop
 800f1b2:	3708      	adds	r7, #8
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}

0800f1b8 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800f1b8:	b480      	push	{r7}
 800f1ba:	b083      	sub	sp, #12
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	370c      	adds	r7, #12
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1cc:	4770      	bx	lr

0800f1ce <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800f1ce:	b580      	push	{r7, lr}
 800f1d0:	b084      	sub	sp, #16
 800f1d2:	af00      	add	r7, sp, #0
 800f1d4:	6078      	str	r0, [r7, #4]
 800f1d6:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 800f1d8:	6838      	ldr	r0, [r7, #0]
 800f1da:	f000 f8ac 	bl	800f336 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 800f1de:	4602      	mov	r2, r0
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	601a      	str	r2, [r3, #0]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	3304      	adds	r3, #4
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f7fa ffc5 	bl	800a178 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 800f1ee:	6838      	ldr	r0, [r7, #0]
 800f1f0:	f000 f8a1 	bl	800f336 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f000 f8aa 	bl	800f350 <_ZSt12__to_addressI7StepgenEPT_S2_>
 800f1fc:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 800f1fe:	6838      	ldr	r0, [r7, #0]
 800f200:	f7ff ffda 	bl	800f1b8 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800f204:	4602      	mov	r2, r0
 800f206:	f107 0308 	add.w	r3, r7, #8
 800f20a:	4611      	mov	r1, r2
 800f20c:	4618      	mov	r0, r3
 800f20e:	f000 f8aa 	bl	800f366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	3304      	adds	r3, #4
 800f216:	f107 0208 	add.w	r2, r7, #8
 800f21a:	4611      	mov	r1, r2
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7fd f9a9 	bl	800c574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800f222:	f107 0308 	add.w	r3, r7, #8
 800f226:	4618      	mov	r0, r3
 800f228:	f7f9 ffe0 	bl	80091ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 800f22c:	68f9      	ldr	r1, [r7, #12]
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	f000 f8db 	bl	800f3ea <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	4618      	mov	r0, r3
 800f238:	3710      	adds	r7, #16
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}

0800f23e <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800f23e:	b480      	push	{r7}
 800f240:	b083      	sub	sp, #12
 800f242:	af00      	add	r7, sp, #0
 800f244:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800f246:	687b      	ldr	r3, [r7, #4]
}
 800f248:	4618      	mov	r0, r3
 800f24a:	370c      	adds	r7, #12
 800f24c:	46bd      	mov	sp, r7
 800f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f252:	4770      	bx	lr

0800f254 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800f254:	b580      	push	{r7, lr}
 800f256:	b082      	sub	sp, #8
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800f25e:	2301      	movs	r3, #1
 800f260:	220c      	movs	r2, #12
 800f262:	6839      	ldr	r1, [r7, #0]
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f7f3 fa3b 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	3708      	adds	r7, #8
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}

0800f272 <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800f272:	b480      	push	{r7}
 800f274:	b083      	sub	sp, #12
 800f276:	af00      	add	r7, sp, #0
 800f278:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800f27a:	687b      	ldr	r3, [r7, #4]
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	370c      	adds	r7, #12
 800f280:	46bd      	mov	sp, r7
 800f282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f286:	4770      	bx	lr

0800f288 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800f292:	2301      	movs	r3, #1
 800f294:	2208      	movs	r2, #8
 800f296:	6839      	ldr	r1, [r7, #0]
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f7f3 fa21 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	3708      	adds	r7, #8
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}

0800f2a6 <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800f2a6:	b480      	push	{r7}
 800f2a8:	b083      	sub	sp, #12
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800f2ae:	687b      	ldr	r3, [r7, #4]
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	370c      	adds	r7, #12
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ba:	4770      	bx	lr

0800f2bc <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	220d      	movs	r2, #13
 800f2ca:	6839      	ldr	r1, [r7, #0]
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f7f3 fa07 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	3708      	adds	r7, #8
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}

0800f2da <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800f2da:	b590      	push	{r4, r7, lr}
 800f2dc:	b083      	sub	sp, #12
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6078      	str	r0, [r7, #4]
 800f2e2:	6039      	str	r1, [r7, #0]
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f000 f88a 	bl	800f400 <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800f2ec:	683c      	ldr	r4, [r7, #0]
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f7ff fef9 	bl	800f0e6 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	601c      	str	r4, [r3, #0]
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	370c      	adds	r7, #12
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd90      	pop	{r4, r7, pc}

0800f302 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800f302:	b580      	push	{r7, lr}
 800f304:	b082      	sub	sp, #8
 800f306:	af00      	add	r7, sp, #0
 800f308:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	4618      	mov	r0, r3
 800f30e:	f000 f884 	bl	800f41a <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800f312:	4603      	mov	r3, r0
 800f314:	4618      	mov	r0, r3
 800f316:	3708      	adds	r7, #8
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	4618      	mov	r0, r3
 800f328:	f000 f883 	bl	800f432 <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800f32c:	4603      	mov	r3, r0
 800f32e:	4618      	mov	r0, r3
 800f330:	3708      	adds	r7, #8
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}

0800f336 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800f336:	b580      	push	{r7, lr}
 800f338:	b082      	sub	sp, #8
 800f33a:	af00      	add	r7, sp, #0
 800f33c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	4618      	mov	r0, r3
 800f342:	f000 f882 	bl	800f44a <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 800f346:	4603      	mov	r3, r0
 800f348:	4618      	mov	r0, r3
 800f34a:	3708      	adds	r7, #8
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <_ZSt12__to_addressI7StepgenEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 800f350:	b480      	push	{r7}
 800f352:	b083      	sub	sp, #12
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
      return __ptr;
 800f358:	687b      	ldr	r3, [r7, #4]
    }
 800f35a:	4618      	mov	r0, r3
 800f35c:	370c      	adds	r7, #12
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr

0800f366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 800f366:	b580      	push	{r7, lr}
 800f368:	b086      	sub	sp, #24
 800f36a:	af00      	add	r7, sp, #0
 800f36c:	6078      	str	r0, [r7, #4]
 800f36e:	6039      	str	r1, [r7, #0]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2200      	movs	r2, #0
 800f374:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 800f376:	6838      	ldr	r0, [r7, #0]
 800f378:	f7ff ffdd 	bl	800f336 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 800f37c:	4603      	mov	r3, r0
 800f37e:	2b00      	cmp	r3, #0
 800f380:	bf0c      	ite	eq
 800f382:	2301      	moveq	r3, #1
 800f384:	2300      	movne	r3, #0
 800f386:	b2db      	uxtb	r3, r3
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d128      	bne.n	800f3de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 800f38c:	f107 030c 	add.w	r3, r7, #12
 800f390:	4618      	mov	r0, r3
 800f392:	f000 f868 	bl	800f466 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 800f396:	f107 030c 	add.w	r3, r7, #12
 800f39a:	2101      	movs	r1, #1
 800f39c:	4618      	mov	r0, r3
 800f39e:	f000 f87a 	bl	800f496 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 800f3a2:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800f3a4:	6838      	ldr	r0, [r7, #0]
 800f3a6:	f000 f885 	bl	800f4b4 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 800f3ae:	6838      	ldr	r0, [r7, #0]
 800f3b0:	f7ff fea6 	bl	800f100 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 800f3b4:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f000 f889 	bl	800f4ce <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	f107 0210 	add.w	r2, r7, #16
 800f3c2:	f107 000c 	add.w	r0, r7, #12
 800f3c6:	6979      	ldr	r1, [r7, #20]
 800f3c8:	f000 f88c 	bl	800f4e4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	697a      	ldr	r2, [r7, #20]
 800f3d0:	601a      	str	r2, [r3, #0]
	}
 800f3d2:	f107 030c 	add.w	r3, r7, #12
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f000 f851 	bl	800f47e <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800f3dc:	e000      	b.n	800f3e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 800f3de:	bf00      	nop
	}
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3718      	adds	r7, #24
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}

0800f3ea <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800f3ea:	b480      	push	{r7}
 800f3ec:	b083      	sub	sp, #12
 800f3ee:	af00      	add	r7, sp, #0
 800f3f0:	6078      	str	r0, [r7, #4]
 800f3f2:	6039      	str	r1, [r7, #0]
	{ }
 800f3f4:	bf00      	nop
 800f3f6:	370c      	adds	r7, #12
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fe:	4770      	bx	lr

0800f400 <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800f400:	b580      	push	{r7, lr}
 800f402:	b082      	sub	sp, #8
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	4618      	mov	r0, r3
 800f40c:	f000 f882 	bl	800f514 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	4618      	mov	r0, r3
 800f414:	3708      	adds	r7, #8
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}

0800f41a <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800f41a:	b580      	push	{r7, lr}
 800f41c:	b082      	sub	sp, #8
 800f41e:	af00      	add	r7, sp, #0
 800f420:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f000 f886 	bl	800f534 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>
 800f428:	4603      	mov	r3, r0
 800f42a:	4618      	mov	r0, r3
 800f42c:	3708      	adds	r7, #8
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}

0800f432 <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800f432:	b580      	push	{r7, lr}
 800f434:	b082      	sub	sp, #8
 800f436:	af00      	add	r7, sp, #0
 800f438:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f000 f887 	bl	800f54e <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800f440:	4603      	mov	r3, r0
 800f442:	4618      	mov	r0, r3
 800f444:	3708      	adds	r7, #8
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}

0800f44a <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800f44a:	b580      	push	{r7, lr}
 800f44c:	b082      	sub	sp, #8
 800f44e:	af00      	add	r7, sp, #0
 800f450:	6078      	str	r0, [r7, #4]
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	4618      	mov	r0, r3
 800f456:	f000 f886 	bl	800f566 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800f45a:	4603      	mov	r3, r0
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	4618      	mov	r0, r3
 800f460:	3708      	adds	r7, #8
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}

0800f466 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800f466:	b580      	push	{r7, lr}
 800f468:	b082      	sub	sp, #8
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	6078      	str	r0, [r7, #4]
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f000 f886 	bl	800f580 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	4618      	mov	r0, r3
 800f478:	3708      	adds	r7, #8
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}

0800f47e <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800f47e:	b580      	push	{r7, lr}
 800f480:	b082      	sub	sp, #8
 800f482:	af00      	add	r7, sp, #0
 800f484:	6078      	str	r0, [r7, #4]
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f000 f885 	bl	800f596 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	4618      	mov	r0, r3
 800f490:	3708      	adds	r7, #8
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}

0800f496 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800f496:	b580      	push	{r7, lr}
 800f498:	b082      	sub	sp, #8
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	6078      	str	r0, [r7, #4]
 800f49e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	6839      	ldr	r1, [r7, #0]
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f000 f881 	bl	800f5ac <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3708      	adds	r7, #8
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}

0800f4b4 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f000 f89e 	bl	800f600 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3708      	adds	r7, #8
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}

0800f4ce <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f4ce:	b480      	push	{r7}
 800f4d0:	b083      	sub	sp, #12
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	370c      	adds	r7, #12
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e2:	4770      	bx	lr

0800f4e4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800f4e4:	b590      	push	{r4, r7, lr}
 800f4e6:	b085      	sub	sp, #20
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	60f8      	str	r0, [r7, #12]
 800f4ec:	60b9      	str	r1, [r7, #8]
 800f4ee:	607a      	str	r2, [r7, #4]
 800f4f0:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f000 f899 	bl	800f62a <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 800f4f8:	4604      	mov	r4, r0
 800f4fa:	6838      	ldr	r0, [r7, #0]
 800f4fc:	f7ff ffe7 	bl	800f4ce <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 800f500:	4603      	mov	r3, r0
 800f502:	4622      	mov	r2, r4
 800f504:	68b9      	ldr	r1, [r7, #8]
 800f506:	68f8      	ldr	r0, [r7, #12]
 800f508:	f000 f89a 	bl	800f640 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 800f50c:	bf00      	nop
 800f50e:	3714      	adds	r7, #20
 800f510:	46bd      	mov	sp, r7
 800f512:	bd90      	pop	{r4, r7, pc}

0800f514 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f000 f8ad 	bl	800f67c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	4618      	mov	r0, r3
 800f526:	f000 f8b5 	bl	800f694 <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	4618      	mov	r0, r3
 800f52e:	3708      	adds	r7, #8
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	4618      	mov	r0, r3
 800f540:	f000 f8b6 	bl	800f6b0 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>
 800f544:	4603      	mov	r3, r0
 800f546:	4618      	mov	r0, r3
 800f548:	3708      	adds	r7, #8
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}

0800f54e <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800f54e:	b580      	push	{r7, lr}
 800f550:	b082      	sub	sp, #8
 800f552:	af00      	add	r7, sp, #0
 800f554:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	f000 f8b5 	bl	800f6c6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>
 800f55c:	4603      	mov	r3, r0
 800f55e:	4618      	mov	r0, r3
 800f560:	3708      	adds	r7, #8
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}

0800f566 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800f566:	b580      	push	{r7, lr}
 800f568:	b082      	sub	sp, #8
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	4618      	mov	r0, r3
 800f572:	f000 f8b4 	bl	800f6de <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800f576:	4603      	mov	r3, r0
 800f578:	4618      	mov	r0, r3
 800f57a:	3708      	adds	r7, #8
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}

0800f580 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800f580:	b480      	push	{r7}
 800f582:	b083      	sub	sp, #12
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	4618      	mov	r0, r3
 800f58c:	370c      	adds	r7, #12
 800f58e:	46bd      	mov	sp, r7
 800f590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f594:	4770      	bx	lr

0800f596 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800f596:	b480      	push	{r7}
 800f598:	b083      	sub	sp, #12
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	6078      	str	r0, [r7, #4]
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	370c      	adds	r7, #12
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr

0800f5ac <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b084      	sub	sp, #16
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	60b9      	str	r1, [r7, #8]
 800f5b6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800f5b8:	68f8      	ldr	r0, [r7, #12]
 800f5ba:	f000 f89c 	bl	800f6f6 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800f5be:	4602      	mov	r2, r0
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	bf8c      	ite	hi
 800f5c6:	2301      	movhi	r3, #1
 800f5c8:	2300      	movls	r3, #0
 800f5ca:	b2db      	uxtb	r3, r3
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	bf14      	ite	ne
 800f5d0:	2301      	movne	r3, #1
 800f5d2:	2300      	moveq	r3, #0
 800f5d4:	b2db      	uxtb	r3, r3
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d007      	beq.n	800f5ea <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f5e0:	d301      	bcc.n	800f5e6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800f5e2:	f00d ff5f 	bl	801d4a4 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800f5e6:	f00d ff5a 	bl	801d49e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	011b      	lsls	r3, r3, #4
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f00d ff42 	bl	801d478 <_Znwj>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	bf00      	nop
      }
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3710      	adds	r7, #16
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800f600:	b580      	push	{r7, lr}
 800f602:	b084      	sub	sp, #16
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f7ff fd6c 	bl	800f0e6 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 800f60e:	4603      	mov	r3, r0
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f7ff fd66 	bl	800f0e6 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 800f61a:	4603      	mov	r3, r0
 800f61c:	2200      	movs	r2, #0
 800f61e:	601a      	str	r2, [r3, #0]
	return __p;
 800f620:	68fb      	ldr	r3, [r7, #12]
      }
 800f622:	4618      	mov	r0, r3
 800f624:	3710      	adds	r7, #16
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}

0800f62a <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f62a:	b480      	push	{r7}
 800f62c:	b083      	sub	sp, #12
 800f62e:	af00      	add	r7, sp, #0
 800f630:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	4618      	mov	r0, r3
 800f636:	370c      	adds	r7, #12
 800f638:	46bd      	mov	sp, r7
 800f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63e:	4770      	bx	lr

0800f640 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800f640:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f642:	b085      	sub	sp, #20
 800f644:	af00      	add	r7, sp, #0
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	60b9      	str	r1, [r7, #8]
 800f64a:	607a      	str	r2, [r7, #4]
 800f64c:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	4619      	mov	r1, r3
 800f652:	2010      	movs	r0, #16
 800f654:	f7f8 fc16 	bl	8007e84 <_ZnwjPv>
 800f658:	4605      	mov	r5, r0
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f7ff ffe5 	bl	800f62a <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 800f660:	4603      	mov	r3, r0
 800f662:	681c      	ldr	r4, [r3, #0]
 800f664:	6838      	ldr	r0, [r7, #0]
 800f666:	f7ff ff32 	bl	800f4ce <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 800f66a:	4632      	mov	r2, r6
 800f66c:	4621      	mov	r1, r4
 800f66e:	4628      	mov	r0, r5
 800f670:	f000 f84e 	bl	800f710 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 800f674:	bf00      	nop
 800f676:	3714      	adds	r7, #20
 800f678:	46bd      	mov	sp, r7
 800f67a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f67c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>:
      _Tuple_impl()
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b082      	sub	sp, #8
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f000 f865 	bl	800f754 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	4618      	mov	r0, r3
 800f68e:	3708      	adds	r7, #8
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>:
      constexpr _Head_base()
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	601a      	str	r2, [r3, #0]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	370c      	adds	r7, #12
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr

0800f6b0 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800f6b0:	b480      	push	{r7}
 800f6b2:	b083      	sub	sp, #12
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	370c      	adds	r7, #12
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c4:	4770      	bx	lr

0800f6c6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f6c6:	b580      	push	{r7, lr}
 800f6c8:	b082      	sub	sp, #8
 800f6ca:	af00      	add	r7, sp, #0
 800f6cc:	6078      	str	r0, [r7, #4]
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f000 f84b 	bl	800f76a <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	3708      	adds	r7, #8
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}

0800f6de <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800f6de:	b580      	push	{r7, lr}
 800f6e0:	b082      	sub	sp, #8
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f000 f84a 	bl	800f780 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3708      	adds	r7, #8
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}

0800f6f6 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800f6f6:	b480      	push	{r7}
 800f6f8:	b083      	sub	sp, #12
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800f6fe:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 800f702:	4618      	mov	r0, r3
 800f704:	370c      	adds	r7, #12
 800f706:	46bd      	mov	sp, r7
 800f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70c:	4770      	bx	lr
	...

0800f710 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 800f710:	b5b0      	push	{r4, r5, r7, lr}
 800f712:	b086      	sub	sp, #24
 800f714:	af00      	add	r7, sp, #0
 800f716:	60f8      	str	r0, [r7, #12]
 800f718:	60b9      	str	r1, [r7, #8]
 800f71a:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	4618      	mov	r0, r3
 800f720:	f7fb fc14 	bl	800af4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800f724:	4a0a      	ldr	r2, [pc, #40]	@ (800f750 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	601a      	str	r2, [r3, #0]
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	f103 040c 	add.w	r4, r3, #12
 800f730:	1d3b      	adds	r3, r7, #4
 800f732:	4618      	mov	r0, r3
 800f734:	f000 f831 	bl	800f79a <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 800f738:	f107 0314 	add.w	r3, r7, #20
 800f73c:	462a      	mov	r2, r5
 800f73e:	68b9      	ldr	r1, [r7, #8]
 800f740:	4620      	mov	r0, r4
 800f742:	f000 f835 	bl	800f7b0 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	4618      	mov	r0, r3
 800f74a:	3718      	adds	r7, #24
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bdb0      	pop	{r4, r5, r7, pc}
 800f750:	0801f6e8 	.word	0x0801f6e8

0800f754 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>:
      constexpr _Head_base()
 800f754:	b480      	push	{r7}
 800f756:	b083      	sub	sp, #12
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	4618      	mov	r0, r3
 800f760:	370c      	adds	r7, #12
 800f762:	46bd      	mov	sp, r7
 800f764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f768:	4770      	bx	lr

0800f76a <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800f76a:	b480      	push	{r7}
 800f76c:	b083      	sub	sp, #12
 800f76e:	af00      	add	r7, sp, #0
 800f770:	6078      	str	r0, [r7, #4]
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	4618      	mov	r0, r3
 800f776:	370c      	adds	r7, #12
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr

0800f780 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	4618      	mov	r0, r3
 800f78c:	f000 f82c 	bl	800f7e8 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>
 800f790:	4603      	mov	r3, r0
 800f792:	4618      	mov	r0, r3
 800f794:	3708      	adds	r7, #8
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}

0800f79a <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800f79a:	b480      	push	{r7}
 800f79c:	b083      	sub	sp, #12
 800f79e:	af00      	add	r7, sp, #0
 800f7a0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	370c      	adds	r7, #12
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ae:	4770      	bx	lr

0800f7b0 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	60f8      	str	r0, [r7, #12]
 800f7b8:	60b9      	str	r1, [r7, #8]
 800f7ba:	713a      	strb	r2, [r7, #4]
 800f7bc:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 800f7be:	1d3b      	adds	r3, r7, #4
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f7ff ffea 	bl	800f79a <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	4619      	mov	r1, r3
 800f7ca:	68f8      	ldr	r0, [r7, #12]
 800f7cc:	f000 f817 	bl	800f7fe <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>
 800f7d0:	6839      	ldr	r1, [r7, #0]
 800f7d2:	68f8      	ldr	r0, [r7, #12]
 800f7d4:	f7fd fc2e 	bl	800d034 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	68ba      	ldr	r2, [r7, #8]
 800f7dc:	601a      	str	r2, [r3, #0]
	{ }
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3710      	adds	r7, #16
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}

0800f7e8 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800f7e8:	b480      	push	{r7}
 800f7ea:	b083      	sub	sp, #12
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	370c      	adds	r7, #12
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fc:	4770      	bx	lr

0800f7fe <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 800f7fe:	b580      	push	{r7, lr}
 800f800:	b082      	sub	sp, #8
 800f802:	af00      	add	r7, sp, #0
 800f804:	6078      	str	r0, [r7, #4]
 800f806:	6039      	str	r1, [r7, #0]
 800f808:	6838      	ldr	r0, [r7, #0]
 800f80a:	f7ff ffc6 	bl	800f79a <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4618      	mov	r0, r3
 800f812:	3708      	adds	r7, #8
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}

0800f818 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800f818:	b580      	push	{r7, lr}
 800f81a:	b082      	sub	sp, #8
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	4a05      	ldr	r2, [pc, #20]	@ (800f838 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	601a      	str	r2, [r3, #0]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	4618      	mov	r0, r3
 800f82a:	f7f9 ff99 	bl	8009760 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4618      	mov	r0, r3
 800f832:	3708      	adds	r7, #8
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}
 800f838:	0801f6e8 	.word	0x0801f6e8

0800f83c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b082      	sub	sp, #8
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f7ff ffe7 	bl	800f818 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800f84a:	2110      	movs	r1, #16
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f00d fe02 	bl	801d456 <_ZdlPvj>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	4618      	mov	r0, r3
 800f856:	3708      	adds	r7, #8
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	330c      	adds	r3, #12
 800f868:	4618      	mov	r0, r3
 800f86a:	f000 f83f 	bl	800f8ec <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 800f86e:	4602      	mov	r2, r0
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	68db      	ldr	r3, [r3, #12]
 800f874:	4619      	mov	r1, r3
 800f876:	4610      	mov	r0, r2
 800f878:	f7ff fc8d 	bl	800f196 <_ZNKSt14default_deleteI7StepgenEclEPS0_>
 800f87c:	bf00      	nop
 800f87e:	3708      	adds	r7, #8
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800f884:	b580      	push	{r7, lr}
 800f886:	b086      	sub	sp, #24
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	330c      	adds	r3, #12
 800f890:	4618      	mov	r0, r3
 800f892:	f000 f837 	bl	800f904 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800f896:	4602      	mov	r2, r0
 800f898:	f107 0314 	add.w	r3, r7, #20
 800f89c:	4611      	mov	r1, r2
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f000 f83c 	bl	800f91c <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800f8a4:	f107 0114 	add.w	r1, r7, #20
 800f8a8:	f107 030c 	add.w	r3, r7, #12
 800f8ac:	687a      	ldr	r2, [r7, #4]
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f000 f841 	bl	800f936 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f7ff ffaf 	bl	800f818 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800f8ba:	f107 030c 	add.w	r3, r7, #12
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f000 f84d 	bl	800f95e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800f8c4:	f107 0314 	add.w	r3, r7, #20
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7ff fdd8 	bl	800f47e <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800f8ce:	3718      	adds	r7, #24
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}

0800f8d4 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 800f8d4:	b480      	push	{r7}
 800f8d6:	b083      	sub	sp, #12
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	6039      	str	r1, [r7, #0]
        return nullptr;
 800f8de:	2300      	movs	r3, #0
      }
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	370c      	adds	r7, #12
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr

0800f8ec <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b082      	sub	sp, #8
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f000 f847 	bl	800f988 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3708      	adds	r7, #8
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f7fd fc60 	bl	800d1d2 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 800f912:	4603      	mov	r3, r0
 800f914:	4618      	mov	r0, r3
 800f916:	3708      	adds	r7, #8
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	6039      	str	r1, [r7, #0]
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f7ff fe2a 	bl	800f580 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4618      	mov	r0, r3
 800f930:	3708      	adds	r7, #8
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}

0800f936 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800f936:	b580      	push	{r7, lr}
 800f938:	b084      	sub	sp, #16
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	60f8      	str	r0, [r7, #12]
 800f93e:	60b9      	str	r1, [r7, #8]
 800f940:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800f942:	68b8      	ldr	r0, [r7, #8]
 800f944:	f000 f82b 	bl	800f99e <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 800f948:	4602      	mov	r2, r0
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	601a      	str	r2, [r3, #0]
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	687a      	ldr	r2, [r7, #4]
 800f952:	605a      	str	r2, [r3, #4]
      { }
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	4618      	mov	r0, r3
 800f958:	3710      	adds	r7, #16
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800f95e:	b580      	push	{r7, lr}
 800f960:	b082      	sub	sp, #8
 800f962:	af00      	add	r7, sp, #0
 800f964:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	685b      	ldr	r3, [r3, #4]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d007      	beq.n	800f97e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6818      	ldr	r0, [r3, #0]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	2201      	movs	r2, #1
 800f978:	4619      	mov	r1, r3
 800f97a:	f000 f81b 	bl	800f9b4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	4618      	mov	r0, r3
 800f982:	3708      	adds	r7, #8
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800f988:	b480      	push	{r7}
 800f98a:	b083      	sub	sp, #12
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	4618      	mov	r0, r3
 800f994:	370c      	adds	r7, #12
 800f996:	46bd      	mov	sp, r7
 800f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99c:	4770      	bx	lr

0800f99e <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800f99e:	b480      	push	{r7}
 800f9a0:	b083      	sub	sp, #12
 800f9a2:	af00      	add	r7, sp, #0
 800f9a4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	370c      	adds	r7, #12
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr

0800f9b4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	60f8      	str	r0, [r7, #12]
 800f9bc:	60b9      	str	r1, [r7, #8]
 800f9be:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800f9c0:	687a      	ldr	r2, [r7, #4]
 800f9c2:	68b9      	ldr	r1, [r7, #8]
 800f9c4:	68f8      	ldr	r0, [r7, #12]
 800f9c6:	f000 f804 	bl	800f9d2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 800f9ca:	bf00      	nop
 800f9cc:	3710      	adds	r7, #16
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	b084      	sub	sp, #16
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	60f8      	str	r0, [r7, #12]
 800f9da:	60b9      	str	r1, [r7, #8]
 800f9dc:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	011b      	lsls	r3, r3, #4
 800f9e2:	4619      	mov	r1, r3
 800f9e4:	68b8      	ldr	r0, [r7, #8]
 800f9e6:	f00d fd36 	bl	801d456 <_ZdlPvj>
      }
 800f9ea:	3710      	adds	r7, #16
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <__NVIC_SetPriority>:
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b083      	sub	sp, #12
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	6039      	str	r1, [r7, #0]
 800f9fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800f9fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	db0a      	blt.n	800fa1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	b2da      	uxtb	r2, r3
 800fa08:	490c      	ldr	r1, [pc, #48]	@ (800fa3c <__NVIC_SetPriority+0x4c>)
 800fa0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fa0e:	0112      	lsls	r2, r2, #4
 800fa10:	b2d2      	uxtb	r2, r2
 800fa12:	440b      	add	r3, r1
 800fa14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800fa18:	e00a      	b.n	800fa30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	b2da      	uxtb	r2, r3
 800fa1e:	4908      	ldr	r1, [pc, #32]	@ (800fa40 <__NVIC_SetPriority+0x50>)
 800fa20:	88fb      	ldrh	r3, [r7, #6]
 800fa22:	f003 030f 	and.w	r3, r3, #15
 800fa26:	3b04      	subs	r3, #4
 800fa28:	0112      	lsls	r2, r2, #4
 800fa2a:	b2d2      	uxtb	r2, r2
 800fa2c:	440b      	add	r3, r1
 800fa2e:	761a      	strb	r2, [r3, #24]
}
 800fa30:	bf00      	nop
 800fa32:	370c      	adds	r7, #12
 800fa34:	46bd      	mov	sp, r7
 800fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3a:	4770      	bx	lr
 800fa3c:	e000e100 	.word	0xe000e100
 800fa40:	e000ed00 	.word	0xe000ed00

0800fa44 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 800fa44:	b480      	push	{r7}
 800fa46:	b083      	sub	sp, #12
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	6039      	str	r1, [r7, #0]
 800fa4e:	71fb      	strb	r3, [r7, #7]
    return memory_order(int(__m) & int(__mod));
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	b25a      	sxtb	r2, r3
 800fa54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fa58:	4013      	ands	r3, r2
 800fa5a:	b25b      	sxtb	r3, r3
 800fa5c:	b2db      	uxtb	r3, r3
  }
 800fa5e:	4618      	mov	r0, r3
 800fa60:	370c      	adds	r7, #12
 800fa62:	46bd      	mov	sp, r7
 800fa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa68:	4770      	bx	lr

0800fa6a <_ZNSt6atomicIbEC1Eb>:
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }
 800fa6a:	b580      	push	{r7, lr}
 800fa6c:	b082      	sub	sp, #8
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	6078      	str	r0, [r7, #4]
 800fa72:	460b      	mov	r3, r1
 800fa74:	70fb      	strb	r3, [r7, #3]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	78fa      	ldrb	r2, [r7, #3]
 800fa7a:	4611      	mov	r1, r2
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f000 fa2e 	bl	800fede <_ZNSt13__atomic_baseIbEC1Eb>
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	4618      	mov	r0, r3
 800fa86:	3708      	adds	r7, #8
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}

0800fa8c <_ZNSt6atomicIbE5storeEbSt12memory_order>:
#if __cplusplus >= 201703L
    static constexpr bool is_always_lock_free = ATOMIC_BOOL_LOCK_FREE == 2;
#endif

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b084      	sub	sp, #16
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
 800fa94:	460b      	mov	r3, r1
 800fa96:	70fb      	strb	r3, [r7, #3]
 800fa98:	4613      	mov	r3, r2
 800fa9a:	70bb      	strb	r3, [r7, #2]
    { _M_base.store(__i, __m); }
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	60fb      	str	r3, [r7, #12]
 800faa0:	78fb      	ldrb	r3, [r7, #3]
 800faa2:	72fb      	strb	r3, [r7, #11]
 800faa4:	78bb      	ldrb	r3, [r7, #2]
 800faa6:	72bb      	strb	r3, [r7, #10]

      _GLIBCXX_ALWAYS_INLINE void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 800faa8:	7abb      	ldrb	r3, [r7, #10]
 800faaa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800faae:	4618      	mov	r0, r3
 800fab0:	f7ff ffc8 	bl	800fa44 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 800fab4:	4603      	mov	r3, r0
 800fab6:	727b      	strb	r3, [r7, #9]
	__glibcxx_assert(__b != memory_order_acquire);
 800fab8:	f7f2 fd4a 	bl	8002550 <_ZSt23__is_constant_evaluatedv>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d004      	beq.n	800facc <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 800fac2:	7a7b      	ldrb	r3, [r7, #9]
 800fac4:	2b02      	cmp	r3, #2
 800fac6:	d101      	bne.n	800facc <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 800fac8:	2301      	movs	r3, #1
 800faca:	e000      	b.n	800face <_ZNSt6atomicIbE5storeEbSt12memory_order+0x42>
 800facc:	2300      	movs	r3, #0
 800face:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 800fad0:	f7f2 fd3e 	bl	8002550 <_ZSt23__is_constant_evaluatedv>
 800fad4:	4603      	mov	r3, r0
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d004      	beq.n	800fae4 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 800fada:	7a7b      	ldrb	r3, [r7, #9]
 800fadc:	2b04      	cmp	r3, #4
 800fade:	d101      	bne.n	800fae4 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 800fae0:	2301      	movs	r3, #1
 800fae2:	e000      	b.n	800fae6 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x5a>
 800fae4:	2300      	movs	r3, #0
 800fae6:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_consume);
 800fae8:	f7f2 fd32 	bl	8002550 <_ZSt23__is_constant_evaluatedv>
 800faec:	4603      	mov	r3, r0
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d004      	beq.n	800fafc <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 800faf2:	7a7b      	ldrb	r3, [r7, #9]
 800faf4:	2b01      	cmp	r3, #1
 800faf6:	d101      	bne.n	800fafc <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 800faf8:	2301      	movs	r3, #1
 800fafa:	e000      	b.n	800fafe <_ZNSt6atomicIbE5storeEbSt12memory_order+0x72>
 800fafc:	2300      	movs	r3, #0
 800fafe:	2b00      	cmp	r3, #0

	__atomic_store_n(&_M_i, __i, int(__m));
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	7afa      	ldrb	r2, [r7, #11]
 800fb04:	f3bf 8f5b 	dmb	ish
 800fb08:	701a      	strb	r2, [r3, #0]
 800fb0a:	f3bf 8f5b 	dmb	ish
      }
 800fb0e:	bf00      	nop
 800fb10:	bf00      	nop
 800fb12:	3710      	adds	r7, #16
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <_ZNKSt6atomicIbE4loadESt12memory_order>:
    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
    { _M_base.store(__i, __m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b084      	sub	sp, #16
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	460b      	mov	r3, r1
 800fb22:	70fb      	strb	r3, [r7, #3]
    { return _M_base.load(__m); }
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	60fb      	str	r3, [r7, #12]
 800fb28:	78fb      	ldrb	r3, [r7, #3]
 800fb2a:	72fb      	strb	r3, [r7, #11]

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 800fb2c:	7afb      	ldrb	r3, [r7, #11]
 800fb2e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7ff ff86 	bl	800fa44 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	72bb      	strb	r3, [r7, #10]
	__glibcxx_assert(__b != memory_order_release);
 800fb3c:	f7f2 fd08 	bl	8002550 <_ZSt23__is_constant_evaluatedv>
 800fb40:	4603      	mov	r3, r0
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d004      	beq.n	800fb50 <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 800fb46:	7abb      	ldrb	r3, [r7, #10]
 800fb48:	2b03      	cmp	r3, #3
 800fb4a:	d101      	bne.n	800fb50 <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	e000      	b.n	800fb52 <_ZNKSt6atomicIbE4loadESt12memory_order+0x3a>
 800fb50:	2300      	movs	r3, #0
 800fb52:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 800fb54:	f7f2 fcfc 	bl	8002550 <_ZSt23__is_constant_evaluatedv>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d004      	beq.n	800fb68 <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 800fb5e:	7abb      	ldrb	r3, [r7, #10]
 800fb60:	2b04      	cmp	r3, #4
 800fb62:	d101      	bne.n	800fb68 <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 800fb64:	2301      	movs	r3, #1
 800fb66:	e000      	b.n	800fb6a <_ZNKSt6atomicIbE4loadESt12memory_order+0x52>
 800fb68:	2300      	movs	r3, #0
 800fb6a:	2b00      	cmp	r3, #0

	return __atomic_load_n(&_M_i, int(__m));
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	f3bf 8f5b 	dmb	ish
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	f3bf 8f5b 	dmb	ish
 800fb78:	b2db      	uxtb	r3, r3
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	bf14      	ite	ne
 800fb7e:	2301      	movne	r3, #1
 800fb80:	2300      	moveq	r3, #0
 800fb82:	b2db      	uxtb	r3, r3
 800fb84:	4618      	mov	r0, r3
 800fb86:	3710      	adds	r7, #16
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <_ZN9pruThread16setThreadRunningEb>:
    atomic<bool> threadPaused{false};

    vector<shared_ptr<Module>> modules;
    vector<shared_ptr<Module>> modulesPost;

    void setThreadRunning(bool val) { threadRunning.store(val, std::memory_order_release); }
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	460b      	mov	r3, r1
 800fb96:	70fb      	strb	r3, [r7, #3]
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	3329      	adds	r3, #41	@ 0x29
 800fb9c:	78f9      	ldrb	r1, [r7, #3]
 800fb9e:	2203      	movs	r2, #3
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7ff ff73 	bl	800fa8c <_ZNSt6atomicIbE5storeEbSt12memory_order>
 800fba6:	bf00      	nop
 800fba8:	3708      	adds	r7, #8
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}

0800fbae <_ZN9pruThread15setThreadPausedEb>:
    void setThreadPaused(bool val) { threadPaused.store(val, std::memory_order_release); }
 800fbae:	b580      	push	{r7, lr}
 800fbb0:	b082      	sub	sp, #8
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	6078      	str	r0, [r7, #4]
 800fbb6:	460b      	mov	r3, r1
 800fbb8:	70fb      	strb	r3, [r7, #3]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	332a      	adds	r3, #42	@ 0x2a
 800fbbe:	78f9      	ldrb	r1, [r7, #3]
 800fbc0:	2203      	movs	r2, #3
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7ff ff62 	bl	800fa8c <_ZNSt6atomicIbE5storeEbSt12memory_order>
 800fbc8:	bf00      	nop
 800fbca:	3708      	adds	r7, #8
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}

0800fbd0 <_ZNK9pruThread9isRunningEv>:
	pruThread(const string& _name, TIM_TypeDef *_timer, IRQn_Type _irq, uint32_t _freq, uint8_t _prio);

	bool registerModule(shared_ptr<Module> module);
	bool registerModulePost(shared_ptr<Module> module);

    [[nodiscard]] bool isRunning() const { return threadRunning.load(std::memory_order_acquire);  }
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b082      	sub	sp, #8
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	3329      	adds	r3, #41	@ 0x29
 800fbdc:	2102      	movs	r1, #2
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7ff ff9a 	bl	800fb18 <_ZNKSt6atomicIbE4loadESt12memory_order>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3708      	adds	r7, #8
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}

0800fbee <_ZNK9pruThread8isPausedEv>:
    [[nodiscard]] bool isPaused() const { return threadPaused.load(std::memory_order_acquire); }
 800fbee:	b580      	push	{r7, lr}
 800fbf0:	b082      	sub	sp, #8
 800fbf2:	af00      	add	r7, sp, #0
 800fbf4:	6078      	str	r0, [r7, #4]
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	332a      	adds	r3, #42	@ 0x2a
 800fbfa:	2102      	movs	r1, #2
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7ff ff8b 	bl	800fb18 <_ZNKSt6atomicIbE4loadESt12memory_order>
 800fc02:	4603      	mov	r3, r0
 800fc04:	4618      	mov	r0, r3
 800fc06:	3708      	adds	r7, #8
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}

0800fc0c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:
      _Vector_base() = default;
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b082      	sub	sp, #8
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	4618      	mov	r0, r3
 800fc18:	f000 f971 	bl	800fefe <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3708      	adds	r7, #8
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}

0800fc26 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:
      vector() = default;
 800fc26:	b580      	push	{r7, lr}
 800fc28:	b082      	sub	sp, #8
 800fc2a:	af00      	add	r7, sp, #0
 800fc2c:	6078      	str	r0, [r7, #4]
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	4618      	mov	r0, r3
 800fc32:	f7ff ffeb 	bl	800fc0c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3708      	adds	r7, #8
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}

0800fc40 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>:

#include "pruThread.h"
#include "../modules/module.h"


pruThread::pruThread(const string& _name, TIM_TypeDef *_timer, IRQn_Type _irq, uint32_t _freq, uint8_t _prio)
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b084      	sub	sp, #16
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	60b9      	str	r1, [r7, #8]
 800fc4a:	607a      	str	r2, [r7, #4]
 800fc4c:	807b      	strh	r3, [r7, #2]
    : threadName(_name),
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	68b9      	ldr	r1, [r7, #8]
 800fc52:	4618      	mov	r0, r3
 800fc54:	f00d fdbb 	bl	801d7ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      timer(_timer),
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	687a      	ldr	r2, [r7, #4]
 800fc5c:	619a      	str	r2, [r3, #24]
      irq(_irq),
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	887a      	ldrh	r2, [r7, #2]
 800fc62:	839a      	strh	r2, [r3, #28]
      frequency(_freq),
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	69ba      	ldr	r2, [r7, #24]
 800fc68:	621a      	str	r2, [r3, #32]
	  hasModulesPost(false)
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	3329      	adds	r3, #41	@ 0x29
 800fc76:	2100      	movs	r1, #0
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7ff fef6 	bl	800fa6a <_ZNSt6atomicIbEC1Eb>
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	332a      	adds	r3, #42	@ 0x2a
 800fc82:	2100      	movs	r1, #0
 800fc84:	4618      	mov	r0, r3
 800fc86:	f7ff fef0 	bl	800fa6a <_ZNSt6atomicIbEC1Eb>
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	332c      	adds	r3, #44	@ 0x2c
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7ff ffc9 	bl	800fc26 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	3338      	adds	r3, #56	@ 0x38
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f7ff ffc4 	bl	800fc26 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
{
	printf("Creating %s thread at %lu hz\n", threadName.c_str(), (unsigned long)frequency);
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	4618      	mov	r0, r3
 800fca2:	f00d fd75 	bl	801d790 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800fca6:	4601      	mov	r1, r0
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	6a1b      	ldr	r3, [r3, #32]
 800fcac:	461a      	mov	r2, r3
 800fcae:	4808      	ldr	r0, [pc, #32]	@ (800fcd0 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh+0x90>)
 800fcb0:	f00e f870 	bl	801dd94 <iprintf>
    NVIC_SetPriority(irq, _prio);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800fcba:	7f3a      	ldrb	r2, [r7, #28]
 800fcbc:	4611      	mov	r1, r2
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f7ff fe96 	bl	800f9f0 <__NVIC_SetPriority>
}
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3710      	adds	r7, #16
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}
 800fcce:	bf00      	nop
 800fcd0:	0801f394 	.word	0x0801f394

0800fcd4 <_ZN9pruThread14executeModulesEv>:


bool pruThread::executeModules() {
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b08a      	sub	sp, #40	@ 0x28
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
    for (const auto& module : modules) {
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	332c      	adds	r3, #44	@ 0x2c
 800fce0:	627b      	str	r3, [r7, #36]	@ 0x24
 800fce2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fce4:	f000 f91b 	bl	800ff1e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 800fce8:	4603      	mov	r3, r0
 800fcea:	617b      	str	r3, [r7, #20]
 800fcec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fcee:	f000 f926 	bl	800ff3e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	613b      	str	r3, [r7, #16]
 800fcf6:	e018      	b.n	800fd2a <_ZN9pruThread14executeModulesEv+0x56>
 800fcf8:	f107 0314 	add.w	r3, r7, #20
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f000 f958 	bl	800ffb2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 800fd02:	61b8      	str	r0, [r7, #24]
        if (module) {
 800fd04:	69bb      	ldr	r3, [r7, #24]
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7f9 fcf6 	bl	80096f8 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d006      	beq.n	800fd20 <_ZN9pruThread14executeModulesEv+0x4c>
            module->runModule();
 800fd12:	69b8      	ldr	r0, [r7, #24]
 800fd14:	f7f9 fd01 	bl	800971a <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7fd ff38 	bl	800db90 <_ZN6Module9runModuleEv>
    for (const auto& module : modules) {
 800fd20:	f107 0314 	add.w	r3, r7, #20
 800fd24:	4618      	mov	r0, r3
 800fd26:	f000 f933 	bl	800ff90 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 800fd2a:	f107 0210 	add.w	r2, r7, #16
 800fd2e:	f107 0314 	add.w	r3, r7, #20
 800fd32:	4611      	mov	r1, r2
 800fd34:	4618      	mov	r0, r3
 800fd36:	f000 f913 	bl	800ff60 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d1db      	bne.n	800fcf8 <_ZN9pruThread14executeModulesEv+0x24>
        }
    }

    if (hasModulesPost) {
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d031      	beq.n	800fdae <_ZN9pruThread14executeModulesEv+0xda>
		for (const auto& module : modulesPost) {
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	3338      	adds	r3, #56	@ 0x38
 800fd4e:	623b      	str	r3, [r7, #32]
 800fd50:	6a38      	ldr	r0, [r7, #32]
 800fd52:	f000 f8e4 	bl	800ff1e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 800fd56:	4603      	mov	r3, r0
 800fd58:	60fb      	str	r3, [r7, #12]
 800fd5a:	6a38      	ldr	r0, [r7, #32]
 800fd5c:	f000 f8ef 	bl	800ff3e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800fd60:	4603      	mov	r3, r0
 800fd62:	60bb      	str	r3, [r7, #8]
 800fd64:	e018      	b.n	800fd98 <_ZN9pruThread14executeModulesEv+0xc4>
 800fd66:	f107 030c 	add.w	r3, r7, #12
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f000 f921 	bl	800ffb2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 800fd70:	61f8      	str	r0, [r7, #28]
			if (module) {
 800fd72:	69fb      	ldr	r3, [r7, #28]
 800fd74:	4618      	mov	r0, r3
 800fd76:	f7f9 fcbf 	bl	80096f8 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d006      	beq.n	800fd8e <_ZN9pruThread14executeModulesEv+0xba>
				module->runModule();
 800fd80:	69f8      	ldr	r0, [r7, #28]
 800fd82:	f7f9 fcca 	bl	800971a <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800fd86:	4603      	mov	r3, r0
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f7fd ff01 	bl	800db90 <_ZN6Module9runModuleEv>
		for (const auto& module : modulesPost) {
 800fd8e:	f107 030c 	add.w	r3, r7, #12
 800fd92:	4618      	mov	r0, r3
 800fd94:	f000 f8fc 	bl	800ff90 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 800fd98:	f107 0208 	add.w	r2, r7, #8
 800fd9c:	f107 030c 	add.w	r3, r7, #12
 800fda0:	4611      	mov	r1, r2
 800fda2:	4618      	mov	r0, r3
 800fda4:	f000 f8dc 	bl	800ff60 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d1db      	bne.n	800fd66 <_ZN9pruThread14executeModulesEv+0x92>
			}
		}
    }

    return true;
 800fdae:	2301      	movs	r3, #1
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3728      	adds	r7, #40	@ 0x28
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>:

bool pruThread::registerModule(shared_ptr<Module> module) {
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b082      	sub	sp, #8
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	6039      	str	r1, [r7, #0]
    if (!module) {
 800fdc2:	683b      	ldr	r3, [r7, #0]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f7f9 fc97 	bl	80096f8 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	f083 0301 	eor.w	r3, r3, #1
 800fdd0:	b2db      	uxtb	r3, r3
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d001      	beq.n	800fdda <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x22>
        return false;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	e006      	b.n	800fde8 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x30>
    }
    modules.push_back(module);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	332c      	adds	r3, #44	@ 0x2c
 800fdde:	6839      	ldr	r1, [r7, #0]
 800fde0:	4618      	mov	r0, r3
 800fde2:	f000 f8f2 	bl	800ffca <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 800fde6:	2301      	movs	r3, #1
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3708      	adds	r7, #8
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bd80      	pop	{r7, pc}

0800fdf0 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>:

bool pruThread::registerModulePost(shared_ptr<Module> module) {
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b082      	sub	sp, #8
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
 800fdf8:	6039      	str	r1, [r7, #0]
    if (!module) {
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f7f9 fc7b 	bl	80096f8 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800fe02:	4603      	mov	r3, r0
 800fe04:	f083 0301 	eor.w	r3, r3, #1
 800fe08:	b2db      	uxtb	r3, r3
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d001      	beq.n	800fe12 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x22>
        return false;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	e00a      	b.n	800fe28 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x38>
    }
    hasModulesPost = true;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	2201      	movs	r2, #1
 800fe16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    modulesPost.push_back(module);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	3338      	adds	r3, #56	@ 0x38
 800fe1e:	6839      	ldr	r1, [r7, #0]
 800fe20:	4618      	mov	r0, r3
 800fe22:	f000 f8d2 	bl	800ffca <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 800fe26:	2301      	movs	r3, #1
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3708      	adds	r7, #8
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}

0800fe30 <_ZN9pruThread11startThreadEv>:

// For baremetal, this is just initialization
bool pruThread::startThread() {
 800fe30:	b590      	push	{r4, r7, lr}
 800fe32:	b085      	sub	sp, #20
 800fe34:	af02      	add	r7, sp, #8
 800fe36:	6078      	str	r0, [r7, #4]
    if (isRunning()) {
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f7ff fec9 	bl	800fbd0 <_ZNK9pruThread9isRunningEv>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d001      	beq.n	800fe48 <_ZN9pruThread11startThreadEv+0x18>
        return true;
 800fe44:	2301      	movs	r3, #1
 800fe46:	e01c      	b.n	800fe82 <_ZN9pruThread11startThreadEv+0x52>
    }

    setThreadRunning(true);
 800fe48:	2101      	movs	r1, #1
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f7ff fe9e 	bl	800fb8c <_ZN9pruThread16setThreadRunningEb>
    setThreadPaused(false);
 800fe50:	2100      	movs	r1, #0
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f7ff feab 	bl	800fbae <_ZN9pruThread15setThreadPausedEb>

    timerPtr = new pruTimer(timer, irq, frequency, this);
 800fe58:	2014      	movs	r0, #20
 800fe5a:	f00d fb0d 	bl	801d478 <_Znwj>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	461c      	mov	r4, r3
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6999      	ldr	r1, [r3, #24]
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6a18      	ldr	r0, [r3, #32]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	9300      	str	r3, [sp, #0]
 800fe74:	4603      	mov	r3, r0
 800fe76:	4620      	mov	r0, r4
 800fe78:	f000 fc26 	bl	80106c8 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	625c      	str	r4, [r3, #36]	@ 0x24
    return true;
 800fe80:	2301      	movs	r3, #1
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	370c      	adds	r7, #12
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd90      	pop	{r4, r7, pc}

0800fe8a <_ZN9pruThread6updateEv>:
    setThreadRunning(false);
    setThreadPaused(false);
}

// This is the main function that should be called periodically
bool pruThread::update() {
 800fe8a:	b580      	push	{r7, lr}
 800fe8c:	b082      	sub	sp, #8
 800fe8e:	af00      	add	r7, sp, #0
 800fe90:	6078      	str	r0, [r7, #4]
    if (!isRunning() || isPaused()) {
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f7ff fe9c 	bl	800fbd0 <_ZNK9pruThread9isRunningEv>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	f083 0301 	eor.w	r3, r3, #1
 800fe9e:	b2db      	uxtb	r3, r3
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d105      	bne.n	800feb0 <_ZN9pruThread6updateEv+0x26>
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f7ff fea2 	bl	800fbee <_ZNK9pruThread8isPausedEv>
 800feaa:	4603      	mov	r3, r0
 800feac:	2b00      	cmp	r3, #0
 800feae:	d001      	beq.n	800feb4 <_ZN9pruThread6updateEv+0x2a>
 800feb0:	2301      	movs	r3, #1
 800feb2:	e000      	b.n	800feb6 <_ZN9pruThread6updateEv+0x2c>
 800feb4:	2300      	movs	r3, #0
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d001      	beq.n	800febe <_ZN9pruThread6updateEv+0x34>
        return true;
 800feba:	2301      	movs	r3, #1
 800febc:	e00b      	b.n	800fed6 <_ZN9pruThread6updateEv+0x4c>
    }

    // Execute all modules
    if (!executeModules()) {
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f7ff ff08 	bl	800fcd4 <_ZN9pruThread14executeModulesEv>
 800fec4:	4603      	mov	r3, r0
 800fec6:	f083 0301 	eor.w	r3, r3, #1
 800feca:	b2db      	uxtb	r3, r3
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d001      	beq.n	800fed4 <_ZN9pruThread6updateEv+0x4a>
        return false;
 800fed0:	2300      	movs	r3, #0
 800fed2:	e000      	b.n	800fed6 <_ZN9pruThread6updateEv+0x4c>
    }

    return true;
 800fed4:	2301      	movs	r3, #1
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	3708      	adds	r7, #8
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}

0800fede <_ZNSt13__atomic_baseIbEC1Eb>:
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 800fede:	b480      	push	{r7}
 800fee0:	b083      	sub	sp, #12
 800fee2:	af00      	add	r7, sp, #0
 800fee4:	6078      	str	r0, [r7, #4]
 800fee6:	460b      	mov	r3, r1
 800fee8:	70fb      	strb	r3, [r7, #3]
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	78fa      	ldrb	r2, [r7, #3]
 800feee:	701a      	strb	r2, [r3, #0]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	4618      	mov	r0, r3
 800fef4:	370c      	adds	r7, #12
 800fef6:	46bd      	mov	sp, r7
 800fef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefc:	4770      	bx	lr

0800fefe <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800fefe:	b580      	push	{r7, lr}
 800ff00:	b082      	sub	sp, #8
 800ff02:	af00      	add	r7, sp, #0
 800ff04:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f000 f895 	bl	8010036 <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f000 f89d 	bl	801004e <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	4618      	mov	r0, r3
 800ff18:	3708      	adds	r7, #8
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}

0800ff1e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800ff1e:	b580      	push	{r7, lr}
 800ff20:	b084      	sub	sp, #16
 800ff22:	af00      	add	r7, sp, #0
 800ff24:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800ff26:	687a      	ldr	r2, [r7, #4]
 800ff28:	f107 030c 	add.w	r3, r7, #12
 800ff2c:	4611      	mov	r1, r2
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f000 f8a1 	bl	8010076 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	4618      	mov	r0, r3
 800ff38:	3710      	adds	r7, #16
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}

0800ff3e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 800ff3e:	b580      	push	{r7, lr}
 800ff40:	b084      	sub	sp, #16
 800ff42:	af00      	add	r7, sp, #0
 800ff44:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	1d1a      	adds	r2, r3, #4
 800ff4a:	f107 030c 	add.w	r3, r7, #12
 800ff4e:	4611      	mov	r1, r2
 800ff50:	4618      	mov	r0, r3
 800ff52:	f000 f890 	bl	8010076 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3710      	adds	r7, #16
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ff60:	b590      	push	{r4, r7, lr}
 800ff62:	b083      	sub	sp, #12
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f000 f893 	bl	8010096 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800ff70:	4603      	mov	r3, r0
 800ff72:	681c      	ldr	r4, [r3, #0]
 800ff74:	6838      	ldr	r0, [r7, #0]
 800ff76:	f000 f88e 	bl	8010096 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	429c      	cmp	r4, r3
 800ff80:	bf14      	ite	ne
 800ff82:	2301      	movne	r3, #1
 800ff84:	2300      	moveq	r3, #0
 800ff86:	b2db      	uxtb	r3, r3
 800ff88:	4618      	mov	r0, r3
 800ff8a:	370c      	adds	r7, #12
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd90      	pop	{r4, r7, pc}

0800ff90 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800ff90:	b480      	push	{r7}
 800ff92:	b083      	sub	sp, #12
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
	++_M_current;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	f103 0208 	add.w	r2, r3, #8
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	601a      	str	r2, [r3, #0]
	return *this;
 800ffa4:	687b      	ldr	r3, [r7, #4]
      }
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	370c      	adds	r7, #12
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb0:	4770      	bx	lr

0800ffb2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ffb2:	b480      	push	{r7}
 800ffb4:	b083      	sub	sp, #12
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	370c      	adds	r7, #12
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc8:	4770      	bx	lr

0800ffca <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 800ffca:	b580      	push	{r7, lr}
 800ffcc:	b082      	sub	sp, #8
 800ffce:	af00      	add	r7, sp, #0
 800ffd0:	6078      	str	r0, [r7, #4]
 800ffd2:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	685a      	ldr	r2, [r3, #4]
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	689b      	ldr	r3, [r3, #8]
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d00d      	beq.n	800fffc <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	685b      	ldr	r3, [r3, #4]
 800ffe6:	683a      	ldr	r2, [r7, #0]
 800ffe8:	4619      	mov	r1, r3
 800ffea:	f000 f85f 	bl	80100ac <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	685b      	ldr	r3, [r3, #4]
 800fff2:	f103 0208 	add.w	r2, r3, #8
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800fffa:	e008      	b.n	801000e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x44>
	  _M_realloc_insert(end(), __x);
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f7ff ff9e 	bl	800ff3e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 8010002:	4603      	mov	r3, r0
 8010004:	683a      	ldr	r2, [r7, #0]
 8010006:	4619      	mov	r1, r3
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f000 f863 	bl	80100d4 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
 801000e:	bf00      	nop
 8010010:	3708      	adds	r7, #8
 8010012:	46bd      	mov	sp, r7
 8010014:	bd80      	pop	{r7, pc}

08010016 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8010016:	b480      	push	{r7}
 8010018:	b083      	sub	sp, #12
 801001a:	af00      	add	r7, sp, #0
 801001c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	685a      	ldr	r2, [r3, #4]
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	1ad3      	subs	r3, r2, r3
 8010028:	10db      	asrs	r3, r3, #3
 801002a:	4618      	mov	r0, r3
 801002c:	370c      	adds	r7, #12
 801002e:	46bd      	mov	sp, r7
 8010030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010034:	4770      	bx	lr

08010036 <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8010036:	b580      	push	{r7, lr}
 8010038:	b082      	sub	sp, #8
 801003a:	af00      	add	r7, sp, #0
 801003c:	6078      	str	r0, [r7, #4]
 801003e:	6878      	ldr	r0, [r7, #4]
 8010040:	f000 f8c4 	bl	80101cc <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	4618      	mov	r0, r3
 8010048:	3708      	adds	r7, #8
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}

0801004e <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 801004e:	b480      	push	{r7}
 8010050:	b083      	sub	sp, #12
 8010052:	af00      	add	r7, sp, #0
 8010054:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	2200      	movs	r2, #0
 801005a:	601a      	str	r2, [r3, #0]
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2200      	movs	r2, #0
 8010060:	605a      	str	r2, [r3, #4]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2200      	movs	r2, #0
 8010066:	609a      	str	r2, [r3, #8]
	{ }
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	4618      	mov	r0, r3
 801006c:	370c      	adds	r7, #12
 801006e:	46bd      	mov	sp, r7
 8010070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010074:	4770      	bx	lr

08010076 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8010076:	b480      	push	{r7}
 8010078:	b083      	sub	sp, #12
 801007a:	af00      	add	r7, sp, #0
 801007c:	6078      	str	r0, [r7, #4]
 801007e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	681a      	ldr	r2, [r3, #0]
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	601a      	str	r2, [r3, #0]
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	4618      	mov	r0, r3
 801008c:	370c      	adds	r7, #12
 801008e:	46bd      	mov	sp, r7
 8010090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010094:	4770      	bx	lr

08010096 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8010096:	b480      	push	{r7}
 8010098:	b083      	sub	sp, #12
 801009a:	af00      	add	r7, sp, #0
 801009c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	4618      	mov	r0, r3
 80100a2:	370c      	adds	r7, #12
 80100a4:	46bd      	mov	sp, r7
 80100a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100aa:	4770      	bx	lr

080100ac <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b084      	sub	sp, #16
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	60f8      	str	r0, [r7, #12]
 80100b4:	60b9      	str	r1, [r7, #8]
 80100b6:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f000 f892 	bl	80101e2 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 80100be:	4603      	mov	r3, r0
 80100c0:	461a      	mov	r2, r3
 80100c2:	68b9      	ldr	r1, [r7, #8]
 80100c4:	68f8      	ldr	r0, [r7, #12]
 80100c6:	f000 f897 	bl	80101f8 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 80100ca:	bf00      	nop
 80100cc:	3710      	adds	r7, #16
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
	...

080100d4 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 80100d4:	b5b0      	push	{r4, r5, r7, lr}
 80100d6:	b08c      	sub	sp, #48	@ 0x30
 80100d8:	af00      	add	r7, sp, #0
 80100da:	60f8      	str	r0, [r7, #12]
 80100dc:	60b9      	str	r1, [r7, #8]
 80100de:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80100e0:	4a39      	ldr	r2, [pc, #228]	@ (80101c8 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 80100e2:	2101      	movs	r1, #1
 80100e4:	68f8      	ldr	r0, [r7, #12]
 80100e6:	f000 f89f 	bl	8010228 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>
 80100ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	685b      	ldr	r3, [r3, #4]
 80100f6:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 80100f8:	68f8      	ldr	r0, [r7, #12]
 80100fa:	f7ff ff10 	bl	800ff1e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 80100fe:	4603      	mov	r3, r0
 8010100:	617b      	str	r3, [r7, #20]
 8010102:	f107 0214 	add.w	r2, r7, #20
 8010106:	f107 0308 	add.w	r3, r7, #8
 801010a:	4611      	mov	r1, r2
 801010c:	4618      	mov	r0, r3
 801010e:	f000 f8d2 	bl	80102b6 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8010112:	4603      	mov	r3, r0
 8010114:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801011a:	4618      	mov	r0, r3
 801011c:	f000 f8e0 	bl	80102e0 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>
 8010120:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8010122:	69fb      	ldr	r3, [r7, #28]
 8010124:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8010126:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8010128:	6a3b      	ldr	r3, [r7, #32]
 801012a:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 801012c:	69fa      	ldr	r2, [r7, #28]
 801012e:	18d5      	adds	r5, r2, r3
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f000 f856 	bl	80101e2 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 8010136:	4603      	mov	r3, r0
 8010138:	461a      	mov	r2, r3
 801013a:	4629      	mov	r1, r5
 801013c:	4620      	mov	r0, r4
 801013e:	f7ff ffb5 	bl	80100ac <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8010142:	2300      	movs	r3, #0
 8010144:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8010146:	f107 0308 	add.w	r3, r7, #8
 801014a:	4618      	mov	r0, r3
 801014c:	f7ff ffa3 	bl	8010096 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 8010150:	4603      	mov	r3, r0
 8010152:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	4618      	mov	r0, r3
 8010158:	f7fa fa8b 	bl	800a672 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 801015c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801015e:	69fa      	ldr	r2, [r7, #28]
 8010160:	4621      	mov	r1, r4
 8010162:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010164:	f000 f8d0 	bl	8010308 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 8010168:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 801016a:	69bb      	ldr	r3, [r7, #24]
 801016c:	3308      	adds	r3, #8
 801016e:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8010170:	f107 0308 	add.w	r3, r7, #8
 8010174:	4618      	mov	r0, r3
 8010176:	f7ff ff8e 	bl	8010096 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801017a:	4603      	mov	r3, r0
 801017c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	4618      	mov	r0, r3
 8010182:	f7fa fa76 	bl	800a672 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 8010186:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8010188:	69ba      	ldr	r2, [r7, #24]
 801018a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801018c:	4620      	mov	r0, r4
 801018e:	f000 f8bb 	bl	8010308 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 8010192:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8010194:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	689a      	ldr	r2, [r3, #8]
 801019a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801019c:	1ad3      	subs	r3, r2, r3
 801019e:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 80101a0:	461a      	mov	r2, r3
 80101a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80101a4:	f7fa fc2d 	bl	800aa02 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	69fa      	ldr	r2, [r7, #28]
 80101ac:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	69ba      	ldr	r2, [r7, #24]
 80101b2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80101b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101b6:	00db      	lsls	r3, r3, #3
 80101b8:	69fa      	ldr	r2, [r7, #28]
 80101ba:	441a      	add	r2, r3
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	609a      	str	r2, [r3, #8]
    }
 80101c0:	bf00      	nop
 80101c2:	3730      	adds	r7, #48	@ 0x30
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bdb0      	pop	{r4, r5, r7, pc}
 80101c8:	0801f3b4 	.word	0x0801f3b4

080101cc <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80101cc:	b480      	push	{r7}
 80101ce:	b083      	sub	sp, #12
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	4618      	mov	r0, r3
 80101d8:	370c      	adds	r7, #12
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr

080101e2 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80101e2:	b480      	push	{r7}
 80101e4:	b083      	sub	sp, #12
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	4618      	mov	r0, r3
 80101ee:	370c      	adds	r7, #12
 80101f0:	46bd      	mov	sp, r7
 80101f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f6:	4770      	bx	lr

080101f8 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80101f8:	b590      	push	{r4, r7, lr}
 80101fa:	b085      	sub	sp, #20
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	60f8      	str	r0, [r7, #12]
 8010200:	60b9      	str	r1, [r7, #8]
 8010202:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	4619      	mov	r1, r3
 8010208:	2008      	movs	r0, #8
 801020a:	f7f7 fe3b 	bl	8007e84 <_ZnwjPv>
 801020e:	4604      	mov	r4, r0
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f7ff ffe6 	bl	80101e2 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 8010216:	4603      	mov	r3, r0
 8010218:	4619      	mov	r1, r3
 801021a:	4620      	mov	r0, r4
 801021c:	f7f8 fca2 	bl	8008b64 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 8010220:	bf00      	nop
 8010222:	3714      	adds	r7, #20
 8010224:	46bd      	mov	sp, r7
 8010226:	bd90      	pop	{r4, r7, pc}

08010228 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8010228:	b590      	push	{r4, r7, lr}
 801022a:	b087      	sub	sp, #28
 801022c:	af00      	add	r7, sp, #0
 801022e:	60f8      	str	r0, [r7, #12]
 8010230:	60b9      	str	r1, [r7, #8]
 8010232:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8010234:	68f8      	ldr	r0, [r7, #12]
 8010236:	f000 f886 	bl	8010346 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 801023a:	4604      	mov	r4, r0
 801023c:	68f8      	ldr	r0, [r7, #12]
 801023e:	f7ff feea 	bl	8010016 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 8010242:	4603      	mov	r3, r0
 8010244:	1ae2      	subs	r2, r4, r3
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	429a      	cmp	r2, r3
 801024a:	bf34      	ite	cc
 801024c:	2301      	movcc	r3, #1
 801024e:	2300      	movcs	r3, #0
 8010250:	b2db      	uxtb	r3, r3
 8010252:	2b00      	cmp	r3, #0
 8010254:	d002      	beq.n	801025c <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f00d f92a 	bl	801d4b0 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 801025c:	68f8      	ldr	r0, [r7, #12]
 801025e:	f7ff feda 	bl	8010016 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 8010262:	4604      	mov	r4, r0
 8010264:	68f8      	ldr	r0, [r7, #12]
 8010266:	f7ff fed6 	bl	8010016 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 801026a:	4603      	mov	r3, r0
 801026c:	613b      	str	r3, [r7, #16]
 801026e:	f107 0208 	add.w	r2, r7, #8
 8010272:	f107 0310 	add.w	r3, r7, #16
 8010276:	4611      	mov	r1, r2
 8010278:	4618      	mov	r0, r3
 801027a:	f000 f875 	bl	8010368 <_ZSt3maxIjERKT_S2_S2_>
 801027e:	4603      	mov	r3, r0
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	4423      	add	r3, r4
 8010284:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010286:	68f8      	ldr	r0, [r7, #12]
 8010288:	f7ff fec5 	bl	8010016 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 801028c:	4602      	mov	r2, r0
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	4293      	cmp	r3, r2
 8010292:	d306      	bcc.n	80102a2 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x7a>
 8010294:	68f8      	ldr	r0, [r7, #12]
 8010296:	f000 f856 	bl	8010346 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 801029a:	4602      	mov	r2, r0
 801029c:	697b      	ldr	r3, [r7, #20]
 801029e:	4293      	cmp	r3, r2
 80102a0:	d904      	bls.n	80102ac <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x84>
 80102a2:	68f8      	ldr	r0, [r7, #12]
 80102a4:	f000 f84f 	bl	8010346 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 80102a8:	4603      	mov	r3, r0
 80102aa:	e000      	b.n	80102ae <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x86>
 80102ac:	697b      	ldr	r3, [r7, #20]
      }
 80102ae:	4618      	mov	r0, r3
 80102b0:	371c      	adds	r7, #28
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd90      	pop	{r4, r7, pc}

080102b6 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80102b6:	b590      	push	{r4, r7, lr}
 80102b8:	b083      	sub	sp, #12
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	6078      	str	r0, [r7, #4]
 80102be:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f7ff fee8 	bl	8010096 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 80102c6:	4603      	mov	r3, r0
 80102c8:	681c      	ldr	r4, [r3, #0]
 80102ca:	6838      	ldr	r0, [r7, #0]
 80102cc:	f7ff fee3 	bl	8010096 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 80102d0:	4603      	mov	r3, r0
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	1ae3      	subs	r3, r4, r3
 80102d6:	10db      	asrs	r3, r3, #3
 80102d8:	4618      	mov	r0, r3
 80102da:	370c      	adds	r7, #12
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd90      	pop	{r4, r7, pc}

080102e0 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b082      	sub	sp, #8
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d006      	beq.n	80102fe <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x1e>
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6839      	ldr	r1, [r7, #0]
 80102f4:	4618      	mov	r0, r3
 80102f6:	f000 f84b 	bl	8010390 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>
 80102fa:	4603      	mov	r3, r0
 80102fc:	e000      	b.n	8010300 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x20>
 80102fe:	2300      	movs	r3, #0
      }
 8010300:	4618      	mov	r0, r3
 8010302:	3708      	adds	r7, #8
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}

08010308 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8010308:	b580      	push	{r7, lr}
 801030a:	b084      	sub	sp, #16
 801030c:	af00      	add	r7, sp, #0
 801030e:	60f8      	str	r0, [r7, #12]
 8010310:	60b9      	str	r1, [r7, #8]
 8010312:	607a      	str	r2, [r7, #4]
 8010314:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	687a      	ldr	r2, [r7, #4]
 801031a:	68b9      	ldr	r1, [r7, #8]
 801031c:	68f8      	ldr	r0, [r7, #12]
 801031e:	f000 f846 	bl	80103ae <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 8010322:	4603      	mov	r3, r0
      }
 8010324:	4618      	mov	r0, r3
 8010326:	3710      	adds	r7, #16
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}

0801032c <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 801032c:	b580      	push	{r7, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8010336:	6839      	ldr	r1, [r7, #0]
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f000 f855 	bl	80103e8 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>
	}
 801033e:	bf00      	nop
 8010340:	3708      	adds	r7, #8
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}

08010346 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8010346:	b580      	push	{r7, lr}
 8010348:	b082      	sub	sp, #8
 801034a:	af00      	add	r7, sp, #0
 801034c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	4618      	mov	r0, r3
 8010352:	f000 f86f 	bl	8010434 <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 8010356:	4603      	mov	r3, r0
 8010358:	4618      	mov	r0, r3
 801035a:	f000 f851 	bl	8010400 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>
 801035e:	4603      	mov	r3, r0
 8010360:	4618      	mov	r0, r3
 8010362:	3708      	adds	r7, #8
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8010368:	b480      	push	{r7}
 801036a:	b083      	sub	sp, #12
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681a      	ldr	r2, [r3, #0]
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	429a      	cmp	r2, r3
 801037c:	d201      	bcs.n	8010382 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	e000      	b.n	8010384 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8010382:	687b      	ldr	r3, [r7, #4]
    }
 8010384:	4618      	mov	r0, r3
 8010386:	370c      	adds	r7, #12
 8010388:	46bd      	mov	sp, r7
 801038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038e:	4770      	bx	lr

08010390 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
 8010398:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801039a:	2200      	movs	r2, #0
 801039c:	6839      	ldr	r1, [r7, #0]
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f000 f853 	bl	801044a <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>
 80103a4:	4603      	mov	r3, r0
 80103a6:	4618      	mov	r0, r3
 80103a8:	3708      	adds	r7, #8
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}

080103ae <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80103ae:	b5b0      	push	{r4, r5, r7, lr}
 80103b0:	b084      	sub	sp, #16
 80103b2:	af00      	add	r7, sp, #0
 80103b4:	60f8      	str	r0, [r7, #12]
 80103b6:	60b9      	str	r1, [r7, #8]
 80103b8:	607a      	str	r2, [r7, #4]
 80103ba:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 80103bc:	68f8      	ldr	r0, [r7, #12]
 80103be:	f000 f86e 	bl	801049e <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 80103c2:	4604      	mov	r4, r0
 80103c4:	68b8      	ldr	r0, [r7, #8]
 80103c6:	f000 f86a 	bl	801049e <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 80103ca:	4605      	mov	r5, r0
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f000 f866 	bl	801049e <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 80103d2:	4602      	mov	r2, r0
 80103d4:	683b      	ldr	r3, [r7, #0]
 80103d6:	4629      	mov	r1, r5
 80103d8:	4620      	mov	r0, r4
 80103da:	f000 f86b 	bl	80104b4 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 80103de:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 80103e0:	4618      	mov	r0, r3
 80103e2:	3710      	adds	r7, #16
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bdb0      	pop	{r4, r5, r7, pc}

080103e8 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b082      	sub	sp, #8
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 80103f2:	6838      	ldr	r0, [r7, #0]
 80103f4:	f7f8 f915 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
 80103f8:	bf00      	nop
 80103fa:	3708      	adds	r7, #8
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8010400:	b580      	push	{r7, lr}
 8010402:	b084      	sub	sp, #16
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8010408:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 801040c:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f000 f876 	bl	8010500 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>
 8010414:	4603      	mov	r3, r0
 8010416:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8010418:	f107 0208 	add.w	r2, r7, #8
 801041c:	f107 030c 	add.w	r3, r7, #12
 8010420:	4611      	mov	r1, r2
 8010422:	4618      	mov	r0, r3
 8010424:	f000 f878 	bl	8010518 <_ZSt3minIjERKT_S2_S2_>
 8010428:	4603      	mov	r3, r0
 801042a:	681b      	ldr	r3, [r3, #0]
      }
 801042c:	4618      	mov	r0, r3
 801042e:	3710      	adds	r7, #16
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}

08010434 <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8010434:	b480      	push	{r7}
 8010436:	b083      	sub	sp, #12
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	4618      	mov	r0, r3
 8010440:	370c      	adds	r7, #12
 8010442:	46bd      	mov	sp, r7
 8010444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010448:	4770      	bx	lr

0801044a <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801044a:	b580      	push	{r7, lr}
 801044c:	b084      	sub	sp, #16
 801044e:	af00      	add	r7, sp, #0
 8010450:	60f8      	str	r0, [r7, #12]
 8010452:	60b9      	str	r1, [r7, #8]
 8010454:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8010456:	68f8      	ldr	r0, [r7, #12]
 8010458:	f000 f872 	bl	8010540 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 801045c:	4602      	mov	r2, r0
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	4293      	cmp	r3, r2
 8010462:	bf8c      	ite	hi
 8010464:	2301      	movhi	r3, #1
 8010466:	2300      	movls	r3, #0
 8010468:	b2db      	uxtb	r3, r3
 801046a:	2b00      	cmp	r3, #0
 801046c:	bf14      	ite	ne
 801046e:	2301      	movne	r3, #1
 8010470:	2300      	moveq	r3, #0
 8010472:	b2db      	uxtb	r3, r3
 8010474:	2b00      	cmp	r3, #0
 8010476:	d007      	beq.n	8010488 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801047e:	d301      	bcc.n	8010484 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8010480:	f00d f810 	bl	801d4a4 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8010484:	f00d f80b 	bl	801d49e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	00db      	lsls	r3, r3, #3
 801048c:	4618      	mov	r0, r3
 801048e:	f00c fff3 	bl	801d478 <_Znwj>
 8010492:	4603      	mov	r3, r0
 8010494:	bf00      	nop
      }
 8010496:	4618      	mov	r0, r3
 8010498:	3710      	adds	r7, #16
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}

0801049e <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>:
    __niter_base(_Iterator __it)
 801049e:	b480      	push	{r7}
 80104a0:	b083      	sub	sp, #12
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	4618      	mov	r0, r3
 80104aa:	370c      	adds	r7, #12
 80104ac:	46bd      	mov	sp, r7
 80104ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b2:	4770      	bx	lr

080104b4 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80104b4:	b590      	push	{r4, r7, lr}
 80104b6:	b087      	sub	sp, #28
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	60f8      	str	r0, [r7, #12]
 80104bc:	60b9      	str	r1, [r7, #8]
 80104be:	607a      	str	r2, [r7, #4]
 80104c0:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80104c6:	e012      	b.n	80104ee <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 80104c8:	6978      	ldr	r0, [r7, #20]
 80104ca:	f7fa fe76 	bl	800b1ba <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 80104ce:	4604      	mov	r4, r0
 80104d0:	68f8      	ldr	r0, [r7, #12]
 80104d2:	f7fa fe72 	bl	800b1ba <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 80104d6:	4603      	mov	r3, r0
 80104d8:	683a      	ldr	r2, [r7, #0]
 80104da:	4619      	mov	r1, r3
 80104dc:	4620      	mov	r0, r4
 80104de:	f000 f83b 	bl	8010558 <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	3308      	adds	r3, #8
 80104e6:	60fb      	str	r3, [r7, #12]
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	3308      	adds	r3, #8
 80104ec:	617b      	str	r3, [r7, #20]
 80104ee:	68fa      	ldr	r2, [r7, #12]
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	429a      	cmp	r2, r3
 80104f4:	d1e8      	bne.n	80104c8 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x14>
      return __cur;
 80104f6:	697b      	ldr	r3, [r7, #20]
    }
 80104f8:	4618      	mov	r0, r3
 80104fa:	371c      	adds	r7, #28
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd90      	pop	{r4, r7, pc}

08010500 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8010500:	b580      	push	{r7, lr}
 8010502:	b082      	sub	sp, #8
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f000 f840 	bl	801058e <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>
 801050e:	4603      	mov	r3, r0
      }
 8010510:	4618      	mov	r0, r3
 8010512:	3708      	adds	r7, #8
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8010518:	b480      	push	{r7}
 801051a:	b083      	sub	sp, #12
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	681a      	ldr	r2, [r3, #0]
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	429a      	cmp	r2, r3
 801052c:	d201      	bcs.n	8010532 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	e000      	b.n	8010534 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8010532:	687b      	ldr	r3, [r7, #4]
    }
 8010534:	4618      	mov	r0, r3
 8010536:	370c      	adds	r7, #12
 8010538:	46bd      	mov	sp, r7
 801053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053e:	4770      	bx	lr

08010540 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8010540:	b480      	push	{r7}
 8010542:	b083      	sub	sp, #12
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8010548:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
      }
 801054c:	4618      	mov	r0, r3
 801054e:	370c      	adds	r7, #12
 8010550:	46bd      	mov	sp, r7
 8010552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010556:	4770      	bx	lr

08010558 <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8010558:	b580      	push	{r7, lr}
 801055a:	b084      	sub	sp, #16
 801055c:	af00      	add	r7, sp, #0
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	60b9      	str	r1, [r7, #8]
 8010562:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8010564:	68b8      	ldr	r0, [r7, #8]
 8010566:	f000 f81e 	bl	80105a6 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 801056a:	4603      	mov	r3, r0
 801056c:	461a      	mov	r2, r3
 801056e:	68f9      	ldr	r1, [r7, #12]
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f000 f823 	bl	80105bc <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8010576:	68b8      	ldr	r0, [r7, #8]
 8010578:	f7fa fe1f 	bl	800b1ba <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 801057c:	4603      	mov	r3, r0
 801057e:	4619      	mov	r1, r3
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f7ff fed3 	bl	801032c <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>
    }
 8010586:	bf00      	nop
 8010588:	3710      	adds	r7, #16
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}

0801058e <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 801058e:	b580      	push	{r7, lr}
 8010590:	b082      	sub	sp, #8
 8010592:	af00      	add	r7, sp, #0
 8010594:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f7ff ffd2 	bl	8010540 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 801059c:	4603      	mov	r3, r0
 801059e:	4618      	mov	r0, r3
 80105a0:	3708      	adds	r7, #8
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}

080105a6 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80105a6:	b480      	push	{r7}
 80105a8:	b083      	sub	sp, #12
 80105aa:	af00      	add	r7, sp, #0
 80105ac:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	4618      	mov	r0, r3
 80105b2:	370c      	adds	r7, #12
 80105b4:	46bd      	mov	sp, r7
 80105b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ba:	4770      	bx	lr

080105bc <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80105bc:	b580      	push	{r7, lr}
 80105be:	b084      	sub	sp, #16
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	60f8      	str	r0, [r7, #12]
 80105c4:	60b9      	str	r1, [r7, #8]
 80105c6:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f000 f80a 	bl	80105e2 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 80105ce:	4603      	mov	r3, r0
 80105d0:	461a      	mov	r2, r3
 80105d2:	68b9      	ldr	r1, [r7, #8]
 80105d4:	68f8      	ldr	r0, [r7, #12]
 80105d6:	f000 f80f 	bl	80105f8 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 80105da:	bf00      	nop
 80105dc:	3710      	adds	r7, #16
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}

080105e2 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80105e2:	b480      	push	{r7}
 80105e4:	b083      	sub	sp, #12
 80105e6:	af00      	add	r7, sp, #0
 80105e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	4618      	mov	r0, r3
 80105ee:	370c      	adds	r7, #12
 80105f0:	46bd      	mov	sp, r7
 80105f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f6:	4770      	bx	lr

080105f8 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80105f8:	b590      	push	{r4, r7, lr}
 80105fa:	b085      	sub	sp, #20
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	60f8      	str	r0, [r7, #12]
 8010600:	60b9      	str	r1, [r7, #8]
 8010602:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	4619      	mov	r1, r3
 8010608:	2008      	movs	r0, #8
 801060a:	f7f7 fc3b 	bl	8007e84 <_ZnwjPv>
 801060e:	4604      	mov	r4, r0
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f7ff ffe6 	bl	80105e2 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 8010616:	4603      	mov	r3, r0
 8010618:	4619      	mov	r1, r3
 801061a:	4620      	mov	r0, r4
 801061c:	f000 f804 	bl	8010628 <_ZNSt10shared_ptrI6ModuleEC1EOS1_>
 8010620:	bf00      	nop
 8010622:	3714      	adds	r7, #20
 8010624:	46bd      	mov	sp, r7
 8010626:	bd90      	pop	{r4, r7, pc}

08010628 <_ZNSt10shared_ptrI6ModuleEC1EOS1_>:
      shared_ptr(shared_ptr&& __r) noexcept
 8010628:	b590      	push	{r4, r7, lr}
 801062a:	b083      	sub	sp, #12
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 8010632:	687c      	ldr	r4, [r7, #4]
 8010634:	6838      	ldr	r0, [r7, #0]
 8010636:	f7ff ffb6 	bl	80105a6 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 801063a:	4603      	mov	r3, r0
 801063c:	4619      	mov	r1, r3
 801063e:	4620      	mov	r0, r4
 8010640:	f000 f805 	bl	801064e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	4618      	mov	r0, r3
 8010648:	370c      	adds	r7, #12
 801064a:	46bd      	mov	sp, r7
 801064c:	bd90      	pop	{r4, r7, pc}

0801064e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 801064e:	b580      	push	{r7, lr}
 8010650:	b082      	sub	sp, #8
 8010652:	af00      	add	r7, sp, #0
 8010654:	6078      	str	r0, [r7, #4]
 8010656:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	681a      	ldr	r2, [r3, #0]
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	601a      	str	r2, [r3, #0]
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	3304      	adds	r3, #4
 8010664:	4618      	mov	r0, r3
 8010666:	f7f9 fd87 	bl	800a178 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	1d1a      	adds	r2, r3, #4
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	3304      	adds	r3, #4
 8010672:	4619      	mov	r1, r3
 8010674:	4610      	mov	r0, r2
 8010676:	f7fa f895 	bl	800a7a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	2200      	movs	r2, #0
 801067e:	601a      	str	r2, [r3, #0]
      }
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	4618      	mov	r0, r3
 8010684:	3708      	adds	r7, #8
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}
	...

0801068c <__NVIC_EnableIRQ>:
{
 801068c:	b480      	push	{r7}
 801068e:	b083      	sub	sp, #12
 8010690:	af00      	add	r7, sp, #0
 8010692:	4603      	mov	r3, r0
 8010694:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801069a:	2b00      	cmp	r3, #0
 801069c:	db0b      	blt.n	80106b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801069e:	88fb      	ldrh	r3, [r7, #6]
 80106a0:	f003 021f 	and.w	r2, r3, #31
 80106a4:	4907      	ldr	r1, [pc, #28]	@ (80106c4 <__NVIC_EnableIRQ+0x38>)
 80106a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80106aa:	095b      	lsrs	r3, r3, #5
 80106ac:	2001      	movs	r0, #1
 80106ae:	fa00 f202 	lsl.w	r2, r0, r2
 80106b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80106b6:	bf00      	nop
 80106b8:	370c      	adds	r7, #12
 80106ba:	46bd      	mov	sp, r7
 80106bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c0:	4770      	bx	lr
 80106c2:	bf00      	nop
 80106c4:	e000e100 	.word	0xe000e100

080106c8 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* _timer, IRQn_Type _irq, uint32_t _frequency, pruThread* _ownerPtr):
 80106c8:	b590      	push	{r4, r7, lr}
 80106ca:	b085      	sub	sp, #20
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	60f8      	str	r0, [r7, #12]
 80106d0:	60b9      	str	r1, [r7, #8]
 80106d2:	603b      	str	r3, [r7, #0]
 80106d4:	4613      	mov	r3, r2
 80106d6:	80fb      	strh	r3, [r7, #6]
	timer(_timer),
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	68ba      	ldr	r2, [r7, #8]
 80106dc:	605a      	str	r2, [r3, #4]
	irq(_irq),
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	88fa      	ldrh	r2, [r7, #6]
 80106e2:	811a      	strh	r2, [r3, #8]
	frequency(_frequency),
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	683a      	ldr	r2, [r7, #0]
 80106e8:	60da      	str	r2, [r3, #12]
	timerOwnerPtr(_ownerPtr)
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	6a3a      	ldr	r2, [r7, #32]
 80106ee:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 80106f0:	2008      	movs	r0, #8
 80106f2:	f00c fec1 	bl	801d478 <_Znwj>
 80106f6:	4603      	mov	r3, r0
 80106f8:	461c      	mov	r4, r3
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010700:	68fa      	ldr	r2, [r7, #12]
 8010702:	4619      	mov	r1, r3
 8010704:	4620      	mov	r0, r4
 8010706:	f000 f8af 	bl	8010868 <_ZN14TimerInterruptC1EiP8pruTimer>
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	601c      	str	r4, [r3, #0]

	startTimer();
 801070e:	68f8      	ldr	r0, [r7, #12]
 8010710:	f000 f812 	bl	8010738 <_ZN8pruTimer10startTimerEv>
}
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	4618      	mov	r0, r3
 8010718:	3714      	adds	r7, #20
 801071a:	46bd      	mov	sp, r7
 801071c:	bd90      	pop	{r4, r7, pc}

0801071e <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 801071e:	b580      	push	{r7, lr}
 8010720:	b082      	sub	sp, #8
 8010722:	af00      	add	r7, sp, #0
 8010724:	6078      	str	r0, [r7, #4]
	//Do something here
	timerOwnerPtr->update();
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	691b      	ldr	r3, [r3, #16]
 801072a:	4618      	mov	r0, r3
 801072c:	f7ff fbad 	bl	800fe8a <_ZN9pruThread6updateEv>
}
 8010730:	bf00      	nop
 8010732:	3708      	adds	r7, #8
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}

08010738 <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b086      	sub	sp, #24
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (timer == TIM2)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	685b      	ldr	r3, [r3, #4]
 8010744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010748:	d116      	bne.n	8010778 <_ZN8pruTimer10startTimerEv+0x40>
    {
        printf("	power on Timer 2\n\r");
 801074a:	483f      	ldr	r0, [pc, #252]	@ (8010848 <_ZN8pruTimer10startTimerEv+0x110>)
 801074c:	f00d fb22 	bl	801dd94 <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 8010750:	4b3e      	ldr	r3, [pc, #248]	@ (801084c <_ZN8pruTimer10startTimerEv+0x114>)
 8010752:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010756:	4a3d      	ldr	r2, [pc, #244]	@ (801084c <_ZN8pruTimer10startTimerEv+0x114>)
 8010758:	f043 0301 	orr.w	r3, r3, #1
 801075c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8010760:	4b3a      	ldr	r3, [pc, #232]	@ (801084c <_ZN8pruTimer10startTimerEv+0x114>)
 8010762:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010766:	f003 0301 	and.w	r3, r3, #1
 801076a:	613b      	str	r3, [r7, #16]
 801076c:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB1CLK;
 801076e:	4b38      	ldr	r3, [pc, #224]	@ (8010850 <_ZN8pruTimer10startTimerEv+0x118>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	085b      	lsrs	r3, r3, #1
 8010774:	617b      	str	r3, [r7, #20]
 8010776:	e036      	b.n	80107e6 <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (timer == TIM3)
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	685b      	ldr	r3, [r3, #4]
 801077c:	4a35      	ldr	r2, [pc, #212]	@ (8010854 <_ZN8pruTimer10startTimerEv+0x11c>)
 801077e:	4293      	cmp	r3, r2
 8010780:	d116      	bne.n	80107b0 <_ZN8pruTimer10startTimerEv+0x78>
    {
        printf("	power on Timer 3\n\r");
 8010782:	4835      	ldr	r0, [pc, #212]	@ (8010858 <_ZN8pruTimer10startTimerEv+0x120>)
 8010784:	f00d fb06 	bl	801dd94 <iprintf>
        __HAL_RCC_TIM3_CLK_ENABLE();
 8010788:	4b30      	ldr	r3, [pc, #192]	@ (801084c <_ZN8pruTimer10startTimerEv+0x114>)
 801078a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801078e:	4a2f      	ldr	r2, [pc, #188]	@ (801084c <_ZN8pruTimer10startTimerEv+0x114>)
 8010790:	f043 0302 	orr.w	r3, r3, #2
 8010794:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8010798:	4b2c      	ldr	r3, [pc, #176]	@ (801084c <_ZN8pruTimer10startTimerEv+0x114>)
 801079a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801079e:	f003 0302 	and.w	r3, r3, #2
 80107a2:	60fb      	str	r3, [r7, #12]
 80107a4:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 80107a6:	4b2a      	ldr	r3, [pc, #168]	@ (8010850 <_ZN8pruTimer10startTimerEv+0x118>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	085b      	lsrs	r3, r3, #1
 80107ac:	617b      	str	r3, [r7, #20]
 80107ae:	e01a      	b.n	80107e6 <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (timer == TIM4)
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	685b      	ldr	r3, [r3, #4]
 80107b4:	4a29      	ldr	r2, [pc, #164]	@ (801085c <_ZN8pruTimer10startTimerEv+0x124>)
 80107b6:	4293      	cmp	r3, r2
 80107b8:	d115      	bne.n	80107e6 <_ZN8pruTimer10startTimerEv+0xae>
    {
        printf("	power on Timer 4\n\r");
 80107ba:	4829      	ldr	r0, [pc, #164]	@ (8010860 <_ZN8pruTimer10startTimerEv+0x128>)
 80107bc:	f00d faea 	bl	801dd94 <iprintf>
        __HAL_RCC_TIM4_CLK_ENABLE();
 80107c0:	4b22      	ldr	r3, [pc, #136]	@ (801084c <_ZN8pruTimer10startTimerEv+0x114>)
 80107c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80107c6:	4a21      	ldr	r2, [pc, #132]	@ (801084c <_ZN8pruTimer10startTimerEv+0x114>)
 80107c8:	f043 0304 	orr.w	r3, r3, #4
 80107cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80107d0:	4b1e      	ldr	r3, [pc, #120]	@ (801084c <_ZN8pruTimer10startTimerEv+0x114>)
 80107d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80107d6:	f003 0304 	and.w	r3, r3, #4
 80107da:	60bb      	str	r3, [r7, #8]
 80107dc:	68bb      	ldr	r3, [r7, #8]
        TIM_CLK = APB1CLK;
 80107de:	4b1c      	ldr	r3, [pc, #112]	@ (8010850 <_ZN8pruTimer10startTimerEv+0x118>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	085b      	lsrs	r3, r3, #1
 80107e4:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    timer->CR2 &= 0;                                            // UG used as trigg output
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	685b      	ldr	r3, [r3, #4]
 80107ea:	685b      	ldr	r3, [r3, #4]
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	685b      	ldr	r3, [r3, #4]
 80107f0:	2200      	movs	r2, #0
 80107f2:	605a      	str	r2, [r3, #4]
    timer->PSC = TIM_PSC-1;                                     // prescaler
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	685b      	ldr	r3, [r3, #4]
 80107f8:	2200      	movs	r2, #0
 80107fa:	629a      	str	r2, [r3, #40]	@ 0x28
    timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	68db      	ldr	r3, [r3, #12]
 8010800:	697a      	ldr	r2, [r7, #20]
 8010802:	fbb2 f2f3 	udiv	r2, r2, r3
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	685b      	ldr	r3, [r3, #4]
 801080a:	3a01      	subs	r2, #1
 801080c:	62da      	str	r2, [r3, #44]	@ 0x2c
    timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	685b      	ldr	r3, [r3, #4]
 8010812:	2201      	movs	r2, #1
 8010814:	615a      	str	r2, [r3, #20]
    timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	2201      	movs	r2, #1
 801081c:	60da      	str	r2, [r3, #12]

    timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	685b      	ldr	r3, [r3, #4]
 8010822:	681a      	ldr	r2, [r3, #0]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	685b      	ldr	r3, [r3, #4]
 8010828:	f042 0201 	orr.w	r2, r2, #1
 801082c:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(irq);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010834:	4618      	mov	r0, r3
 8010836:	f7ff ff29 	bl	801068c <__NVIC_EnableIRQ>

    printf("	timer started\n");
 801083a:	480a      	ldr	r0, [pc, #40]	@ (8010864 <_ZN8pruTimer10startTimerEv+0x12c>)
 801083c:	f00d fb1a 	bl	801de74 <puts>
}
 8010840:	bf00      	nop
 8010842:	3718      	adds	r7, #24
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}
 8010848:	0801f3d0 	.word	0x0801f3d0
 801084c:	58024400 	.word	0x58024400
 8010850:	2400001c 	.word	0x2400001c
 8010854:	40000400 	.word	0x40000400
 8010858:	0801f3e4 	.word	0x0801f3e4
 801085c:	40000800 	.word	0x40000800
 8010860:	0801f3f8 	.word	0x0801f3f8
 8010864:	0801f40c 	.word	0x0801f40c

08010868 <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 8010868:	b580      	push	{r7, lr}
 801086a:	b084      	sub	sp, #16
 801086c:	af00      	add	r7, sp, #0
 801086e:	60f8      	str	r0, [r7, #12]
 8010870:	60b9      	str	r1, [r7, #8]
 8010872:	607a      	str	r2, [r7, #4]
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	4618      	mov	r0, r3
 8010878:	f7f1 fdf0 	bl	800245c <_ZN9InterruptC1Ev>
 801087c:	4a07      	ldr	r2, [pc, #28]	@ (801089c <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	687a      	ldr	r2, [r7, #4]
 8010886:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	4619      	mov	r1, r3
 801088c:	68b8      	ldr	r0, [r7, #8]
 801088e:	f7f1 fdf5 	bl	800247c <_ZN9Interrupt8RegisterEiPS_>
}
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	4618      	mov	r0, r3
 8010896:	3710      	adds	r7, #16
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}
 801089c:	0801f728 	.word	0x0801f728

080108a0 <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b082      	sub	sp, #8
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	685b      	ldr	r3, [r3, #4]
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7ff ff36 	bl	801071e <_ZN8pruTimer9timerTickEv>
}
 80108b2:	bf00      	nop
 80108b4:	3708      	adds	r7, #8
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
	...

080108bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80108bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80108f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80108c0:	f7fb f974 	bl	800bbac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80108c4:	480c      	ldr	r0, [pc, #48]	@ (80108f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80108c6:	490d      	ldr	r1, [pc, #52]	@ (80108fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80108c8:	4a0d      	ldr	r2, [pc, #52]	@ (8010900 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80108ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80108cc:	e002      	b.n	80108d4 <LoopCopyDataInit>

080108ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80108ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80108d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80108d2:	3304      	adds	r3, #4

080108d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80108d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80108d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80108d8:	d3f9      	bcc.n	80108ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80108da:	4a0a      	ldr	r2, [pc, #40]	@ (8010904 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80108dc:	4c0a      	ldr	r4, [pc, #40]	@ (8010908 <LoopFillZerobss+0x22>)
  movs r3, #0
 80108de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80108e0:	e001      	b.n	80108e6 <LoopFillZerobss>

080108e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80108e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80108e4:	3204      	adds	r2, #4

080108e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80108e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80108e8:	d3fb      	bcc.n	80108e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80108ea:	f00d fc65 	bl	801e1b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80108ee:	f7f7 f81b 	bl	8007928 <main>
  bx  lr
 80108f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80108f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80108f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80108fc:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8010900:	0801f964 	.word	0x0801f964
  ldr r2, =_sbss
 8010904:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8010908:	24000c0c 	.word	0x24000c0c

0801090c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801090c:	e7fe      	b.n	801090c <ADC3_IRQHandler>
	...

08010910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b082      	sub	sp, #8
 8010914:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010916:	2003      	movs	r0, #3
 8010918:	f000 f9a2 	bl	8010c60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801091c:	f003 fdc8 	bl	80144b0 <HAL_RCC_GetSysClockFreq>
 8010920:	4602      	mov	r2, r0
 8010922:	4b15      	ldr	r3, [pc, #84]	@ (8010978 <HAL_Init+0x68>)
 8010924:	699b      	ldr	r3, [r3, #24]
 8010926:	0a1b      	lsrs	r3, r3, #8
 8010928:	f003 030f 	and.w	r3, r3, #15
 801092c:	4913      	ldr	r1, [pc, #76]	@ (801097c <HAL_Init+0x6c>)
 801092e:	5ccb      	ldrb	r3, [r1, r3]
 8010930:	f003 031f 	and.w	r3, r3, #31
 8010934:	fa22 f303 	lsr.w	r3, r2, r3
 8010938:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801093a:	4b0f      	ldr	r3, [pc, #60]	@ (8010978 <HAL_Init+0x68>)
 801093c:	699b      	ldr	r3, [r3, #24]
 801093e:	f003 030f 	and.w	r3, r3, #15
 8010942:	4a0e      	ldr	r2, [pc, #56]	@ (801097c <HAL_Init+0x6c>)
 8010944:	5cd3      	ldrb	r3, [r2, r3]
 8010946:	f003 031f 	and.w	r3, r3, #31
 801094a:	687a      	ldr	r2, [r7, #4]
 801094c:	fa22 f303 	lsr.w	r3, r2, r3
 8010950:	4a0b      	ldr	r2, [pc, #44]	@ (8010980 <HAL_Init+0x70>)
 8010952:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010954:	4a0b      	ldr	r2, [pc, #44]	@ (8010984 <HAL_Init+0x74>)
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801095a:	200f      	movs	r0, #15
 801095c:	f000 f814 	bl	8010988 <HAL_InitTick>
 8010960:	4603      	mov	r3, r0
 8010962:	2b00      	cmp	r3, #0
 8010964:	d001      	beq.n	801096a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8010966:	2301      	movs	r3, #1
 8010968:	e002      	b.n	8010970 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801096a:	f7fa ff05 	bl	800b778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801096e:	2300      	movs	r3, #0
}
 8010970:	4618      	mov	r0, r3
 8010972:	3708      	adds	r7, #8
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}
 8010978:	58024400 	.word	0x58024400
 801097c:	0801f604 	.word	0x0801f604
 8010980:	24000020 	.word	0x24000020
 8010984:	2400001c 	.word	0x2400001c

08010988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b082      	sub	sp, #8
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8010990:	4b15      	ldr	r3, [pc, #84]	@ (80109e8 <HAL_InitTick+0x60>)
 8010992:	781b      	ldrb	r3, [r3, #0]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d101      	bne.n	801099c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8010998:	2301      	movs	r3, #1
 801099a:	e021      	b.n	80109e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 801099c:	4b13      	ldr	r3, [pc, #76]	@ (80109ec <HAL_InitTick+0x64>)
 801099e:	681a      	ldr	r2, [r3, #0]
 80109a0:	4b11      	ldr	r3, [pc, #68]	@ (80109e8 <HAL_InitTick+0x60>)
 80109a2:	781b      	ldrb	r3, [r3, #0]
 80109a4:	4619      	mov	r1, r3
 80109a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80109aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80109ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80109b2:	4618      	mov	r0, r3
 80109b4:	f000 f98b 	bl	8010cce <HAL_SYSTICK_Config>
 80109b8:	4603      	mov	r3, r0
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d001      	beq.n	80109c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80109be:	2301      	movs	r3, #1
 80109c0:	e00e      	b.n	80109e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2b0f      	cmp	r3, #15
 80109c6:	d80a      	bhi.n	80109de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80109c8:	2200      	movs	r2, #0
 80109ca:	6879      	ldr	r1, [r7, #4]
 80109cc:	f04f 30ff 	mov.w	r0, #4294967295
 80109d0:	f000 f951 	bl	8010c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80109d4:	4a06      	ldr	r2, [pc, #24]	@ (80109f0 <HAL_InitTick+0x68>)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80109da:	2300      	movs	r3, #0
 80109dc:	e000      	b.n	80109e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80109de:	2301      	movs	r3, #1
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3708      	adds	r7, #8
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}
 80109e8:	24000028 	.word	0x24000028
 80109ec:	2400001c 	.word	0x2400001c
 80109f0:	24000024 	.word	0x24000024

080109f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80109f4:	b480      	push	{r7}
 80109f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80109f8:	4b06      	ldr	r3, [pc, #24]	@ (8010a14 <HAL_IncTick+0x20>)
 80109fa:	781b      	ldrb	r3, [r3, #0]
 80109fc:	461a      	mov	r2, r3
 80109fe:	4b06      	ldr	r3, [pc, #24]	@ (8010a18 <HAL_IncTick+0x24>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	4413      	add	r3, r2
 8010a04:	4a04      	ldr	r2, [pc, #16]	@ (8010a18 <HAL_IncTick+0x24>)
 8010a06:	6013      	str	r3, [r2, #0]
}
 8010a08:	bf00      	nop
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a10:	4770      	bx	lr
 8010a12:	bf00      	nop
 8010a14:	24000028 	.word	0x24000028
 8010a18:	24000414 	.word	0x24000414

08010a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010a1c:	b480      	push	{r7}
 8010a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8010a20:	4b03      	ldr	r3, [pc, #12]	@ (8010a30 <HAL_GetTick+0x14>)
 8010a22:	681b      	ldr	r3, [r3, #0]
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	46bd      	mov	sp, r7
 8010a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2c:	4770      	bx	lr
 8010a2e:	bf00      	nop
 8010a30:	24000414 	.word	0x24000414

08010a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b084      	sub	sp, #16
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010a3c:	f7ff ffee 	bl	8010a1c <HAL_GetTick>
 8010a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a4c:	d005      	beq.n	8010a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8010a78 <HAL_Delay+0x44>)
 8010a50:	781b      	ldrb	r3, [r3, #0]
 8010a52:	461a      	mov	r2, r3
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	4413      	add	r3, r2
 8010a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8010a5a:	bf00      	nop
 8010a5c:	f7ff ffde 	bl	8010a1c <HAL_GetTick>
 8010a60:	4602      	mov	r2, r0
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	1ad3      	subs	r3, r2, r3
 8010a66:	68fa      	ldr	r2, [r7, #12]
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d8f7      	bhi.n	8010a5c <HAL_Delay+0x28>
  {
  }
}
 8010a6c:	bf00      	nop
 8010a6e:	bf00      	nop
 8010a70:	3710      	adds	r7, #16
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}
 8010a76:	bf00      	nop
 8010a78:	24000028 	.word	0x24000028

08010a7c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8010a7c:	b480      	push	{r7}
 8010a7e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8010a80:	4b03      	ldr	r3, [pc, #12]	@ (8010a90 <HAL_GetREVID+0x14>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	0c1b      	lsrs	r3, r3, #16
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8e:	4770      	bx	lr
 8010a90:	5c001000 	.word	0x5c001000

08010a94 <__NVIC_SetPriorityGrouping>:
{
 8010a94:	b480      	push	{r7}
 8010a96:	b085      	sub	sp, #20
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f003 0307 	and.w	r3, r3, #7
 8010aa2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8010ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8010aa6:	68db      	ldr	r3, [r3, #12]
 8010aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010aaa:	68ba      	ldr	r2, [r7, #8]
 8010aac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8010ab0:	4013      	ands	r3, r2
 8010ab2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8010abc:	4b06      	ldr	r3, [pc, #24]	@ (8010ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8010abe:	4313      	orrs	r3, r2
 8010ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010ac2:	4a04      	ldr	r2, [pc, #16]	@ (8010ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	60d3      	str	r3, [r2, #12]
}
 8010ac8:	bf00      	nop
 8010aca:	3714      	adds	r7, #20
 8010acc:	46bd      	mov	sp, r7
 8010ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad2:	4770      	bx	lr
 8010ad4:	e000ed00 	.word	0xe000ed00
 8010ad8:	05fa0000 	.word	0x05fa0000

08010adc <__NVIC_GetPriorityGrouping>:
{
 8010adc:	b480      	push	{r7}
 8010ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010ae0:	4b04      	ldr	r3, [pc, #16]	@ (8010af4 <__NVIC_GetPriorityGrouping+0x18>)
 8010ae2:	68db      	ldr	r3, [r3, #12]
 8010ae4:	0a1b      	lsrs	r3, r3, #8
 8010ae6:	f003 0307 	and.w	r3, r3, #7
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	46bd      	mov	sp, r7
 8010aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af2:	4770      	bx	lr
 8010af4:	e000ed00 	.word	0xe000ed00

08010af8 <__NVIC_EnableIRQ>:
{
 8010af8:	b480      	push	{r7}
 8010afa:	b083      	sub	sp, #12
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	4603      	mov	r3, r0
 8010b00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	db0b      	blt.n	8010b22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010b0a:	88fb      	ldrh	r3, [r7, #6]
 8010b0c:	f003 021f 	and.w	r2, r3, #31
 8010b10:	4907      	ldr	r1, [pc, #28]	@ (8010b30 <__NVIC_EnableIRQ+0x38>)
 8010b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b16:	095b      	lsrs	r3, r3, #5
 8010b18:	2001      	movs	r0, #1
 8010b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8010b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010b22:	bf00      	nop
 8010b24:	370c      	adds	r7, #12
 8010b26:	46bd      	mov	sp, r7
 8010b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2c:	4770      	bx	lr
 8010b2e:	bf00      	nop
 8010b30:	e000e100 	.word	0xe000e100

08010b34 <__NVIC_SetPriority>:
{
 8010b34:	b480      	push	{r7}
 8010b36:	b083      	sub	sp, #12
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	6039      	str	r1, [r7, #0]
 8010b3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	db0a      	blt.n	8010b5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	b2da      	uxtb	r2, r3
 8010b4c:	490c      	ldr	r1, [pc, #48]	@ (8010b80 <__NVIC_SetPriority+0x4c>)
 8010b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b52:	0112      	lsls	r2, r2, #4
 8010b54:	b2d2      	uxtb	r2, r2
 8010b56:	440b      	add	r3, r1
 8010b58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8010b5c:	e00a      	b.n	8010b74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	b2da      	uxtb	r2, r3
 8010b62:	4908      	ldr	r1, [pc, #32]	@ (8010b84 <__NVIC_SetPriority+0x50>)
 8010b64:	88fb      	ldrh	r3, [r7, #6]
 8010b66:	f003 030f 	and.w	r3, r3, #15
 8010b6a:	3b04      	subs	r3, #4
 8010b6c:	0112      	lsls	r2, r2, #4
 8010b6e:	b2d2      	uxtb	r2, r2
 8010b70:	440b      	add	r3, r1
 8010b72:	761a      	strb	r2, [r3, #24]
}
 8010b74:	bf00      	nop
 8010b76:	370c      	adds	r7, #12
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7e:	4770      	bx	lr
 8010b80:	e000e100 	.word	0xe000e100
 8010b84:	e000ed00 	.word	0xe000ed00

08010b88 <NVIC_EncodePriority>:
{
 8010b88:	b480      	push	{r7}
 8010b8a:	b089      	sub	sp, #36	@ 0x24
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	60f8      	str	r0, [r7, #12]
 8010b90:	60b9      	str	r1, [r7, #8]
 8010b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	f003 0307 	and.w	r3, r3, #7
 8010b9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010b9c:	69fb      	ldr	r3, [r7, #28]
 8010b9e:	f1c3 0307 	rsb	r3, r3, #7
 8010ba2:	2b04      	cmp	r3, #4
 8010ba4:	bf28      	it	cs
 8010ba6:	2304      	movcs	r3, #4
 8010ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010baa:	69fb      	ldr	r3, [r7, #28]
 8010bac:	3304      	adds	r3, #4
 8010bae:	2b06      	cmp	r3, #6
 8010bb0:	d902      	bls.n	8010bb8 <NVIC_EncodePriority+0x30>
 8010bb2:	69fb      	ldr	r3, [r7, #28]
 8010bb4:	3b03      	subs	r3, #3
 8010bb6:	e000      	b.n	8010bba <NVIC_EncodePriority+0x32>
 8010bb8:	2300      	movs	r3, #0
 8010bba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8010bc0:	69bb      	ldr	r3, [r7, #24]
 8010bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8010bc6:	43da      	mvns	r2, r3
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	401a      	ands	r2, r3
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8010bda:	43d9      	mvns	r1, r3
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010be0:	4313      	orrs	r3, r2
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3724      	adds	r7, #36	@ 0x24
 8010be6:	46bd      	mov	sp, r7
 8010be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bec:	4770      	bx	lr
	...

08010bf0 <__NVIC_SystemReset>:
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8010bf4:	f3bf 8f4f 	dsb	sy
}
 8010bf8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8010bfa:	4b06      	ldr	r3, [pc, #24]	@ (8010c14 <__NVIC_SystemReset+0x24>)
 8010bfc:	68db      	ldr	r3, [r3, #12]
 8010bfe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8010c02:	4904      	ldr	r1, [pc, #16]	@ (8010c14 <__NVIC_SystemReset+0x24>)
 8010c04:	4b04      	ldr	r3, [pc, #16]	@ (8010c18 <__NVIC_SystemReset+0x28>)
 8010c06:	4313      	orrs	r3, r2
 8010c08:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8010c0a:	f3bf 8f4f 	dsb	sy
}
 8010c0e:	bf00      	nop
    __NOP();
 8010c10:	bf00      	nop
 8010c12:	e7fd      	b.n	8010c10 <__NVIC_SystemReset+0x20>
 8010c14:	e000ed00 	.word	0xe000ed00
 8010c18:	05fa0004 	.word	0x05fa0004

08010c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b082      	sub	sp, #8
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	3b01      	subs	r3, #1
 8010c28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010c2c:	d301      	bcc.n	8010c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010c2e:	2301      	movs	r3, #1
 8010c30:	e00f      	b.n	8010c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010c32:	4a0a      	ldr	r2, [pc, #40]	@ (8010c5c <SysTick_Config+0x40>)
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	3b01      	subs	r3, #1
 8010c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010c3a:	210f      	movs	r1, #15
 8010c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c40:	f7ff ff78 	bl	8010b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010c44:	4b05      	ldr	r3, [pc, #20]	@ (8010c5c <SysTick_Config+0x40>)
 8010c46:	2200      	movs	r2, #0
 8010c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010c4a:	4b04      	ldr	r3, [pc, #16]	@ (8010c5c <SysTick_Config+0x40>)
 8010c4c:	2207      	movs	r2, #7
 8010c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010c50:	2300      	movs	r3, #0
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3708      	adds	r7, #8
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	e000e010 	.word	0xe000e010

08010c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b082      	sub	sp, #8
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f7ff ff13 	bl	8010a94 <__NVIC_SetPriorityGrouping>
}
 8010c6e:	bf00      	nop
 8010c70:	3708      	adds	r7, #8
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}

08010c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010c76:	b580      	push	{r7, lr}
 8010c78:	b086      	sub	sp, #24
 8010c7a:	af00      	add	r7, sp, #0
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	60b9      	str	r1, [r7, #8]
 8010c80:	607a      	str	r2, [r7, #4]
 8010c82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8010c84:	f7ff ff2a 	bl	8010adc <__NVIC_GetPriorityGrouping>
 8010c88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010c8a:	687a      	ldr	r2, [r7, #4]
 8010c8c:	68b9      	ldr	r1, [r7, #8]
 8010c8e:	6978      	ldr	r0, [r7, #20]
 8010c90:	f7ff ff7a 	bl	8010b88 <NVIC_EncodePriority>
 8010c94:	4602      	mov	r2, r0
 8010c96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010c9a:	4611      	mov	r1, r2
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f7ff ff49 	bl	8010b34 <__NVIC_SetPriority>
}
 8010ca2:	bf00      	nop
 8010ca4:	3718      	adds	r7, #24
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}

08010caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010caa:	b580      	push	{r7, lr}
 8010cac:	b082      	sub	sp, #8
 8010cae:	af00      	add	r7, sp, #0
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010cb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f7ff ff1d 	bl	8010af8 <__NVIC_EnableIRQ>
}
 8010cbe:	bf00      	nop
 8010cc0:	3708      	adds	r7, #8
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}

08010cc6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8010cc6:	b580      	push	{r7, lr}
 8010cc8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8010cca:	f7ff ff91 	bl	8010bf0 <__NVIC_SystemReset>

08010cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010cce:	b580      	push	{r7, lr}
 8010cd0:	b082      	sub	sp, #8
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010cd6:	6878      	ldr	r0, [r7, #4]
 8010cd8:	f7ff ffa0 	bl	8010c1c <SysTick_Config>
 8010cdc:	4603      	mov	r3, r0
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3708      	adds	r7, #8
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}
	...

08010ce8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8010ce8:	b480      	push	{r7}
 8010cea:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8010cec:	f3bf 8f5f 	dmb	sy
}
 8010cf0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8010cf2:	4b07      	ldr	r3, [pc, #28]	@ (8010d10 <HAL_MPU_Disable+0x28>)
 8010cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cf6:	4a06      	ldr	r2, [pc, #24]	@ (8010d10 <HAL_MPU_Disable+0x28>)
 8010cf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010cfc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8010cfe:	4b05      	ldr	r3, [pc, #20]	@ (8010d14 <HAL_MPU_Disable+0x2c>)
 8010d00:	2200      	movs	r2, #0
 8010d02:	605a      	str	r2, [r3, #4]
}
 8010d04:	bf00      	nop
 8010d06:	46bd      	mov	sp, r7
 8010d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0c:	4770      	bx	lr
 8010d0e:	bf00      	nop
 8010d10:	e000ed00 	.word	0xe000ed00
 8010d14:	e000ed90 	.word	0xe000ed90

08010d18 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8010d18:	b480      	push	{r7}
 8010d1a:	b083      	sub	sp, #12
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8010d20:	4a0b      	ldr	r2, [pc, #44]	@ (8010d50 <HAL_MPU_Enable+0x38>)
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f043 0301 	orr.w	r3, r3, #1
 8010d28:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8010d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8010d54 <HAL_MPU_Enable+0x3c>)
 8010d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d2e:	4a09      	ldr	r2, [pc, #36]	@ (8010d54 <HAL_MPU_Enable+0x3c>)
 8010d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010d34:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8010d36:	f3bf 8f4f 	dsb	sy
}
 8010d3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010d3c:	f3bf 8f6f 	isb	sy
}
 8010d40:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8010d42:	bf00      	nop
 8010d44:	370c      	adds	r7, #12
 8010d46:	46bd      	mov	sp, r7
 8010d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4c:	4770      	bx	lr
 8010d4e:	bf00      	nop
 8010d50:	e000ed90 	.word	0xe000ed90
 8010d54:	e000ed00 	.word	0xe000ed00

08010d58 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8010d58:	b480      	push	{r7}
 8010d5a:	b083      	sub	sp, #12
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	785a      	ldrb	r2, [r3, #1]
 8010d64:	4b1b      	ldr	r3, [pc, #108]	@ (8010dd4 <HAL_MPU_ConfigRegion+0x7c>)
 8010d66:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8010d68:	4b1a      	ldr	r3, [pc, #104]	@ (8010dd4 <HAL_MPU_ConfigRegion+0x7c>)
 8010d6a:	691b      	ldr	r3, [r3, #16]
 8010d6c:	4a19      	ldr	r2, [pc, #100]	@ (8010dd4 <HAL_MPU_ConfigRegion+0x7c>)
 8010d6e:	f023 0301 	bic.w	r3, r3, #1
 8010d72:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8010d74:	4a17      	ldr	r2, [pc, #92]	@ (8010dd4 <HAL_MPU_ConfigRegion+0x7c>)
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	7b1b      	ldrb	r3, [r3, #12]
 8010d80:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	7adb      	ldrb	r3, [r3, #11]
 8010d86:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8010d88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	7a9b      	ldrb	r3, [r3, #10]
 8010d8e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8010d90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	7b5b      	ldrb	r3, [r3, #13]
 8010d96:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8010d98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	7b9b      	ldrb	r3, [r3, #14]
 8010d9e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8010da0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	7bdb      	ldrb	r3, [r3, #15]
 8010da6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8010da8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	7a5b      	ldrb	r3, [r3, #9]
 8010dae:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8010db0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	7a1b      	ldrb	r3, [r3, #8]
 8010db6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8010db8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8010dba:	687a      	ldr	r2, [r7, #4]
 8010dbc:	7812      	ldrb	r2, [r2, #0]
 8010dbe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8010dc0:	4a04      	ldr	r2, [pc, #16]	@ (8010dd4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8010dc2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8010dc4:	6113      	str	r3, [r2, #16]
}
 8010dc6:	bf00      	nop
 8010dc8:	370c      	adds	r7, #12
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd0:	4770      	bx	lr
 8010dd2:	bf00      	nop
 8010dd4:	e000ed90 	.word	0xe000ed90

08010dd8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b086      	sub	sp, #24
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8010de0:	f7ff fe1c 	bl	8010a1c <HAL_GetTick>
 8010de4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d101      	bne.n	8010df0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8010dec:	2301      	movs	r3, #1
 8010dee:	e316      	b.n	801141e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	4a66      	ldr	r2, [pc, #408]	@ (8010f90 <HAL_DMA_Init+0x1b8>)
 8010df6:	4293      	cmp	r3, r2
 8010df8:	d04a      	beq.n	8010e90 <HAL_DMA_Init+0xb8>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	4a65      	ldr	r2, [pc, #404]	@ (8010f94 <HAL_DMA_Init+0x1bc>)
 8010e00:	4293      	cmp	r3, r2
 8010e02:	d045      	beq.n	8010e90 <HAL_DMA_Init+0xb8>
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	4a63      	ldr	r2, [pc, #396]	@ (8010f98 <HAL_DMA_Init+0x1c0>)
 8010e0a:	4293      	cmp	r3, r2
 8010e0c:	d040      	beq.n	8010e90 <HAL_DMA_Init+0xb8>
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	4a62      	ldr	r2, [pc, #392]	@ (8010f9c <HAL_DMA_Init+0x1c4>)
 8010e14:	4293      	cmp	r3, r2
 8010e16:	d03b      	beq.n	8010e90 <HAL_DMA_Init+0xb8>
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	4a60      	ldr	r2, [pc, #384]	@ (8010fa0 <HAL_DMA_Init+0x1c8>)
 8010e1e:	4293      	cmp	r3, r2
 8010e20:	d036      	beq.n	8010e90 <HAL_DMA_Init+0xb8>
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	4a5f      	ldr	r2, [pc, #380]	@ (8010fa4 <HAL_DMA_Init+0x1cc>)
 8010e28:	4293      	cmp	r3, r2
 8010e2a:	d031      	beq.n	8010e90 <HAL_DMA_Init+0xb8>
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	4a5d      	ldr	r2, [pc, #372]	@ (8010fa8 <HAL_DMA_Init+0x1d0>)
 8010e32:	4293      	cmp	r3, r2
 8010e34:	d02c      	beq.n	8010e90 <HAL_DMA_Init+0xb8>
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	4a5c      	ldr	r2, [pc, #368]	@ (8010fac <HAL_DMA_Init+0x1d4>)
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	d027      	beq.n	8010e90 <HAL_DMA_Init+0xb8>
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	4a5a      	ldr	r2, [pc, #360]	@ (8010fb0 <HAL_DMA_Init+0x1d8>)
 8010e46:	4293      	cmp	r3, r2
 8010e48:	d022      	beq.n	8010e90 <HAL_DMA_Init+0xb8>
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	4a59      	ldr	r2, [pc, #356]	@ (8010fb4 <HAL_DMA_Init+0x1dc>)
 8010e50:	4293      	cmp	r3, r2
 8010e52:	d01d      	beq.n	8010e90 <HAL_DMA_Init+0xb8>
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	4a57      	ldr	r2, [pc, #348]	@ (8010fb8 <HAL_DMA_Init+0x1e0>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d018      	beq.n	8010e90 <HAL_DMA_Init+0xb8>
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	4a56      	ldr	r2, [pc, #344]	@ (8010fbc <HAL_DMA_Init+0x1e4>)
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d013      	beq.n	8010e90 <HAL_DMA_Init+0xb8>
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	4a54      	ldr	r2, [pc, #336]	@ (8010fc0 <HAL_DMA_Init+0x1e8>)
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	d00e      	beq.n	8010e90 <HAL_DMA_Init+0xb8>
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	4a53      	ldr	r2, [pc, #332]	@ (8010fc4 <HAL_DMA_Init+0x1ec>)
 8010e78:	4293      	cmp	r3, r2
 8010e7a:	d009      	beq.n	8010e90 <HAL_DMA_Init+0xb8>
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	4a51      	ldr	r2, [pc, #324]	@ (8010fc8 <HAL_DMA_Init+0x1f0>)
 8010e82:	4293      	cmp	r3, r2
 8010e84:	d004      	beq.n	8010e90 <HAL_DMA_Init+0xb8>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	4a50      	ldr	r2, [pc, #320]	@ (8010fcc <HAL_DMA_Init+0x1f4>)
 8010e8c:	4293      	cmp	r3, r2
 8010e8e:	d101      	bne.n	8010e94 <HAL_DMA_Init+0xbc>
 8010e90:	2301      	movs	r3, #1
 8010e92:	e000      	b.n	8010e96 <HAL_DMA_Init+0xbe>
 8010e94:	2300      	movs	r3, #0
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	f000 813b 	beq.w	8011112 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	2202      	movs	r2, #2
 8010ea0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	4a37      	ldr	r2, [pc, #220]	@ (8010f90 <HAL_DMA_Init+0x1b8>)
 8010eb2:	4293      	cmp	r3, r2
 8010eb4:	d04a      	beq.n	8010f4c <HAL_DMA_Init+0x174>
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	4a36      	ldr	r2, [pc, #216]	@ (8010f94 <HAL_DMA_Init+0x1bc>)
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	d045      	beq.n	8010f4c <HAL_DMA_Init+0x174>
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	4a34      	ldr	r2, [pc, #208]	@ (8010f98 <HAL_DMA_Init+0x1c0>)
 8010ec6:	4293      	cmp	r3, r2
 8010ec8:	d040      	beq.n	8010f4c <HAL_DMA_Init+0x174>
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	4a33      	ldr	r2, [pc, #204]	@ (8010f9c <HAL_DMA_Init+0x1c4>)
 8010ed0:	4293      	cmp	r3, r2
 8010ed2:	d03b      	beq.n	8010f4c <HAL_DMA_Init+0x174>
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	4a31      	ldr	r2, [pc, #196]	@ (8010fa0 <HAL_DMA_Init+0x1c8>)
 8010eda:	4293      	cmp	r3, r2
 8010edc:	d036      	beq.n	8010f4c <HAL_DMA_Init+0x174>
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	4a30      	ldr	r2, [pc, #192]	@ (8010fa4 <HAL_DMA_Init+0x1cc>)
 8010ee4:	4293      	cmp	r3, r2
 8010ee6:	d031      	beq.n	8010f4c <HAL_DMA_Init+0x174>
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	4a2e      	ldr	r2, [pc, #184]	@ (8010fa8 <HAL_DMA_Init+0x1d0>)
 8010eee:	4293      	cmp	r3, r2
 8010ef0:	d02c      	beq.n	8010f4c <HAL_DMA_Init+0x174>
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	4a2d      	ldr	r2, [pc, #180]	@ (8010fac <HAL_DMA_Init+0x1d4>)
 8010ef8:	4293      	cmp	r3, r2
 8010efa:	d027      	beq.n	8010f4c <HAL_DMA_Init+0x174>
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4a2b      	ldr	r2, [pc, #172]	@ (8010fb0 <HAL_DMA_Init+0x1d8>)
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d022      	beq.n	8010f4c <HAL_DMA_Init+0x174>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	4a2a      	ldr	r2, [pc, #168]	@ (8010fb4 <HAL_DMA_Init+0x1dc>)
 8010f0c:	4293      	cmp	r3, r2
 8010f0e:	d01d      	beq.n	8010f4c <HAL_DMA_Init+0x174>
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	4a28      	ldr	r2, [pc, #160]	@ (8010fb8 <HAL_DMA_Init+0x1e0>)
 8010f16:	4293      	cmp	r3, r2
 8010f18:	d018      	beq.n	8010f4c <HAL_DMA_Init+0x174>
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	4a27      	ldr	r2, [pc, #156]	@ (8010fbc <HAL_DMA_Init+0x1e4>)
 8010f20:	4293      	cmp	r3, r2
 8010f22:	d013      	beq.n	8010f4c <HAL_DMA_Init+0x174>
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	4a25      	ldr	r2, [pc, #148]	@ (8010fc0 <HAL_DMA_Init+0x1e8>)
 8010f2a:	4293      	cmp	r3, r2
 8010f2c:	d00e      	beq.n	8010f4c <HAL_DMA_Init+0x174>
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	4a24      	ldr	r2, [pc, #144]	@ (8010fc4 <HAL_DMA_Init+0x1ec>)
 8010f34:	4293      	cmp	r3, r2
 8010f36:	d009      	beq.n	8010f4c <HAL_DMA_Init+0x174>
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	4a22      	ldr	r2, [pc, #136]	@ (8010fc8 <HAL_DMA_Init+0x1f0>)
 8010f3e:	4293      	cmp	r3, r2
 8010f40:	d004      	beq.n	8010f4c <HAL_DMA_Init+0x174>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	4a21      	ldr	r2, [pc, #132]	@ (8010fcc <HAL_DMA_Init+0x1f4>)
 8010f48:	4293      	cmp	r3, r2
 8010f4a:	d108      	bne.n	8010f5e <HAL_DMA_Init+0x186>
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	681a      	ldr	r2, [r3, #0]
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	f022 0201 	bic.w	r2, r2, #1
 8010f5a:	601a      	str	r2, [r3, #0]
 8010f5c:	e007      	b.n	8010f6e <HAL_DMA_Init+0x196>
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	681a      	ldr	r2, [r3, #0]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	f022 0201 	bic.w	r2, r2, #1
 8010f6c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8010f6e:	e02f      	b.n	8010fd0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010f70:	f7ff fd54 	bl	8010a1c <HAL_GetTick>
 8010f74:	4602      	mov	r2, r0
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	1ad3      	subs	r3, r2, r3
 8010f7a:	2b05      	cmp	r3, #5
 8010f7c:	d928      	bls.n	8010fd0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2220      	movs	r2, #32
 8010f82:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2203      	movs	r2, #3
 8010f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	e246      	b.n	801141e <HAL_DMA_Init+0x646>
 8010f90:	40020010 	.word	0x40020010
 8010f94:	40020028 	.word	0x40020028
 8010f98:	40020040 	.word	0x40020040
 8010f9c:	40020058 	.word	0x40020058
 8010fa0:	40020070 	.word	0x40020070
 8010fa4:	40020088 	.word	0x40020088
 8010fa8:	400200a0 	.word	0x400200a0
 8010fac:	400200b8 	.word	0x400200b8
 8010fb0:	40020410 	.word	0x40020410
 8010fb4:	40020428 	.word	0x40020428
 8010fb8:	40020440 	.word	0x40020440
 8010fbc:	40020458 	.word	0x40020458
 8010fc0:	40020470 	.word	0x40020470
 8010fc4:	40020488 	.word	0x40020488
 8010fc8:	400204a0 	.word	0x400204a0
 8010fcc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	f003 0301 	and.w	r3, r3, #1
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d1c8      	bne.n	8010f70 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8010fe6:	697a      	ldr	r2, [r7, #20]
 8010fe8:	4b83      	ldr	r3, [pc, #524]	@ (80111f8 <HAL_DMA_Init+0x420>)
 8010fea:	4013      	ands	r3, r2
 8010fec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8010ff6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	691b      	ldr	r3, [r3, #16]
 8010ffc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011002:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	699b      	ldr	r3, [r3, #24]
 8011008:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801100e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	6a1b      	ldr	r3, [r3, #32]
 8011014:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8011016:	697a      	ldr	r2, [r7, #20]
 8011018:	4313      	orrs	r3, r2
 801101a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011020:	2b04      	cmp	r3, #4
 8011022:	d107      	bne.n	8011034 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801102c:	4313      	orrs	r3, r2
 801102e:	697a      	ldr	r2, [r7, #20]
 8011030:	4313      	orrs	r3, r2
 8011032:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8011034:	4b71      	ldr	r3, [pc, #452]	@ (80111fc <HAL_DMA_Init+0x424>)
 8011036:	681a      	ldr	r2, [r3, #0]
 8011038:	4b71      	ldr	r3, [pc, #452]	@ (8011200 <HAL_DMA_Init+0x428>)
 801103a:	4013      	ands	r3, r2
 801103c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011040:	d328      	bcc.n	8011094 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	685b      	ldr	r3, [r3, #4]
 8011046:	2b28      	cmp	r3, #40	@ 0x28
 8011048:	d903      	bls.n	8011052 <HAL_DMA_Init+0x27a>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011050:	d917      	bls.n	8011082 <HAL_DMA_Init+0x2aa>
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	685b      	ldr	r3, [r3, #4]
 8011056:	2b3e      	cmp	r3, #62	@ 0x3e
 8011058:	d903      	bls.n	8011062 <HAL_DMA_Init+0x28a>
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	2b42      	cmp	r3, #66	@ 0x42
 8011060:	d90f      	bls.n	8011082 <HAL_DMA_Init+0x2aa>
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	685b      	ldr	r3, [r3, #4]
 8011066:	2b46      	cmp	r3, #70	@ 0x46
 8011068:	d903      	bls.n	8011072 <HAL_DMA_Init+0x29a>
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	685b      	ldr	r3, [r3, #4]
 801106e:	2b48      	cmp	r3, #72	@ 0x48
 8011070:	d907      	bls.n	8011082 <HAL_DMA_Init+0x2aa>
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	685b      	ldr	r3, [r3, #4]
 8011076:	2b4e      	cmp	r3, #78	@ 0x4e
 8011078:	d905      	bls.n	8011086 <HAL_DMA_Init+0x2ae>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	2b52      	cmp	r3, #82	@ 0x52
 8011080:	d801      	bhi.n	8011086 <HAL_DMA_Init+0x2ae>
 8011082:	2301      	movs	r3, #1
 8011084:	e000      	b.n	8011088 <HAL_DMA_Init+0x2b0>
 8011086:	2300      	movs	r3, #0
 8011088:	2b00      	cmp	r3, #0
 801108a:	d003      	beq.n	8011094 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 801108c:	697b      	ldr	r3, [r7, #20]
 801108e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011092:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	697a      	ldr	r2, [r7, #20]
 801109a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	695b      	ldr	r3, [r3, #20]
 80110a2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80110a4:	697b      	ldr	r3, [r7, #20]
 80110a6:	f023 0307 	bic.w	r3, r3, #7
 80110aa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110b0:	697a      	ldr	r2, [r7, #20]
 80110b2:	4313      	orrs	r3, r2
 80110b4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110ba:	2b04      	cmp	r3, #4
 80110bc:	d117      	bne.n	80110ee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110c2:	697a      	ldr	r2, [r7, #20]
 80110c4:	4313      	orrs	r3, r2
 80110c6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d00e      	beq.n	80110ee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80110d0:	6878      	ldr	r0, [r7, #4]
 80110d2:	f001 fc23 	bl	801291c <DMA_CheckFifoParam>
 80110d6:	4603      	mov	r3, r0
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d008      	beq.n	80110ee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	2240      	movs	r2, #64	@ 0x40
 80110e0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	2201      	movs	r2, #1
 80110e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80110ea:	2301      	movs	r3, #1
 80110ec:	e197      	b.n	801141e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	697a      	ldr	r2, [r7, #20]
 80110f4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	f001 fb5e 	bl	80127b8 <DMA_CalcBaseAndBitshift>
 80110fc:	4603      	mov	r3, r0
 80110fe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011104:	f003 031f 	and.w	r3, r3, #31
 8011108:	223f      	movs	r2, #63	@ 0x3f
 801110a:	409a      	lsls	r2, r3
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	609a      	str	r2, [r3, #8]
 8011110:	e0cd      	b.n	80112ae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	4a3b      	ldr	r2, [pc, #236]	@ (8011204 <HAL_DMA_Init+0x42c>)
 8011118:	4293      	cmp	r3, r2
 801111a:	d022      	beq.n	8011162 <HAL_DMA_Init+0x38a>
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	4a39      	ldr	r2, [pc, #228]	@ (8011208 <HAL_DMA_Init+0x430>)
 8011122:	4293      	cmp	r3, r2
 8011124:	d01d      	beq.n	8011162 <HAL_DMA_Init+0x38a>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	4a38      	ldr	r2, [pc, #224]	@ (801120c <HAL_DMA_Init+0x434>)
 801112c:	4293      	cmp	r3, r2
 801112e:	d018      	beq.n	8011162 <HAL_DMA_Init+0x38a>
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	4a36      	ldr	r2, [pc, #216]	@ (8011210 <HAL_DMA_Init+0x438>)
 8011136:	4293      	cmp	r3, r2
 8011138:	d013      	beq.n	8011162 <HAL_DMA_Init+0x38a>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	4a35      	ldr	r2, [pc, #212]	@ (8011214 <HAL_DMA_Init+0x43c>)
 8011140:	4293      	cmp	r3, r2
 8011142:	d00e      	beq.n	8011162 <HAL_DMA_Init+0x38a>
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	4a33      	ldr	r2, [pc, #204]	@ (8011218 <HAL_DMA_Init+0x440>)
 801114a:	4293      	cmp	r3, r2
 801114c:	d009      	beq.n	8011162 <HAL_DMA_Init+0x38a>
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	4a32      	ldr	r2, [pc, #200]	@ (801121c <HAL_DMA_Init+0x444>)
 8011154:	4293      	cmp	r3, r2
 8011156:	d004      	beq.n	8011162 <HAL_DMA_Init+0x38a>
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	4a30      	ldr	r2, [pc, #192]	@ (8011220 <HAL_DMA_Init+0x448>)
 801115e:	4293      	cmp	r3, r2
 8011160:	d101      	bne.n	8011166 <HAL_DMA_Init+0x38e>
 8011162:	2301      	movs	r3, #1
 8011164:	e000      	b.n	8011168 <HAL_DMA_Init+0x390>
 8011166:	2300      	movs	r3, #0
 8011168:	2b00      	cmp	r3, #0
 801116a:	f000 8097 	beq.w	801129c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	4a24      	ldr	r2, [pc, #144]	@ (8011204 <HAL_DMA_Init+0x42c>)
 8011174:	4293      	cmp	r3, r2
 8011176:	d021      	beq.n	80111bc <HAL_DMA_Init+0x3e4>
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	4a22      	ldr	r2, [pc, #136]	@ (8011208 <HAL_DMA_Init+0x430>)
 801117e:	4293      	cmp	r3, r2
 8011180:	d01c      	beq.n	80111bc <HAL_DMA_Init+0x3e4>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	4a21      	ldr	r2, [pc, #132]	@ (801120c <HAL_DMA_Init+0x434>)
 8011188:	4293      	cmp	r3, r2
 801118a:	d017      	beq.n	80111bc <HAL_DMA_Init+0x3e4>
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	4a1f      	ldr	r2, [pc, #124]	@ (8011210 <HAL_DMA_Init+0x438>)
 8011192:	4293      	cmp	r3, r2
 8011194:	d012      	beq.n	80111bc <HAL_DMA_Init+0x3e4>
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	4a1e      	ldr	r2, [pc, #120]	@ (8011214 <HAL_DMA_Init+0x43c>)
 801119c:	4293      	cmp	r3, r2
 801119e:	d00d      	beq.n	80111bc <HAL_DMA_Init+0x3e4>
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	4a1c      	ldr	r2, [pc, #112]	@ (8011218 <HAL_DMA_Init+0x440>)
 80111a6:	4293      	cmp	r3, r2
 80111a8:	d008      	beq.n	80111bc <HAL_DMA_Init+0x3e4>
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	4a1b      	ldr	r2, [pc, #108]	@ (801121c <HAL_DMA_Init+0x444>)
 80111b0:	4293      	cmp	r3, r2
 80111b2:	d003      	beq.n	80111bc <HAL_DMA_Init+0x3e4>
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	4a19      	ldr	r2, [pc, #100]	@ (8011220 <HAL_DMA_Init+0x448>)
 80111ba:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2202      	movs	r2, #2
 80111c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2200      	movs	r2, #0
 80111c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80111d4:	697a      	ldr	r2, [r7, #20]
 80111d6:	4b13      	ldr	r3, [pc, #76]	@ (8011224 <HAL_DMA_Init+0x44c>)
 80111d8:	4013      	ands	r3, r2
 80111da:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	689b      	ldr	r3, [r3, #8]
 80111e0:	2b40      	cmp	r3, #64	@ 0x40
 80111e2:	d021      	beq.n	8011228 <HAL_DMA_Init+0x450>
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	689b      	ldr	r3, [r3, #8]
 80111e8:	2b80      	cmp	r3, #128	@ 0x80
 80111ea:	d102      	bne.n	80111f2 <HAL_DMA_Init+0x41a>
 80111ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80111f0:	e01b      	b.n	801122a <HAL_DMA_Init+0x452>
 80111f2:	2300      	movs	r3, #0
 80111f4:	e019      	b.n	801122a <HAL_DMA_Init+0x452>
 80111f6:	bf00      	nop
 80111f8:	fe10803f 	.word	0xfe10803f
 80111fc:	5c001000 	.word	0x5c001000
 8011200:	ffff0000 	.word	0xffff0000
 8011204:	58025408 	.word	0x58025408
 8011208:	5802541c 	.word	0x5802541c
 801120c:	58025430 	.word	0x58025430
 8011210:	58025444 	.word	0x58025444
 8011214:	58025458 	.word	0x58025458
 8011218:	5802546c 	.word	0x5802546c
 801121c:	58025480 	.word	0x58025480
 8011220:	58025494 	.word	0x58025494
 8011224:	fffe000f 	.word	0xfffe000f
 8011228:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801122a:	687a      	ldr	r2, [r7, #4]
 801122c:	68d2      	ldr	r2, [r2, #12]
 801122e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8011230:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	691b      	ldr	r3, [r3, #16]
 8011236:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8011238:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	695b      	ldr	r3, [r3, #20]
 801123e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8011240:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	699b      	ldr	r3, [r3, #24]
 8011246:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8011248:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	69db      	ldr	r3, [r3, #28]
 801124e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8011250:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6a1b      	ldr	r3, [r3, #32]
 8011256:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8011258:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801125a:	697a      	ldr	r2, [r7, #20]
 801125c:	4313      	orrs	r3, r2
 801125e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	697a      	ldr	r2, [r7, #20]
 8011266:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	461a      	mov	r2, r3
 801126e:	4b6e      	ldr	r3, [pc, #440]	@ (8011428 <HAL_DMA_Init+0x650>)
 8011270:	4413      	add	r3, r2
 8011272:	4a6e      	ldr	r2, [pc, #440]	@ (801142c <HAL_DMA_Init+0x654>)
 8011274:	fba2 2303 	umull	r2, r3, r2, r3
 8011278:	091b      	lsrs	r3, r3, #4
 801127a:	009a      	lsls	r2, r3, #2
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f001 fa99 	bl	80127b8 <DMA_CalcBaseAndBitshift>
 8011286:	4603      	mov	r3, r0
 8011288:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801128e:	f003 031f 	and.w	r3, r3, #31
 8011292:	2201      	movs	r2, #1
 8011294:	409a      	lsls	r2, r3
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	605a      	str	r2, [r3, #4]
 801129a:	e008      	b.n	80112ae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2240      	movs	r2, #64	@ 0x40
 80112a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	2203      	movs	r2, #3
 80112a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80112aa:	2301      	movs	r3, #1
 80112ac:	e0b7      	b.n	801141e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	4a5f      	ldr	r2, [pc, #380]	@ (8011430 <HAL_DMA_Init+0x658>)
 80112b4:	4293      	cmp	r3, r2
 80112b6:	d072      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	4a5d      	ldr	r2, [pc, #372]	@ (8011434 <HAL_DMA_Init+0x65c>)
 80112be:	4293      	cmp	r3, r2
 80112c0:	d06d      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	4a5c      	ldr	r2, [pc, #368]	@ (8011438 <HAL_DMA_Init+0x660>)
 80112c8:	4293      	cmp	r3, r2
 80112ca:	d068      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	4a5a      	ldr	r2, [pc, #360]	@ (801143c <HAL_DMA_Init+0x664>)
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d063      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	4a59      	ldr	r2, [pc, #356]	@ (8011440 <HAL_DMA_Init+0x668>)
 80112dc:	4293      	cmp	r3, r2
 80112de:	d05e      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	4a57      	ldr	r2, [pc, #348]	@ (8011444 <HAL_DMA_Init+0x66c>)
 80112e6:	4293      	cmp	r3, r2
 80112e8:	d059      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	4a56      	ldr	r2, [pc, #344]	@ (8011448 <HAL_DMA_Init+0x670>)
 80112f0:	4293      	cmp	r3, r2
 80112f2:	d054      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	4a54      	ldr	r2, [pc, #336]	@ (801144c <HAL_DMA_Init+0x674>)
 80112fa:	4293      	cmp	r3, r2
 80112fc:	d04f      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	4a53      	ldr	r2, [pc, #332]	@ (8011450 <HAL_DMA_Init+0x678>)
 8011304:	4293      	cmp	r3, r2
 8011306:	d04a      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	4a51      	ldr	r2, [pc, #324]	@ (8011454 <HAL_DMA_Init+0x67c>)
 801130e:	4293      	cmp	r3, r2
 8011310:	d045      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	4a50      	ldr	r2, [pc, #320]	@ (8011458 <HAL_DMA_Init+0x680>)
 8011318:	4293      	cmp	r3, r2
 801131a:	d040      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	4a4e      	ldr	r2, [pc, #312]	@ (801145c <HAL_DMA_Init+0x684>)
 8011322:	4293      	cmp	r3, r2
 8011324:	d03b      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	4a4d      	ldr	r2, [pc, #308]	@ (8011460 <HAL_DMA_Init+0x688>)
 801132c:	4293      	cmp	r3, r2
 801132e:	d036      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	4a4b      	ldr	r2, [pc, #300]	@ (8011464 <HAL_DMA_Init+0x68c>)
 8011336:	4293      	cmp	r3, r2
 8011338:	d031      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	4a4a      	ldr	r2, [pc, #296]	@ (8011468 <HAL_DMA_Init+0x690>)
 8011340:	4293      	cmp	r3, r2
 8011342:	d02c      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	4a48      	ldr	r2, [pc, #288]	@ (801146c <HAL_DMA_Init+0x694>)
 801134a:	4293      	cmp	r3, r2
 801134c:	d027      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	4a47      	ldr	r2, [pc, #284]	@ (8011470 <HAL_DMA_Init+0x698>)
 8011354:	4293      	cmp	r3, r2
 8011356:	d022      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	4a45      	ldr	r2, [pc, #276]	@ (8011474 <HAL_DMA_Init+0x69c>)
 801135e:	4293      	cmp	r3, r2
 8011360:	d01d      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	4a44      	ldr	r2, [pc, #272]	@ (8011478 <HAL_DMA_Init+0x6a0>)
 8011368:	4293      	cmp	r3, r2
 801136a:	d018      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	4a42      	ldr	r2, [pc, #264]	@ (801147c <HAL_DMA_Init+0x6a4>)
 8011372:	4293      	cmp	r3, r2
 8011374:	d013      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	4a41      	ldr	r2, [pc, #260]	@ (8011480 <HAL_DMA_Init+0x6a8>)
 801137c:	4293      	cmp	r3, r2
 801137e:	d00e      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	4a3f      	ldr	r2, [pc, #252]	@ (8011484 <HAL_DMA_Init+0x6ac>)
 8011386:	4293      	cmp	r3, r2
 8011388:	d009      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	4a3e      	ldr	r2, [pc, #248]	@ (8011488 <HAL_DMA_Init+0x6b0>)
 8011390:	4293      	cmp	r3, r2
 8011392:	d004      	beq.n	801139e <HAL_DMA_Init+0x5c6>
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	4a3c      	ldr	r2, [pc, #240]	@ (801148c <HAL_DMA_Init+0x6b4>)
 801139a:	4293      	cmp	r3, r2
 801139c:	d101      	bne.n	80113a2 <HAL_DMA_Init+0x5ca>
 801139e:	2301      	movs	r3, #1
 80113a0:	e000      	b.n	80113a4 <HAL_DMA_Init+0x5cc>
 80113a2:	2300      	movs	r3, #0
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d032      	beq.n	801140e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f001 fb33 	bl	8012a14 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	689b      	ldr	r3, [r3, #8]
 80113b2:	2b80      	cmp	r3, #128	@ 0x80
 80113b4:	d102      	bne.n	80113bc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2200      	movs	r2, #0
 80113ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	685a      	ldr	r2, [r3, #4]
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80113c4:	b2d2      	uxtb	r2, r2
 80113c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80113cc:	687a      	ldr	r2, [r7, #4]
 80113ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80113d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	685b      	ldr	r3, [r3, #4]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d010      	beq.n	80113fc <HAL_DMA_Init+0x624>
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	685b      	ldr	r3, [r3, #4]
 80113de:	2b08      	cmp	r3, #8
 80113e0:	d80c      	bhi.n	80113fc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f001 fbb0 	bl	8012b48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80113ec:	2200      	movs	r2, #0
 80113ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113f4:	687a      	ldr	r2, [r7, #4]
 80113f6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80113f8:	605a      	str	r2, [r3, #4]
 80113fa:	e008      	b.n	801140e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2200      	movs	r2, #0
 8011400:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2200      	movs	r2, #0
 8011406:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2200      	movs	r2, #0
 801140c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	2200      	movs	r2, #0
 8011412:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2201      	movs	r2, #1
 8011418:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 801141c:	2300      	movs	r3, #0
}
 801141e:	4618      	mov	r0, r3
 8011420:	3718      	adds	r7, #24
 8011422:	46bd      	mov	sp, r7
 8011424:	bd80      	pop	{r7, pc}
 8011426:	bf00      	nop
 8011428:	a7fdabf8 	.word	0xa7fdabf8
 801142c:	cccccccd 	.word	0xcccccccd
 8011430:	40020010 	.word	0x40020010
 8011434:	40020028 	.word	0x40020028
 8011438:	40020040 	.word	0x40020040
 801143c:	40020058 	.word	0x40020058
 8011440:	40020070 	.word	0x40020070
 8011444:	40020088 	.word	0x40020088
 8011448:	400200a0 	.word	0x400200a0
 801144c:	400200b8 	.word	0x400200b8
 8011450:	40020410 	.word	0x40020410
 8011454:	40020428 	.word	0x40020428
 8011458:	40020440 	.word	0x40020440
 801145c:	40020458 	.word	0x40020458
 8011460:	40020470 	.word	0x40020470
 8011464:	40020488 	.word	0x40020488
 8011468:	400204a0 	.word	0x400204a0
 801146c:	400204b8 	.word	0x400204b8
 8011470:	58025408 	.word	0x58025408
 8011474:	5802541c 	.word	0x5802541c
 8011478:	58025430 	.word	0x58025430
 801147c:	58025444 	.word	0x58025444
 8011480:	58025458 	.word	0x58025458
 8011484:	5802546c 	.word	0x5802546c
 8011488:	58025480 	.word	0x58025480
 801148c:	58025494 	.word	0x58025494

08011490 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b086      	sub	sp, #24
 8011494:	af00      	add	r7, sp, #0
 8011496:	60f8      	str	r0, [r7, #12]
 8011498:	60b9      	str	r1, [r7, #8]
 801149a:	607a      	str	r2, [r7, #4]
 801149c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801149e:	2300      	movs	r3, #0
 80114a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d101      	bne.n	80114ac <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 80114a8:	2301      	movs	r3, #1
 80114aa:	e0ec      	b.n	8011686 <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80114b2:	2b01      	cmp	r3, #1
 80114b4:	d101      	bne.n	80114ba <HAL_DMA_Start+0x2a>
 80114b6:	2302      	movs	r3, #2
 80114b8:	e0e5      	b.n	8011686 <HAL_DMA_Start+0x1f6>
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	2201      	movs	r2, #1
 80114be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80114c8:	b2db      	uxtb	r3, r3
 80114ca:	2b01      	cmp	r3, #1
 80114cc:	f040 80d0 	bne.w	8011670 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	2202      	movs	r2, #2
 80114d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	2200      	movs	r2, #0
 80114dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	4a6b      	ldr	r2, [pc, #428]	@ (8011690 <HAL_DMA_Start+0x200>)
 80114e4:	4293      	cmp	r3, r2
 80114e6:	d04a      	beq.n	801157e <HAL_DMA_Start+0xee>
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	4a69      	ldr	r2, [pc, #420]	@ (8011694 <HAL_DMA_Start+0x204>)
 80114ee:	4293      	cmp	r3, r2
 80114f0:	d045      	beq.n	801157e <HAL_DMA_Start+0xee>
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	4a68      	ldr	r2, [pc, #416]	@ (8011698 <HAL_DMA_Start+0x208>)
 80114f8:	4293      	cmp	r3, r2
 80114fa:	d040      	beq.n	801157e <HAL_DMA_Start+0xee>
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	4a66      	ldr	r2, [pc, #408]	@ (801169c <HAL_DMA_Start+0x20c>)
 8011502:	4293      	cmp	r3, r2
 8011504:	d03b      	beq.n	801157e <HAL_DMA_Start+0xee>
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	4a65      	ldr	r2, [pc, #404]	@ (80116a0 <HAL_DMA_Start+0x210>)
 801150c:	4293      	cmp	r3, r2
 801150e:	d036      	beq.n	801157e <HAL_DMA_Start+0xee>
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	4a63      	ldr	r2, [pc, #396]	@ (80116a4 <HAL_DMA_Start+0x214>)
 8011516:	4293      	cmp	r3, r2
 8011518:	d031      	beq.n	801157e <HAL_DMA_Start+0xee>
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	4a62      	ldr	r2, [pc, #392]	@ (80116a8 <HAL_DMA_Start+0x218>)
 8011520:	4293      	cmp	r3, r2
 8011522:	d02c      	beq.n	801157e <HAL_DMA_Start+0xee>
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	4a60      	ldr	r2, [pc, #384]	@ (80116ac <HAL_DMA_Start+0x21c>)
 801152a:	4293      	cmp	r3, r2
 801152c:	d027      	beq.n	801157e <HAL_DMA_Start+0xee>
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	4a5f      	ldr	r2, [pc, #380]	@ (80116b0 <HAL_DMA_Start+0x220>)
 8011534:	4293      	cmp	r3, r2
 8011536:	d022      	beq.n	801157e <HAL_DMA_Start+0xee>
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	4a5d      	ldr	r2, [pc, #372]	@ (80116b4 <HAL_DMA_Start+0x224>)
 801153e:	4293      	cmp	r3, r2
 8011540:	d01d      	beq.n	801157e <HAL_DMA_Start+0xee>
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	4a5c      	ldr	r2, [pc, #368]	@ (80116b8 <HAL_DMA_Start+0x228>)
 8011548:	4293      	cmp	r3, r2
 801154a:	d018      	beq.n	801157e <HAL_DMA_Start+0xee>
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	4a5a      	ldr	r2, [pc, #360]	@ (80116bc <HAL_DMA_Start+0x22c>)
 8011552:	4293      	cmp	r3, r2
 8011554:	d013      	beq.n	801157e <HAL_DMA_Start+0xee>
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	4a59      	ldr	r2, [pc, #356]	@ (80116c0 <HAL_DMA_Start+0x230>)
 801155c:	4293      	cmp	r3, r2
 801155e:	d00e      	beq.n	801157e <HAL_DMA_Start+0xee>
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	4a57      	ldr	r2, [pc, #348]	@ (80116c4 <HAL_DMA_Start+0x234>)
 8011566:	4293      	cmp	r3, r2
 8011568:	d009      	beq.n	801157e <HAL_DMA_Start+0xee>
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	4a56      	ldr	r2, [pc, #344]	@ (80116c8 <HAL_DMA_Start+0x238>)
 8011570:	4293      	cmp	r3, r2
 8011572:	d004      	beq.n	801157e <HAL_DMA_Start+0xee>
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	4a54      	ldr	r2, [pc, #336]	@ (80116cc <HAL_DMA_Start+0x23c>)
 801157a:	4293      	cmp	r3, r2
 801157c:	d108      	bne.n	8011590 <HAL_DMA_Start+0x100>
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	681a      	ldr	r2, [r3, #0]
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	f022 0201 	bic.w	r2, r2, #1
 801158c:	601a      	str	r2, [r3, #0]
 801158e:	e007      	b.n	80115a0 <HAL_DMA_Start+0x110>
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	681a      	ldr	r2, [r3, #0]
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	f022 0201 	bic.w	r2, r2, #1
 801159e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	687a      	ldr	r2, [r7, #4]
 80115a4:	68b9      	ldr	r1, [r7, #8]
 80115a6:	68f8      	ldr	r0, [r7, #12]
 80115a8:	f000 ff5a 	bl	8012460 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	4a37      	ldr	r2, [pc, #220]	@ (8011690 <HAL_DMA_Start+0x200>)
 80115b2:	4293      	cmp	r3, r2
 80115b4:	d04a      	beq.n	801164c <HAL_DMA_Start+0x1bc>
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	4a36      	ldr	r2, [pc, #216]	@ (8011694 <HAL_DMA_Start+0x204>)
 80115bc:	4293      	cmp	r3, r2
 80115be:	d045      	beq.n	801164c <HAL_DMA_Start+0x1bc>
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	4a34      	ldr	r2, [pc, #208]	@ (8011698 <HAL_DMA_Start+0x208>)
 80115c6:	4293      	cmp	r3, r2
 80115c8:	d040      	beq.n	801164c <HAL_DMA_Start+0x1bc>
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	4a33      	ldr	r2, [pc, #204]	@ (801169c <HAL_DMA_Start+0x20c>)
 80115d0:	4293      	cmp	r3, r2
 80115d2:	d03b      	beq.n	801164c <HAL_DMA_Start+0x1bc>
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	4a31      	ldr	r2, [pc, #196]	@ (80116a0 <HAL_DMA_Start+0x210>)
 80115da:	4293      	cmp	r3, r2
 80115dc:	d036      	beq.n	801164c <HAL_DMA_Start+0x1bc>
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	4a30      	ldr	r2, [pc, #192]	@ (80116a4 <HAL_DMA_Start+0x214>)
 80115e4:	4293      	cmp	r3, r2
 80115e6:	d031      	beq.n	801164c <HAL_DMA_Start+0x1bc>
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	4a2e      	ldr	r2, [pc, #184]	@ (80116a8 <HAL_DMA_Start+0x218>)
 80115ee:	4293      	cmp	r3, r2
 80115f0:	d02c      	beq.n	801164c <HAL_DMA_Start+0x1bc>
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	4a2d      	ldr	r2, [pc, #180]	@ (80116ac <HAL_DMA_Start+0x21c>)
 80115f8:	4293      	cmp	r3, r2
 80115fa:	d027      	beq.n	801164c <HAL_DMA_Start+0x1bc>
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	4a2b      	ldr	r2, [pc, #172]	@ (80116b0 <HAL_DMA_Start+0x220>)
 8011602:	4293      	cmp	r3, r2
 8011604:	d022      	beq.n	801164c <HAL_DMA_Start+0x1bc>
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	4a2a      	ldr	r2, [pc, #168]	@ (80116b4 <HAL_DMA_Start+0x224>)
 801160c:	4293      	cmp	r3, r2
 801160e:	d01d      	beq.n	801164c <HAL_DMA_Start+0x1bc>
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	4a28      	ldr	r2, [pc, #160]	@ (80116b8 <HAL_DMA_Start+0x228>)
 8011616:	4293      	cmp	r3, r2
 8011618:	d018      	beq.n	801164c <HAL_DMA_Start+0x1bc>
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	4a27      	ldr	r2, [pc, #156]	@ (80116bc <HAL_DMA_Start+0x22c>)
 8011620:	4293      	cmp	r3, r2
 8011622:	d013      	beq.n	801164c <HAL_DMA_Start+0x1bc>
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	4a25      	ldr	r2, [pc, #148]	@ (80116c0 <HAL_DMA_Start+0x230>)
 801162a:	4293      	cmp	r3, r2
 801162c:	d00e      	beq.n	801164c <HAL_DMA_Start+0x1bc>
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	4a24      	ldr	r2, [pc, #144]	@ (80116c4 <HAL_DMA_Start+0x234>)
 8011634:	4293      	cmp	r3, r2
 8011636:	d009      	beq.n	801164c <HAL_DMA_Start+0x1bc>
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	4a22      	ldr	r2, [pc, #136]	@ (80116c8 <HAL_DMA_Start+0x238>)
 801163e:	4293      	cmp	r3, r2
 8011640:	d004      	beq.n	801164c <HAL_DMA_Start+0x1bc>
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	4a21      	ldr	r2, [pc, #132]	@ (80116cc <HAL_DMA_Start+0x23c>)
 8011648:	4293      	cmp	r3, r2
 801164a:	d108      	bne.n	801165e <HAL_DMA_Start+0x1ce>
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	681a      	ldr	r2, [r3, #0]
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	f042 0201 	orr.w	r2, r2, #1
 801165a:	601a      	str	r2, [r3, #0]
 801165c:	e012      	b.n	8011684 <HAL_DMA_Start+0x1f4>
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	681a      	ldr	r2, [r3, #0]
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	f042 0201 	orr.w	r2, r2, #1
 801166c:	601a      	str	r2, [r3, #0]
 801166e:	e009      	b.n	8011684 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011676:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	2200      	movs	r2, #0
 801167c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8011680:	2301      	movs	r3, #1
 8011682:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8011684:	7dfb      	ldrb	r3, [r7, #23]
}
 8011686:	4618      	mov	r0, r3
 8011688:	3718      	adds	r7, #24
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}
 801168e:	bf00      	nop
 8011690:	40020010 	.word	0x40020010
 8011694:	40020028 	.word	0x40020028
 8011698:	40020040 	.word	0x40020040
 801169c:	40020058 	.word	0x40020058
 80116a0:	40020070 	.word	0x40020070
 80116a4:	40020088 	.word	0x40020088
 80116a8:	400200a0 	.word	0x400200a0
 80116ac:	400200b8 	.word	0x400200b8
 80116b0:	40020410 	.word	0x40020410
 80116b4:	40020428 	.word	0x40020428
 80116b8:	40020440 	.word	0x40020440
 80116bc:	40020458 	.word	0x40020458
 80116c0:	40020470 	.word	0x40020470
 80116c4:	40020488 	.word	0x40020488
 80116c8:	400204a0 	.word	0x400204a0
 80116cc:	400204b8 	.word	0x400204b8

080116d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b086      	sub	sp, #24
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80116d8:	f7ff f9a0 	bl	8010a1c <HAL_GetTick>
 80116dc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d101      	bne.n	80116e8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80116e4:	2301      	movs	r3, #1
 80116e6:	e2dc      	b.n	8011ca2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80116ee:	b2db      	uxtb	r3, r3
 80116f0:	2b02      	cmp	r3, #2
 80116f2:	d008      	beq.n	8011706 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2280      	movs	r2, #128	@ 0x80
 80116f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	2200      	movs	r2, #0
 80116fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8011702:	2301      	movs	r3, #1
 8011704:	e2cd      	b.n	8011ca2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	4a76      	ldr	r2, [pc, #472]	@ (80118e4 <HAL_DMA_Abort+0x214>)
 801170c:	4293      	cmp	r3, r2
 801170e:	d04a      	beq.n	80117a6 <HAL_DMA_Abort+0xd6>
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	4a74      	ldr	r2, [pc, #464]	@ (80118e8 <HAL_DMA_Abort+0x218>)
 8011716:	4293      	cmp	r3, r2
 8011718:	d045      	beq.n	80117a6 <HAL_DMA_Abort+0xd6>
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	4a73      	ldr	r2, [pc, #460]	@ (80118ec <HAL_DMA_Abort+0x21c>)
 8011720:	4293      	cmp	r3, r2
 8011722:	d040      	beq.n	80117a6 <HAL_DMA_Abort+0xd6>
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	4a71      	ldr	r2, [pc, #452]	@ (80118f0 <HAL_DMA_Abort+0x220>)
 801172a:	4293      	cmp	r3, r2
 801172c:	d03b      	beq.n	80117a6 <HAL_DMA_Abort+0xd6>
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	4a70      	ldr	r2, [pc, #448]	@ (80118f4 <HAL_DMA_Abort+0x224>)
 8011734:	4293      	cmp	r3, r2
 8011736:	d036      	beq.n	80117a6 <HAL_DMA_Abort+0xd6>
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	4a6e      	ldr	r2, [pc, #440]	@ (80118f8 <HAL_DMA_Abort+0x228>)
 801173e:	4293      	cmp	r3, r2
 8011740:	d031      	beq.n	80117a6 <HAL_DMA_Abort+0xd6>
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	4a6d      	ldr	r2, [pc, #436]	@ (80118fc <HAL_DMA_Abort+0x22c>)
 8011748:	4293      	cmp	r3, r2
 801174a:	d02c      	beq.n	80117a6 <HAL_DMA_Abort+0xd6>
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	4a6b      	ldr	r2, [pc, #428]	@ (8011900 <HAL_DMA_Abort+0x230>)
 8011752:	4293      	cmp	r3, r2
 8011754:	d027      	beq.n	80117a6 <HAL_DMA_Abort+0xd6>
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	4a6a      	ldr	r2, [pc, #424]	@ (8011904 <HAL_DMA_Abort+0x234>)
 801175c:	4293      	cmp	r3, r2
 801175e:	d022      	beq.n	80117a6 <HAL_DMA_Abort+0xd6>
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	4a68      	ldr	r2, [pc, #416]	@ (8011908 <HAL_DMA_Abort+0x238>)
 8011766:	4293      	cmp	r3, r2
 8011768:	d01d      	beq.n	80117a6 <HAL_DMA_Abort+0xd6>
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	4a67      	ldr	r2, [pc, #412]	@ (801190c <HAL_DMA_Abort+0x23c>)
 8011770:	4293      	cmp	r3, r2
 8011772:	d018      	beq.n	80117a6 <HAL_DMA_Abort+0xd6>
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	4a65      	ldr	r2, [pc, #404]	@ (8011910 <HAL_DMA_Abort+0x240>)
 801177a:	4293      	cmp	r3, r2
 801177c:	d013      	beq.n	80117a6 <HAL_DMA_Abort+0xd6>
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	4a64      	ldr	r2, [pc, #400]	@ (8011914 <HAL_DMA_Abort+0x244>)
 8011784:	4293      	cmp	r3, r2
 8011786:	d00e      	beq.n	80117a6 <HAL_DMA_Abort+0xd6>
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	4a62      	ldr	r2, [pc, #392]	@ (8011918 <HAL_DMA_Abort+0x248>)
 801178e:	4293      	cmp	r3, r2
 8011790:	d009      	beq.n	80117a6 <HAL_DMA_Abort+0xd6>
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	4a61      	ldr	r2, [pc, #388]	@ (801191c <HAL_DMA_Abort+0x24c>)
 8011798:	4293      	cmp	r3, r2
 801179a:	d004      	beq.n	80117a6 <HAL_DMA_Abort+0xd6>
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	4a5f      	ldr	r2, [pc, #380]	@ (8011920 <HAL_DMA_Abort+0x250>)
 80117a2:	4293      	cmp	r3, r2
 80117a4:	d101      	bne.n	80117aa <HAL_DMA_Abort+0xda>
 80117a6:	2301      	movs	r3, #1
 80117a8:	e000      	b.n	80117ac <HAL_DMA_Abort+0xdc>
 80117aa:	2300      	movs	r3, #0
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d013      	beq.n	80117d8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	681a      	ldr	r2, [r3, #0]
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	f022 021e 	bic.w	r2, r2, #30
 80117be:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	695a      	ldr	r2, [r3, #20]
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80117ce:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	617b      	str	r3, [r7, #20]
 80117d6:	e00a      	b.n	80117ee <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	681a      	ldr	r2, [r3, #0]
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	f022 020e 	bic.w	r2, r2, #14
 80117e6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	4a3c      	ldr	r2, [pc, #240]	@ (80118e4 <HAL_DMA_Abort+0x214>)
 80117f4:	4293      	cmp	r3, r2
 80117f6:	d072      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	4a3a      	ldr	r2, [pc, #232]	@ (80118e8 <HAL_DMA_Abort+0x218>)
 80117fe:	4293      	cmp	r3, r2
 8011800:	d06d      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	4a39      	ldr	r2, [pc, #228]	@ (80118ec <HAL_DMA_Abort+0x21c>)
 8011808:	4293      	cmp	r3, r2
 801180a:	d068      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	4a37      	ldr	r2, [pc, #220]	@ (80118f0 <HAL_DMA_Abort+0x220>)
 8011812:	4293      	cmp	r3, r2
 8011814:	d063      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	4a36      	ldr	r2, [pc, #216]	@ (80118f4 <HAL_DMA_Abort+0x224>)
 801181c:	4293      	cmp	r3, r2
 801181e:	d05e      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	4a34      	ldr	r2, [pc, #208]	@ (80118f8 <HAL_DMA_Abort+0x228>)
 8011826:	4293      	cmp	r3, r2
 8011828:	d059      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	4a33      	ldr	r2, [pc, #204]	@ (80118fc <HAL_DMA_Abort+0x22c>)
 8011830:	4293      	cmp	r3, r2
 8011832:	d054      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	4a31      	ldr	r2, [pc, #196]	@ (8011900 <HAL_DMA_Abort+0x230>)
 801183a:	4293      	cmp	r3, r2
 801183c:	d04f      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	4a30      	ldr	r2, [pc, #192]	@ (8011904 <HAL_DMA_Abort+0x234>)
 8011844:	4293      	cmp	r3, r2
 8011846:	d04a      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	4a2e      	ldr	r2, [pc, #184]	@ (8011908 <HAL_DMA_Abort+0x238>)
 801184e:	4293      	cmp	r3, r2
 8011850:	d045      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	4a2d      	ldr	r2, [pc, #180]	@ (801190c <HAL_DMA_Abort+0x23c>)
 8011858:	4293      	cmp	r3, r2
 801185a:	d040      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	4a2b      	ldr	r2, [pc, #172]	@ (8011910 <HAL_DMA_Abort+0x240>)
 8011862:	4293      	cmp	r3, r2
 8011864:	d03b      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	4a2a      	ldr	r2, [pc, #168]	@ (8011914 <HAL_DMA_Abort+0x244>)
 801186c:	4293      	cmp	r3, r2
 801186e:	d036      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	4a28      	ldr	r2, [pc, #160]	@ (8011918 <HAL_DMA_Abort+0x248>)
 8011876:	4293      	cmp	r3, r2
 8011878:	d031      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	4a27      	ldr	r2, [pc, #156]	@ (801191c <HAL_DMA_Abort+0x24c>)
 8011880:	4293      	cmp	r3, r2
 8011882:	d02c      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	4a25      	ldr	r2, [pc, #148]	@ (8011920 <HAL_DMA_Abort+0x250>)
 801188a:	4293      	cmp	r3, r2
 801188c:	d027      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	4a24      	ldr	r2, [pc, #144]	@ (8011924 <HAL_DMA_Abort+0x254>)
 8011894:	4293      	cmp	r3, r2
 8011896:	d022      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	4a22      	ldr	r2, [pc, #136]	@ (8011928 <HAL_DMA_Abort+0x258>)
 801189e:	4293      	cmp	r3, r2
 80118a0:	d01d      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	4a21      	ldr	r2, [pc, #132]	@ (801192c <HAL_DMA_Abort+0x25c>)
 80118a8:	4293      	cmp	r3, r2
 80118aa:	d018      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	4a1f      	ldr	r2, [pc, #124]	@ (8011930 <HAL_DMA_Abort+0x260>)
 80118b2:	4293      	cmp	r3, r2
 80118b4:	d013      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	4a1e      	ldr	r2, [pc, #120]	@ (8011934 <HAL_DMA_Abort+0x264>)
 80118bc:	4293      	cmp	r3, r2
 80118be:	d00e      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	4a1c      	ldr	r2, [pc, #112]	@ (8011938 <HAL_DMA_Abort+0x268>)
 80118c6:	4293      	cmp	r3, r2
 80118c8:	d009      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	4a1b      	ldr	r2, [pc, #108]	@ (801193c <HAL_DMA_Abort+0x26c>)
 80118d0:	4293      	cmp	r3, r2
 80118d2:	d004      	beq.n	80118de <HAL_DMA_Abort+0x20e>
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	4a19      	ldr	r2, [pc, #100]	@ (8011940 <HAL_DMA_Abort+0x270>)
 80118da:	4293      	cmp	r3, r2
 80118dc:	d132      	bne.n	8011944 <HAL_DMA_Abort+0x274>
 80118de:	2301      	movs	r3, #1
 80118e0:	e031      	b.n	8011946 <HAL_DMA_Abort+0x276>
 80118e2:	bf00      	nop
 80118e4:	40020010 	.word	0x40020010
 80118e8:	40020028 	.word	0x40020028
 80118ec:	40020040 	.word	0x40020040
 80118f0:	40020058 	.word	0x40020058
 80118f4:	40020070 	.word	0x40020070
 80118f8:	40020088 	.word	0x40020088
 80118fc:	400200a0 	.word	0x400200a0
 8011900:	400200b8 	.word	0x400200b8
 8011904:	40020410 	.word	0x40020410
 8011908:	40020428 	.word	0x40020428
 801190c:	40020440 	.word	0x40020440
 8011910:	40020458 	.word	0x40020458
 8011914:	40020470 	.word	0x40020470
 8011918:	40020488 	.word	0x40020488
 801191c:	400204a0 	.word	0x400204a0
 8011920:	400204b8 	.word	0x400204b8
 8011924:	58025408 	.word	0x58025408
 8011928:	5802541c 	.word	0x5802541c
 801192c:	58025430 	.word	0x58025430
 8011930:	58025444 	.word	0x58025444
 8011934:	58025458 	.word	0x58025458
 8011938:	5802546c 	.word	0x5802546c
 801193c:	58025480 	.word	0x58025480
 8011940:	58025494 	.word	0x58025494
 8011944:	2300      	movs	r3, #0
 8011946:	2b00      	cmp	r3, #0
 8011948:	d007      	beq.n	801195a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801194e:	681a      	ldr	r2, [r3, #0]
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011954:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011958:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	4a6d      	ldr	r2, [pc, #436]	@ (8011b14 <HAL_DMA_Abort+0x444>)
 8011960:	4293      	cmp	r3, r2
 8011962:	d04a      	beq.n	80119fa <HAL_DMA_Abort+0x32a>
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	4a6b      	ldr	r2, [pc, #428]	@ (8011b18 <HAL_DMA_Abort+0x448>)
 801196a:	4293      	cmp	r3, r2
 801196c:	d045      	beq.n	80119fa <HAL_DMA_Abort+0x32a>
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	4a6a      	ldr	r2, [pc, #424]	@ (8011b1c <HAL_DMA_Abort+0x44c>)
 8011974:	4293      	cmp	r3, r2
 8011976:	d040      	beq.n	80119fa <HAL_DMA_Abort+0x32a>
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	4a68      	ldr	r2, [pc, #416]	@ (8011b20 <HAL_DMA_Abort+0x450>)
 801197e:	4293      	cmp	r3, r2
 8011980:	d03b      	beq.n	80119fa <HAL_DMA_Abort+0x32a>
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	4a67      	ldr	r2, [pc, #412]	@ (8011b24 <HAL_DMA_Abort+0x454>)
 8011988:	4293      	cmp	r3, r2
 801198a:	d036      	beq.n	80119fa <HAL_DMA_Abort+0x32a>
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	4a65      	ldr	r2, [pc, #404]	@ (8011b28 <HAL_DMA_Abort+0x458>)
 8011992:	4293      	cmp	r3, r2
 8011994:	d031      	beq.n	80119fa <HAL_DMA_Abort+0x32a>
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	4a64      	ldr	r2, [pc, #400]	@ (8011b2c <HAL_DMA_Abort+0x45c>)
 801199c:	4293      	cmp	r3, r2
 801199e:	d02c      	beq.n	80119fa <HAL_DMA_Abort+0x32a>
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	4a62      	ldr	r2, [pc, #392]	@ (8011b30 <HAL_DMA_Abort+0x460>)
 80119a6:	4293      	cmp	r3, r2
 80119a8:	d027      	beq.n	80119fa <HAL_DMA_Abort+0x32a>
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	4a61      	ldr	r2, [pc, #388]	@ (8011b34 <HAL_DMA_Abort+0x464>)
 80119b0:	4293      	cmp	r3, r2
 80119b2:	d022      	beq.n	80119fa <HAL_DMA_Abort+0x32a>
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	4a5f      	ldr	r2, [pc, #380]	@ (8011b38 <HAL_DMA_Abort+0x468>)
 80119ba:	4293      	cmp	r3, r2
 80119bc:	d01d      	beq.n	80119fa <HAL_DMA_Abort+0x32a>
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	4a5e      	ldr	r2, [pc, #376]	@ (8011b3c <HAL_DMA_Abort+0x46c>)
 80119c4:	4293      	cmp	r3, r2
 80119c6:	d018      	beq.n	80119fa <HAL_DMA_Abort+0x32a>
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	4a5c      	ldr	r2, [pc, #368]	@ (8011b40 <HAL_DMA_Abort+0x470>)
 80119ce:	4293      	cmp	r3, r2
 80119d0:	d013      	beq.n	80119fa <HAL_DMA_Abort+0x32a>
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	4a5b      	ldr	r2, [pc, #364]	@ (8011b44 <HAL_DMA_Abort+0x474>)
 80119d8:	4293      	cmp	r3, r2
 80119da:	d00e      	beq.n	80119fa <HAL_DMA_Abort+0x32a>
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	4a59      	ldr	r2, [pc, #356]	@ (8011b48 <HAL_DMA_Abort+0x478>)
 80119e2:	4293      	cmp	r3, r2
 80119e4:	d009      	beq.n	80119fa <HAL_DMA_Abort+0x32a>
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	4a58      	ldr	r2, [pc, #352]	@ (8011b4c <HAL_DMA_Abort+0x47c>)
 80119ec:	4293      	cmp	r3, r2
 80119ee:	d004      	beq.n	80119fa <HAL_DMA_Abort+0x32a>
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	4a56      	ldr	r2, [pc, #344]	@ (8011b50 <HAL_DMA_Abort+0x480>)
 80119f6:	4293      	cmp	r3, r2
 80119f8:	d108      	bne.n	8011a0c <HAL_DMA_Abort+0x33c>
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	681a      	ldr	r2, [r3, #0]
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	f022 0201 	bic.w	r2, r2, #1
 8011a08:	601a      	str	r2, [r3, #0]
 8011a0a:	e007      	b.n	8011a1c <HAL_DMA_Abort+0x34c>
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	681a      	ldr	r2, [r3, #0]
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	f022 0201 	bic.w	r2, r2, #1
 8011a1a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8011a1c:	e013      	b.n	8011a46 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011a1e:	f7fe fffd 	bl	8010a1c <HAL_GetTick>
 8011a22:	4602      	mov	r2, r0
 8011a24:	693b      	ldr	r3, [r7, #16]
 8011a26:	1ad3      	subs	r3, r2, r3
 8011a28:	2b05      	cmp	r3, #5
 8011a2a:	d90c      	bls.n	8011a46 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2220      	movs	r2, #32
 8011a30:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2203      	movs	r2, #3
 8011a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8011a42:	2301      	movs	r3, #1
 8011a44:	e12d      	b.n	8011ca2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	f003 0301 	and.w	r3, r3, #1
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d1e5      	bne.n	8011a1e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	4a2f      	ldr	r2, [pc, #188]	@ (8011b14 <HAL_DMA_Abort+0x444>)
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	d04a      	beq.n	8011af2 <HAL_DMA_Abort+0x422>
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	4a2d      	ldr	r2, [pc, #180]	@ (8011b18 <HAL_DMA_Abort+0x448>)
 8011a62:	4293      	cmp	r3, r2
 8011a64:	d045      	beq.n	8011af2 <HAL_DMA_Abort+0x422>
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8011b1c <HAL_DMA_Abort+0x44c>)
 8011a6c:	4293      	cmp	r3, r2
 8011a6e:	d040      	beq.n	8011af2 <HAL_DMA_Abort+0x422>
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	4a2a      	ldr	r2, [pc, #168]	@ (8011b20 <HAL_DMA_Abort+0x450>)
 8011a76:	4293      	cmp	r3, r2
 8011a78:	d03b      	beq.n	8011af2 <HAL_DMA_Abort+0x422>
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	4a29      	ldr	r2, [pc, #164]	@ (8011b24 <HAL_DMA_Abort+0x454>)
 8011a80:	4293      	cmp	r3, r2
 8011a82:	d036      	beq.n	8011af2 <HAL_DMA_Abort+0x422>
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	4a27      	ldr	r2, [pc, #156]	@ (8011b28 <HAL_DMA_Abort+0x458>)
 8011a8a:	4293      	cmp	r3, r2
 8011a8c:	d031      	beq.n	8011af2 <HAL_DMA_Abort+0x422>
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	4a26      	ldr	r2, [pc, #152]	@ (8011b2c <HAL_DMA_Abort+0x45c>)
 8011a94:	4293      	cmp	r3, r2
 8011a96:	d02c      	beq.n	8011af2 <HAL_DMA_Abort+0x422>
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	4a24      	ldr	r2, [pc, #144]	@ (8011b30 <HAL_DMA_Abort+0x460>)
 8011a9e:	4293      	cmp	r3, r2
 8011aa0:	d027      	beq.n	8011af2 <HAL_DMA_Abort+0x422>
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	4a23      	ldr	r2, [pc, #140]	@ (8011b34 <HAL_DMA_Abort+0x464>)
 8011aa8:	4293      	cmp	r3, r2
 8011aaa:	d022      	beq.n	8011af2 <HAL_DMA_Abort+0x422>
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	4a21      	ldr	r2, [pc, #132]	@ (8011b38 <HAL_DMA_Abort+0x468>)
 8011ab2:	4293      	cmp	r3, r2
 8011ab4:	d01d      	beq.n	8011af2 <HAL_DMA_Abort+0x422>
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	4a20      	ldr	r2, [pc, #128]	@ (8011b3c <HAL_DMA_Abort+0x46c>)
 8011abc:	4293      	cmp	r3, r2
 8011abe:	d018      	beq.n	8011af2 <HAL_DMA_Abort+0x422>
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	4a1e      	ldr	r2, [pc, #120]	@ (8011b40 <HAL_DMA_Abort+0x470>)
 8011ac6:	4293      	cmp	r3, r2
 8011ac8:	d013      	beq.n	8011af2 <HAL_DMA_Abort+0x422>
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	4a1d      	ldr	r2, [pc, #116]	@ (8011b44 <HAL_DMA_Abort+0x474>)
 8011ad0:	4293      	cmp	r3, r2
 8011ad2:	d00e      	beq.n	8011af2 <HAL_DMA_Abort+0x422>
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8011b48 <HAL_DMA_Abort+0x478>)
 8011ada:	4293      	cmp	r3, r2
 8011adc:	d009      	beq.n	8011af2 <HAL_DMA_Abort+0x422>
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8011b4c <HAL_DMA_Abort+0x47c>)
 8011ae4:	4293      	cmp	r3, r2
 8011ae6:	d004      	beq.n	8011af2 <HAL_DMA_Abort+0x422>
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	4a18      	ldr	r2, [pc, #96]	@ (8011b50 <HAL_DMA_Abort+0x480>)
 8011aee:	4293      	cmp	r3, r2
 8011af0:	d101      	bne.n	8011af6 <HAL_DMA_Abort+0x426>
 8011af2:	2301      	movs	r3, #1
 8011af4:	e000      	b.n	8011af8 <HAL_DMA_Abort+0x428>
 8011af6:	2300      	movs	r3, #0
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d02b      	beq.n	8011b54 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011b00:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011b06:	f003 031f 	and.w	r3, r3, #31
 8011b0a:	223f      	movs	r2, #63	@ 0x3f
 8011b0c:	409a      	lsls	r2, r3
 8011b0e:	68bb      	ldr	r3, [r7, #8]
 8011b10:	609a      	str	r2, [r3, #8]
 8011b12:	e02a      	b.n	8011b6a <HAL_DMA_Abort+0x49a>
 8011b14:	40020010 	.word	0x40020010
 8011b18:	40020028 	.word	0x40020028
 8011b1c:	40020040 	.word	0x40020040
 8011b20:	40020058 	.word	0x40020058
 8011b24:	40020070 	.word	0x40020070
 8011b28:	40020088 	.word	0x40020088
 8011b2c:	400200a0 	.word	0x400200a0
 8011b30:	400200b8 	.word	0x400200b8
 8011b34:	40020410 	.word	0x40020410
 8011b38:	40020428 	.word	0x40020428
 8011b3c:	40020440 	.word	0x40020440
 8011b40:	40020458 	.word	0x40020458
 8011b44:	40020470 	.word	0x40020470
 8011b48:	40020488 	.word	0x40020488
 8011b4c:	400204a0 	.word	0x400204a0
 8011b50:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011b58:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011b5e:	f003 031f 	and.w	r3, r3, #31
 8011b62:	2201      	movs	r2, #1
 8011b64:	409a      	lsls	r2, r3
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	4a4f      	ldr	r2, [pc, #316]	@ (8011cac <HAL_DMA_Abort+0x5dc>)
 8011b70:	4293      	cmp	r3, r2
 8011b72:	d072      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	4a4d      	ldr	r2, [pc, #308]	@ (8011cb0 <HAL_DMA_Abort+0x5e0>)
 8011b7a:	4293      	cmp	r3, r2
 8011b7c:	d06d      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	4a4c      	ldr	r2, [pc, #304]	@ (8011cb4 <HAL_DMA_Abort+0x5e4>)
 8011b84:	4293      	cmp	r3, r2
 8011b86:	d068      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	4a4a      	ldr	r2, [pc, #296]	@ (8011cb8 <HAL_DMA_Abort+0x5e8>)
 8011b8e:	4293      	cmp	r3, r2
 8011b90:	d063      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	4a49      	ldr	r2, [pc, #292]	@ (8011cbc <HAL_DMA_Abort+0x5ec>)
 8011b98:	4293      	cmp	r3, r2
 8011b9a:	d05e      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	4a47      	ldr	r2, [pc, #284]	@ (8011cc0 <HAL_DMA_Abort+0x5f0>)
 8011ba2:	4293      	cmp	r3, r2
 8011ba4:	d059      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	4a46      	ldr	r2, [pc, #280]	@ (8011cc4 <HAL_DMA_Abort+0x5f4>)
 8011bac:	4293      	cmp	r3, r2
 8011bae:	d054      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	4a44      	ldr	r2, [pc, #272]	@ (8011cc8 <HAL_DMA_Abort+0x5f8>)
 8011bb6:	4293      	cmp	r3, r2
 8011bb8:	d04f      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	4a43      	ldr	r2, [pc, #268]	@ (8011ccc <HAL_DMA_Abort+0x5fc>)
 8011bc0:	4293      	cmp	r3, r2
 8011bc2:	d04a      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	4a41      	ldr	r2, [pc, #260]	@ (8011cd0 <HAL_DMA_Abort+0x600>)
 8011bca:	4293      	cmp	r3, r2
 8011bcc:	d045      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	4a40      	ldr	r2, [pc, #256]	@ (8011cd4 <HAL_DMA_Abort+0x604>)
 8011bd4:	4293      	cmp	r3, r2
 8011bd6:	d040      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	4a3e      	ldr	r2, [pc, #248]	@ (8011cd8 <HAL_DMA_Abort+0x608>)
 8011bde:	4293      	cmp	r3, r2
 8011be0:	d03b      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	4a3d      	ldr	r2, [pc, #244]	@ (8011cdc <HAL_DMA_Abort+0x60c>)
 8011be8:	4293      	cmp	r3, r2
 8011bea:	d036      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	4a3b      	ldr	r2, [pc, #236]	@ (8011ce0 <HAL_DMA_Abort+0x610>)
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	d031      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	4a3a      	ldr	r2, [pc, #232]	@ (8011ce4 <HAL_DMA_Abort+0x614>)
 8011bfc:	4293      	cmp	r3, r2
 8011bfe:	d02c      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	4a38      	ldr	r2, [pc, #224]	@ (8011ce8 <HAL_DMA_Abort+0x618>)
 8011c06:	4293      	cmp	r3, r2
 8011c08:	d027      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	4a37      	ldr	r2, [pc, #220]	@ (8011cec <HAL_DMA_Abort+0x61c>)
 8011c10:	4293      	cmp	r3, r2
 8011c12:	d022      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	4a35      	ldr	r2, [pc, #212]	@ (8011cf0 <HAL_DMA_Abort+0x620>)
 8011c1a:	4293      	cmp	r3, r2
 8011c1c:	d01d      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	4a34      	ldr	r2, [pc, #208]	@ (8011cf4 <HAL_DMA_Abort+0x624>)
 8011c24:	4293      	cmp	r3, r2
 8011c26:	d018      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	4a32      	ldr	r2, [pc, #200]	@ (8011cf8 <HAL_DMA_Abort+0x628>)
 8011c2e:	4293      	cmp	r3, r2
 8011c30:	d013      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	4a31      	ldr	r2, [pc, #196]	@ (8011cfc <HAL_DMA_Abort+0x62c>)
 8011c38:	4293      	cmp	r3, r2
 8011c3a:	d00e      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	4a2f      	ldr	r2, [pc, #188]	@ (8011d00 <HAL_DMA_Abort+0x630>)
 8011c42:	4293      	cmp	r3, r2
 8011c44:	d009      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	4a2e      	ldr	r2, [pc, #184]	@ (8011d04 <HAL_DMA_Abort+0x634>)
 8011c4c:	4293      	cmp	r3, r2
 8011c4e:	d004      	beq.n	8011c5a <HAL_DMA_Abort+0x58a>
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	4a2c      	ldr	r2, [pc, #176]	@ (8011d08 <HAL_DMA_Abort+0x638>)
 8011c56:	4293      	cmp	r3, r2
 8011c58:	d101      	bne.n	8011c5e <HAL_DMA_Abort+0x58e>
 8011c5a:	2301      	movs	r3, #1
 8011c5c:	e000      	b.n	8011c60 <HAL_DMA_Abort+0x590>
 8011c5e:	2300      	movs	r3, #0
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d015      	beq.n	8011c90 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011c68:	687a      	ldr	r2, [r7, #4]
 8011c6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8011c6c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d00c      	beq.n	8011c90 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c7a:	681a      	ldr	r2, [r3, #0]
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011c84:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c8a:	687a      	ldr	r2, [r7, #4]
 8011c8c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8011c8e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2201      	movs	r2, #1
 8011c94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8011ca0:	2300      	movs	r3, #0
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3718      	adds	r7, #24
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}
 8011caa:	bf00      	nop
 8011cac:	40020010 	.word	0x40020010
 8011cb0:	40020028 	.word	0x40020028
 8011cb4:	40020040 	.word	0x40020040
 8011cb8:	40020058 	.word	0x40020058
 8011cbc:	40020070 	.word	0x40020070
 8011cc0:	40020088 	.word	0x40020088
 8011cc4:	400200a0 	.word	0x400200a0
 8011cc8:	400200b8 	.word	0x400200b8
 8011ccc:	40020410 	.word	0x40020410
 8011cd0:	40020428 	.word	0x40020428
 8011cd4:	40020440 	.word	0x40020440
 8011cd8:	40020458 	.word	0x40020458
 8011cdc:	40020470 	.word	0x40020470
 8011ce0:	40020488 	.word	0x40020488
 8011ce4:	400204a0 	.word	0x400204a0
 8011ce8:	400204b8 	.word	0x400204b8
 8011cec:	58025408 	.word	0x58025408
 8011cf0:	5802541c 	.word	0x5802541c
 8011cf4:	58025430 	.word	0x58025430
 8011cf8:	58025444 	.word	0x58025444
 8011cfc:	58025458 	.word	0x58025458
 8011d00:	5802546c 	.word	0x5802546c
 8011d04:	58025480 	.word	0x58025480
 8011d08:	58025494 	.word	0x58025494

08011d0c <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b08a      	sub	sp, #40	@ 0x28
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	60f8      	str	r0, [r7, #12]
 8011d14:	460b      	mov	r3, r1
 8011d16:	607a      	str	r2, [r7, #4]
 8011d18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
 8011d1e:	f7fe fe7d 	bl	8010a1c <HAL_GetTick>
 8011d22:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d101      	bne.n	8011d2e <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	e374      	b.n	8012418 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8011d34:	b2db      	uxtb	r3, r3
 8011d36:	2b02      	cmp	r3, #2
 8011d38:	d008      	beq.n	8011d4c <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	2280      	movs	r2, #128	@ 0x80
 8011d3e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	2200      	movs	r2, #0
 8011d44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8011d48:	2301      	movs	r3, #1
 8011d4a:	e365      	b.n	8012418 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	4a7b      	ldr	r2, [pc, #492]	@ (8011f40 <HAL_DMA_PollForTransfer+0x234>)
 8011d52:	4293      	cmp	r3, r2
 8011d54:	d04a      	beq.n	8011dec <HAL_DMA_PollForTransfer+0xe0>
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	4a7a      	ldr	r2, [pc, #488]	@ (8011f44 <HAL_DMA_PollForTransfer+0x238>)
 8011d5c:	4293      	cmp	r3, r2
 8011d5e:	d045      	beq.n	8011dec <HAL_DMA_PollForTransfer+0xe0>
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	4a78      	ldr	r2, [pc, #480]	@ (8011f48 <HAL_DMA_PollForTransfer+0x23c>)
 8011d66:	4293      	cmp	r3, r2
 8011d68:	d040      	beq.n	8011dec <HAL_DMA_PollForTransfer+0xe0>
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	4a77      	ldr	r2, [pc, #476]	@ (8011f4c <HAL_DMA_PollForTransfer+0x240>)
 8011d70:	4293      	cmp	r3, r2
 8011d72:	d03b      	beq.n	8011dec <HAL_DMA_PollForTransfer+0xe0>
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	4a75      	ldr	r2, [pc, #468]	@ (8011f50 <HAL_DMA_PollForTransfer+0x244>)
 8011d7a:	4293      	cmp	r3, r2
 8011d7c:	d036      	beq.n	8011dec <HAL_DMA_PollForTransfer+0xe0>
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	4a74      	ldr	r2, [pc, #464]	@ (8011f54 <HAL_DMA_PollForTransfer+0x248>)
 8011d84:	4293      	cmp	r3, r2
 8011d86:	d031      	beq.n	8011dec <HAL_DMA_PollForTransfer+0xe0>
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	4a72      	ldr	r2, [pc, #456]	@ (8011f58 <HAL_DMA_PollForTransfer+0x24c>)
 8011d8e:	4293      	cmp	r3, r2
 8011d90:	d02c      	beq.n	8011dec <HAL_DMA_PollForTransfer+0xe0>
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	4a71      	ldr	r2, [pc, #452]	@ (8011f5c <HAL_DMA_PollForTransfer+0x250>)
 8011d98:	4293      	cmp	r3, r2
 8011d9a:	d027      	beq.n	8011dec <HAL_DMA_PollForTransfer+0xe0>
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	4a6f      	ldr	r2, [pc, #444]	@ (8011f60 <HAL_DMA_PollForTransfer+0x254>)
 8011da2:	4293      	cmp	r3, r2
 8011da4:	d022      	beq.n	8011dec <HAL_DMA_PollForTransfer+0xe0>
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	4a6e      	ldr	r2, [pc, #440]	@ (8011f64 <HAL_DMA_PollForTransfer+0x258>)
 8011dac:	4293      	cmp	r3, r2
 8011dae:	d01d      	beq.n	8011dec <HAL_DMA_PollForTransfer+0xe0>
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	4a6c      	ldr	r2, [pc, #432]	@ (8011f68 <HAL_DMA_PollForTransfer+0x25c>)
 8011db6:	4293      	cmp	r3, r2
 8011db8:	d018      	beq.n	8011dec <HAL_DMA_PollForTransfer+0xe0>
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	4a6b      	ldr	r2, [pc, #428]	@ (8011f6c <HAL_DMA_PollForTransfer+0x260>)
 8011dc0:	4293      	cmp	r3, r2
 8011dc2:	d013      	beq.n	8011dec <HAL_DMA_PollForTransfer+0xe0>
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	4a69      	ldr	r2, [pc, #420]	@ (8011f70 <HAL_DMA_PollForTransfer+0x264>)
 8011dca:	4293      	cmp	r3, r2
 8011dcc:	d00e      	beq.n	8011dec <HAL_DMA_PollForTransfer+0xe0>
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	4a68      	ldr	r2, [pc, #416]	@ (8011f74 <HAL_DMA_PollForTransfer+0x268>)
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	d009      	beq.n	8011dec <HAL_DMA_PollForTransfer+0xe0>
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	4a66      	ldr	r2, [pc, #408]	@ (8011f78 <HAL_DMA_PollForTransfer+0x26c>)
 8011dde:	4293      	cmp	r3, r2
 8011de0:	d004      	beq.n	8011dec <HAL_DMA_PollForTransfer+0xe0>
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	4a65      	ldr	r2, [pc, #404]	@ (8011f7c <HAL_DMA_PollForTransfer+0x270>)
 8011de8:	4293      	cmp	r3, r2
 8011dea:	d101      	bne.n	8011df0 <HAL_DMA_PollForTransfer+0xe4>
 8011dec:	2301      	movs	r3, #1
 8011dee:	e000      	b.n	8011df2 <HAL_DMA_PollForTransfer+0xe6>
 8011df0:	2300      	movs	r3, #0
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d028      	beq.n	8011e48 <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d005      	beq.n	8011e10 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011e0a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	e303      	b.n	8012418 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8011e10:	7afb      	ldrb	r3, [r7, #11]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d108      	bne.n	8011e28 <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011e1a:	f003 031f 	and.w	r3, r3, #31
 8011e1e:	2220      	movs	r2, #32
 8011e20:	fa02 f303 	lsl.w	r3, r2, r3
 8011e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8011e26:	e007      	b.n	8011e38 <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011e2c:	f003 031f 	and.w	r3, r3, #31
 8011e30:	2210      	movs	r2, #16
 8011e32:	fa02 f303 	lsl.w	r3, r2, r3
 8011e36:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e3c:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e42:	3308      	adds	r3, #8
 8011e44:	61fb      	str	r3, [r7, #28]
 8011e46:	e1d5      	b.n	80121f4 <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	f003 0320 	and.w	r3, r3, #32
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d005      	beq.n	8011e62 <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011e5c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8011e5e:	2301      	movs	r3, #1
 8011e60:	e2da      	b.n	8012418 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8011e62:	7afb      	ldrb	r3, [r7, #11]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d108      	bne.n	8011e7a <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011e6c:	f003 031f 	and.w	r3, r3, #31
 8011e70:	2202      	movs	r2, #2
 8011e72:	fa02 f303 	lsl.w	r3, r2, r3
 8011e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8011e78:	e007      	b.n	8011e8a <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011e7e:	f003 031f 	and.w	r3, r3, #31
 8011e82:	2204      	movs	r2, #4
 8011e84:	fa02 f303 	lsl.w	r3, r2, r3
 8011e88:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e8e:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e94:	3304      	adds	r3, #4
 8011e96:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
 8011e98:	e1ac      	b.n	80121f4 <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	4a28      	ldr	r2, [pc, #160]	@ (8011f40 <HAL_DMA_PollForTransfer+0x234>)
 8011ea0:	4293      	cmp	r3, r2
 8011ea2:	d04a      	beq.n	8011f3a <HAL_DMA_PollForTransfer+0x22e>
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	4a26      	ldr	r2, [pc, #152]	@ (8011f44 <HAL_DMA_PollForTransfer+0x238>)
 8011eaa:	4293      	cmp	r3, r2
 8011eac:	d045      	beq.n	8011f3a <HAL_DMA_PollForTransfer+0x22e>
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	4a25      	ldr	r2, [pc, #148]	@ (8011f48 <HAL_DMA_PollForTransfer+0x23c>)
 8011eb4:	4293      	cmp	r3, r2
 8011eb6:	d040      	beq.n	8011f3a <HAL_DMA_PollForTransfer+0x22e>
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	4a23      	ldr	r2, [pc, #140]	@ (8011f4c <HAL_DMA_PollForTransfer+0x240>)
 8011ebe:	4293      	cmp	r3, r2
 8011ec0:	d03b      	beq.n	8011f3a <HAL_DMA_PollForTransfer+0x22e>
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	4a22      	ldr	r2, [pc, #136]	@ (8011f50 <HAL_DMA_PollForTransfer+0x244>)
 8011ec8:	4293      	cmp	r3, r2
 8011eca:	d036      	beq.n	8011f3a <HAL_DMA_PollForTransfer+0x22e>
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	4a20      	ldr	r2, [pc, #128]	@ (8011f54 <HAL_DMA_PollForTransfer+0x248>)
 8011ed2:	4293      	cmp	r3, r2
 8011ed4:	d031      	beq.n	8011f3a <HAL_DMA_PollForTransfer+0x22e>
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	4a1f      	ldr	r2, [pc, #124]	@ (8011f58 <HAL_DMA_PollForTransfer+0x24c>)
 8011edc:	4293      	cmp	r3, r2
 8011ede:	d02c      	beq.n	8011f3a <HAL_DMA_PollForTransfer+0x22e>
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8011f5c <HAL_DMA_PollForTransfer+0x250>)
 8011ee6:	4293      	cmp	r3, r2
 8011ee8:	d027      	beq.n	8011f3a <HAL_DMA_PollForTransfer+0x22e>
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	4a1c      	ldr	r2, [pc, #112]	@ (8011f60 <HAL_DMA_PollForTransfer+0x254>)
 8011ef0:	4293      	cmp	r3, r2
 8011ef2:	d022      	beq.n	8011f3a <HAL_DMA_PollForTransfer+0x22e>
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8011f64 <HAL_DMA_PollForTransfer+0x258>)
 8011efa:	4293      	cmp	r3, r2
 8011efc:	d01d      	beq.n	8011f3a <HAL_DMA_PollForTransfer+0x22e>
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	4a19      	ldr	r2, [pc, #100]	@ (8011f68 <HAL_DMA_PollForTransfer+0x25c>)
 8011f04:	4293      	cmp	r3, r2
 8011f06:	d018      	beq.n	8011f3a <HAL_DMA_PollForTransfer+0x22e>
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	4a17      	ldr	r2, [pc, #92]	@ (8011f6c <HAL_DMA_PollForTransfer+0x260>)
 8011f0e:	4293      	cmp	r3, r2
 8011f10:	d013      	beq.n	8011f3a <HAL_DMA_PollForTransfer+0x22e>
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	4a16      	ldr	r2, [pc, #88]	@ (8011f70 <HAL_DMA_PollForTransfer+0x264>)
 8011f18:	4293      	cmp	r3, r2
 8011f1a:	d00e      	beq.n	8011f3a <HAL_DMA_PollForTransfer+0x22e>
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	4a14      	ldr	r2, [pc, #80]	@ (8011f74 <HAL_DMA_PollForTransfer+0x268>)
 8011f22:	4293      	cmp	r3, r2
 8011f24:	d009      	beq.n	8011f3a <HAL_DMA_PollForTransfer+0x22e>
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	4a13      	ldr	r2, [pc, #76]	@ (8011f78 <HAL_DMA_PollForTransfer+0x26c>)
 8011f2c:	4293      	cmp	r3, r2
 8011f2e:	d004      	beq.n	8011f3a <HAL_DMA_PollForTransfer+0x22e>
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	4a11      	ldr	r2, [pc, #68]	@ (8011f7c <HAL_DMA_PollForTransfer+0x270>)
 8011f36:	4293      	cmp	r3, r2
 8011f38:	d122      	bne.n	8011f80 <HAL_DMA_PollForTransfer+0x274>
 8011f3a:	2301      	movs	r3, #1
 8011f3c:	e021      	b.n	8011f82 <HAL_DMA_PollForTransfer+0x276>
 8011f3e:	bf00      	nop
 8011f40:	40020010 	.word	0x40020010
 8011f44:	40020028 	.word	0x40020028
 8011f48:	40020040 	.word	0x40020040
 8011f4c:	40020058 	.word	0x40020058
 8011f50:	40020070 	.word	0x40020070
 8011f54:	40020088 	.word	0x40020088
 8011f58:	400200a0 	.word	0x400200a0
 8011f5c:	400200b8 	.word	0x400200b8
 8011f60:	40020410 	.word	0x40020410
 8011f64:	40020428 	.word	0x40020428
 8011f68:	40020440 	.word	0x40020440
 8011f6c:	40020458 	.word	0x40020458
 8011f70:	40020470 	.word	0x40020470
 8011f74:	40020488 	.word	0x40020488
 8011f78:	400204a0 	.word	0x400204a0
 8011f7c:	400204b8 	.word	0x400204b8
 8011f80:	2300      	movs	r3, #0
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d057      	beq.n	8012036 <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8011f86:	6a3b      	ldr	r3, [r7, #32]
 8011f88:	681a      	ldr	r2, [r3, #0]
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011f8e:	f003 031f 	and.w	r3, r3, #31
 8011f92:	fa22 f303 	lsr.w	r3, r2, r3
 8011f96:	f003 0301 	and.w	r3, r3, #1
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d00d      	beq.n	8011fba <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011fa2:	f043 0202 	orr.w	r2, r3, #2
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011fae:	f003 031f 	and.w	r3, r3, #31
 8011fb2:	2201      	movs	r2, #1
 8011fb4:	409a      	lsls	r2, r3
 8011fb6:	69fb      	ldr	r3, [r7, #28]
 8011fb8:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8011fba:	6a3b      	ldr	r3, [r7, #32]
 8011fbc:	681a      	ldr	r2, [r3, #0]
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011fc2:	f003 031f 	and.w	r3, r3, #31
 8011fc6:	2104      	movs	r1, #4
 8011fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8011fcc:	4013      	ands	r3, r2
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d00d      	beq.n	8011fee <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011fd6:	f043 0204 	orr.w	r2, r3, #4
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011fe2:	f003 031f 	and.w	r3, r3, #31
 8011fe6:	2204      	movs	r2, #4
 8011fe8:	409a      	lsls	r2, r3
 8011fea:	69fb      	ldr	r3, [r7, #28]
 8011fec:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8011fee:	6a3b      	ldr	r3, [r7, #32]
 8011ff0:	681a      	ldr	r2, [r3, #0]
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011ff6:	f003 031f 	and.w	r3, r3, #31
 8011ffa:	2108      	movs	r1, #8
 8011ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8012000:	4013      	ands	r3, r2
 8012002:	2b00      	cmp	r3, #0
 8012004:	d038      	beq.n	8012078 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801200a:	f043 0201 	orr.w	r2, r3, #1
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012016:	f003 031f 	and.w	r3, r3, #31
 801201a:	2208      	movs	r2, #8
 801201c:	409a      	lsls	r2, r3
 801201e:	69fb      	ldr	r3, [r7, #28]
 8012020:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	2201      	movs	r2, #1
 8012026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	2200      	movs	r2, #0
 801202e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8012032:	2301      	movs	r3, #1
 8012034:	e1f0      	b.n	8012418 <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8012036:	6a3b      	ldr	r3, [r7, #32]
 8012038:	681a      	ldr	r2, [r3, #0]
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801203e:	f003 031f 	and.w	r3, r3, #31
 8012042:	2108      	movs	r1, #8
 8012044:	fa01 f303 	lsl.w	r3, r1, r3
 8012048:	4013      	ands	r3, r2
 801204a:	2b00      	cmp	r3, #0
 801204c:	d014      	beq.n	8012078 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012052:	f003 031f 	and.w	r3, r3, #31
 8012056:	2201      	movs	r2, #1
 8012058:	409a      	lsls	r2, r3
 801205a:	6a3b      	ldr	r3, [r7, #32]
 801205c:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	2201      	movs	r2, #1
 8012062:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	2201      	movs	r2, #1
 8012068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	2200      	movs	r2, #0
 8012070:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8012074:	2301      	movs	r3, #1
 8012076:	e1cf      	b.n	8012418 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801207e:	d012      	beq.n	80120a6 <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8012080:	f7fe fccc 	bl	8010a1c <HAL_GetTick>
 8012084:	4602      	mov	r2, r0
 8012086:	697b      	ldr	r3, [r7, #20]
 8012088:	1ad3      	subs	r3, r2, r3
 801208a:	687a      	ldr	r2, [r7, #4]
 801208c:	429a      	cmp	r2, r3
 801208e:	d302      	bcc.n	8012096 <HAL_DMA_PollForTransfer+0x38a>
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d107      	bne.n	80120a6 <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	2220      	movs	r2, #32
 801209a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
 801209c:	68f8      	ldr	r0, [r7, #12]
 801209e:	f7ff fb17 	bl	80116d0 <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
 80120a2:	2301      	movs	r3, #1
 80120a4:	e1b8      	b.n	8012418 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	4a81      	ldr	r2, [pc, #516]	@ (80122b0 <HAL_DMA_PollForTransfer+0x5a4>)
 80120ac:	4293      	cmp	r3, r2
 80120ae:	d072      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	4a7f      	ldr	r2, [pc, #508]	@ (80122b4 <HAL_DMA_PollForTransfer+0x5a8>)
 80120b6:	4293      	cmp	r3, r2
 80120b8:	d06d      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	4a7e      	ldr	r2, [pc, #504]	@ (80122b8 <HAL_DMA_PollForTransfer+0x5ac>)
 80120c0:	4293      	cmp	r3, r2
 80120c2:	d068      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	4a7c      	ldr	r2, [pc, #496]	@ (80122bc <HAL_DMA_PollForTransfer+0x5b0>)
 80120ca:	4293      	cmp	r3, r2
 80120cc:	d063      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	4a7b      	ldr	r2, [pc, #492]	@ (80122c0 <HAL_DMA_PollForTransfer+0x5b4>)
 80120d4:	4293      	cmp	r3, r2
 80120d6:	d05e      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	4a79      	ldr	r2, [pc, #484]	@ (80122c4 <HAL_DMA_PollForTransfer+0x5b8>)
 80120de:	4293      	cmp	r3, r2
 80120e0:	d059      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	4a78      	ldr	r2, [pc, #480]	@ (80122c8 <HAL_DMA_PollForTransfer+0x5bc>)
 80120e8:	4293      	cmp	r3, r2
 80120ea:	d054      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	4a76      	ldr	r2, [pc, #472]	@ (80122cc <HAL_DMA_PollForTransfer+0x5c0>)
 80120f2:	4293      	cmp	r3, r2
 80120f4:	d04f      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	4a75      	ldr	r2, [pc, #468]	@ (80122d0 <HAL_DMA_PollForTransfer+0x5c4>)
 80120fc:	4293      	cmp	r3, r2
 80120fe:	d04a      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	4a73      	ldr	r2, [pc, #460]	@ (80122d4 <HAL_DMA_PollForTransfer+0x5c8>)
 8012106:	4293      	cmp	r3, r2
 8012108:	d045      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	4a72      	ldr	r2, [pc, #456]	@ (80122d8 <HAL_DMA_PollForTransfer+0x5cc>)
 8012110:	4293      	cmp	r3, r2
 8012112:	d040      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	4a70      	ldr	r2, [pc, #448]	@ (80122dc <HAL_DMA_PollForTransfer+0x5d0>)
 801211a:	4293      	cmp	r3, r2
 801211c:	d03b      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	4a6f      	ldr	r2, [pc, #444]	@ (80122e0 <HAL_DMA_PollForTransfer+0x5d4>)
 8012124:	4293      	cmp	r3, r2
 8012126:	d036      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	4a6d      	ldr	r2, [pc, #436]	@ (80122e4 <HAL_DMA_PollForTransfer+0x5d8>)
 801212e:	4293      	cmp	r3, r2
 8012130:	d031      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	4a6c      	ldr	r2, [pc, #432]	@ (80122e8 <HAL_DMA_PollForTransfer+0x5dc>)
 8012138:	4293      	cmp	r3, r2
 801213a:	d02c      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	4a6a      	ldr	r2, [pc, #424]	@ (80122ec <HAL_DMA_PollForTransfer+0x5e0>)
 8012142:	4293      	cmp	r3, r2
 8012144:	d027      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	4a69      	ldr	r2, [pc, #420]	@ (80122f0 <HAL_DMA_PollForTransfer+0x5e4>)
 801214c:	4293      	cmp	r3, r2
 801214e:	d022      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	4a67      	ldr	r2, [pc, #412]	@ (80122f4 <HAL_DMA_PollForTransfer+0x5e8>)
 8012156:	4293      	cmp	r3, r2
 8012158:	d01d      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	4a66      	ldr	r2, [pc, #408]	@ (80122f8 <HAL_DMA_PollForTransfer+0x5ec>)
 8012160:	4293      	cmp	r3, r2
 8012162:	d018      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	4a64      	ldr	r2, [pc, #400]	@ (80122fc <HAL_DMA_PollForTransfer+0x5f0>)
 801216a:	4293      	cmp	r3, r2
 801216c:	d013      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	4a63      	ldr	r2, [pc, #396]	@ (8012300 <HAL_DMA_PollForTransfer+0x5f4>)
 8012174:	4293      	cmp	r3, r2
 8012176:	d00e      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	4a61      	ldr	r2, [pc, #388]	@ (8012304 <HAL_DMA_PollForTransfer+0x5f8>)
 801217e:	4293      	cmp	r3, r2
 8012180:	d009      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	4a60      	ldr	r2, [pc, #384]	@ (8012308 <HAL_DMA_PollForTransfer+0x5fc>)
 8012188:	4293      	cmp	r3, r2
 801218a:	d004      	beq.n	8012196 <HAL_DMA_PollForTransfer+0x48a>
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	4a5e      	ldr	r2, [pc, #376]	@ (801230c <HAL_DMA_PollForTransfer+0x600>)
 8012192:	4293      	cmp	r3, r2
 8012194:	d101      	bne.n	801219a <HAL_DMA_PollForTransfer+0x48e>
 8012196:	2301      	movs	r3, #1
 8012198:	e000      	b.n	801219c <HAL_DMA_PollForTransfer+0x490>
 801219a:	2300      	movs	r3, #0
 801219c:	2b00      	cmp	r3, #0
 801219e:	d029      	beq.n	80121f4 <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d012      	beq.n	80121ce <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80121ac:	681a      	ldr	r2, [r3, #0]
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80121b2:	4013      	ands	r3, r2
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d00a      	beq.n	80121ce <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80121bc:	68fa      	ldr	r2, [r7, #12]
 80121be:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80121c0:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80121c6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80121d2:	681a      	ldr	r2, [r3, #0]
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80121d8:	4013      	ands	r3, r2
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d00a      	beq.n	80121f4 <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80121e2:	68fa      	ldr	r2, [r7, #12]
 80121e4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80121e6:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80121ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	655a      	str	r2, [r3, #84]	@ 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
 80121f4:	6a3b      	ldr	r3, [r7, #32]
 80121f6:	681a      	ldr	r2, [r3, #0]
 80121f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121fa:	4013      	ands	r3, r2
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	f43f ae4c 	beq.w	8011e9a <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8012202:	7afb      	ldrb	r3, [r7, #11]
 8012204:	2b00      	cmp	r3, #0
 8012206:	f040 80a0 	bne.w	801234a <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	4a28      	ldr	r2, [pc, #160]	@ (80122b0 <HAL_DMA_PollForTransfer+0x5a4>)
 8012210:	4293      	cmp	r3, r2
 8012212:	d04a      	beq.n	80122aa <HAL_DMA_PollForTransfer+0x59e>
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	4a26      	ldr	r2, [pc, #152]	@ (80122b4 <HAL_DMA_PollForTransfer+0x5a8>)
 801221a:	4293      	cmp	r3, r2
 801221c:	d045      	beq.n	80122aa <HAL_DMA_PollForTransfer+0x59e>
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	4a25      	ldr	r2, [pc, #148]	@ (80122b8 <HAL_DMA_PollForTransfer+0x5ac>)
 8012224:	4293      	cmp	r3, r2
 8012226:	d040      	beq.n	80122aa <HAL_DMA_PollForTransfer+0x59e>
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	4a23      	ldr	r2, [pc, #140]	@ (80122bc <HAL_DMA_PollForTransfer+0x5b0>)
 801222e:	4293      	cmp	r3, r2
 8012230:	d03b      	beq.n	80122aa <HAL_DMA_PollForTransfer+0x59e>
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	4a22      	ldr	r2, [pc, #136]	@ (80122c0 <HAL_DMA_PollForTransfer+0x5b4>)
 8012238:	4293      	cmp	r3, r2
 801223a:	d036      	beq.n	80122aa <HAL_DMA_PollForTransfer+0x59e>
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	4a20      	ldr	r2, [pc, #128]	@ (80122c4 <HAL_DMA_PollForTransfer+0x5b8>)
 8012242:	4293      	cmp	r3, r2
 8012244:	d031      	beq.n	80122aa <HAL_DMA_PollForTransfer+0x59e>
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	4a1f      	ldr	r2, [pc, #124]	@ (80122c8 <HAL_DMA_PollForTransfer+0x5bc>)
 801224c:	4293      	cmp	r3, r2
 801224e:	d02c      	beq.n	80122aa <HAL_DMA_PollForTransfer+0x59e>
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	4a1d      	ldr	r2, [pc, #116]	@ (80122cc <HAL_DMA_PollForTransfer+0x5c0>)
 8012256:	4293      	cmp	r3, r2
 8012258:	d027      	beq.n	80122aa <HAL_DMA_PollForTransfer+0x59e>
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	4a1c      	ldr	r2, [pc, #112]	@ (80122d0 <HAL_DMA_PollForTransfer+0x5c4>)
 8012260:	4293      	cmp	r3, r2
 8012262:	d022      	beq.n	80122aa <HAL_DMA_PollForTransfer+0x59e>
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	4a1a      	ldr	r2, [pc, #104]	@ (80122d4 <HAL_DMA_PollForTransfer+0x5c8>)
 801226a:	4293      	cmp	r3, r2
 801226c:	d01d      	beq.n	80122aa <HAL_DMA_PollForTransfer+0x59e>
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	4a19      	ldr	r2, [pc, #100]	@ (80122d8 <HAL_DMA_PollForTransfer+0x5cc>)
 8012274:	4293      	cmp	r3, r2
 8012276:	d018      	beq.n	80122aa <HAL_DMA_PollForTransfer+0x59e>
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	4a17      	ldr	r2, [pc, #92]	@ (80122dc <HAL_DMA_PollForTransfer+0x5d0>)
 801227e:	4293      	cmp	r3, r2
 8012280:	d013      	beq.n	80122aa <HAL_DMA_PollForTransfer+0x59e>
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	4a16      	ldr	r2, [pc, #88]	@ (80122e0 <HAL_DMA_PollForTransfer+0x5d4>)
 8012288:	4293      	cmp	r3, r2
 801228a:	d00e      	beq.n	80122aa <HAL_DMA_PollForTransfer+0x59e>
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	4a14      	ldr	r2, [pc, #80]	@ (80122e4 <HAL_DMA_PollForTransfer+0x5d8>)
 8012292:	4293      	cmp	r3, r2
 8012294:	d009      	beq.n	80122aa <HAL_DMA_PollForTransfer+0x59e>
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	4a13      	ldr	r2, [pc, #76]	@ (80122e8 <HAL_DMA_PollForTransfer+0x5dc>)
 801229c:	4293      	cmp	r3, r2
 801229e:	d004      	beq.n	80122aa <HAL_DMA_PollForTransfer+0x59e>
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	4a11      	ldr	r2, [pc, #68]	@ (80122ec <HAL_DMA_PollForTransfer+0x5e0>)
 80122a6:	4293      	cmp	r3, r2
 80122a8:	d132      	bne.n	8012310 <HAL_DMA_PollForTransfer+0x604>
 80122aa:	2301      	movs	r3, #1
 80122ac:	e031      	b.n	8012312 <HAL_DMA_PollForTransfer+0x606>
 80122ae:	bf00      	nop
 80122b0:	40020010 	.word	0x40020010
 80122b4:	40020028 	.word	0x40020028
 80122b8:	40020040 	.word	0x40020040
 80122bc:	40020058 	.word	0x40020058
 80122c0:	40020070 	.word	0x40020070
 80122c4:	40020088 	.word	0x40020088
 80122c8:	400200a0 	.word	0x400200a0
 80122cc:	400200b8 	.word	0x400200b8
 80122d0:	40020410 	.word	0x40020410
 80122d4:	40020428 	.word	0x40020428
 80122d8:	40020440 	.word	0x40020440
 80122dc:	40020458 	.word	0x40020458
 80122e0:	40020470 	.word	0x40020470
 80122e4:	40020488 	.word	0x40020488
 80122e8:	400204a0 	.word	0x400204a0
 80122ec:	400204b8 	.word	0x400204b8
 80122f0:	58025408 	.word	0x58025408
 80122f4:	5802541c 	.word	0x5802541c
 80122f8:	58025430 	.word	0x58025430
 80122fc:	58025444 	.word	0x58025444
 8012300:	58025458 	.word	0x58025458
 8012304:	5802546c 	.word	0x5802546c
 8012308:	58025480 	.word	0x58025480
 801230c:	58025494 	.word	0x58025494
 8012310:	2300      	movs	r3, #0
 8012312:	2b00      	cmp	r3, #0
 8012314:	d008      	beq.n	8012328 <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801231a:	f003 031f 	and.w	r3, r3, #31
 801231e:	2230      	movs	r2, #48	@ 0x30
 8012320:	409a      	lsls	r2, r3
 8012322:	69fb      	ldr	r3, [r7, #28]
 8012324:	601a      	str	r2, [r3, #0]
 8012326:	e007      	b.n	8012338 <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801232c:	f003 031f 	and.w	r3, r3, #31
 8012330:	2202      	movs	r2, #2
 8012332:	409a      	lsls	r2, r3
 8012334:	69fb      	ldr	r3, [r7, #28]
 8012336:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	2201      	movs	r2, #1
 801233c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	2200      	movs	r2, #0
 8012344:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8012348:	e065      	b.n	8012416 <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	4a34      	ldr	r2, [pc, #208]	@ (8012420 <HAL_DMA_PollForTransfer+0x714>)
 8012350:	4293      	cmp	r3, r2
 8012352:	d04a      	beq.n	80123ea <HAL_DMA_PollForTransfer+0x6de>
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	4a32      	ldr	r2, [pc, #200]	@ (8012424 <HAL_DMA_PollForTransfer+0x718>)
 801235a:	4293      	cmp	r3, r2
 801235c:	d045      	beq.n	80123ea <HAL_DMA_PollForTransfer+0x6de>
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	4a31      	ldr	r2, [pc, #196]	@ (8012428 <HAL_DMA_PollForTransfer+0x71c>)
 8012364:	4293      	cmp	r3, r2
 8012366:	d040      	beq.n	80123ea <HAL_DMA_PollForTransfer+0x6de>
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	4a2f      	ldr	r2, [pc, #188]	@ (801242c <HAL_DMA_PollForTransfer+0x720>)
 801236e:	4293      	cmp	r3, r2
 8012370:	d03b      	beq.n	80123ea <HAL_DMA_PollForTransfer+0x6de>
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	4a2e      	ldr	r2, [pc, #184]	@ (8012430 <HAL_DMA_PollForTransfer+0x724>)
 8012378:	4293      	cmp	r3, r2
 801237a:	d036      	beq.n	80123ea <HAL_DMA_PollForTransfer+0x6de>
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	4a2c      	ldr	r2, [pc, #176]	@ (8012434 <HAL_DMA_PollForTransfer+0x728>)
 8012382:	4293      	cmp	r3, r2
 8012384:	d031      	beq.n	80123ea <HAL_DMA_PollForTransfer+0x6de>
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	4a2b      	ldr	r2, [pc, #172]	@ (8012438 <HAL_DMA_PollForTransfer+0x72c>)
 801238c:	4293      	cmp	r3, r2
 801238e:	d02c      	beq.n	80123ea <HAL_DMA_PollForTransfer+0x6de>
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	4a29      	ldr	r2, [pc, #164]	@ (801243c <HAL_DMA_PollForTransfer+0x730>)
 8012396:	4293      	cmp	r3, r2
 8012398:	d027      	beq.n	80123ea <HAL_DMA_PollForTransfer+0x6de>
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	4a28      	ldr	r2, [pc, #160]	@ (8012440 <HAL_DMA_PollForTransfer+0x734>)
 80123a0:	4293      	cmp	r3, r2
 80123a2:	d022      	beq.n	80123ea <HAL_DMA_PollForTransfer+0x6de>
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	4a26      	ldr	r2, [pc, #152]	@ (8012444 <HAL_DMA_PollForTransfer+0x738>)
 80123aa:	4293      	cmp	r3, r2
 80123ac:	d01d      	beq.n	80123ea <HAL_DMA_PollForTransfer+0x6de>
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	4a25      	ldr	r2, [pc, #148]	@ (8012448 <HAL_DMA_PollForTransfer+0x73c>)
 80123b4:	4293      	cmp	r3, r2
 80123b6:	d018      	beq.n	80123ea <HAL_DMA_PollForTransfer+0x6de>
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	4a23      	ldr	r2, [pc, #140]	@ (801244c <HAL_DMA_PollForTransfer+0x740>)
 80123be:	4293      	cmp	r3, r2
 80123c0:	d013      	beq.n	80123ea <HAL_DMA_PollForTransfer+0x6de>
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	4a22      	ldr	r2, [pc, #136]	@ (8012450 <HAL_DMA_PollForTransfer+0x744>)
 80123c8:	4293      	cmp	r3, r2
 80123ca:	d00e      	beq.n	80123ea <HAL_DMA_PollForTransfer+0x6de>
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	4a20      	ldr	r2, [pc, #128]	@ (8012454 <HAL_DMA_PollForTransfer+0x748>)
 80123d2:	4293      	cmp	r3, r2
 80123d4:	d009      	beq.n	80123ea <HAL_DMA_PollForTransfer+0x6de>
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	4a1f      	ldr	r2, [pc, #124]	@ (8012458 <HAL_DMA_PollForTransfer+0x74c>)
 80123dc:	4293      	cmp	r3, r2
 80123de:	d004      	beq.n	80123ea <HAL_DMA_PollForTransfer+0x6de>
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	4a1d      	ldr	r2, [pc, #116]	@ (801245c <HAL_DMA_PollForTransfer+0x750>)
 80123e6:	4293      	cmp	r3, r2
 80123e8:	d101      	bne.n	80123ee <HAL_DMA_PollForTransfer+0x6e2>
 80123ea:	2301      	movs	r3, #1
 80123ec:	e000      	b.n	80123f0 <HAL_DMA_PollForTransfer+0x6e4>
 80123ee:	2300      	movs	r3, #0
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d008      	beq.n	8012406 <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80123f8:	f003 031f 	and.w	r3, r3, #31
 80123fc:	2210      	movs	r2, #16
 80123fe:	409a      	lsls	r2, r3
 8012400:	69fb      	ldr	r3, [r7, #28]
 8012402:	601a      	str	r2, [r3, #0]
 8012404:	e007      	b.n	8012416 <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801240a:	f003 031f 	and.w	r3, r3, #31
 801240e:	2204      	movs	r2, #4
 8012410:	409a      	lsls	r2, r3
 8012412:	69fb      	ldr	r3, [r7, #28]
 8012414:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8012416:	7efb      	ldrb	r3, [r7, #27]
}
 8012418:	4618      	mov	r0, r3
 801241a:	3728      	adds	r7, #40	@ 0x28
 801241c:	46bd      	mov	sp, r7
 801241e:	bd80      	pop	{r7, pc}
 8012420:	40020010 	.word	0x40020010
 8012424:	40020028 	.word	0x40020028
 8012428:	40020040 	.word	0x40020040
 801242c:	40020058 	.word	0x40020058
 8012430:	40020070 	.word	0x40020070
 8012434:	40020088 	.word	0x40020088
 8012438:	400200a0 	.word	0x400200a0
 801243c:	400200b8 	.word	0x400200b8
 8012440:	40020410 	.word	0x40020410
 8012444:	40020428 	.word	0x40020428
 8012448:	40020440 	.word	0x40020440
 801244c:	40020458 	.word	0x40020458
 8012450:	40020470 	.word	0x40020470
 8012454:	40020488 	.word	0x40020488
 8012458:	400204a0 	.word	0x400204a0
 801245c:	400204b8 	.word	0x400204b8

08012460 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012460:	b480      	push	{r7}
 8012462:	b087      	sub	sp, #28
 8012464:	af00      	add	r7, sp, #0
 8012466:	60f8      	str	r0, [r7, #12]
 8012468:	60b9      	str	r1, [r7, #8]
 801246a:	607a      	str	r2, [r7, #4]
 801246c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012472:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012478:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	4a7f      	ldr	r2, [pc, #508]	@ (801267c <DMA_SetConfig+0x21c>)
 8012480:	4293      	cmp	r3, r2
 8012482:	d072      	beq.n	801256a <DMA_SetConfig+0x10a>
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	4a7d      	ldr	r2, [pc, #500]	@ (8012680 <DMA_SetConfig+0x220>)
 801248a:	4293      	cmp	r3, r2
 801248c:	d06d      	beq.n	801256a <DMA_SetConfig+0x10a>
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	4a7c      	ldr	r2, [pc, #496]	@ (8012684 <DMA_SetConfig+0x224>)
 8012494:	4293      	cmp	r3, r2
 8012496:	d068      	beq.n	801256a <DMA_SetConfig+0x10a>
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	4a7a      	ldr	r2, [pc, #488]	@ (8012688 <DMA_SetConfig+0x228>)
 801249e:	4293      	cmp	r3, r2
 80124a0:	d063      	beq.n	801256a <DMA_SetConfig+0x10a>
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	4a79      	ldr	r2, [pc, #484]	@ (801268c <DMA_SetConfig+0x22c>)
 80124a8:	4293      	cmp	r3, r2
 80124aa:	d05e      	beq.n	801256a <DMA_SetConfig+0x10a>
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	4a77      	ldr	r2, [pc, #476]	@ (8012690 <DMA_SetConfig+0x230>)
 80124b2:	4293      	cmp	r3, r2
 80124b4:	d059      	beq.n	801256a <DMA_SetConfig+0x10a>
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	4a76      	ldr	r2, [pc, #472]	@ (8012694 <DMA_SetConfig+0x234>)
 80124bc:	4293      	cmp	r3, r2
 80124be:	d054      	beq.n	801256a <DMA_SetConfig+0x10a>
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	4a74      	ldr	r2, [pc, #464]	@ (8012698 <DMA_SetConfig+0x238>)
 80124c6:	4293      	cmp	r3, r2
 80124c8:	d04f      	beq.n	801256a <DMA_SetConfig+0x10a>
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	4a73      	ldr	r2, [pc, #460]	@ (801269c <DMA_SetConfig+0x23c>)
 80124d0:	4293      	cmp	r3, r2
 80124d2:	d04a      	beq.n	801256a <DMA_SetConfig+0x10a>
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	4a71      	ldr	r2, [pc, #452]	@ (80126a0 <DMA_SetConfig+0x240>)
 80124da:	4293      	cmp	r3, r2
 80124dc:	d045      	beq.n	801256a <DMA_SetConfig+0x10a>
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	4a70      	ldr	r2, [pc, #448]	@ (80126a4 <DMA_SetConfig+0x244>)
 80124e4:	4293      	cmp	r3, r2
 80124e6:	d040      	beq.n	801256a <DMA_SetConfig+0x10a>
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	4a6e      	ldr	r2, [pc, #440]	@ (80126a8 <DMA_SetConfig+0x248>)
 80124ee:	4293      	cmp	r3, r2
 80124f0:	d03b      	beq.n	801256a <DMA_SetConfig+0x10a>
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	4a6d      	ldr	r2, [pc, #436]	@ (80126ac <DMA_SetConfig+0x24c>)
 80124f8:	4293      	cmp	r3, r2
 80124fa:	d036      	beq.n	801256a <DMA_SetConfig+0x10a>
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	4a6b      	ldr	r2, [pc, #428]	@ (80126b0 <DMA_SetConfig+0x250>)
 8012502:	4293      	cmp	r3, r2
 8012504:	d031      	beq.n	801256a <DMA_SetConfig+0x10a>
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	4a6a      	ldr	r2, [pc, #424]	@ (80126b4 <DMA_SetConfig+0x254>)
 801250c:	4293      	cmp	r3, r2
 801250e:	d02c      	beq.n	801256a <DMA_SetConfig+0x10a>
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	4a68      	ldr	r2, [pc, #416]	@ (80126b8 <DMA_SetConfig+0x258>)
 8012516:	4293      	cmp	r3, r2
 8012518:	d027      	beq.n	801256a <DMA_SetConfig+0x10a>
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	4a67      	ldr	r2, [pc, #412]	@ (80126bc <DMA_SetConfig+0x25c>)
 8012520:	4293      	cmp	r3, r2
 8012522:	d022      	beq.n	801256a <DMA_SetConfig+0x10a>
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	4a65      	ldr	r2, [pc, #404]	@ (80126c0 <DMA_SetConfig+0x260>)
 801252a:	4293      	cmp	r3, r2
 801252c:	d01d      	beq.n	801256a <DMA_SetConfig+0x10a>
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	4a64      	ldr	r2, [pc, #400]	@ (80126c4 <DMA_SetConfig+0x264>)
 8012534:	4293      	cmp	r3, r2
 8012536:	d018      	beq.n	801256a <DMA_SetConfig+0x10a>
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	4a62      	ldr	r2, [pc, #392]	@ (80126c8 <DMA_SetConfig+0x268>)
 801253e:	4293      	cmp	r3, r2
 8012540:	d013      	beq.n	801256a <DMA_SetConfig+0x10a>
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	4a61      	ldr	r2, [pc, #388]	@ (80126cc <DMA_SetConfig+0x26c>)
 8012548:	4293      	cmp	r3, r2
 801254a:	d00e      	beq.n	801256a <DMA_SetConfig+0x10a>
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	4a5f      	ldr	r2, [pc, #380]	@ (80126d0 <DMA_SetConfig+0x270>)
 8012552:	4293      	cmp	r3, r2
 8012554:	d009      	beq.n	801256a <DMA_SetConfig+0x10a>
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	4a5e      	ldr	r2, [pc, #376]	@ (80126d4 <DMA_SetConfig+0x274>)
 801255c:	4293      	cmp	r3, r2
 801255e:	d004      	beq.n	801256a <DMA_SetConfig+0x10a>
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	4a5c      	ldr	r2, [pc, #368]	@ (80126d8 <DMA_SetConfig+0x278>)
 8012566:	4293      	cmp	r3, r2
 8012568:	d101      	bne.n	801256e <DMA_SetConfig+0x10e>
 801256a:	2301      	movs	r3, #1
 801256c:	e000      	b.n	8012570 <DMA_SetConfig+0x110>
 801256e:	2300      	movs	r3, #0
 8012570:	2b00      	cmp	r3, #0
 8012572:	d00d      	beq.n	8012590 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012578:	68fa      	ldr	r2, [r7, #12]
 801257a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801257c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012582:	2b00      	cmp	r3, #0
 8012584:	d004      	beq.n	8012590 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801258a:	68fa      	ldr	r2, [r7, #12]
 801258c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801258e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	4a39      	ldr	r2, [pc, #228]	@ (801267c <DMA_SetConfig+0x21c>)
 8012596:	4293      	cmp	r3, r2
 8012598:	d04a      	beq.n	8012630 <DMA_SetConfig+0x1d0>
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	4a38      	ldr	r2, [pc, #224]	@ (8012680 <DMA_SetConfig+0x220>)
 80125a0:	4293      	cmp	r3, r2
 80125a2:	d045      	beq.n	8012630 <DMA_SetConfig+0x1d0>
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	4a36      	ldr	r2, [pc, #216]	@ (8012684 <DMA_SetConfig+0x224>)
 80125aa:	4293      	cmp	r3, r2
 80125ac:	d040      	beq.n	8012630 <DMA_SetConfig+0x1d0>
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	4a35      	ldr	r2, [pc, #212]	@ (8012688 <DMA_SetConfig+0x228>)
 80125b4:	4293      	cmp	r3, r2
 80125b6:	d03b      	beq.n	8012630 <DMA_SetConfig+0x1d0>
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	4a33      	ldr	r2, [pc, #204]	@ (801268c <DMA_SetConfig+0x22c>)
 80125be:	4293      	cmp	r3, r2
 80125c0:	d036      	beq.n	8012630 <DMA_SetConfig+0x1d0>
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	4a32      	ldr	r2, [pc, #200]	@ (8012690 <DMA_SetConfig+0x230>)
 80125c8:	4293      	cmp	r3, r2
 80125ca:	d031      	beq.n	8012630 <DMA_SetConfig+0x1d0>
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	4a30      	ldr	r2, [pc, #192]	@ (8012694 <DMA_SetConfig+0x234>)
 80125d2:	4293      	cmp	r3, r2
 80125d4:	d02c      	beq.n	8012630 <DMA_SetConfig+0x1d0>
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	4a2f      	ldr	r2, [pc, #188]	@ (8012698 <DMA_SetConfig+0x238>)
 80125dc:	4293      	cmp	r3, r2
 80125de:	d027      	beq.n	8012630 <DMA_SetConfig+0x1d0>
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	4a2d      	ldr	r2, [pc, #180]	@ (801269c <DMA_SetConfig+0x23c>)
 80125e6:	4293      	cmp	r3, r2
 80125e8:	d022      	beq.n	8012630 <DMA_SetConfig+0x1d0>
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	4a2c      	ldr	r2, [pc, #176]	@ (80126a0 <DMA_SetConfig+0x240>)
 80125f0:	4293      	cmp	r3, r2
 80125f2:	d01d      	beq.n	8012630 <DMA_SetConfig+0x1d0>
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	4a2a      	ldr	r2, [pc, #168]	@ (80126a4 <DMA_SetConfig+0x244>)
 80125fa:	4293      	cmp	r3, r2
 80125fc:	d018      	beq.n	8012630 <DMA_SetConfig+0x1d0>
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	4a29      	ldr	r2, [pc, #164]	@ (80126a8 <DMA_SetConfig+0x248>)
 8012604:	4293      	cmp	r3, r2
 8012606:	d013      	beq.n	8012630 <DMA_SetConfig+0x1d0>
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	4a27      	ldr	r2, [pc, #156]	@ (80126ac <DMA_SetConfig+0x24c>)
 801260e:	4293      	cmp	r3, r2
 8012610:	d00e      	beq.n	8012630 <DMA_SetConfig+0x1d0>
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	4a26      	ldr	r2, [pc, #152]	@ (80126b0 <DMA_SetConfig+0x250>)
 8012618:	4293      	cmp	r3, r2
 801261a:	d009      	beq.n	8012630 <DMA_SetConfig+0x1d0>
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	4a24      	ldr	r2, [pc, #144]	@ (80126b4 <DMA_SetConfig+0x254>)
 8012622:	4293      	cmp	r3, r2
 8012624:	d004      	beq.n	8012630 <DMA_SetConfig+0x1d0>
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	4a23      	ldr	r2, [pc, #140]	@ (80126b8 <DMA_SetConfig+0x258>)
 801262c:	4293      	cmp	r3, r2
 801262e:	d101      	bne.n	8012634 <DMA_SetConfig+0x1d4>
 8012630:	2301      	movs	r3, #1
 8012632:	e000      	b.n	8012636 <DMA_SetConfig+0x1d6>
 8012634:	2300      	movs	r3, #0
 8012636:	2b00      	cmp	r3, #0
 8012638:	d059      	beq.n	80126ee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801263e:	f003 031f 	and.w	r3, r3, #31
 8012642:	223f      	movs	r2, #63	@ 0x3f
 8012644:	409a      	lsls	r2, r3
 8012646:	697b      	ldr	r3, [r7, #20]
 8012648:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	681a      	ldr	r2, [r3, #0]
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8012658:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	683a      	ldr	r2, [r7, #0]
 8012660:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	689b      	ldr	r3, [r3, #8]
 8012666:	2b40      	cmp	r3, #64	@ 0x40
 8012668:	d138      	bne.n	80126dc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	687a      	ldr	r2, [r7, #4]
 8012670:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	68ba      	ldr	r2, [r7, #8]
 8012678:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 801267a:	e086      	b.n	801278a <DMA_SetConfig+0x32a>
 801267c:	40020010 	.word	0x40020010
 8012680:	40020028 	.word	0x40020028
 8012684:	40020040 	.word	0x40020040
 8012688:	40020058 	.word	0x40020058
 801268c:	40020070 	.word	0x40020070
 8012690:	40020088 	.word	0x40020088
 8012694:	400200a0 	.word	0x400200a0
 8012698:	400200b8 	.word	0x400200b8
 801269c:	40020410 	.word	0x40020410
 80126a0:	40020428 	.word	0x40020428
 80126a4:	40020440 	.word	0x40020440
 80126a8:	40020458 	.word	0x40020458
 80126ac:	40020470 	.word	0x40020470
 80126b0:	40020488 	.word	0x40020488
 80126b4:	400204a0 	.word	0x400204a0
 80126b8:	400204b8 	.word	0x400204b8
 80126bc:	58025408 	.word	0x58025408
 80126c0:	5802541c 	.word	0x5802541c
 80126c4:	58025430 	.word	0x58025430
 80126c8:	58025444 	.word	0x58025444
 80126cc:	58025458 	.word	0x58025458
 80126d0:	5802546c 	.word	0x5802546c
 80126d4:	58025480 	.word	0x58025480
 80126d8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	68ba      	ldr	r2, [r7, #8]
 80126e2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	687a      	ldr	r2, [r7, #4]
 80126ea:	60da      	str	r2, [r3, #12]
}
 80126ec:	e04d      	b.n	801278a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	4a29      	ldr	r2, [pc, #164]	@ (8012798 <DMA_SetConfig+0x338>)
 80126f4:	4293      	cmp	r3, r2
 80126f6:	d022      	beq.n	801273e <DMA_SetConfig+0x2de>
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	4a27      	ldr	r2, [pc, #156]	@ (801279c <DMA_SetConfig+0x33c>)
 80126fe:	4293      	cmp	r3, r2
 8012700:	d01d      	beq.n	801273e <DMA_SetConfig+0x2de>
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	4a26      	ldr	r2, [pc, #152]	@ (80127a0 <DMA_SetConfig+0x340>)
 8012708:	4293      	cmp	r3, r2
 801270a:	d018      	beq.n	801273e <DMA_SetConfig+0x2de>
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	4a24      	ldr	r2, [pc, #144]	@ (80127a4 <DMA_SetConfig+0x344>)
 8012712:	4293      	cmp	r3, r2
 8012714:	d013      	beq.n	801273e <DMA_SetConfig+0x2de>
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	4a23      	ldr	r2, [pc, #140]	@ (80127a8 <DMA_SetConfig+0x348>)
 801271c:	4293      	cmp	r3, r2
 801271e:	d00e      	beq.n	801273e <DMA_SetConfig+0x2de>
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	4a21      	ldr	r2, [pc, #132]	@ (80127ac <DMA_SetConfig+0x34c>)
 8012726:	4293      	cmp	r3, r2
 8012728:	d009      	beq.n	801273e <DMA_SetConfig+0x2de>
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	4a20      	ldr	r2, [pc, #128]	@ (80127b0 <DMA_SetConfig+0x350>)
 8012730:	4293      	cmp	r3, r2
 8012732:	d004      	beq.n	801273e <DMA_SetConfig+0x2de>
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	4a1e      	ldr	r2, [pc, #120]	@ (80127b4 <DMA_SetConfig+0x354>)
 801273a:	4293      	cmp	r3, r2
 801273c:	d101      	bne.n	8012742 <DMA_SetConfig+0x2e2>
 801273e:	2301      	movs	r3, #1
 8012740:	e000      	b.n	8012744 <DMA_SetConfig+0x2e4>
 8012742:	2300      	movs	r3, #0
 8012744:	2b00      	cmp	r3, #0
 8012746:	d020      	beq.n	801278a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801274c:	f003 031f 	and.w	r3, r3, #31
 8012750:	2201      	movs	r2, #1
 8012752:	409a      	lsls	r2, r3
 8012754:	693b      	ldr	r3, [r7, #16]
 8012756:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	683a      	ldr	r2, [r7, #0]
 801275e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	689b      	ldr	r3, [r3, #8]
 8012764:	2b40      	cmp	r3, #64	@ 0x40
 8012766:	d108      	bne.n	801277a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	687a      	ldr	r2, [r7, #4]
 801276e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	68ba      	ldr	r2, [r7, #8]
 8012776:	60da      	str	r2, [r3, #12]
}
 8012778:	e007      	b.n	801278a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	68ba      	ldr	r2, [r7, #8]
 8012780:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	687a      	ldr	r2, [r7, #4]
 8012788:	60da      	str	r2, [r3, #12]
}
 801278a:	bf00      	nop
 801278c:	371c      	adds	r7, #28
 801278e:	46bd      	mov	sp, r7
 8012790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012794:	4770      	bx	lr
 8012796:	bf00      	nop
 8012798:	58025408 	.word	0x58025408
 801279c:	5802541c 	.word	0x5802541c
 80127a0:	58025430 	.word	0x58025430
 80127a4:	58025444 	.word	0x58025444
 80127a8:	58025458 	.word	0x58025458
 80127ac:	5802546c 	.word	0x5802546c
 80127b0:	58025480 	.word	0x58025480
 80127b4:	58025494 	.word	0x58025494

080127b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80127b8:	b480      	push	{r7}
 80127ba:	b085      	sub	sp, #20
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	4a42      	ldr	r2, [pc, #264]	@ (80128d0 <DMA_CalcBaseAndBitshift+0x118>)
 80127c6:	4293      	cmp	r3, r2
 80127c8:	d04a      	beq.n	8012860 <DMA_CalcBaseAndBitshift+0xa8>
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	4a41      	ldr	r2, [pc, #260]	@ (80128d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80127d0:	4293      	cmp	r3, r2
 80127d2:	d045      	beq.n	8012860 <DMA_CalcBaseAndBitshift+0xa8>
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	4a3f      	ldr	r2, [pc, #252]	@ (80128d8 <DMA_CalcBaseAndBitshift+0x120>)
 80127da:	4293      	cmp	r3, r2
 80127dc:	d040      	beq.n	8012860 <DMA_CalcBaseAndBitshift+0xa8>
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	4a3e      	ldr	r2, [pc, #248]	@ (80128dc <DMA_CalcBaseAndBitshift+0x124>)
 80127e4:	4293      	cmp	r3, r2
 80127e6:	d03b      	beq.n	8012860 <DMA_CalcBaseAndBitshift+0xa8>
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	4a3c      	ldr	r2, [pc, #240]	@ (80128e0 <DMA_CalcBaseAndBitshift+0x128>)
 80127ee:	4293      	cmp	r3, r2
 80127f0:	d036      	beq.n	8012860 <DMA_CalcBaseAndBitshift+0xa8>
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	4a3b      	ldr	r2, [pc, #236]	@ (80128e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80127f8:	4293      	cmp	r3, r2
 80127fa:	d031      	beq.n	8012860 <DMA_CalcBaseAndBitshift+0xa8>
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	4a39      	ldr	r2, [pc, #228]	@ (80128e8 <DMA_CalcBaseAndBitshift+0x130>)
 8012802:	4293      	cmp	r3, r2
 8012804:	d02c      	beq.n	8012860 <DMA_CalcBaseAndBitshift+0xa8>
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	4a38      	ldr	r2, [pc, #224]	@ (80128ec <DMA_CalcBaseAndBitshift+0x134>)
 801280c:	4293      	cmp	r3, r2
 801280e:	d027      	beq.n	8012860 <DMA_CalcBaseAndBitshift+0xa8>
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	4a36      	ldr	r2, [pc, #216]	@ (80128f0 <DMA_CalcBaseAndBitshift+0x138>)
 8012816:	4293      	cmp	r3, r2
 8012818:	d022      	beq.n	8012860 <DMA_CalcBaseAndBitshift+0xa8>
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	4a35      	ldr	r2, [pc, #212]	@ (80128f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8012820:	4293      	cmp	r3, r2
 8012822:	d01d      	beq.n	8012860 <DMA_CalcBaseAndBitshift+0xa8>
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	4a33      	ldr	r2, [pc, #204]	@ (80128f8 <DMA_CalcBaseAndBitshift+0x140>)
 801282a:	4293      	cmp	r3, r2
 801282c:	d018      	beq.n	8012860 <DMA_CalcBaseAndBitshift+0xa8>
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	4a32      	ldr	r2, [pc, #200]	@ (80128fc <DMA_CalcBaseAndBitshift+0x144>)
 8012834:	4293      	cmp	r3, r2
 8012836:	d013      	beq.n	8012860 <DMA_CalcBaseAndBitshift+0xa8>
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	4a30      	ldr	r2, [pc, #192]	@ (8012900 <DMA_CalcBaseAndBitshift+0x148>)
 801283e:	4293      	cmp	r3, r2
 8012840:	d00e      	beq.n	8012860 <DMA_CalcBaseAndBitshift+0xa8>
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	4a2f      	ldr	r2, [pc, #188]	@ (8012904 <DMA_CalcBaseAndBitshift+0x14c>)
 8012848:	4293      	cmp	r3, r2
 801284a:	d009      	beq.n	8012860 <DMA_CalcBaseAndBitshift+0xa8>
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	4a2d      	ldr	r2, [pc, #180]	@ (8012908 <DMA_CalcBaseAndBitshift+0x150>)
 8012852:	4293      	cmp	r3, r2
 8012854:	d004      	beq.n	8012860 <DMA_CalcBaseAndBitshift+0xa8>
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	4a2c      	ldr	r2, [pc, #176]	@ (801290c <DMA_CalcBaseAndBitshift+0x154>)
 801285c:	4293      	cmp	r3, r2
 801285e:	d101      	bne.n	8012864 <DMA_CalcBaseAndBitshift+0xac>
 8012860:	2301      	movs	r3, #1
 8012862:	e000      	b.n	8012866 <DMA_CalcBaseAndBitshift+0xae>
 8012864:	2300      	movs	r3, #0
 8012866:	2b00      	cmp	r3, #0
 8012868:	d024      	beq.n	80128b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	b2db      	uxtb	r3, r3
 8012870:	3b10      	subs	r3, #16
 8012872:	4a27      	ldr	r2, [pc, #156]	@ (8012910 <DMA_CalcBaseAndBitshift+0x158>)
 8012874:	fba2 2303 	umull	r2, r3, r2, r3
 8012878:	091b      	lsrs	r3, r3, #4
 801287a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	f003 0307 	and.w	r3, r3, #7
 8012882:	4a24      	ldr	r2, [pc, #144]	@ (8012914 <DMA_CalcBaseAndBitshift+0x15c>)
 8012884:	5cd3      	ldrb	r3, [r2, r3]
 8012886:	461a      	mov	r2, r3
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	2b03      	cmp	r3, #3
 8012890:	d908      	bls.n	80128a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	461a      	mov	r2, r3
 8012898:	4b1f      	ldr	r3, [pc, #124]	@ (8012918 <DMA_CalcBaseAndBitshift+0x160>)
 801289a:	4013      	ands	r3, r2
 801289c:	1d1a      	adds	r2, r3, #4
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80128a2:	e00d      	b.n	80128c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	461a      	mov	r2, r3
 80128aa:	4b1b      	ldr	r3, [pc, #108]	@ (8012918 <DMA_CalcBaseAndBitshift+0x160>)
 80128ac:	4013      	ands	r3, r2
 80128ae:	687a      	ldr	r2, [r7, #4]
 80128b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80128b2:	e005      	b.n	80128c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80128c4:	4618      	mov	r0, r3
 80128c6:	3714      	adds	r7, #20
 80128c8:	46bd      	mov	sp, r7
 80128ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ce:	4770      	bx	lr
 80128d0:	40020010 	.word	0x40020010
 80128d4:	40020028 	.word	0x40020028
 80128d8:	40020040 	.word	0x40020040
 80128dc:	40020058 	.word	0x40020058
 80128e0:	40020070 	.word	0x40020070
 80128e4:	40020088 	.word	0x40020088
 80128e8:	400200a0 	.word	0x400200a0
 80128ec:	400200b8 	.word	0x400200b8
 80128f0:	40020410 	.word	0x40020410
 80128f4:	40020428 	.word	0x40020428
 80128f8:	40020440 	.word	0x40020440
 80128fc:	40020458 	.word	0x40020458
 8012900:	40020470 	.word	0x40020470
 8012904:	40020488 	.word	0x40020488
 8012908:	400204a0 	.word	0x400204a0
 801290c:	400204b8 	.word	0x400204b8
 8012910:	aaaaaaab 	.word	0xaaaaaaab
 8012914:	0801f72c 	.word	0x0801f72c
 8012918:	fffffc00 	.word	0xfffffc00

0801291c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801291c:	b480      	push	{r7}
 801291e:	b085      	sub	sp, #20
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012924:	2300      	movs	r3, #0
 8012926:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	699b      	ldr	r3, [r3, #24]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d120      	bne.n	8012972 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012934:	2b03      	cmp	r3, #3
 8012936:	d858      	bhi.n	80129ea <DMA_CheckFifoParam+0xce>
 8012938:	a201      	add	r2, pc, #4	@ (adr r2, 8012940 <DMA_CheckFifoParam+0x24>)
 801293a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801293e:	bf00      	nop
 8012940:	08012951 	.word	0x08012951
 8012944:	08012963 	.word	0x08012963
 8012948:	08012951 	.word	0x08012951
 801294c:	080129eb 	.word	0x080129eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012954:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012958:	2b00      	cmp	r3, #0
 801295a:	d048      	beq.n	80129ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801295c:	2301      	movs	r3, #1
 801295e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8012960:	e045      	b.n	80129ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012966:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801296a:	d142      	bne.n	80129f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801296c:	2301      	movs	r3, #1
 801296e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8012970:	e03f      	b.n	80129f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	699b      	ldr	r3, [r3, #24]
 8012976:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801297a:	d123      	bne.n	80129c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012980:	2b03      	cmp	r3, #3
 8012982:	d838      	bhi.n	80129f6 <DMA_CheckFifoParam+0xda>
 8012984:	a201      	add	r2, pc, #4	@ (adr r2, 801298c <DMA_CheckFifoParam+0x70>)
 8012986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801298a:	bf00      	nop
 801298c:	0801299d 	.word	0x0801299d
 8012990:	080129a3 	.word	0x080129a3
 8012994:	0801299d 	.word	0x0801299d
 8012998:	080129b5 	.word	0x080129b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801299c:	2301      	movs	r3, #1
 801299e:	73fb      	strb	r3, [r7, #15]
        break;
 80129a0:	e030      	b.n	8012a04 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d025      	beq.n	80129fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80129ae:	2301      	movs	r3, #1
 80129b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80129b2:	e022      	b.n	80129fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80129bc:	d11f      	bne.n	80129fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80129be:	2301      	movs	r3, #1
 80129c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80129c2:	e01c      	b.n	80129fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129c8:	2b02      	cmp	r3, #2
 80129ca:	d902      	bls.n	80129d2 <DMA_CheckFifoParam+0xb6>
 80129cc:	2b03      	cmp	r3, #3
 80129ce:	d003      	beq.n	80129d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80129d0:	e018      	b.n	8012a04 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80129d2:	2301      	movs	r3, #1
 80129d4:	73fb      	strb	r3, [r7, #15]
        break;
 80129d6:	e015      	b.n	8012a04 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d00e      	beq.n	8012a02 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80129e4:	2301      	movs	r3, #1
 80129e6:	73fb      	strb	r3, [r7, #15]
    break;
 80129e8:	e00b      	b.n	8012a02 <DMA_CheckFifoParam+0xe6>
        break;
 80129ea:	bf00      	nop
 80129ec:	e00a      	b.n	8012a04 <DMA_CheckFifoParam+0xe8>
        break;
 80129ee:	bf00      	nop
 80129f0:	e008      	b.n	8012a04 <DMA_CheckFifoParam+0xe8>
        break;
 80129f2:	bf00      	nop
 80129f4:	e006      	b.n	8012a04 <DMA_CheckFifoParam+0xe8>
        break;
 80129f6:	bf00      	nop
 80129f8:	e004      	b.n	8012a04 <DMA_CheckFifoParam+0xe8>
        break;
 80129fa:	bf00      	nop
 80129fc:	e002      	b.n	8012a04 <DMA_CheckFifoParam+0xe8>
        break;
 80129fe:	bf00      	nop
 8012a00:	e000      	b.n	8012a04 <DMA_CheckFifoParam+0xe8>
    break;
 8012a02:	bf00      	nop
    }
  }

  return status;
 8012a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a06:	4618      	mov	r0, r3
 8012a08:	3714      	adds	r7, #20
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a10:	4770      	bx	lr
 8012a12:	bf00      	nop

08012a14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8012a14:	b480      	push	{r7}
 8012a16:	b085      	sub	sp, #20
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	4a38      	ldr	r2, [pc, #224]	@ (8012b08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8012a28:	4293      	cmp	r3, r2
 8012a2a:	d022      	beq.n	8012a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	4a36      	ldr	r2, [pc, #216]	@ (8012b0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8012a32:	4293      	cmp	r3, r2
 8012a34:	d01d      	beq.n	8012a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	4a35      	ldr	r2, [pc, #212]	@ (8012b10 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8012a3c:	4293      	cmp	r3, r2
 8012a3e:	d018      	beq.n	8012a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	4a33      	ldr	r2, [pc, #204]	@ (8012b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8012a46:	4293      	cmp	r3, r2
 8012a48:	d013      	beq.n	8012a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	4a32      	ldr	r2, [pc, #200]	@ (8012b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8012a50:	4293      	cmp	r3, r2
 8012a52:	d00e      	beq.n	8012a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	4a30      	ldr	r2, [pc, #192]	@ (8012b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8012a5a:	4293      	cmp	r3, r2
 8012a5c:	d009      	beq.n	8012a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	4a2f      	ldr	r2, [pc, #188]	@ (8012b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8012a64:	4293      	cmp	r3, r2
 8012a66:	d004      	beq.n	8012a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	4a2d      	ldr	r2, [pc, #180]	@ (8012b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8012a6e:	4293      	cmp	r3, r2
 8012a70:	d101      	bne.n	8012a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8012a72:	2301      	movs	r3, #1
 8012a74:	e000      	b.n	8012a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8012a76:	2300      	movs	r3, #0
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d01a      	beq.n	8012ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	b2db      	uxtb	r3, r3
 8012a82:	3b08      	subs	r3, #8
 8012a84:	4a28      	ldr	r2, [pc, #160]	@ (8012b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8012a86:	fba2 2303 	umull	r2, r3, r2, r3
 8012a8a:	091b      	lsrs	r3, r3, #4
 8012a8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8012a8e:	68fa      	ldr	r2, [r7, #12]
 8012a90:	4b26      	ldr	r3, [pc, #152]	@ (8012b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8012a92:	4413      	add	r3, r2
 8012a94:	009b      	lsls	r3, r3, #2
 8012a96:	461a      	mov	r2, r3
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	4a24      	ldr	r2, [pc, #144]	@ (8012b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8012aa0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	f003 031f 	and.w	r3, r3, #31
 8012aa8:	2201      	movs	r2, #1
 8012aaa:	409a      	lsls	r2, r3
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8012ab0:	e024      	b.n	8012afc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	b2db      	uxtb	r3, r3
 8012ab8:	3b10      	subs	r3, #16
 8012aba:	4a1e      	ldr	r2, [pc, #120]	@ (8012b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8012abc:	fba2 2303 	umull	r2, r3, r2, r3
 8012ac0:	091b      	lsrs	r3, r3, #4
 8012ac2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8012ac4:	68bb      	ldr	r3, [r7, #8]
 8012ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8012b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8012ac8:	4293      	cmp	r3, r2
 8012aca:	d806      	bhi.n	8012ada <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	4a1b      	ldr	r2, [pc, #108]	@ (8012b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8012ad0:	4293      	cmp	r3, r2
 8012ad2:	d902      	bls.n	8012ada <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	3308      	adds	r3, #8
 8012ad8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8012ada:	68fa      	ldr	r2, [r7, #12]
 8012adc:	4b18      	ldr	r3, [pc, #96]	@ (8012b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8012ade:	4413      	add	r3, r2
 8012ae0:	009b      	lsls	r3, r3, #2
 8012ae2:	461a      	mov	r2, r3
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	4a16      	ldr	r2, [pc, #88]	@ (8012b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8012aec:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	f003 031f 	and.w	r3, r3, #31
 8012af4:	2201      	movs	r2, #1
 8012af6:	409a      	lsls	r2, r3
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8012afc:	bf00      	nop
 8012afe:	3714      	adds	r7, #20
 8012b00:	46bd      	mov	sp, r7
 8012b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b06:	4770      	bx	lr
 8012b08:	58025408 	.word	0x58025408
 8012b0c:	5802541c 	.word	0x5802541c
 8012b10:	58025430 	.word	0x58025430
 8012b14:	58025444 	.word	0x58025444
 8012b18:	58025458 	.word	0x58025458
 8012b1c:	5802546c 	.word	0x5802546c
 8012b20:	58025480 	.word	0x58025480
 8012b24:	58025494 	.word	0x58025494
 8012b28:	cccccccd 	.word	0xcccccccd
 8012b2c:	16009600 	.word	0x16009600
 8012b30:	58025880 	.word	0x58025880
 8012b34:	aaaaaaab 	.word	0xaaaaaaab
 8012b38:	400204b8 	.word	0x400204b8
 8012b3c:	4002040f 	.word	0x4002040f
 8012b40:	10008200 	.word	0x10008200
 8012b44:	40020880 	.word	0x40020880

08012b48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8012b48:	b480      	push	{r7}
 8012b4a:	b085      	sub	sp, #20
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	685b      	ldr	r3, [r3, #4]
 8012b54:	b2db      	uxtb	r3, r3
 8012b56:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d04a      	beq.n	8012bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	2b08      	cmp	r3, #8
 8012b62:	d847      	bhi.n	8012bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	4a25      	ldr	r2, [pc, #148]	@ (8012c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8012b6a:	4293      	cmp	r3, r2
 8012b6c:	d022      	beq.n	8012bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	4a24      	ldr	r2, [pc, #144]	@ (8012c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8012b74:	4293      	cmp	r3, r2
 8012b76:	d01d      	beq.n	8012bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	4a22      	ldr	r2, [pc, #136]	@ (8012c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8012b7e:	4293      	cmp	r3, r2
 8012b80:	d018      	beq.n	8012bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	4a21      	ldr	r2, [pc, #132]	@ (8012c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8012b88:	4293      	cmp	r3, r2
 8012b8a:	d013      	beq.n	8012bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	4a1f      	ldr	r2, [pc, #124]	@ (8012c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8012b92:	4293      	cmp	r3, r2
 8012b94:	d00e      	beq.n	8012bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8012c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8012b9c:	4293      	cmp	r3, r2
 8012b9e:	d009      	beq.n	8012bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8012c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8012ba6:	4293      	cmp	r3, r2
 8012ba8:	d004      	beq.n	8012bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	4a1b      	ldr	r2, [pc, #108]	@ (8012c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8012bb0:	4293      	cmp	r3, r2
 8012bb2:	d101      	bne.n	8012bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	e000      	b.n	8012bba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8012bb8:	2300      	movs	r3, #0
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d00a      	beq.n	8012bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8012bbe:	68fa      	ldr	r2, [r7, #12]
 8012bc0:	4b17      	ldr	r3, [pc, #92]	@ (8012c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8012bc2:	4413      	add	r3, r2
 8012bc4:	009b      	lsls	r3, r3, #2
 8012bc6:	461a      	mov	r2, r3
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	4a15      	ldr	r2, [pc, #84]	@ (8012c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8012bd0:	671a      	str	r2, [r3, #112]	@ 0x70
 8012bd2:	e009      	b.n	8012be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8012bd4:	68fa      	ldr	r2, [r7, #12]
 8012bd6:	4b14      	ldr	r3, [pc, #80]	@ (8012c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8012bd8:	4413      	add	r3, r2
 8012bda:	009b      	lsls	r3, r3, #2
 8012bdc:	461a      	mov	r2, r3
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	4a11      	ldr	r2, [pc, #68]	@ (8012c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8012be6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	3b01      	subs	r3, #1
 8012bec:	2201      	movs	r2, #1
 8012bee:	409a      	lsls	r2, r3
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8012bf4:	bf00      	nop
 8012bf6:	3714      	adds	r7, #20
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfe:	4770      	bx	lr
 8012c00:	58025408 	.word	0x58025408
 8012c04:	5802541c 	.word	0x5802541c
 8012c08:	58025430 	.word	0x58025430
 8012c0c:	58025444 	.word	0x58025444
 8012c10:	58025458 	.word	0x58025458
 8012c14:	5802546c 	.word	0x5802546c
 8012c18:	58025480 	.word	0x58025480
 8012c1c:	58025494 	.word	0x58025494
 8012c20:	1600963f 	.word	0x1600963f
 8012c24:	58025940 	.word	0x58025940
 8012c28:	1000823f 	.word	0x1000823f
 8012c2c:	40020940 	.word	0x40020940

08012c30 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b086      	sub	sp, #24
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	60f8      	str	r0, [r7, #12]
 8012c38:	60b9      	str	r1, [r7, #8]
 8012c3a:	607a      	str	r2, [r7, #4]
 8012c3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	689b      	ldr	r3, [r3, #8]
 8012c46:	2b80      	cmp	r3, #128	@ 0x80
 8012c48:	d105      	bne.n	8012c56 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012c50:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8012c52:	2301      	movs	r3, #1
 8012c54:	e315      	b.n	8013282 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012c5c:	2b01      	cmp	r3, #1
 8012c5e:	d101      	bne.n	8012c64 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8012c60:	2302      	movs	r3, #2
 8012c62:	e30e      	b.n	8013282 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	2201      	movs	r2, #1
 8012c68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012c72:	b2db      	uxtb	r3, r3
 8012c74:	2b01      	cmp	r3, #1
 8012c76:	f040 82fd 	bne.w	8013274 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	2202      	movs	r2, #2
 8012c7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	2200      	movs	r2, #0
 8012c86:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	4a82      	ldr	r2, [pc, #520]	@ (8012e98 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8012c8e:	4293      	cmp	r3, r2
 8012c90:	d04a      	beq.n	8012d28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	4a81      	ldr	r2, [pc, #516]	@ (8012e9c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8012c98:	4293      	cmp	r3, r2
 8012c9a:	d045      	beq.n	8012d28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	4a7f      	ldr	r2, [pc, #508]	@ (8012ea0 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8012ca2:	4293      	cmp	r3, r2
 8012ca4:	d040      	beq.n	8012d28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	4a7e      	ldr	r2, [pc, #504]	@ (8012ea4 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8012cac:	4293      	cmp	r3, r2
 8012cae:	d03b      	beq.n	8012d28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	4a7c      	ldr	r2, [pc, #496]	@ (8012ea8 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8012cb6:	4293      	cmp	r3, r2
 8012cb8:	d036      	beq.n	8012d28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	4a7b      	ldr	r2, [pc, #492]	@ (8012eac <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8012cc0:	4293      	cmp	r3, r2
 8012cc2:	d031      	beq.n	8012d28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	4a79      	ldr	r2, [pc, #484]	@ (8012eb0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8012cca:	4293      	cmp	r3, r2
 8012ccc:	d02c      	beq.n	8012d28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	4a78      	ldr	r2, [pc, #480]	@ (8012eb4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8012cd4:	4293      	cmp	r3, r2
 8012cd6:	d027      	beq.n	8012d28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	4a76      	ldr	r2, [pc, #472]	@ (8012eb8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8012cde:	4293      	cmp	r3, r2
 8012ce0:	d022      	beq.n	8012d28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	4a75      	ldr	r2, [pc, #468]	@ (8012ebc <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8012ce8:	4293      	cmp	r3, r2
 8012cea:	d01d      	beq.n	8012d28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	4a73      	ldr	r2, [pc, #460]	@ (8012ec0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8012cf2:	4293      	cmp	r3, r2
 8012cf4:	d018      	beq.n	8012d28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	4a72      	ldr	r2, [pc, #456]	@ (8012ec4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8012cfc:	4293      	cmp	r3, r2
 8012cfe:	d013      	beq.n	8012d28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	4a70      	ldr	r2, [pc, #448]	@ (8012ec8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8012d06:	4293      	cmp	r3, r2
 8012d08:	d00e      	beq.n	8012d28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	4a6f      	ldr	r2, [pc, #444]	@ (8012ecc <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8012d10:	4293      	cmp	r3, r2
 8012d12:	d009      	beq.n	8012d28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	4a6d      	ldr	r2, [pc, #436]	@ (8012ed0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8012d1a:	4293      	cmp	r3, r2
 8012d1c:	d004      	beq.n	8012d28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	4a6c      	ldr	r2, [pc, #432]	@ (8012ed4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8012d24:	4293      	cmp	r3, r2
 8012d26:	d101      	bne.n	8012d2c <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8012d28:	2301      	movs	r3, #1
 8012d2a:	e000      	b.n	8012d2e <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d018      	beq.n	8012d64 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	681a      	ldr	r2, [r3, #0]
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8012d40:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	683a      	ldr	r2, [r7, #0]
 8012d48:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d4e:	3308      	adds	r3, #8
 8012d50:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012d56:	f003 031f 	and.w	r3, r3, #31
 8012d5a:	223f      	movs	r2, #63	@ 0x3f
 8012d5c:	409a      	lsls	r2, r3
 8012d5e:	693b      	ldr	r3, [r7, #16]
 8012d60:	601a      	str	r2, [r3, #0]
 8012d62:	e018      	b.n	8012d96 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	6819      	ldr	r1, [r3, #0]
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	681a      	ldr	r2, [r3, #0]
 8012d6e:	f248 0320 	movw	r3, #32800	@ 0x8020
 8012d72:	430b      	orrs	r3, r1
 8012d74:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	683a      	ldr	r2, [r7, #0]
 8012d7c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d82:	3304      	adds	r3, #4
 8012d84:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012d8a:	f003 031f 	and.w	r3, r3, #31
 8012d8e:	2201      	movs	r2, #1
 8012d90:	409a      	lsls	r2, r3
 8012d92:	693b      	ldr	r3, [r7, #16]
 8012d94:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012d96:	6a3b      	ldr	r3, [r7, #32]
 8012d98:	687a      	ldr	r2, [r7, #4]
 8012d9a:	68b9      	ldr	r1, [r7, #8]
 8012d9c:	68f8      	ldr	r0, [r7, #12]
 8012d9e:	f000 faa5 	bl	80132ec <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	4a3c      	ldr	r2, [pc, #240]	@ (8012e98 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8012da8:	4293      	cmp	r3, r2
 8012daa:	d072      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	4a3a      	ldr	r2, [pc, #232]	@ (8012e9c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8012db2:	4293      	cmp	r3, r2
 8012db4:	d06d      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	4a39      	ldr	r2, [pc, #228]	@ (8012ea0 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8012dbc:	4293      	cmp	r3, r2
 8012dbe:	d068      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	4a37      	ldr	r2, [pc, #220]	@ (8012ea4 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8012dc6:	4293      	cmp	r3, r2
 8012dc8:	d063      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	4a36      	ldr	r2, [pc, #216]	@ (8012ea8 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8012dd0:	4293      	cmp	r3, r2
 8012dd2:	d05e      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	4a34      	ldr	r2, [pc, #208]	@ (8012eac <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8012dda:	4293      	cmp	r3, r2
 8012ddc:	d059      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	4a33      	ldr	r2, [pc, #204]	@ (8012eb0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8012de4:	4293      	cmp	r3, r2
 8012de6:	d054      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	4a31      	ldr	r2, [pc, #196]	@ (8012eb4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8012dee:	4293      	cmp	r3, r2
 8012df0:	d04f      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	4a30      	ldr	r2, [pc, #192]	@ (8012eb8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8012df8:	4293      	cmp	r3, r2
 8012dfa:	d04a      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	4a2e      	ldr	r2, [pc, #184]	@ (8012ebc <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8012e02:	4293      	cmp	r3, r2
 8012e04:	d045      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	4a2d      	ldr	r2, [pc, #180]	@ (8012ec0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8012e0c:	4293      	cmp	r3, r2
 8012e0e:	d040      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	4a2b      	ldr	r2, [pc, #172]	@ (8012ec4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8012e16:	4293      	cmp	r3, r2
 8012e18:	d03b      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	4a2a      	ldr	r2, [pc, #168]	@ (8012ec8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8012e20:	4293      	cmp	r3, r2
 8012e22:	d036      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	4a28      	ldr	r2, [pc, #160]	@ (8012ecc <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8012e2a:	4293      	cmp	r3, r2
 8012e2c:	d031      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	4a27      	ldr	r2, [pc, #156]	@ (8012ed0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8012e34:	4293      	cmp	r3, r2
 8012e36:	d02c      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	4a25      	ldr	r2, [pc, #148]	@ (8012ed4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8012e3e:	4293      	cmp	r3, r2
 8012e40:	d027      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	4a24      	ldr	r2, [pc, #144]	@ (8012ed8 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8012e48:	4293      	cmp	r3, r2
 8012e4a:	d022      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	4a22      	ldr	r2, [pc, #136]	@ (8012edc <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8012e52:	4293      	cmp	r3, r2
 8012e54:	d01d      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	4a21      	ldr	r2, [pc, #132]	@ (8012ee0 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8012e5c:	4293      	cmp	r3, r2
 8012e5e:	d018      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	4a1f      	ldr	r2, [pc, #124]	@ (8012ee4 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8012e66:	4293      	cmp	r3, r2
 8012e68:	d013      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8012ee8 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8012e70:	4293      	cmp	r3, r2
 8012e72:	d00e      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	4a1c      	ldr	r2, [pc, #112]	@ (8012eec <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8012e7a:	4293      	cmp	r3, r2
 8012e7c:	d009      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	4a1b      	ldr	r2, [pc, #108]	@ (8012ef0 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8012e84:	4293      	cmp	r3, r2
 8012e86:	d004      	beq.n	8012e92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	4a19      	ldr	r2, [pc, #100]	@ (8012ef4 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8012e8e:	4293      	cmp	r3, r2
 8012e90:	d132      	bne.n	8012ef8 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8012e92:	2301      	movs	r3, #1
 8012e94:	e031      	b.n	8012efa <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8012e96:	bf00      	nop
 8012e98:	40020010 	.word	0x40020010
 8012e9c:	40020028 	.word	0x40020028
 8012ea0:	40020040 	.word	0x40020040
 8012ea4:	40020058 	.word	0x40020058
 8012ea8:	40020070 	.word	0x40020070
 8012eac:	40020088 	.word	0x40020088
 8012eb0:	400200a0 	.word	0x400200a0
 8012eb4:	400200b8 	.word	0x400200b8
 8012eb8:	40020410 	.word	0x40020410
 8012ebc:	40020428 	.word	0x40020428
 8012ec0:	40020440 	.word	0x40020440
 8012ec4:	40020458 	.word	0x40020458
 8012ec8:	40020470 	.word	0x40020470
 8012ecc:	40020488 	.word	0x40020488
 8012ed0:	400204a0 	.word	0x400204a0
 8012ed4:	400204b8 	.word	0x400204b8
 8012ed8:	58025408 	.word	0x58025408
 8012edc:	5802541c 	.word	0x5802541c
 8012ee0:	58025430 	.word	0x58025430
 8012ee4:	58025444 	.word	0x58025444
 8012ee8:	58025458 	.word	0x58025458
 8012eec:	5802546c 	.word	0x5802546c
 8012ef0:	58025480 	.word	0x58025480
 8012ef4:	58025494 	.word	0x58025494
 8012ef8:	2300      	movs	r3, #0
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d00d      	beq.n	8012f1a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012f02:	68fa      	ldr	r2, [r7, #12]
 8012f04:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012f06:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d004      	beq.n	8012f1a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012f14:	68fa      	ldr	r2, [r7, #12]
 8012f16:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8012f18:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	4a3b      	ldr	r2, [pc, #236]	@ (801300c <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8012f20:	4293      	cmp	r3, r2
 8012f22:	d04a      	beq.n	8012fba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	4a39      	ldr	r2, [pc, #228]	@ (8013010 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8012f2a:	4293      	cmp	r3, r2
 8012f2c:	d045      	beq.n	8012fba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	4a38      	ldr	r2, [pc, #224]	@ (8013014 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8012f34:	4293      	cmp	r3, r2
 8012f36:	d040      	beq.n	8012fba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	4a36      	ldr	r2, [pc, #216]	@ (8013018 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8012f3e:	4293      	cmp	r3, r2
 8012f40:	d03b      	beq.n	8012fba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	4a35      	ldr	r2, [pc, #212]	@ (801301c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8012f48:	4293      	cmp	r3, r2
 8012f4a:	d036      	beq.n	8012fba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	4a33      	ldr	r2, [pc, #204]	@ (8013020 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8012f52:	4293      	cmp	r3, r2
 8012f54:	d031      	beq.n	8012fba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	4a32      	ldr	r2, [pc, #200]	@ (8013024 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8012f5c:	4293      	cmp	r3, r2
 8012f5e:	d02c      	beq.n	8012fba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	4a30      	ldr	r2, [pc, #192]	@ (8013028 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8012f66:	4293      	cmp	r3, r2
 8012f68:	d027      	beq.n	8012fba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	4a2f      	ldr	r2, [pc, #188]	@ (801302c <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8012f70:	4293      	cmp	r3, r2
 8012f72:	d022      	beq.n	8012fba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	4a2d      	ldr	r2, [pc, #180]	@ (8013030 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8012f7a:	4293      	cmp	r3, r2
 8012f7c:	d01d      	beq.n	8012fba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	4a2c      	ldr	r2, [pc, #176]	@ (8013034 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8012f84:	4293      	cmp	r3, r2
 8012f86:	d018      	beq.n	8012fba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	4a2a      	ldr	r2, [pc, #168]	@ (8013038 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8012f8e:	4293      	cmp	r3, r2
 8012f90:	d013      	beq.n	8012fba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	4a29      	ldr	r2, [pc, #164]	@ (801303c <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8012f98:	4293      	cmp	r3, r2
 8012f9a:	d00e      	beq.n	8012fba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	4a27      	ldr	r2, [pc, #156]	@ (8013040 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8012fa2:	4293      	cmp	r3, r2
 8012fa4:	d009      	beq.n	8012fba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	4a26      	ldr	r2, [pc, #152]	@ (8013044 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8012fac:	4293      	cmp	r3, r2
 8012fae:	d004      	beq.n	8012fba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	4a24      	ldr	r2, [pc, #144]	@ (8013048 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8012fb6:	4293      	cmp	r3, r2
 8012fb8:	d101      	bne.n	8012fbe <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8012fba:	2301      	movs	r3, #1
 8012fbc:	e000      	b.n	8012fc0 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d043      	beq.n	801304c <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	f023 021e 	bic.w	r2, r3, #30
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	f042 0216 	orr.w	r2, r2, #22
 8012fd6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	695a      	ldr	r2, [r3, #20]
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8012fe6:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d103      	bne.n	8012ff8 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d043      	beq.n	8013080 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	681a      	ldr	r2, [r3, #0]
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	f042 0208 	orr.w	r2, r2, #8
 8013006:	601a      	str	r2, [r3, #0]
 8013008:	e03a      	b.n	8013080 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 801300a:	bf00      	nop
 801300c:	40020010 	.word	0x40020010
 8013010:	40020028 	.word	0x40020028
 8013014:	40020040 	.word	0x40020040
 8013018:	40020058 	.word	0x40020058
 801301c:	40020070 	.word	0x40020070
 8013020:	40020088 	.word	0x40020088
 8013024:	400200a0 	.word	0x400200a0
 8013028:	400200b8 	.word	0x400200b8
 801302c:	40020410 	.word	0x40020410
 8013030:	40020428 	.word	0x40020428
 8013034:	40020440 	.word	0x40020440
 8013038:	40020458 	.word	0x40020458
 801303c:	40020470 	.word	0x40020470
 8013040:	40020488 	.word	0x40020488
 8013044:	400204a0 	.word	0x400204a0
 8013048:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	f023 020e 	bic.w	r2, r3, #14
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	f042 020a 	orr.w	r2, r2, #10
 801305e:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013064:	2b00      	cmp	r3, #0
 8013066:	d103      	bne.n	8013070 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801306c:	2b00      	cmp	r3, #0
 801306e:	d007      	beq.n	8013080 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	681a      	ldr	r2, [r3, #0]
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	f042 0204 	orr.w	r2, r2, #4
 801307e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	4a81      	ldr	r2, [pc, #516]	@ (801328c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8013086:	4293      	cmp	r3, r2
 8013088:	d072      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	4a80      	ldr	r2, [pc, #512]	@ (8013290 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8013090:	4293      	cmp	r3, r2
 8013092:	d06d      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	4a7e      	ldr	r2, [pc, #504]	@ (8013294 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 801309a:	4293      	cmp	r3, r2
 801309c:	d068      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	4a7d      	ldr	r2, [pc, #500]	@ (8013298 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80130a4:	4293      	cmp	r3, r2
 80130a6:	d063      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	4a7b      	ldr	r2, [pc, #492]	@ (801329c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80130ae:	4293      	cmp	r3, r2
 80130b0:	d05e      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	4a7a      	ldr	r2, [pc, #488]	@ (80132a0 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80130b8:	4293      	cmp	r3, r2
 80130ba:	d059      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	4a78      	ldr	r2, [pc, #480]	@ (80132a4 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80130c2:	4293      	cmp	r3, r2
 80130c4:	d054      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	4a77      	ldr	r2, [pc, #476]	@ (80132a8 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80130cc:	4293      	cmp	r3, r2
 80130ce:	d04f      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	4a75      	ldr	r2, [pc, #468]	@ (80132ac <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80130d6:	4293      	cmp	r3, r2
 80130d8:	d04a      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	4a74      	ldr	r2, [pc, #464]	@ (80132b0 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80130e0:	4293      	cmp	r3, r2
 80130e2:	d045      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	4a72      	ldr	r2, [pc, #456]	@ (80132b4 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80130ea:	4293      	cmp	r3, r2
 80130ec:	d040      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	4a71      	ldr	r2, [pc, #452]	@ (80132b8 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 80130f4:	4293      	cmp	r3, r2
 80130f6:	d03b      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	4a6f      	ldr	r2, [pc, #444]	@ (80132bc <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80130fe:	4293      	cmp	r3, r2
 8013100:	d036      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	4a6e      	ldr	r2, [pc, #440]	@ (80132c0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8013108:	4293      	cmp	r3, r2
 801310a:	d031      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	4a6c      	ldr	r2, [pc, #432]	@ (80132c4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8013112:	4293      	cmp	r3, r2
 8013114:	d02c      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	4a6b      	ldr	r2, [pc, #428]	@ (80132c8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 801311c:	4293      	cmp	r3, r2
 801311e:	d027      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	4a69      	ldr	r2, [pc, #420]	@ (80132cc <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8013126:	4293      	cmp	r3, r2
 8013128:	d022      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	4a68      	ldr	r2, [pc, #416]	@ (80132d0 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8013130:	4293      	cmp	r3, r2
 8013132:	d01d      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	4a66      	ldr	r2, [pc, #408]	@ (80132d4 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 801313a:	4293      	cmp	r3, r2
 801313c:	d018      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	4a65      	ldr	r2, [pc, #404]	@ (80132d8 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8013144:	4293      	cmp	r3, r2
 8013146:	d013      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	4a63      	ldr	r2, [pc, #396]	@ (80132dc <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 801314e:	4293      	cmp	r3, r2
 8013150:	d00e      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	4a62      	ldr	r2, [pc, #392]	@ (80132e0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8013158:	4293      	cmp	r3, r2
 801315a:	d009      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	4a60      	ldr	r2, [pc, #384]	@ (80132e4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8013162:	4293      	cmp	r3, r2
 8013164:	d004      	beq.n	8013170 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	4a5f      	ldr	r2, [pc, #380]	@ (80132e8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 801316c:	4293      	cmp	r3, r2
 801316e:	d101      	bne.n	8013174 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8013170:	2301      	movs	r3, #1
 8013172:	e000      	b.n	8013176 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8013174:	2300      	movs	r3, #0
 8013176:	2b00      	cmp	r3, #0
 8013178:	d01a      	beq.n	80131b0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013184:	2b00      	cmp	r3, #0
 8013186:	d007      	beq.n	8013198 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801318c:	681a      	ldr	r2, [r3, #0]
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013192:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8013196:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801319c:	2b00      	cmp	r3, #0
 801319e:	d007      	beq.n	80131b0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80131a4:	681a      	ldr	r2, [r3, #0]
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80131aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80131ae:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	4a35      	ldr	r2, [pc, #212]	@ (801328c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80131b6:	4293      	cmp	r3, r2
 80131b8:	d04a      	beq.n	8013250 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	4a34      	ldr	r2, [pc, #208]	@ (8013290 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80131c0:	4293      	cmp	r3, r2
 80131c2:	d045      	beq.n	8013250 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	4a32      	ldr	r2, [pc, #200]	@ (8013294 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80131ca:	4293      	cmp	r3, r2
 80131cc:	d040      	beq.n	8013250 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	4a31      	ldr	r2, [pc, #196]	@ (8013298 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80131d4:	4293      	cmp	r3, r2
 80131d6:	d03b      	beq.n	8013250 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	4a2f      	ldr	r2, [pc, #188]	@ (801329c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80131de:	4293      	cmp	r3, r2
 80131e0:	d036      	beq.n	8013250 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	4a2e      	ldr	r2, [pc, #184]	@ (80132a0 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80131e8:	4293      	cmp	r3, r2
 80131ea:	d031      	beq.n	8013250 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	4a2c      	ldr	r2, [pc, #176]	@ (80132a4 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80131f2:	4293      	cmp	r3, r2
 80131f4:	d02c      	beq.n	8013250 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	4a2b      	ldr	r2, [pc, #172]	@ (80132a8 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80131fc:	4293      	cmp	r3, r2
 80131fe:	d027      	beq.n	8013250 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	4a29      	ldr	r2, [pc, #164]	@ (80132ac <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8013206:	4293      	cmp	r3, r2
 8013208:	d022      	beq.n	8013250 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	4a28      	ldr	r2, [pc, #160]	@ (80132b0 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8013210:	4293      	cmp	r3, r2
 8013212:	d01d      	beq.n	8013250 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	4a26      	ldr	r2, [pc, #152]	@ (80132b4 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 801321a:	4293      	cmp	r3, r2
 801321c:	d018      	beq.n	8013250 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	4a25      	ldr	r2, [pc, #148]	@ (80132b8 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8013224:	4293      	cmp	r3, r2
 8013226:	d013      	beq.n	8013250 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	4a23      	ldr	r2, [pc, #140]	@ (80132bc <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 801322e:	4293      	cmp	r3, r2
 8013230:	d00e      	beq.n	8013250 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	4a22      	ldr	r2, [pc, #136]	@ (80132c0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8013238:	4293      	cmp	r3, r2
 801323a:	d009      	beq.n	8013250 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	4a20      	ldr	r2, [pc, #128]	@ (80132c4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8013242:	4293      	cmp	r3, r2
 8013244:	d004      	beq.n	8013250 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	4a1f      	ldr	r2, [pc, #124]	@ (80132c8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 801324c:	4293      	cmp	r3, r2
 801324e:	d108      	bne.n	8013262 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	681a      	ldr	r2, [r3, #0]
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	f042 0201 	orr.w	r2, r2, #1
 801325e:	601a      	str	r2, [r3, #0]
 8013260:	e00e      	b.n	8013280 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	681a      	ldr	r2, [r3, #0]
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	f042 0201 	orr.w	r2, r2, #1
 8013270:	601a      	str	r2, [r3, #0]
 8013272:	e005      	b.n	8013280 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801327a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 801327c:	2301      	movs	r3, #1
 801327e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8013280:	7dfb      	ldrb	r3, [r7, #23]
}
 8013282:	4618      	mov	r0, r3
 8013284:	3718      	adds	r7, #24
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}
 801328a:	bf00      	nop
 801328c:	40020010 	.word	0x40020010
 8013290:	40020028 	.word	0x40020028
 8013294:	40020040 	.word	0x40020040
 8013298:	40020058 	.word	0x40020058
 801329c:	40020070 	.word	0x40020070
 80132a0:	40020088 	.word	0x40020088
 80132a4:	400200a0 	.word	0x400200a0
 80132a8:	400200b8 	.word	0x400200b8
 80132ac:	40020410 	.word	0x40020410
 80132b0:	40020428 	.word	0x40020428
 80132b4:	40020440 	.word	0x40020440
 80132b8:	40020458 	.word	0x40020458
 80132bc:	40020470 	.word	0x40020470
 80132c0:	40020488 	.word	0x40020488
 80132c4:	400204a0 	.word	0x400204a0
 80132c8:	400204b8 	.word	0x400204b8
 80132cc:	58025408 	.word	0x58025408
 80132d0:	5802541c 	.word	0x5802541c
 80132d4:	58025430 	.word	0x58025430
 80132d8:	58025444 	.word	0x58025444
 80132dc:	58025458 	.word	0x58025458
 80132e0:	5802546c 	.word	0x5802546c
 80132e4:	58025480 	.word	0x58025480
 80132e8:	58025494 	.word	0x58025494

080132ec <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80132ec:	b480      	push	{r7}
 80132ee:	b085      	sub	sp, #20
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	60f8      	str	r0, [r7, #12]
 80132f4:	60b9      	str	r1, [r7, #8]
 80132f6:	607a      	str	r2, [r7, #4]
 80132f8:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	4a46      	ldr	r2, [pc, #280]	@ (8013418 <DMA_MultiBufferSetConfig+0x12c>)
 8013300:	4293      	cmp	r3, r2
 8013302:	d04a      	beq.n	801339a <DMA_MultiBufferSetConfig+0xae>
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	4a44      	ldr	r2, [pc, #272]	@ (801341c <DMA_MultiBufferSetConfig+0x130>)
 801330a:	4293      	cmp	r3, r2
 801330c:	d045      	beq.n	801339a <DMA_MultiBufferSetConfig+0xae>
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	4a43      	ldr	r2, [pc, #268]	@ (8013420 <DMA_MultiBufferSetConfig+0x134>)
 8013314:	4293      	cmp	r3, r2
 8013316:	d040      	beq.n	801339a <DMA_MultiBufferSetConfig+0xae>
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	4a41      	ldr	r2, [pc, #260]	@ (8013424 <DMA_MultiBufferSetConfig+0x138>)
 801331e:	4293      	cmp	r3, r2
 8013320:	d03b      	beq.n	801339a <DMA_MultiBufferSetConfig+0xae>
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	4a40      	ldr	r2, [pc, #256]	@ (8013428 <DMA_MultiBufferSetConfig+0x13c>)
 8013328:	4293      	cmp	r3, r2
 801332a:	d036      	beq.n	801339a <DMA_MultiBufferSetConfig+0xae>
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	4a3e      	ldr	r2, [pc, #248]	@ (801342c <DMA_MultiBufferSetConfig+0x140>)
 8013332:	4293      	cmp	r3, r2
 8013334:	d031      	beq.n	801339a <DMA_MultiBufferSetConfig+0xae>
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	4a3d      	ldr	r2, [pc, #244]	@ (8013430 <DMA_MultiBufferSetConfig+0x144>)
 801333c:	4293      	cmp	r3, r2
 801333e:	d02c      	beq.n	801339a <DMA_MultiBufferSetConfig+0xae>
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	4a3b      	ldr	r2, [pc, #236]	@ (8013434 <DMA_MultiBufferSetConfig+0x148>)
 8013346:	4293      	cmp	r3, r2
 8013348:	d027      	beq.n	801339a <DMA_MultiBufferSetConfig+0xae>
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	4a3a      	ldr	r2, [pc, #232]	@ (8013438 <DMA_MultiBufferSetConfig+0x14c>)
 8013350:	4293      	cmp	r3, r2
 8013352:	d022      	beq.n	801339a <DMA_MultiBufferSetConfig+0xae>
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	4a38      	ldr	r2, [pc, #224]	@ (801343c <DMA_MultiBufferSetConfig+0x150>)
 801335a:	4293      	cmp	r3, r2
 801335c:	d01d      	beq.n	801339a <DMA_MultiBufferSetConfig+0xae>
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	4a37      	ldr	r2, [pc, #220]	@ (8013440 <DMA_MultiBufferSetConfig+0x154>)
 8013364:	4293      	cmp	r3, r2
 8013366:	d018      	beq.n	801339a <DMA_MultiBufferSetConfig+0xae>
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	4a35      	ldr	r2, [pc, #212]	@ (8013444 <DMA_MultiBufferSetConfig+0x158>)
 801336e:	4293      	cmp	r3, r2
 8013370:	d013      	beq.n	801339a <DMA_MultiBufferSetConfig+0xae>
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	4a34      	ldr	r2, [pc, #208]	@ (8013448 <DMA_MultiBufferSetConfig+0x15c>)
 8013378:	4293      	cmp	r3, r2
 801337a:	d00e      	beq.n	801339a <DMA_MultiBufferSetConfig+0xae>
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	4a32      	ldr	r2, [pc, #200]	@ (801344c <DMA_MultiBufferSetConfig+0x160>)
 8013382:	4293      	cmp	r3, r2
 8013384:	d009      	beq.n	801339a <DMA_MultiBufferSetConfig+0xae>
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	4a31      	ldr	r2, [pc, #196]	@ (8013450 <DMA_MultiBufferSetConfig+0x164>)
 801338c:	4293      	cmp	r3, r2
 801338e:	d004      	beq.n	801339a <DMA_MultiBufferSetConfig+0xae>
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	4a2f      	ldr	r2, [pc, #188]	@ (8013454 <DMA_MultiBufferSetConfig+0x168>)
 8013396:	4293      	cmp	r3, r2
 8013398:	d101      	bne.n	801339e <DMA_MultiBufferSetConfig+0xb2>
 801339a:	2301      	movs	r3, #1
 801339c:	e000      	b.n	80133a0 <DMA_MultiBufferSetConfig+0xb4>
 801339e:	2300      	movs	r3, #0
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d019      	beq.n	80133d8 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	683a      	ldr	r2, [r7, #0]
 80133aa:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	689b      	ldr	r3, [r3, #8]
 80133b0:	2b40      	cmp	r3, #64	@ 0x40
 80133b2:	d108      	bne.n	80133c6 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	687a      	ldr	r2, [r7, #4]
 80133ba:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	68ba      	ldr	r2, [r7, #8]
 80133c2:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 80133c4:	e021      	b.n	801340a <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	68ba      	ldr	r2, [r7, #8]
 80133cc:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	687a      	ldr	r2, [r7, #4]
 80133d4:	60da      	str	r2, [r3, #12]
}
 80133d6:	e018      	b.n	801340a <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	683a      	ldr	r2, [r7, #0]
 80133de:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	689b      	ldr	r3, [r3, #8]
 80133e4:	2b40      	cmp	r3, #64	@ 0x40
 80133e6:	d108      	bne.n	80133fa <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	687a      	ldr	r2, [r7, #4]
 80133ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	68ba      	ldr	r2, [r7, #8]
 80133f6:	60da      	str	r2, [r3, #12]
}
 80133f8:	e007      	b.n	801340a <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	68ba      	ldr	r2, [r7, #8]
 8013400:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	687a      	ldr	r2, [r7, #4]
 8013408:	60da      	str	r2, [r3, #12]
}
 801340a:	bf00      	nop
 801340c:	3714      	adds	r7, #20
 801340e:	46bd      	mov	sp, r7
 8013410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013414:	4770      	bx	lr
 8013416:	bf00      	nop
 8013418:	40020010 	.word	0x40020010
 801341c:	40020028 	.word	0x40020028
 8013420:	40020040 	.word	0x40020040
 8013424:	40020058 	.word	0x40020058
 8013428:	40020070 	.word	0x40020070
 801342c:	40020088 	.word	0x40020088
 8013430:	400200a0 	.word	0x400200a0
 8013434:	400200b8 	.word	0x400200b8
 8013438:	40020410 	.word	0x40020410
 801343c:	40020428 	.word	0x40020428
 8013440:	40020440 	.word	0x40020440
 8013444:	40020458 	.word	0x40020458
 8013448:	40020470 	.word	0x40020470
 801344c:	40020488 	.word	0x40020488
 8013450:	400204a0 	.word	0x400204a0
 8013454:	400204b8 	.word	0x400204b8

08013458 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8013458:	b480      	push	{r7}
 801345a:	b089      	sub	sp, #36	@ 0x24
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
 8013460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8013462:	2300      	movs	r3, #0
 8013464:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8013466:	4b89      	ldr	r3, [pc, #548]	@ (801368c <HAL_GPIO_Init+0x234>)
 8013468:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801346a:	e194      	b.n	8013796 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801346c:	683b      	ldr	r3, [r7, #0]
 801346e:	681a      	ldr	r2, [r3, #0]
 8013470:	2101      	movs	r1, #1
 8013472:	69fb      	ldr	r3, [r7, #28]
 8013474:	fa01 f303 	lsl.w	r3, r1, r3
 8013478:	4013      	ands	r3, r2
 801347a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801347c:	693b      	ldr	r3, [r7, #16]
 801347e:	2b00      	cmp	r3, #0
 8013480:	f000 8186 	beq.w	8013790 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8013484:	683b      	ldr	r3, [r7, #0]
 8013486:	685b      	ldr	r3, [r3, #4]
 8013488:	f003 0303 	and.w	r3, r3, #3
 801348c:	2b01      	cmp	r3, #1
 801348e:	d005      	beq.n	801349c <HAL_GPIO_Init+0x44>
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	685b      	ldr	r3, [r3, #4]
 8013494:	f003 0303 	and.w	r3, r3, #3
 8013498:	2b02      	cmp	r3, #2
 801349a:	d130      	bne.n	80134fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	689b      	ldr	r3, [r3, #8]
 80134a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80134a2:	69fb      	ldr	r3, [r7, #28]
 80134a4:	005b      	lsls	r3, r3, #1
 80134a6:	2203      	movs	r2, #3
 80134a8:	fa02 f303 	lsl.w	r3, r2, r3
 80134ac:	43db      	mvns	r3, r3
 80134ae:	69ba      	ldr	r2, [r7, #24]
 80134b0:	4013      	ands	r3, r2
 80134b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80134b4:	683b      	ldr	r3, [r7, #0]
 80134b6:	68da      	ldr	r2, [r3, #12]
 80134b8:	69fb      	ldr	r3, [r7, #28]
 80134ba:	005b      	lsls	r3, r3, #1
 80134bc:	fa02 f303 	lsl.w	r3, r2, r3
 80134c0:	69ba      	ldr	r2, [r7, #24]
 80134c2:	4313      	orrs	r3, r2
 80134c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	69ba      	ldr	r2, [r7, #24]
 80134ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	685b      	ldr	r3, [r3, #4]
 80134d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80134d2:	2201      	movs	r2, #1
 80134d4:	69fb      	ldr	r3, [r7, #28]
 80134d6:	fa02 f303 	lsl.w	r3, r2, r3
 80134da:	43db      	mvns	r3, r3
 80134dc:	69ba      	ldr	r2, [r7, #24]
 80134de:	4013      	ands	r3, r2
 80134e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80134e2:	683b      	ldr	r3, [r7, #0]
 80134e4:	685b      	ldr	r3, [r3, #4]
 80134e6:	091b      	lsrs	r3, r3, #4
 80134e8:	f003 0201 	and.w	r2, r3, #1
 80134ec:	69fb      	ldr	r3, [r7, #28]
 80134ee:	fa02 f303 	lsl.w	r3, r2, r3
 80134f2:	69ba      	ldr	r2, [r7, #24]
 80134f4:	4313      	orrs	r3, r2
 80134f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	69ba      	ldr	r2, [r7, #24]
 80134fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80134fe:	683b      	ldr	r3, [r7, #0]
 8013500:	685b      	ldr	r3, [r3, #4]
 8013502:	f003 0303 	and.w	r3, r3, #3
 8013506:	2b03      	cmp	r3, #3
 8013508:	d017      	beq.n	801353a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	68db      	ldr	r3, [r3, #12]
 801350e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8013510:	69fb      	ldr	r3, [r7, #28]
 8013512:	005b      	lsls	r3, r3, #1
 8013514:	2203      	movs	r2, #3
 8013516:	fa02 f303 	lsl.w	r3, r2, r3
 801351a:	43db      	mvns	r3, r3
 801351c:	69ba      	ldr	r2, [r7, #24]
 801351e:	4013      	ands	r3, r2
 8013520:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8013522:	683b      	ldr	r3, [r7, #0]
 8013524:	689a      	ldr	r2, [r3, #8]
 8013526:	69fb      	ldr	r3, [r7, #28]
 8013528:	005b      	lsls	r3, r3, #1
 801352a:	fa02 f303 	lsl.w	r3, r2, r3
 801352e:	69ba      	ldr	r2, [r7, #24]
 8013530:	4313      	orrs	r3, r2
 8013532:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	69ba      	ldr	r2, [r7, #24]
 8013538:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	685b      	ldr	r3, [r3, #4]
 801353e:	f003 0303 	and.w	r3, r3, #3
 8013542:	2b02      	cmp	r3, #2
 8013544:	d123      	bne.n	801358e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8013546:	69fb      	ldr	r3, [r7, #28]
 8013548:	08da      	lsrs	r2, r3, #3
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	3208      	adds	r2, #8
 801354e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8013554:	69fb      	ldr	r3, [r7, #28]
 8013556:	f003 0307 	and.w	r3, r3, #7
 801355a:	009b      	lsls	r3, r3, #2
 801355c:	220f      	movs	r2, #15
 801355e:	fa02 f303 	lsl.w	r3, r2, r3
 8013562:	43db      	mvns	r3, r3
 8013564:	69ba      	ldr	r2, [r7, #24]
 8013566:	4013      	ands	r3, r2
 8013568:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801356a:	683b      	ldr	r3, [r7, #0]
 801356c:	691a      	ldr	r2, [r3, #16]
 801356e:	69fb      	ldr	r3, [r7, #28]
 8013570:	f003 0307 	and.w	r3, r3, #7
 8013574:	009b      	lsls	r3, r3, #2
 8013576:	fa02 f303 	lsl.w	r3, r2, r3
 801357a:	69ba      	ldr	r2, [r7, #24]
 801357c:	4313      	orrs	r3, r2
 801357e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8013580:	69fb      	ldr	r3, [r7, #28]
 8013582:	08da      	lsrs	r2, r3, #3
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	3208      	adds	r2, #8
 8013588:	69b9      	ldr	r1, [r7, #24]
 801358a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8013594:	69fb      	ldr	r3, [r7, #28]
 8013596:	005b      	lsls	r3, r3, #1
 8013598:	2203      	movs	r2, #3
 801359a:	fa02 f303 	lsl.w	r3, r2, r3
 801359e:	43db      	mvns	r3, r3
 80135a0:	69ba      	ldr	r2, [r7, #24]
 80135a2:	4013      	ands	r3, r2
 80135a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	685b      	ldr	r3, [r3, #4]
 80135aa:	f003 0203 	and.w	r2, r3, #3
 80135ae:	69fb      	ldr	r3, [r7, #28]
 80135b0:	005b      	lsls	r3, r3, #1
 80135b2:	fa02 f303 	lsl.w	r3, r2, r3
 80135b6:	69ba      	ldr	r2, [r7, #24]
 80135b8:	4313      	orrs	r3, r2
 80135ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	69ba      	ldr	r2, [r7, #24]
 80135c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	685b      	ldr	r3, [r3, #4]
 80135c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	f000 80e0 	beq.w	8013790 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80135d0:	4b2f      	ldr	r3, [pc, #188]	@ (8013690 <HAL_GPIO_Init+0x238>)
 80135d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80135d6:	4a2e      	ldr	r2, [pc, #184]	@ (8013690 <HAL_GPIO_Init+0x238>)
 80135d8:	f043 0302 	orr.w	r3, r3, #2
 80135dc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80135e0:	4b2b      	ldr	r3, [pc, #172]	@ (8013690 <HAL_GPIO_Init+0x238>)
 80135e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80135e6:	f003 0302 	and.w	r3, r3, #2
 80135ea:	60fb      	str	r3, [r7, #12]
 80135ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80135ee:	4a29      	ldr	r2, [pc, #164]	@ (8013694 <HAL_GPIO_Init+0x23c>)
 80135f0:	69fb      	ldr	r3, [r7, #28]
 80135f2:	089b      	lsrs	r3, r3, #2
 80135f4:	3302      	adds	r3, #2
 80135f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80135fc:	69fb      	ldr	r3, [r7, #28]
 80135fe:	f003 0303 	and.w	r3, r3, #3
 8013602:	009b      	lsls	r3, r3, #2
 8013604:	220f      	movs	r2, #15
 8013606:	fa02 f303 	lsl.w	r3, r2, r3
 801360a:	43db      	mvns	r3, r3
 801360c:	69ba      	ldr	r2, [r7, #24]
 801360e:	4013      	ands	r3, r2
 8013610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	4a20      	ldr	r2, [pc, #128]	@ (8013698 <HAL_GPIO_Init+0x240>)
 8013616:	4293      	cmp	r3, r2
 8013618:	d052      	beq.n	80136c0 <HAL_GPIO_Init+0x268>
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	4a1f      	ldr	r2, [pc, #124]	@ (801369c <HAL_GPIO_Init+0x244>)
 801361e:	4293      	cmp	r3, r2
 8013620:	d031      	beq.n	8013686 <HAL_GPIO_Init+0x22e>
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	4a1e      	ldr	r2, [pc, #120]	@ (80136a0 <HAL_GPIO_Init+0x248>)
 8013626:	4293      	cmp	r3, r2
 8013628:	d02b      	beq.n	8013682 <HAL_GPIO_Init+0x22a>
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	4a1d      	ldr	r2, [pc, #116]	@ (80136a4 <HAL_GPIO_Init+0x24c>)
 801362e:	4293      	cmp	r3, r2
 8013630:	d025      	beq.n	801367e <HAL_GPIO_Init+0x226>
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	4a1c      	ldr	r2, [pc, #112]	@ (80136a8 <HAL_GPIO_Init+0x250>)
 8013636:	4293      	cmp	r3, r2
 8013638:	d01f      	beq.n	801367a <HAL_GPIO_Init+0x222>
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	4a1b      	ldr	r2, [pc, #108]	@ (80136ac <HAL_GPIO_Init+0x254>)
 801363e:	4293      	cmp	r3, r2
 8013640:	d019      	beq.n	8013676 <HAL_GPIO_Init+0x21e>
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	4a1a      	ldr	r2, [pc, #104]	@ (80136b0 <HAL_GPIO_Init+0x258>)
 8013646:	4293      	cmp	r3, r2
 8013648:	d013      	beq.n	8013672 <HAL_GPIO_Init+0x21a>
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	4a19      	ldr	r2, [pc, #100]	@ (80136b4 <HAL_GPIO_Init+0x25c>)
 801364e:	4293      	cmp	r3, r2
 8013650:	d00d      	beq.n	801366e <HAL_GPIO_Init+0x216>
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	4a18      	ldr	r2, [pc, #96]	@ (80136b8 <HAL_GPIO_Init+0x260>)
 8013656:	4293      	cmp	r3, r2
 8013658:	d007      	beq.n	801366a <HAL_GPIO_Init+0x212>
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	4a17      	ldr	r2, [pc, #92]	@ (80136bc <HAL_GPIO_Init+0x264>)
 801365e:	4293      	cmp	r3, r2
 8013660:	d101      	bne.n	8013666 <HAL_GPIO_Init+0x20e>
 8013662:	2309      	movs	r3, #9
 8013664:	e02d      	b.n	80136c2 <HAL_GPIO_Init+0x26a>
 8013666:	230a      	movs	r3, #10
 8013668:	e02b      	b.n	80136c2 <HAL_GPIO_Init+0x26a>
 801366a:	2308      	movs	r3, #8
 801366c:	e029      	b.n	80136c2 <HAL_GPIO_Init+0x26a>
 801366e:	2307      	movs	r3, #7
 8013670:	e027      	b.n	80136c2 <HAL_GPIO_Init+0x26a>
 8013672:	2306      	movs	r3, #6
 8013674:	e025      	b.n	80136c2 <HAL_GPIO_Init+0x26a>
 8013676:	2305      	movs	r3, #5
 8013678:	e023      	b.n	80136c2 <HAL_GPIO_Init+0x26a>
 801367a:	2304      	movs	r3, #4
 801367c:	e021      	b.n	80136c2 <HAL_GPIO_Init+0x26a>
 801367e:	2303      	movs	r3, #3
 8013680:	e01f      	b.n	80136c2 <HAL_GPIO_Init+0x26a>
 8013682:	2302      	movs	r3, #2
 8013684:	e01d      	b.n	80136c2 <HAL_GPIO_Init+0x26a>
 8013686:	2301      	movs	r3, #1
 8013688:	e01b      	b.n	80136c2 <HAL_GPIO_Init+0x26a>
 801368a:	bf00      	nop
 801368c:	58000080 	.word	0x58000080
 8013690:	58024400 	.word	0x58024400
 8013694:	58000400 	.word	0x58000400
 8013698:	58020000 	.word	0x58020000
 801369c:	58020400 	.word	0x58020400
 80136a0:	58020800 	.word	0x58020800
 80136a4:	58020c00 	.word	0x58020c00
 80136a8:	58021000 	.word	0x58021000
 80136ac:	58021400 	.word	0x58021400
 80136b0:	58021800 	.word	0x58021800
 80136b4:	58021c00 	.word	0x58021c00
 80136b8:	58022000 	.word	0x58022000
 80136bc:	58022400 	.word	0x58022400
 80136c0:	2300      	movs	r3, #0
 80136c2:	69fa      	ldr	r2, [r7, #28]
 80136c4:	f002 0203 	and.w	r2, r2, #3
 80136c8:	0092      	lsls	r2, r2, #2
 80136ca:	4093      	lsls	r3, r2
 80136cc:	69ba      	ldr	r2, [r7, #24]
 80136ce:	4313      	orrs	r3, r2
 80136d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80136d2:	4938      	ldr	r1, [pc, #224]	@ (80137b4 <HAL_GPIO_Init+0x35c>)
 80136d4:	69fb      	ldr	r3, [r7, #28]
 80136d6:	089b      	lsrs	r3, r3, #2
 80136d8:	3302      	adds	r3, #2
 80136da:	69ba      	ldr	r2, [r7, #24]
 80136dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80136e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80136e8:	693b      	ldr	r3, [r7, #16]
 80136ea:	43db      	mvns	r3, r3
 80136ec:	69ba      	ldr	r2, [r7, #24]
 80136ee:	4013      	ands	r3, r2
 80136f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80136f2:	683b      	ldr	r3, [r7, #0]
 80136f4:	685b      	ldr	r3, [r3, #4]
 80136f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d003      	beq.n	8013706 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80136fe:	69ba      	ldr	r2, [r7, #24]
 8013700:	693b      	ldr	r3, [r7, #16]
 8013702:	4313      	orrs	r3, r2
 8013704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8013706:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801370a:	69bb      	ldr	r3, [r7, #24]
 801370c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801370e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013712:	685b      	ldr	r3, [r3, #4]
 8013714:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8013716:	693b      	ldr	r3, [r7, #16]
 8013718:	43db      	mvns	r3, r3
 801371a:	69ba      	ldr	r2, [r7, #24]
 801371c:	4013      	ands	r3, r2
 801371e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8013720:	683b      	ldr	r3, [r7, #0]
 8013722:	685b      	ldr	r3, [r3, #4]
 8013724:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8013728:	2b00      	cmp	r3, #0
 801372a:	d003      	beq.n	8013734 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801372c:	69ba      	ldr	r2, [r7, #24]
 801372e:	693b      	ldr	r3, [r7, #16]
 8013730:	4313      	orrs	r3, r2
 8013732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8013734:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013738:	69bb      	ldr	r3, [r7, #24]
 801373a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801373c:	697b      	ldr	r3, [r7, #20]
 801373e:	685b      	ldr	r3, [r3, #4]
 8013740:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8013742:	693b      	ldr	r3, [r7, #16]
 8013744:	43db      	mvns	r3, r3
 8013746:	69ba      	ldr	r2, [r7, #24]
 8013748:	4013      	ands	r3, r2
 801374a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	685b      	ldr	r3, [r3, #4]
 8013750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013754:	2b00      	cmp	r3, #0
 8013756:	d003      	beq.n	8013760 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8013758:	69ba      	ldr	r2, [r7, #24]
 801375a:	693b      	ldr	r3, [r7, #16]
 801375c:	4313      	orrs	r3, r2
 801375e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8013760:	697b      	ldr	r3, [r7, #20]
 8013762:	69ba      	ldr	r2, [r7, #24]
 8013764:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8013766:	697b      	ldr	r3, [r7, #20]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801376c:	693b      	ldr	r3, [r7, #16]
 801376e:	43db      	mvns	r3, r3
 8013770:	69ba      	ldr	r2, [r7, #24]
 8013772:	4013      	ands	r3, r2
 8013774:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8013776:	683b      	ldr	r3, [r7, #0]
 8013778:	685b      	ldr	r3, [r3, #4]
 801377a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801377e:	2b00      	cmp	r3, #0
 8013780:	d003      	beq.n	801378a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8013782:	69ba      	ldr	r2, [r7, #24]
 8013784:	693b      	ldr	r3, [r7, #16]
 8013786:	4313      	orrs	r3, r2
 8013788:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801378a:	697b      	ldr	r3, [r7, #20]
 801378c:	69ba      	ldr	r2, [r7, #24]
 801378e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8013790:	69fb      	ldr	r3, [r7, #28]
 8013792:	3301      	adds	r3, #1
 8013794:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	681a      	ldr	r2, [r3, #0]
 801379a:	69fb      	ldr	r3, [r7, #28]
 801379c:	fa22 f303 	lsr.w	r3, r2, r3
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	f47f ae63 	bne.w	801346c <HAL_GPIO_Init+0x14>
  }
}
 80137a6:	bf00      	nop
 80137a8:	bf00      	nop
 80137aa:	3724      	adds	r7, #36	@ 0x24
 80137ac:	46bd      	mov	sp, r7
 80137ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b2:	4770      	bx	lr
 80137b4:	58000400 	.word	0x58000400

080137b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80137b8:	b480      	push	{r7}
 80137ba:	b085      	sub	sp, #20
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
 80137c0:	460b      	mov	r3, r1
 80137c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	691a      	ldr	r2, [r3, #16]
 80137c8:	887b      	ldrh	r3, [r7, #2]
 80137ca:	4013      	ands	r3, r2
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d002      	beq.n	80137d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80137d0:	2301      	movs	r3, #1
 80137d2:	73fb      	strb	r3, [r7, #15]
 80137d4:	e001      	b.n	80137da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80137d6:	2300      	movs	r3, #0
 80137d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80137da:	7bfb      	ldrb	r3, [r7, #15]
}
 80137dc:	4618      	mov	r0, r3
 80137de:	3714      	adds	r7, #20
 80137e0:	46bd      	mov	sp, r7
 80137e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e6:	4770      	bx	lr

080137e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80137e8:	b480      	push	{r7}
 80137ea:	b083      	sub	sp, #12
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
 80137f0:	460b      	mov	r3, r1
 80137f2:	807b      	strh	r3, [r7, #2]
 80137f4:	4613      	mov	r3, r2
 80137f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80137f8:	787b      	ldrb	r3, [r7, #1]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d003      	beq.n	8013806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80137fe:	887a      	ldrh	r2, [r7, #2]
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8013804:	e003      	b.n	801380e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8013806:	887b      	ldrh	r3, [r7, #2]
 8013808:	041a      	lsls	r2, r3, #16
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	619a      	str	r2, [r3, #24]
}
 801380e:	bf00      	nop
 8013810:	370c      	adds	r7, #12
 8013812:	46bd      	mov	sp, r7
 8013814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013818:	4770      	bx	lr
	...

0801381c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801381c:	b580      	push	{r7, lr}
 801381e:	b084      	sub	sp, #16
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8013824:	4b19      	ldr	r3, [pc, #100]	@ (801388c <HAL_PWREx_ConfigSupply+0x70>)
 8013826:	68db      	ldr	r3, [r3, #12]
 8013828:	f003 0304 	and.w	r3, r3, #4
 801382c:	2b04      	cmp	r3, #4
 801382e:	d00a      	beq.n	8013846 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8013830:	4b16      	ldr	r3, [pc, #88]	@ (801388c <HAL_PWREx_ConfigSupply+0x70>)
 8013832:	68db      	ldr	r3, [r3, #12]
 8013834:	f003 0307 	and.w	r3, r3, #7
 8013838:	687a      	ldr	r2, [r7, #4]
 801383a:	429a      	cmp	r2, r3
 801383c:	d001      	beq.n	8013842 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801383e:	2301      	movs	r3, #1
 8013840:	e01f      	b.n	8013882 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8013842:	2300      	movs	r3, #0
 8013844:	e01d      	b.n	8013882 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8013846:	4b11      	ldr	r3, [pc, #68]	@ (801388c <HAL_PWREx_ConfigSupply+0x70>)
 8013848:	68db      	ldr	r3, [r3, #12]
 801384a:	f023 0207 	bic.w	r2, r3, #7
 801384e:	490f      	ldr	r1, [pc, #60]	@ (801388c <HAL_PWREx_ConfigSupply+0x70>)
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	4313      	orrs	r3, r2
 8013854:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8013856:	f7fd f8e1 	bl	8010a1c <HAL_GetTick>
 801385a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801385c:	e009      	b.n	8013872 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801385e:	f7fd f8dd 	bl	8010a1c <HAL_GetTick>
 8013862:	4602      	mov	r2, r0
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	1ad3      	subs	r3, r2, r3
 8013868:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801386c:	d901      	bls.n	8013872 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801386e:	2301      	movs	r3, #1
 8013870:	e007      	b.n	8013882 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8013872:	4b06      	ldr	r3, [pc, #24]	@ (801388c <HAL_PWREx_ConfigSupply+0x70>)
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801387a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801387e:	d1ee      	bne.n	801385e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8013880:	2300      	movs	r3, #0
}
 8013882:	4618      	mov	r0, r3
 8013884:	3710      	adds	r7, #16
 8013886:	46bd      	mov	sp, r7
 8013888:	bd80      	pop	{r7, pc}
 801388a:	bf00      	nop
 801388c:	58024800 	.word	0x58024800

08013890 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b08c      	sub	sp, #48	@ 0x30
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d102      	bne.n	80138a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801389e:	2301      	movs	r3, #1
 80138a0:	f000 bc48 	b.w	8014134 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	f003 0301 	and.w	r3, r3, #1
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	f000 8088 	beq.w	80139c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80138b2:	4b99      	ldr	r3, [pc, #612]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 80138b4:	691b      	ldr	r3, [r3, #16]
 80138b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80138ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80138bc:	4b96      	ldr	r3, [pc, #600]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 80138be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80138c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80138c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138c4:	2b10      	cmp	r3, #16
 80138c6:	d007      	beq.n	80138d8 <HAL_RCC_OscConfig+0x48>
 80138c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138ca:	2b18      	cmp	r3, #24
 80138cc:	d111      	bne.n	80138f2 <HAL_RCC_OscConfig+0x62>
 80138ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138d0:	f003 0303 	and.w	r3, r3, #3
 80138d4:	2b02      	cmp	r3, #2
 80138d6:	d10c      	bne.n	80138f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80138d8:	4b8f      	ldr	r3, [pc, #572]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d06d      	beq.n	80139c0 <HAL_RCC_OscConfig+0x130>
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	685b      	ldr	r3, [r3, #4]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d169      	bne.n	80139c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80138ec:	2301      	movs	r3, #1
 80138ee:	f000 bc21 	b.w	8014134 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	685b      	ldr	r3, [r3, #4]
 80138f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80138fa:	d106      	bne.n	801390a <HAL_RCC_OscConfig+0x7a>
 80138fc:	4b86      	ldr	r3, [pc, #536]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	4a85      	ldr	r2, [pc, #532]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013902:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013906:	6013      	str	r3, [r2, #0]
 8013908:	e02e      	b.n	8013968 <HAL_RCC_OscConfig+0xd8>
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	685b      	ldr	r3, [r3, #4]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d10c      	bne.n	801392c <HAL_RCC_OscConfig+0x9c>
 8013912:	4b81      	ldr	r3, [pc, #516]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	4a80      	ldr	r2, [pc, #512]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013918:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801391c:	6013      	str	r3, [r2, #0]
 801391e:	4b7e      	ldr	r3, [pc, #504]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	4a7d      	ldr	r2, [pc, #500]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013924:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013928:	6013      	str	r3, [r2, #0]
 801392a:	e01d      	b.n	8013968 <HAL_RCC_OscConfig+0xd8>
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	685b      	ldr	r3, [r3, #4]
 8013930:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013934:	d10c      	bne.n	8013950 <HAL_RCC_OscConfig+0xc0>
 8013936:	4b78      	ldr	r3, [pc, #480]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	4a77      	ldr	r2, [pc, #476]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 801393c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8013940:	6013      	str	r3, [r2, #0]
 8013942:	4b75      	ldr	r3, [pc, #468]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	4a74      	ldr	r2, [pc, #464]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801394c:	6013      	str	r3, [r2, #0]
 801394e:	e00b      	b.n	8013968 <HAL_RCC_OscConfig+0xd8>
 8013950:	4b71      	ldr	r3, [pc, #452]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	4a70      	ldr	r2, [pc, #448]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801395a:	6013      	str	r3, [r2, #0]
 801395c:	4b6e      	ldr	r3, [pc, #440]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	4a6d      	ldr	r2, [pc, #436]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013962:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	685b      	ldr	r3, [r3, #4]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d013      	beq.n	8013998 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013970:	f7fd f854 	bl	8010a1c <HAL_GetTick>
 8013974:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8013976:	e008      	b.n	801398a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013978:	f7fd f850 	bl	8010a1c <HAL_GetTick>
 801397c:	4602      	mov	r2, r0
 801397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013980:	1ad3      	subs	r3, r2, r3
 8013982:	2b64      	cmp	r3, #100	@ 0x64
 8013984:	d901      	bls.n	801398a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8013986:	2303      	movs	r3, #3
 8013988:	e3d4      	b.n	8014134 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801398a:	4b63      	ldr	r3, [pc, #396]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013992:	2b00      	cmp	r3, #0
 8013994:	d0f0      	beq.n	8013978 <HAL_RCC_OscConfig+0xe8>
 8013996:	e014      	b.n	80139c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013998:	f7fd f840 	bl	8010a1c <HAL_GetTick>
 801399c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801399e:	e008      	b.n	80139b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80139a0:	f7fd f83c 	bl	8010a1c <HAL_GetTick>
 80139a4:	4602      	mov	r2, r0
 80139a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139a8:	1ad3      	subs	r3, r2, r3
 80139aa:	2b64      	cmp	r3, #100	@ 0x64
 80139ac:	d901      	bls.n	80139b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80139ae:	2303      	movs	r3, #3
 80139b0:	e3c0      	b.n	8014134 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80139b2:	4b59      	ldr	r3, [pc, #356]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d1f0      	bne.n	80139a0 <HAL_RCC_OscConfig+0x110>
 80139be:	e000      	b.n	80139c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80139c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	f003 0302 	and.w	r3, r3, #2
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	f000 80ca 	beq.w	8013b64 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80139d0:	4b51      	ldr	r3, [pc, #324]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 80139d2:	691b      	ldr	r3, [r3, #16]
 80139d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80139d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80139da:	4b4f      	ldr	r3, [pc, #316]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 80139dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80139de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80139e0:	6a3b      	ldr	r3, [r7, #32]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d007      	beq.n	80139f6 <HAL_RCC_OscConfig+0x166>
 80139e6:	6a3b      	ldr	r3, [r7, #32]
 80139e8:	2b18      	cmp	r3, #24
 80139ea:	d156      	bne.n	8013a9a <HAL_RCC_OscConfig+0x20a>
 80139ec:	69fb      	ldr	r3, [r7, #28]
 80139ee:	f003 0303 	and.w	r3, r3, #3
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d151      	bne.n	8013a9a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80139f6:	4b48      	ldr	r3, [pc, #288]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	f003 0304 	and.w	r3, r3, #4
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d005      	beq.n	8013a0e <HAL_RCC_OscConfig+0x17e>
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	68db      	ldr	r3, [r3, #12]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d101      	bne.n	8013a0e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	e392      	b.n	8014134 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8013a0e:	4b42      	ldr	r3, [pc, #264]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	f023 0219 	bic.w	r2, r3, #25
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	68db      	ldr	r3, [r3, #12]
 8013a1a:	493f      	ldr	r1, [pc, #252]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013a1c:	4313      	orrs	r3, r2
 8013a1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013a20:	f7fc fffc 	bl	8010a1c <HAL_GetTick>
 8013a24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013a26:	e008      	b.n	8013a3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013a28:	f7fc fff8 	bl	8010a1c <HAL_GetTick>
 8013a2c:	4602      	mov	r2, r0
 8013a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a30:	1ad3      	subs	r3, r2, r3
 8013a32:	2b02      	cmp	r3, #2
 8013a34:	d901      	bls.n	8013a3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8013a36:	2303      	movs	r3, #3
 8013a38:	e37c      	b.n	8014134 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013a3a:	4b37      	ldr	r3, [pc, #220]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	f003 0304 	and.w	r3, r3, #4
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d0f0      	beq.n	8013a28 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013a46:	f7fd f819 	bl	8010a7c <HAL_GetREVID>
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8013a50:	4293      	cmp	r3, r2
 8013a52:	d817      	bhi.n	8013a84 <HAL_RCC_OscConfig+0x1f4>
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	691b      	ldr	r3, [r3, #16]
 8013a58:	2b40      	cmp	r3, #64	@ 0x40
 8013a5a:	d108      	bne.n	8013a6e <HAL_RCC_OscConfig+0x1de>
 8013a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013a5e:	685b      	ldr	r3, [r3, #4]
 8013a60:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8013a64:	4a2c      	ldr	r2, [pc, #176]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013a6a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013a6c:	e07a      	b.n	8013b64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013a70:	685b      	ldr	r3, [r3, #4]
 8013a72:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	691b      	ldr	r3, [r3, #16]
 8013a7a:	031b      	lsls	r3, r3, #12
 8013a7c:	4926      	ldr	r1, [pc, #152]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013a7e:	4313      	orrs	r3, r2
 8013a80:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013a82:	e06f      	b.n	8013b64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013a84:	4b24      	ldr	r3, [pc, #144]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013a86:	685b      	ldr	r3, [r3, #4]
 8013a88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	691b      	ldr	r3, [r3, #16]
 8013a90:	061b      	lsls	r3, r3, #24
 8013a92:	4921      	ldr	r1, [pc, #132]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013a94:	4313      	orrs	r3, r2
 8013a96:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013a98:	e064      	b.n	8013b64 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	68db      	ldr	r3, [r3, #12]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d047      	beq.n	8013b32 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8013aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	f023 0219 	bic.w	r2, r3, #25
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	68db      	ldr	r3, [r3, #12]
 8013aae:	491a      	ldr	r1, [pc, #104]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013ab0:	4313      	orrs	r3, r2
 8013ab2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013ab4:	f7fc ffb2 	bl	8010a1c <HAL_GetTick>
 8013ab8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013aba:	e008      	b.n	8013ace <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013abc:	f7fc ffae 	bl	8010a1c <HAL_GetTick>
 8013ac0:	4602      	mov	r2, r0
 8013ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ac4:	1ad3      	subs	r3, r2, r3
 8013ac6:	2b02      	cmp	r3, #2
 8013ac8:	d901      	bls.n	8013ace <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8013aca:	2303      	movs	r3, #3
 8013acc:	e332      	b.n	8014134 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013ace:	4b12      	ldr	r3, [pc, #72]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	f003 0304 	and.w	r3, r3, #4
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d0f0      	beq.n	8013abc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013ada:	f7fc ffcf 	bl	8010a7c <HAL_GetREVID>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8013ae4:	4293      	cmp	r3, r2
 8013ae6:	d819      	bhi.n	8013b1c <HAL_RCC_OscConfig+0x28c>
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	691b      	ldr	r3, [r3, #16]
 8013aec:	2b40      	cmp	r3, #64	@ 0x40
 8013aee:	d108      	bne.n	8013b02 <HAL_RCC_OscConfig+0x272>
 8013af0:	4b09      	ldr	r3, [pc, #36]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013af2:	685b      	ldr	r3, [r3, #4]
 8013af4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8013af8:	4a07      	ldr	r2, [pc, #28]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013afe:	6053      	str	r3, [r2, #4]
 8013b00:	e030      	b.n	8013b64 <HAL_RCC_OscConfig+0x2d4>
 8013b02:	4b05      	ldr	r3, [pc, #20]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013b04:	685b      	ldr	r3, [r3, #4]
 8013b06:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	691b      	ldr	r3, [r3, #16]
 8013b0e:	031b      	lsls	r3, r3, #12
 8013b10:	4901      	ldr	r1, [pc, #4]	@ (8013b18 <HAL_RCC_OscConfig+0x288>)
 8013b12:	4313      	orrs	r3, r2
 8013b14:	604b      	str	r3, [r1, #4]
 8013b16:	e025      	b.n	8013b64 <HAL_RCC_OscConfig+0x2d4>
 8013b18:	58024400 	.word	0x58024400
 8013b1c:	4b9a      	ldr	r3, [pc, #616]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013b1e:	685b      	ldr	r3, [r3, #4]
 8013b20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	691b      	ldr	r3, [r3, #16]
 8013b28:	061b      	lsls	r3, r3, #24
 8013b2a:	4997      	ldr	r1, [pc, #604]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013b2c:	4313      	orrs	r3, r2
 8013b2e:	604b      	str	r3, [r1, #4]
 8013b30:	e018      	b.n	8013b64 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013b32:	4b95      	ldr	r3, [pc, #596]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	4a94      	ldr	r2, [pc, #592]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013b38:	f023 0301 	bic.w	r3, r3, #1
 8013b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013b3e:	f7fc ff6d 	bl	8010a1c <HAL_GetTick>
 8013b42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8013b44:	e008      	b.n	8013b58 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013b46:	f7fc ff69 	bl	8010a1c <HAL_GetTick>
 8013b4a:	4602      	mov	r2, r0
 8013b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b4e:	1ad3      	subs	r3, r2, r3
 8013b50:	2b02      	cmp	r3, #2
 8013b52:	d901      	bls.n	8013b58 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8013b54:	2303      	movs	r3, #3
 8013b56:	e2ed      	b.n	8014134 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8013b58:	4b8b      	ldr	r3, [pc, #556]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	f003 0304 	and.w	r3, r3, #4
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d1f0      	bne.n	8013b46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	f003 0310 	and.w	r3, r3, #16
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	f000 80a9 	beq.w	8013cc4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013b72:	4b85      	ldr	r3, [pc, #532]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013b74:	691b      	ldr	r3, [r3, #16]
 8013b76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013b7a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8013b7c:	4b82      	ldr	r3, [pc, #520]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b80:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8013b82:	69bb      	ldr	r3, [r7, #24]
 8013b84:	2b08      	cmp	r3, #8
 8013b86:	d007      	beq.n	8013b98 <HAL_RCC_OscConfig+0x308>
 8013b88:	69bb      	ldr	r3, [r7, #24]
 8013b8a:	2b18      	cmp	r3, #24
 8013b8c:	d13a      	bne.n	8013c04 <HAL_RCC_OscConfig+0x374>
 8013b8e:	697b      	ldr	r3, [r7, #20]
 8013b90:	f003 0303 	and.w	r3, r3, #3
 8013b94:	2b01      	cmp	r3, #1
 8013b96:	d135      	bne.n	8013c04 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8013b98:	4b7b      	ldr	r3, [pc, #492]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d005      	beq.n	8013bb0 <HAL_RCC_OscConfig+0x320>
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	69db      	ldr	r3, [r3, #28]
 8013ba8:	2b80      	cmp	r3, #128	@ 0x80
 8013baa:	d001      	beq.n	8013bb0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8013bac:	2301      	movs	r3, #1
 8013bae:	e2c1      	b.n	8014134 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8013bb0:	f7fc ff64 	bl	8010a7c <HAL_GetREVID>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8013bba:	4293      	cmp	r3, r2
 8013bbc:	d817      	bhi.n	8013bee <HAL_RCC_OscConfig+0x35e>
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	6a1b      	ldr	r3, [r3, #32]
 8013bc2:	2b20      	cmp	r3, #32
 8013bc4:	d108      	bne.n	8013bd8 <HAL_RCC_OscConfig+0x348>
 8013bc6:	4b70      	ldr	r3, [pc, #448]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013bc8:	685b      	ldr	r3, [r3, #4]
 8013bca:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8013bce:	4a6e      	ldr	r2, [pc, #440]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013bd0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013bd4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8013bd6:	e075      	b.n	8013cc4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8013bd8:	4b6b      	ldr	r3, [pc, #428]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013bda:	685b      	ldr	r3, [r3, #4]
 8013bdc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	6a1b      	ldr	r3, [r3, #32]
 8013be4:	069b      	lsls	r3, r3, #26
 8013be6:	4968      	ldr	r1, [pc, #416]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013be8:	4313      	orrs	r3, r2
 8013bea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8013bec:	e06a      	b.n	8013cc4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8013bee:	4b66      	ldr	r3, [pc, #408]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013bf0:	68db      	ldr	r3, [r3, #12]
 8013bf2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	6a1b      	ldr	r3, [r3, #32]
 8013bfa:	061b      	lsls	r3, r3, #24
 8013bfc:	4962      	ldr	r1, [pc, #392]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013bfe:	4313      	orrs	r3, r2
 8013c00:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8013c02:	e05f      	b.n	8013cc4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	69db      	ldr	r3, [r3, #28]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d042      	beq.n	8013c92 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8013c0c:	4b5e      	ldr	r3, [pc, #376]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	4a5d      	ldr	r2, [pc, #372]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013c18:	f7fc ff00 	bl	8010a1c <HAL_GetTick>
 8013c1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8013c1e:	e008      	b.n	8013c32 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8013c20:	f7fc fefc 	bl	8010a1c <HAL_GetTick>
 8013c24:	4602      	mov	r2, r0
 8013c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c28:	1ad3      	subs	r3, r2, r3
 8013c2a:	2b02      	cmp	r3, #2
 8013c2c:	d901      	bls.n	8013c32 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8013c2e:	2303      	movs	r3, #3
 8013c30:	e280      	b.n	8014134 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8013c32:	4b55      	ldr	r3, [pc, #340]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d0f0      	beq.n	8013c20 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8013c3e:	f7fc ff1d 	bl	8010a7c <HAL_GetREVID>
 8013c42:	4603      	mov	r3, r0
 8013c44:	f241 0203 	movw	r2, #4099	@ 0x1003
 8013c48:	4293      	cmp	r3, r2
 8013c4a:	d817      	bhi.n	8013c7c <HAL_RCC_OscConfig+0x3ec>
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	6a1b      	ldr	r3, [r3, #32]
 8013c50:	2b20      	cmp	r3, #32
 8013c52:	d108      	bne.n	8013c66 <HAL_RCC_OscConfig+0x3d6>
 8013c54:	4b4c      	ldr	r3, [pc, #304]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013c56:	685b      	ldr	r3, [r3, #4]
 8013c58:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8013c5c:	4a4a      	ldr	r2, [pc, #296]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013c5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013c62:	6053      	str	r3, [r2, #4]
 8013c64:	e02e      	b.n	8013cc4 <HAL_RCC_OscConfig+0x434>
 8013c66:	4b48      	ldr	r3, [pc, #288]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013c68:	685b      	ldr	r3, [r3, #4]
 8013c6a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	6a1b      	ldr	r3, [r3, #32]
 8013c72:	069b      	lsls	r3, r3, #26
 8013c74:	4944      	ldr	r1, [pc, #272]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013c76:	4313      	orrs	r3, r2
 8013c78:	604b      	str	r3, [r1, #4]
 8013c7a:	e023      	b.n	8013cc4 <HAL_RCC_OscConfig+0x434>
 8013c7c:	4b42      	ldr	r3, [pc, #264]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013c7e:	68db      	ldr	r3, [r3, #12]
 8013c80:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	6a1b      	ldr	r3, [r3, #32]
 8013c88:	061b      	lsls	r3, r3, #24
 8013c8a:	493f      	ldr	r1, [pc, #252]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013c8c:	4313      	orrs	r3, r2
 8013c8e:	60cb      	str	r3, [r1, #12]
 8013c90:	e018      	b.n	8013cc4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8013c92:	4b3d      	ldr	r3, [pc, #244]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	4a3c      	ldr	r2, [pc, #240]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013c98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013c9e:	f7fc febd 	bl	8010a1c <HAL_GetTick>
 8013ca2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8013ca4:	e008      	b.n	8013cb8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8013ca6:	f7fc feb9 	bl	8010a1c <HAL_GetTick>
 8013caa:	4602      	mov	r2, r0
 8013cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cae:	1ad3      	subs	r3, r2, r3
 8013cb0:	2b02      	cmp	r3, #2
 8013cb2:	d901      	bls.n	8013cb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8013cb4:	2303      	movs	r3, #3
 8013cb6:	e23d      	b.n	8014134 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8013cb8:	4b33      	ldr	r3, [pc, #204]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d1f0      	bne.n	8013ca6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	f003 0308 	and.w	r3, r3, #8
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d036      	beq.n	8013d3e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	695b      	ldr	r3, [r3, #20]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d019      	beq.n	8013d0c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013cdc:	4a2a      	ldr	r2, [pc, #168]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013cde:	f043 0301 	orr.w	r3, r3, #1
 8013ce2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013ce4:	f7fc fe9a 	bl	8010a1c <HAL_GetTick>
 8013ce8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8013cea:	e008      	b.n	8013cfe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013cec:	f7fc fe96 	bl	8010a1c <HAL_GetTick>
 8013cf0:	4602      	mov	r2, r0
 8013cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cf4:	1ad3      	subs	r3, r2, r3
 8013cf6:	2b02      	cmp	r3, #2
 8013cf8:	d901      	bls.n	8013cfe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8013cfa:	2303      	movs	r3, #3
 8013cfc:	e21a      	b.n	8014134 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8013cfe:	4b22      	ldr	r3, [pc, #136]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d02:	f003 0302 	and.w	r3, r3, #2
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d0f0      	beq.n	8013cec <HAL_RCC_OscConfig+0x45c>
 8013d0a:	e018      	b.n	8013d3e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013d0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d10:	4a1d      	ldr	r2, [pc, #116]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013d12:	f023 0301 	bic.w	r3, r3, #1
 8013d16:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013d18:	f7fc fe80 	bl	8010a1c <HAL_GetTick>
 8013d1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8013d1e:	e008      	b.n	8013d32 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013d20:	f7fc fe7c 	bl	8010a1c <HAL_GetTick>
 8013d24:	4602      	mov	r2, r0
 8013d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d28:	1ad3      	subs	r3, r2, r3
 8013d2a:	2b02      	cmp	r3, #2
 8013d2c:	d901      	bls.n	8013d32 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8013d2e:	2303      	movs	r3, #3
 8013d30:	e200      	b.n	8014134 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8013d32:	4b15      	ldr	r3, [pc, #84]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d36:	f003 0302 	and.w	r3, r3, #2
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d1f0      	bne.n	8013d20 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	f003 0320 	and.w	r3, r3, #32
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d039      	beq.n	8013dbe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	699b      	ldr	r3, [r3, #24]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d01c      	beq.n	8013d8c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8013d52:	4b0d      	ldr	r3, [pc, #52]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	4a0c      	ldr	r2, [pc, #48]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013d58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8013d5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8013d5e:	f7fc fe5d 	bl	8010a1c <HAL_GetTick>
 8013d62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8013d64:	e008      	b.n	8013d78 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013d66:	f7fc fe59 	bl	8010a1c <HAL_GetTick>
 8013d6a:	4602      	mov	r2, r0
 8013d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d6e:	1ad3      	subs	r3, r2, r3
 8013d70:	2b02      	cmp	r3, #2
 8013d72:	d901      	bls.n	8013d78 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8013d74:	2303      	movs	r3, #3
 8013d76:	e1dd      	b.n	8014134 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8013d78:	4b03      	ldr	r3, [pc, #12]	@ (8013d88 <HAL_RCC_OscConfig+0x4f8>)
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d0f0      	beq.n	8013d66 <HAL_RCC_OscConfig+0x4d6>
 8013d84:	e01b      	b.n	8013dbe <HAL_RCC_OscConfig+0x52e>
 8013d86:	bf00      	nop
 8013d88:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8013d8c:	4b9b      	ldr	r3, [pc, #620]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	4a9a      	ldr	r2, [pc, #616]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013d92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013d96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8013d98:	f7fc fe40 	bl	8010a1c <HAL_GetTick>
 8013d9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8013d9e:	e008      	b.n	8013db2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013da0:	f7fc fe3c 	bl	8010a1c <HAL_GetTick>
 8013da4:	4602      	mov	r2, r0
 8013da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013da8:	1ad3      	subs	r3, r2, r3
 8013daa:	2b02      	cmp	r3, #2
 8013dac:	d901      	bls.n	8013db2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8013dae:	2303      	movs	r3, #3
 8013db0:	e1c0      	b.n	8014134 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8013db2:	4b92      	ldr	r3, [pc, #584]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d1f0      	bne.n	8013da0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	f003 0304 	and.w	r3, r3, #4
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	f000 8081 	beq.w	8013ece <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8013dcc:	4b8c      	ldr	r3, [pc, #560]	@ (8014000 <HAL_RCC_OscConfig+0x770>)
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	4a8b      	ldr	r2, [pc, #556]	@ (8014000 <HAL_RCC_OscConfig+0x770>)
 8013dd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013dd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8013dd8:	f7fc fe20 	bl	8010a1c <HAL_GetTick>
 8013ddc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013dde:	e008      	b.n	8013df2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013de0:	f7fc fe1c 	bl	8010a1c <HAL_GetTick>
 8013de4:	4602      	mov	r2, r0
 8013de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013de8:	1ad3      	subs	r3, r2, r3
 8013dea:	2b64      	cmp	r3, #100	@ 0x64
 8013dec:	d901      	bls.n	8013df2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8013dee:	2303      	movs	r3, #3
 8013df0:	e1a0      	b.n	8014134 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013df2:	4b83      	ldr	r3, [pc, #524]	@ (8014000 <HAL_RCC_OscConfig+0x770>)
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d0f0      	beq.n	8013de0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	689b      	ldr	r3, [r3, #8]
 8013e02:	2b01      	cmp	r3, #1
 8013e04:	d106      	bne.n	8013e14 <HAL_RCC_OscConfig+0x584>
 8013e06:	4b7d      	ldr	r3, [pc, #500]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e0a:	4a7c      	ldr	r2, [pc, #496]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013e0c:	f043 0301 	orr.w	r3, r3, #1
 8013e10:	6713      	str	r3, [r2, #112]	@ 0x70
 8013e12:	e02d      	b.n	8013e70 <HAL_RCC_OscConfig+0x5e0>
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	689b      	ldr	r3, [r3, #8]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d10c      	bne.n	8013e36 <HAL_RCC_OscConfig+0x5a6>
 8013e1c:	4b77      	ldr	r3, [pc, #476]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e20:	4a76      	ldr	r2, [pc, #472]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013e22:	f023 0301 	bic.w	r3, r3, #1
 8013e26:	6713      	str	r3, [r2, #112]	@ 0x70
 8013e28:	4b74      	ldr	r3, [pc, #464]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e2c:	4a73      	ldr	r2, [pc, #460]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013e2e:	f023 0304 	bic.w	r3, r3, #4
 8013e32:	6713      	str	r3, [r2, #112]	@ 0x70
 8013e34:	e01c      	b.n	8013e70 <HAL_RCC_OscConfig+0x5e0>
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	689b      	ldr	r3, [r3, #8]
 8013e3a:	2b05      	cmp	r3, #5
 8013e3c:	d10c      	bne.n	8013e58 <HAL_RCC_OscConfig+0x5c8>
 8013e3e:	4b6f      	ldr	r3, [pc, #444]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e42:	4a6e      	ldr	r2, [pc, #440]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013e44:	f043 0304 	orr.w	r3, r3, #4
 8013e48:	6713      	str	r3, [r2, #112]	@ 0x70
 8013e4a:	4b6c      	ldr	r3, [pc, #432]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e4e:	4a6b      	ldr	r2, [pc, #428]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013e50:	f043 0301 	orr.w	r3, r3, #1
 8013e54:	6713      	str	r3, [r2, #112]	@ 0x70
 8013e56:	e00b      	b.n	8013e70 <HAL_RCC_OscConfig+0x5e0>
 8013e58:	4b68      	ldr	r3, [pc, #416]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e5c:	4a67      	ldr	r2, [pc, #412]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013e5e:	f023 0301 	bic.w	r3, r3, #1
 8013e62:	6713      	str	r3, [r2, #112]	@ 0x70
 8013e64:	4b65      	ldr	r3, [pc, #404]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e68:	4a64      	ldr	r2, [pc, #400]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013e6a:	f023 0304 	bic.w	r3, r3, #4
 8013e6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	689b      	ldr	r3, [r3, #8]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d015      	beq.n	8013ea4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013e78:	f7fc fdd0 	bl	8010a1c <HAL_GetTick>
 8013e7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013e7e:	e00a      	b.n	8013e96 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013e80:	f7fc fdcc 	bl	8010a1c <HAL_GetTick>
 8013e84:	4602      	mov	r2, r0
 8013e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e88:	1ad3      	subs	r3, r2, r3
 8013e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013e8e:	4293      	cmp	r3, r2
 8013e90:	d901      	bls.n	8013e96 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8013e92:	2303      	movs	r3, #3
 8013e94:	e14e      	b.n	8014134 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013e96:	4b59      	ldr	r3, [pc, #356]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e9a:	f003 0302 	and.w	r3, r3, #2
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d0ee      	beq.n	8013e80 <HAL_RCC_OscConfig+0x5f0>
 8013ea2:	e014      	b.n	8013ece <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013ea4:	f7fc fdba 	bl	8010a1c <HAL_GetTick>
 8013ea8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8013eaa:	e00a      	b.n	8013ec2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013eac:	f7fc fdb6 	bl	8010a1c <HAL_GetTick>
 8013eb0:	4602      	mov	r2, r0
 8013eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eb4:	1ad3      	subs	r3, r2, r3
 8013eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013eba:	4293      	cmp	r3, r2
 8013ebc:	d901      	bls.n	8013ec2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8013ebe:	2303      	movs	r3, #3
 8013ec0:	e138      	b.n	8014134 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8013ec2:	4b4e      	ldr	r3, [pc, #312]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ec6:	f003 0302 	and.w	r3, r3, #2
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d1ee      	bne.n	8013eac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	f000 812d 	beq.w	8014132 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8013ed8:	4b48      	ldr	r3, [pc, #288]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013eda:	691b      	ldr	r3, [r3, #16]
 8013edc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013ee0:	2b18      	cmp	r3, #24
 8013ee2:	f000 80bd 	beq.w	8014060 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013eea:	2b02      	cmp	r3, #2
 8013eec:	f040 809e 	bne.w	801402c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013ef0:	4b42      	ldr	r3, [pc, #264]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	4a41      	ldr	r2, [pc, #260]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013ef6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013efc:	f7fc fd8e 	bl	8010a1c <HAL_GetTick>
 8013f00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8013f02:	e008      	b.n	8013f16 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013f04:	f7fc fd8a 	bl	8010a1c <HAL_GetTick>
 8013f08:	4602      	mov	r2, r0
 8013f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f0c:	1ad3      	subs	r3, r2, r3
 8013f0e:	2b02      	cmp	r3, #2
 8013f10:	d901      	bls.n	8013f16 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8013f12:	2303      	movs	r3, #3
 8013f14:	e10e      	b.n	8014134 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8013f16:	4b39      	ldr	r3, [pc, #228]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d1f0      	bne.n	8013f04 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013f22:	4b36      	ldr	r3, [pc, #216]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013f24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013f26:	4b37      	ldr	r3, [pc, #220]	@ (8014004 <HAL_RCC_OscConfig+0x774>)
 8013f28:	4013      	ands	r3, r2
 8013f2a:	687a      	ldr	r2, [r7, #4]
 8013f2c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8013f2e:	687a      	ldr	r2, [r7, #4]
 8013f30:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8013f32:	0112      	lsls	r2, r2, #4
 8013f34:	430a      	orrs	r2, r1
 8013f36:	4931      	ldr	r1, [pc, #196]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013f38:	4313      	orrs	r3, r2
 8013f3a:	628b      	str	r3, [r1, #40]	@ 0x28
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f40:	3b01      	subs	r3, #1
 8013f42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013f4a:	3b01      	subs	r3, #1
 8013f4c:	025b      	lsls	r3, r3, #9
 8013f4e:	b29b      	uxth	r3, r3
 8013f50:	431a      	orrs	r2, r3
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f56:	3b01      	subs	r3, #1
 8013f58:	041b      	lsls	r3, r3, #16
 8013f5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8013f5e:	431a      	orrs	r2, r3
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013f64:	3b01      	subs	r3, #1
 8013f66:	061b      	lsls	r3, r3, #24
 8013f68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8013f6c:	4923      	ldr	r1, [pc, #140]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013f6e:	4313      	orrs	r3, r2
 8013f70:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8013f72:	4b22      	ldr	r3, [pc, #136]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f76:	4a21      	ldr	r2, [pc, #132]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013f78:	f023 0301 	bic.w	r3, r3, #1
 8013f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8013f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013f82:	4b21      	ldr	r3, [pc, #132]	@ (8014008 <HAL_RCC_OscConfig+0x778>)
 8013f84:	4013      	ands	r3, r2
 8013f86:	687a      	ldr	r2, [r7, #4]
 8013f88:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8013f8a:	00d2      	lsls	r2, r2, #3
 8013f8c:	491b      	ldr	r1, [pc, #108]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013f8e:	4313      	orrs	r3, r2
 8013f90:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8013f92:	4b1a      	ldr	r3, [pc, #104]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f96:	f023 020c 	bic.w	r2, r3, #12
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f9e:	4917      	ldr	r1, [pc, #92]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013fa0:	4313      	orrs	r3, r2
 8013fa2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8013fa4:	4b15      	ldr	r3, [pc, #84]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fa8:	f023 0202 	bic.w	r2, r3, #2
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013fb0:	4912      	ldr	r1, [pc, #72]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013fb2:	4313      	orrs	r3, r2
 8013fb4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8013fb6:	4b11      	ldr	r3, [pc, #68]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fba:	4a10      	ldr	r2, [pc, #64]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013fc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fc6:	4a0d      	ldr	r2, [pc, #52]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8013fce:	4b0b      	ldr	r3, [pc, #44]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013fd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8013fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8013fda:	4b08      	ldr	r3, [pc, #32]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fde:	4a07      	ldr	r2, [pc, #28]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013fe0:	f043 0301 	orr.w	r3, r3, #1
 8013fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013fe6:	4b05      	ldr	r3, [pc, #20]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	4a04      	ldr	r2, [pc, #16]	@ (8013ffc <HAL_RCC_OscConfig+0x76c>)
 8013fec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8013ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013ff2:	f7fc fd13 	bl	8010a1c <HAL_GetTick>
 8013ff6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8013ff8:	e011      	b.n	801401e <HAL_RCC_OscConfig+0x78e>
 8013ffa:	bf00      	nop
 8013ffc:	58024400 	.word	0x58024400
 8014000:	58024800 	.word	0x58024800
 8014004:	fffffc0c 	.word	0xfffffc0c
 8014008:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801400c:	f7fc fd06 	bl	8010a1c <HAL_GetTick>
 8014010:	4602      	mov	r2, r0
 8014012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014014:	1ad3      	subs	r3, r2, r3
 8014016:	2b02      	cmp	r3, #2
 8014018:	d901      	bls.n	801401e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801401a:	2303      	movs	r3, #3
 801401c:	e08a      	b.n	8014134 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801401e:	4b47      	ldr	r3, [pc, #284]	@ (801413c <HAL_RCC_OscConfig+0x8ac>)
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014026:	2b00      	cmp	r3, #0
 8014028:	d0f0      	beq.n	801400c <HAL_RCC_OscConfig+0x77c>
 801402a:	e082      	b.n	8014132 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801402c:	4b43      	ldr	r3, [pc, #268]	@ (801413c <HAL_RCC_OscConfig+0x8ac>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	4a42      	ldr	r2, [pc, #264]	@ (801413c <HAL_RCC_OscConfig+0x8ac>)
 8014032:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8014036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014038:	f7fc fcf0 	bl	8010a1c <HAL_GetTick>
 801403c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801403e:	e008      	b.n	8014052 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014040:	f7fc fcec 	bl	8010a1c <HAL_GetTick>
 8014044:	4602      	mov	r2, r0
 8014046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014048:	1ad3      	subs	r3, r2, r3
 801404a:	2b02      	cmp	r3, #2
 801404c:	d901      	bls.n	8014052 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801404e:	2303      	movs	r3, #3
 8014050:	e070      	b.n	8014134 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014052:	4b3a      	ldr	r3, [pc, #232]	@ (801413c <HAL_RCC_OscConfig+0x8ac>)
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801405a:	2b00      	cmp	r3, #0
 801405c:	d1f0      	bne.n	8014040 <HAL_RCC_OscConfig+0x7b0>
 801405e:	e068      	b.n	8014132 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8014060:	4b36      	ldr	r3, [pc, #216]	@ (801413c <HAL_RCC_OscConfig+0x8ac>)
 8014062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014064:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8014066:	4b35      	ldr	r3, [pc, #212]	@ (801413c <HAL_RCC_OscConfig+0x8ac>)
 8014068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801406a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014070:	2b01      	cmp	r3, #1
 8014072:	d031      	beq.n	80140d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014074:	693b      	ldr	r3, [r7, #16]
 8014076:	f003 0203 	and.w	r2, r3, #3
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801407e:	429a      	cmp	r2, r3
 8014080:	d12a      	bne.n	80140d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8014082:	693b      	ldr	r3, [r7, #16]
 8014084:	091b      	lsrs	r3, r3, #4
 8014086:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801408e:	429a      	cmp	r2, r3
 8014090:	d122      	bne.n	80140d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801409c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801409e:	429a      	cmp	r2, r3
 80140a0:	d11a      	bne.n	80140d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	0a5b      	lsrs	r3, r3, #9
 80140a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80140ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80140b0:	429a      	cmp	r2, r3
 80140b2:	d111      	bne.n	80140d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	0c1b      	lsrs	r3, r3, #16
 80140b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80140c2:	429a      	cmp	r2, r3
 80140c4:	d108      	bne.n	80140d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	0e1b      	lsrs	r3, r3, #24
 80140ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80140d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80140d4:	429a      	cmp	r2, r3
 80140d6:	d001      	beq.n	80140dc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80140d8:	2301      	movs	r3, #1
 80140da:	e02b      	b.n	8014134 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80140dc:	4b17      	ldr	r3, [pc, #92]	@ (801413c <HAL_RCC_OscConfig+0x8ac>)
 80140de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80140e0:	08db      	lsrs	r3, r3, #3
 80140e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80140e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80140ec:	693a      	ldr	r2, [r7, #16]
 80140ee:	429a      	cmp	r2, r3
 80140f0:	d01f      	beq.n	8014132 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80140f2:	4b12      	ldr	r3, [pc, #72]	@ (801413c <HAL_RCC_OscConfig+0x8ac>)
 80140f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140f6:	4a11      	ldr	r2, [pc, #68]	@ (801413c <HAL_RCC_OscConfig+0x8ac>)
 80140f8:	f023 0301 	bic.w	r3, r3, #1
 80140fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80140fe:	f7fc fc8d 	bl	8010a1c <HAL_GetTick>
 8014102:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8014104:	bf00      	nop
 8014106:	f7fc fc89 	bl	8010a1c <HAL_GetTick>
 801410a:	4602      	mov	r2, r0
 801410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801410e:	4293      	cmp	r3, r2
 8014110:	d0f9      	beq.n	8014106 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8014112:	4b0a      	ldr	r3, [pc, #40]	@ (801413c <HAL_RCC_OscConfig+0x8ac>)
 8014114:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014116:	4b0a      	ldr	r3, [pc, #40]	@ (8014140 <HAL_RCC_OscConfig+0x8b0>)
 8014118:	4013      	ands	r3, r2
 801411a:	687a      	ldr	r2, [r7, #4]
 801411c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801411e:	00d2      	lsls	r2, r2, #3
 8014120:	4906      	ldr	r1, [pc, #24]	@ (801413c <HAL_RCC_OscConfig+0x8ac>)
 8014122:	4313      	orrs	r3, r2
 8014124:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8014126:	4b05      	ldr	r3, [pc, #20]	@ (801413c <HAL_RCC_OscConfig+0x8ac>)
 8014128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801412a:	4a04      	ldr	r2, [pc, #16]	@ (801413c <HAL_RCC_OscConfig+0x8ac>)
 801412c:	f043 0301 	orr.w	r3, r3, #1
 8014130:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8014132:	2300      	movs	r3, #0
}
 8014134:	4618      	mov	r0, r3
 8014136:	3730      	adds	r7, #48	@ 0x30
 8014138:	46bd      	mov	sp, r7
 801413a:	bd80      	pop	{r7, pc}
 801413c:	58024400 	.word	0x58024400
 8014140:	ffff0007 	.word	0xffff0007

08014144 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014144:	b580      	push	{r7, lr}
 8014146:	b086      	sub	sp, #24
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
 801414c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d101      	bne.n	8014158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014154:	2301      	movs	r3, #1
 8014156:	e19c      	b.n	8014492 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8014158:	4b8a      	ldr	r3, [pc, #552]	@ (8014384 <HAL_RCC_ClockConfig+0x240>)
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	f003 030f 	and.w	r3, r3, #15
 8014160:	683a      	ldr	r2, [r7, #0]
 8014162:	429a      	cmp	r2, r3
 8014164:	d910      	bls.n	8014188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014166:	4b87      	ldr	r3, [pc, #540]	@ (8014384 <HAL_RCC_ClockConfig+0x240>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	f023 020f 	bic.w	r2, r3, #15
 801416e:	4985      	ldr	r1, [pc, #532]	@ (8014384 <HAL_RCC_ClockConfig+0x240>)
 8014170:	683b      	ldr	r3, [r7, #0]
 8014172:	4313      	orrs	r3, r2
 8014174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014176:	4b83      	ldr	r3, [pc, #524]	@ (8014384 <HAL_RCC_ClockConfig+0x240>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	f003 030f 	and.w	r3, r3, #15
 801417e:	683a      	ldr	r2, [r7, #0]
 8014180:	429a      	cmp	r2, r3
 8014182:	d001      	beq.n	8014188 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8014184:	2301      	movs	r3, #1
 8014186:	e184      	b.n	8014492 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	f003 0304 	and.w	r3, r3, #4
 8014190:	2b00      	cmp	r3, #0
 8014192:	d010      	beq.n	80141b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	691a      	ldr	r2, [r3, #16]
 8014198:	4b7b      	ldr	r3, [pc, #492]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 801419a:	699b      	ldr	r3, [r3, #24]
 801419c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80141a0:	429a      	cmp	r2, r3
 80141a2:	d908      	bls.n	80141b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80141a4:	4b78      	ldr	r3, [pc, #480]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 80141a6:	699b      	ldr	r3, [r3, #24]
 80141a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	691b      	ldr	r3, [r3, #16]
 80141b0:	4975      	ldr	r1, [pc, #468]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 80141b2:	4313      	orrs	r3, r2
 80141b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	f003 0308 	and.w	r3, r3, #8
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d010      	beq.n	80141e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	695a      	ldr	r2, [r3, #20]
 80141c6:	4b70      	ldr	r3, [pc, #448]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 80141c8:	69db      	ldr	r3, [r3, #28]
 80141ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80141ce:	429a      	cmp	r2, r3
 80141d0:	d908      	bls.n	80141e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80141d2:	4b6d      	ldr	r3, [pc, #436]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 80141d4:	69db      	ldr	r3, [r3, #28]
 80141d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	695b      	ldr	r3, [r3, #20]
 80141de:	496a      	ldr	r1, [pc, #424]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 80141e0:	4313      	orrs	r3, r2
 80141e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	f003 0310 	and.w	r3, r3, #16
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d010      	beq.n	8014212 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	699a      	ldr	r2, [r3, #24]
 80141f4:	4b64      	ldr	r3, [pc, #400]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 80141f6:	69db      	ldr	r3, [r3, #28]
 80141f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80141fc:	429a      	cmp	r2, r3
 80141fe:	d908      	bls.n	8014212 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8014200:	4b61      	ldr	r3, [pc, #388]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 8014202:	69db      	ldr	r3, [r3, #28]
 8014204:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	699b      	ldr	r3, [r3, #24]
 801420c:	495e      	ldr	r1, [pc, #376]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 801420e:	4313      	orrs	r3, r2
 8014210:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	f003 0320 	and.w	r3, r3, #32
 801421a:	2b00      	cmp	r3, #0
 801421c:	d010      	beq.n	8014240 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	69da      	ldr	r2, [r3, #28]
 8014222:	4b59      	ldr	r3, [pc, #356]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 8014224:	6a1b      	ldr	r3, [r3, #32]
 8014226:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801422a:	429a      	cmp	r2, r3
 801422c:	d908      	bls.n	8014240 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801422e:	4b56      	ldr	r3, [pc, #344]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 8014230:	6a1b      	ldr	r3, [r3, #32]
 8014232:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	69db      	ldr	r3, [r3, #28]
 801423a:	4953      	ldr	r1, [pc, #332]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 801423c:	4313      	orrs	r3, r2
 801423e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	f003 0302 	and.w	r3, r3, #2
 8014248:	2b00      	cmp	r3, #0
 801424a:	d010      	beq.n	801426e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	68da      	ldr	r2, [r3, #12]
 8014250:	4b4d      	ldr	r3, [pc, #308]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 8014252:	699b      	ldr	r3, [r3, #24]
 8014254:	f003 030f 	and.w	r3, r3, #15
 8014258:	429a      	cmp	r2, r3
 801425a:	d908      	bls.n	801426e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801425c:	4b4a      	ldr	r3, [pc, #296]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 801425e:	699b      	ldr	r3, [r3, #24]
 8014260:	f023 020f 	bic.w	r2, r3, #15
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	68db      	ldr	r3, [r3, #12]
 8014268:	4947      	ldr	r1, [pc, #284]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 801426a:	4313      	orrs	r3, r2
 801426c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	f003 0301 	and.w	r3, r3, #1
 8014276:	2b00      	cmp	r3, #0
 8014278:	d055      	beq.n	8014326 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801427a:	4b43      	ldr	r3, [pc, #268]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 801427c:	699b      	ldr	r3, [r3, #24]
 801427e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	689b      	ldr	r3, [r3, #8]
 8014286:	4940      	ldr	r1, [pc, #256]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 8014288:	4313      	orrs	r3, r2
 801428a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	685b      	ldr	r3, [r3, #4]
 8014290:	2b02      	cmp	r3, #2
 8014292:	d107      	bne.n	80142a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014294:	4b3c      	ldr	r3, [pc, #240]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801429c:	2b00      	cmp	r3, #0
 801429e:	d121      	bne.n	80142e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80142a0:	2301      	movs	r3, #1
 80142a2:	e0f6      	b.n	8014492 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	685b      	ldr	r3, [r3, #4]
 80142a8:	2b03      	cmp	r3, #3
 80142aa:	d107      	bne.n	80142bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80142ac:	4b36      	ldr	r3, [pc, #216]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d115      	bne.n	80142e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80142b8:	2301      	movs	r3, #1
 80142ba:	e0ea      	b.n	8014492 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	685b      	ldr	r3, [r3, #4]
 80142c0:	2b01      	cmp	r3, #1
 80142c2:	d107      	bne.n	80142d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80142c4:	4b30      	ldr	r3, [pc, #192]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d109      	bne.n	80142e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80142d0:	2301      	movs	r3, #1
 80142d2:	e0de      	b.n	8014492 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80142d4:	4b2c      	ldr	r3, [pc, #176]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	f003 0304 	and.w	r3, r3, #4
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d101      	bne.n	80142e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80142e0:	2301      	movs	r3, #1
 80142e2:	e0d6      	b.n	8014492 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80142e4:	4b28      	ldr	r3, [pc, #160]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 80142e6:	691b      	ldr	r3, [r3, #16]
 80142e8:	f023 0207 	bic.w	r2, r3, #7
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	685b      	ldr	r3, [r3, #4]
 80142f0:	4925      	ldr	r1, [pc, #148]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 80142f2:	4313      	orrs	r3, r2
 80142f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80142f6:	f7fc fb91 	bl	8010a1c <HAL_GetTick>
 80142fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80142fc:	e00a      	b.n	8014314 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80142fe:	f7fc fb8d 	bl	8010a1c <HAL_GetTick>
 8014302:	4602      	mov	r2, r0
 8014304:	697b      	ldr	r3, [r7, #20]
 8014306:	1ad3      	subs	r3, r2, r3
 8014308:	f241 3288 	movw	r2, #5000	@ 0x1388
 801430c:	4293      	cmp	r3, r2
 801430e:	d901      	bls.n	8014314 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8014310:	2303      	movs	r3, #3
 8014312:	e0be      	b.n	8014492 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014314:	4b1c      	ldr	r3, [pc, #112]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 8014316:	691b      	ldr	r3, [r3, #16]
 8014318:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	685b      	ldr	r3, [r3, #4]
 8014320:	00db      	lsls	r3, r3, #3
 8014322:	429a      	cmp	r2, r3
 8014324:	d1eb      	bne.n	80142fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	f003 0302 	and.w	r3, r3, #2
 801432e:	2b00      	cmp	r3, #0
 8014330:	d010      	beq.n	8014354 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	68da      	ldr	r2, [r3, #12]
 8014336:	4b14      	ldr	r3, [pc, #80]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 8014338:	699b      	ldr	r3, [r3, #24]
 801433a:	f003 030f 	and.w	r3, r3, #15
 801433e:	429a      	cmp	r2, r3
 8014340:	d208      	bcs.n	8014354 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014342:	4b11      	ldr	r3, [pc, #68]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 8014344:	699b      	ldr	r3, [r3, #24]
 8014346:	f023 020f 	bic.w	r2, r3, #15
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	68db      	ldr	r3, [r3, #12]
 801434e:	490e      	ldr	r1, [pc, #56]	@ (8014388 <HAL_RCC_ClockConfig+0x244>)
 8014350:	4313      	orrs	r3, r2
 8014352:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8014354:	4b0b      	ldr	r3, [pc, #44]	@ (8014384 <HAL_RCC_ClockConfig+0x240>)
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	f003 030f 	and.w	r3, r3, #15
 801435c:	683a      	ldr	r2, [r7, #0]
 801435e:	429a      	cmp	r2, r3
 8014360:	d214      	bcs.n	801438c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014362:	4b08      	ldr	r3, [pc, #32]	@ (8014384 <HAL_RCC_ClockConfig+0x240>)
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	f023 020f 	bic.w	r2, r3, #15
 801436a:	4906      	ldr	r1, [pc, #24]	@ (8014384 <HAL_RCC_ClockConfig+0x240>)
 801436c:	683b      	ldr	r3, [r7, #0]
 801436e:	4313      	orrs	r3, r2
 8014370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014372:	4b04      	ldr	r3, [pc, #16]	@ (8014384 <HAL_RCC_ClockConfig+0x240>)
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	f003 030f 	and.w	r3, r3, #15
 801437a:	683a      	ldr	r2, [r7, #0]
 801437c:	429a      	cmp	r2, r3
 801437e:	d005      	beq.n	801438c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8014380:	2301      	movs	r3, #1
 8014382:	e086      	b.n	8014492 <HAL_RCC_ClockConfig+0x34e>
 8014384:	52002000 	.word	0x52002000
 8014388:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	f003 0304 	and.w	r3, r3, #4
 8014394:	2b00      	cmp	r3, #0
 8014396:	d010      	beq.n	80143ba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	691a      	ldr	r2, [r3, #16]
 801439c:	4b3f      	ldr	r3, [pc, #252]	@ (801449c <HAL_RCC_ClockConfig+0x358>)
 801439e:	699b      	ldr	r3, [r3, #24]
 80143a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80143a4:	429a      	cmp	r2, r3
 80143a6:	d208      	bcs.n	80143ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80143a8:	4b3c      	ldr	r3, [pc, #240]	@ (801449c <HAL_RCC_ClockConfig+0x358>)
 80143aa:	699b      	ldr	r3, [r3, #24]
 80143ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	691b      	ldr	r3, [r3, #16]
 80143b4:	4939      	ldr	r1, [pc, #228]	@ (801449c <HAL_RCC_ClockConfig+0x358>)
 80143b6:	4313      	orrs	r3, r2
 80143b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	f003 0308 	and.w	r3, r3, #8
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d010      	beq.n	80143e8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	695a      	ldr	r2, [r3, #20]
 80143ca:	4b34      	ldr	r3, [pc, #208]	@ (801449c <HAL_RCC_ClockConfig+0x358>)
 80143cc:	69db      	ldr	r3, [r3, #28]
 80143ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80143d2:	429a      	cmp	r2, r3
 80143d4:	d208      	bcs.n	80143e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80143d6:	4b31      	ldr	r3, [pc, #196]	@ (801449c <HAL_RCC_ClockConfig+0x358>)
 80143d8:	69db      	ldr	r3, [r3, #28]
 80143da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	695b      	ldr	r3, [r3, #20]
 80143e2:	492e      	ldr	r1, [pc, #184]	@ (801449c <HAL_RCC_ClockConfig+0x358>)
 80143e4:	4313      	orrs	r3, r2
 80143e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	f003 0310 	and.w	r3, r3, #16
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d010      	beq.n	8014416 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	699a      	ldr	r2, [r3, #24]
 80143f8:	4b28      	ldr	r3, [pc, #160]	@ (801449c <HAL_RCC_ClockConfig+0x358>)
 80143fa:	69db      	ldr	r3, [r3, #28]
 80143fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014400:	429a      	cmp	r2, r3
 8014402:	d208      	bcs.n	8014416 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8014404:	4b25      	ldr	r3, [pc, #148]	@ (801449c <HAL_RCC_ClockConfig+0x358>)
 8014406:	69db      	ldr	r3, [r3, #28]
 8014408:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	699b      	ldr	r3, [r3, #24]
 8014410:	4922      	ldr	r1, [pc, #136]	@ (801449c <HAL_RCC_ClockConfig+0x358>)
 8014412:	4313      	orrs	r3, r2
 8014414:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	f003 0320 	and.w	r3, r3, #32
 801441e:	2b00      	cmp	r3, #0
 8014420:	d010      	beq.n	8014444 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	69da      	ldr	r2, [r3, #28]
 8014426:	4b1d      	ldr	r3, [pc, #116]	@ (801449c <HAL_RCC_ClockConfig+0x358>)
 8014428:	6a1b      	ldr	r3, [r3, #32]
 801442a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801442e:	429a      	cmp	r2, r3
 8014430:	d208      	bcs.n	8014444 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8014432:	4b1a      	ldr	r3, [pc, #104]	@ (801449c <HAL_RCC_ClockConfig+0x358>)
 8014434:	6a1b      	ldr	r3, [r3, #32]
 8014436:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	69db      	ldr	r3, [r3, #28]
 801443e:	4917      	ldr	r1, [pc, #92]	@ (801449c <HAL_RCC_ClockConfig+0x358>)
 8014440:	4313      	orrs	r3, r2
 8014442:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8014444:	f000 f834 	bl	80144b0 <HAL_RCC_GetSysClockFreq>
 8014448:	4602      	mov	r2, r0
 801444a:	4b14      	ldr	r3, [pc, #80]	@ (801449c <HAL_RCC_ClockConfig+0x358>)
 801444c:	699b      	ldr	r3, [r3, #24]
 801444e:	0a1b      	lsrs	r3, r3, #8
 8014450:	f003 030f 	and.w	r3, r3, #15
 8014454:	4912      	ldr	r1, [pc, #72]	@ (80144a0 <HAL_RCC_ClockConfig+0x35c>)
 8014456:	5ccb      	ldrb	r3, [r1, r3]
 8014458:	f003 031f 	and.w	r3, r3, #31
 801445c:	fa22 f303 	lsr.w	r3, r2, r3
 8014460:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8014462:	4b0e      	ldr	r3, [pc, #56]	@ (801449c <HAL_RCC_ClockConfig+0x358>)
 8014464:	699b      	ldr	r3, [r3, #24]
 8014466:	f003 030f 	and.w	r3, r3, #15
 801446a:	4a0d      	ldr	r2, [pc, #52]	@ (80144a0 <HAL_RCC_ClockConfig+0x35c>)
 801446c:	5cd3      	ldrb	r3, [r2, r3]
 801446e:	f003 031f 	and.w	r3, r3, #31
 8014472:	693a      	ldr	r2, [r7, #16]
 8014474:	fa22 f303 	lsr.w	r3, r2, r3
 8014478:	4a0a      	ldr	r2, [pc, #40]	@ (80144a4 <HAL_RCC_ClockConfig+0x360>)
 801447a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801447c:	4a0a      	ldr	r2, [pc, #40]	@ (80144a8 <HAL_RCC_ClockConfig+0x364>)
 801447e:	693b      	ldr	r3, [r7, #16]
 8014480:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8014482:	4b0a      	ldr	r3, [pc, #40]	@ (80144ac <HAL_RCC_ClockConfig+0x368>)
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	4618      	mov	r0, r3
 8014488:	f7fc fa7e 	bl	8010988 <HAL_InitTick>
 801448c:	4603      	mov	r3, r0
 801448e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8014490:	7bfb      	ldrb	r3, [r7, #15]
}
 8014492:	4618      	mov	r0, r3
 8014494:	3718      	adds	r7, #24
 8014496:	46bd      	mov	sp, r7
 8014498:	bd80      	pop	{r7, pc}
 801449a:	bf00      	nop
 801449c:	58024400 	.word	0x58024400
 80144a0:	0801f604 	.word	0x0801f604
 80144a4:	24000020 	.word	0x24000020
 80144a8:	2400001c 	.word	0x2400001c
 80144ac:	24000024 	.word	0x24000024

080144b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80144b0:	b480      	push	{r7}
 80144b2:	b089      	sub	sp, #36	@ 0x24
 80144b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80144b6:	4bb3      	ldr	r3, [pc, #716]	@ (8014784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80144b8:	691b      	ldr	r3, [r3, #16]
 80144ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80144be:	2b18      	cmp	r3, #24
 80144c0:	f200 8155 	bhi.w	801476e <HAL_RCC_GetSysClockFreq+0x2be>
 80144c4:	a201      	add	r2, pc, #4	@ (adr r2, 80144cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80144c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144ca:	bf00      	nop
 80144cc:	08014531 	.word	0x08014531
 80144d0:	0801476f 	.word	0x0801476f
 80144d4:	0801476f 	.word	0x0801476f
 80144d8:	0801476f 	.word	0x0801476f
 80144dc:	0801476f 	.word	0x0801476f
 80144e0:	0801476f 	.word	0x0801476f
 80144e4:	0801476f 	.word	0x0801476f
 80144e8:	0801476f 	.word	0x0801476f
 80144ec:	08014557 	.word	0x08014557
 80144f0:	0801476f 	.word	0x0801476f
 80144f4:	0801476f 	.word	0x0801476f
 80144f8:	0801476f 	.word	0x0801476f
 80144fc:	0801476f 	.word	0x0801476f
 8014500:	0801476f 	.word	0x0801476f
 8014504:	0801476f 	.word	0x0801476f
 8014508:	0801476f 	.word	0x0801476f
 801450c:	0801455d 	.word	0x0801455d
 8014510:	0801476f 	.word	0x0801476f
 8014514:	0801476f 	.word	0x0801476f
 8014518:	0801476f 	.word	0x0801476f
 801451c:	0801476f 	.word	0x0801476f
 8014520:	0801476f 	.word	0x0801476f
 8014524:	0801476f 	.word	0x0801476f
 8014528:	0801476f 	.word	0x0801476f
 801452c:	08014563 	.word	0x08014563
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014530:	4b94      	ldr	r3, [pc, #592]	@ (8014784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	f003 0320 	and.w	r3, r3, #32
 8014538:	2b00      	cmp	r3, #0
 801453a:	d009      	beq.n	8014550 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801453c:	4b91      	ldr	r3, [pc, #580]	@ (8014784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	08db      	lsrs	r3, r3, #3
 8014542:	f003 0303 	and.w	r3, r3, #3
 8014546:	4a90      	ldr	r2, [pc, #576]	@ (8014788 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8014548:	fa22 f303 	lsr.w	r3, r2, r3
 801454c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801454e:	e111      	b.n	8014774 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8014550:	4b8d      	ldr	r3, [pc, #564]	@ (8014788 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8014552:	61bb      	str	r3, [r7, #24]
      break;
 8014554:	e10e      	b.n	8014774 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8014556:	4b8d      	ldr	r3, [pc, #564]	@ (801478c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8014558:	61bb      	str	r3, [r7, #24]
      break;
 801455a:	e10b      	b.n	8014774 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801455c:	4b8c      	ldr	r3, [pc, #560]	@ (8014790 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801455e:	61bb      	str	r3, [r7, #24]
      break;
 8014560:	e108      	b.n	8014774 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014562:	4b88      	ldr	r3, [pc, #544]	@ (8014784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014566:	f003 0303 	and.w	r3, r3, #3
 801456a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801456c:	4b85      	ldr	r3, [pc, #532]	@ (8014784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801456e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014570:	091b      	lsrs	r3, r3, #4
 8014572:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014576:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8014578:	4b82      	ldr	r3, [pc, #520]	@ (8014784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801457a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801457c:	f003 0301 	and.w	r3, r3, #1
 8014580:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8014582:	4b80      	ldr	r3, [pc, #512]	@ (8014784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014586:	08db      	lsrs	r3, r3, #3
 8014588:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801458c:	68fa      	ldr	r2, [r7, #12]
 801458e:	fb02 f303 	mul.w	r3, r2, r3
 8014592:	ee07 3a90 	vmov	s15, r3
 8014596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801459a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801459e:	693b      	ldr	r3, [r7, #16]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	f000 80e1 	beq.w	8014768 <HAL_RCC_GetSysClockFreq+0x2b8>
 80145a6:	697b      	ldr	r3, [r7, #20]
 80145a8:	2b02      	cmp	r3, #2
 80145aa:	f000 8083 	beq.w	80146b4 <HAL_RCC_GetSysClockFreq+0x204>
 80145ae:	697b      	ldr	r3, [r7, #20]
 80145b0:	2b02      	cmp	r3, #2
 80145b2:	f200 80a1 	bhi.w	80146f8 <HAL_RCC_GetSysClockFreq+0x248>
 80145b6:	697b      	ldr	r3, [r7, #20]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d003      	beq.n	80145c4 <HAL_RCC_GetSysClockFreq+0x114>
 80145bc:	697b      	ldr	r3, [r7, #20]
 80145be:	2b01      	cmp	r3, #1
 80145c0:	d056      	beq.n	8014670 <HAL_RCC_GetSysClockFreq+0x1c0>
 80145c2:	e099      	b.n	80146f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80145c4:	4b6f      	ldr	r3, [pc, #444]	@ (8014784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	f003 0320 	and.w	r3, r3, #32
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d02d      	beq.n	801462c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80145d0:	4b6c      	ldr	r3, [pc, #432]	@ (8014784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	08db      	lsrs	r3, r3, #3
 80145d6:	f003 0303 	and.w	r3, r3, #3
 80145da:	4a6b      	ldr	r2, [pc, #428]	@ (8014788 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80145dc:	fa22 f303 	lsr.w	r3, r2, r3
 80145e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	ee07 3a90 	vmov	s15, r3
 80145e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80145ec:	693b      	ldr	r3, [r7, #16]
 80145ee:	ee07 3a90 	vmov	s15, r3
 80145f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80145f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80145fa:	4b62      	ldr	r3, [pc, #392]	@ (8014784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80145fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80145fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014602:	ee07 3a90 	vmov	s15, r3
 8014606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801460a:	ed97 6a02 	vldr	s12, [r7, #8]
 801460e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8014794 <HAL_RCC_GetSysClockFreq+0x2e4>
 8014612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801461a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801461e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014626:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801462a:	e087      	b.n	801473c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801462c:	693b      	ldr	r3, [r7, #16]
 801462e:	ee07 3a90 	vmov	s15, r3
 8014632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014636:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8014798 <HAL_RCC_GetSysClockFreq+0x2e8>
 801463a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801463e:	4b51      	ldr	r3, [pc, #324]	@ (8014784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014646:	ee07 3a90 	vmov	s15, r3
 801464a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801464e:	ed97 6a02 	vldr	s12, [r7, #8]
 8014652:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8014794 <HAL_RCC_GetSysClockFreq+0x2e4>
 8014656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801465a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801465e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014666:	ee67 7a27 	vmul.f32	s15, s14, s15
 801466a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801466e:	e065      	b.n	801473c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014670:	693b      	ldr	r3, [r7, #16]
 8014672:	ee07 3a90 	vmov	s15, r3
 8014676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801467a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801479c <HAL_RCC_GetSysClockFreq+0x2ec>
 801467e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014682:	4b40      	ldr	r3, [pc, #256]	@ (8014784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801468a:	ee07 3a90 	vmov	s15, r3
 801468e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014692:	ed97 6a02 	vldr	s12, [r7, #8]
 8014696:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8014794 <HAL_RCC_GetSysClockFreq+0x2e4>
 801469a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801469e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80146a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80146a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80146aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80146ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80146b2:	e043      	b.n	801473c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80146b4:	693b      	ldr	r3, [r7, #16]
 80146b6:	ee07 3a90 	vmov	s15, r3
 80146ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80146be:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80147a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80146c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80146c6:	4b2f      	ldr	r3, [pc, #188]	@ (8014784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80146c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80146ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80146ce:	ee07 3a90 	vmov	s15, r3
 80146d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80146d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80146da:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8014794 <HAL_RCC_GetSysClockFreq+0x2e4>
 80146de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80146e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80146e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80146ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80146ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80146f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80146f6:	e021      	b.n	801473c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80146f8:	693b      	ldr	r3, [r7, #16]
 80146fa:	ee07 3a90 	vmov	s15, r3
 80146fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014702:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801479c <HAL_RCC_GetSysClockFreq+0x2ec>
 8014706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801470a:	4b1e      	ldr	r3, [pc, #120]	@ (8014784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801470c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801470e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014712:	ee07 3a90 	vmov	s15, r3
 8014716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801471a:	ed97 6a02 	vldr	s12, [r7, #8]
 801471e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8014794 <HAL_RCC_GetSysClockFreq+0x2e4>
 8014722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801472a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801472e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014736:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801473a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801473c:	4b11      	ldr	r3, [pc, #68]	@ (8014784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801473e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014740:	0a5b      	lsrs	r3, r3, #9
 8014742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014746:	3301      	adds	r3, #1
 8014748:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	ee07 3a90 	vmov	s15, r3
 8014750:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014754:	edd7 6a07 	vldr	s13, [r7, #28]
 8014758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801475c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014760:	ee17 3a90 	vmov	r3, s15
 8014764:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8014766:	e005      	b.n	8014774 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8014768:	2300      	movs	r3, #0
 801476a:	61bb      	str	r3, [r7, #24]
      break;
 801476c:	e002      	b.n	8014774 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801476e:	4b07      	ldr	r3, [pc, #28]	@ (801478c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8014770:	61bb      	str	r3, [r7, #24]
      break;
 8014772:	bf00      	nop
  }

  return sysclockfreq;
 8014774:	69bb      	ldr	r3, [r7, #24]
}
 8014776:	4618      	mov	r0, r3
 8014778:	3724      	adds	r7, #36	@ 0x24
 801477a:	46bd      	mov	sp, r7
 801477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014780:	4770      	bx	lr
 8014782:	bf00      	nop
 8014784:	58024400 	.word	0x58024400
 8014788:	03d09000 	.word	0x03d09000
 801478c:	003d0900 	.word	0x003d0900
 8014790:	017d7840 	.word	0x017d7840
 8014794:	46000000 	.word	0x46000000
 8014798:	4c742400 	.word	0x4c742400
 801479c:	4a742400 	.word	0x4a742400
 80147a0:	4bbebc20 	.word	0x4bbebc20

080147a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b082      	sub	sp, #8
 80147a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80147aa:	f7ff fe81 	bl	80144b0 <HAL_RCC_GetSysClockFreq>
 80147ae:	4602      	mov	r2, r0
 80147b0:	4b10      	ldr	r3, [pc, #64]	@ (80147f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80147b2:	699b      	ldr	r3, [r3, #24]
 80147b4:	0a1b      	lsrs	r3, r3, #8
 80147b6:	f003 030f 	and.w	r3, r3, #15
 80147ba:	490f      	ldr	r1, [pc, #60]	@ (80147f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80147bc:	5ccb      	ldrb	r3, [r1, r3]
 80147be:	f003 031f 	and.w	r3, r3, #31
 80147c2:	fa22 f303 	lsr.w	r3, r2, r3
 80147c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80147c8:	4b0a      	ldr	r3, [pc, #40]	@ (80147f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80147ca:	699b      	ldr	r3, [r3, #24]
 80147cc:	f003 030f 	and.w	r3, r3, #15
 80147d0:	4a09      	ldr	r2, [pc, #36]	@ (80147f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80147d2:	5cd3      	ldrb	r3, [r2, r3]
 80147d4:	f003 031f 	and.w	r3, r3, #31
 80147d8:	687a      	ldr	r2, [r7, #4]
 80147da:	fa22 f303 	lsr.w	r3, r2, r3
 80147de:	4a07      	ldr	r2, [pc, #28]	@ (80147fc <HAL_RCC_GetHCLKFreq+0x58>)
 80147e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80147e2:	4a07      	ldr	r2, [pc, #28]	@ (8014800 <HAL_RCC_GetHCLKFreq+0x5c>)
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80147e8:	4b04      	ldr	r3, [pc, #16]	@ (80147fc <HAL_RCC_GetHCLKFreq+0x58>)
 80147ea:	681b      	ldr	r3, [r3, #0]
}
 80147ec:	4618      	mov	r0, r3
 80147ee:	3708      	adds	r7, #8
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd80      	pop	{r7, pc}
 80147f4:	58024400 	.word	0x58024400
 80147f8:	0801f604 	.word	0x0801f604
 80147fc:	24000020 	.word	0x24000020
 8014800:	2400001c 	.word	0x2400001c

08014804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014804:	b580      	push	{r7, lr}
 8014806:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8014808:	f7ff ffcc 	bl	80147a4 <HAL_RCC_GetHCLKFreq>
 801480c:	4602      	mov	r2, r0
 801480e:	4b06      	ldr	r3, [pc, #24]	@ (8014828 <HAL_RCC_GetPCLK1Freq+0x24>)
 8014810:	69db      	ldr	r3, [r3, #28]
 8014812:	091b      	lsrs	r3, r3, #4
 8014814:	f003 0307 	and.w	r3, r3, #7
 8014818:	4904      	ldr	r1, [pc, #16]	@ (801482c <HAL_RCC_GetPCLK1Freq+0x28>)
 801481a:	5ccb      	ldrb	r3, [r1, r3]
 801481c:	f003 031f 	and.w	r3, r3, #31
 8014820:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8014824:	4618      	mov	r0, r3
 8014826:	bd80      	pop	{r7, pc}
 8014828:	58024400 	.word	0x58024400
 801482c:	0801f604 	.word	0x0801f604

08014830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8014834:	f7ff ffb6 	bl	80147a4 <HAL_RCC_GetHCLKFreq>
 8014838:	4602      	mov	r2, r0
 801483a:	4b06      	ldr	r3, [pc, #24]	@ (8014854 <HAL_RCC_GetPCLK2Freq+0x24>)
 801483c:	69db      	ldr	r3, [r3, #28]
 801483e:	0a1b      	lsrs	r3, r3, #8
 8014840:	f003 0307 	and.w	r3, r3, #7
 8014844:	4904      	ldr	r1, [pc, #16]	@ (8014858 <HAL_RCC_GetPCLK2Freq+0x28>)
 8014846:	5ccb      	ldrb	r3, [r1, r3]
 8014848:	f003 031f 	and.w	r3, r3, #31
 801484c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8014850:	4618      	mov	r0, r3
 8014852:	bd80      	pop	{r7, pc}
 8014854:	58024400 	.word	0x58024400
 8014858:	0801f604 	.word	0x0801f604

0801485c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801485c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014860:	b0ca      	sub	sp, #296	@ 0x128
 8014862:	af00      	add	r7, sp, #0
 8014864:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8014868:	2300      	movs	r3, #0
 801486a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801486e:	2300      	movs	r3, #0
 8014870:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8014874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801487c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8014880:	2500      	movs	r5, #0
 8014882:	ea54 0305 	orrs.w	r3, r4, r5
 8014886:	d049      	beq.n	801491c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8014888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801488c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801488e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8014892:	d02f      	beq.n	80148f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8014894:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8014898:	d828      	bhi.n	80148ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 801489a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801489e:	d01a      	beq.n	80148d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80148a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80148a4:	d822      	bhi.n	80148ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d003      	beq.n	80148b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80148aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80148ae:	d007      	beq.n	80148c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80148b0:	e01c      	b.n	80148ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80148b2:	4bb8      	ldr	r3, [pc, #736]	@ (8014b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80148b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148b6:	4ab7      	ldr	r2, [pc, #732]	@ (8014b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80148b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80148bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80148be:	e01a      	b.n	80148f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80148c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80148c4:	3308      	adds	r3, #8
 80148c6:	2102      	movs	r1, #2
 80148c8:	4618      	mov	r0, r3
 80148ca:	f002 fb61 	bl	8016f90 <RCCEx_PLL2_Config>
 80148ce:	4603      	mov	r3, r0
 80148d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80148d4:	e00f      	b.n	80148f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80148d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80148da:	3328      	adds	r3, #40	@ 0x28
 80148dc:	2102      	movs	r1, #2
 80148de:	4618      	mov	r0, r3
 80148e0:	f002 fc08 	bl	80170f4 <RCCEx_PLL3_Config>
 80148e4:	4603      	mov	r3, r0
 80148e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80148ea:	e004      	b.n	80148f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80148ec:	2301      	movs	r3, #1
 80148ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80148f2:	e000      	b.n	80148f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80148f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80148f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d10a      	bne.n	8014914 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80148fe:	4ba5      	ldr	r3, [pc, #660]	@ (8014b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8014900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014902:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8014906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801490a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801490c:	4aa1      	ldr	r2, [pc, #644]	@ (8014b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801490e:	430b      	orrs	r3, r1
 8014910:	6513      	str	r3, [r2, #80]	@ 0x50
 8014912:	e003      	b.n	801491c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014914:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014918:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801491c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014924:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8014928:	f04f 0900 	mov.w	r9, #0
 801492c:	ea58 0309 	orrs.w	r3, r8, r9
 8014930:	d047      	beq.n	80149c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8014932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014938:	2b04      	cmp	r3, #4
 801493a:	d82a      	bhi.n	8014992 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801493c:	a201      	add	r2, pc, #4	@ (adr r2, 8014944 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801493e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014942:	bf00      	nop
 8014944:	08014959 	.word	0x08014959
 8014948:	08014967 	.word	0x08014967
 801494c:	0801497d 	.word	0x0801497d
 8014950:	0801499b 	.word	0x0801499b
 8014954:	0801499b 	.word	0x0801499b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014958:	4b8e      	ldr	r3, [pc, #568]	@ (8014b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801495a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801495c:	4a8d      	ldr	r2, [pc, #564]	@ (8014b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801495e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014962:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8014964:	e01a      	b.n	801499c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801496a:	3308      	adds	r3, #8
 801496c:	2100      	movs	r1, #0
 801496e:	4618      	mov	r0, r3
 8014970:	f002 fb0e 	bl	8016f90 <RCCEx_PLL2_Config>
 8014974:	4603      	mov	r3, r0
 8014976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801497a:	e00f      	b.n	801499c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801497c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014980:	3328      	adds	r3, #40	@ 0x28
 8014982:	2100      	movs	r1, #0
 8014984:	4618      	mov	r0, r3
 8014986:	f002 fbb5 	bl	80170f4 <RCCEx_PLL3_Config>
 801498a:	4603      	mov	r3, r0
 801498c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8014990:	e004      	b.n	801499c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014992:	2301      	movs	r3, #1
 8014994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014998:	e000      	b.n	801499c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801499a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801499c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d10a      	bne.n	80149ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80149a4:	4b7b      	ldr	r3, [pc, #492]	@ (8014b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80149a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80149a8:	f023 0107 	bic.w	r1, r3, #7
 80149ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80149b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80149b2:	4a78      	ldr	r2, [pc, #480]	@ (8014b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80149b4:	430b      	orrs	r3, r1
 80149b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80149b8:	e003      	b.n	80149c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80149ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80149be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80149c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80149c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80149ce:	f04f 0b00 	mov.w	fp, #0
 80149d2:	ea5a 030b 	orrs.w	r3, sl, fp
 80149d6:	d04c      	beq.n	8014a72 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80149d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80149dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80149de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80149e2:	d030      	beq.n	8014a46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80149e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80149e8:	d829      	bhi.n	8014a3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80149ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80149ec:	d02d      	beq.n	8014a4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80149ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80149f0:	d825      	bhi.n	8014a3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80149f2:	2b80      	cmp	r3, #128	@ 0x80
 80149f4:	d018      	beq.n	8014a28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80149f6:	2b80      	cmp	r3, #128	@ 0x80
 80149f8:	d821      	bhi.n	8014a3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d002      	beq.n	8014a04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80149fe:	2b40      	cmp	r3, #64	@ 0x40
 8014a00:	d007      	beq.n	8014a12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8014a02:	e01c      	b.n	8014a3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014a04:	4b63      	ldr	r3, [pc, #396]	@ (8014b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8014a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a08:	4a62      	ldr	r2, [pc, #392]	@ (8014b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8014a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8014a10:	e01c      	b.n	8014a4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014a16:	3308      	adds	r3, #8
 8014a18:	2100      	movs	r1, #0
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	f002 fab8 	bl	8016f90 <RCCEx_PLL2_Config>
 8014a20:	4603      	mov	r3, r0
 8014a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8014a26:	e011      	b.n	8014a4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8014a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014a2c:	3328      	adds	r3, #40	@ 0x28
 8014a2e:	2100      	movs	r1, #0
 8014a30:	4618      	mov	r0, r3
 8014a32:	f002 fb5f 	bl	80170f4 <RCCEx_PLL3_Config>
 8014a36:	4603      	mov	r3, r0
 8014a38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8014a3c:	e006      	b.n	8014a4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014a3e:	2301      	movs	r3, #1
 8014a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014a44:	e002      	b.n	8014a4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8014a46:	bf00      	nop
 8014a48:	e000      	b.n	8014a4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8014a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d10a      	bne.n	8014a6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8014a54:	4b4f      	ldr	r3, [pc, #316]	@ (8014b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8014a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014a58:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8014a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014a62:	4a4c      	ldr	r2, [pc, #304]	@ (8014b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8014a64:	430b      	orrs	r3, r1
 8014a66:	6513      	str	r3, [r2, #80]	@ 0x50
 8014a68:	e003      	b.n	8014a72 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014a6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8014a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a7a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8014a7e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8014a82:	2300      	movs	r3, #0
 8014a84:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8014a88:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8014a8c:	460b      	mov	r3, r1
 8014a8e:	4313      	orrs	r3, r2
 8014a90:	d053      	beq.n	8014b3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8014a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014a96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014a9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8014a9e:	d035      	beq.n	8014b0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8014aa0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8014aa4:	d82e      	bhi.n	8014b04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8014aa6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8014aaa:	d031      	beq.n	8014b10 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8014aac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8014ab0:	d828      	bhi.n	8014b04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8014ab2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014ab6:	d01a      	beq.n	8014aee <HAL_RCCEx_PeriphCLKConfig+0x292>
 8014ab8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014abc:	d822      	bhi.n	8014b04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d003      	beq.n	8014aca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8014ac2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014ac6:	d007      	beq.n	8014ad8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8014ac8:	e01c      	b.n	8014b04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014aca:	4b32      	ldr	r3, [pc, #200]	@ (8014b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8014acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ace:	4a31      	ldr	r2, [pc, #196]	@ (8014b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8014ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014ad4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8014ad6:	e01c      	b.n	8014b12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014adc:	3308      	adds	r3, #8
 8014ade:	2100      	movs	r1, #0
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	f002 fa55 	bl	8016f90 <RCCEx_PLL2_Config>
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8014aec:	e011      	b.n	8014b12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8014aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014af2:	3328      	adds	r3, #40	@ 0x28
 8014af4:	2100      	movs	r1, #0
 8014af6:	4618      	mov	r0, r3
 8014af8:	f002 fafc 	bl	80170f4 <RCCEx_PLL3_Config>
 8014afc:	4603      	mov	r3, r0
 8014afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8014b02:	e006      	b.n	8014b12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8014b04:	2301      	movs	r3, #1
 8014b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014b0a:	e002      	b.n	8014b12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8014b0c:	bf00      	nop
 8014b0e:	e000      	b.n	8014b12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8014b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d10b      	bne.n	8014b32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8014b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8014b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8014b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014b1e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8014b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014b26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8014b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8014b2c:	430b      	orrs	r3, r1
 8014b2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8014b30:	e003      	b.n	8014b3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014b36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8014b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b42:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8014b46:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8014b50:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8014b54:	460b      	mov	r3, r1
 8014b56:	4313      	orrs	r3, r2
 8014b58:	d056      	beq.n	8014c08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8014b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014b5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8014b62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014b66:	d038      	beq.n	8014bda <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8014b68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014b6c:	d831      	bhi.n	8014bd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8014b6e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8014b72:	d034      	beq.n	8014bde <HAL_RCCEx_PeriphCLKConfig+0x382>
 8014b74:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8014b78:	d82b      	bhi.n	8014bd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8014b7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014b7e:	d01d      	beq.n	8014bbc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8014b80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014b84:	d825      	bhi.n	8014bd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d006      	beq.n	8014b98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8014b8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014b8e:	d00a      	beq.n	8014ba6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8014b90:	e01f      	b.n	8014bd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8014b92:	bf00      	nop
 8014b94:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014b98:	4ba2      	ldr	r3, [pc, #648]	@ (8014e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b9c:	4aa1      	ldr	r2, [pc, #644]	@ (8014e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014b9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014ba2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8014ba4:	e01c      	b.n	8014be0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014baa:	3308      	adds	r3, #8
 8014bac:	2100      	movs	r1, #0
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f002 f9ee 	bl	8016f90 <RCCEx_PLL2_Config>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8014bba:	e011      	b.n	8014be0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8014bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014bc0:	3328      	adds	r3, #40	@ 0x28
 8014bc2:	2100      	movs	r1, #0
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f002 fa95 	bl	80170f4 <RCCEx_PLL3_Config>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8014bd0:	e006      	b.n	8014be0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8014bd2:	2301      	movs	r3, #1
 8014bd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014bd8:	e002      	b.n	8014be0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8014bda:	bf00      	nop
 8014bdc:	e000      	b.n	8014be0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8014bde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014be0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d10b      	bne.n	8014c00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8014be8:	4b8e      	ldr	r3, [pc, #568]	@ (8014e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014bec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8014bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014bf4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8014bf8:	4a8a      	ldr	r2, [pc, #552]	@ (8014e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014bfa:	430b      	orrs	r3, r1
 8014bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8014bfe:	e003      	b.n	8014c08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014c00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014c04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8014c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c10:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8014c14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8014c18:	2300      	movs	r3, #0
 8014c1a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8014c1e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8014c22:	460b      	mov	r3, r1
 8014c24:	4313      	orrs	r3, r2
 8014c26:	d03a      	beq.n	8014c9e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8014c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014c2e:	2b30      	cmp	r3, #48	@ 0x30
 8014c30:	d01f      	beq.n	8014c72 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8014c32:	2b30      	cmp	r3, #48	@ 0x30
 8014c34:	d819      	bhi.n	8014c6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8014c36:	2b20      	cmp	r3, #32
 8014c38:	d00c      	beq.n	8014c54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8014c3a:	2b20      	cmp	r3, #32
 8014c3c:	d815      	bhi.n	8014c6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d019      	beq.n	8014c76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8014c42:	2b10      	cmp	r3, #16
 8014c44:	d111      	bne.n	8014c6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014c46:	4b77      	ldr	r3, [pc, #476]	@ (8014e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c4a:	4a76      	ldr	r2, [pc, #472]	@ (8014e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014c50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8014c52:	e011      	b.n	8014c78 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8014c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014c58:	3308      	adds	r3, #8
 8014c5a:	2102      	movs	r1, #2
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	f002 f997 	bl	8016f90 <RCCEx_PLL2_Config>
 8014c62:	4603      	mov	r3, r0
 8014c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8014c68:	e006      	b.n	8014c78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014c70:	e002      	b.n	8014c78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8014c72:	bf00      	nop
 8014c74:	e000      	b.n	8014c78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8014c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014c78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d10a      	bne.n	8014c96 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8014c80:	4b68      	ldr	r3, [pc, #416]	@ (8014e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014c84:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8014c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014c8e:	4a65      	ldr	r2, [pc, #404]	@ (8014e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014c90:	430b      	orrs	r3, r1
 8014c92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8014c94:	e003      	b.n	8014c9e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014c96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014c9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8014c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8014caa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8014cae:	2300      	movs	r3, #0
 8014cb0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8014cb4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8014cb8:	460b      	mov	r3, r1
 8014cba:	4313      	orrs	r3, r2
 8014cbc:	d051      	beq.n	8014d62 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8014cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014cc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014cc8:	d035      	beq.n	8014d36 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8014cca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014cce:	d82e      	bhi.n	8014d2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8014cd0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8014cd4:	d031      	beq.n	8014d3a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8014cd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8014cda:	d828      	bhi.n	8014d2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8014cdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014ce0:	d01a      	beq.n	8014d18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8014ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014ce6:	d822      	bhi.n	8014d2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d003      	beq.n	8014cf4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8014cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014cf0:	d007      	beq.n	8014d02 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8014cf2:	e01c      	b.n	8014d2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014cf4:	4b4b      	ldr	r3, [pc, #300]	@ (8014e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cf8:	4a4a      	ldr	r2, [pc, #296]	@ (8014e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014cfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8014d00:	e01c      	b.n	8014d3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014d06:	3308      	adds	r3, #8
 8014d08:	2100      	movs	r1, #0
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f002 f940 	bl	8016f90 <RCCEx_PLL2_Config>
 8014d10:	4603      	mov	r3, r0
 8014d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8014d16:	e011      	b.n	8014d3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8014d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014d1c:	3328      	adds	r3, #40	@ 0x28
 8014d1e:	2100      	movs	r1, #0
 8014d20:	4618      	mov	r0, r3
 8014d22:	f002 f9e7 	bl	80170f4 <RCCEx_PLL3_Config>
 8014d26:	4603      	mov	r3, r0
 8014d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8014d2c:	e006      	b.n	8014d3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014d2e:	2301      	movs	r3, #1
 8014d30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014d34:	e002      	b.n	8014d3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8014d36:	bf00      	nop
 8014d38:	e000      	b.n	8014d3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8014d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d10a      	bne.n	8014d5a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8014d44:	4b37      	ldr	r3, [pc, #220]	@ (8014e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014d48:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8014d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014d52:	4a34      	ldr	r2, [pc, #208]	@ (8014e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014d54:	430b      	orrs	r3, r1
 8014d56:	6513      	str	r3, [r2, #80]	@ 0x50
 8014d58:	e003      	b.n	8014d62 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014d5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8014d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d6a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8014d6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8014d72:	2300      	movs	r3, #0
 8014d74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8014d78:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8014d7c:	460b      	mov	r3, r1
 8014d7e:	4313      	orrs	r3, r2
 8014d80:	d056      	beq.n	8014e30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8014d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014d86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8014d8c:	d033      	beq.n	8014df6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8014d8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8014d92:	d82c      	bhi.n	8014dee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8014d94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8014d98:	d02f      	beq.n	8014dfa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8014d9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8014d9e:	d826      	bhi.n	8014dee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8014da0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8014da4:	d02b      	beq.n	8014dfe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8014da6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8014daa:	d820      	bhi.n	8014dee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8014dac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014db0:	d012      	beq.n	8014dd8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8014db2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014db6:	d81a      	bhi.n	8014dee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d022      	beq.n	8014e02 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8014dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014dc0:	d115      	bne.n	8014dee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014dc6:	3308      	adds	r3, #8
 8014dc8:	2101      	movs	r1, #1
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f002 f8e0 	bl	8016f90 <RCCEx_PLL2_Config>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8014dd6:	e015      	b.n	8014e04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8014dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014ddc:	3328      	adds	r3, #40	@ 0x28
 8014dde:	2101      	movs	r1, #1
 8014de0:	4618      	mov	r0, r3
 8014de2:	f002 f987 	bl	80170f4 <RCCEx_PLL3_Config>
 8014de6:	4603      	mov	r3, r0
 8014de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8014dec:	e00a      	b.n	8014e04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014dee:	2301      	movs	r3, #1
 8014df0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014df4:	e006      	b.n	8014e04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8014df6:	bf00      	nop
 8014df8:	e004      	b.n	8014e04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8014dfa:	bf00      	nop
 8014dfc:	e002      	b.n	8014e04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8014dfe:	bf00      	nop
 8014e00:	e000      	b.n	8014e04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8014e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014e04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d10d      	bne.n	8014e28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8014e0c:	4b05      	ldr	r3, [pc, #20]	@ (8014e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014e10:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8014e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014e18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e1a:	4a02      	ldr	r2, [pc, #8]	@ (8014e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014e1c:	430b      	orrs	r3, r1
 8014e1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8014e20:	e006      	b.n	8014e30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8014e22:	bf00      	nop
 8014e24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014e28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014e2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8014e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e38:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8014e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8014e40:	2300      	movs	r3, #0
 8014e42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8014e46:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8014e4a:	460b      	mov	r3, r1
 8014e4c:	4313      	orrs	r3, r2
 8014e4e:	d055      	beq.n	8014efc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8014e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014e54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8014e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8014e5c:	d033      	beq.n	8014ec6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8014e5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8014e62:	d82c      	bhi.n	8014ebe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8014e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014e68:	d02f      	beq.n	8014eca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8014e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014e6e:	d826      	bhi.n	8014ebe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8014e70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8014e74:	d02b      	beq.n	8014ece <HAL_RCCEx_PeriphCLKConfig+0x672>
 8014e76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8014e7a:	d820      	bhi.n	8014ebe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8014e7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014e80:	d012      	beq.n	8014ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8014e82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014e86:	d81a      	bhi.n	8014ebe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d022      	beq.n	8014ed2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8014e8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014e90:	d115      	bne.n	8014ebe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014e96:	3308      	adds	r3, #8
 8014e98:	2101      	movs	r1, #1
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	f002 f878 	bl	8016f90 <RCCEx_PLL2_Config>
 8014ea0:	4603      	mov	r3, r0
 8014ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8014ea6:	e015      	b.n	8014ed4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8014ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014eac:	3328      	adds	r3, #40	@ 0x28
 8014eae:	2101      	movs	r1, #1
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f002 f91f 	bl	80170f4 <RCCEx_PLL3_Config>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8014ebc:	e00a      	b.n	8014ed4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8014ebe:	2301      	movs	r3, #1
 8014ec0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014ec4:	e006      	b.n	8014ed4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8014ec6:	bf00      	nop
 8014ec8:	e004      	b.n	8014ed4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8014eca:	bf00      	nop
 8014ecc:	e002      	b.n	8014ed4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8014ece:	bf00      	nop
 8014ed0:	e000      	b.n	8014ed4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8014ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d10b      	bne.n	8014ef4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8014edc:	4ba3      	ldr	r3, [pc, #652]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014ee0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8014ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014ee8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8014eec:	4a9f      	ldr	r2, [pc, #636]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014eee:	430b      	orrs	r3, r1
 8014ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8014ef2:	e003      	b.n	8014efc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014ef8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8014efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f04:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8014f08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8014f12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8014f16:	460b      	mov	r3, r1
 8014f18:	4313      	orrs	r3, r2
 8014f1a:	d037      	beq.n	8014f8c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8014f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014f26:	d00e      	beq.n	8014f46 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8014f28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014f2c:	d816      	bhi.n	8014f5c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d018      	beq.n	8014f64 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8014f32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014f36:	d111      	bne.n	8014f5c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014f38:	4b8c      	ldr	r3, [pc, #560]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f3c:	4a8b      	ldr	r2, [pc, #556]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014f3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014f42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8014f44:	e00f      	b.n	8014f66 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014f4a:	3308      	adds	r3, #8
 8014f4c:	2101      	movs	r1, #1
 8014f4e:	4618      	mov	r0, r3
 8014f50:	f002 f81e 	bl	8016f90 <RCCEx_PLL2_Config>
 8014f54:	4603      	mov	r3, r0
 8014f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8014f5a:	e004      	b.n	8014f66 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014f5c:	2301      	movs	r3, #1
 8014f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014f62:	e000      	b.n	8014f66 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8014f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d10a      	bne.n	8014f84 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8014f6e:	4b7f      	ldr	r3, [pc, #508]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014f72:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8014f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f7c:	4a7b      	ldr	r2, [pc, #492]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014f7e:	430b      	orrs	r3, r1
 8014f80:	6513      	str	r3, [r2, #80]	@ 0x50
 8014f82:	e003      	b.n	8014f8c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014f84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014f88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8014f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f94:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8014f98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8014f9c:	2300      	movs	r3, #0
 8014f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8014fa2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8014fa6:	460b      	mov	r3, r1
 8014fa8:	4313      	orrs	r3, r2
 8014faa:	d039      	beq.n	8015020 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8014fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014fb2:	2b03      	cmp	r3, #3
 8014fb4:	d81c      	bhi.n	8014ff0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8014fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8014fbc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8014fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fbc:	08014ff9 	.word	0x08014ff9
 8014fc0:	08014fcd 	.word	0x08014fcd
 8014fc4:	08014fdb 	.word	0x08014fdb
 8014fc8:	08014ff9 	.word	0x08014ff9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014fcc:	4b67      	ldr	r3, [pc, #412]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014fd0:	4a66      	ldr	r2, [pc, #408]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014fd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8014fd8:	e00f      	b.n	8014ffa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8014fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014fde:	3308      	adds	r3, #8
 8014fe0:	2102      	movs	r1, #2
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f001 ffd4 	bl	8016f90 <RCCEx_PLL2_Config>
 8014fe8:	4603      	mov	r3, r0
 8014fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8014fee:	e004      	b.n	8014ffa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8014ff0:	2301      	movs	r3, #1
 8014ff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014ff6:	e000      	b.n	8014ffa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8014ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d10a      	bne.n	8015018 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8015002:	4b5a      	ldr	r3, [pc, #360]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015006:	f023 0103 	bic.w	r1, r3, #3
 801500a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801500e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015010:	4a56      	ldr	r2, [pc, #344]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015012:	430b      	orrs	r3, r1
 8015014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8015016:	e003      	b.n	8015020 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015018:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801501c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015028:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801502c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8015030:	2300      	movs	r3, #0
 8015032:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8015036:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801503a:	460b      	mov	r3, r1
 801503c:	4313      	orrs	r3, r2
 801503e:	f000 809f 	beq.w	8015180 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8015042:	4b4b      	ldr	r3, [pc, #300]	@ (8015170 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	4a4a      	ldr	r2, [pc, #296]	@ (8015170 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8015048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801504c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801504e:	f7fb fce5 	bl	8010a1c <HAL_GetTick>
 8015052:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015056:	e00b      	b.n	8015070 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015058:	f7fb fce0 	bl	8010a1c <HAL_GetTick>
 801505c:	4602      	mov	r2, r0
 801505e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015062:	1ad3      	subs	r3, r2, r3
 8015064:	2b64      	cmp	r3, #100	@ 0x64
 8015066:	d903      	bls.n	8015070 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8015068:	2303      	movs	r3, #3
 801506a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801506e:	e005      	b.n	801507c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015070:	4b3f      	ldr	r3, [pc, #252]	@ (8015170 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015078:	2b00      	cmp	r3, #0
 801507a:	d0ed      	beq.n	8015058 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801507c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015080:	2b00      	cmp	r3, #0
 8015082:	d179      	bne.n	8015178 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8015084:	4b39      	ldr	r3, [pc, #228]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015086:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8015088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801508c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015090:	4053      	eors	r3, r2
 8015092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015096:	2b00      	cmp	r3, #0
 8015098:	d015      	beq.n	80150c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801509a:	4b34      	ldr	r3, [pc, #208]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801509c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801509e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80150a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80150a6:	4b31      	ldr	r3, [pc, #196]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80150a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80150aa:	4a30      	ldr	r2, [pc, #192]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80150ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80150b0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80150b2:	4b2e      	ldr	r3, [pc, #184]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80150b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80150b6:	4a2d      	ldr	r2, [pc, #180]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80150b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80150bc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80150be:	4a2b      	ldr	r2, [pc, #172]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80150c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80150c4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80150c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80150ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80150ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80150d2:	d118      	bne.n	8015106 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80150d4:	f7fb fca2 	bl	8010a1c <HAL_GetTick>
 80150d8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80150dc:	e00d      	b.n	80150fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80150de:	f7fb fc9d 	bl	8010a1c <HAL_GetTick>
 80150e2:	4602      	mov	r2, r0
 80150e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80150e8:	1ad2      	subs	r2, r2, r3
 80150ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 80150ee:	429a      	cmp	r2, r3
 80150f0:	d903      	bls.n	80150fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80150f2:	2303      	movs	r3, #3
 80150f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80150f8:	e005      	b.n	8015106 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80150fa:	4b1c      	ldr	r3, [pc, #112]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80150fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80150fe:	f003 0302 	and.w	r3, r3, #2
 8015102:	2b00      	cmp	r3, #0
 8015104:	d0eb      	beq.n	80150de <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8015106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801510a:	2b00      	cmp	r3, #0
 801510c:	d129      	bne.n	8015162 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801510e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015112:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015116:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801511a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801511e:	d10e      	bne.n	801513e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8015120:	4b12      	ldr	r3, [pc, #72]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015122:	691b      	ldr	r3, [r3, #16]
 8015124:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8015128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801512c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015130:	091a      	lsrs	r2, r3, #4
 8015132:	4b10      	ldr	r3, [pc, #64]	@ (8015174 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8015134:	4013      	ands	r3, r2
 8015136:	4a0d      	ldr	r2, [pc, #52]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015138:	430b      	orrs	r3, r1
 801513a:	6113      	str	r3, [r2, #16]
 801513c:	e005      	b.n	801514a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801513e:	4b0b      	ldr	r3, [pc, #44]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015140:	691b      	ldr	r3, [r3, #16]
 8015142:	4a0a      	ldr	r2, [pc, #40]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015144:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015148:	6113      	str	r3, [r2, #16]
 801514a:	4b08      	ldr	r3, [pc, #32]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801514c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801514e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015152:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801515a:	4a04      	ldr	r2, [pc, #16]	@ (801516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801515c:	430b      	orrs	r3, r1
 801515e:	6713      	str	r3, [r2, #112]	@ 0x70
 8015160:	e00e      	b.n	8015180 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8015162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801516a:	e009      	b.n	8015180 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801516c:	58024400 	.word	0x58024400
 8015170:	58024800 	.word	0x58024800
 8015174:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801517c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8015180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015188:	f002 0301 	and.w	r3, r2, #1
 801518c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8015190:	2300      	movs	r3, #0
 8015192:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8015196:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801519a:	460b      	mov	r3, r1
 801519c:	4313      	orrs	r3, r2
 801519e:	f000 8089 	beq.w	80152b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80151a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80151a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80151a8:	2b28      	cmp	r3, #40	@ 0x28
 80151aa:	d86b      	bhi.n	8015284 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80151ac:	a201      	add	r2, pc, #4	@ (adr r2, 80151b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80151ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151b2:	bf00      	nop
 80151b4:	0801528d 	.word	0x0801528d
 80151b8:	08015285 	.word	0x08015285
 80151bc:	08015285 	.word	0x08015285
 80151c0:	08015285 	.word	0x08015285
 80151c4:	08015285 	.word	0x08015285
 80151c8:	08015285 	.word	0x08015285
 80151cc:	08015285 	.word	0x08015285
 80151d0:	08015285 	.word	0x08015285
 80151d4:	08015259 	.word	0x08015259
 80151d8:	08015285 	.word	0x08015285
 80151dc:	08015285 	.word	0x08015285
 80151e0:	08015285 	.word	0x08015285
 80151e4:	08015285 	.word	0x08015285
 80151e8:	08015285 	.word	0x08015285
 80151ec:	08015285 	.word	0x08015285
 80151f0:	08015285 	.word	0x08015285
 80151f4:	0801526f 	.word	0x0801526f
 80151f8:	08015285 	.word	0x08015285
 80151fc:	08015285 	.word	0x08015285
 8015200:	08015285 	.word	0x08015285
 8015204:	08015285 	.word	0x08015285
 8015208:	08015285 	.word	0x08015285
 801520c:	08015285 	.word	0x08015285
 8015210:	08015285 	.word	0x08015285
 8015214:	0801528d 	.word	0x0801528d
 8015218:	08015285 	.word	0x08015285
 801521c:	08015285 	.word	0x08015285
 8015220:	08015285 	.word	0x08015285
 8015224:	08015285 	.word	0x08015285
 8015228:	08015285 	.word	0x08015285
 801522c:	08015285 	.word	0x08015285
 8015230:	08015285 	.word	0x08015285
 8015234:	0801528d 	.word	0x0801528d
 8015238:	08015285 	.word	0x08015285
 801523c:	08015285 	.word	0x08015285
 8015240:	08015285 	.word	0x08015285
 8015244:	08015285 	.word	0x08015285
 8015248:	08015285 	.word	0x08015285
 801524c:	08015285 	.word	0x08015285
 8015250:	08015285 	.word	0x08015285
 8015254:	0801528d 	.word	0x0801528d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801525c:	3308      	adds	r3, #8
 801525e:	2101      	movs	r1, #1
 8015260:	4618      	mov	r0, r3
 8015262:	f001 fe95 	bl	8016f90 <RCCEx_PLL2_Config>
 8015266:	4603      	mov	r3, r0
 8015268:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801526c:	e00f      	b.n	801528e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801526e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015272:	3328      	adds	r3, #40	@ 0x28
 8015274:	2101      	movs	r1, #1
 8015276:	4618      	mov	r0, r3
 8015278:	f001 ff3c 	bl	80170f4 <RCCEx_PLL3_Config>
 801527c:	4603      	mov	r3, r0
 801527e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8015282:	e004      	b.n	801528e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015284:	2301      	movs	r3, #1
 8015286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801528a:	e000      	b.n	801528e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801528c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801528e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015292:	2b00      	cmp	r3, #0
 8015294:	d10a      	bne.n	80152ac <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8015296:	4bbf      	ldr	r3, [pc, #764]	@ (8015594 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801529a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801529e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80152a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80152a4:	4abb      	ldr	r2, [pc, #748]	@ (8015594 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80152a6:	430b      	orrs	r3, r1
 80152a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80152aa:	e003      	b.n	80152b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80152ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80152b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80152b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80152b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152bc:	f002 0302 	and.w	r3, r2, #2
 80152c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80152c4:	2300      	movs	r3, #0
 80152c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80152ca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80152ce:	460b      	mov	r3, r1
 80152d0:	4313      	orrs	r3, r2
 80152d2:	d041      	beq.n	8015358 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80152d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80152d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80152da:	2b05      	cmp	r3, #5
 80152dc:	d824      	bhi.n	8015328 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80152de:	a201      	add	r2, pc, #4	@ (adr r2, 80152e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80152e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152e4:	08015331 	.word	0x08015331
 80152e8:	080152fd 	.word	0x080152fd
 80152ec:	08015313 	.word	0x08015313
 80152f0:	08015331 	.word	0x08015331
 80152f4:	08015331 	.word	0x08015331
 80152f8:	08015331 	.word	0x08015331
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80152fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015300:	3308      	adds	r3, #8
 8015302:	2101      	movs	r1, #1
 8015304:	4618      	mov	r0, r3
 8015306:	f001 fe43 	bl	8016f90 <RCCEx_PLL2_Config>
 801530a:	4603      	mov	r3, r0
 801530c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8015310:	e00f      	b.n	8015332 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015316:	3328      	adds	r3, #40	@ 0x28
 8015318:	2101      	movs	r1, #1
 801531a:	4618      	mov	r0, r3
 801531c:	f001 feea 	bl	80170f4 <RCCEx_PLL3_Config>
 8015320:	4603      	mov	r3, r0
 8015322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8015326:	e004      	b.n	8015332 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015328:	2301      	movs	r3, #1
 801532a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801532e:	e000      	b.n	8015332 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8015330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015336:	2b00      	cmp	r3, #0
 8015338:	d10a      	bne.n	8015350 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801533a:	4b96      	ldr	r3, [pc, #600]	@ (8015594 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801533c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801533e:	f023 0107 	bic.w	r1, r3, #7
 8015342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015346:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015348:	4a92      	ldr	r2, [pc, #584]	@ (8015594 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801534a:	430b      	orrs	r3, r1
 801534c:	6553      	str	r3, [r2, #84]	@ 0x54
 801534e:	e003      	b.n	8015358 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015354:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801535c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015360:	f002 0304 	and.w	r3, r2, #4
 8015364:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8015368:	2300      	movs	r3, #0
 801536a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801536e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8015372:	460b      	mov	r3, r1
 8015374:	4313      	orrs	r3, r2
 8015376:	d044      	beq.n	8015402 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8015378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801537c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015380:	2b05      	cmp	r3, #5
 8015382:	d825      	bhi.n	80153d0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8015384:	a201      	add	r2, pc, #4	@ (adr r2, 801538c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8015386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801538a:	bf00      	nop
 801538c:	080153d9 	.word	0x080153d9
 8015390:	080153a5 	.word	0x080153a5
 8015394:	080153bb 	.word	0x080153bb
 8015398:	080153d9 	.word	0x080153d9
 801539c:	080153d9 	.word	0x080153d9
 80153a0:	080153d9 	.word	0x080153d9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80153a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80153a8:	3308      	adds	r3, #8
 80153aa:	2101      	movs	r1, #1
 80153ac:	4618      	mov	r0, r3
 80153ae:	f001 fdef 	bl	8016f90 <RCCEx_PLL2_Config>
 80153b2:	4603      	mov	r3, r0
 80153b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80153b8:	e00f      	b.n	80153da <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80153ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80153be:	3328      	adds	r3, #40	@ 0x28
 80153c0:	2101      	movs	r1, #1
 80153c2:	4618      	mov	r0, r3
 80153c4:	f001 fe96 	bl	80170f4 <RCCEx_PLL3_Config>
 80153c8:	4603      	mov	r3, r0
 80153ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80153ce:	e004      	b.n	80153da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80153d0:	2301      	movs	r3, #1
 80153d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80153d6:	e000      	b.n	80153da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80153d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80153da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d10b      	bne.n	80153fa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80153e2:	4b6c      	ldr	r3, [pc, #432]	@ (8015594 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80153e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80153e6:	f023 0107 	bic.w	r1, r3, #7
 80153ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80153ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80153f2:	4a68      	ldr	r2, [pc, #416]	@ (8015594 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80153f4:	430b      	orrs	r3, r1
 80153f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80153f8:	e003      	b.n	8015402 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80153fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80153fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8015402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801540a:	f002 0320 	and.w	r3, r2, #32
 801540e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8015412:	2300      	movs	r3, #0
 8015414:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8015418:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801541c:	460b      	mov	r3, r1
 801541e:	4313      	orrs	r3, r2
 8015420:	d055      	beq.n	80154ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8015422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801542a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801542e:	d033      	beq.n	8015498 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8015430:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8015434:	d82c      	bhi.n	8015490 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8015436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801543a:	d02f      	beq.n	801549c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801543c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015440:	d826      	bhi.n	8015490 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8015442:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8015446:	d02b      	beq.n	80154a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8015448:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801544c:	d820      	bhi.n	8015490 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801544e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015452:	d012      	beq.n	801547a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8015454:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015458:	d81a      	bhi.n	8015490 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801545a:	2b00      	cmp	r3, #0
 801545c:	d022      	beq.n	80154a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801545e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015462:	d115      	bne.n	8015490 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015468:	3308      	adds	r3, #8
 801546a:	2100      	movs	r1, #0
 801546c:	4618      	mov	r0, r3
 801546e:	f001 fd8f 	bl	8016f90 <RCCEx_PLL2_Config>
 8015472:	4603      	mov	r3, r0
 8015474:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8015478:	e015      	b.n	80154a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801547a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801547e:	3328      	adds	r3, #40	@ 0x28
 8015480:	2102      	movs	r1, #2
 8015482:	4618      	mov	r0, r3
 8015484:	f001 fe36 	bl	80170f4 <RCCEx_PLL3_Config>
 8015488:	4603      	mov	r3, r0
 801548a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801548e:	e00a      	b.n	80154a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015490:	2301      	movs	r3, #1
 8015492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015496:	e006      	b.n	80154a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8015498:	bf00      	nop
 801549a:	e004      	b.n	80154a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801549c:	bf00      	nop
 801549e:	e002      	b.n	80154a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80154a0:	bf00      	nop
 80154a2:	e000      	b.n	80154a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80154a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80154a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d10b      	bne.n	80154c6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80154ae:	4b39      	ldr	r3, [pc, #228]	@ (8015594 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80154b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80154b2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80154b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80154ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80154be:	4a35      	ldr	r2, [pc, #212]	@ (8015594 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80154c0:	430b      	orrs	r3, r1
 80154c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80154c4:	e003      	b.n	80154ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80154c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80154ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80154ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80154d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154d6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80154da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80154de:	2300      	movs	r3, #0
 80154e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80154e4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80154e8:	460b      	mov	r3, r1
 80154ea:	4313      	orrs	r3, r2
 80154ec:	d058      	beq.n	80155a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80154ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80154f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80154f6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80154fa:	d033      	beq.n	8015564 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80154fc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8015500:	d82c      	bhi.n	801555c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8015502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015506:	d02f      	beq.n	8015568 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8015508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801550c:	d826      	bhi.n	801555c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801550e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8015512:	d02b      	beq.n	801556c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8015514:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8015518:	d820      	bhi.n	801555c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801551a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801551e:	d012      	beq.n	8015546 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8015520:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015524:	d81a      	bhi.n	801555c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8015526:	2b00      	cmp	r3, #0
 8015528:	d022      	beq.n	8015570 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801552a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801552e:	d115      	bne.n	801555c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015534:	3308      	adds	r3, #8
 8015536:	2100      	movs	r1, #0
 8015538:	4618      	mov	r0, r3
 801553a:	f001 fd29 	bl	8016f90 <RCCEx_PLL2_Config>
 801553e:	4603      	mov	r3, r0
 8015540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8015544:	e015      	b.n	8015572 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8015546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801554a:	3328      	adds	r3, #40	@ 0x28
 801554c:	2102      	movs	r1, #2
 801554e:	4618      	mov	r0, r3
 8015550:	f001 fdd0 	bl	80170f4 <RCCEx_PLL3_Config>
 8015554:	4603      	mov	r3, r0
 8015556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801555a:	e00a      	b.n	8015572 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801555c:	2301      	movs	r3, #1
 801555e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015562:	e006      	b.n	8015572 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8015564:	bf00      	nop
 8015566:	e004      	b.n	8015572 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8015568:	bf00      	nop
 801556a:	e002      	b.n	8015572 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801556c:	bf00      	nop
 801556e:	e000      	b.n	8015572 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8015570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015576:	2b00      	cmp	r3, #0
 8015578:	d10e      	bne.n	8015598 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801557a:	4b06      	ldr	r3, [pc, #24]	@ (8015594 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801557c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801557e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8015582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015586:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801558a:	4a02      	ldr	r2, [pc, #8]	@ (8015594 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801558c:	430b      	orrs	r3, r1
 801558e:	6593      	str	r3, [r2, #88]	@ 0x58
 8015590:	e006      	b.n	80155a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8015592:	bf00      	nop
 8015594:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015598:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801559c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80155a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80155a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155a8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80155ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80155b0:	2300      	movs	r3, #0
 80155b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80155b6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80155ba:	460b      	mov	r3, r1
 80155bc:	4313      	orrs	r3, r2
 80155be:	d055      	beq.n	801566c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80155c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80155c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80155c8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80155cc:	d033      	beq.n	8015636 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80155ce:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80155d2:	d82c      	bhi.n	801562e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80155d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80155d8:	d02f      	beq.n	801563a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80155da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80155de:	d826      	bhi.n	801562e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80155e0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80155e4:	d02b      	beq.n	801563e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80155e6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80155ea:	d820      	bhi.n	801562e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80155ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80155f0:	d012      	beq.n	8015618 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80155f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80155f6:	d81a      	bhi.n	801562e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d022      	beq.n	8015642 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80155fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015600:	d115      	bne.n	801562e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015606:	3308      	adds	r3, #8
 8015608:	2100      	movs	r1, #0
 801560a:	4618      	mov	r0, r3
 801560c:	f001 fcc0 	bl	8016f90 <RCCEx_PLL2_Config>
 8015610:	4603      	mov	r3, r0
 8015612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8015616:	e015      	b.n	8015644 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8015618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801561c:	3328      	adds	r3, #40	@ 0x28
 801561e:	2102      	movs	r1, #2
 8015620:	4618      	mov	r0, r3
 8015622:	f001 fd67 	bl	80170f4 <RCCEx_PLL3_Config>
 8015626:	4603      	mov	r3, r0
 8015628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801562c:	e00a      	b.n	8015644 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801562e:	2301      	movs	r3, #1
 8015630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015634:	e006      	b.n	8015644 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8015636:	bf00      	nop
 8015638:	e004      	b.n	8015644 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801563a:	bf00      	nop
 801563c:	e002      	b.n	8015644 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801563e:	bf00      	nop
 8015640:	e000      	b.n	8015644 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8015642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015648:	2b00      	cmp	r3, #0
 801564a:	d10b      	bne.n	8015664 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801564c:	4ba1      	ldr	r3, [pc, #644]	@ (80158d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801564e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015650:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8015654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015658:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801565c:	4a9d      	ldr	r2, [pc, #628]	@ (80158d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801565e:	430b      	orrs	r3, r1
 8015660:	6593      	str	r3, [r2, #88]	@ 0x58
 8015662:	e003      	b.n	801566c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015668:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801566c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015674:	f002 0308 	and.w	r3, r2, #8
 8015678:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801567c:	2300      	movs	r3, #0
 801567e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8015682:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8015686:	460b      	mov	r3, r1
 8015688:	4313      	orrs	r3, r2
 801568a:	d01e      	beq.n	80156ca <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801568c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015694:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015698:	d10c      	bne.n	80156b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801569a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801569e:	3328      	adds	r3, #40	@ 0x28
 80156a0:	2102      	movs	r1, #2
 80156a2:	4618      	mov	r0, r3
 80156a4:	f001 fd26 	bl	80170f4 <RCCEx_PLL3_Config>
 80156a8:	4603      	mov	r3, r0
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d002      	beq.n	80156b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80156ae:	2301      	movs	r3, #1
 80156b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80156b4:	4b87      	ldr	r3, [pc, #540]	@ (80158d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80156b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80156b8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80156bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80156c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80156c4:	4a83      	ldr	r2, [pc, #524]	@ (80158d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80156c6:	430b      	orrs	r3, r1
 80156c8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80156ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80156ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156d2:	f002 0310 	and.w	r3, r2, #16
 80156d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80156da:	2300      	movs	r3, #0
 80156dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80156e0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80156e4:	460b      	mov	r3, r1
 80156e6:	4313      	orrs	r3, r2
 80156e8:	d01e      	beq.n	8015728 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80156ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80156ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80156f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80156f6:	d10c      	bne.n	8015712 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80156f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80156fc:	3328      	adds	r3, #40	@ 0x28
 80156fe:	2102      	movs	r1, #2
 8015700:	4618      	mov	r0, r3
 8015702:	f001 fcf7 	bl	80170f4 <RCCEx_PLL3_Config>
 8015706:	4603      	mov	r3, r0
 8015708:	2b00      	cmp	r3, #0
 801570a:	d002      	beq.n	8015712 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801570c:	2301      	movs	r3, #1
 801570e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8015712:	4b70      	ldr	r3, [pc, #448]	@ (80158d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8015714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015716:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801571a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801571e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8015722:	4a6c      	ldr	r2, [pc, #432]	@ (80158d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8015724:	430b      	orrs	r3, r1
 8015726:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8015728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015730:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8015734:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8015738:	2300      	movs	r3, #0
 801573a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801573e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8015742:	460b      	mov	r3, r1
 8015744:	4313      	orrs	r3, r2
 8015746:	d03e      	beq.n	80157c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8015748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801574c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015750:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015754:	d022      	beq.n	801579c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8015756:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801575a:	d81b      	bhi.n	8015794 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801575c:	2b00      	cmp	r3, #0
 801575e:	d003      	beq.n	8015768 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8015760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015764:	d00b      	beq.n	801577e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8015766:	e015      	b.n	8015794 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801576c:	3308      	adds	r3, #8
 801576e:	2100      	movs	r1, #0
 8015770:	4618      	mov	r0, r3
 8015772:	f001 fc0d 	bl	8016f90 <RCCEx_PLL2_Config>
 8015776:	4603      	mov	r3, r0
 8015778:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801577c:	e00f      	b.n	801579e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801577e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015782:	3328      	adds	r3, #40	@ 0x28
 8015784:	2102      	movs	r1, #2
 8015786:	4618      	mov	r0, r3
 8015788:	f001 fcb4 	bl	80170f4 <RCCEx_PLL3_Config>
 801578c:	4603      	mov	r3, r0
 801578e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8015792:	e004      	b.n	801579e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015794:	2301      	movs	r3, #1
 8015796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801579a:	e000      	b.n	801579e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801579c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801579e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d10b      	bne.n	80157be <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80157a6:	4b4b      	ldr	r3, [pc, #300]	@ (80158d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80157a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80157aa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80157ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80157b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80157b6:	4a47      	ldr	r2, [pc, #284]	@ (80158d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80157b8:	430b      	orrs	r3, r1
 80157ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80157bc:	e003      	b.n	80157c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80157be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80157c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80157c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80157ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ce:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80157d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80157d4:	2300      	movs	r3, #0
 80157d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80157d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80157dc:	460b      	mov	r3, r1
 80157de:	4313      	orrs	r3, r2
 80157e0:	d03b      	beq.n	801585a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80157e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80157e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80157ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80157ee:	d01f      	beq.n	8015830 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80157f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80157f4:	d818      	bhi.n	8015828 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80157f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80157fa:	d003      	beq.n	8015804 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80157fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8015800:	d007      	beq.n	8015812 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8015802:	e011      	b.n	8015828 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015804:	4b33      	ldr	r3, [pc, #204]	@ (80158d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8015806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015808:	4a32      	ldr	r2, [pc, #200]	@ (80158d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801580a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801580e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8015810:	e00f      	b.n	8015832 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015816:	3328      	adds	r3, #40	@ 0x28
 8015818:	2101      	movs	r1, #1
 801581a:	4618      	mov	r0, r3
 801581c:	f001 fc6a 	bl	80170f4 <RCCEx_PLL3_Config>
 8015820:	4603      	mov	r3, r0
 8015822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8015826:	e004      	b.n	8015832 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015828:	2301      	movs	r3, #1
 801582a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801582e:	e000      	b.n	8015832 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8015830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015836:	2b00      	cmp	r3, #0
 8015838:	d10b      	bne.n	8015852 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801583a:	4b26      	ldr	r3, [pc, #152]	@ (80158d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801583c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801583e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8015842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801584a:	4a22      	ldr	r2, [pc, #136]	@ (80158d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801584c:	430b      	orrs	r3, r1
 801584e:	6553      	str	r3, [r2, #84]	@ 0x54
 8015850:	e003      	b.n	801585a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015856:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801585a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015862:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8015866:	673b      	str	r3, [r7, #112]	@ 0x70
 8015868:	2300      	movs	r3, #0
 801586a:	677b      	str	r3, [r7, #116]	@ 0x74
 801586c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8015870:	460b      	mov	r3, r1
 8015872:	4313      	orrs	r3, r2
 8015874:	d034      	beq.n	80158e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8015876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801587a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801587c:	2b00      	cmp	r3, #0
 801587e:	d003      	beq.n	8015888 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8015880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015884:	d007      	beq.n	8015896 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8015886:	e011      	b.n	80158ac <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015888:	4b12      	ldr	r3, [pc, #72]	@ (80158d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801588a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801588c:	4a11      	ldr	r2, [pc, #68]	@ (80158d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801588e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015892:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8015894:	e00e      	b.n	80158b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8015896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801589a:	3308      	adds	r3, #8
 801589c:	2102      	movs	r1, #2
 801589e:	4618      	mov	r0, r3
 80158a0:	f001 fb76 	bl	8016f90 <RCCEx_PLL2_Config>
 80158a4:	4603      	mov	r3, r0
 80158a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80158aa:	e003      	b.n	80158b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80158ac:	2301      	movs	r3, #1
 80158ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80158b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80158b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d10d      	bne.n	80158d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80158bc:	4b05      	ldr	r3, [pc, #20]	@ (80158d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80158be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80158c0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80158c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80158c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80158ca:	4a02      	ldr	r2, [pc, #8]	@ (80158d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80158cc:	430b      	orrs	r3, r1
 80158ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80158d0:	e006      	b.n	80158e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80158d2:	bf00      	nop
 80158d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80158d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80158dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80158e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80158e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158e8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80158ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80158ee:	2300      	movs	r3, #0
 80158f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80158f2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80158f6:	460b      	mov	r3, r1
 80158f8:	4313      	orrs	r3, r2
 80158fa:	d00c      	beq.n	8015916 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80158fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015900:	3328      	adds	r3, #40	@ 0x28
 8015902:	2102      	movs	r1, #2
 8015904:	4618      	mov	r0, r3
 8015906:	f001 fbf5 	bl	80170f4 <RCCEx_PLL3_Config>
 801590a:	4603      	mov	r3, r0
 801590c:	2b00      	cmp	r3, #0
 801590e:	d002      	beq.n	8015916 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8015910:	2301      	movs	r3, #1
 8015912:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8015916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801591e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8015922:	663b      	str	r3, [r7, #96]	@ 0x60
 8015924:	2300      	movs	r3, #0
 8015926:	667b      	str	r3, [r7, #100]	@ 0x64
 8015928:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801592c:	460b      	mov	r3, r1
 801592e:	4313      	orrs	r3, r2
 8015930:	d038      	beq.n	80159a4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8015932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801593a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801593e:	d018      	beq.n	8015972 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8015940:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015944:	d811      	bhi.n	801596a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8015946:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801594a:	d014      	beq.n	8015976 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801594c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015950:	d80b      	bhi.n	801596a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8015952:	2b00      	cmp	r3, #0
 8015954:	d011      	beq.n	801597a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8015956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801595a:	d106      	bne.n	801596a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801595c:	4bc3      	ldr	r3, [pc, #780]	@ (8015c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801595e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015960:	4ac2      	ldr	r2, [pc, #776]	@ (8015c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8015962:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015966:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8015968:	e008      	b.n	801597c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801596a:	2301      	movs	r3, #1
 801596c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015970:	e004      	b.n	801597c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8015972:	bf00      	nop
 8015974:	e002      	b.n	801597c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8015976:	bf00      	nop
 8015978:	e000      	b.n	801597c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801597a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801597c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015980:	2b00      	cmp	r3, #0
 8015982:	d10b      	bne.n	801599c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8015984:	4bb9      	ldr	r3, [pc, #740]	@ (8015c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8015986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015988:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801598c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015994:	4ab5      	ldr	r2, [pc, #724]	@ (8015c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8015996:	430b      	orrs	r3, r1
 8015998:	6553      	str	r3, [r2, #84]	@ 0x54
 801599a:	e003      	b.n	80159a4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801599c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80159a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80159a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80159b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80159b2:	2300      	movs	r3, #0
 80159b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80159b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80159ba:	460b      	mov	r3, r1
 80159bc:	4313      	orrs	r3, r2
 80159be:	d009      	beq.n	80159d4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80159c0:	4baa      	ldr	r3, [pc, #680]	@ (8015c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80159c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80159c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80159c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80159ce:	4aa7      	ldr	r2, [pc, #668]	@ (8015c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80159d0:	430b      	orrs	r3, r1
 80159d2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80159d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159dc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80159e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80159e2:	2300      	movs	r3, #0
 80159e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80159e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80159ea:	460b      	mov	r3, r1
 80159ec:	4313      	orrs	r3, r2
 80159ee:	d00a      	beq.n	8015a06 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80159f0:	4b9e      	ldr	r3, [pc, #632]	@ (8015c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80159f2:	691b      	ldr	r3, [r3, #16]
 80159f4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80159f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8015a00:	4a9a      	ldr	r2, [pc, #616]	@ (8015c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8015a02:	430b      	orrs	r3, r1
 8015a04:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8015a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a0e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8015a12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015a14:	2300      	movs	r3, #0
 8015a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015a18:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8015a1c:	460b      	mov	r3, r1
 8015a1e:	4313      	orrs	r3, r2
 8015a20:	d009      	beq.n	8015a36 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8015a22:	4b92      	ldr	r3, [pc, #584]	@ (8015c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8015a24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a26:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8015a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015a30:	4a8e      	ldr	r2, [pc, #568]	@ (8015c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8015a32:	430b      	orrs	r3, r1
 8015a34:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8015a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a3e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8015a42:	643b      	str	r3, [r7, #64]	@ 0x40
 8015a44:	2300      	movs	r3, #0
 8015a46:	647b      	str	r3, [r7, #68]	@ 0x44
 8015a48:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8015a4c:	460b      	mov	r3, r1
 8015a4e:	4313      	orrs	r3, r2
 8015a50:	d00e      	beq.n	8015a70 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8015a52:	4b86      	ldr	r3, [pc, #536]	@ (8015c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8015a54:	691b      	ldr	r3, [r3, #16]
 8015a56:	4a85      	ldr	r2, [pc, #532]	@ (8015c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8015a58:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8015a5c:	6113      	str	r3, [r2, #16]
 8015a5e:	4b83      	ldr	r3, [pc, #524]	@ (8015c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8015a60:	6919      	ldr	r1, [r3, #16]
 8015a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8015a6a:	4a80      	ldr	r2, [pc, #512]	@ (8015c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8015a6c:	430b      	orrs	r3, r1
 8015a6e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8015a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a78:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8015a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015a7e:	2300      	movs	r3, #0
 8015a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015a82:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8015a86:	460b      	mov	r3, r1
 8015a88:	4313      	orrs	r3, r2
 8015a8a:	d009      	beq.n	8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8015a8c:	4b77      	ldr	r3, [pc, #476]	@ (8015c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8015a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015a90:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8015a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015a9a:	4a74      	ldr	r2, [pc, #464]	@ (8015c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8015a9c:	430b      	orrs	r3, r1
 8015a9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8015aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aa8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8015aac:	633b      	str	r3, [r7, #48]	@ 0x30
 8015aae:	2300      	movs	r3, #0
 8015ab0:	637b      	str	r3, [r7, #52]	@ 0x34
 8015ab2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8015ab6:	460b      	mov	r3, r1
 8015ab8:	4313      	orrs	r3, r2
 8015aba:	d00a      	beq.n	8015ad2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8015abc:	4b6b      	ldr	r3, [pc, #428]	@ (8015c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8015abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015ac0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8015ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015acc:	4a67      	ldr	r2, [pc, #412]	@ (8015c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8015ace:	430b      	orrs	r3, r1
 8015ad0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8015ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ada:	2100      	movs	r1, #0
 8015adc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8015ade:	f003 0301 	and.w	r3, r3, #1
 8015ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015ae4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8015ae8:	460b      	mov	r3, r1
 8015aea:	4313      	orrs	r3, r2
 8015aec:	d011      	beq.n	8015b12 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015af2:	3308      	adds	r3, #8
 8015af4:	2100      	movs	r1, #0
 8015af6:	4618      	mov	r0, r3
 8015af8:	f001 fa4a 	bl	8016f90 <RCCEx_PLL2_Config>
 8015afc:	4603      	mov	r3, r0
 8015afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8015b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d003      	beq.n	8015b12 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015b0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8015b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b1a:	2100      	movs	r1, #0
 8015b1c:	6239      	str	r1, [r7, #32]
 8015b1e:	f003 0302 	and.w	r3, r3, #2
 8015b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8015b24:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8015b28:	460b      	mov	r3, r1
 8015b2a:	4313      	orrs	r3, r2
 8015b2c:	d011      	beq.n	8015b52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b32:	3308      	adds	r3, #8
 8015b34:	2101      	movs	r1, #1
 8015b36:	4618      	mov	r0, r3
 8015b38:	f001 fa2a 	bl	8016f90 <RCCEx_PLL2_Config>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8015b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d003      	beq.n	8015b52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015b4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8015b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b5a:	2100      	movs	r1, #0
 8015b5c:	61b9      	str	r1, [r7, #24]
 8015b5e:	f003 0304 	and.w	r3, r3, #4
 8015b62:	61fb      	str	r3, [r7, #28]
 8015b64:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8015b68:	460b      	mov	r3, r1
 8015b6a:	4313      	orrs	r3, r2
 8015b6c:	d011      	beq.n	8015b92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8015b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b72:	3308      	adds	r3, #8
 8015b74:	2102      	movs	r1, #2
 8015b76:	4618      	mov	r0, r3
 8015b78:	f001 fa0a 	bl	8016f90 <RCCEx_PLL2_Config>
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8015b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d003      	beq.n	8015b92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015b8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8015b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b9a:	2100      	movs	r1, #0
 8015b9c:	6139      	str	r1, [r7, #16]
 8015b9e:	f003 0308 	and.w	r3, r3, #8
 8015ba2:	617b      	str	r3, [r7, #20]
 8015ba4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8015ba8:	460b      	mov	r3, r1
 8015baa:	4313      	orrs	r3, r2
 8015bac:	d011      	beq.n	8015bd2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015bb2:	3328      	adds	r3, #40	@ 0x28
 8015bb4:	2100      	movs	r1, #0
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	f001 fa9c 	bl	80170f4 <RCCEx_PLL3_Config>
 8015bbc:	4603      	mov	r3, r0
 8015bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8015bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d003      	beq.n	8015bd2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015bca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015bce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8015bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bda:	2100      	movs	r1, #0
 8015bdc:	60b9      	str	r1, [r7, #8]
 8015bde:	f003 0310 	and.w	r3, r3, #16
 8015be2:	60fb      	str	r3, [r7, #12]
 8015be4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8015be8:	460b      	mov	r3, r1
 8015bea:	4313      	orrs	r3, r2
 8015bec:	d011      	beq.n	8015c12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015bf2:	3328      	adds	r3, #40	@ 0x28
 8015bf4:	2101      	movs	r1, #1
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	f001 fa7c 	bl	80170f4 <RCCEx_PLL3_Config>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8015c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d003      	beq.n	8015c12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015c0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8015c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c1a:	2100      	movs	r1, #0
 8015c1c:	6039      	str	r1, [r7, #0]
 8015c1e:	f003 0320 	and.w	r3, r3, #32
 8015c22:	607b      	str	r3, [r7, #4]
 8015c24:	e9d7 1200 	ldrd	r1, r2, [r7]
 8015c28:	460b      	mov	r3, r1
 8015c2a:	4313      	orrs	r3, r2
 8015c2c:	d011      	beq.n	8015c52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8015c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c32:	3328      	adds	r3, #40	@ 0x28
 8015c34:	2102      	movs	r1, #2
 8015c36:	4618      	mov	r0, r3
 8015c38:	f001 fa5c 	bl	80170f4 <RCCEx_PLL3_Config>
 8015c3c:	4603      	mov	r3, r0
 8015c3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8015c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d003      	beq.n	8015c52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015c4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8015c52:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d101      	bne.n	8015c5e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	e000      	b.n	8015c60 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8015c5e:	2301      	movs	r3, #1
}
 8015c60:	4618      	mov	r0, r3
 8015c62:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8015c66:	46bd      	mov	sp, r7
 8015c68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015c6c:	58024400 	.word	0x58024400

08015c70 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b090      	sub	sp, #64	@ 0x40
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8015c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015c7e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8015c82:	430b      	orrs	r3, r1
 8015c84:	f040 8094 	bne.w	8015db0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8015c88:	4b9e      	ldr	r3, [pc, #632]	@ (8015f04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015c8c:	f003 0307 	and.w	r3, r3, #7
 8015c90:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8015c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c94:	2b04      	cmp	r3, #4
 8015c96:	f200 8087 	bhi.w	8015da8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8015c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8015ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8015c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ca0:	08015cb5 	.word	0x08015cb5
 8015ca4:	08015cdd 	.word	0x08015cdd
 8015ca8:	08015d05 	.word	0x08015d05
 8015cac:	08015da1 	.word	0x08015da1
 8015cb0:	08015d2d 	.word	0x08015d2d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015cb4:	4b93      	ldr	r3, [pc, #588]	@ (8015f04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015cbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015cc0:	d108      	bne.n	8015cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8015cc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	f001 f810 	bl	8016cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8015ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015cd0:	f000 bd45 	b.w	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015cd8:	f000 bd41 	b.w	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015cdc:	4b89      	ldr	r3, [pc, #548]	@ (8015f04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015ce4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015ce8:	d108      	bne.n	8015cfc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015cea:	f107 0318 	add.w	r3, r7, #24
 8015cee:	4618      	mov	r0, r3
 8015cf0:	f000 fd54 	bl	801679c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8015cf4:	69bb      	ldr	r3, [r7, #24]
 8015cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015cf8:	f000 bd31 	b.w	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015d00:	f000 bd2d 	b.w	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8015d04:	4b7f      	ldr	r3, [pc, #508]	@ (8015f04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8015d0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015d10:	d108      	bne.n	8015d24 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015d12:	f107 030c 	add.w	r3, r7, #12
 8015d16:	4618      	mov	r0, r3
 8015d18:	f000 fe94 	bl	8016a44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015d20:	f000 bd1d 	b.w	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015d24:	2300      	movs	r3, #0
 8015d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015d28:	f000 bd19 	b.w	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8015d2c:	4b75      	ldr	r3, [pc, #468]	@ (8015f04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8015d34:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8015d36:	4b73      	ldr	r3, [pc, #460]	@ (8015f04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	f003 0304 	and.w	r3, r3, #4
 8015d3e:	2b04      	cmp	r3, #4
 8015d40:	d10c      	bne.n	8015d5c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8015d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d109      	bne.n	8015d5c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015d48:	4b6e      	ldr	r3, [pc, #440]	@ (8015f04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	08db      	lsrs	r3, r3, #3
 8015d4e:	f003 0303 	and.w	r3, r3, #3
 8015d52:	4a6d      	ldr	r2, [pc, #436]	@ (8015f08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8015d54:	fa22 f303 	lsr.w	r3, r2, r3
 8015d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015d5a:	e01f      	b.n	8015d9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8015d5c:	4b69      	ldr	r3, [pc, #420]	@ (8015f04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015d64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015d68:	d106      	bne.n	8015d78 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8015d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015d6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015d70:	d102      	bne.n	8015d78 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8015d72:	4b66      	ldr	r3, [pc, #408]	@ (8015f0c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8015d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015d76:	e011      	b.n	8015d9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8015d78:	4b62      	ldr	r3, [pc, #392]	@ (8015f04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015d80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015d84:	d106      	bne.n	8015d94 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8015d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015d88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015d8c:	d102      	bne.n	8015d94 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8015d8e:	4b60      	ldr	r3, [pc, #384]	@ (8015f10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8015d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015d92:	e003      	b.n	8015d9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8015d94:	2300      	movs	r3, #0
 8015d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8015d98:	f000 bce1 	b.w	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8015d9c:	f000 bcdf 	b.w	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8015da0:	4b5c      	ldr	r3, [pc, #368]	@ (8015f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8015da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015da4:	f000 bcdb 	b.w	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8015da8:	2300      	movs	r3, #0
 8015daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015dac:	f000 bcd7 	b.w	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8015db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015db4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8015db8:	430b      	orrs	r3, r1
 8015dba:	f040 80ad 	bne.w	8015f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8015dbe:	4b51      	ldr	r3, [pc, #324]	@ (8015f04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015dc2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8015dc6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8015dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015dce:	d056      	beq.n	8015e7e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8015dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015dd6:	f200 8090 	bhi.w	8015efa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8015dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ddc:	2bc0      	cmp	r3, #192	@ 0xc0
 8015dde:	f000 8088 	beq.w	8015ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8015de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015de4:	2bc0      	cmp	r3, #192	@ 0xc0
 8015de6:	f200 8088 	bhi.w	8015efa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8015dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dec:	2b80      	cmp	r3, #128	@ 0x80
 8015dee:	d032      	beq.n	8015e56 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8015df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015df2:	2b80      	cmp	r3, #128	@ 0x80
 8015df4:	f200 8081 	bhi.w	8015efa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8015df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d003      	beq.n	8015e06 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8015dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e00:	2b40      	cmp	r3, #64	@ 0x40
 8015e02:	d014      	beq.n	8015e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8015e04:	e079      	b.n	8015efa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015e06:	4b3f      	ldr	r3, [pc, #252]	@ (8015f04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015e0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015e12:	d108      	bne.n	8015e26 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8015e14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015e18:	4618      	mov	r0, r3
 8015e1a:	f000 ff67 	bl	8016cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8015e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015e22:	f000 bc9c 	b.w	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015e26:	2300      	movs	r3, #0
 8015e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015e2a:	f000 bc98 	b.w	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015e2e:	4b35      	ldr	r3, [pc, #212]	@ (8015f04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015e36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015e3a:	d108      	bne.n	8015e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015e3c:	f107 0318 	add.w	r3, r7, #24
 8015e40:	4618      	mov	r0, r3
 8015e42:	f000 fcab 	bl	801679c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8015e46:	69bb      	ldr	r3, [r7, #24]
 8015e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015e4a:	f000 bc88 	b.w	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015e4e:	2300      	movs	r3, #0
 8015e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015e52:	f000 bc84 	b.w	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8015e56:	4b2b      	ldr	r3, [pc, #172]	@ (8015f04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8015e5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015e62:	d108      	bne.n	8015e76 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015e64:	f107 030c 	add.w	r3, r7, #12
 8015e68:	4618      	mov	r0, r3
 8015e6a:	f000 fdeb 	bl	8016a44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015e72:	f000 bc74 	b.w	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015e76:	2300      	movs	r3, #0
 8015e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015e7a:	f000 bc70 	b.w	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8015e7e:	4b21      	ldr	r3, [pc, #132]	@ (8015f04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015e82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8015e86:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8015e88:	4b1e      	ldr	r3, [pc, #120]	@ (8015f04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	f003 0304 	and.w	r3, r3, #4
 8015e90:	2b04      	cmp	r3, #4
 8015e92:	d10c      	bne.n	8015eae <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8015e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d109      	bne.n	8015eae <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8015f04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	08db      	lsrs	r3, r3, #3
 8015ea0:	f003 0303 	and.w	r3, r3, #3
 8015ea4:	4a18      	ldr	r2, [pc, #96]	@ (8015f08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8015ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8015eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015eac:	e01f      	b.n	8015eee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8015eae:	4b15      	ldr	r3, [pc, #84]	@ (8015f04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015eb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015eba:	d106      	bne.n	8015eca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8015ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ebe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015ec2:	d102      	bne.n	8015eca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8015ec4:	4b11      	ldr	r3, [pc, #68]	@ (8015f0c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8015ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015ec8:	e011      	b.n	8015eee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8015eca:	4b0e      	ldr	r3, [pc, #56]	@ (8015f04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015ed2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015ed6:	d106      	bne.n	8015ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8015ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015eda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015ede:	d102      	bne.n	8015ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8015ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8015f10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8015ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015ee4:	e003      	b.n	8015eee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8015ee6:	2300      	movs	r3, #0
 8015ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8015eea:	f000 bc38 	b.w	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8015eee:	f000 bc36 	b.w	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8015ef2:	4b08      	ldr	r3, [pc, #32]	@ (8015f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8015ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015ef6:	f000 bc32 	b.w	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8015efa:	2300      	movs	r3, #0
 8015efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015efe:	f000 bc2e 	b.w	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8015f02:	bf00      	nop
 8015f04:	58024400 	.word	0x58024400
 8015f08:	03d09000 	.word	0x03d09000
 8015f0c:	003d0900 	.word	0x003d0900
 8015f10:	017d7840 	.word	0x017d7840
 8015f14:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8015f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015f1c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8015f20:	430b      	orrs	r3, r1
 8015f22:	f040 809c 	bne.w	801605e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8015f26:	4b9e      	ldr	r3, [pc, #632]	@ (80161a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015f2a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8015f2e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8015f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8015f36:	d054      	beq.n	8015fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8015f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8015f3e:	f200 808b 	bhi.w	8016058 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8015f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f44:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8015f48:	f000 8083 	beq.w	8016052 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8015f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f4e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8015f52:	f200 8081 	bhi.w	8016058 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8015f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015f5c:	d02f      	beq.n	8015fbe <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8015f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015f64:	d878      	bhi.n	8016058 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8015f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d004      	beq.n	8015f76 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8015f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8015f72:	d012      	beq.n	8015f9a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8015f74:	e070      	b.n	8016058 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015f76:	4b8a      	ldr	r3, [pc, #552]	@ (80161a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015f7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015f82:	d107      	bne.n	8015f94 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8015f84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015f88:	4618      	mov	r0, r3
 8015f8a:	f000 feaf 	bl	8016cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8015f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015f92:	e3e4      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015f94:	2300      	movs	r3, #0
 8015f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015f98:	e3e1      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015f9a:	4b81      	ldr	r3, [pc, #516]	@ (80161a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015fa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015fa6:	d107      	bne.n	8015fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015fa8:	f107 0318 	add.w	r3, r7, #24
 8015fac:	4618      	mov	r0, r3
 8015fae:	f000 fbf5 	bl	801679c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8015fb2:	69bb      	ldr	r3, [r7, #24]
 8015fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015fb6:	e3d2      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015fb8:	2300      	movs	r3, #0
 8015fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015fbc:	e3cf      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8015fbe:	4b78      	ldr	r3, [pc, #480]	@ (80161a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8015fc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015fca:	d107      	bne.n	8015fdc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015fcc:	f107 030c 	add.w	r3, r7, #12
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f000 fd37 	bl	8016a44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015fda:	e3c0      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015fdc:	2300      	movs	r3, #0
 8015fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015fe0:	e3bd      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8015fe2:	4b6f      	ldr	r3, [pc, #444]	@ (80161a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015fe6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8015fea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8015fec:	4b6c      	ldr	r3, [pc, #432]	@ (80161a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	f003 0304 	and.w	r3, r3, #4
 8015ff4:	2b04      	cmp	r3, #4
 8015ff6:	d10c      	bne.n	8016012 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8015ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d109      	bne.n	8016012 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015ffe:	4b68      	ldr	r3, [pc, #416]	@ (80161a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	08db      	lsrs	r3, r3, #3
 8016004:	f003 0303 	and.w	r3, r3, #3
 8016008:	4a66      	ldr	r2, [pc, #408]	@ (80161a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801600a:	fa22 f303 	lsr.w	r3, r2, r3
 801600e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016010:	e01e      	b.n	8016050 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8016012:	4b63      	ldr	r3, [pc, #396]	@ (80161a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801601a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801601e:	d106      	bne.n	801602e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8016020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016022:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016026:	d102      	bne.n	801602e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8016028:	4b5f      	ldr	r3, [pc, #380]	@ (80161a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801602a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801602c:	e010      	b.n	8016050 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801602e:	4b5c      	ldr	r3, [pc, #368]	@ (80161a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016036:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801603a:	d106      	bne.n	801604a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 801603c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801603e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016042:	d102      	bne.n	801604a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8016044:	4b59      	ldr	r3, [pc, #356]	@ (80161ac <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8016046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016048:	e002      	b.n	8016050 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801604a:	2300      	movs	r3, #0
 801604c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801604e:	e386      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8016050:	e385      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8016052:	4b57      	ldr	r3, [pc, #348]	@ (80161b0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8016054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016056:	e382      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8016058:	2300      	movs	r3, #0
 801605a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801605c:	e37f      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801605e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016062:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8016066:	430b      	orrs	r3, r1
 8016068:	f040 80a7 	bne.w	80161ba <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801606c:	4b4c      	ldr	r3, [pc, #304]	@ (80161a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801606e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016070:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8016074:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8016076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016078:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801607c:	d055      	beq.n	801612a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 801607e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016080:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8016084:	f200 8096 	bhi.w	80161b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8016088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801608a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801608e:	f000 8084 	beq.w	801619a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8016092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016094:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8016098:	f200 808c 	bhi.w	80161b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801609c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801609e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80160a2:	d030      	beq.n	8016106 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80160a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80160aa:	f200 8083 	bhi.w	80161b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80160ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d004      	beq.n	80160be <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80160b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80160ba:	d012      	beq.n	80160e2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80160bc:	e07a      	b.n	80161b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80160be:	4b38      	ldr	r3, [pc, #224]	@ (80161a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80160c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80160ca:	d107      	bne.n	80160dc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80160cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80160d0:	4618      	mov	r0, r3
 80160d2:	f000 fe0b 	bl	8016cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80160d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80160da:	e340      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80160dc:	2300      	movs	r3, #0
 80160de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80160e0:	e33d      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80160e2:	4b2f      	ldr	r3, [pc, #188]	@ (80161a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80160ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80160ee:	d107      	bne.n	8016100 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80160f0:	f107 0318 	add.w	r3, r7, #24
 80160f4:	4618      	mov	r0, r3
 80160f6:	f000 fb51 	bl	801679c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80160fa:	69bb      	ldr	r3, [r7, #24]
 80160fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80160fe:	e32e      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016100:	2300      	movs	r3, #0
 8016102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016104:	e32b      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8016106:	4b26      	ldr	r3, [pc, #152]	@ (80161a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801610e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016112:	d107      	bne.n	8016124 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016114:	f107 030c 	add.w	r3, r7, #12
 8016118:	4618      	mov	r0, r3
 801611a:	f000 fc93 	bl	8016a44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016122:	e31c      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016124:	2300      	movs	r3, #0
 8016126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016128:	e319      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801612a:	4b1d      	ldr	r3, [pc, #116]	@ (80161a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801612c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801612e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8016132:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8016134:	4b1a      	ldr	r3, [pc, #104]	@ (80161a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	f003 0304 	and.w	r3, r3, #4
 801613c:	2b04      	cmp	r3, #4
 801613e:	d10c      	bne.n	801615a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8016140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016142:	2b00      	cmp	r3, #0
 8016144:	d109      	bne.n	801615a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8016146:	4b16      	ldr	r3, [pc, #88]	@ (80161a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	08db      	lsrs	r3, r3, #3
 801614c:	f003 0303 	and.w	r3, r3, #3
 8016150:	4a14      	ldr	r2, [pc, #80]	@ (80161a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8016152:	fa22 f303 	lsr.w	r3, r2, r3
 8016156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016158:	e01e      	b.n	8016198 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801615a:	4b11      	ldr	r3, [pc, #68]	@ (80161a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016166:	d106      	bne.n	8016176 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8016168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801616a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801616e:	d102      	bne.n	8016176 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8016170:	4b0d      	ldr	r3, [pc, #52]	@ (80161a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8016172:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016174:	e010      	b.n	8016198 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8016176:	4b0a      	ldr	r3, [pc, #40]	@ (80161a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801617e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016182:	d106      	bne.n	8016192 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8016184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016186:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801618a:	d102      	bne.n	8016192 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801618c:	4b07      	ldr	r3, [pc, #28]	@ (80161ac <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801618e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016190:	e002      	b.n	8016198 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8016192:	2300      	movs	r3, #0
 8016194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8016196:	e2e2      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8016198:	e2e1      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801619a:	4b05      	ldr	r3, [pc, #20]	@ (80161b0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 801619c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801619e:	e2de      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80161a0:	58024400 	.word	0x58024400
 80161a4:	03d09000 	.word	0x03d09000
 80161a8:	003d0900 	.word	0x003d0900
 80161ac:	017d7840 	.word	0x017d7840
 80161b0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80161b4:	2300      	movs	r3, #0
 80161b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80161b8:	e2d1      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80161ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80161be:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80161c2:	430b      	orrs	r3, r1
 80161c4:	f040 809c 	bne.w	8016300 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80161c8:	4b93      	ldr	r3, [pc, #588]	@ (8016418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80161ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80161cc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80161d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80161d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80161d8:	d054      	beq.n	8016284 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80161da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80161e0:	f200 808b 	bhi.w	80162fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80161e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80161ea:	f000 8083 	beq.w	80162f4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80161ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80161f4:	f200 8081 	bhi.w	80162fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80161f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80161fe:	d02f      	beq.n	8016260 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8016200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016206:	d878      	bhi.n	80162fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8016208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801620a:	2b00      	cmp	r3, #0
 801620c:	d004      	beq.n	8016218 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 801620e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016210:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016214:	d012      	beq.n	801623c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8016216:	e070      	b.n	80162fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8016218:	4b7f      	ldr	r3, [pc, #508]	@ (8016418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8016220:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8016224:	d107      	bne.n	8016236 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8016226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801622a:	4618      	mov	r0, r3
 801622c:	f000 fd5e 	bl	8016cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8016230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016234:	e293      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016236:	2300      	movs	r3, #0
 8016238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801623a:	e290      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801623c:	4b76      	ldr	r3, [pc, #472]	@ (8016418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016244:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016248:	d107      	bne.n	801625a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801624a:	f107 0318 	add.w	r3, r7, #24
 801624e:	4618      	mov	r0, r3
 8016250:	f000 faa4 	bl	801679c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8016254:	69bb      	ldr	r3, [r7, #24]
 8016256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016258:	e281      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801625a:	2300      	movs	r3, #0
 801625c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801625e:	e27e      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8016260:	4b6d      	ldr	r3, [pc, #436]	@ (8016418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016268:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801626c:	d107      	bne.n	801627e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801626e:	f107 030c 	add.w	r3, r7, #12
 8016272:	4618      	mov	r0, r3
 8016274:	f000 fbe6 	bl	8016a44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801627c:	e26f      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801627e:	2300      	movs	r3, #0
 8016280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016282:	e26c      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8016284:	4b64      	ldr	r3, [pc, #400]	@ (8016418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8016286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016288:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801628c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801628e:	4b62      	ldr	r3, [pc, #392]	@ (8016418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	f003 0304 	and.w	r3, r3, #4
 8016296:	2b04      	cmp	r3, #4
 8016298:	d10c      	bne.n	80162b4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 801629a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801629c:	2b00      	cmp	r3, #0
 801629e:	d109      	bne.n	80162b4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80162a0:	4b5d      	ldr	r3, [pc, #372]	@ (8016418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	08db      	lsrs	r3, r3, #3
 80162a6:	f003 0303 	and.w	r3, r3, #3
 80162aa:	4a5c      	ldr	r2, [pc, #368]	@ (801641c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80162ac:	fa22 f303 	lsr.w	r3, r2, r3
 80162b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80162b2:	e01e      	b.n	80162f2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80162b4:	4b58      	ldr	r3, [pc, #352]	@ (8016418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80162bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80162c0:	d106      	bne.n	80162d0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80162c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80162c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80162c8:	d102      	bne.n	80162d0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80162ca:	4b55      	ldr	r3, [pc, #340]	@ (8016420 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80162cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80162ce:	e010      	b.n	80162f2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80162d0:	4b51      	ldr	r3, [pc, #324]	@ (8016418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80162d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80162dc:	d106      	bne.n	80162ec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80162de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80162e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80162e4:	d102      	bne.n	80162ec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80162e6:	4b4f      	ldr	r3, [pc, #316]	@ (8016424 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80162e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80162ea:	e002      	b.n	80162f2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80162ec:	2300      	movs	r3, #0
 80162ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80162f0:	e235      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80162f2:	e234      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80162f4:	4b4c      	ldr	r3, [pc, #304]	@ (8016428 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80162f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80162f8:	e231      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80162fa:	2300      	movs	r3, #0
 80162fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80162fe:	e22e      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8016300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016304:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8016308:	430b      	orrs	r3, r1
 801630a:	f040 808f 	bne.w	801642c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801630e:	4b42      	ldr	r3, [pc, #264]	@ (8016418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8016310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016312:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8016316:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8016318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801631a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801631e:	d06b      	beq.n	80163f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8016320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016322:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8016326:	d874      	bhi.n	8016412 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8016328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801632a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801632e:	d056      	beq.n	80163de <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8016330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016332:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8016336:	d86c      	bhi.n	8016412 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8016338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801633a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801633e:	d03b      	beq.n	80163b8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8016340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016342:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8016346:	d864      	bhi.n	8016412 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8016348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801634a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801634e:	d021      	beq.n	8016394 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8016350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016352:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016356:	d85c      	bhi.n	8016412 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8016358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801635a:	2b00      	cmp	r3, #0
 801635c:	d004      	beq.n	8016368 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 801635e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016364:	d004      	beq.n	8016370 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8016366:	e054      	b.n	8016412 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8016368:	f7fe fa4c 	bl	8014804 <HAL_RCC_GetPCLK1Freq>
 801636c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801636e:	e1f6      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8016370:	4b29      	ldr	r3, [pc, #164]	@ (8016418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016378:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801637c:	d107      	bne.n	801638e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801637e:	f107 0318 	add.w	r3, r7, #24
 8016382:	4618      	mov	r0, r3
 8016384:	f000 fa0a 	bl	801679c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8016388:	69fb      	ldr	r3, [r7, #28]
 801638a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801638c:	e1e7      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801638e:	2300      	movs	r3, #0
 8016390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016392:	e1e4      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8016394:	4b20      	ldr	r3, [pc, #128]	@ (8016418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801639c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80163a0:	d107      	bne.n	80163b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80163a2:	f107 030c 	add.w	r3, r7, #12
 80163a6:	4618      	mov	r0, r3
 80163a8:	f000 fb4c 	bl	8016a44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80163ac:	693b      	ldr	r3, [r7, #16]
 80163ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80163b0:	e1d5      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80163b2:	2300      	movs	r3, #0
 80163b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80163b6:	e1d2      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80163b8:	4b17      	ldr	r3, [pc, #92]	@ (8016418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	f003 0304 	and.w	r3, r3, #4
 80163c0:	2b04      	cmp	r3, #4
 80163c2:	d109      	bne.n	80163d8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80163c4:	4b14      	ldr	r3, [pc, #80]	@ (8016418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	08db      	lsrs	r3, r3, #3
 80163ca:	f003 0303 	and.w	r3, r3, #3
 80163ce:	4a13      	ldr	r2, [pc, #76]	@ (801641c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80163d0:	fa22 f303 	lsr.w	r3, r2, r3
 80163d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80163d6:	e1c2      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80163d8:	2300      	movs	r3, #0
 80163da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80163dc:	e1bf      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80163de:	4b0e      	ldr	r3, [pc, #56]	@ (8016418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80163e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80163ea:	d102      	bne.n	80163f2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80163ec:	4b0c      	ldr	r3, [pc, #48]	@ (8016420 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80163ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80163f0:	e1b5      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80163f2:	2300      	movs	r3, #0
 80163f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80163f6:	e1b2      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80163f8:	4b07      	ldr	r3, [pc, #28]	@ (8016418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016400:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016404:	d102      	bne.n	801640c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8016406:	4b07      	ldr	r3, [pc, #28]	@ (8016424 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8016408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801640a:	e1a8      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801640c:	2300      	movs	r3, #0
 801640e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016410:	e1a5      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8016412:	2300      	movs	r3, #0
 8016414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016416:	e1a2      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8016418:	58024400 	.word	0x58024400
 801641c:	03d09000 	.word	0x03d09000
 8016420:	003d0900 	.word	0x003d0900
 8016424:	017d7840 	.word	0x017d7840
 8016428:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801642c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016430:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8016434:	430b      	orrs	r3, r1
 8016436:	d173      	bne.n	8016520 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8016438:	4b9c      	ldr	r3, [pc, #624]	@ (80166ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801643a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801643c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8016440:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8016442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016444:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016448:	d02f      	beq.n	80164aa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 801644a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801644c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016450:	d863      	bhi.n	801651a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8016452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016454:	2b00      	cmp	r3, #0
 8016456:	d004      	beq.n	8016462 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8016458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801645a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801645e:	d012      	beq.n	8016486 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8016460:	e05b      	b.n	801651a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8016462:	4b92      	ldr	r3, [pc, #584]	@ (80166ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801646a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801646e:	d107      	bne.n	8016480 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016470:	f107 0318 	add.w	r3, r7, #24
 8016474:	4618      	mov	r0, r3
 8016476:	f000 f991 	bl	801679c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801647a:	69bb      	ldr	r3, [r7, #24]
 801647c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801647e:	e16e      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016480:	2300      	movs	r3, #0
 8016482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016484:	e16b      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8016486:	4b89      	ldr	r3, [pc, #548]	@ (80166ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801648e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016492:	d107      	bne.n	80164a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016494:	f107 030c 	add.w	r3, r7, #12
 8016498:	4618      	mov	r0, r3
 801649a:	f000 fad3 	bl	8016a44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801649e:	697b      	ldr	r3, [r7, #20]
 80164a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80164a2:	e15c      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80164a4:	2300      	movs	r3, #0
 80164a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80164a8:	e159      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80164aa:	4b80      	ldr	r3, [pc, #512]	@ (80166ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80164ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80164ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80164b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80164b4:	4b7d      	ldr	r3, [pc, #500]	@ (80166ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	f003 0304 	and.w	r3, r3, #4
 80164bc:	2b04      	cmp	r3, #4
 80164be:	d10c      	bne.n	80164da <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80164c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d109      	bne.n	80164da <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80164c6:	4b79      	ldr	r3, [pc, #484]	@ (80166ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	08db      	lsrs	r3, r3, #3
 80164cc:	f003 0303 	and.w	r3, r3, #3
 80164d0:	4a77      	ldr	r2, [pc, #476]	@ (80166b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80164d2:	fa22 f303 	lsr.w	r3, r2, r3
 80164d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80164d8:	e01e      	b.n	8016518 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80164da:	4b74      	ldr	r3, [pc, #464]	@ (80166ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80164e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80164e6:	d106      	bne.n	80164f6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80164e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80164ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80164ee:	d102      	bne.n	80164f6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80164f0:	4b70      	ldr	r3, [pc, #448]	@ (80166b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80164f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80164f4:	e010      	b.n	8016518 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80164f6:	4b6d      	ldr	r3, [pc, #436]	@ (80166ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80164fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016502:	d106      	bne.n	8016512 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8016504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801650a:	d102      	bne.n	8016512 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801650c:	4b6a      	ldr	r3, [pc, #424]	@ (80166b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801650e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016510:	e002      	b.n	8016518 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8016512:	2300      	movs	r3, #0
 8016514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8016516:	e122      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8016518:	e121      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801651a:	2300      	movs	r3, #0
 801651c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801651e:	e11e      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8016520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016524:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8016528:	430b      	orrs	r3, r1
 801652a:	d133      	bne.n	8016594 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801652c:	4b5f      	ldr	r3, [pc, #380]	@ (80166ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801652e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8016534:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8016536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016538:	2b00      	cmp	r3, #0
 801653a:	d004      	beq.n	8016546 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 801653c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801653e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016542:	d012      	beq.n	801656a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8016544:	e023      	b.n	801658e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8016546:	4b59      	ldr	r3, [pc, #356]	@ (80166ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801654e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8016552:	d107      	bne.n	8016564 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8016554:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016558:	4618      	mov	r0, r3
 801655a:	f000 fbc7 	bl	8016cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801655e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016562:	e0fc      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016564:	2300      	movs	r3, #0
 8016566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016568:	e0f9      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801656a:	4b50      	ldr	r3, [pc, #320]	@ (80166ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016572:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016576:	d107      	bne.n	8016588 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016578:	f107 0318 	add.w	r3, r7, #24
 801657c:	4618      	mov	r0, r3
 801657e:	f000 f90d 	bl	801679c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8016582:	6a3b      	ldr	r3, [r7, #32]
 8016584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016586:	e0ea      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016588:	2300      	movs	r3, #0
 801658a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801658c:	e0e7      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801658e:	2300      	movs	r3, #0
 8016590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016592:	e0e4      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8016594:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016598:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 801659c:	430b      	orrs	r3, r1
 801659e:	f040 808d 	bne.w	80166bc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80165a2:	4b42      	ldr	r3, [pc, #264]	@ (80166ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80165a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80165a6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80165aa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80165ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80165b2:	d06b      	beq.n	801668c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80165b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80165ba:	d874      	bhi.n	80166a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80165bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80165c2:	d056      	beq.n	8016672 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80165c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80165ca:	d86c      	bhi.n	80166a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80165cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80165d2:	d03b      	beq.n	801664c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80165d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80165da:	d864      	bhi.n	80166a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80165dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80165e2:	d021      	beq.n	8016628 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80165e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80165ea:	d85c      	bhi.n	80166a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80165ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d004      	beq.n	80165fc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80165f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80165f8:	d004      	beq.n	8016604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80165fa:	e054      	b.n	80166a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80165fc:	f000 f8b8 	bl	8016770 <HAL_RCCEx_GetD3PCLK1Freq>
 8016600:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8016602:	e0ac      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8016604:	4b29      	ldr	r3, [pc, #164]	@ (80166ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801660c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016610:	d107      	bne.n	8016622 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016612:	f107 0318 	add.w	r3, r7, #24
 8016616:	4618      	mov	r0, r3
 8016618:	f000 f8c0 	bl	801679c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801661c:	69fb      	ldr	r3, [r7, #28]
 801661e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016620:	e09d      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016622:	2300      	movs	r3, #0
 8016624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016626:	e09a      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8016628:	4b20      	ldr	r3, [pc, #128]	@ (80166ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016634:	d107      	bne.n	8016646 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016636:	f107 030c 	add.w	r3, r7, #12
 801663a:	4618      	mov	r0, r3
 801663c:	f000 fa02 	bl	8016a44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8016640:	693b      	ldr	r3, [r7, #16]
 8016642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016644:	e08b      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016646:	2300      	movs	r3, #0
 8016648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801664a:	e088      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801664c:	4b17      	ldr	r3, [pc, #92]	@ (80166ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	f003 0304 	and.w	r3, r3, #4
 8016654:	2b04      	cmp	r3, #4
 8016656:	d109      	bne.n	801666c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8016658:	4b14      	ldr	r3, [pc, #80]	@ (80166ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	08db      	lsrs	r3, r3, #3
 801665e:	f003 0303 	and.w	r3, r3, #3
 8016662:	4a13      	ldr	r2, [pc, #76]	@ (80166b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8016664:	fa22 f303 	lsr.w	r3, r2, r3
 8016668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801666a:	e078      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801666c:	2300      	movs	r3, #0
 801666e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016670:	e075      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8016672:	4b0e      	ldr	r3, [pc, #56]	@ (80166ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801667a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801667e:	d102      	bne.n	8016686 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8016680:	4b0c      	ldr	r3, [pc, #48]	@ (80166b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8016682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016684:	e06b      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016686:	2300      	movs	r3, #0
 8016688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801668a:	e068      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801668c:	4b07      	ldr	r3, [pc, #28]	@ (80166ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016694:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016698:	d102      	bne.n	80166a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 801669a:	4b07      	ldr	r3, [pc, #28]	@ (80166b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801669c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801669e:	e05e      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80166a0:	2300      	movs	r3, #0
 80166a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80166a4:	e05b      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80166a6:	2300      	movs	r3, #0
 80166a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80166aa:	e058      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80166ac:	58024400 	.word	0x58024400
 80166b0:	03d09000 	.word	0x03d09000
 80166b4:	003d0900 	.word	0x003d0900
 80166b8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80166bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80166c0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80166c4:	430b      	orrs	r3, r1
 80166c6:	d148      	bne.n	801675a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80166c8:	4b27      	ldr	r3, [pc, #156]	@ (8016768 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80166ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80166cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80166d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80166d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80166d8:	d02a      	beq.n	8016730 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80166da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80166e0:	d838      	bhi.n	8016754 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80166e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d004      	beq.n	80166f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80166e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80166ee:	d00d      	beq.n	801670c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80166f0:	e030      	b.n	8016754 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80166f2:	4b1d      	ldr	r3, [pc, #116]	@ (8016768 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80166fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80166fe:	d102      	bne.n	8016706 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8016700:	4b1a      	ldr	r3, [pc, #104]	@ (801676c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8016702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016704:	e02b      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016706:	2300      	movs	r3, #0
 8016708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801670a:	e028      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801670c:	4b16      	ldr	r3, [pc, #88]	@ (8016768 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8016714:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8016718:	d107      	bne.n	801672a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801671a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801671e:	4618      	mov	r0, r3
 8016720:	f000 fae4 	bl	8016cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8016724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016728:	e019      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801672a:	2300      	movs	r3, #0
 801672c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801672e:	e016      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8016730:	4b0d      	ldr	r3, [pc, #52]	@ (8016768 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016738:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801673c:	d107      	bne.n	801674e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801673e:	f107 0318 	add.w	r3, r7, #24
 8016742:	4618      	mov	r0, r3
 8016744:	f000 f82a 	bl	801679c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8016748:	69fb      	ldr	r3, [r7, #28]
 801674a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801674c:	e007      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801674e:	2300      	movs	r3, #0
 8016750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016752:	e004      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8016754:	2300      	movs	r3, #0
 8016756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016758:	e001      	b.n	801675e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 801675a:	2300      	movs	r3, #0
 801675c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 801675e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8016760:	4618      	mov	r0, r3
 8016762:	3740      	adds	r7, #64	@ 0x40
 8016764:	46bd      	mov	sp, r7
 8016766:	bd80      	pop	{r7, pc}
 8016768:	58024400 	.word	0x58024400
 801676c:	017d7840 	.word	0x017d7840

08016770 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8016774:	f7fe f816 	bl	80147a4 <HAL_RCC_GetHCLKFreq>
 8016778:	4602      	mov	r2, r0
 801677a:	4b06      	ldr	r3, [pc, #24]	@ (8016794 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801677c:	6a1b      	ldr	r3, [r3, #32]
 801677e:	091b      	lsrs	r3, r3, #4
 8016780:	f003 0307 	and.w	r3, r3, #7
 8016784:	4904      	ldr	r1, [pc, #16]	@ (8016798 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8016786:	5ccb      	ldrb	r3, [r1, r3]
 8016788:	f003 031f 	and.w	r3, r3, #31
 801678c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8016790:	4618      	mov	r0, r3
 8016792:	bd80      	pop	{r7, pc}
 8016794:	58024400 	.word	0x58024400
 8016798:	0801f604 	.word	0x0801f604

0801679c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801679c:	b480      	push	{r7}
 801679e:	b089      	sub	sp, #36	@ 0x24
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80167a4:	4ba1      	ldr	r3, [pc, #644]	@ (8016a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80167a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80167a8:	f003 0303 	and.w	r3, r3, #3
 80167ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80167ae:	4b9f      	ldr	r3, [pc, #636]	@ (8016a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80167b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80167b2:	0b1b      	lsrs	r3, r3, #12
 80167b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80167b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80167ba:	4b9c      	ldr	r3, [pc, #624]	@ (8016a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80167bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80167be:	091b      	lsrs	r3, r3, #4
 80167c0:	f003 0301 	and.w	r3, r3, #1
 80167c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80167c6:	4b99      	ldr	r3, [pc, #612]	@ (8016a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80167c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80167ca:	08db      	lsrs	r3, r3, #3
 80167cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80167d0:	693a      	ldr	r2, [r7, #16]
 80167d2:	fb02 f303 	mul.w	r3, r2, r3
 80167d6:	ee07 3a90 	vmov	s15, r3
 80167da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80167de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80167e2:	697b      	ldr	r3, [r7, #20]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	f000 8111 	beq.w	8016a0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80167ea:	69bb      	ldr	r3, [r7, #24]
 80167ec:	2b02      	cmp	r3, #2
 80167ee:	f000 8083 	beq.w	80168f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80167f2:	69bb      	ldr	r3, [r7, #24]
 80167f4:	2b02      	cmp	r3, #2
 80167f6:	f200 80a1 	bhi.w	801693c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80167fa:	69bb      	ldr	r3, [r7, #24]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d003      	beq.n	8016808 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8016800:	69bb      	ldr	r3, [r7, #24]
 8016802:	2b01      	cmp	r3, #1
 8016804:	d056      	beq.n	80168b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8016806:	e099      	b.n	801693c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016808:	4b88      	ldr	r3, [pc, #544]	@ (8016a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	f003 0320 	and.w	r3, r3, #32
 8016810:	2b00      	cmp	r3, #0
 8016812:	d02d      	beq.n	8016870 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8016814:	4b85      	ldr	r3, [pc, #532]	@ (8016a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	08db      	lsrs	r3, r3, #3
 801681a:	f003 0303 	and.w	r3, r3, #3
 801681e:	4a84      	ldr	r2, [pc, #528]	@ (8016a30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8016820:	fa22 f303 	lsr.w	r3, r2, r3
 8016824:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8016826:	68bb      	ldr	r3, [r7, #8]
 8016828:	ee07 3a90 	vmov	s15, r3
 801682c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016830:	697b      	ldr	r3, [r7, #20]
 8016832:	ee07 3a90 	vmov	s15, r3
 8016836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801683a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801683e:	4b7b      	ldr	r3, [pc, #492]	@ (8016a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8016840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016846:	ee07 3a90 	vmov	s15, r3
 801684a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801684e:	ed97 6a03 	vldr	s12, [r7, #12]
 8016852:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8016a34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8016856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801685a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801685e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016866:	ee67 7a27 	vmul.f32	s15, s14, s15
 801686a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801686e:	e087      	b.n	8016980 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8016870:	697b      	ldr	r3, [r7, #20]
 8016872:	ee07 3a90 	vmov	s15, r3
 8016876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801687a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8016a38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801687e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016882:	4b6a      	ldr	r3, [pc, #424]	@ (8016a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8016884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801688a:	ee07 3a90 	vmov	s15, r3
 801688e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016892:	ed97 6a03 	vldr	s12, [r7, #12]
 8016896:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8016a34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801689a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801689e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80168a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80168a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80168aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80168ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80168b2:	e065      	b.n	8016980 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80168b4:	697b      	ldr	r3, [r7, #20]
 80168b6:	ee07 3a90 	vmov	s15, r3
 80168ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80168be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8016a3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80168c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80168c6:	4b59      	ldr	r3, [pc, #356]	@ (8016a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80168c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80168ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80168ce:	ee07 3a90 	vmov	s15, r3
 80168d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80168d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80168da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8016a34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80168de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80168e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80168e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80168ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80168ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80168f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80168f6:	e043      	b.n	8016980 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80168f8:	697b      	ldr	r3, [r7, #20]
 80168fa:	ee07 3a90 	vmov	s15, r3
 80168fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016902:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8016a40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8016906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801690a:	4b48      	ldr	r3, [pc, #288]	@ (8016a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801690c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801690e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016912:	ee07 3a90 	vmov	s15, r3
 8016916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801691a:	ed97 6a03 	vldr	s12, [r7, #12]
 801691e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8016a34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8016922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801692a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801692e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801693a:	e021      	b.n	8016980 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801693c:	697b      	ldr	r3, [r7, #20]
 801693e:	ee07 3a90 	vmov	s15, r3
 8016942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016946:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8016a3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801694a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801694e:	4b37      	ldr	r3, [pc, #220]	@ (8016a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8016950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016956:	ee07 3a90 	vmov	s15, r3
 801695a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801695e:	ed97 6a03 	vldr	s12, [r7, #12]
 8016962:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8016a34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8016966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801696a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801696e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016976:	ee67 7a27 	vmul.f32	s15, s14, s15
 801697a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801697e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8016980:	4b2a      	ldr	r3, [pc, #168]	@ (8016a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8016982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016984:	0a5b      	lsrs	r3, r3, #9
 8016986:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801698a:	ee07 3a90 	vmov	s15, r3
 801698e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016992:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016996:	ee37 7a87 	vadd.f32	s14, s15, s14
 801699a:	edd7 6a07 	vldr	s13, [r7, #28]
 801699e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80169a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80169a6:	ee17 2a90 	vmov	r2, s15
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80169ae:	4b1f      	ldr	r3, [pc, #124]	@ (8016a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80169b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80169b2:	0c1b      	lsrs	r3, r3, #16
 80169b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80169b8:	ee07 3a90 	vmov	s15, r3
 80169bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80169c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80169c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80169c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80169cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80169d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80169d4:	ee17 2a90 	vmov	r2, s15
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80169dc:	4b13      	ldr	r3, [pc, #76]	@ (8016a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80169de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80169e0:	0e1b      	lsrs	r3, r3, #24
 80169e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80169e6:	ee07 3a90 	vmov	s15, r3
 80169ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80169ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80169f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80169f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80169fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80169fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016a02:	ee17 2a90 	vmov	r2, s15
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8016a0a:	e008      	b.n	8016a1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	2200      	movs	r2, #0
 8016a10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	2200      	movs	r2, #0
 8016a16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	609a      	str	r2, [r3, #8]
}
 8016a1e:	bf00      	nop
 8016a20:	3724      	adds	r7, #36	@ 0x24
 8016a22:	46bd      	mov	sp, r7
 8016a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a28:	4770      	bx	lr
 8016a2a:	bf00      	nop
 8016a2c:	58024400 	.word	0x58024400
 8016a30:	03d09000 	.word	0x03d09000
 8016a34:	46000000 	.word	0x46000000
 8016a38:	4c742400 	.word	0x4c742400
 8016a3c:	4a742400 	.word	0x4a742400
 8016a40:	4bbebc20 	.word	0x4bbebc20

08016a44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8016a44:	b480      	push	{r7}
 8016a46:	b089      	sub	sp, #36	@ 0x24
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8016a4c:	4ba1      	ldr	r3, [pc, #644]	@ (8016cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016a50:	f003 0303 	and.w	r3, r3, #3
 8016a54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8016a56:	4b9f      	ldr	r3, [pc, #636]	@ (8016cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016a5a:	0d1b      	lsrs	r3, r3, #20
 8016a5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016a60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8016a62:	4b9c      	ldr	r3, [pc, #624]	@ (8016cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016a66:	0a1b      	lsrs	r3, r3, #8
 8016a68:	f003 0301 	and.w	r3, r3, #1
 8016a6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8016a6e:	4b99      	ldr	r3, [pc, #612]	@ (8016cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016a72:	08db      	lsrs	r3, r3, #3
 8016a74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016a78:	693a      	ldr	r2, [r7, #16]
 8016a7a:	fb02 f303 	mul.w	r3, r2, r3
 8016a7e:	ee07 3a90 	vmov	s15, r3
 8016a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016a86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8016a8a:	697b      	ldr	r3, [r7, #20]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	f000 8111 	beq.w	8016cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8016a92:	69bb      	ldr	r3, [r7, #24]
 8016a94:	2b02      	cmp	r3, #2
 8016a96:	f000 8083 	beq.w	8016ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8016a9a:	69bb      	ldr	r3, [r7, #24]
 8016a9c:	2b02      	cmp	r3, #2
 8016a9e:	f200 80a1 	bhi.w	8016be4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8016aa2:	69bb      	ldr	r3, [r7, #24]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d003      	beq.n	8016ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8016aa8:	69bb      	ldr	r3, [r7, #24]
 8016aaa:	2b01      	cmp	r3, #1
 8016aac:	d056      	beq.n	8016b5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8016aae:	e099      	b.n	8016be4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016ab0:	4b88      	ldr	r3, [pc, #544]	@ (8016cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	f003 0320 	and.w	r3, r3, #32
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d02d      	beq.n	8016b18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8016abc:	4b85      	ldr	r3, [pc, #532]	@ (8016cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	08db      	lsrs	r3, r3, #3
 8016ac2:	f003 0303 	and.w	r3, r3, #3
 8016ac6:	4a84      	ldr	r2, [pc, #528]	@ (8016cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8016ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8016acc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8016ace:	68bb      	ldr	r3, [r7, #8]
 8016ad0:	ee07 3a90 	vmov	s15, r3
 8016ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016ad8:	697b      	ldr	r3, [r7, #20]
 8016ada:	ee07 3a90 	vmov	s15, r3
 8016ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016ae6:	4b7b      	ldr	r3, [pc, #492]	@ (8016cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016aee:	ee07 3a90 	vmov	s15, r3
 8016af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8016afa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8016cdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8016afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016b12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8016b16:	e087      	b.n	8016c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8016b18:	697b      	ldr	r3, [r7, #20]
 8016b1a:	ee07 3a90 	vmov	s15, r3
 8016b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016b22:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8016ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8016b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016b2a:	4b6a      	ldr	r3, [pc, #424]	@ (8016cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016b32:	ee07 3a90 	vmov	s15, r3
 8016b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8016b3e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8016cdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8016b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016b5a:	e065      	b.n	8016c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8016b5c:	697b      	ldr	r3, [r7, #20]
 8016b5e:	ee07 3a90 	vmov	s15, r3
 8016b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016b66:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8016ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8016b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016b6e:	4b59      	ldr	r3, [pc, #356]	@ (8016cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016b76:	ee07 3a90 	vmov	s15, r3
 8016b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8016b82:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8016cdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8016b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016b9e:	e043      	b.n	8016c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8016ba0:	697b      	ldr	r3, [r7, #20]
 8016ba2:	ee07 3a90 	vmov	s15, r3
 8016ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016baa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8016ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8016bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016bb2:	4b48      	ldr	r3, [pc, #288]	@ (8016cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016bba:	ee07 3a90 	vmov	s15, r3
 8016bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8016bc6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8016cdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8016bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016be2:	e021      	b.n	8016c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8016be4:	697b      	ldr	r3, [r7, #20]
 8016be6:	ee07 3a90 	vmov	s15, r3
 8016bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016bee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8016ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8016bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016bf6:	4b37      	ldr	r3, [pc, #220]	@ (8016cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016bfe:	ee07 3a90 	vmov	s15, r3
 8016c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8016c0a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8016cdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8016c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016c26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8016c28:	4b2a      	ldr	r3, [pc, #168]	@ (8016cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016c2c:	0a5b      	lsrs	r3, r3, #9
 8016c2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016c32:	ee07 3a90 	vmov	s15, r3
 8016c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016c3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016c3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016c42:	edd7 6a07 	vldr	s13, [r7, #28]
 8016c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016c4e:	ee17 2a90 	vmov	r2, s15
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8016c56:	4b1f      	ldr	r3, [pc, #124]	@ (8016cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016c5a:	0c1b      	lsrs	r3, r3, #16
 8016c5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016c60:	ee07 3a90 	vmov	s15, r3
 8016c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016c68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016c6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016c70:	edd7 6a07 	vldr	s13, [r7, #28]
 8016c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016c7c:	ee17 2a90 	vmov	r2, s15
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8016c84:	4b13      	ldr	r3, [pc, #76]	@ (8016cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016c88:	0e1b      	lsrs	r3, r3, #24
 8016c8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016c8e:	ee07 3a90 	vmov	s15, r3
 8016c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016c96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8016ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016caa:	ee17 2a90 	vmov	r2, s15
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8016cb2:	e008      	b.n	8016cc6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	2200      	movs	r2, #0
 8016cb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	2200      	movs	r2, #0
 8016cbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	609a      	str	r2, [r3, #8]
}
 8016cc6:	bf00      	nop
 8016cc8:	3724      	adds	r7, #36	@ 0x24
 8016cca:	46bd      	mov	sp, r7
 8016ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd0:	4770      	bx	lr
 8016cd2:	bf00      	nop
 8016cd4:	58024400 	.word	0x58024400
 8016cd8:	03d09000 	.word	0x03d09000
 8016cdc:	46000000 	.word	0x46000000
 8016ce0:	4c742400 	.word	0x4c742400
 8016ce4:	4a742400 	.word	0x4a742400
 8016ce8:	4bbebc20 	.word	0x4bbebc20

08016cec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8016cec:	b480      	push	{r7}
 8016cee:	b089      	sub	sp, #36	@ 0x24
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8016cf4:	4ba0      	ldr	r3, [pc, #640]	@ (8016f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016cf8:	f003 0303 	and.w	r3, r3, #3
 8016cfc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8016cfe:	4b9e      	ldr	r3, [pc, #632]	@ (8016f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d02:	091b      	lsrs	r3, r3, #4
 8016d04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016d08:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8016d0a:	4b9b      	ldr	r3, [pc, #620]	@ (8016f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d0e:	f003 0301 	and.w	r3, r3, #1
 8016d12:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8016d14:	4b98      	ldr	r3, [pc, #608]	@ (8016f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d18:	08db      	lsrs	r3, r3, #3
 8016d1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016d1e:	693a      	ldr	r2, [r7, #16]
 8016d20:	fb02 f303 	mul.w	r3, r2, r3
 8016d24:	ee07 3a90 	vmov	s15, r3
 8016d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016d2c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8016d30:	697b      	ldr	r3, [r7, #20]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	f000 8111 	beq.w	8016f5a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8016d38:	69bb      	ldr	r3, [r7, #24]
 8016d3a:	2b02      	cmp	r3, #2
 8016d3c:	f000 8083 	beq.w	8016e46 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8016d40:	69bb      	ldr	r3, [r7, #24]
 8016d42:	2b02      	cmp	r3, #2
 8016d44:	f200 80a1 	bhi.w	8016e8a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8016d48:	69bb      	ldr	r3, [r7, #24]
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d003      	beq.n	8016d56 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8016d4e:	69bb      	ldr	r3, [r7, #24]
 8016d50:	2b01      	cmp	r3, #1
 8016d52:	d056      	beq.n	8016e02 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8016d54:	e099      	b.n	8016e8a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016d56:	4b88      	ldr	r3, [pc, #544]	@ (8016f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	f003 0320 	and.w	r3, r3, #32
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d02d      	beq.n	8016dbe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8016d62:	4b85      	ldr	r3, [pc, #532]	@ (8016f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	08db      	lsrs	r3, r3, #3
 8016d68:	f003 0303 	and.w	r3, r3, #3
 8016d6c:	4a83      	ldr	r2, [pc, #524]	@ (8016f7c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8016d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8016d72:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8016d74:	68bb      	ldr	r3, [r7, #8]
 8016d76:	ee07 3a90 	vmov	s15, r3
 8016d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016d7e:	697b      	ldr	r3, [r7, #20]
 8016d80:	ee07 3a90 	vmov	s15, r3
 8016d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016d88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016d8c:	4b7a      	ldr	r3, [pc, #488]	@ (8016f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016d94:	ee07 3a90 	vmov	s15, r3
 8016d98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016d9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8016da0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8016f80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8016da4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016da8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016dac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016db0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016db8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8016dbc:	e087      	b.n	8016ece <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8016dbe:	697b      	ldr	r3, [r7, #20]
 8016dc0:	ee07 3a90 	vmov	s15, r3
 8016dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016dc8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8016f84 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8016dcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016dd0:	4b69      	ldr	r3, [pc, #420]	@ (8016f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016dd8:	ee07 3a90 	vmov	s15, r3
 8016ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016de0:	ed97 6a03 	vldr	s12, [r7, #12]
 8016de4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8016f80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8016de8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016dec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016df0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016df4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016dfc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016e00:	e065      	b.n	8016ece <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8016e02:	697b      	ldr	r3, [r7, #20]
 8016e04:	ee07 3a90 	vmov	s15, r3
 8016e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016e0c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8016f88 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8016e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016e14:	4b58      	ldr	r3, [pc, #352]	@ (8016f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e1c:	ee07 3a90 	vmov	s15, r3
 8016e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016e24:	ed97 6a03 	vldr	s12, [r7, #12]
 8016e28:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8016f80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8016e2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016e30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016e34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016e40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016e44:	e043      	b.n	8016ece <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8016e46:	697b      	ldr	r3, [r7, #20]
 8016e48:	ee07 3a90 	vmov	s15, r3
 8016e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016e50:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8016f8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8016e54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016e58:	4b47      	ldr	r3, [pc, #284]	@ (8016f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e60:	ee07 3a90 	vmov	s15, r3
 8016e64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016e68:	ed97 6a03 	vldr	s12, [r7, #12]
 8016e6c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8016f80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8016e70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016e74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016e78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016e7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016e84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016e88:	e021      	b.n	8016ece <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8016e8a:	697b      	ldr	r3, [r7, #20]
 8016e8c:	ee07 3a90 	vmov	s15, r3
 8016e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016e94:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8016f84 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8016e98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016e9c:	4b36      	ldr	r3, [pc, #216]	@ (8016f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016ea4:	ee07 3a90 	vmov	s15, r3
 8016ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016eac:	ed97 6a03 	vldr	s12, [r7, #12]
 8016eb0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8016f80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8016eb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016eb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016ebc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016ec0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016ec8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016ecc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8016ece:	4b2a      	ldr	r3, [pc, #168]	@ (8016f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016ed2:	0a5b      	lsrs	r3, r3, #9
 8016ed4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016ed8:	ee07 3a90 	vmov	s15, r3
 8016edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016ee0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016ee4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016ee8:	edd7 6a07 	vldr	s13, [r7, #28]
 8016eec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016ef4:	ee17 2a90 	vmov	r2, s15
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8016efc:	4b1e      	ldr	r3, [pc, #120]	@ (8016f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016f00:	0c1b      	lsrs	r3, r3, #16
 8016f02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016f06:	ee07 3a90 	vmov	s15, r3
 8016f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016f12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016f16:	edd7 6a07 	vldr	s13, [r7, #28]
 8016f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016f22:	ee17 2a90 	vmov	r2, s15
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8016f2a:	4b13      	ldr	r3, [pc, #76]	@ (8016f78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016f2e:	0e1b      	lsrs	r3, r3, #24
 8016f30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016f34:	ee07 3a90 	vmov	s15, r3
 8016f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016f40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016f44:	edd7 6a07 	vldr	s13, [r7, #28]
 8016f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016f50:	ee17 2a90 	vmov	r2, s15
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8016f58:	e008      	b.n	8016f6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	2200      	movs	r2, #0
 8016f5e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	2200      	movs	r2, #0
 8016f64:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	2200      	movs	r2, #0
 8016f6a:	609a      	str	r2, [r3, #8]
}
 8016f6c:	bf00      	nop
 8016f6e:	3724      	adds	r7, #36	@ 0x24
 8016f70:	46bd      	mov	sp, r7
 8016f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f76:	4770      	bx	lr
 8016f78:	58024400 	.word	0x58024400
 8016f7c:	03d09000 	.word	0x03d09000
 8016f80:	46000000 	.word	0x46000000
 8016f84:	4c742400 	.word	0x4c742400
 8016f88:	4a742400 	.word	0x4a742400
 8016f8c:	4bbebc20 	.word	0x4bbebc20

08016f90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8016f90:	b580      	push	{r7, lr}
 8016f92:	b084      	sub	sp, #16
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	6078      	str	r0, [r7, #4]
 8016f98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8016f9e:	4b53      	ldr	r3, [pc, #332]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 8016fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016fa2:	f003 0303 	and.w	r3, r3, #3
 8016fa6:	2b03      	cmp	r3, #3
 8016fa8:	d101      	bne.n	8016fae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8016faa:	2301      	movs	r3, #1
 8016fac:	e099      	b.n	80170e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8016fae:	4b4f      	ldr	r3, [pc, #316]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	4a4e      	ldr	r2, [pc, #312]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 8016fb4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8016fb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016fba:	f7f9 fd2f 	bl	8010a1c <HAL_GetTick>
 8016fbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8016fc0:	e008      	b.n	8016fd4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8016fc2:	f7f9 fd2b 	bl	8010a1c <HAL_GetTick>
 8016fc6:	4602      	mov	r2, r0
 8016fc8:	68bb      	ldr	r3, [r7, #8]
 8016fca:	1ad3      	subs	r3, r2, r3
 8016fcc:	2b02      	cmp	r3, #2
 8016fce:	d901      	bls.n	8016fd4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8016fd0:	2303      	movs	r3, #3
 8016fd2:	e086      	b.n	80170e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8016fd4:	4b45      	ldr	r3, [pc, #276]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d1f0      	bne.n	8016fc2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8016fe0:	4b42      	ldr	r3, [pc, #264]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 8016fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016fe4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	031b      	lsls	r3, r3, #12
 8016fee:	493f      	ldr	r1, [pc, #252]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 8016ff0:	4313      	orrs	r3, r2
 8016ff2:	628b      	str	r3, [r1, #40]	@ 0x28
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	685b      	ldr	r3, [r3, #4]
 8016ff8:	3b01      	subs	r3, #1
 8016ffa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	689b      	ldr	r3, [r3, #8]
 8017002:	3b01      	subs	r3, #1
 8017004:	025b      	lsls	r3, r3, #9
 8017006:	b29b      	uxth	r3, r3
 8017008:	431a      	orrs	r2, r3
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	68db      	ldr	r3, [r3, #12]
 801700e:	3b01      	subs	r3, #1
 8017010:	041b      	lsls	r3, r3, #16
 8017012:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8017016:	431a      	orrs	r2, r3
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	691b      	ldr	r3, [r3, #16]
 801701c:	3b01      	subs	r3, #1
 801701e:	061b      	lsls	r3, r3, #24
 8017020:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8017024:	4931      	ldr	r1, [pc, #196]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 8017026:	4313      	orrs	r3, r2
 8017028:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801702a:	4b30      	ldr	r3, [pc, #192]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 801702c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801702e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	695b      	ldr	r3, [r3, #20]
 8017036:	492d      	ldr	r1, [pc, #180]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 8017038:	4313      	orrs	r3, r2
 801703a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801703c:	4b2b      	ldr	r3, [pc, #172]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 801703e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017040:	f023 0220 	bic.w	r2, r3, #32
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	699b      	ldr	r3, [r3, #24]
 8017048:	4928      	ldr	r1, [pc, #160]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 801704a:	4313      	orrs	r3, r2
 801704c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801704e:	4b27      	ldr	r3, [pc, #156]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 8017050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017052:	4a26      	ldr	r2, [pc, #152]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 8017054:	f023 0310 	bic.w	r3, r3, #16
 8017058:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801705a:	4b24      	ldr	r3, [pc, #144]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 801705c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801705e:	4b24      	ldr	r3, [pc, #144]	@ (80170f0 <RCCEx_PLL2_Config+0x160>)
 8017060:	4013      	ands	r3, r2
 8017062:	687a      	ldr	r2, [r7, #4]
 8017064:	69d2      	ldr	r2, [r2, #28]
 8017066:	00d2      	lsls	r2, r2, #3
 8017068:	4920      	ldr	r1, [pc, #128]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 801706a:	4313      	orrs	r3, r2
 801706c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801706e:	4b1f      	ldr	r3, [pc, #124]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 8017070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017072:	4a1e      	ldr	r2, [pc, #120]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 8017074:	f043 0310 	orr.w	r3, r3, #16
 8017078:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801707a:	683b      	ldr	r3, [r7, #0]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d106      	bne.n	801708e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8017080:	4b1a      	ldr	r3, [pc, #104]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 8017082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017084:	4a19      	ldr	r2, [pc, #100]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 8017086:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801708a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801708c:	e00f      	b.n	80170ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801708e:	683b      	ldr	r3, [r7, #0]
 8017090:	2b01      	cmp	r3, #1
 8017092:	d106      	bne.n	80170a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8017094:	4b15      	ldr	r3, [pc, #84]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 8017096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017098:	4a14      	ldr	r2, [pc, #80]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 801709a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801709e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80170a0:	e005      	b.n	80170ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80170a2:	4b12      	ldr	r3, [pc, #72]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 80170a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80170a6:	4a11      	ldr	r2, [pc, #68]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 80170a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80170ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80170ae:	4b0f      	ldr	r3, [pc, #60]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	4a0e      	ldr	r2, [pc, #56]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 80170b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80170b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80170ba:	f7f9 fcaf 	bl	8010a1c <HAL_GetTick>
 80170be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80170c0:	e008      	b.n	80170d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80170c2:	f7f9 fcab 	bl	8010a1c <HAL_GetTick>
 80170c6:	4602      	mov	r2, r0
 80170c8:	68bb      	ldr	r3, [r7, #8]
 80170ca:	1ad3      	subs	r3, r2, r3
 80170cc:	2b02      	cmp	r3, #2
 80170ce:	d901      	bls.n	80170d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80170d0:	2303      	movs	r3, #3
 80170d2:	e006      	b.n	80170e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80170d4:	4b05      	ldr	r3, [pc, #20]	@ (80170ec <RCCEx_PLL2_Config+0x15c>)
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d0f0      	beq.n	80170c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80170e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80170e2:	4618      	mov	r0, r3
 80170e4:	3710      	adds	r7, #16
 80170e6:	46bd      	mov	sp, r7
 80170e8:	bd80      	pop	{r7, pc}
 80170ea:	bf00      	nop
 80170ec:	58024400 	.word	0x58024400
 80170f0:	ffff0007 	.word	0xffff0007

080170f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b084      	sub	sp, #16
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	6078      	str	r0, [r7, #4]
 80170fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80170fe:	2300      	movs	r3, #0
 8017100:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8017102:	4b53      	ldr	r3, [pc, #332]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 8017104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017106:	f003 0303 	and.w	r3, r3, #3
 801710a:	2b03      	cmp	r3, #3
 801710c:	d101      	bne.n	8017112 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801710e:	2301      	movs	r3, #1
 8017110:	e099      	b.n	8017246 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8017112:	4b4f      	ldr	r3, [pc, #316]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	4a4e      	ldr	r2, [pc, #312]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 8017118:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801711c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801711e:	f7f9 fc7d 	bl	8010a1c <HAL_GetTick>
 8017122:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8017124:	e008      	b.n	8017138 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8017126:	f7f9 fc79 	bl	8010a1c <HAL_GetTick>
 801712a:	4602      	mov	r2, r0
 801712c:	68bb      	ldr	r3, [r7, #8]
 801712e:	1ad3      	subs	r3, r2, r3
 8017130:	2b02      	cmp	r3, #2
 8017132:	d901      	bls.n	8017138 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8017134:	2303      	movs	r3, #3
 8017136:	e086      	b.n	8017246 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8017138:	4b45      	ldr	r3, [pc, #276]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8017140:	2b00      	cmp	r3, #0
 8017142:	d1f0      	bne.n	8017126 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8017144:	4b42      	ldr	r3, [pc, #264]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 8017146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017148:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	051b      	lsls	r3, r3, #20
 8017152:	493f      	ldr	r1, [pc, #252]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 8017154:	4313      	orrs	r3, r2
 8017156:	628b      	str	r3, [r1, #40]	@ 0x28
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	685b      	ldr	r3, [r3, #4]
 801715c:	3b01      	subs	r3, #1
 801715e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	689b      	ldr	r3, [r3, #8]
 8017166:	3b01      	subs	r3, #1
 8017168:	025b      	lsls	r3, r3, #9
 801716a:	b29b      	uxth	r3, r3
 801716c:	431a      	orrs	r2, r3
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	68db      	ldr	r3, [r3, #12]
 8017172:	3b01      	subs	r3, #1
 8017174:	041b      	lsls	r3, r3, #16
 8017176:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801717a:	431a      	orrs	r2, r3
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	691b      	ldr	r3, [r3, #16]
 8017180:	3b01      	subs	r3, #1
 8017182:	061b      	lsls	r3, r3, #24
 8017184:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8017188:	4931      	ldr	r1, [pc, #196]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 801718a:	4313      	orrs	r3, r2
 801718c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801718e:	4b30      	ldr	r3, [pc, #192]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 8017190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017192:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	695b      	ldr	r3, [r3, #20]
 801719a:	492d      	ldr	r1, [pc, #180]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 801719c:	4313      	orrs	r3, r2
 801719e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80171a0:	4b2b      	ldr	r3, [pc, #172]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 80171a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80171a4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	699b      	ldr	r3, [r3, #24]
 80171ac:	4928      	ldr	r1, [pc, #160]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 80171ae:	4313      	orrs	r3, r2
 80171b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80171b2:	4b27      	ldr	r3, [pc, #156]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 80171b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80171b6:	4a26      	ldr	r2, [pc, #152]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 80171b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80171bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80171be:	4b24      	ldr	r3, [pc, #144]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 80171c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80171c2:	4b24      	ldr	r3, [pc, #144]	@ (8017254 <RCCEx_PLL3_Config+0x160>)
 80171c4:	4013      	ands	r3, r2
 80171c6:	687a      	ldr	r2, [r7, #4]
 80171c8:	69d2      	ldr	r2, [r2, #28]
 80171ca:	00d2      	lsls	r2, r2, #3
 80171cc:	4920      	ldr	r1, [pc, #128]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 80171ce:	4313      	orrs	r3, r2
 80171d0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80171d2:	4b1f      	ldr	r3, [pc, #124]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 80171d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80171d6:	4a1e      	ldr	r2, [pc, #120]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 80171d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80171dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80171de:	683b      	ldr	r3, [r7, #0]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d106      	bne.n	80171f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80171e4:	4b1a      	ldr	r3, [pc, #104]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 80171e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80171e8:	4a19      	ldr	r2, [pc, #100]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 80171ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80171ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80171f0:	e00f      	b.n	8017212 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80171f2:	683b      	ldr	r3, [r7, #0]
 80171f4:	2b01      	cmp	r3, #1
 80171f6:	d106      	bne.n	8017206 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80171f8:	4b15      	ldr	r3, [pc, #84]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 80171fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80171fc:	4a14      	ldr	r2, [pc, #80]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 80171fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8017202:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8017204:	e005      	b.n	8017212 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8017206:	4b12      	ldr	r3, [pc, #72]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 8017208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801720a:	4a11      	ldr	r2, [pc, #68]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 801720c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8017210:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8017212:	4b0f      	ldr	r3, [pc, #60]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	4a0e      	ldr	r2, [pc, #56]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 8017218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801721c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801721e:	f7f9 fbfd 	bl	8010a1c <HAL_GetTick>
 8017222:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8017224:	e008      	b.n	8017238 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8017226:	f7f9 fbf9 	bl	8010a1c <HAL_GetTick>
 801722a:	4602      	mov	r2, r0
 801722c:	68bb      	ldr	r3, [r7, #8]
 801722e:	1ad3      	subs	r3, r2, r3
 8017230:	2b02      	cmp	r3, #2
 8017232:	d901      	bls.n	8017238 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8017234:	2303      	movs	r3, #3
 8017236:	e006      	b.n	8017246 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8017238:	4b05      	ldr	r3, [pc, #20]	@ (8017250 <RCCEx_PLL3_Config+0x15c>)
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8017240:	2b00      	cmp	r3, #0
 8017242:	d0f0      	beq.n	8017226 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8017244:	7bfb      	ldrb	r3, [r7, #15]
}
 8017246:	4618      	mov	r0, r3
 8017248:	3710      	adds	r7, #16
 801724a:	46bd      	mov	sp, r7
 801724c:	bd80      	pop	{r7, pc}
 801724e:	bf00      	nop
 8017250:	58024400 	.word	0x58024400
 8017254:	ffff0007 	.word	0xffff0007

08017258 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8017258:	b580      	push	{r7, lr}
 801725a:	b08a      	sub	sp, #40	@ 0x28
 801725c:	af00      	add	r7, sp, #0
 801725e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	2b00      	cmp	r3, #0
 8017264:	d101      	bne.n	801726a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8017266:	2301      	movs	r3, #1
 8017268:	e075      	b.n	8017356 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017270:	b2db      	uxtb	r3, r3
 8017272:	2b00      	cmp	r3, #0
 8017274:	d105      	bne.n	8017282 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	2200      	movs	r2, #0
 801727a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 801727c:	6878      	ldr	r0, [r7, #4]
 801727e:	f7f4 fa95 	bl	800b7ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	2204      	movs	r2, #4
 8017286:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 801728a:	6878      	ldr	r0, [r7, #4]
 801728c:	f000 f868 	bl	8017360 <HAL_SD_InitCard>
 8017290:	4603      	mov	r3, r0
 8017292:	2b00      	cmp	r3, #0
 8017294:	d001      	beq.n	801729a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8017296:	2301      	movs	r3, #1
 8017298:	e05d      	b.n	8017356 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 801729a:	f107 0308 	add.w	r3, r7, #8
 801729e:	4619      	mov	r1, r3
 80172a0:	6878      	ldr	r0, [r7, #4]
 80172a2:	f000 fdaf 	bl	8017e04 <HAL_SD_GetCardStatus>
 80172a6:	4603      	mov	r3, r0
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d001      	beq.n	80172b0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80172ac:	2301      	movs	r3, #1
 80172ae:	e052      	b.n	8017356 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80172b0:	7e3b      	ldrb	r3, [r7, #24]
 80172b2:	b2db      	uxtb	r3, r3
 80172b4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80172b6:	7e7b      	ldrb	r3, [r7, #25]
 80172b8:	b2db      	uxtb	r3, r3
 80172ba:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80172c0:	2b01      	cmp	r3, #1
 80172c2:	d10a      	bne.n	80172da <HAL_SD_Init+0x82>
 80172c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d102      	bne.n	80172d0 <HAL_SD_Init+0x78>
 80172ca:	6a3b      	ldr	r3, [r7, #32]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d004      	beq.n	80172da <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80172d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80172d8:	e00b      	b.n	80172f2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80172de:	2b01      	cmp	r3, #1
 80172e0:	d104      	bne.n	80172ec <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80172e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80172ea:	e002      	b.n	80172f2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	2200      	movs	r2, #0
 80172f0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	68db      	ldr	r3, [r3, #12]
 80172f6:	4619      	mov	r1, r3
 80172f8:	6878      	ldr	r0, [r7, #4]
 80172fa:	f000 fe6d 	bl	8017fd8 <HAL_SD_ConfigWideBusOperation>
 80172fe:	4603      	mov	r3, r0
 8017300:	2b00      	cmp	r3, #0
 8017302:	d001      	beq.n	8017308 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8017304:	2301      	movs	r3, #1
 8017306:	e026      	b.n	8017356 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8017308:	f7f9 fb88 	bl	8010a1c <HAL_GetTick>
 801730c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 801730e:	e011      	b.n	8017334 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8017310:	f7f9 fb84 	bl	8010a1c <HAL_GetTick>
 8017314:	4602      	mov	r2, r0
 8017316:	69fb      	ldr	r3, [r7, #28]
 8017318:	1ad3      	subs	r3, r2, r3
 801731a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801731e:	d109      	bne.n	8017334 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8017326:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	2201      	movs	r2, #1
 801732c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8017330:	2303      	movs	r3, #3
 8017332:	e010      	b.n	8017356 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8017334:	6878      	ldr	r0, [r7, #4]
 8017336:	f000 ff61 	bl	80181fc <HAL_SD_GetCardState>
 801733a:	4603      	mov	r3, r0
 801733c:	2b04      	cmp	r3, #4
 801733e:	d1e7      	bne.n	8017310 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	2200      	movs	r2, #0
 8017344:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	2200      	movs	r2, #0
 801734a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	2201      	movs	r2, #1
 8017350:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8017354:	2300      	movs	r3, #0
}
 8017356:	4618      	mov	r0, r3
 8017358:	3728      	adds	r7, #40	@ 0x28
 801735a:	46bd      	mov	sp, r7
 801735c:	bd80      	pop	{r7, pc}
	...

08017360 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8017360:	b590      	push	{r4, r7, lr}
 8017362:	b08d      	sub	sp, #52	@ 0x34
 8017364:	af02      	add	r7, sp, #8
 8017366:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8017368:	2300      	movs	r3, #0
 801736a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801736c:	2300      	movs	r3, #0
 801736e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8017370:	2300      	movs	r3, #0
 8017372:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8017374:	2300      	movs	r3, #0
 8017376:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8017378:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 801737c:	f04f 0100 	mov.w	r1, #0
 8017380:	f7fe fc76 	bl	8015c70 <HAL_RCCEx_GetPeriphCLKFreq>
 8017384:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8017386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017388:	2b00      	cmp	r3, #0
 801738a:	d109      	bne.n	80173a0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	2201      	movs	r2, #1
 8017390:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 801739a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801739c:	2301      	movs	r3, #1
 801739e:	e070      	b.n	8017482 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80173a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173a2:	0a1b      	lsrs	r3, r3, #8
 80173a4:	4a39      	ldr	r2, [pc, #228]	@ (801748c <HAL_SD_InitCard+0x12c>)
 80173a6:	fba2 2303 	umull	r2, r3, r2, r3
 80173aa:	091b      	lsrs	r3, r3, #4
 80173ac:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	681c      	ldr	r4, [r3, #0]
 80173b2:	466a      	mov	r2, sp
 80173b4:	f107 0318 	add.w	r3, r7, #24
 80173b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80173bc:	e882 0003 	stmia.w	r2, {r0, r1}
 80173c0:	f107 030c 	add.w	r3, r7, #12
 80173c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80173c6:	4620      	mov	r0, r4
 80173c8:	f002 fe5e 	bl	801a088 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	4618      	mov	r0, r3
 80173d2:	f002 fea1 	bl	801a118 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80173d6:	69fb      	ldr	r3, [r7, #28]
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d005      	beq.n	80173e8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80173dc:	69fb      	ldr	r3, [r7, #28]
 80173de:	005b      	lsls	r3, r3, #1
 80173e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80173e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80173e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 80173e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d007      	beq.n	80173fe <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80173ee:	4a28      	ldr	r2, [pc, #160]	@ (8017490 <HAL_SD_InitCard+0x130>)
 80173f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80173f6:	3301      	adds	r3, #1
 80173f8:	4618      	mov	r0, r3
 80173fa:	f7f9 fb1b 	bl	8010a34 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80173fe:	6878      	ldr	r0, [r7, #4]
 8017400:	f000 ffea 	bl	80183d8 <SD_PowerON>
 8017404:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8017406:	6a3b      	ldr	r3, [r7, #32]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d00b      	beq.n	8017424 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	2201      	movs	r2, #1
 8017410:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017418:	6a3b      	ldr	r3, [r7, #32]
 801741a:	431a      	orrs	r2, r3
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8017420:	2301      	movs	r3, #1
 8017422:	e02e      	b.n	8017482 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8017424:	6878      	ldr	r0, [r7, #4]
 8017426:	f000 ff09 	bl	801823c <SD_InitCard>
 801742a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801742c:	6a3b      	ldr	r3, [r7, #32]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d00b      	beq.n	801744a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	2201      	movs	r2, #1
 8017436:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801743e:	6a3b      	ldr	r3, [r7, #32]
 8017440:	431a      	orrs	r2, r3
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8017446:	2301      	movs	r3, #1
 8017448:	e01b      	b.n	8017482 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8017452:	4618      	mov	r0, r3
 8017454:	f002 fef6 	bl	801a244 <SDMMC_CmdBlockLength>
 8017458:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801745a:	6a3b      	ldr	r3, [r7, #32]
 801745c:	2b00      	cmp	r3, #0
 801745e:	d00f      	beq.n	8017480 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	4a0b      	ldr	r2, [pc, #44]	@ (8017494 <HAL_SD_InitCard+0x134>)
 8017466:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801746c:	6a3b      	ldr	r3, [r7, #32]
 801746e:	431a      	orrs	r2, r3
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	2201      	movs	r2, #1
 8017478:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 801747c:	2301      	movs	r3, #1
 801747e:	e000      	b.n	8017482 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8017480:	2300      	movs	r3, #0
}
 8017482:	4618      	mov	r0, r3
 8017484:	372c      	adds	r7, #44	@ 0x2c
 8017486:	46bd      	mov	sp, r7
 8017488:	bd90      	pop	{r4, r7, pc}
 801748a:	bf00      	nop
 801748c:	014f8b59 	.word	0x014f8b59
 8017490:	00012110 	.word	0x00012110
 8017494:	1fe00fff 	.word	0x1fe00fff

08017498 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8017498:	b580      	push	{r7, lr}
 801749a:	b08c      	sub	sp, #48	@ 0x30
 801749c:	af00      	add	r7, sp, #0
 801749e:	60f8      	str	r0, [r7, #12]
 80174a0:	60b9      	str	r1, [r7, #8]
 80174a2:	607a      	str	r2, [r7, #4]
 80174a4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 80174aa:	68bb      	ldr	r3, [r7, #8]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d107      	bne.n	80174c0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80174b4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80174bc:	2301      	movs	r3, #1
 80174be:	e08d      	b.n	80175dc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80174c6:	b2db      	uxtb	r3, r3
 80174c8:	2b01      	cmp	r3, #1
 80174ca:	f040 8086 	bne.w	80175da <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	2200      	movs	r2, #0
 80174d2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80174d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80174d6:	683b      	ldr	r3, [r7, #0]
 80174d8:	441a      	add	r2, r3
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80174de:	429a      	cmp	r2, r3
 80174e0:	d907      	bls.n	80174f2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80174e6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80174ee:	2301      	movs	r3, #1
 80174f0:	e074      	b.n	80175dc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	2203      	movs	r2, #3
 80174f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	2200      	movs	r2, #0
 8017500:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	68ba      	ldr	r2, [r7, #8]
 8017506:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8017508:	683b      	ldr	r3, [r7, #0]
 801750a:	025a      	lsls	r2, r3, #9
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017514:	2b01      	cmp	r3, #1
 8017516:	d002      	beq.n	801751e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8017518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801751a:	025b      	lsls	r3, r3, #9
 801751c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801751e:	f04f 33ff 	mov.w	r3, #4294967295
 8017522:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8017524:	683b      	ldr	r3, [r7, #0]
 8017526:	025b      	lsls	r3, r3, #9
 8017528:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801752a:	2390      	movs	r3, #144	@ 0x90
 801752c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801752e:	2302      	movs	r3, #2
 8017530:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8017532:	2300      	movs	r3, #0
 8017534:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8017536:	2300      	movs	r3, #0
 8017538:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	f107 0210 	add.w	r2, r7, #16
 8017542:	4611      	mov	r1, r2
 8017544:	4618      	mov	r0, r3
 8017546:	f002 fe51 	bl	801a1ec <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	68da      	ldr	r2, [r3, #12]
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8017558:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	68ba      	ldr	r2, [r7, #8]
 8017560:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	2201      	movs	r2, #1
 8017568:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 801756a:	683b      	ldr	r3, [r7, #0]
 801756c:	2b01      	cmp	r3, #1
 801756e:	d90a      	bls.n	8017586 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	2282      	movs	r2, #130	@ 0x82
 8017574:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	681b      	ldr	r3, [r3, #0]
 801757a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801757c:	4618      	mov	r0, r3
 801757e:	f002 fea7 	bl	801a2d0 <SDMMC_CmdReadMultiBlock>
 8017582:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8017584:	e009      	b.n	801759a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	2281      	movs	r2, #129	@ 0x81
 801758a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017592:	4618      	mov	r0, r3
 8017594:	f002 fe79 	bl	801a28a <SDMMC_CmdReadSingleBlock>
 8017598:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 801759a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801759c:	2b00      	cmp	r3, #0
 801759e:	d012      	beq.n	80175c6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	4a0f      	ldr	r2, [pc, #60]	@ (80175e4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 80175a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80175ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175ae:	431a      	orrs	r2, r3
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	2201      	movs	r2, #1
 80175b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	2200      	movs	r2, #0
 80175c0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80175c2:	2301      	movs	r3, #1
 80175c4:	e00a      	b.n	80175dc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80175d4:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 80175d6:	2300      	movs	r3, #0
 80175d8:	e000      	b.n	80175dc <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80175da:	2302      	movs	r3, #2
  }
}
 80175dc:	4618      	mov	r0, r3
 80175de:	3730      	adds	r7, #48	@ 0x30
 80175e0:	46bd      	mov	sp, r7
 80175e2:	bd80      	pop	{r7, pc}
 80175e4:	1fe00fff 	.word	0x1fe00fff

080175e8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b08c      	sub	sp, #48	@ 0x30
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	60f8      	str	r0, [r7, #12]
 80175f0:	60b9      	str	r1, [r7, #8]
 80175f2:	607a      	str	r2, [r7, #4]
 80175f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 80175fa:	68bb      	ldr	r3, [r7, #8]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d107      	bne.n	8017610 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017604:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801760c:	2301      	movs	r3, #1
 801760e:	e08d      	b.n	801772c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017616:	b2db      	uxtb	r3, r3
 8017618:	2b01      	cmp	r3, #1
 801761a:	f040 8086 	bne.w	801772a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	2200      	movs	r2, #0
 8017622:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8017624:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017626:	683b      	ldr	r3, [r7, #0]
 8017628:	441a      	add	r2, r3
 801762a:	68fb      	ldr	r3, [r7, #12]
 801762c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801762e:	429a      	cmp	r2, r3
 8017630:	d907      	bls.n	8017642 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017636:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 801763e:	2301      	movs	r3, #1
 8017640:	e074      	b.n	801772c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	2203      	movs	r2, #3
 8017646:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	2200      	movs	r2, #0
 8017650:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	68ba      	ldr	r2, [r7, #8]
 8017656:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8017658:	683b      	ldr	r3, [r7, #0]
 801765a:	025a      	lsls	r2, r3, #9
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017664:	2b01      	cmp	r3, #1
 8017666:	d002      	beq.n	801766e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8017668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801766a:	025b      	lsls	r3, r3, #9
 801766c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801766e:	f04f 33ff 	mov.w	r3, #4294967295
 8017672:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8017674:	683b      	ldr	r3, [r7, #0]
 8017676:	025b      	lsls	r3, r3, #9
 8017678:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801767a:	2390      	movs	r3, #144	@ 0x90
 801767c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 801767e:	2300      	movs	r3, #0
 8017680:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8017682:	2300      	movs	r3, #0
 8017684:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8017686:	2300      	movs	r3, #0
 8017688:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	f107 0210 	add.w	r2, r7, #16
 8017692:	4611      	mov	r1, r2
 8017694:	4618      	mov	r0, r3
 8017696:	f002 fda9 	bl	801a1ec <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	68da      	ldr	r2, [r3, #12]
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80176a8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	68ba      	ldr	r2, [r7, #8]
 80176b0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	2201      	movs	r2, #1
 80176b8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80176ba:	683b      	ldr	r3, [r7, #0]
 80176bc:	2b01      	cmp	r3, #1
 80176be:	d90a      	bls.n	80176d6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	22a0      	movs	r2, #160	@ 0xa0
 80176c4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80176cc:	4618      	mov	r0, r3
 80176ce:	f002 fe45 	bl	801a35c <SDMMC_CmdWriteMultiBlock>
 80176d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80176d4:	e009      	b.n	80176ea <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	2290      	movs	r2, #144	@ 0x90
 80176da:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80176e2:	4618      	mov	r0, r3
 80176e4:	f002 fe17 	bl	801a316 <SDMMC_CmdWriteSingleBlock>
 80176e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80176ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d012      	beq.n	8017716 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	4a0f      	ldr	r2, [pc, #60]	@ (8017734 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80176f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80176fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176fe:	431a      	orrs	r2, r3
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	2201      	movs	r2, #1
 8017708:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	2200      	movs	r2, #0
 8017710:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8017712:	2301      	movs	r3, #1
 8017714:	e00a      	b.n	801772c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8017724:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8017726:	2300      	movs	r3, #0
 8017728:	e000      	b.n	801772c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 801772a:	2302      	movs	r3, #2
  }
}
 801772c:	4618      	mov	r0, r3
 801772e:	3730      	adds	r7, #48	@ 0x30
 8017730:	46bd      	mov	sp, r7
 8017732:	bd80      	pop	{r7, pc}
 8017734:	1fe00fff 	.word	0x1fe00fff

08017738 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8017738:	b580      	push	{r7, lr}
 801773a:	b084      	sub	sp, #16
 801773c:	af00      	add	r7, sp, #0
 801773e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017744:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801774c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8017750:	2b00      	cmp	r3, #0
 8017752:	d008      	beq.n	8017766 <HAL_SD_IRQHandler+0x2e>
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	f003 0308 	and.w	r3, r3, #8
 801775a:	2b00      	cmp	r3, #0
 801775c:	d003      	beq.n	8017766 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 801775e:	6878      	ldr	r0, [r7, #4]
 8017760:	f001 f926 	bl	80189b0 <SD_Read_IT>
 8017764:	e19a      	b.n	8017a9c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801776c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017770:	2b00      	cmp	r3, #0
 8017772:	f000 80ac 	beq.w	80178ce <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801777e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	681a      	ldr	r2, [r3, #0]
 801778a:	4b59      	ldr	r3, [pc, #356]	@ (80178f0 <HAL_SD_IRQHandler+0x1b8>)
 801778c:	400b      	ands	r3, r1
 801778e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 801779e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	68da      	ldr	r2, [r3, #12]
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80177ae:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	f003 0308 	and.w	r3, r3, #8
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d038      	beq.n	801782c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	f003 0302 	and.w	r3, r3, #2
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d104      	bne.n	80177ce <HAL_SD_IRQHandler+0x96>
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	f003 0320 	and.w	r3, r3, #32
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d011      	beq.n	80177f2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	4618      	mov	r0, r3
 80177d4:	f002 fde6 	bl	801a3a4 <SDMMC_CmdStopTransfer>
 80177d8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80177da:	68bb      	ldr	r3, [r7, #8]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d008      	beq.n	80177f2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80177e4:	68bb      	ldr	r3, [r7, #8]
 80177e6:	431a      	orrs	r2, r3
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80177ec:	6878      	ldr	r0, [r7, #4]
 80177ee:	f000 f95b 	bl	8017aa8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	4a3f      	ldr	r2, [pc, #252]	@ (80178f4 <HAL_SD_IRQHandler+0x1bc>)
 80177f8:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	2201      	movs	r2, #1
 80177fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	2200      	movs	r2, #0
 8017806:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	f003 0301 	and.w	r3, r3, #1
 801780e:	2b00      	cmp	r3, #0
 8017810:	d104      	bne.n	801781c <HAL_SD_IRQHandler+0xe4>
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	f003 0302 	and.w	r3, r3, #2
 8017818:	2b00      	cmp	r3, #0
 801781a:	d003      	beq.n	8017824 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 801781c:	6878      	ldr	r0, [r7, #4]
 801781e:	f003 fa73 	bl	801ad08 <HAL_SD_RxCpltCallback>
 8017822:	e13b      	b.n	8017a9c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8017824:	6878      	ldr	r0, [r7, #4]
 8017826:	f003 fa65 	bl	801acf4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801782a:	e137      	b.n	8017a9c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017832:	2b00      	cmp	r3, #0
 8017834:	f000 8132 	beq.w	8017a9c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	2200      	movs	r2, #0
 801783e:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	2200      	movs	r2, #0
 8017846:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	2200      	movs	r2, #0
 801784e:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	f003 0302 	and.w	r3, r3, #2
 8017856:	2b00      	cmp	r3, #0
 8017858:	d104      	bne.n	8017864 <HAL_SD_IRQHandler+0x12c>
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	f003 0320 	and.w	r3, r3, #32
 8017860:	2b00      	cmp	r3, #0
 8017862:	d011      	beq.n	8017888 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	4618      	mov	r0, r3
 801786a:	f002 fd9b 	bl	801a3a4 <SDMMC_CmdStopTransfer>
 801786e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8017870:	68bb      	ldr	r3, [r7, #8]
 8017872:	2b00      	cmp	r3, #0
 8017874:	d008      	beq.n	8017888 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801787a:	68bb      	ldr	r3, [r7, #8]
 801787c:	431a      	orrs	r2, r3
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8017882:	6878      	ldr	r0, [r7, #4]
 8017884:	f000 f910 	bl	8017aa8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	2201      	movs	r2, #1
 801788c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	2200      	movs	r2, #0
 8017894:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	f003 0310 	and.w	r3, r3, #16
 801789c:	2b00      	cmp	r3, #0
 801789e:	d104      	bne.n	80178aa <HAL_SD_IRQHandler+0x172>
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	f003 0320 	and.w	r3, r3, #32
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d002      	beq.n	80178b0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80178aa:	6878      	ldr	r0, [r7, #4]
 80178ac:	f003 fa22 	bl	801acf4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	f003 0301 	and.w	r3, r3, #1
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d105      	bne.n	80178c6 <HAL_SD_IRQHandler+0x18e>
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	f003 0302 	and.w	r3, r3, #2
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	f000 80eb 	beq.w	8017a9c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80178c6:	6878      	ldr	r0, [r7, #4]
 80178c8:	f003 fa1e 	bl	801ad08 <HAL_SD_RxCpltCallback>
}
 80178cc:	e0e6      	b.n	8017a9c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80178d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d00d      	beq.n	80178f8 <HAL_SD_IRQHandler+0x1c0>
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	f003 0308 	and.w	r3, r3, #8
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d008      	beq.n	80178f8 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80178e6:	6878      	ldr	r0, [r7, #4]
 80178e8:	f001 f8a8 	bl	8018a3c <SD_Write_IT>
 80178ec:	e0d6      	b.n	8017a9c <HAL_SD_IRQHandler+0x364>
 80178ee:	bf00      	nop
 80178f0:	ffff3ec5 	.word	0xffff3ec5
 80178f4:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80178fe:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8017902:	2b00      	cmp	r3, #0
 8017904:	f000 809d 	beq.w	8017a42 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801790e:	f003 0302 	and.w	r3, r3, #2
 8017912:	2b00      	cmp	r3, #0
 8017914:	d005      	beq.n	8017922 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801791a:	f043 0202 	orr.w	r2, r3, #2
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017928:	f003 0308 	and.w	r3, r3, #8
 801792c:	2b00      	cmp	r3, #0
 801792e:	d005      	beq.n	801793c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017934:	f043 0208 	orr.w	r2, r3, #8
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017942:	f003 0320 	and.w	r3, r3, #32
 8017946:	2b00      	cmp	r3, #0
 8017948:	d005      	beq.n	8017956 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801794e:	f043 0220 	orr.w	r2, r3, #32
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801795c:	f003 0310 	and.w	r3, r3, #16
 8017960:	2b00      	cmp	r3, #0
 8017962:	d005      	beq.n	8017970 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017968:	f043 0210 	orr.w	r2, r3, #16
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	4a4b      	ldr	r2, [pc, #300]	@ (8017aa4 <HAL_SD_IRQHandler+0x36c>)
 8017976:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8017986:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	68da      	ldr	r2, [r3, #12]
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8017996:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80179a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	68da      	ldr	r2, [r3, #12]
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80179b6:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	4618      	mov	r0, r3
 80179be:	f002 fcf1 	bl	801a3a4 <SDMMC_CmdStopTransfer>
 80179c2:	4602      	mov	r2, r0
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80179c8:	431a      	orrs	r2, r3
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	68da      	ldr	r2, [r3, #12]
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80179dc:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80179e6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	f003 0308 	and.w	r3, r3, #8
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d00a      	beq.n	8017a08 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	2201      	movs	r2, #1
 80179f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	2200      	movs	r2, #0
 80179fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8017a00:	6878      	ldr	r0, [r7, #4]
 8017a02:	f000 f851 	bl	8017aa8 <HAL_SD_ErrorCallback>
}
 8017a06:	e049      	b.n	8017a9c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	d044      	beq.n	8017a9c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d040      	beq.n	8017a9c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8017a28:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	2200      	movs	r2, #0
 8017a30:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	2201      	movs	r2, #1
 8017a36:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8017a3a:	6878      	ldr	r0, [r7, #4]
 8017a3c:	f000 f834 	bl	8017aa8 <HAL_SD_ErrorCallback>
}
 8017a40:	e02c      	b.n	8017a9c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d025      	beq.n	8017a9c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017a58:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017a60:	f003 0304 	and.w	r3, r3, #4
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d10c      	bne.n	8017a82 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	f003 0320 	and.w	r3, r3, #32
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d003      	beq.n	8017a7a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8017a72:	6878      	ldr	r0, [r7, #4]
 8017a74:	f001 f84a 	bl	8018b0c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8017a78:	e010      	b.n	8017a9c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8017a7a:	6878      	ldr	r0, [r7, #4]
 8017a7c:	f001 f832 	bl	8018ae4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8017a80:	e00c      	b.n	8017a9c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	f003 0320 	and.w	r3, r3, #32
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d003      	beq.n	8017a94 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8017a8c:	6878      	ldr	r0, [r7, #4]
 8017a8e:	f001 f833 	bl	8018af8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8017a92:	e003      	b.n	8017a9c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8017a94:	6878      	ldr	r0, [r7, #4]
 8017a96:	f001 f81b 	bl	8018ad0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8017a9a:	e7ff      	b.n	8017a9c <HAL_SD_IRQHandler+0x364>
 8017a9c:	bf00      	nop
 8017a9e:	3710      	adds	r7, #16
 8017aa0:	46bd      	mov	sp, r7
 8017aa2:	bd80      	pop	{r7, pc}
 8017aa4:	18000f3a 	.word	0x18000f3a

08017aa8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8017aa8:	b480      	push	{r7}
 8017aaa:	b083      	sub	sp, #12
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8017ab0:	bf00      	nop
 8017ab2:	370c      	adds	r7, #12
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aba:	4770      	bx	lr

08017abc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8017abc:	b480      	push	{r7}
 8017abe:	b083      	sub	sp, #12
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
 8017ac4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017aca:	0f9b      	lsrs	r3, r3, #30
 8017acc:	b2da      	uxtb	r2, r3
 8017ace:	683b      	ldr	r3, [r7, #0]
 8017ad0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017ad6:	0e9b      	lsrs	r3, r3, #26
 8017ad8:	b2db      	uxtb	r3, r3
 8017ada:	f003 030f 	and.w	r3, r3, #15
 8017ade:	b2da      	uxtb	r2, r3
 8017ae0:	683b      	ldr	r3, [r7, #0]
 8017ae2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017ae8:	0e1b      	lsrs	r3, r3, #24
 8017aea:	b2db      	uxtb	r3, r3
 8017aec:	f003 0303 	and.w	r3, r3, #3
 8017af0:	b2da      	uxtb	r2, r3
 8017af2:	683b      	ldr	r3, [r7, #0]
 8017af4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017afa:	0c1b      	lsrs	r3, r3, #16
 8017afc:	b2da      	uxtb	r2, r3
 8017afe:	683b      	ldr	r3, [r7, #0]
 8017b00:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017b06:	0a1b      	lsrs	r3, r3, #8
 8017b08:	b2da      	uxtb	r2, r3
 8017b0a:	683b      	ldr	r3, [r7, #0]
 8017b0c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017b12:	b2da      	uxtb	r2, r3
 8017b14:	683b      	ldr	r3, [r7, #0]
 8017b16:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017b1c:	0d1b      	lsrs	r3, r3, #20
 8017b1e:	b29a      	uxth	r2, r3
 8017b20:	683b      	ldr	r3, [r7, #0]
 8017b22:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017b28:	0c1b      	lsrs	r3, r3, #16
 8017b2a:	b2db      	uxtb	r3, r3
 8017b2c:	f003 030f 	and.w	r3, r3, #15
 8017b30:	b2da      	uxtb	r2, r3
 8017b32:	683b      	ldr	r3, [r7, #0]
 8017b34:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017b3a:	0bdb      	lsrs	r3, r3, #15
 8017b3c:	b2db      	uxtb	r3, r3
 8017b3e:	f003 0301 	and.w	r3, r3, #1
 8017b42:	b2da      	uxtb	r2, r3
 8017b44:	683b      	ldr	r3, [r7, #0]
 8017b46:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017b4c:	0b9b      	lsrs	r3, r3, #14
 8017b4e:	b2db      	uxtb	r3, r3
 8017b50:	f003 0301 	and.w	r3, r3, #1
 8017b54:	b2da      	uxtb	r2, r3
 8017b56:	683b      	ldr	r3, [r7, #0]
 8017b58:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017b5e:	0b5b      	lsrs	r3, r3, #13
 8017b60:	b2db      	uxtb	r3, r3
 8017b62:	f003 0301 	and.w	r3, r3, #1
 8017b66:	b2da      	uxtb	r2, r3
 8017b68:	683b      	ldr	r3, [r7, #0]
 8017b6a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017b70:	0b1b      	lsrs	r3, r3, #12
 8017b72:	b2db      	uxtb	r3, r3
 8017b74:	f003 0301 	and.w	r3, r3, #1
 8017b78:	b2da      	uxtb	r2, r3
 8017b7a:	683b      	ldr	r3, [r7, #0]
 8017b7c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8017b7e:	683b      	ldr	r3, [r7, #0]
 8017b80:	2200      	movs	r2, #0
 8017b82:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d163      	bne.n	8017c54 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017b90:	009a      	lsls	r2, r3, #2
 8017b92:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8017b96:	4013      	ands	r3, r2
 8017b98:	687a      	ldr	r2, [r7, #4]
 8017b9a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8017b9c:	0f92      	lsrs	r2, r2, #30
 8017b9e:	431a      	orrs	r2, r3
 8017ba0:	683b      	ldr	r3, [r7, #0]
 8017ba2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017ba8:	0edb      	lsrs	r3, r3, #27
 8017baa:	b2db      	uxtb	r3, r3
 8017bac:	f003 0307 	and.w	r3, r3, #7
 8017bb0:	b2da      	uxtb	r2, r3
 8017bb2:	683b      	ldr	r3, [r7, #0]
 8017bb4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017bba:	0e1b      	lsrs	r3, r3, #24
 8017bbc:	b2db      	uxtb	r3, r3
 8017bbe:	f003 0307 	and.w	r3, r3, #7
 8017bc2:	b2da      	uxtb	r2, r3
 8017bc4:	683b      	ldr	r3, [r7, #0]
 8017bc6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017bcc:	0d5b      	lsrs	r3, r3, #21
 8017bce:	b2db      	uxtb	r3, r3
 8017bd0:	f003 0307 	and.w	r3, r3, #7
 8017bd4:	b2da      	uxtb	r2, r3
 8017bd6:	683b      	ldr	r3, [r7, #0]
 8017bd8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017bde:	0c9b      	lsrs	r3, r3, #18
 8017be0:	b2db      	uxtb	r3, r3
 8017be2:	f003 0307 	and.w	r3, r3, #7
 8017be6:	b2da      	uxtb	r2, r3
 8017be8:	683b      	ldr	r3, [r7, #0]
 8017bea:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017bf0:	0bdb      	lsrs	r3, r3, #15
 8017bf2:	b2db      	uxtb	r3, r3
 8017bf4:	f003 0307 	and.w	r3, r3, #7
 8017bf8:	b2da      	uxtb	r2, r3
 8017bfa:	683b      	ldr	r3, [r7, #0]
 8017bfc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8017bfe:	683b      	ldr	r3, [r7, #0]
 8017c00:	691b      	ldr	r3, [r3, #16]
 8017c02:	1c5a      	adds	r2, r3, #1
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8017c08:	683b      	ldr	r3, [r7, #0]
 8017c0a:	7e1b      	ldrb	r3, [r3, #24]
 8017c0c:	b2db      	uxtb	r3, r3
 8017c0e:	f003 0307 	and.w	r3, r3, #7
 8017c12:	3302      	adds	r3, #2
 8017c14:	2201      	movs	r2, #1
 8017c16:	fa02 f303 	lsl.w	r3, r2, r3
 8017c1a:	687a      	ldr	r2, [r7, #4]
 8017c1c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8017c1e:	fb03 f202 	mul.w	r2, r3, r2
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8017c26:	683b      	ldr	r3, [r7, #0]
 8017c28:	7a1b      	ldrb	r3, [r3, #8]
 8017c2a:	b2db      	uxtb	r3, r3
 8017c2c:	f003 030f 	and.w	r3, r3, #15
 8017c30:	2201      	movs	r2, #1
 8017c32:	409a      	lsls	r2, r3
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017c3c:	687a      	ldr	r2, [r7, #4]
 8017c3e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8017c40:	0a52      	lsrs	r2, r2, #9
 8017c42:	fb03 f202 	mul.w	r2, r3, r2
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017c50:	655a      	str	r2, [r3, #84]	@ 0x54
 8017c52:	e031      	b.n	8017cb8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017c58:	2b01      	cmp	r3, #1
 8017c5a:	d11d      	bne.n	8017c98 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017c60:	041b      	lsls	r3, r3, #16
 8017c62:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017c6a:	0c1b      	lsrs	r3, r3, #16
 8017c6c:	431a      	orrs	r2, r3
 8017c6e:	683b      	ldr	r3, [r7, #0]
 8017c70:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8017c72:	683b      	ldr	r3, [r7, #0]
 8017c74:	691b      	ldr	r3, [r3, #16]
 8017c76:	3301      	adds	r3, #1
 8017c78:	029a      	lsls	r2, r3, #10
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017c8c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	655a      	str	r2, [r3, #84]	@ 0x54
 8017c96:	e00f      	b.n	8017cb8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	4a58      	ldr	r2, [pc, #352]	@ (8017e00 <HAL_SD_GetCardCSD+0x344>)
 8017c9e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017ca4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	2201      	movs	r2, #1
 8017cb0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8017cb4:	2301      	movs	r3, #1
 8017cb6:	e09d      	b.n	8017df4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017cbc:	0b9b      	lsrs	r3, r3, #14
 8017cbe:	b2db      	uxtb	r3, r3
 8017cc0:	f003 0301 	and.w	r3, r3, #1
 8017cc4:	b2da      	uxtb	r2, r3
 8017cc6:	683b      	ldr	r3, [r7, #0]
 8017cc8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017cce:	09db      	lsrs	r3, r3, #7
 8017cd0:	b2db      	uxtb	r3, r3
 8017cd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017cd6:	b2da      	uxtb	r2, r3
 8017cd8:	683b      	ldr	r3, [r7, #0]
 8017cda:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017ce0:	b2db      	uxtb	r3, r3
 8017ce2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017ce6:	b2da      	uxtb	r2, r3
 8017ce8:	683b      	ldr	r3, [r7, #0]
 8017cea:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017cf0:	0fdb      	lsrs	r3, r3, #31
 8017cf2:	b2da      	uxtb	r2, r3
 8017cf4:	683b      	ldr	r3, [r7, #0]
 8017cf6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017cfc:	0f5b      	lsrs	r3, r3, #29
 8017cfe:	b2db      	uxtb	r3, r3
 8017d00:	f003 0303 	and.w	r3, r3, #3
 8017d04:	b2da      	uxtb	r2, r3
 8017d06:	683b      	ldr	r3, [r7, #0]
 8017d08:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017d0e:	0e9b      	lsrs	r3, r3, #26
 8017d10:	b2db      	uxtb	r3, r3
 8017d12:	f003 0307 	and.w	r3, r3, #7
 8017d16:	b2da      	uxtb	r2, r3
 8017d18:	683b      	ldr	r3, [r7, #0]
 8017d1a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017d20:	0d9b      	lsrs	r3, r3, #22
 8017d22:	b2db      	uxtb	r3, r3
 8017d24:	f003 030f 	and.w	r3, r3, #15
 8017d28:	b2da      	uxtb	r2, r3
 8017d2a:	683b      	ldr	r3, [r7, #0]
 8017d2c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017d32:	0d5b      	lsrs	r3, r3, #21
 8017d34:	b2db      	uxtb	r3, r3
 8017d36:	f003 0301 	and.w	r3, r3, #1
 8017d3a:	b2da      	uxtb	r2, r3
 8017d3c:	683b      	ldr	r3, [r7, #0]
 8017d3e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8017d42:	683b      	ldr	r3, [r7, #0]
 8017d44:	2200      	movs	r2, #0
 8017d46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017d4e:	0c1b      	lsrs	r3, r3, #16
 8017d50:	b2db      	uxtb	r3, r3
 8017d52:	f003 0301 	and.w	r3, r3, #1
 8017d56:	b2da      	uxtb	r2, r3
 8017d58:	683b      	ldr	r3, [r7, #0]
 8017d5a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017d62:	0bdb      	lsrs	r3, r3, #15
 8017d64:	b2db      	uxtb	r3, r3
 8017d66:	f003 0301 	and.w	r3, r3, #1
 8017d6a:	b2da      	uxtb	r2, r3
 8017d6c:	683b      	ldr	r3, [r7, #0]
 8017d6e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017d76:	0b9b      	lsrs	r3, r3, #14
 8017d78:	b2db      	uxtb	r3, r3
 8017d7a:	f003 0301 	and.w	r3, r3, #1
 8017d7e:	b2da      	uxtb	r2, r3
 8017d80:	683b      	ldr	r3, [r7, #0]
 8017d82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017d8a:	0b5b      	lsrs	r3, r3, #13
 8017d8c:	b2db      	uxtb	r3, r3
 8017d8e:	f003 0301 	and.w	r3, r3, #1
 8017d92:	b2da      	uxtb	r2, r3
 8017d94:	683b      	ldr	r3, [r7, #0]
 8017d96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017d9e:	0b1b      	lsrs	r3, r3, #12
 8017da0:	b2db      	uxtb	r3, r3
 8017da2:	f003 0301 	and.w	r3, r3, #1
 8017da6:	b2da      	uxtb	r2, r3
 8017da8:	683b      	ldr	r3, [r7, #0]
 8017daa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017db2:	0a9b      	lsrs	r3, r3, #10
 8017db4:	b2db      	uxtb	r3, r3
 8017db6:	f003 0303 	and.w	r3, r3, #3
 8017dba:	b2da      	uxtb	r2, r3
 8017dbc:	683b      	ldr	r3, [r7, #0]
 8017dbe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017dc6:	0a1b      	lsrs	r3, r3, #8
 8017dc8:	b2db      	uxtb	r3, r3
 8017dca:	f003 0303 	and.w	r3, r3, #3
 8017dce:	b2da      	uxtb	r2, r3
 8017dd0:	683b      	ldr	r3, [r7, #0]
 8017dd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017dda:	085b      	lsrs	r3, r3, #1
 8017ddc:	b2db      	uxtb	r3, r3
 8017dde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017de2:	b2da      	uxtb	r2, r3
 8017de4:	683b      	ldr	r3, [r7, #0]
 8017de6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8017dea:	683b      	ldr	r3, [r7, #0]
 8017dec:	2201      	movs	r2, #1
 8017dee:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8017df2:	2300      	movs	r3, #0
}
 8017df4:	4618      	mov	r0, r3
 8017df6:	370c      	adds	r7, #12
 8017df8:	46bd      	mov	sp, r7
 8017dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dfe:	4770      	bx	lr
 8017e00:	1fe00fff 	.word	0x1fe00fff

08017e04 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b094      	sub	sp, #80	@ 0x50
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	6078      	str	r0, [r7, #4]
 8017e0c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8017e0e:	2300      	movs	r3, #0
 8017e10:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017e1a:	b2db      	uxtb	r3, r3
 8017e1c:	2b03      	cmp	r3, #3
 8017e1e:	d101      	bne.n	8017e24 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8017e20:	2301      	movs	r3, #1
 8017e22:	e0a7      	b.n	8017f74 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8017e24:	f107 0308 	add.w	r3, r7, #8
 8017e28:	4619      	mov	r1, r3
 8017e2a:	6878      	ldr	r0, [r7, #4]
 8017e2c:	f000 fb62 	bl	80184f4 <SD_SendSDStatus>
 8017e30:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8017e32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d011      	beq.n	8017e5c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	4a4f      	ldr	r2, [pc, #316]	@ (8017f7c <HAL_SD_GetCardStatus+0x178>)
 8017e3e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017e44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017e46:	431a      	orrs	r2, r3
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	2201      	movs	r2, #1
 8017e50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8017e54:	2301      	movs	r3, #1
 8017e56:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8017e5a:	e070      	b.n	8017f3e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8017e5c:	68bb      	ldr	r3, [r7, #8]
 8017e5e:	099b      	lsrs	r3, r3, #6
 8017e60:	b2db      	uxtb	r3, r3
 8017e62:	f003 0303 	and.w	r3, r3, #3
 8017e66:	b2da      	uxtb	r2, r3
 8017e68:	683b      	ldr	r3, [r7, #0]
 8017e6a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8017e6c:	68bb      	ldr	r3, [r7, #8]
 8017e6e:	095b      	lsrs	r3, r3, #5
 8017e70:	b2db      	uxtb	r3, r3
 8017e72:	f003 0301 	and.w	r3, r3, #1
 8017e76:	b2da      	uxtb	r2, r3
 8017e78:	683b      	ldr	r3, [r7, #0]
 8017e7a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8017e7c:	68bb      	ldr	r3, [r7, #8]
 8017e7e:	0a1b      	lsrs	r3, r3, #8
 8017e80:	b29b      	uxth	r3, r3
 8017e82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8017e86:	b29a      	uxth	r2, r3
 8017e88:	68bb      	ldr	r3, [r7, #8]
 8017e8a:	0e1b      	lsrs	r3, r3, #24
 8017e8c:	b29b      	uxth	r3, r3
 8017e8e:	4313      	orrs	r3, r2
 8017e90:	b29a      	uxth	r2, r3
 8017e92:	683b      	ldr	r3, [r7, #0]
 8017e94:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	061a      	lsls	r2, r3, #24
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	021b      	lsls	r3, r3, #8
 8017e9e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8017ea2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	0a1b      	lsrs	r3, r3, #8
 8017ea8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8017eac:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	0e1b      	lsrs	r3, r3, #24
 8017eb2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8017eb4:	683b      	ldr	r3, [r7, #0]
 8017eb6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8017eb8:	693b      	ldr	r3, [r7, #16]
 8017eba:	b2da      	uxtb	r2, r3
 8017ebc:	683b      	ldr	r3, [r7, #0]
 8017ebe:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8017ec0:	693b      	ldr	r3, [r7, #16]
 8017ec2:	0a1b      	lsrs	r3, r3, #8
 8017ec4:	b2da      	uxtb	r2, r3
 8017ec6:	683b      	ldr	r3, [r7, #0]
 8017ec8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8017eca:	693b      	ldr	r3, [r7, #16]
 8017ecc:	0d1b      	lsrs	r3, r3, #20
 8017ece:	b2db      	uxtb	r3, r3
 8017ed0:	f003 030f 	and.w	r3, r3, #15
 8017ed4:	b2da      	uxtb	r2, r3
 8017ed6:	683b      	ldr	r3, [r7, #0]
 8017ed8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8017eda:	693b      	ldr	r3, [r7, #16]
 8017edc:	0c1b      	lsrs	r3, r3, #16
 8017ede:	b29b      	uxth	r3, r3
 8017ee0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8017ee4:	b29a      	uxth	r2, r3
 8017ee6:	697b      	ldr	r3, [r7, #20]
 8017ee8:	b29b      	uxth	r3, r3
 8017eea:	b2db      	uxtb	r3, r3
 8017eec:	b29b      	uxth	r3, r3
 8017eee:	4313      	orrs	r3, r2
 8017ef0:	b29a      	uxth	r2, r3
 8017ef2:	683b      	ldr	r3, [r7, #0]
 8017ef4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8017ef6:	697b      	ldr	r3, [r7, #20]
 8017ef8:	0a9b      	lsrs	r3, r3, #10
 8017efa:	b2db      	uxtb	r3, r3
 8017efc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017f00:	b2da      	uxtb	r2, r3
 8017f02:	683b      	ldr	r3, [r7, #0]
 8017f04:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8017f06:	697b      	ldr	r3, [r7, #20]
 8017f08:	0a1b      	lsrs	r3, r3, #8
 8017f0a:	b2db      	uxtb	r3, r3
 8017f0c:	f003 0303 	and.w	r3, r3, #3
 8017f10:	b2da      	uxtb	r2, r3
 8017f12:	683b      	ldr	r3, [r7, #0]
 8017f14:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8017f16:	697b      	ldr	r3, [r7, #20]
 8017f18:	091b      	lsrs	r3, r3, #4
 8017f1a:	b2db      	uxtb	r3, r3
 8017f1c:	f003 030f 	and.w	r3, r3, #15
 8017f20:	b2da      	uxtb	r2, r3
 8017f22:	683b      	ldr	r3, [r7, #0]
 8017f24:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8017f26:	697b      	ldr	r3, [r7, #20]
 8017f28:	b2db      	uxtb	r3, r3
 8017f2a:	f003 030f 	and.w	r3, r3, #15
 8017f2e:	b2da      	uxtb	r2, r3
 8017f30:	683b      	ldr	r3, [r7, #0]
 8017f32:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8017f34:	69bb      	ldr	r3, [r7, #24]
 8017f36:	0e1b      	lsrs	r3, r3, #24
 8017f38:	b2da      	uxtb	r2, r3
 8017f3a:	683b      	ldr	r3, [r7, #0]
 8017f3c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8017f46:	4618      	mov	r0, r3
 8017f48:	f002 f97c 	bl	801a244 <SDMMC_CmdBlockLength>
 8017f4c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8017f4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d00d      	beq.n	8017f70 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	4a08      	ldr	r2, [pc, #32]	@ (8017f7c <HAL_SD_GetCardStatus+0x178>)
 8017f5a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017f60:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	2201      	movs	r2, #1
 8017f66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8017f6a:	2301      	movs	r3, #1
 8017f6c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8017f70:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8017f74:	4618      	mov	r0, r3
 8017f76:	3750      	adds	r7, #80	@ 0x50
 8017f78:	46bd      	mov	sp, r7
 8017f7a:	bd80      	pop	{r7, pc}
 8017f7c:	1fe00fff 	.word	0x1fe00fff

08017f80 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8017f80:	b480      	push	{r7}
 8017f82:	b083      	sub	sp, #12
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	6078      	str	r0, [r7, #4]
 8017f88:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017f8e:	683b      	ldr	r3, [r7, #0]
 8017f90:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8017f96:	683b      	ldr	r3, [r7, #0]
 8017f98:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017f9e:	683b      	ldr	r3, [r7, #0]
 8017fa0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017fa6:	683b      	ldr	r3, [r7, #0]
 8017fa8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8017fae:	683b      	ldr	r3, [r7, #0]
 8017fb0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017fb6:	683b      	ldr	r3, [r7, #0]
 8017fb8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017fbe:	683b      	ldr	r3, [r7, #0]
 8017fc0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8017fc6:	683b      	ldr	r3, [r7, #0]
 8017fc8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8017fca:	2300      	movs	r3, #0
}
 8017fcc:	4618      	mov	r0, r3
 8017fce:	370c      	adds	r7, #12
 8017fd0:	46bd      	mov	sp, r7
 8017fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fd6:	4770      	bx	lr

08017fd8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8017fd8:	b590      	push	{r4, r7, lr}
 8017fda:	b08d      	sub	sp, #52	@ 0x34
 8017fdc:	af02      	add	r7, sp, #8
 8017fde:	6078      	str	r0, [r7, #4]
 8017fe0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	2203      	movs	r2, #3
 8017fec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017ff4:	2b03      	cmp	r3, #3
 8017ff6:	d02e      	beq.n	8018056 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8017ff8:	683b      	ldr	r3, [r7, #0]
 8017ffa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017ffe:	d106      	bne.n	801800e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018004:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	635a      	str	r2, [r3, #52]	@ 0x34
 801800c:	e029      	b.n	8018062 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 801800e:	683b      	ldr	r3, [r7, #0]
 8018010:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8018014:	d10a      	bne.n	801802c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8018016:	6878      	ldr	r0, [r7, #4]
 8018018:	f000 fb64 	bl	80186e4 <SD_WideBus_Enable>
 801801c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018022:	6a3b      	ldr	r3, [r7, #32]
 8018024:	431a      	orrs	r2, r3
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	635a      	str	r2, [r3, #52]	@ 0x34
 801802a:	e01a      	b.n	8018062 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 801802c:	683b      	ldr	r3, [r7, #0]
 801802e:	2b00      	cmp	r3, #0
 8018030:	d10a      	bne.n	8018048 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8018032:	6878      	ldr	r0, [r7, #4]
 8018034:	f000 fba1 	bl	801877a <SD_WideBus_Disable>
 8018038:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801803e:	6a3b      	ldr	r3, [r7, #32]
 8018040:	431a      	orrs	r2, r3
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	635a      	str	r2, [r3, #52]	@ 0x34
 8018046:	e00c      	b.n	8018062 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801804c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	635a      	str	r2, [r3, #52]	@ 0x34
 8018054:	e005      	b.n	8018062 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801805a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018066:	2b00      	cmp	r3, #0
 8018068:	d007      	beq.n	801807a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	4a5f      	ldr	r2, [pc, #380]	@ (80181ec <HAL_SD_ConfigWideBusOperation+0x214>)
 8018070:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8018072:	2301      	movs	r3, #1
 8018074:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018078:	e096      	b.n	80181a8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 801807a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 801807e:	f04f 0100 	mov.w	r1, #0
 8018082:	f7fd fdf5 	bl	8015c70 <HAL_RCCEx_GetPeriphCLKFreq>
 8018086:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8018088:	69fb      	ldr	r3, [r7, #28]
 801808a:	2b00      	cmp	r3, #0
 801808c:	f000 8083 	beq.w	8018196 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	685b      	ldr	r3, [r3, #4]
 8018094:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	689b      	ldr	r3, [r3, #8]
 801809a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 801809c:	683b      	ldr	r3, [r7, #0]
 801809e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	691b      	ldr	r3, [r3, #16]
 80180a4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	695a      	ldr	r2, [r3, #20]
 80180aa:	69fb      	ldr	r3, [r7, #28]
 80180ac:	4950      	ldr	r1, [pc, #320]	@ (80181f0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80180ae:	fba1 1303 	umull	r1, r3, r1, r3
 80180b2:	0e1b      	lsrs	r3, r3, #24
 80180b4:	429a      	cmp	r2, r3
 80180b6:	d303      	bcc.n	80180c0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	695b      	ldr	r3, [r3, #20]
 80180bc:	61bb      	str	r3, [r7, #24]
 80180be:	e05a      	b.n	8018176 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80180c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80180c8:	d103      	bne.n	80180d2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	695b      	ldr	r3, [r3, #20]
 80180ce:	61bb      	str	r3, [r7, #24]
 80180d0:	e051      	b.n	8018176 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80180d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80180da:	d126      	bne.n	801812a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	695b      	ldr	r3, [r3, #20]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d10e      	bne.n	8018102 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80180e4:	69fb      	ldr	r3, [r7, #28]
 80180e6:	4a43      	ldr	r2, [pc, #268]	@ (80181f4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80180e8:	4293      	cmp	r3, r2
 80180ea:	d906      	bls.n	80180fa <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80180ec:	69fb      	ldr	r3, [r7, #28]
 80180ee:	4a40      	ldr	r2, [pc, #256]	@ (80181f0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80180f0:	fba2 2303 	umull	r2, r3, r2, r3
 80180f4:	0e5b      	lsrs	r3, r3, #25
 80180f6:	61bb      	str	r3, [r7, #24]
 80180f8:	e03d      	b.n	8018176 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	695b      	ldr	r3, [r3, #20]
 80180fe:	61bb      	str	r3, [r7, #24]
 8018100:	e039      	b.n	8018176 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	695b      	ldr	r3, [r3, #20]
 8018106:	005b      	lsls	r3, r3, #1
 8018108:	69fa      	ldr	r2, [r7, #28]
 801810a:	fbb2 f3f3 	udiv	r3, r2, r3
 801810e:	4a39      	ldr	r2, [pc, #228]	@ (80181f4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8018110:	4293      	cmp	r3, r2
 8018112:	d906      	bls.n	8018122 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8018114:	69fb      	ldr	r3, [r7, #28]
 8018116:	4a36      	ldr	r2, [pc, #216]	@ (80181f0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8018118:	fba2 2303 	umull	r2, r3, r2, r3
 801811c:	0e5b      	lsrs	r3, r3, #25
 801811e:	61bb      	str	r3, [r7, #24]
 8018120:	e029      	b.n	8018176 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	695b      	ldr	r3, [r3, #20]
 8018126:	61bb      	str	r3, [r7, #24]
 8018128:	e025      	b.n	8018176 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	695b      	ldr	r3, [r3, #20]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d10e      	bne.n	8018150 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8018132:	69fb      	ldr	r3, [r7, #28]
 8018134:	4a30      	ldr	r2, [pc, #192]	@ (80181f8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8018136:	4293      	cmp	r3, r2
 8018138:	d906      	bls.n	8018148 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 801813a:	69fb      	ldr	r3, [r7, #28]
 801813c:	4a2c      	ldr	r2, [pc, #176]	@ (80181f0 <HAL_SD_ConfigWideBusOperation+0x218>)
 801813e:	fba2 2303 	umull	r2, r3, r2, r3
 8018142:	0e1b      	lsrs	r3, r3, #24
 8018144:	61bb      	str	r3, [r7, #24]
 8018146:	e016      	b.n	8018176 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	695b      	ldr	r3, [r3, #20]
 801814c:	61bb      	str	r3, [r7, #24]
 801814e:	e012      	b.n	8018176 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	695b      	ldr	r3, [r3, #20]
 8018154:	005b      	lsls	r3, r3, #1
 8018156:	69fa      	ldr	r2, [r7, #28]
 8018158:	fbb2 f3f3 	udiv	r3, r2, r3
 801815c:	4a26      	ldr	r2, [pc, #152]	@ (80181f8 <HAL_SD_ConfigWideBusOperation+0x220>)
 801815e:	4293      	cmp	r3, r2
 8018160:	d906      	bls.n	8018170 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8018162:	69fb      	ldr	r3, [r7, #28]
 8018164:	4a22      	ldr	r2, [pc, #136]	@ (80181f0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8018166:	fba2 2303 	umull	r2, r3, r2, r3
 801816a:	0e1b      	lsrs	r3, r3, #24
 801816c:	61bb      	str	r3, [r7, #24]
 801816e:	e002      	b.n	8018176 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	695b      	ldr	r3, [r3, #20]
 8018174:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	681c      	ldr	r4, [r3, #0]
 801817a:	466a      	mov	r2, sp
 801817c:	f107 0314 	add.w	r3, r7, #20
 8018180:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018184:	e882 0003 	stmia.w	r2, {r0, r1}
 8018188:	f107 0308 	add.w	r3, r7, #8
 801818c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801818e:	4620      	mov	r0, r4
 8018190:	f001 ff7a 	bl	801a088 <SDMMC_Init>
 8018194:	e008      	b.n	80181a8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801819a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80181a2:	2301      	movs	r3, #1
 80181a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80181b0:	4618      	mov	r0, r3
 80181b2:	f002 f847 	bl	801a244 <SDMMC_CmdBlockLength>
 80181b6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80181b8:	6a3b      	ldr	r3, [r7, #32]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d00c      	beq.n	80181d8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	4a0a      	ldr	r2, [pc, #40]	@ (80181ec <HAL_SD_ConfigWideBusOperation+0x214>)
 80181c4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80181ca:	6a3b      	ldr	r3, [r7, #32]
 80181cc:	431a      	orrs	r2, r3
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80181d2:	2301      	movs	r3, #1
 80181d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	2201      	movs	r2, #1
 80181dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80181e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80181e4:	4618      	mov	r0, r3
 80181e6:	372c      	adds	r7, #44	@ 0x2c
 80181e8:	46bd      	mov	sp, r7
 80181ea:	bd90      	pop	{r4, r7, pc}
 80181ec:	1fe00fff 	.word	0x1fe00fff
 80181f0:	55e63b89 	.word	0x55e63b89
 80181f4:	02faf080 	.word	0x02faf080
 80181f8:	017d7840 	.word	0x017d7840

080181fc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80181fc:	b580      	push	{r7, lr}
 80181fe:	b086      	sub	sp, #24
 8018200:	af00      	add	r7, sp, #0
 8018202:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8018204:	2300      	movs	r3, #0
 8018206:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8018208:	f107 030c 	add.w	r3, r7, #12
 801820c:	4619      	mov	r1, r3
 801820e:	6878      	ldr	r0, [r7, #4]
 8018210:	f000 fa40 	bl	8018694 <SD_SendStatus>
 8018214:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8018216:	697b      	ldr	r3, [r7, #20]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d005      	beq.n	8018228 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018220:	697b      	ldr	r3, [r7, #20]
 8018222:	431a      	orrs	r2, r3
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	0a5b      	lsrs	r3, r3, #9
 801822c:	f003 030f 	and.w	r3, r3, #15
 8018230:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8018232:	693b      	ldr	r3, [r7, #16]
}
 8018234:	4618      	mov	r0, r3
 8018236:	3718      	adds	r7, #24
 8018238:	46bd      	mov	sp, r7
 801823a:	bd80      	pop	{r7, pc}

0801823c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 801823c:	b580      	push	{r7, lr}
 801823e:	b090      	sub	sp, #64	@ 0x40
 8018240:	af00      	add	r7, sp, #0
 8018242:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8018244:	2300      	movs	r3, #0
 8018246:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8018248:	f7f8 fbe8 	bl	8010a1c <HAL_GetTick>
 801824c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	4618      	mov	r0, r3
 8018254:	f001 ff71 	bl	801a13a <SDMMC_GetPowerState>
 8018258:	4603      	mov	r3, r0
 801825a:	2b00      	cmp	r3, #0
 801825c:	d102      	bne.n	8018264 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801825e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8018262:	e0b5      	b.n	80183d0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018268:	2b03      	cmp	r3, #3
 801826a:	d02e      	beq.n	80182ca <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	4618      	mov	r0, r3
 8018272:	f002 f9bc 	bl	801a5ee <SDMMC_CmdSendCID>
 8018276:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8018278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801827a:	2b00      	cmp	r3, #0
 801827c:	d001      	beq.n	8018282 <SD_InitCard+0x46>
    {
      return errorstate;
 801827e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018280:	e0a6      	b.n	80183d0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	2100      	movs	r1, #0
 8018288:	4618      	mov	r0, r3
 801828a:	f001 ff9c 	bl	801a1c6 <SDMMC_GetResponse>
 801828e:	4602      	mov	r2, r0
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	2104      	movs	r1, #4
 801829a:	4618      	mov	r0, r3
 801829c:	f001 ff93 	bl	801a1c6 <SDMMC_GetResponse>
 80182a0:	4602      	mov	r2, r0
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	2108      	movs	r1, #8
 80182ac:	4618      	mov	r0, r3
 80182ae:	f001 ff8a 	bl	801a1c6 <SDMMC_GetResponse>
 80182b2:	4602      	mov	r2, r0
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	210c      	movs	r1, #12
 80182be:	4618      	mov	r0, r3
 80182c0:	f001 ff81 	bl	801a1c6 <SDMMC_GetResponse>
 80182c4:	4602      	mov	r2, r0
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182ce:	2b03      	cmp	r3, #3
 80182d0:	d01d      	beq.n	801830e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80182d2:	e019      	b.n	8018308 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	f107 020a 	add.w	r2, r7, #10
 80182dc:	4611      	mov	r1, r2
 80182de:	4618      	mov	r0, r3
 80182e0:	f002 f9c4 	bl	801a66c <SDMMC_CmdSetRelAdd>
 80182e4:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80182e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d001      	beq.n	80182f0 <SD_InitCard+0xb4>
      {
        return errorstate;
 80182ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182ee:	e06f      	b.n	80183d0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80182f0:	f7f8 fb94 	bl	8010a1c <HAL_GetTick>
 80182f4:	4602      	mov	r2, r0
 80182f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182f8:	1ad3      	subs	r3, r2, r3
 80182fa:	f241 3287 	movw	r2, #4999	@ 0x1387
 80182fe:	4293      	cmp	r3, r2
 8018300:	d902      	bls.n	8018308 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8018302:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8018306:	e063      	b.n	80183d0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8018308:	897b      	ldrh	r3, [r7, #10]
 801830a:	2b00      	cmp	r3, #0
 801830c:	d0e2      	beq.n	80182d4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018312:	2b03      	cmp	r3, #3
 8018314:	d036      	beq.n	8018384 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8018316:	897b      	ldrh	r3, [r7, #10]
 8018318:	461a      	mov	r2, r3
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681a      	ldr	r2, [r3, #0]
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018326:	041b      	lsls	r3, r3, #16
 8018328:	4619      	mov	r1, r3
 801832a:	4610      	mov	r0, r2
 801832c:	f002 f97e 	bl	801a62c <SDMMC_CmdSendCSD>
 8018330:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8018332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018334:	2b00      	cmp	r3, #0
 8018336:	d001      	beq.n	801833c <SD_InitCard+0x100>
    {
      return errorstate;
 8018338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801833a:	e049      	b.n	80183d0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	2100      	movs	r1, #0
 8018342:	4618      	mov	r0, r3
 8018344:	f001 ff3f 	bl	801a1c6 <SDMMC_GetResponse>
 8018348:	4602      	mov	r2, r0
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	2104      	movs	r1, #4
 8018354:	4618      	mov	r0, r3
 8018356:	f001 ff36 	bl	801a1c6 <SDMMC_GetResponse>
 801835a:	4602      	mov	r2, r0
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	2108      	movs	r1, #8
 8018366:	4618      	mov	r0, r3
 8018368:	f001 ff2d 	bl	801a1c6 <SDMMC_GetResponse>
 801836c:	4602      	mov	r2, r0
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	210c      	movs	r1, #12
 8018378:	4618      	mov	r0, r3
 801837a:	f001 ff24 	bl	801a1c6 <SDMMC_GetResponse>
 801837e:	4602      	mov	r2, r0
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	2104      	movs	r1, #4
 801838a:	4618      	mov	r0, r3
 801838c:	f001 ff1b 	bl	801a1c6 <SDMMC_GetResponse>
 8018390:	4603      	mov	r3, r0
 8018392:	0d1a      	lsrs	r2, r3, #20
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8018398:	f107 030c 	add.w	r3, r7, #12
 801839c:	4619      	mov	r1, r3
 801839e:	6878      	ldr	r0, [r7, #4]
 80183a0:	f7ff fb8c 	bl	8017abc <HAL_SD_GetCardCSD>
 80183a4:	4603      	mov	r3, r0
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d002      	beq.n	80183b0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80183aa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80183ae:	e00f      	b.n	80183d0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	681a      	ldr	r2, [r3, #0]
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80183b8:	041b      	lsls	r3, r3, #16
 80183ba:	4619      	mov	r1, r3
 80183bc:	4610      	mov	r0, r2
 80183be:	f002 f82d 	bl	801a41c <SDMMC_CmdSelDesel>
 80183c2:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80183c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d001      	beq.n	80183ce <SD_InitCard+0x192>
  {
    return errorstate;
 80183ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183cc:	e000      	b.n	80183d0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80183ce:	2300      	movs	r3, #0
}
 80183d0:	4618      	mov	r0, r3
 80183d2:	3740      	adds	r7, #64	@ 0x40
 80183d4:	46bd      	mov	sp, r7
 80183d6:	bd80      	pop	{r7, pc}

080183d8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80183d8:	b580      	push	{r7, lr}
 80183da:	b086      	sub	sp, #24
 80183dc:	af00      	add	r7, sp, #0
 80183de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80183e0:	2300      	movs	r3, #0
 80183e2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80183e4:	2300      	movs	r3, #0
 80183e6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80183e8:	2300      	movs	r3, #0
 80183ea:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	4618      	mov	r0, r3
 80183f2:	f002 f836 	bl	801a462 <SDMMC_CmdGoIdleState>
 80183f6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d001      	beq.n	8018402 <SD_PowerON+0x2a>
  {
    return errorstate;
 80183fe:	68fb      	ldr	r3, [r7, #12]
 8018400:	e072      	b.n	80184e8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	4618      	mov	r0, r3
 8018408:	f002 f849 	bl	801a49e <SDMMC_CmdOperCond>
 801840c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 801840e:	68fb      	ldr	r3, [r7, #12]
 8018410:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8018414:	d10d      	bne.n	8018432 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	2200      	movs	r2, #0
 801841a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	4618      	mov	r0, r3
 8018422:	f002 f81e 	bl	801a462 <SDMMC_CmdGoIdleState>
 8018426:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d004      	beq.n	8018438 <SD_PowerON+0x60>
    {
      return errorstate;
 801842e:	68fb      	ldr	r3, [r7, #12]
 8018430:	e05a      	b.n	80184e8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	2201      	movs	r2, #1
 8018436:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801843c:	2b01      	cmp	r3, #1
 801843e:	d137      	bne.n	80184b0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	2100      	movs	r1, #0
 8018446:	4618      	mov	r0, r3
 8018448:	f002 f849 	bl	801a4de <SDMMC_CmdAppCommand>
 801844c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 801844e:	68fb      	ldr	r3, [r7, #12]
 8018450:	2b00      	cmp	r3, #0
 8018452:	d02d      	beq.n	80184b0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8018454:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8018458:	e046      	b.n	80184e8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	2100      	movs	r1, #0
 8018460:	4618      	mov	r0, r3
 8018462:	f002 f83c 	bl	801a4de <SDMMC_CmdAppCommand>
 8018466:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	2b00      	cmp	r3, #0
 801846c:	d001      	beq.n	8018472 <SD_PowerON+0x9a>
    {
      return errorstate;
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	e03a      	b.n	80184e8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	491e      	ldr	r1, [pc, #120]	@ (80184f0 <SD_PowerON+0x118>)
 8018478:	4618      	mov	r0, r3
 801847a:	f002 f853 	bl	801a524 <SDMMC_CmdAppOperCommand>
 801847e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	2b00      	cmp	r3, #0
 8018484:	d002      	beq.n	801848c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8018486:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801848a:	e02d      	b.n	80184e8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	2100      	movs	r1, #0
 8018492:	4618      	mov	r0, r3
 8018494:	f001 fe97 	bl	801a1c6 <SDMMC_GetResponse>
 8018498:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 801849a:	697b      	ldr	r3, [r7, #20]
 801849c:	0fdb      	lsrs	r3, r3, #31
 801849e:	2b01      	cmp	r3, #1
 80184a0:	d101      	bne.n	80184a6 <SD_PowerON+0xce>
 80184a2:	2301      	movs	r3, #1
 80184a4:	e000      	b.n	80184a8 <SD_PowerON+0xd0>
 80184a6:	2300      	movs	r3, #0
 80184a8:	613b      	str	r3, [r7, #16]

    count++;
 80184aa:	68bb      	ldr	r3, [r7, #8]
 80184ac:	3301      	adds	r3, #1
 80184ae:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80184b0:	68bb      	ldr	r3, [r7, #8]
 80184b2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80184b6:	4293      	cmp	r3, r2
 80184b8:	d802      	bhi.n	80184c0 <SD_PowerON+0xe8>
 80184ba:	693b      	ldr	r3, [r7, #16]
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d0cc      	beq.n	801845a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80184c0:	68bb      	ldr	r3, [r7, #8]
 80184c2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80184c6:	4293      	cmp	r3, r2
 80184c8:	d902      	bls.n	80184d0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80184ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80184ce:	e00b      	b.n	80184e8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	2200      	movs	r2, #0
 80184d4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80184d6:	697b      	ldr	r3, [r7, #20]
 80184d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d002      	beq.n	80184e6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	2201      	movs	r2, #1
 80184e4:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80184e6:	2300      	movs	r3, #0
}
 80184e8:	4618      	mov	r0, r3
 80184ea:	3718      	adds	r7, #24
 80184ec:	46bd      	mov	sp, r7
 80184ee:	bd80      	pop	{r7, pc}
 80184f0:	c1100000 	.word	0xc1100000

080184f4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80184f4:	b580      	push	{r7, lr}
 80184f6:	b08c      	sub	sp, #48	@ 0x30
 80184f8:	af00      	add	r7, sp, #0
 80184fa:	6078      	str	r0, [r7, #4]
 80184fc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80184fe:	f7f8 fa8d 	bl	8010a1c <HAL_GetTick>
 8018502:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8018504:	683b      	ldr	r3, [r7, #0]
 8018506:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	2100      	movs	r1, #0
 801850e:	4618      	mov	r0, r3
 8018510:	f001 fe59 	bl	801a1c6 <SDMMC_GetResponse>
 8018514:	4603      	mov	r3, r0
 8018516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801851a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801851e:	d102      	bne.n	8018526 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8018520:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018524:	e0b0      	b.n	8018688 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	2140      	movs	r1, #64	@ 0x40
 801852c:	4618      	mov	r0, r3
 801852e:	f001 fe89 	bl	801a244 <SDMMC_CmdBlockLength>
 8018532:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8018534:	6a3b      	ldr	r3, [r7, #32]
 8018536:	2b00      	cmp	r3, #0
 8018538:	d005      	beq.n	8018546 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8018542:	6a3b      	ldr	r3, [r7, #32]
 8018544:	e0a0      	b.n	8018688 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	681a      	ldr	r2, [r3, #0]
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801854e:	041b      	lsls	r3, r3, #16
 8018550:	4619      	mov	r1, r3
 8018552:	4610      	mov	r0, r2
 8018554:	f001 ffc3 	bl	801a4de <SDMMC_CmdAppCommand>
 8018558:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801855a:	6a3b      	ldr	r3, [r7, #32]
 801855c:	2b00      	cmp	r3, #0
 801855e:	d005      	beq.n	801856c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8018568:	6a3b      	ldr	r3, [r7, #32]
 801856a:	e08d      	b.n	8018688 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801856c:	f04f 33ff 	mov.w	r3, #4294967295
 8018570:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8018572:	2340      	movs	r3, #64	@ 0x40
 8018574:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8018576:	2360      	movs	r3, #96	@ 0x60
 8018578:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801857a:	2302      	movs	r3, #2
 801857c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801857e:	2300      	movs	r3, #0
 8018580:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8018582:	2301      	movs	r3, #1
 8018584:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	f107 0208 	add.w	r2, r7, #8
 801858e:	4611      	mov	r1, r2
 8018590:	4618      	mov	r0, r3
 8018592:	f001 fe2b 	bl	801a1ec <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	4618      	mov	r0, r3
 801859c:	f002 f8ab 	bl	801a6f6 <SDMMC_CmdStatusRegister>
 80185a0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80185a2:	6a3b      	ldr	r3, [r7, #32]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d02b      	beq.n	8018600 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80185b0:	6a3b      	ldr	r3, [r7, #32]
 80185b2:	e069      	b.n	8018688 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80185ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d013      	beq.n	80185ea <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80185c2:	2300      	movs	r3, #0
 80185c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80185c6:	e00d      	b.n	80185e4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	4618      	mov	r0, r3
 80185ce:	f001 fd85 	bl	801a0dc <SDMMC_ReadFIFO>
 80185d2:	4602      	mov	r2, r0
 80185d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185d6:	601a      	str	r2, [r3, #0]
        pData++;
 80185d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185da:	3304      	adds	r3, #4
 80185dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 80185de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185e0:	3301      	adds	r3, #1
 80185e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80185e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185e6:	2b07      	cmp	r3, #7
 80185e8:	d9ee      	bls.n	80185c8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80185ea:	f7f8 fa17 	bl	8010a1c <HAL_GetTick>
 80185ee:	4602      	mov	r2, r0
 80185f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185f2:	1ad3      	subs	r3, r2, r3
 80185f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80185f8:	d102      	bne.n	8018600 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80185fa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80185fe:	e043      	b.n	8018688 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018606:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 801860a:	2b00      	cmp	r3, #0
 801860c:	d0d2      	beq.n	80185b4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018614:	f003 0308 	and.w	r3, r3, #8
 8018618:	2b00      	cmp	r3, #0
 801861a:	d001      	beq.n	8018620 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 801861c:	2308      	movs	r3, #8
 801861e:	e033      	b.n	8018688 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018626:	f003 0302 	and.w	r3, r3, #2
 801862a:	2b00      	cmp	r3, #0
 801862c:	d001      	beq.n	8018632 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801862e:	2302      	movs	r3, #2
 8018630:	e02a      	b.n	8018688 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018638:	f003 0320 	and.w	r3, r3, #32
 801863c:	2b00      	cmp	r3, #0
 801863e:	d017      	beq.n	8018670 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8018640:	2320      	movs	r3, #32
 8018642:	e021      	b.n	8018688 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	4618      	mov	r0, r3
 801864a:	f001 fd47 	bl	801a0dc <SDMMC_ReadFIFO>
 801864e:	4602      	mov	r2, r0
 8018650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018652:	601a      	str	r2, [r3, #0]
    pData++;
 8018654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018656:	3304      	adds	r3, #4
 8018658:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801865a:	f7f8 f9df 	bl	8010a1c <HAL_GetTick>
 801865e:	4602      	mov	r2, r0
 8018660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018662:	1ad3      	subs	r3, r2, r3
 8018664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018668:	d102      	bne.n	8018670 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801866a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801866e:	e00b      	b.n	8018688 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018676:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801867a:	2b00      	cmp	r3, #0
 801867c:	d1e2      	bne.n	8018644 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	681b      	ldr	r3, [r3, #0]
 8018682:	4a03      	ldr	r2, [pc, #12]	@ (8018690 <SD_SendSDStatus+0x19c>)
 8018684:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8018686:	2300      	movs	r3, #0
}
 8018688:	4618      	mov	r0, r3
 801868a:	3730      	adds	r7, #48	@ 0x30
 801868c:	46bd      	mov	sp, r7
 801868e:	bd80      	pop	{r7, pc}
 8018690:	18000f3a 	.word	0x18000f3a

08018694 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b084      	sub	sp, #16
 8018698:	af00      	add	r7, sp, #0
 801869a:	6078      	str	r0, [r7, #4]
 801869c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 801869e:	683b      	ldr	r3, [r7, #0]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d102      	bne.n	80186aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80186a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80186a8:	e018      	b.n	80186dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	681a      	ldr	r2, [r3, #0]
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80186b2:	041b      	lsls	r3, r3, #16
 80186b4:	4619      	mov	r1, r3
 80186b6:	4610      	mov	r0, r2
 80186b8:	f001 fffa 	bl	801a6b0 <SDMMC_CmdSendStatus>
 80186bc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d001      	beq.n	80186c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	e009      	b.n	80186dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	2100      	movs	r1, #0
 80186ce:	4618      	mov	r0, r3
 80186d0:	f001 fd79 	bl	801a1c6 <SDMMC_GetResponse>
 80186d4:	4602      	mov	r2, r0
 80186d6:	683b      	ldr	r3, [r7, #0]
 80186d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80186da:	2300      	movs	r3, #0
}
 80186dc:	4618      	mov	r0, r3
 80186de:	3710      	adds	r7, #16
 80186e0:	46bd      	mov	sp, r7
 80186e2:	bd80      	pop	{r7, pc}

080186e4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80186e4:	b580      	push	{r7, lr}
 80186e6:	b086      	sub	sp, #24
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80186ec:	2300      	movs	r3, #0
 80186ee:	60fb      	str	r3, [r7, #12]
 80186f0:	2300      	movs	r3, #0
 80186f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	2100      	movs	r1, #0
 80186fa:	4618      	mov	r0, r3
 80186fc:	f001 fd63 	bl	801a1c6 <SDMMC_GetResponse>
 8018700:	4603      	mov	r3, r0
 8018702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8018706:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801870a:	d102      	bne.n	8018712 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801870c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018710:	e02f      	b.n	8018772 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8018712:	f107 030c 	add.w	r3, r7, #12
 8018716:	4619      	mov	r1, r3
 8018718:	6878      	ldr	r0, [r7, #4]
 801871a:	f000 f879 	bl	8018810 <SD_FindSCR>
 801871e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8018720:	697b      	ldr	r3, [r7, #20]
 8018722:	2b00      	cmp	r3, #0
 8018724:	d001      	beq.n	801872a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8018726:	697b      	ldr	r3, [r7, #20]
 8018728:	e023      	b.n	8018772 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801872a:	693b      	ldr	r3, [r7, #16]
 801872c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8018730:	2b00      	cmp	r3, #0
 8018732:	d01c      	beq.n	801876e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	681a      	ldr	r2, [r3, #0]
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801873c:	041b      	lsls	r3, r3, #16
 801873e:	4619      	mov	r1, r3
 8018740:	4610      	mov	r0, r2
 8018742:	f001 fecc 	bl	801a4de <SDMMC_CmdAppCommand>
 8018746:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8018748:	697b      	ldr	r3, [r7, #20]
 801874a:	2b00      	cmp	r3, #0
 801874c:	d001      	beq.n	8018752 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 801874e:	697b      	ldr	r3, [r7, #20]
 8018750:	e00f      	b.n	8018772 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	2102      	movs	r1, #2
 8018758:	4618      	mov	r0, r3
 801875a:	f001 ff03 	bl	801a564 <SDMMC_CmdBusWidth>
 801875e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8018760:	697b      	ldr	r3, [r7, #20]
 8018762:	2b00      	cmp	r3, #0
 8018764:	d001      	beq.n	801876a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8018766:	697b      	ldr	r3, [r7, #20]
 8018768:	e003      	b.n	8018772 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801876a:	2300      	movs	r3, #0
 801876c:	e001      	b.n	8018772 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801876e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8018772:	4618      	mov	r0, r3
 8018774:	3718      	adds	r7, #24
 8018776:	46bd      	mov	sp, r7
 8018778:	bd80      	pop	{r7, pc}

0801877a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801877a:	b580      	push	{r7, lr}
 801877c:	b086      	sub	sp, #24
 801877e:	af00      	add	r7, sp, #0
 8018780:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8018782:	2300      	movs	r3, #0
 8018784:	60fb      	str	r3, [r7, #12]
 8018786:	2300      	movs	r3, #0
 8018788:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	2100      	movs	r1, #0
 8018790:	4618      	mov	r0, r3
 8018792:	f001 fd18 	bl	801a1c6 <SDMMC_GetResponse>
 8018796:	4603      	mov	r3, r0
 8018798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801879c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80187a0:	d102      	bne.n	80187a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80187a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80187a6:	e02f      	b.n	8018808 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80187a8:	f107 030c 	add.w	r3, r7, #12
 80187ac:	4619      	mov	r1, r3
 80187ae:	6878      	ldr	r0, [r7, #4]
 80187b0:	f000 f82e 	bl	8018810 <SD_FindSCR>
 80187b4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80187b6:	697b      	ldr	r3, [r7, #20]
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d001      	beq.n	80187c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80187bc:	697b      	ldr	r3, [r7, #20]
 80187be:	e023      	b.n	8018808 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80187c0:	693b      	ldr	r3, [r7, #16]
 80187c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d01c      	beq.n	8018804 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	681a      	ldr	r2, [r3, #0]
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80187d2:	041b      	lsls	r3, r3, #16
 80187d4:	4619      	mov	r1, r3
 80187d6:	4610      	mov	r0, r2
 80187d8:	f001 fe81 	bl	801a4de <SDMMC_CmdAppCommand>
 80187dc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80187de:	697b      	ldr	r3, [r7, #20]
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d001      	beq.n	80187e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80187e4:	697b      	ldr	r3, [r7, #20]
 80187e6:	e00f      	b.n	8018808 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	2100      	movs	r1, #0
 80187ee:	4618      	mov	r0, r3
 80187f0:	f001 feb8 	bl	801a564 <SDMMC_CmdBusWidth>
 80187f4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80187f6:	697b      	ldr	r3, [r7, #20]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d001      	beq.n	8018800 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80187fc:	697b      	ldr	r3, [r7, #20]
 80187fe:	e003      	b.n	8018808 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8018800:	2300      	movs	r3, #0
 8018802:	e001      	b.n	8018808 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8018804:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8018808:	4618      	mov	r0, r3
 801880a:	3718      	adds	r7, #24
 801880c:	46bd      	mov	sp, r7
 801880e:	bd80      	pop	{r7, pc}

08018810 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8018810:	b580      	push	{r7, lr}
 8018812:	b08e      	sub	sp, #56	@ 0x38
 8018814:	af00      	add	r7, sp, #0
 8018816:	6078      	str	r0, [r7, #4]
 8018818:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801881a:	f7f8 f8ff 	bl	8010a1c <HAL_GetTick>
 801881e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8018820:	2300      	movs	r3, #0
 8018822:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8018824:	2300      	movs	r3, #0
 8018826:	60bb      	str	r3, [r7, #8]
 8018828:	2300      	movs	r3, #0
 801882a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 801882c:	683b      	ldr	r3, [r7, #0]
 801882e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	2108      	movs	r1, #8
 8018836:	4618      	mov	r0, r3
 8018838:	f001 fd04 	bl	801a244 <SDMMC_CmdBlockLength>
 801883c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801883e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018840:	2b00      	cmp	r3, #0
 8018842:	d001      	beq.n	8018848 <SD_FindSCR+0x38>
  {
    return errorstate;
 8018844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018846:	e0ad      	b.n	80189a4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	681a      	ldr	r2, [r3, #0]
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018850:	041b      	lsls	r3, r3, #16
 8018852:	4619      	mov	r1, r3
 8018854:	4610      	mov	r0, r2
 8018856:	f001 fe42 	bl	801a4de <SDMMC_CmdAppCommand>
 801885a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801885c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801885e:	2b00      	cmp	r3, #0
 8018860:	d001      	beq.n	8018866 <SD_FindSCR+0x56>
  {
    return errorstate;
 8018862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018864:	e09e      	b.n	80189a4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8018866:	f04f 33ff 	mov.w	r3, #4294967295
 801886a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 801886c:	2308      	movs	r3, #8
 801886e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8018870:	2330      	movs	r3, #48	@ 0x30
 8018872:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8018874:	2302      	movs	r3, #2
 8018876:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8018878:	2300      	movs	r3, #0
 801887a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801887c:	2301      	movs	r3, #1
 801887e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	f107 0210 	add.w	r2, r7, #16
 8018888:	4611      	mov	r1, r2
 801888a:	4618      	mov	r0, r3
 801888c:	f001 fcae 	bl	801a1ec <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	4618      	mov	r0, r3
 8018896:	f001 fe88 	bl	801a5aa <SDMMC_CmdSendSCR>
 801889a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801889c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d027      	beq.n	80188f2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80188a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80188a4:	e07e      	b.n	80189a4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80188ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d113      	bne.n	80188dc <SD_FindSCR+0xcc>
 80188b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d110      	bne.n	80188dc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	4618      	mov	r0, r3
 80188c0:	f001 fc0c 	bl	801a0dc <SDMMC_ReadFIFO>
 80188c4:	4603      	mov	r3, r0
 80188c6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	4618      	mov	r0, r3
 80188ce:	f001 fc05 	bl	801a0dc <SDMMC_ReadFIFO>
 80188d2:	4603      	mov	r3, r0
 80188d4:	60fb      	str	r3, [r7, #12]
      index++;
 80188d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80188d8:	3301      	adds	r3, #1
 80188da:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80188dc:	f7f8 f89e 	bl	8010a1c <HAL_GetTick>
 80188e0:	4602      	mov	r2, r0
 80188e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188e4:	1ad3      	subs	r3, r2, r3
 80188e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80188ea:	d102      	bne.n	80188f2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80188ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80188f0:	e058      	b.n	80189a4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80188f8:	f240 532a 	movw	r3, #1322	@ 0x52a
 80188fc:	4013      	ands	r3, r2
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d0d1      	beq.n	80188a6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018908:	f003 0308 	and.w	r3, r3, #8
 801890c:	2b00      	cmp	r3, #0
 801890e:	d005      	beq.n	801891c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	2208      	movs	r2, #8
 8018916:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8018918:	2308      	movs	r3, #8
 801891a:	e043      	b.n	80189a4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018922:	f003 0302 	and.w	r3, r3, #2
 8018926:	2b00      	cmp	r3, #0
 8018928:	d005      	beq.n	8018936 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	2202      	movs	r2, #2
 8018930:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8018932:	2302      	movs	r3, #2
 8018934:	e036      	b.n	80189a4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801893c:	f003 0320 	and.w	r3, r3, #32
 8018940:	2b00      	cmp	r3, #0
 8018942:	d005      	beq.n	8018950 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	2220      	movs	r2, #32
 801894a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 801894c:	2320      	movs	r3, #32
 801894e:	e029      	b.n	80189a4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	4a15      	ldr	r2, [pc, #84]	@ (80189ac <SD_FindSCR+0x19c>)
 8018956:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8018958:	68fb      	ldr	r3, [r7, #12]
 801895a:	061a      	lsls	r2, r3, #24
 801895c:	68fb      	ldr	r3, [r7, #12]
 801895e:	021b      	lsls	r3, r3, #8
 8018960:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8018964:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	0a1b      	lsrs	r3, r3, #8
 801896a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 801896e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	0e1b      	lsrs	r3, r3, #24
 8018974:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8018976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018978:	601a      	str	r2, [r3, #0]
    scr++;
 801897a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801897c:	3304      	adds	r3, #4
 801897e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8018980:	68bb      	ldr	r3, [r7, #8]
 8018982:	061a      	lsls	r2, r3, #24
 8018984:	68bb      	ldr	r3, [r7, #8]
 8018986:	021b      	lsls	r3, r3, #8
 8018988:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801898c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801898e:	68bb      	ldr	r3, [r7, #8]
 8018990:	0a1b      	lsrs	r3, r3, #8
 8018992:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8018996:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8018998:	68bb      	ldr	r3, [r7, #8]
 801899a:	0e1b      	lsrs	r3, r3, #24
 801899c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 801899e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189a0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80189a2:	2300      	movs	r3, #0
}
 80189a4:	4618      	mov	r0, r3
 80189a6:	3738      	adds	r7, #56	@ 0x38
 80189a8:	46bd      	mov	sp, r7
 80189aa:	bd80      	pop	{r7, pc}
 80189ac:	18000f3a 	.word	0x18000f3a

080189b0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80189b0:	b580      	push	{r7, lr}
 80189b2:	b086      	sub	sp, #24
 80189b4:	af00      	add	r7, sp, #0
 80189b6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80189bc:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80189c2:	2b1f      	cmp	r3, #31
 80189c4:	d936      	bls.n	8018a34 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80189c6:	2300      	movs	r3, #0
 80189c8:	617b      	str	r3, [r7, #20]
 80189ca:	e027      	b.n	8018a1c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	4618      	mov	r0, r3
 80189d2:	f001 fb83 	bl	801a0dc <SDMMC_ReadFIFO>
 80189d6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80189d8:	68fb      	ldr	r3, [r7, #12]
 80189da:	b2da      	uxtb	r2, r3
 80189dc:	693b      	ldr	r3, [r7, #16]
 80189de:	701a      	strb	r2, [r3, #0]
      tmp++;
 80189e0:	693b      	ldr	r3, [r7, #16]
 80189e2:	3301      	adds	r3, #1
 80189e4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	0a1b      	lsrs	r3, r3, #8
 80189ea:	b2da      	uxtb	r2, r3
 80189ec:	693b      	ldr	r3, [r7, #16]
 80189ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 80189f0:	693b      	ldr	r3, [r7, #16]
 80189f2:	3301      	adds	r3, #1
 80189f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80189f6:	68fb      	ldr	r3, [r7, #12]
 80189f8:	0c1b      	lsrs	r3, r3, #16
 80189fa:	b2da      	uxtb	r2, r3
 80189fc:	693b      	ldr	r3, [r7, #16]
 80189fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8018a00:	693b      	ldr	r3, [r7, #16]
 8018a02:	3301      	adds	r3, #1
 8018a04:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8018a06:	68fb      	ldr	r3, [r7, #12]
 8018a08:	0e1b      	lsrs	r3, r3, #24
 8018a0a:	b2da      	uxtb	r2, r3
 8018a0c:	693b      	ldr	r3, [r7, #16]
 8018a0e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8018a10:	693b      	ldr	r3, [r7, #16]
 8018a12:	3301      	adds	r3, #1
 8018a14:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8018a16:	697b      	ldr	r3, [r7, #20]
 8018a18:	3301      	adds	r3, #1
 8018a1a:	617b      	str	r3, [r7, #20]
 8018a1c:	697b      	ldr	r3, [r7, #20]
 8018a1e:	2b07      	cmp	r3, #7
 8018a20:	d9d4      	bls.n	80189cc <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	693a      	ldr	r2, [r7, #16]
 8018a26:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a2c:	f1a3 0220 	sub.w	r2, r3, #32
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8018a34:	bf00      	nop
 8018a36:	3718      	adds	r7, #24
 8018a38:	46bd      	mov	sp, r7
 8018a3a:	bd80      	pop	{r7, pc}

08018a3c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	b086      	sub	sp, #24
 8018a40:	af00      	add	r7, sp, #0
 8018a42:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	69db      	ldr	r3, [r3, #28]
 8018a48:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	6a1b      	ldr	r3, [r3, #32]
 8018a4e:	2b1f      	cmp	r3, #31
 8018a50:	d93a      	bls.n	8018ac8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8018a52:	2300      	movs	r3, #0
 8018a54:	617b      	str	r3, [r7, #20]
 8018a56:	e02b      	b.n	8018ab0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8018a58:	693b      	ldr	r3, [r7, #16]
 8018a5a:	781b      	ldrb	r3, [r3, #0]
 8018a5c:	60fb      	str	r3, [r7, #12]
      tmp++;
 8018a5e:	693b      	ldr	r3, [r7, #16]
 8018a60:	3301      	adds	r3, #1
 8018a62:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8018a64:	693b      	ldr	r3, [r7, #16]
 8018a66:	781b      	ldrb	r3, [r3, #0]
 8018a68:	021a      	lsls	r2, r3, #8
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	4313      	orrs	r3, r2
 8018a6e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8018a70:	693b      	ldr	r3, [r7, #16]
 8018a72:	3301      	adds	r3, #1
 8018a74:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8018a76:	693b      	ldr	r3, [r7, #16]
 8018a78:	781b      	ldrb	r3, [r3, #0]
 8018a7a:	041a      	lsls	r2, r3, #16
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	4313      	orrs	r3, r2
 8018a80:	60fb      	str	r3, [r7, #12]
      tmp++;
 8018a82:	693b      	ldr	r3, [r7, #16]
 8018a84:	3301      	adds	r3, #1
 8018a86:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8018a88:	693b      	ldr	r3, [r7, #16]
 8018a8a:	781b      	ldrb	r3, [r3, #0]
 8018a8c:	061a      	lsls	r2, r3, #24
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	4313      	orrs	r3, r2
 8018a92:	60fb      	str	r3, [r7, #12]
      tmp++;
 8018a94:	693b      	ldr	r3, [r7, #16]
 8018a96:	3301      	adds	r3, #1
 8018a98:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	f107 020c 	add.w	r2, r7, #12
 8018aa2:	4611      	mov	r1, r2
 8018aa4:	4618      	mov	r0, r3
 8018aa6:	f001 fb26 	bl	801a0f6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8018aaa:	697b      	ldr	r3, [r7, #20]
 8018aac:	3301      	adds	r3, #1
 8018aae:	617b      	str	r3, [r7, #20]
 8018ab0:	697b      	ldr	r3, [r7, #20]
 8018ab2:	2b07      	cmp	r3, #7
 8018ab4:	d9d0      	bls.n	8018a58 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	693a      	ldr	r2, [r7, #16]
 8018aba:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	6a1b      	ldr	r3, [r3, #32]
 8018ac0:	f1a3 0220 	sub.w	r2, r3, #32
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	621a      	str	r2, [r3, #32]
  }
}
 8018ac8:	bf00      	nop
 8018aca:	3718      	adds	r7, #24
 8018acc:	46bd      	mov	sp, r7
 8018ace:	bd80      	pop	{r7, pc}

08018ad0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8018ad0:	b480      	push	{r7}
 8018ad2:	b083      	sub	sp, #12
 8018ad4:	af00      	add	r7, sp, #0
 8018ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8018ad8:	bf00      	nop
 8018ada:	370c      	adds	r7, #12
 8018adc:	46bd      	mov	sp, r7
 8018ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae2:	4770      	bx	lr

08018ae4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8018ae4:	b480      	push	{r7}
 8018ae6:	b083      	sub	sp, #12
 8018ae8:	af00      	add	r7, sp, #0
 8018aea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8018aec:	bf00      	nop
 8018aee:	370c      	adds	r7, #12
 8018af0:	46bd      	mov	sp, r7
 8018af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018af6:	4770      	bx	lr

08018af8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8018af8:	b480      	push	{r7}
 8018afa:	b083      	sub	sp, #12
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8018b00:	bf00      	nop
 8018b02:	370c      	adds	r7, #12
 8018b04:	46bd      	mov	sp, r7
 8018b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b0a:	4770      	bx	lr

08018b0c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8018b0c:	b480      	push	{r7}
 8018b0e:	b083      	sub	sp, #12
 8018b10:	af00      	add	r7, sp, #0
 8018b12:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8018b14:	bf00      	nop
 8018b16:	370c      	adds	r7, #12
 8018b18:	46bd      	mov	sp, r7
 8018b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b1e:	4770      	bx	lr

08018b20 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8018b20:	b580      	push	{r7, lr}
 8018b22:	b084      	sub	sp, #16
 8018b24:	af00      	add	r7, sp, #0
 8018b26:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d101      	bne.n	8018b32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8018b2e:	2301      	movs	r3, #1
 8018b30:	e10f      	b.n	8018d52 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	2200      	movs	r2, #0
 8018b36:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	4a87      	ldr	r2, [pc, #540]	@ (8018d5c <HAL_SPI_Init+0x23c>)
 8018b3e:	4293      	cmp	r3, r2
 8018b40:	d00f      	beq.n	8018b62 <HAL_SPI_Init+0x42>
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	4a86      	ldr	r2, [pc, #536]	@ (8018d60 <HAL_SPI_Init+0x240>)
 8018b48:	4293      	cmp	r3, r2
 8018b4a:	d00a      	beq.n	8018b62 <HAL_SPI_Init+0x42>
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	4a84      	ldr	r2, [pc, #528]	@ (8018d64 <HAL_SPI_Init+0x244>)
 8018b52:	4293      	cmp	r3, r2
 8018b54:	d005      	beq.n	8018b62 <HAL_SPI_Init+0x42>
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	68db      	ldr	r3, [r3, #12]
 8018b5a:	2b0f      	cmp	r3, #15
 8018b5c:	d901      	bls.n	8018b62 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8018b5e:	2301      	movs	r3, #1
 8018b60:	e0f7      	b.n	8018d52 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8018b62:	6878      	ldr	r0, [r7, #4]
 8018b64:	f000 f90a 	bl	8018d7c <SPI_GetPacketSize>
 8018b68:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	4a7b      	ldr	r2, [pc, #492]	@ (8018d5c <HAL_SPI_Init+0x23c>)
 8018b70:	4293      	cmp	r3, r2
 8018b72:	d00c      	beq.n	8018b8e <HAL_SPI_Init+0x6e>
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	4a79      	ldr	r2, [pc, #484]	@ (8018d60 <HAL_SPI_Init+0x240>)
 8018b7a:	4293      	cmp	r3, r2
 8018b7c:	d007      	beq.n	8018b8e <HAL_SPI_Init+0x6e>
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	4a78      	ldr	r2, [pc, #480]	@ (8018d64 <HAL_SPI_Init+0x244>)
 8018b84:	4293      	cmp	r3, r2
 8018b86:	d002      	beq.n	8018b8e <HAL_SPI_Init+0x6e>
 8018b88:	68fb      	ldr	r3, [r7, #12]
 8018b8a:	2b08      	cmp	r3, #8
 8018b8c:	d811      	bhi.n	8018bb2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8018b92:	4a72      	ldr	r2, [pc, #456]	@ (8018d5c <HAL_SPI_Init+0x23c>)
 8018b94:	4293      	cmp	r3, r2
 8018b96:	d009      	beq.n	8018bac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	4a70      	ldr	r2, [pc, #448]	@ (8018d60 <HAL_SPI_Init+0x240>)
 8018b9e:	4293      	cmp	r3, r2
 8018ba0:	d004      	beq.n	8018bac <HAL_SPI_Init+0x8c>
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	4a6f      	ldr	r2, [pc, #444]	@ (8018d64 <HAL_SPI_Init+0x244>)
 8018ba8:	4293      	cmp	r3, r2
 8018baa:	d104      	bne.n	8018bb6 <HAL_SPI_Init+0x96>
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	2b10      	cmp	r3, #16
 8018bb0:	d901      	bls.n	8018bb6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8018bb2:	2301      	movs	r3, #1
 8018bb4:	e0cd      	b.n	8018d52 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8018bbc:	b2db      	uxtb	r3, r3
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d106      	bne.n	8018bd0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	2200      	movs	r2, #0
 8018bc6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8018bca:	6878      	ldr	r0, [r7, #4]
 8018bcc:	f000 f8cc 	bl	8018d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	2202      	movs	r2, #2
 8018bd4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	681a      	ldr	r2, [r3, #0]
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	f022 0201 	bic.w	r2, r2, #1
 8018be6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	689b      	ldr	r3, [r3, #8]
 8018bee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8018bf2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	699b      	ldr	r3, [r3, #24]
 8018bf8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8018bfc:	d119      	bne.n	8018c32 <HAL_SPI_Init+0x112>
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	685b      	ldr	r3, [r3, #4]
 8018c02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8018c06:	d103      	bne.n	8018c10 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d008      	beq.n	8018c22 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d10c      	bne.n	8018c32 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8018c1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018c20:	d107      	bne.n	8018c32 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	681a      	ldr	r2, [r3, #0]
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8018c30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	685b      	ldr	r3, [r3, #4]
 8018c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d00f      	beq.n	8018c5e <HAL_SPI_Init+0x13e>
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	68db      	ldr	r3, [r3, #12]
 8018c42:	2b06      	cmp	r3, #6
 8018c44:	d90b      	bls.n	8018c5e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	430a      	orrs	r2, r1
 8018c5a:	601a      	str	r2, [r3, #0]
 8018c5c:	e007      	b.n	8018c6e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	681a      	ldr	r2, [r3, #0]
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8018c6c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	69da      	ldr	r2, [r3, #28]
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c76:	431a      	orrs	r2, r3
 8018c78:	68bb      	ldr	r3, [r7, #8]
 8018c7a:	431a      	orrs	r2, r3
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018c80:	ea42 0103 	orr.w	r1, r2, r3
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	68da      	ldr	r2, [r3, #12]
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	430a      	orrs	r2, r1
 8018c8e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c98:	431a      	orrs	r2, r3
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018c9e:	431a      	orrs	r2, r3
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	699b      	ldr	r3, [r3, #24]
 8018ca4:	431a      	orrs	r2, r3
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	691b      	ldr	r3, [r3, #16]
 8018caa:	431a      	orrs	r2, r3
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	695b      	ldr	r3, [r3, #20]
 8018cb0:	431a      	orrs	r2, r3
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	6a1b      	ldr	r3, [r3, #32]
 8018cb6:	431a      	orrs	r2, r3
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	685b      	ldr	r3, [r3, #4]
 8018cbc:	431a      	orrs	r2, r3
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018cc2:	431a      	orrs	r2, r3
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	689b      	ldr	r3, [r3, #8]
 8018cc8:	431a      	orrs	r2, r3
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018cce:	ea42 0103 	orr.w	r1, r2, r3
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	681b      	ldr	r3, [r3, #0]
 8018cda:	430a      	orrs	r2, r1
 8018cdc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	685b      	ldr	r3, [r3, #4]
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d113      	bne.n	8018d0e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	689b      	ldr	r3, [r3, #8]
 8018cec:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8018cf8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	689b      	ldr	r3, [r3, #8]
 8018d00:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8018d0c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	f022 0201 	bic.w	r2, r2, #1
 8018d1c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	685b      	ldr	r3, [r3, #4]
 8018d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d00a      	beq.n	8018d40 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	68db      	ldr	r3, [r3, #12]
 8018d30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	430a      	orrs	r2, r1
 8018d3e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	2200      	movs	r2, #0
 8018d44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	2201      	movs	r2, #1
 8018d4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8018d50:	2300      	movs	r3, #0
}
 8018d52:	4618      	mov	r0, r3
 8018d54:	3710      	adds	r7, #16
 8018d56:	46bd      	mov	sp, r7
 8018d58:	bd80      	pop	{r7, pc}
 8018d5a:	bf00      	nop
 8018d5c:	40013000 	.word	0x40013000
 8018d60:	40003800 	.word	0x40003800
 8018d64:	40003c00 	.word	0x40003c00

08018d68 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8018d68:	b480      	push	{r7}
 8018d6a:	b083      	sub	sp, #12
 8018d6c:	af00      	add	r7, sp, #0
 8018d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8018d70:	bf00      	nop
 8018d72:	370c      	adds	r7, #12
 8018d74:	46bd      	mov	sp, r7
 8018d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d7a:	4770      	bx	lr

08018d7c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8018d7c:	b480      	push	{r7}
 8018d7e:	b085      	sub	sp, #20
 8018d80:	af00      	add	r7, sp, #0
 8018d82:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018d88:	095b      	lsrs	r3, r3, #5
 8018d8a:	3301      	adds	r3, #1
 8018d8c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	68db      	ldr	r3, [r3, #12]
 8018d92:	3301      	adds	r3, #1
 8018d94:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8018d96:	68bb      	ldr	r3, [r7, #8]
 8018d98:	3307      	adds	r3, #7
 8018d9a:	08db      	lsrs	r3, r3, #3
 8018d9c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8018d9e:	68bb      	ldr	r3, [r7, #8]
 8018da0:	68fa      	ldr	r2, [r7, #12]
 8018da2:	fb02 f303 	mul.w	r3, r2, r3
}
 8018da6:	4618      	mov	r0, r3
 8018da8:	3714      	adds	r7, #20
 8018daa:	46bd      	mov	sp, r7
 8018dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018db0:	4770      	bx	lr

08018db2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018db2:	b580      	push	{r7, lr}
 8018db4:	b082      	sub	sp, #8
 8018db6:	af00      	add	r7, sp, #0
 8018db8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d101      	bne.n	8018dc4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018dc0:	2301      	movs	r3, #1
 8018dc2:	e042      	b.n	8018e4a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d106      	bne.n	8018ddc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8018dd6:	6878      	ldr	r0, [r7, #4]
 8018dd8:	f7f2 fd7e 	bl	800b8d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	2224      	movs	r2, #36	@ 0x24
 8018de0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	681b      	ldr	r3, [r3, #0]
 8018de8:	681a      	ldr	r2, [r3, #0]
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	f022 0201 	bic.w	r2, r2, #1
 8018df2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d002      	beq.n	8018e02 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8018dfc:	6878      	ldr	r0, [r7, #4]
 8018dfe:	f000 fe1f 	bl	8019a40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8018e02:	6878      	ldr	r0, [r7, #4]
 8018e04:	f000 f8b4 	bl	8018f70 <UART_SetConfig>
 8018e08:	4603      	mov	r3, r0
 8018e0a:	2b01      	cmp	r3, #1
 8018e0c:	d101      	bne.n	8018e12 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8018e0e:	2301      	movs	r3, #1
 8018e10:	e01b      	b.n	8018e4a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	681b      	ldr	r3, [r3, #0]
 8018e16:	685a      	ldr	r2, [r3, #4]
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8018e20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	681b      	ldr	r3, [r3, #0]
 8018e26:	689a      	ldr	r2, [r3, #8]
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8018e30:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	681a      	ldr	r2, [r3, #0]
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	f042 0201 	orr.w	r2, r2, #1
 8018e40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8018e42:	6878      	ldr	r0, [r7, #4]
 8018e44:	f000 fe9e 	bl	8019b84 <UART_CheckIdleState>
 8018e48:	4603      	mov	r3, r0
}
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	3708      	adds	r7, #8
 8018e4e:	46bd      	mov	sp, r7
 8018e50:	bd80      	pop	{r7, pc}

08018e52 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018e52:	b580      	push	{r7, lr}
 8018e54:	b08a      	sub	sp, #40	@ 0x28
 8018e56:	af02      	add	r7, sp, #8
 8018e58:	60f8      	str	r0, [r7, #12]
 8018e5a:	60b9      	str	r1, [r7, #8]
 8018e5c:	603b      	str	r3, [r7, #0]
 8018e5e:	4613      	mov	r3, r2
 8018e60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8018e62:	68fb      	ldr	r3, [r7, #12]
 8018e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018e68:	2b20      	cmp	r3, #32
 8018e6a:	d17b      	bne.n	8018f64 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8018e6c:	68bb      	ldr	r3, [r7, #8]
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d002      	beq.n	8018e78 <HAL_UART_Transmit+0x26>
 8018e72:	88fb      	ldrh	r3, [r7, #6]
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d101      	bne.n	8018e7c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8018e78:	2301      	movs	r3, #1
 8018e7a:	e074      	b.n	8018f66 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018e7c:	68fb      	ldr	r3, [r7, #12]
 8018e7e:	2200      	movs	r2, #0
 8018e80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8018e84:	68fb      	ldr	r3, [r7, #12]
 8018e86:	2221      	movs	r2, #33	@ 0x21
 8018e88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8018e8c:	f7f7 fdc6 	bl	8010a1c <HAL_GetTick>
 8018e90:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8018e92:	68fb      	ldr	r3, [r7, #12]
 8018e94:	88fa      	ldrh	r2, [r7, #6]
 8018e96:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	88fa      	ldrh	r2, [r7, #6]
 8018e9e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018ea2:	68fb      	ldr	r3, [r7, #12]
 8018ea4:	689b      	ldr	r3, [r3, #8]
 8018ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018eaa:	d108      	bne.n	8018ebe <HAL_UART_Transmit+0x6c>
 8018eac:	68fb      	ldr	r3, [r7, #12]
 8018eae:	691b      	ldr	r3, [r3, #16]
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d104      	bne.n	8018ebe <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8018eb4:	2300      	movs	r3, #0
 8018eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8018eb8:	68bb      	ldr	r3, [r7, #8]
 8018eba:	61bb      	str	r3, [r7, #24]
 8018ebc:	e003      	b.n	8018ec6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8018ebe:	68bb      	ldr	r3, [r7, #8]
 8018ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8018ec2:	2300      	movs	r3, #0
 8018ec4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8018ec6:	e030      	b.n	8018f2a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8018ec8:	683b      	ldr	r3, [r7, #0]
 8018eca:	9300      	str	r3, [sp, #0]
 8018ecc:	697b      	ldr	r3, [r7, #20]
 8018ece:	2200      	movs	r2, #0
 8018ed0:	2180      	movs	r1, #128	@ 0x80
 8018ed2:	68f8      	ldr	r0, [r7, #12]
 8018ed4:	f000 ff00 	bl	8019cd8 <UART_WaitOnFlagUntilTimeout>
 8018ed8:	4603      	mov	r3, r0
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d005      	beq.n	8018eea <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8018ede:	68fb      	ldr	r3, [r7, #12]
 8018ee0:	2220      	movs	r2, #32
 8018ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8018ee6:	2303      	movs	r3, #3
 8018ee8:	e03d      	b.n	8018f66 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8018eea:	69fb      	ldr	r3, [r7, #28]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d10b      	bne.n	8018f08 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8018ef0:	69bb      	ldr	r3, [r7, #24]
 8018ef2:	881b      	ldrh	r3, [r3, #0]
 8018ef4:	461a      	mov	r2, r3
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8018efe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8018f00:	69bb      	ldr	r3, [r7, #24]
 8018f02:	3302      	adds	r3, #2
 8018f04:	61bb      	str	r3, [r7, #24]
 8018f06:	e007      	b.n	8018f18 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8018f08:	69fb      	ldr	r3, [r7, #28]
 8018f0a:	781a      	ldrb	r2, [r3, #0]
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8018f12:	69fb      	ldr	r3, [r7, #28]
 8018f14:	3301      	adds	r3, #1
 8018f16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8018f18:	68fb      	ldr	r3, [r7, #12]
 8018f1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8018f1e:	b29b      	uxth	r3, r3
 8018f20:	3b01      	subs	r3, #1
 8018f22:	b29a      	uxth	r2, r3
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8018f30:	b29b      	uxth	r3, r3
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d1c8      	bne.n	8018ec8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8018f36:	683b      	ldr	r3, [r7, #0]
 8018f38:	9300      	str	r3, [sp, #0]
 8018f3a:	697b      	ldr	r3, [r7, #20]
 8018f3c:	2200      	movs	r2, #0
 8018f3e:	2140      	movs	r1, #64	@ 0x40
 8018f40:	68f8      	ldr	r0, [r7, #12]
 8018f42:	f000 fec9 	bl	8019cd8 <UART_WaitOnFlagUntilTimeout>
 8018f46:	4603      	mov	r3, r0
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d005      	beq.n	8018f58 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	2220      	movs	r2, #32
 8018f50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8018f54:	2303      	movs	r3, #3
 8018f56:	e006      	b.n	8018f66 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	2220      	movs	r2, #32
 8018f5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8018f60:	2300      	movs	r3, #0
 8018f62:	e000      	b.n	8018f66 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8018f64:	2302      	movs	r3, #2
  }
}
 8018f66:	4618      	mov	r0, r3
 8018f68:	3720      	adds	r7, #32
 8018f6a:	46bd      	mov	sp, r7
 8018f6c:	bd80      	pop	{r7, pc}
	...

08018f70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018f74:	b092      	sub	sp, #72	@ 0x48
 8018f76:	af00      	add	r7, sp, #0
 8018f78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018f7a:	2300      	movs	r3, #0
 8018f7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018f80:	697b      	ldr	r3, [r7, #20]
 8018f82:	689a      	ldr	r2, [r3, #8]
 8018f84:	697b      	ldr	r3, [r7, #20]
 8018f86:	691b      	ldr	r3, [r3, #16]
 8018f88:	431a      	orrs	r2, r3
 8018f8a:	697b      	ldr	r3, [r7, #20]
 8018f8c:	695b      	ldr	r3, [r3, #20]
 8018f8e:	431a      	orrs	r2, r3
 8018f90:	697b      	ldr	r3, [r7, #20]
 8018f92:	69db      	ldr	r3, [r3, #28]
 8018f94:	4313      	orrs	r3, r2
 8018f96:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018f98:	697b      	ldr	r3, [r7, #20]
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	681a      	ldr	r2, [r3, #0]
 8018f9e:	4bbe      	ldr	r3, [pc, #760]	@ (8019298 <UART_SetConfig+0x328>)
 8018fa0:	4013      	ands	r3, r2
 8018fa2:	697a      	ldr	r2, [r7, #20]
 8018fa4:	6812      	ldr	r2, [r2, #0]
 8018fa6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018fa8:	430b      	orrs	r3, r1
 8018faa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018fac:	697b      	ldr	r3, [r7, #20]
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	685b      	ldr	r3, [r3, #4]
 8018fb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8018fb6:	697b      	ldr	r3, [r7, #20]
 8018fb8:	68da      	ldr	r2, [r3, #12]
 8018fba:	697b      	ldr	r3, [r7, #20]
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	430a      	orrs	r2, r1
 8018fc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018fc2:	697b      	ldr	r3, [r7, #20]
 8018fc4:	699b      	ldr	r3, [r3, #24]
 8018fc6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018fc8:	697b      	ldr	r3, [r7, #20]
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	4ab3      	ldr	r2, [pc, #716]	@ (801929c <UART_SetConfig+0x32c>)
 8018fce:	4293      	cmp	r3, r2
 8018fd0:	d004      	beq.n	8018fdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018fd2:	697b      	ldr	r3, [r7, #20]
 8018fd4:	6a1b      	ldr	r3, [r3, #32]
 8018fd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018fd8:	4313      	orrs	r3, r2
 8018fda:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018fdc:	697b      	ldr	r3, [r7, #20]
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	689a      	ldr	r2, [r3, #8]
 8018fe2:	4baf      	ldr	r3, [pc, #700]	@ (80192a0 <UART_SetConfig+0x330>)
 8018fe4:	4013      	ands	r3, r2
 8018fe6:	697a      	ldr	r2, [r7, #20]
 8018fe8:	6812      	ldr	r2, [r2, #0]
 8018fea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018fec:	430b      	orrs	r3, r1
 8018fee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018ff0:	697b      	ldr	r3, [r7, #20]
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ff6:	f023 010f 	bic.w	r1, r3, #15
 8018ffa:	697b      	ldr	r3, [r7, #20]
 8018ffc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018ffe:	697b      	ldr	r3, [r7, #20]
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	430a      	orrs	r2, r1
 8019004:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8019006:	697b      	ldr	r3, [r7, #20]
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	4aa6      	ldr	r2, [pc, #664]	@ (80192a4 <UART_SetConfig+0x334>)
 801900c:	4293      	cmp	r3, r2
 801900e:	d177      	bne.n	8019100 <UART_SetConfig+0x190>
 8019010:	4ba5      	ldr	r3, [pc, #660]	@ (80192a8 <UART_SetConfig+0x338>)
 8019012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019014:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8019018:	2b28      	cmp	r3, #40	@ 0x28
 801901a:	d86d      	bhi.n	80190f8 <UART_SetConfig+0x188>
 801901c:	a201      	add	r2, pc, #4	@ (adr r2, 8019024 <UART_SetConfig+0xb4>)
 801901e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019022:	bf00      	nop
 8019024:	080190c9 	.word	0x080190c9
 8019028:	080190f9 	.word	0x080190f9
 801902c:	080190f9 	.word	0x080190f9
 8019030:	080190f9 	.word	0x080190f9
 8019034:	080190f9 	.word	0x080190f9
 8019038:	080190f9 	.word	0x080190f9
 801903c:	080190f9 	.word	0x080190f9
 8019040:	080190f9 	.word	0x080190f9
 8019044:	080190d1 	.word	0x080190d1
 8019048:	080190f9 	.word	0x080190f9
 801904c:	080190f9 	.word	0x080190f9
 8019050:	080190f9 	.word	0x080190f9
 8019054:	080190f9 	.word	0x080190f9
 8019058:	080190f9 	.word	0x080190f9
 801905c:	080190f9 	.word	0x080190f9
 8019060:	080190f9 	.word	0x080190f9
 8019064:	080190d9 	.word	0x080190d9
 8019068:	080190f9 	.word	0x080190f9
 801906c:	080190f9 	.word	0x080190f9
 8019070:	080190f9 	.word	0x080190f9
 8019074:	080190f9 	.word	0x080190f9
 8019078:	080190f9 	.word	0x080190f9
 801907c:	080190f9 	.word	0x080190f9
 8019080:	080190f9 	.word	0x080190f9
 8019084:	080190e1 	.word	0x080190e1
 8019088:	080190f9 	.word	0x080190f9
 801908c:	080190f9 	.word	0x080190f9
 8019090:	080190f9 	.word	0x080190f9
 8019094:	080190f9 	.word	0x080190f9
 8019098:	080190f9 	.word	0x080190f9
 801909c:	080190f9 	.word	0x080190f9
 80190a0:	080190f9 	.word	0x080190f9
 80190a4:	080190e9 	.word	0x080190e9
 80190a8:	080190f9 	.word	0x080190f9
 80190ac:	080190f9 	.word	0x080190f9
 80190b0:	080190f9 	.word	0x080190f9
 80190b4:	080190f9 	.word	0x080190f9
 80190b8:	080190f9 	.word	0x080190f9
 80190bc:	080190f9 	.word	0x080190f9
 80190c0:	080190f9 	.word	0x080190f9
 80190c4:	080190f1 	.word	0x080190f1
 80190c8:	2301      	movs	r3, #1
 80190ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190ce:	e222      	b.n	8019516 <UART_SetConfig+0x5a6>
 80190d0:	2304      	movs	r3, #4
 80190d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190d6:	e21e      	b.n	8019516 <UART_SetConfig+0x5a6>
 80190d8:	2308      	movs	r3, #8
 80190da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190de:	e21a      	b.n	8019516 <UART_SetConfig+0x5a6>
 80190e0:	2310      	movs	r3, #16
 80190e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190e6:	e216      	b.n	8019516 <UART_SetConfig+0x5a6>
 80190e8:	2320      	movs	r3, #32
 80190ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190ee:	e212      	b.n	8019516 <UART_SetConfig+0x5a6>
 80190f0:	2340      	movs	r3, #64	@ 0x40
 80190f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190f6:	e20e      	b.n	8019516 <UART_SetConfig+0x5a6>
 80190f8:	2380      	movs	r3, #128	@ 0x80
 80190fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190fe:	e20a      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019100:	697b      	ldr	r3, [r7, #20]
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	4a69      	ldr	r2, [pc, #420]	@ (80192ac <UART_SetConfig+0x33c>)
 8019106:	4293      	cmp	r3, r2
 8019108:	d130      	bne.n	801916c <UART_SetConfig+0x1fc>
 801910a:	4b67      	ldr	r3, [pc, #412]	@ (80192a8 <UART_SetConfig+0x338>)
 801910c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801910e:	f003 0307 	and.w	r3, r3, #7
 8019112:	2b05      	cmp	r3, #5
 8019114:	d826      	bhi.n	8019164 <UART_SetConfig+0x1f4>
 8019116:	a201      	add	r2, pc, #4	@ (adr r2, 801911c <UART_SetConfig+0x1ac>)
 8019118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801911c:	08019135 	.word	0x08019135
 8019120:	0801913d 	.word	0x0801913d
 8019124:	08019145 	.word	0x08019145
 8019128:	0801914d 	.word	0x0801914d
 801912c:	08019155 	.word	0x08019155
 8019130:	0801915d 	.word	0x0801915d
 8019134:	2300      	movs	r3, #0
 8019136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801913a:	e1ec      	b.n	8019516 <UART_SetConfig+0x5a6>
 801913c:	2304      	movs	r3, #4
 801913e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019142:	e1e8      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019144:	2308      	movs	r3, #8
 8019146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801914a:	e1e4      	b.n	8019516 <UART_SetConfig+0x5a6>
 801914c:	2310      	movs	r3, #16
 801914e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019152:	e1e0      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019154:	2320      	movs	r3, #32
 8019156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801915a:	e1dc      	b.n	8019516 <UART_SetConfig+0x5a6>
 801915c:	2340      	movs	r3, #64	@ 0x40
 801915e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019162:	e1d8      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019164:	2380      	movs	r3, #128	@ 0x80
 8019166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801916a:	e1d4      	b.n	8019516 <UART_SetConfig+0x5a6>
 801916c:	697b      	ldr	r3, [r7, #20]
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	4a4f      	ldr	r2, [pc, #316]	@ (80192b0 <UART_SetConfig+0x340>)
 8019172:	4293      	cmp	r3, r2
 8019174:	d130      	bne.n	80191d8 <UART_SetConfig+0x268>
 8019176:	4b4c      	ldr	r3, [pc, #304]	@ (80192a8 <UART_SetConfig+0x338>)
 8019178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801917a:	f003 0307 	and.w	r3, r3, #7
 801917e:	2b05      	cmp	r3, #5
 8019180:	d826      	bhi.n	80191d0 <UART_SetConfig+0x260>
 8019182:	a201      	add	r2, pc, #4	@ (adr r2, 8019188 <UART_SetConfig+0x218>)
 8019184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019188:	080191a1 	.word	0x080191a1
 801918c:	080191a9 	.word	0x080191a9
 8019190:	080191b1 	.word	0x080191b1
 8019194:	080191b9 	.word	0x080191b9
 8019198:	080191c1 	.word	0x080191c1
 801919c:	080191c9 	.word	0x080191c9
 80191a0:	2300      	movs	r3, #0
 80191a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191a6:	e1b6      	b.n	8019516 <UART_SetConfig+0x5a6>
 80191a8:	2304      	movs	r3, #4
 80191aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191ae:	e1b2      	b.n	8019516 <UART_SetConfig+0x5a6>
 80191b0:	2308      	movs	r3, #8
 80191b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191b6:	e1ae      	b.n	8019516 <UART_SetConfig+0x5a6>
 80191b8:	2310      	movs	r3, #16
 80191ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191be:	e1aa      	b.n	8019516 <UART_SetConfig+0x5a6>
 80191c0:	2320      	movs	r3, #32
 80191c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191c6:	e1a6      	b.n	8019516 <UART_SetConfig+0x5a6>
 80191c8:	2340      	movs	r3, #64	@ 0x40
 80191ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191ce:	e1a2      	b.n	8019516 <UART_SetConfig+0x5a6>
 80191d0:	2380      	movs	r3, #128	@ 0x80
 80191d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191d6:	e19e      	b.n	8019516 <UART_SetConfig+0x5a6>
 80191d8:	697b      	ldr	r3, [r7, #20]
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	4a35      	ldr	r2, [pc, #212]	@ (80192b4 <UART_SetConfig+0x344>)
 80191de:	4293      	cmp	r3, r2
 80191e0:	d130      	bne.n	8019244 <UART_SetConfig+0x2d4>
 80191e2:	4b31      	ldr	r3, [pc, #196]	@ (80192a8 <UART_SetConfig+0x338>)
 80191e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80191e6:	f003 0307 	and.w	r3, r3, #7
 80191ea:	2b05      	cmp	r3, #5
 80191ec:	d826      	bhi.n	801923c <UART_SetConfig+0x2cc>
 80191ee:	a201      	add	r2, pc, #4	@ (adr r2, 80191f4 <UART_SetConfig+0x284>)
 80191f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80191f4:	0801920d 	.word	0x0801920d
 80191f8:	08019215 	.word	0x08019215
 80191fc:	0801921d 	.word	0x0801921d
 8019200:	08019225 	.word	0x08019225
 8019204:	0801922d 	.word	0x0801922d
 8019208:	08019235 	.word	0x08019235
 801920c:	2300      	movs	r3, #0
 801920e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019212:	e180      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019214:	2304      	movs	r3, #4
 8019216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801921a:	e17c      	b.n	8019516 <UART_SetConfig+0x5a6>
 801921c:	2308      	movs	r3, #8
 801921e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019222:	e178      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019224:	2310      	movs	r3, #16
 8019226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801922a:	e174      	b.n	8019516 <UART_SetConfig+0x5a6>
 801922c:	2320      	movs	r3, #32
 801922e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019232:	e170      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019234:	2340      	movs	r3, #64	@ 0x40
 8019236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801923a:	e16c      	b.n	8019516 <UART_SetConfig+0x5a6>
 801923c:	2380      	movs	r3, #128	@ 0x80
 801923e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019242:	e168      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019244:	697b      	ldr	r3, [r7, #20]
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	4a1b      	ldr	r2, [pc, #108]	@ (80192b8 <UART_SetConfig+0x348>)
 801924a:	4293      	cmp	r3, r2
 801924c:	d142      	bne.n	80192d4 <UART_SetConfig+0x364>
 801924e:	4b16      	ldr	r3, [pc, #88]	@ (80192a8 <UART_SetConfig+0x338>)
 8019250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019252:	f003 0307 	and.w	r3, r3, #7
 8019256:	2b05      	cmp	r3, #5
 8019258:	d838      	bhi.n	80192cc <UART_SetConfig+0x35c>
 801925a:	a201      	add	r2, pc, #4	@ (adr r2, 8019260 <UART_SetConfig+0x2f0>)
 801925c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019260:	08019279 	.word	0x08019279
 8019264:	08019281 	.word	0x08019281
 8019268:	08019289 	.word	0x08019289
 801926c:	08019291 	.word	0x08019291
 8019270:	080192bd 	.word	0x080192bd
 8019274:	080192c5 	.word	0x080192c5
 8019278:	2300      	movs	r3, #0
 801927a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801927e:	e14a      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019280:	2304      	movs	r3, #4
 8019282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019286:	e146      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019288:	2308      	movs	r3, #8
 801928a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801928e:	e142      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019290:	2310      	movs	r3, #16
 8019292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019296:	e13e      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019298:	cfff69f3 	.word	0xcfff69f3
 801929c:	58000c00 	.word	0x58000c00
 80192a0:	11fff4ff 	.word	0x11fff4ff
 80192a4:	40011000 	.word	0x40011000
 80192a8:	58024400 	.word	0x58024400
 80192ac:	40004400 	.word	0x40004400
 80192b0:	40004800 	.word	0x40004800
 80192b4:	40004c00 	.word	0x40004c00
 80192b8:	40005000 	.word	0x40005000
 80192bc:	2320      	movs	r3, #32
 80192be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80192c2:	e128      	b.n	8019516 <UART_SetConfig+0x5a6>
 80192c4:	2340      	movs	r3, #64	@ 0x40
 80192c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80192ca:	e124      	b.n	8019516 <UART_SetConfig+0x5a6>
 80192cc:	2380      	movs	r3, #128	@ 0x80
 80192ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80192d2:	e120      	b.n	8019516 <UART_SetConfig+0x5a6>
 80192d4:	697b      	ldr	r3, [r7, #20]
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	4acb      	ldr	r2, [pc, #812]	@ (8019608 <UART_SetConfig+0x698>)
 80192da:	4293      	cmp	r3, r2
 80192dc:	d176      	bne.n	80193cc <UART_SetConfig+0x45c>
 80192de:	4bcb      	ldr	r3, [pc, #812]	@ (801960c <UART_SetConfig+0x69c>)
 80192e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80192e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80192e6:	2b28      	cmp	r3, #40	@ 0x28
 80192e8:	d86c      	bhi.n	80193c4 <UART_SetConfig+0x454>
 80192ea:	a201      	add	r2, pc, #4	@ (adr r2, 80192f0 <UART_SetConfig+0x380>)
 80192ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80192f0:	08019395 	.word	0x08019395
 80192f4:	080193c5 	.word	0x080193c5
 80192f8:	080193c5 	.word	0x080193c5
 80192fc:	080193c5 	.word	0x080193c5
 8019300:	080193c5 	.word	0x080193c5
 8019304:	080193c5 	.word	0x080193c5
 8019308:	080193c5 	.word	0x080193c5
 801930c:	080193c5 	.word	0x080193c5
 8019310:	0801939d 	.word	0x0801939d
 8019314:	080193c5 	.word	0x080193c5
 8019318:	080193c5 	.word	0x080193c5
 801931c:	080193c5 	.word	0x080193c5
 8019320:	080193c5 	.word	0x080193c5
 8019324:	080193c5 	.word	0x080193c5
 8019328:	080193c5 	.word	0x080193c5
 801932c:	080193c5 	.word	0x080193c5
 8019330:	080193a5 	.word	0x080193a5
 8019334:	080193c5 	.word	0x080193c5
 8019338:	080193c5 	.word	0x080193c5
 801933c:	080193c5 	.word	0x080193c5
 8019340:	080193c5 	.word	0x080193c5
 8019344:	080193c5 	.word	0x080193c5
 8019348:	080193c5 	.word	0x080193c5
 801934c:	080193c5 	.word	0x080193c5
 8019350:	080193ad 	.word	0x080193ad
 8019354:	080193c5 	.word	0x080193c5
 8019358:	080193c5 	.word	0x080193c5
 801935c:	080193c5 	.word	0x080193c5
 8019360:	080193c5 	.word	0x080193c5
 8019364:	080193c5 	.word	0x080193c5
 8019368:	080193c5 	.word	0x080193c5
 801936c:	080193c5 	.word	0x080193c5
 8019370:	080193b5 	.word	0x080193b5
 8019374:	080193c5 	.word	0x080193c5
 8019378:	080193c5 	.word	0x080193c5
 801937c:	080193c5 	.word	0x080193c5
 8019380:	080193c5 	.word	0x080193c5
 8019384:	080193c5 	.word	0x080193c5
 8019388:	080193c5 	.word	0x080193c5
 801938c:	080193c5 	.word	0x080193c5
 8019390:	080193bd 	.word	0x080193bd
 8019394:	2301      	movs	r3, #1
 8019396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801939a:	e0bc      	b.n	8019516 <UART_SetConfig+0x5a6>
 801939c:	2304      	movs	r3, #4
 801939e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80193a2:	e0b8      	b.n	8019516 <UART_SetConfig+0x5a6>
 80193a4:	2308      	movs	r3, #8
 80193a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80193aa:	e0b4      	b.n	8019516 <UART_SetConfig+0x5a6>
 80193ac:	2310      	movs	r3, #16
 80193ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80193b2:	e0b0      	b.n	8019516 <UART_SetConfig+0x5a6>
 80193b4:	2320      	movs	r3, #32
 80193b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80193ba:	e0ac      	b.n	8019516 <UART_SetConfig+0x5a6>
 80193bc:	2340      	movs	r3, #64	@ 0x40
 80193be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80193c2:	e0a8      	b.n	8019516 <UART_SetConfig+0x5a6>
 80193c4:	2380      	movs	r3, #128	@ 0x80
 80193c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80193ca:	e0a4      	b.n	8019516 <UART_SetConfig+0x5a6>
 80193cc:	697b      	ldr	r3, [r7, #20]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	4a8f      	ldr	r2, [pc, #572]	@ (8019610 <UART_SetConfig+0x6a0>)
 80193d2:	4293      	cmp	r3, r2
 80193d4:	d130      	bne.n	8019438 <UART_SetConfig+0x4c8>
 80193d6:	4b8d      	ldr	r3, [pc, #564]	@ (801960c <UART_SetConfig+0x69c>)
 80193d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80193da:	f003 0307 	and.w	r3, r3, #7
 80193de:	2b05      	cmp	r3, #5
 80193e0:	d826      	bhi.n	8019430 <UART_SetConfig+0x4c0>
 80193e2:	a201      	add	r2, pc, #4	@ (adr r2, 80193e8 <UART_SetConfig+0x478>)
 80193e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193e8:	08019401 	.word	0x08019401
 80193ec:	08019409 	.word	0x08019409
 80193f0:	08019411 	.word	0x08019411
 80193f4:	08019419 	.word	0x08019419
 80193f8:	08019421 	.word	0x08019421
 80193fc:	08019429 	.word	0x08019429
 8019400:	2300      	movs	r3, #0
 8019402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019406:	e086      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019408:	2304      	movs	r3, #4
 801940a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801940e:	e082      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019410:	2308      	movs	r3, #8
 8019412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019416:	e07e      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019418:	2310      	movs	r3, #16
 801941a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801941e:	e07a      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019420:	2320      	movs	r3, #32
 8019422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019426:	e076      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019428:	2340      	movs	r3, #64	@ 0x40
 801942a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801942e:	e072      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019430:	2380      	movs	r3, #128	@ 0x80
 8019432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019436:	e06e      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019438:	697b      	ldr	r3, [r7, #20]
 801943a:	681b      	ldr	r3, [r3, #0]
 801943c:	4a75      	ldr	r2, [pc, #468]	@ (8019614 <UART_SetConfig+0x6a4>)
 801943e:	4293      	cmp	r3, r2
 8019440:	d130      	bne.n	80194a4 <UART_SetConfig+0x534>
 8019442:	4b72      	ldr	r3, [pc, #456]	@ (801960c <UART_SetConfig+0x69c>)
 8019444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019446:	f003 0307 	and.w	r3, r3, #7
 801944a:	2b05      	cmp	r3, #5
 801944c:	d826      	bhi.n	801949c <UART_SetConfig+0x52c>
 801944e:	a201      	add	r2, pc, #4	@ (adr r2, 8019454 <UART_SetConfig+0x4e4>)
 8019450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019454:	0801946d 	.word	0x0801946d
 8019458:	08019475 	.word	0x08019475
 801945c:	0801947d 	.word	0x0801947d
 8019460:	08019485 	.word	0x08019485
 8019464:	0801948d 	.word	0x0801948d
 8019468:	08019495 	.word	0x08019495
 801946c:	2300      	movs	r3, #0
 801946e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019472:	e050      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019474:	2304      	movs	r3, #4
 8019476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801947a:	e04c      	b.n	8019516 <UART_SetConfig+0x5a6>
 801947c:	2308      	movs	r3, #8
 801947e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019482:	e048      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019484:	2310      	movs	r3, #16
 8019486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801948a:	e044      	b.n	8019516 <UART_SetConfig+0x5a6>
 801948c:	2320      	movs	r3, #32
 801948e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019492:	e040      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019494:	2340      	movs	r3, #64	@ 0x40
 8019496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801949a:	e03c      	b.n	8019516 <UART_SetConfig+0x5a6>
 801949c:	2380      	movs	r3, #128	@ 0x80
 801949e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80194a2:	e038      	b.n	8019516 <UART_SetConfig+0x5a6>
 80194a4:	697b      	ldr	r3, [r7, #20]
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	4a5b      	ldr	r2, [pc, #364]	@ (8019618 <UART_SetConfig+0x6a8>)
 80194aa:	4293      	cmp	r3, r2
 80194ac:	d130      	bne.n	8019510 <UART_SetConfig+0x5a0>
 80194ae:	4b57      	ldr	r3, [pc, #348]	@ (801960c <UART_SetConfig+0x69c>)
 80194b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80194b2:	f003 0307 	and.w	r3, r3, #7
 80194b6:	2b05      	cmp	r3, #5
 80194b8:	d826      	bhi.n	8019508 <UART_SetConfig+0x598>
 80194ba:	a201      	add	r2, pc, #4	@ (adr r2, 80194c0 <UART_SetConfig+0x550>)
 80194bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194c0:	080194d9 	.word	0x080194d9
 80194c4:	080194e1 	.word	0x080194e1
 80194c8:	080194e9 	.word	0x080194e9
 80194cc:	080194f1 	.word	0x080194f1
 80194d0:	080194f9 	.word	0x080194f9
 80194d4:	08019501 	.word	0x08019501
 80194d8:	2302      	movs	r3, #2
 80194da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80194de:	e01a      	b.n	8019516 <UART_SetConfig+0x5a6>
 80194e0:	2304      	movs	r3, #4
 80194e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80194e6:	e016      	b.n	8019516 <UART_SetConfig+0x5a6>
 80194e8:	2308      	movs	r3, #8
 80194ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80194ee:	e012      	b.n	8019516 <UART_SetConfig+0x5a6>
 80194f0:	2310      	movs	r3, #16
 80194f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80194f6:	e00e      	b.n	8019516 <UART_SetConfig+0x5a6>
 80194f8:	2320      	movs	r3, #32
 80194fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80194fe:	e00a      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019500:	2340      	movs	r3, #64	@ 0x40
 8019502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019506:	e006      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019508:	2380      	movs	r3, #128	@ 0x80
 801950a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801950e:	e002      	b.n	8019516 <UART_SetConfig+0x5a6>
 8019510:	2380      	movs	r3, #128	@ 0x80
 8019512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8019516:	697b      	ldr	r3, [r7, #20]
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	4a3f      	ldr	r2, [pc, #252]	@ (8019618 <UART_SetConfig+0x6a8>)
 801951c:	4293      	cmp	r3, r2
 801951e:	f040 80f8 	bne.w	8019712 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8019522:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019526:	2b20      	cmp	r3, #32
 8019528:	dc46      	bgt.n	80195b8 <UART_SetConfig+0x648>
 801952a:	2b02      	cmp	r3, #2
 801952c:	f2c0 8082 	blt.w	8019634 <UART_SetConfig+0x6c4>
 8019530:	3b02      	subs	r3, #2
 8019532:	2b1e      	cmp	r3, #30
 8019534:	d87e      	bhi.n	8019634 <UART_SetConfig+0x6c4>
 8019536:	a201      	add	r2, pc, #4	@ (adr r2, 801953c <UART_SetConfig+0x5cc>)
 8019538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801953c:	080195bf 	.word	0x080195bf
 8019540:	08019635 	.word	0x08019635
 8019544:	080195c7 	.word	0x080195c7
 8019548:	08019635 	.word	0x08019635
 801954c:	08019635 	.word	0x08019635
 8019550:	08019635 	.word	0x08019635
 8019554:	080195d7 	.word	0x080195d7
 8019558:	08019635 	.word	0x08019635
 801955c:	08019635 	.word	0x08019635
 8019560:	08019635 	.word	0x08019635
 8019564:	08019635 	.word	0x08019635
 8019568:	08019635 	.word	0x08019635
 801956c:	08019635 	.word	0x08019635
 8019570:	08019635 	.word	0x08019635
 8019574:	080195e7 	.word	0x080195e7
 8019578:	08019635 	.word	0x08019635
 801957c:	08019635 	.word	0x08019635
 8019580:	08019635 	.word	0x08019635
 8019584:	08019635 	.word	0x08019635
 8019588:	08019635 	.word	0x08019635
 801958c:	08019635 	.word	0x08019635
 8019590:	08019635 	.word	0x08019635
 8019594:	08019635 	.word	0x08019635
 8019598:	08019635 	.word	0x08019635
 801959c:	08019635 	.word	0x08019635
 80195a0:	08019635 	.word	0x08019635
 80195a4:	08019635 	.word	0x08019635
 80195a8:	08019635 	.word	0x08019635
 80195ac:	08019635 	.word	0x08019635
 80195b0:	08019635 	.word	0x08019635
 80195b4:	08019627 	.word	0x08019627
 80195b8:	2b40      	cmp	r3, #64	@ 0x40
 80195ba:	d037      	beq.n	801962c <UART_SetConfig+0x6bc>
 80195bc:	e03a      	b.n	8019634 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80195be:	f7fd f8d7 	bl	8016770 <HAL_RCCEx_GetD3PCLK1Freq>
 80195c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80195c4:	e03c      	b.n	8019640 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80195c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80195ca:	4618      	mov	r0, r3
 80195cc:	f7fd f8e6 	bl	801679c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80195d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80195d4:	e034      	b.n	8019640 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80195d6:	f107 0318 	add.w	r3, r7, #24
 80195da:	4618      	mov	r0, r3
 80195dc:	f7fd fa32 	bl	8016a44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80195e0:	69fb      	ldr	r3, [r7, #28]
 80195e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80195e4:	e02c      	b.n	8019640 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80195e6:	4b09      	ldr	r3, [pc, #36]	@ (801960c <UART_SetConfig+0x69c>)
 80195e8:	681b      	ldr	r3, [r3, #0]
 80195ea:	f003 0320 	and.w	r3, r3, #32
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d016      	beq.n	8019620 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80195f2:	4b06      	ldr	r3, [pc, #24]	@ (801960c <UART_SetConfig+0x69c>)
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	08db      	lsrs	r3, r3, #3
 80195f8:	f003 0303 	and.w	r3, r3, #3
 80195fc:	4a07      	ldr	r2, [pc, #28]	@ (801961c <UART_SetConfig+0x6ac>)
 80195fe:	fa22 f303 	lsr.w	r3, r2, r3
 8019602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019604:	e01c      	b.n	8019640 <UART_SetConfig+0x6d0>
 8019606:	bf00      	nop
 8019608:	40011400 	.word	0x40011400
 801960c:	58024400 	.word	0x58024400
 8019610:	40007800 	.word	0x40007800
 8019614:	40007c00 	.word	0x40007c00
 8019618:	58000c00 	.word	0x58000c00
 801961c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8019620:	4b9d      	ldr	r3, [pc, #628]	@ (8019898 <UART_SetConfig+0x928>)
 8019622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019624:	e00c      	b.n	8019640 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8019626:	4b9d      	ldr	r3, [pc, #628]	@ (801989c <UART_SetConfig+0x92c>)
 8019628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801962a:	e009      	b.n	8019640 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801962c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019632:	e005      	b.n	8019640 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8019634:	2300      	movs	r3, #0
 8019636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8019638:	2301      	movs	r3, #1
 801963a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801963e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8019640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019642:	2b00      	cmp	r3, #0
 8019644:	f000 81de 	beq.w	8019a04 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8019648:	697b      	ldr	r3, [r7, #20]
 801964a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801964c:	4a94      	ldr	r2, [pc, #592]	@ (80198a0 <UART_SetConfig+0x930>)
 801964e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019652:	461a      	mov	r2, r3
 8019654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019656:	fbb3 f3f2 	udiv	r3, r3, r2
 801965a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801965c:	697b      	ldr	r3, [r7, #20]
 801965e:	685a      	ldr	r2, [r3, #4]
 8019660:	4613      	mov	r3, r2
 8019662:	005b      	lsls	r3, r3, #1
 8019664:	4413      	add	r3, r2
 8019666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019668:	429a      	cmp	r2, r3
 801966a:	d305      	bcc.n	8019678 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801966c:	697b      	ldr	r3, [r7, #20]
 801966e:	685b      	ldr	r3, [r3, #4]
 8019670:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8019672:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019674:	429a      	cmp	r2, r3
 8019676:	d903      	bls.n	8019680 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8019678:	2301      	movs	r3, #1
 801967a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801967e:	e1c1      	b.n	8019a04 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019682:	2200      	movs	r2, #0
 8019684:	60bb      	str	r3, [r7, #8]
 8019686:	60fa      	str	r2, [r7, #12]
 8019688:	697b      	ldr	r3, [r7, #20]
 801968a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801968c:	4a84      	ldr	r2, [pc, #528]	@ (80198a0 <UART_SetConfig+0x930>)
 801968e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019692:	b29b      	uxth	r3, r3
 8019694:	2200      	movs	r2, #0
 8019696:	603b      	str	r3, [r7, #0]
 8019698:	607a      	str	r2, [r7, #4]
 801969a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801969e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80196a2:	f7e7 f94f 	bl	8000944 <__aeabi_uldivmod>
 80196a6:	4602      	mov	r2, r0
 80196a8:	460b      	mov	r3, r1
 80196aa:	4610      	mov	r0, r2
 80196ac:	4619      	mov	r1, r3
 80196ae:	f04f 0200 	mov.w	r2, #0
 80196b2:	f04f 0300 	mov.w	r3, #0
 80196b6:	020b      	lsls	r3, r1, #8
 80196b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80196bc:	0202      	lsls	r2, r0, #8
 80196be:	6979      	ldr	r1, [r7, #20]
 80196c0:	6849      	ldr	r1, [r1, #4]
 80196c2:	0849      	lsrs	r1, r1, #1
 80196c4:	2000      	movs	r0, #0
 80196c6:	460c      	mov	r4, r1
 80196c8:	4605      	mov	r5, r0
 80196ca:	eb12 0804 	adds.w	r8, r2, r4
 80196ce:	eb43 0905 	adc.w	r9, r3, r5
 80196d2:	697b      	ldr	r3, [r7, #20]
 80196d4:	685b      	ldr	r3, [r3, #4]
 80196d6:	2200      	movs	r2, #0
 80196d8:	469a      	mov	sl, r3
 80196da:	4693      	mov	fp, r2
 80196dc:	4652      	mov	r2, sl
 80196de:	465b      	mov	r3, fp
 80196e0:	4640      	mov	r0, r8
 80196e2:	4649      	mov	r1, r9
 80196e4:	f7e7 f92e 	bl	8000944 <__aeabi_uldivmod>
 80196e8:	4602      	mov	r2, r0
 80196ea:	460b      	mov	r3, r1
 80196ec:	4613      	mov	r3, r2
 80196ee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80196f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80196f6:	d308      	bcc.n	801970a <UART_SetConfig+0x79a>
 80196f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80196fe:	d204      	bcs.n	801970a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8019700:	697b      	ldr	r3, [r7, #20]
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019706:	60da      	str	r2, [r3, #12]
 8019708:	e17c      	b.n	8019a04 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801970a:	2301      	movs	r3, #1
 801970c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8019710:	e178      	b.n	8019a04 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8019712:	697b      	ldr	r3, [r7, #20]
 8019714:	69db      	ldr	r3, [r3, #28]
 8019716:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801971a:	f040 80c5 	bne.w	80198a8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801971e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019722:	2b20      	cmp	r3, #32
 8019724:	dc48      	bgt.n	80197b8 <UART_SetConfig+0x848>
 8019726:	2b00      	cmp	r3, #0
 8019728:	db7b      	blt.n	8019822 <UART_SetConfig+0x8b2>
 801972a:	2b20      	cmp	r3, #32
 801972c:	d879      	bhi.n	8019822 <UART_SetConfig+0x8b2>
 801972e:	a201      	add	r2, pc, #4	@ (adr r2, 8019734 <UART_SetConfig+0x7c4>)
 8019730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019734:	080197bf 	.word	0x080197bf
 8019738:	080197c7 	.word	0x080197c7
 801973c:	08019823 	.word	0x08019823
 8019740:	08019823 	.word	0x08019823
 8019744:	080197cf 	.word	0x080197cf
 8019748:	08019823 	.word	0x08019823
 801974c:	08019823 	.word	0x08019823
 8019750:	08019823 	.word	0x08019823
 8019754:	080197df 	.word	0x080197df
 8019758:	08019823 	.word	0x08019823
 801975c:	08019823 	.word	0x08019823
 8019760:	08019823 	.word	0x08019823
 8019764:	08019823 	.word	0x08019823
 8019768:	08019823 	.word	0x08019823
 801976c:	08019823 	.word	0x08019823
 8019770:	08019823 	.word	0x08019823
 8019774:	080197ef 	.word	0x080197ef
 8019778:	08019823 	.word	0x08019823
 801977c:	08019823 	.word	0x08019823
 8019780:	08019823 	.word	0x08019823
 8019784:	08019823 	.word	0x08019823
 8019788:	08019823 	.word	0x08019823
 801978c:	08019823 	.word	0x08019823
 8019790:	08019823 	.word	0x08019823
 8019794:	08019823 	.word	0x08019823
 8019798:	08019823 	.word	0x08019823
 801979c:	08019823 	.word	0x08019823
 80197a0:	08019823 	.word	0x08019823
 80197a4:	08019823 	.word	0x08019823
 80197a8:	08019823 	.word	0x08019823
 80197ac:	08019823 	.word	0x08019823
 80197b0:	08019823 	.word	0x08019823
 80197b4:	08019815 	.word	0x08019815
 80197b8:	2b40      	cmp	r3, #64	@ 0x40
 80197ba:	d02e      	beq.n	801981a <UART_SetConfig+0x8aa>
 80197bc:	e031      	b.n	8019822 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80197be:	f7fb f821 	bl	8014804 <HAL_RCC_GetPCLK1Freq>
 80197c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80197c4:	e033      	b.n	801982e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80197c6:	f7fb f833 	bl	8014830 <HAL_RCC_GetPCLK2Freq>
 80197ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80197cc:	e02f      	b.n	801982e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80197ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80197d2:	4618      	mov	r0, r3
 80197d4:	f7fc ffe2 	bl	801679c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80197d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80197da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80197dc:	e027      	b.n	801982e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80197de:	f107 0318 	add.w	r3, r7, #24
 80197e2:	4618      	mov	r0, r3
 80197e4:	f7fd f92e 	bl	8016a44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80197e8:	69fb      	ldr	r3, [r7, #28]
 80197ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80197ec:	e01f      	b.n	801982e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80197ee:	4b2d      	ldr	r3, [pc, #180]	@ (80198a4 <UART_SetConfig+0x934>)
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	f003 0320 	and.w	r3, r3, #32
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d009      	beq.n	801980e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80197fa:	4b2a      	ldr	r3, [pc, #168]	@ (80198a4 <UART_SetConfig+0x934>)
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	08db      	lsrs	r3, r3, #3
 8019800:	f003 0303 	and.w	r3, r3, #3
 8019804:	4a24      	ldr	r2, [pc, #144]	@ (8019898 <UART_SetConfig+0x928>)
 8019806:	fa22 f303 	lsr.w	r3, r2, r3
 801980a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801980c:	e00f      	b.n	801982e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801980e:	4b22      	ldr	r3, [pc, #136]	@ (8019898 <UART_SetConfig+0x928>)
 8019810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019812:	e00c      	b.n	801982e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8019814:	4b21      	ldr	r3, [pc, #132]	@ (801989c <UART_SetConfig+0x92c>)
 8019816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019818:	e009      	b.n	801982e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801981a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801981e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019820:	e005      	b.n	801982e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8019822:	2300      	movs	r3, #0
 8019824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8019826:	2301      	movs	r3, #1
 8019828:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801982c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801982e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019830:	2b00      	cmp	r3, #0
 8019832:	f000 80e7 	beq.w	8019a04 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019836:	697b      	ldr	r3, [r7, #20]
 8019838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801983a:	4a19      	ldr	r2, [pc, #100]	@ (80198a0 <UART_SetConfig+0x930>)
 801983c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019840:	461a      	mov	r2, r3
 8019842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019844:	fbb3 f3f2 	udiv	r3, r3, r2
 8019848:	005a      	lsls	r2, r3, #1
 801984a:	697b      	ldr	r3, [r7, #20]
 801984c:	685b      	ldr	r3, [r3, #4]
 801984e:	085b      	lsrs	r3, r3, #1
 8019850:	441a      	add	r2, r3
 8019852:	697b      	ldr	r3, [r7, #20]
 8019854:	685b      	ldr	r3, [r3, #4]
 8019856:	fbb2 f3f3 	udiv	r3, r2, r3
 801985a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801985c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801985e:	2b0f      	cmp	r3, #15
 8019860:	d916      	bls.n	8019890 <UART_SetConfig+0x920>
 8019862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019868:	d212      	bcs.n	8019890 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801986a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801986c:	b29b      	uxth	r3, r3
 801986e:	f023 030f 	bic.w	r3, r3, #15
 8019872:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019876:	085b      	lsrs	r3, r3, #1
 8019878:	b29b      	uxth	r3, r3
 801987a:	f003 0307 	and.w	r3, r3, #7
 801987e:	b29a      	uxth	r2, r3
 8019880:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019882:	4313      	orrs	r3, r2
 8019884:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8019886:	697b      	ldr	r3, [r7, #20]
 8019888:	681b      	ldr	r3, [r3, #0]
 801988a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801988c:	60da      	str	r2, [r3, #12]
 801988e:	e0b9      	b.n	8019a04 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8019890:	2301      	movs	r3, #1
 8019892:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8019896:	e0b5      	b.n	8019a04 <UART_SetConfig+0xa94>
 8019898:	03d09000 	.word	0x03d09000
 801989c:	003d0900 	.word	0x003d0900
 80198a0:	0801f734 	.word	0x0801f734
 80198a4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80198a8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80198ac:	2b20      	cmp	r3, #32
 80198ae:	dc49      	bgt.n	8019944 <UART_SetConfig+0x9d4>
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	db7c      	blt.n	80199ae <UART_SetConfig+0xa3e>
 80198b4:	2b20      	cmp	r3, #32
 80198b6:	d87a      	bhi.n	80199ae <UART_SetConfig+0xa3e>
 80198b8:	a201      	add	r2, pc, #4	@ (adr r2, 80198c0 <UART_SetConfig+0x950>)
 80198ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198be:	bf00      	nop
 80198c0:	0801994b 	.word	0x0801994b
 80198c4:	08019953 	.word	0x08019953
 80198c8:	080199af 	.word	0x080199af
 80198cc:	080199af 	.word	0x080199af
 80198d0:	0801995b 	.word	0x0801995b
 80198d4:	080199af 	.word	0x080199af
 80198d8:	080199af 	.word	0x080199af
 80198dc:	080199af 	.word	0x080199af
 80198e0:	0801996b 	.word	0x0801996b
 80198e4:	080199af 	.word	0x080199af
 80198e8:	080199af 	.word	0x080199af
 80198ec:	080199af 	.word	0x080199af
 80198f0:	080199af 	.word	0x080199af
 80198f4:	080199af 	.word	0x080199af
 80198f8:	080199af 	.word	0x080199af
 80198fc:	080199af 	.word	0x080199af
 8019900:	0801997b 	.word	0x0801997b
 8019904:	080199af 	.word	0x080199af
 8019908:	080199af 	.word	0x080199af
 801990c:	080199af 	.word	0x080199af
 8019910:	080199af 	.word	0x080199af
 8019914:	080199af 	.word	0x080199af
 8019918:	080199af 	.word	0x080199af
 801991c:	080199af 	.word	0x080199af
 8019920:	080199af 	.word	0x080199af
 8019924:	080199af 	.word	0x080199af
 8019928:	080199af 	.word	0x080199af
 801992c:	080199af 	.word	0x080199af
 8019930:	080199af 	.word	0x080199af
 8019934:	080199af 	.word	0x080199af
 8019938:	080199af 	.word	0x080199af
 801993c:	080199af 	.word	0x080199af
 8019940:	080199a1 	.word	0x080199a1
 8019944:	2b40      	cmp	r3, #64	@ 0x40
 8019946:	d02e      	beq.n	80199a6 <UART_SetConfig+0xa36>
 8019948:	e031      	b.n	80199ae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801994a:	f7fa ff5b 	bl	8014804 <HAL_RCC_GetPCLK1Freq>
 801994e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019950:	e033      	b.n	80199ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019952:	f7fa ff6d 	bl	8014830 <HAL_RCC_GetPCLK2Freq>
 8019956:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019958:	e02f      	b.n	80199ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801995a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801995e:	4618      	mov	r0, r3
 8019960:	f7fc ff1c 	bl	801679c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8019964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019968:	e027      	b.n	80199ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801996a:	f107 0318 	add.w	r3, r7, #24
 801996e:	4618      	mov	r0, r3
 8019970:	f7fd f868 	bl	8016a44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8019974:	69fb      	ldr	r3, [r7, #28]
 8019976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019978:	e01f      	b.n	80199ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801997a:	4b2d      	ldr	r3, [pc, #180]	@ (8019a30 <UART_SetConfig+0xac0>)
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	f003 0320 	and.w	r3, r3, #32
 8019982:	2b00      	cmp	r3, #0
 8019984:	d009      	beq.n	801999a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8019986:	4b2a      	ldr	r3, [pc, #168]	@ (8019a30 <UART_SetConfig+0xac0>)
 8019988:	681b      	ldr	r3, [r3, #0]
 801998a:	08db      	lsrs	r3, r3, #3
 801998c:	f003 0303 	and.w	r3, r3, #3
 8019990:	4a28      	ldr	r2, [pc, #160]	@ (8019a34 <UART_SetConfig+0xac4>)
 8019992:	fa22 f303 	lsr.w	r3, r2, r3
 8019996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019998:	e00f      	b.n	80199ba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801999a:	4b26      	ldr	r3, [pc, #152]	@ (8019a34 <UART_SetConfig+0xac4>)
 801999c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801999e:	e00c      	b.n	80199ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80199a0:	4b25      	ldr	r3, [pc, #148]	@ (8019a38 <UART_SetConfig+0xac8>)
 80199a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80199a4:	e009      	b.n	80199ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80199a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80199aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80199ac:	e005      	b.n	80199ba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80199ae:	2300      	movs	r3, #0
 80199b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80199b2:	2301      	movs	r3, #1
 80199b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80199b8:	bf00      	nop
    }

    if (pclk != 0U)
 80199ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80199bc:	2b00      	cmp	r3, #0
 80199be:	d021      	beq.n	8019a04 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80199c0:	697b      	ldr	r3, [r7, #20]
 80199c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80199c4:	4a1d      	ldr	r2, [pc, #116]	@ (8019a3c <UART_SetConfig+0xacc>)
 80199c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80199ca:	461a      	mov	r2, r3
 80199cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80199ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80199d2:	697b      	ldr	r3, [r7, #20]
 80199d4:	685b      	ldr	r3, [r3, #4]
 80199d6:	085b      	lsrs	r3, r3, #1
 80199d8:	441a      	add	r2, r3
 80199da:	697b      	ldr	r3, [r7, #20]
 80199dc:	685b      	ldr	r3, [r3, #4]
 80199de:	fbb2 f3f3 	udiv	r3, r2, r3
 80199e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80199e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199e6:	2b0f      	cmp	r3, #15
 80199e8:	d909      	bls.n	80199fe <UART_SetConfig+0xa8e>
 80199ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80199f0:	d205      	bcs.n	80199fe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80199f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199f4:	b29a      	uxth	r2, r3
 80199f6:	697b      	ldr	r3, [r7, #20]
 80199f8:	681b      	ldr	r3, [r3, #0]
 80199fa:	60da      	str	r2, [r3, #12]
 80199fc:	e002      	b.n	8019a04 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80199fe:	2301      	movs	r3, #1
 8019a00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8019a04:	697b      	ldr	r3, [r7, #20]
 8019a06:	2201      	movs	r2, #1
 8019a08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8019a0c:	697b      	ldr	r3, [r7, #20]
 8019a0e:	2201      	movs	r2, #1
 8019a10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8019a14:	697b      	ldr	r3, [r7, #20]
 8019a16:	2200      	movs	r2, #0
 8019a18:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8019a1a:	697b      	ldr	r3, [r7, #20]
 8019a1c:	2200      	movs	r2, #0
 8019a1e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8019a20:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8019a24:	4618      	mov	r0, r3
 8019a26:	3748      	adds	r7, #72	@ 0x48
 8019a28:	46bd      	mov	sp, r7
 8019a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019a2e:	bf00      	nop
 8019a30:	58024400 	.word	0x58024400
 8019a34:	03d09000 	.word	0x03d09000
 8019a38:	003d0900 	.word	0x003d0900
 8019a3c:	0801f734 	.word	0x0801f734

08019a40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8019a40:	b480      	push	{r7}
 8019a42:	b083      	sub	sp, #12
 8019a44:	af00      	add	r7, sp, #0
 8019a46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019a4c:	f003 0308 	and.w	r3, r3, #8
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	d00a      	beq.n	8019a6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	681b      	ldr	r3, [r3, #0]
 8019a58:	685b      	ldr	r3, [r3, #4]
 8019a5a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	430a      	orrs	r2, r1
 8019a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019a6e:	f003 0301 	and.w	r3, r3, #1
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d00a      	beq.n	8019a8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	685b      	ldr	r3, [r3, #4]
 8019a7c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	430a      	orrs	r2, r1
 8019a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019a90:	f003 0302 	and.w	r3, r3, #2
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d00a      	beq.n	8019aae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	681b      	ldr	r3, [r3, #0]
 8019a9c:	685b      	ldr	r3, [r3, #4]
 8019a9e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	430a      	orrs	r2, r1
 8019aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019ab2:	f003 0304 	and.w	r3, r3, #4
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d00a      	beq.n	8019ad0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	685b      	ldr	r3, [r3, #4]
 8019ac0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	430a      	orrs	r2, r1
 8019ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019ad4:	f003 0310 	and.w	r3, r3, #16
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d00a      	beq.n	8019af2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	689b      	ldr	r3, [r3, #8]
 8019ae2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	430a      	orrs	r2, r1
 8019af0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019af6:	f003 0320 	and.w	r3, r3, #32
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d00a      	beq.n	8019b14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	689b      	ldr	r3, [r3, #8]
 8019b04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	430a      	orrs	r2, r1
 8019b12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d01a      	beq.n	8019b56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	685b      	ldr	r3, [r3, #4]
 8019b26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	681b      	ldr	r3, [r3, #0]
 8019b32:	430a      	orrs	r2, r1
 8019b34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019b3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019b3e:	d10a      	bne.n	8019b56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	685b      	ldr	r3, [r3, #4]
 8019b46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	430a      	orrs	r2, r1
 8019b54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d00a      	beq.n	8019b78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	685b      	ldr	r3, [r3, #4]
 8019b68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	430a      	orrs	r2, r1
 8019b76:	605a      	str	r2, [r3, #4]
  }
}
 8019b78:	bf00      	nop
 8019b7a:	370c      	adds	r7, #12
 8019b7c:	46bd      	mov	sp, r7
 8019b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b82:	4770      	bx	lr

08019b84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019b84:	b580      	push	{r7, lr}
 8019b86:	b098      	sub	sp, #96	@ 0x60
 8019b88:	af02      	add	r7, sp, #8
 8019b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	2200      	movs	r2, #0
 8019b90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8019b94:	f7f6 ff42 	bl	8010a1c <HAL_GetTick>
 8019b98:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	f003 0308 	and.w	r3, r3, #8
 8019ba4:	2b08      	cmp	r3, #8
 8019ba6:	d12f      	bne.n	8019c08 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019ba8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019bac:	9300      	str	r3, [sp, #0]
 8019bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019bb0:	2200      	movs	r2, #0
 8019bb2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8019bb6:	6878      	ldr	r0, [r7, #4]
 8019bb8:	f000 f88e 	bl	8019cd8 <UART_WaitOnFlagUntilTimeout>
 8019bbc:	4603      	mov	r3, r0
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d022      	beq.n	8019c08 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bca:	e853 3f00 	ldrex	r3, [r3]
 8019bce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8019bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019bd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019bd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	461a      	mov	r2, r3
 8019bde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019be0:	647b      	str	r3, [r7, #68]	@ 0x44
 8019be2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019be4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019be6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019be8:	e841 2300 	strex	r3, r2, [r1]
 8019bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8019bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d1e6      	bne.n	8019bc2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	2220      	movs	r2, #32
 8019bf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	2200      	movs	r2, #0
 8019c00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019c04:	2303      	movs	r3, #3
 8019c06:	e063      	b.n	8019cd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	681b      	ldr	r3, [r3, #0]
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	f003 0304 	and.w	r3, r3, #4
 8019c12:	2b04      	cmp	r3, #4
 8019c14:	d149      	bne.n	8019caa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019c16:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019c1a:	9300      	str	r3, [sp, #0]
 8019c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019c1e:	2200      	movs	r2, #0
 8019c20:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8019c24:	6878      	ldr	r0, [r7, #4]
 8019c26:	f000 f857 	bl	8019cd8 <UART_WaitOnFlagUntilTimeout>
 8019c2a:	4603      	mov	r3, r0
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d03c      	beq.n	8019caa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c38:	e853 3f00 	ldrex	r3, [r3]
 8019c3c:	623b      	str	r3, [r7, #32]
   return(result);
 8019c3e:	6a3b      	ldr	r3, [r7, #32]
 8019c40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	461a      	mov	r2, r3
 8019c4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019c4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8019c50:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019c54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019c56:	e841 2300 	strex	r3, r2, [r1]
 8019c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	d1e6      	bne.n	8019c30 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	3308      	adds	r3, #8
 8019c68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c6a:	693b      	ldr	r3, [r7, #16]
 8019c6c:	e853 3f00 	ldrex	r3, [r3]
 8019c70:	60fb      	str	r3, [r7, #12]
   return(result);
 8019c72:	68fb      	ldr	r3, [r7, #12]
 8019c74:	f023 0301 	bic.w	r3, r3, #1
 8019c78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	3308      	adds	r3, #8
 8019c80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019c82:	61fa      	str	r2, [r7, #28]
 8019c84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c86:	69b9      	ldr	r1, [r7, #24]
 8019c88:	69fa      	ldr	r2, [r7, #28]
 8019c8a:	e841 2300 	strex	r3, r2, [r1]
 8019c8e:	617b      	str	r3, [r7, #20]
   return(result);
 8019c90:	697b      	ldr	r3, [r7, #20]
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	d1e5      	bne.n	8019c62 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	2220      	movs	r2, #32
 8019c9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	2200      	movs	r2, #0
 8019ca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019ca6:	2303      	movs	r3, #3
 8019ca8:	e012      	b.n	8019cd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	2220      	movs	r2, #32
 8019cae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	2220      	movs	r2, #32
 8019cb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	2200      	movs	r2, #0
 8019cbe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	2200      	movs	r2, #0
 8019cc4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	2200      	movs	r2, #0
 8019cca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8019cce:	2300      	movs	r3, #0
}
 8019cd0:	4618      	mov	r0, r3
 8019cd2:	3758      	adds	r7, #88	@ 0x58
 8019cd4:	46bd      	mov	sp, r7
 8019cd6:	bd80      	pop	{r7, pc}

08019cd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8019cd8:	b580      	push	{r7, lr}
 8019cda:	b084      	sub	sp, #16
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	60f8      	str	r0, [r7, #12]
 8019ce0:	60b9      	str	r1, [r7, #8]
 8019ce2:	603b      	str	r3, [r7, #0]
 8019ce4:	4613      	mov	r3, r2
 8019ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019ce8:	e04f      	b.n	8019d8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019cea:	69bb      	ldr	r3, [r7, #24]
 8019cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019cf0:	d04b      	beq.n	8019d8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019cf2:	f7f6 fe93 	bl	8010a1c <HAL_GetTick>
 8019cf6:	4602      	mov	r2, r0
 8019cf8:	683b      	ldr	r3, [r7, #0]
 8019cfa:	1ad3      	subs	r3, r2, r3
 8019cfc:	69ba      	ldr	r2, [r7, #24]
 8019cfe:	429a      	cmp	r2, r3
 8019d00:	d302      	bcc.n	8019d08 <UART_WaitOnFlagUntilTimeout+0x30>
 8019d02:	69bb      	ldr	r3, [r7, #24]
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d101      	bne.n	8019d0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8019d08:	2303      	movs	r3, #3
 8019d0a:	e04e      	b.n	8019daa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8019d0c:	68fb      	ldr	r3, [r7, #12]
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	f003 0304 	and.w	r3, r3, #4
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d037      	beq.n	8019d8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8019d1a:	68bb      	ldr	r3, [r7, #8]
 8019d1c:	2b80      	cmp	r3, #128	@ 0x80
 8019d1e:	d034      	beq.n	8019d8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8019d20:	68bb      	ldr	r3, [r7, #8]
 8019d22:	2b40      	cmp	r3, #64	@ 0x40
 8019d24:	d031      	beq.n	8019d8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	69db      	ldr	r3, [r3, #28]
 8019d2c:	f003 0308 	and.w	r3, r3, #8
 8019d30:	2b08      	cmp	r3, #8
 8019d32:	d110      	bne.n	8019d56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	2208      	movs	r2, #8
 8019d3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019d3c:	68f8      	ldr	r0, [r7, #12]
 8019d3e:	f000 f839 	bl	8019db4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8019d42:	68fb      	ldr	r3, [r7, #12]
 8019d44:	2208      	movs	r2, #8
 8019d46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019d4a:	68fb      	ldr	r3, [r7, #12]
 8019d4c:	2200      	movs	r2, #0
 8019d4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8019d52:	2301      	movs	r3, #1
 8019d54:	e029      	b.n	8019daa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	69db      	ldr	r3, [r3, #28]
 8019d5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019d60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019d64:	d111      	bne.n	8019d8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019d6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019d70:	68f8      	ldr	r0, [r7, #12]
 8019d72:	f000 f81f 	bl	8019db4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	2220      	movs	r2, #32
 8019d7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	2200      	movs	r2, #0
 8019d82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8019d86:	2303      	movs	r3, #3
 8019d88:	e00f      	b.n	8019daa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019d8a:	68fb      	ldr	r3, [r7, #12]
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	69da      	ldr	r2, [r3, #28]
 8019d90:	68bb      	ldr	r3, [r7, #8]
 8019d92:	4013      	ands	r3, r2
 8019d94:	68ba      	ldr	r2, [r7, #8]
 8019d96:	429a      	cmp	r2, r3
 8019d98:	bf0c      	ite	eq
 8019d9a:	2301      	moveq	r3, #1
 8019d9c:	2300      	movne	r3, #0
 8019d9e:	b2db      	uxtb	r3, r3
 8019da0:	461a      	mov	r2, r3
 8019da2:	79fb      	ldrb	r3, [r7, #7]
 8019da4:	429a      	cmp	r2, r3
 8019da6:	d0a0      	beq.n	8019cea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8019da8:	2300      	movs	r3, #0
}
 8019daa:	4618      	mov	r0, r3
 8019dac:	3710      	adds	r7, #16
 8019dae:	46bd      	mov	sp, r7
 8019db0:	bd80      	pop	{r7, pc}
	...

08019db4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8019db4:	b480      	push	{r7}
 8019db6:	b095      	sub	sp, #84	@ 0x54
 8019db8:	af00      	add	r7, sp, #0
 8019dba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019dc4:	e853 3f00 	ldrex	r3, [r3]
 8019dc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019dcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	681b      	ldr	r3, [r3, #0]
 8019dd6:	461a      	mov	r2, r3
 8019dd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019dda:	643b      	str	r3, [r7, #64]	@ 0x40
 8019ddc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019dde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019de0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019de2:	e841 2300 	strex	r3, r2, [r1]
 8019de6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d1e6      	bne.n	8019dbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	681b      	ldr	r3, [r3, #0]
 8019df2:	3308      	adds	r3, #8
 8019df4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019df6:	6a3b      	ldr	r3, [r7, #32]
 8019df8:	e853 3f00 	ldrex	r3, [r3]
 8019dfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8019dfe:	69fa      	ldr	r2, [r7, #28]
 8019e00:	4b1e      	ldr	r3, [pc, #120]	@ (8019e7c <UART_EndRxTransfer+0xc8>)
 8019e02:	4013      	ands	r3, r2
 8019e04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	681b      	ldr	r3, [r3, #0]
 8019e0a:	3308      	adds	r3, #8
 8019e0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019e0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019e10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019e14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019e16:	e841 2300 	strex	r3, r2, [r1]
 8019e1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d1e5      	bne.n	8019dee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019e26:	2b01      	cmp	r3, #1
 8019e28:	d118      	bne.n	8019e5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e30:	68fb      	ldr	r3, [r7, #12]
 8019e32:	e853 3f00 	ldrex	r3, [r3]
 8019e36:	60bb      	str	r3, [r7, #8]
   return(result);
 8019e38:	68bb      	ldr	r3, [r7, #8]
 8019e3a:	f023 0310 	bic.w	r3, r3, #16
 8019e3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	461a      	mov	r2, r3
 8019e46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019e48:	61bb      	str	r3, [r7, #24]
 8019e4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e4c:	6979      	ldr	r1, [r7, #20]
 8019e4e:	69ba      	ldr	r2, [r7, #24]
 8019e50:	e841 2300 	strex	r3, r2, [r1]
 8019e54:	613b      	str	r3, [r7, #16]
   return(result);
 8019e56:	693b      	ldr	r3, [r7, #16]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d1e6      	bne.n	8019e2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	2220      	movs	r2, #32
 8019e60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	2200      	movs	r2, #0
 8019e68:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	2200      	movs	r2, #0
 8019e6e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8019e70:	bf00      	nop
 8019e72:	3754      	adds	r7, #84	@ 0x54
 8019e74:	46bd      	mov	sp, r7
 8019e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e7a:	4770      	bx	lr
 8019e7c:	effffffe 	.word	0xeffffffe

08019e80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8019e80:	b480      	push	{r7}
 8019e82:	b085      	sub	sp, #20
 8019e84:	af00      	add	r7, sp, #0
 8019e86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8019e8e:	2b01      	cmp	r3, #1
 8019e90:	d101      	bne.n	8019e96 <HAL_UARTEx_DisableFifoMode+0x16>
 8019e92:	2302      	movs	r3, #2
 8019e94:	e027      	b.n	8019ee6 <HAL_UARTEx_DisableFifoMode+0x66>
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	2201      	movs	r2, #1
 8019e9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	2224      	movs	r2, #36	@ 0x24
 8019ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	681a      	ldr	r2, [r3, #0]
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	f022 0201 	bic.w	r2, r2, #1
 8019ebc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8019ebe:	68fb      	ldr	r3, [r7, #12]
 8019ec0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8019ec4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	2200      	movs	r2, #0
 8019eca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	68fa      	ldr	r2, [r7, #12]
 8019ed2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	2220      	movs	r2, #32
 8019ed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	2200      	movs	r2, #0
 8019ee0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8019ee4:	2300      	movs	r3, #0
}
 8019ee6:	4618      	mov	r0, r3
 8019ee8:	3714      	adds	r7, #20
 8019eea:	46bd      	mov	sp, r7
 8019eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ef0:	4770      	bx	lr

08019ef2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8019ef2:	b580      	push	{r7, lr}
 8019ef4:	b084      	sub	sp, #16
 8019ef6:	af00      	add	r7, sp, #0
 8019ef8:	6078      	str	r0, [r7, #4]
 8019efa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8019f02:	2b01      	cmp	r3, #1
 8019f04:	d101      	bne.n	8019f0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8019f06:	2302      	movs	r3, #2
 8019f08:	e02d      	b.n	8019f66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	2201      	movs	r2, #1
 8019f0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	2224      	movs	r2, #36	@ 0x24
 8019f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	681a      	ldr	r2, [r3, #0]
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	681b      	ldr	r3, [r3, #0]
 8019f2c:	f022 0201 	bic.w	r2, r2, #1
 8019f30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	689b      	ldr	r3, [r3, #8]
 8019f38:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	683a      	ldr	r2, [r7, #0]
 8019f42:	430a      	orrs	r2, r1
 8019f44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8019f46:	6878      	ldr	r0, [r7, #4]
 8019f48:	f000 f850 	bl	8019fec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	68fa      	ldr	r2, [r7, #12]
 8019f52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	2220      	movs	r2, #32
 8019f58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	2200      	movs	r2, #0
 8019f60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8019f64:	2300      	movs	r3, #0
}
 8019f66:	4618      	mov	r0, r3
 8019f68:	3710      	adds	r7, #16
 8019f6a:	46bd      	mov	sp, r7
 8019f6c:	bd80      	pop	{r7, pc}

08019f6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8019f6e:	b580      	push	{r7, lr}
 8019f70:	b084      	sub	sp, #16
 8019f72:	af00      	add	r7, sp, #0
 8019f74:	6078      	str	r0, [r7, #4]
 8019f76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8019f7e:	2b01      	cmp	r3, #1
 8019f80:	d101      	bne.n	8019f86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8019f82:	2302      	movs	r3, #2
 8019f84:	e02d      	b.n	8019fe2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	2201      	movs	r2, #1
 8019f8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	2224      	movs	r2, #36	@ 0x24
 8019f92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	681a      	ldr	r2, [r3, #0]
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	f022 0201 	bic.w	r2, r2, #1
 8019fac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	689b      	ldr	r3, [r3, #8]
 8019fb4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	681b      	ldr	r3, [r3, #0]
 8019fbc:	683a      	ldr	r2, [r7, #0]
 8019fbe:	430a      	orrs	r2, r1
 8019fc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8019fc2:	6878      	ldr	r0, [r7, #4]
 8019fc4:	f000 f812 	bl	8019fec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	68fa      	ldr	r2, [r7, #12]
 8019fce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	2220      	movs	r2, #32
 8019fd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	2200      	movs	r2, #0
 8019fdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8019fe0:	2300      	movs	r3, #0
}
 8019fe2:	4618      	mov	r0, r3
 8019fe4:	3710      	adds	r7, #16
 8019fe6:	46bd      	mov	sp, r7
 8019fe8:	bd80      	pop	{r7, pc}
	...

08019fec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8019fec:	b480      	push	{r7}
 8019fee:	b085      	sub	sp, #20
 8019ff0:	af00      	add	r7, sp, #0
 8019ff2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d108      	bne.n	801a00e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	2201      	movs	r2, #1
 801a000:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	2201      	movs	r2, #1
 801a008:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801a00c:	e031      	b.n	801a072 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801a00e:	2310      	movs	r3, #16
 801a010:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801a012:	2310      	movs	r3, #16
 801a014:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	689b      	ldr	r3, [r3, #8]
 801a01c:	0e5b      	lsrs	r3, r3, #25
 801a01e:	b2db      	uxtb	r3, r3
 801a020:	f003 0307 	and.w	r3, r3, #7
 801a024:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	689b      	ldr	r3, [r3, #8]
 801a02c:	0f5b      	lsrs	r3, r3, #29
 801a02e:	b2db      	uxtb	r3, r3
 801a030:	f003 0307 	and.w	r3, r3, #7
 801a034:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a036:	7bbb      	ldrb	r3, [r7, #14]
 801a038:	7b3a      	ldrb	r2, [r7, #12]
 801a03a:	4911      	ldr	r1, [pc, #68]	@ (801a080 <UARTEx_SetNbDataToProcess+0x94>)
 801a03c:	5c8a      	ldrb	r2, [r1, r2]
 801a03e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801a042:	7b3a      	ldrb	r2, [r7, #12]
 801a044:	490f      	ldr	r1, [pc, #60]	@ (801a084 <UARTEx_SetNbDataToProcess+0x98>)
 801a046:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a048:	fb93 f3f2 	sdiv	r3, r3, r2
 801a04c:	b29a      	uxth	r2, r3
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a054:	7bfb      	ldrb	r3, [r7, #15]
 801a056:	7b7a      	ldrb	r2, [r7, #13]
 801a058:	4909      	ldr	r1, [pc, #36]	@ (801a080 <UARTEx_SetNbDataToProcess+0x94>)
 801a05a:	5c8a      	ldrb	r2, [r1, r2]
 801a05c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801a060:	7b7a      	ldrb	r2, [r7, #13]
 801a062:	4908      	ldr	r1, [pc, #32]	@ (801a084 <UARTEx_SetNbDataToProcess+0x98>)
 801a064:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a066:	fb93 f3f2 	sdiv	r3, r3, r2
 801a06a:	b29a      	uxth	r2, r3
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801a072:	bf00      	nop
 801a074:	3714      	adds	r7, #20
 801a076:	46bd      	mov	sp, r7
 801a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a07c:	4770      	bx	lr
 801a07e:	bf00      	nop
 801a080:	0801f74c 	.word	0x0801f74c
 801a084:	0801f754 	.word	0x0801f754

0801a088 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801a088:	b084      	sub	sp, #16
 801a08a:	b480      	push	{r7}
 801a08c:	b085      	sub	sp, #20
 801a08e:	af00      	add	r7, sp, #0
 801a090:	6078      	str	r0, [r7, #4]
 801a092:	f107 001c 	add.w	r0, r7, #28
 801a096:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801a09a:	2300      	movs	r3, #0
 801a09c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801a09e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801a0a0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801a0a2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 801a0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 801a0a6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 801a0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 801a0aa:	431a      	orrs	r2, r3
             Init.ClockDiv
 801a0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 801a0ae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 801a0b0:	68fa      	ldr	r2, [r7, #12]
 801a0b2:	4313      	orrs	r3, r2
 801a0b4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	685a      	ldr	r2, [r3, #4]
 801a0ba:	4b07      	ldr	r3, [pc, #28]	@ (801a0d8 <SDMMC_Init+0x50>)
 801a0bc:	4013      	ands	r3, r2
 801a0be:	68fa      	ldr	r2, [r7, #12]
 801a0c0:	431a      	orrs	r2, r3
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801a0c6:	2300      	movs	r3, #0
}
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	3714      	adds	r7, #20
 801a0cc:	46bd      	mov	sp, r7
 801a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0d2:	b004      	add	sp, #16
 801a0d4:	4770      	bx	lr
 801a0d6:	bf00      	nop
 801a0d8:	ffc02c00 	.word	0xffc02c00

0801a0dc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 801a0dc:	b480      	push	{r7}
 801a0de:	b083      	sub	sp, #12
 801a0e0:	af00      	add	r7, sp, #0
 801a0e2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 801a0ea:	4618      	mov	r0, r3
 801a0ec:	370c      	adds	r7, #12
 801a0ee:	46bd      	mov	sp, r7
 801a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0f4:	4770      	bx	lr

0801a0f6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801a0f6:	b480      	push	{r7}
 801a0f8:	b083      	sub	sp, #12
 801a0fa:	af00      	add	r7, sp, #0
 801a0fc:	6078      	str	r0, [r7, #4]
 801a0fe:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 801a100:	683b      	ldr	r3, [r7, #0]
 801a102:	681a      	ldr	r2, [r3, #0]
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 801a10a:	2300      	movs	r3, #0
}
 801a10c:	4618      	mov	r0, r3
 801a10e:	370c      	adds	r7, #12
 801a110:	46bd      	mov	sp, r7
 801a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a116:	4770      	bx	lr

0801a118 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 801a118:	b480      	push	{r7}
 801a11a:	b083      	sub	sp, #12
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	681b      	ldr	r3, [r3, #0]
 801a124:	f043 0203 	orr.w	r2, r3, #3
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801a12c:	2300      	movs	r3, #0
}
 801a12e:	4618      	mov	r0, r3
 801a130:	370c      	adds	r7, #12
 801a132:	46bd      	mov	sp, r7
 801a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a138:	4770      	bx	lr

0801a13a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801a13a:	b480      	push	{r7}
 801a13c:	b083      	sub	sp, #12
 801a13e:	af00      	add	r7, sp, #0
 801a140:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	681b      	ldr	r3, [r3, #0]
 801a146:	f003 0303 	and.w	r3, r3, #3
}
 801a14a:	4618      	mov	r0, r3
 801a14c:	370c      	adds	r7, #12
 801a14e:	46bd      	mov	sp, r7
 801a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a154:	4770      	bx	lr
	...

0801a158 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801a158:	b480      	push	{r7}
 801a15a:	b085      	sub	sp, #20
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	6078      	str	r0, [r7, #4]
 801a160:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801a162:	2300      	movs	r3, #0
 801a164:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801a166:	683b      	ldr	r3, [r7, #0]
 801a168:	681a      	ldr	r2, [r3, #0]
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801a16e:	683b      	ldr	r3, [r7, #0]
 801a170:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801a172:	683b      	ldr	r3, [r7, #0]
 801a174:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801a176:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 801a178:	683b      	ldr	r3, [r7, #0]
 801a17a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 801a17c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801a17e:	683b      	ldr	r3, [r7, #0]
 801a180:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801a182:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801a184:	68fa      	ldr	r2, [r7, #12]
 801a186:	4313      	orrs	r3, r2
 801a188:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	68da      	ldr	r2, [r3, #12]
 801a18e:	4b06      	ldr	r3, [pc, #24]	@ (801a1a8 <SDMMC_SendCommand+0x50>)
 801a190:	4013      	ands	r3, r2
 801a192:	68fa      	ldr	r2, [r7, #12]
 801a194:	431a      	orrs	r2, r3
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801a19a:	2300      	movs	r3, #0
}
 801a19c:	4618      	mov	r0, r3
 801a19e:	3714      	adds	r7, #20
 801a1a0:	46bd      	mov	sp, r7
 801a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1a6:	4770      	bx	lr
 801a1a8:	fffee0c0 	.word	0xfffee0c0

0801a1ac <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801a1ac:	b480      	push	{r7}
 801a1ae:	b083      	sub	sp, #12
 801a1b0:	af00      	add	r7, sp, #0
 801a1b2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	691b      	ldr	r3, [r3, #16]
 801a1b8:	b2db      	uxtb	r3, r3
}
 801a1ba:	4618      	mov	r0, r3
 801a1bc:	370c      	adds	r7, #12
 801a1be:	46bd      	mov	sp, r7
 801a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1c4:	4770      	bx	lr

0801a1c6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801a1c6:	b480      	push	{r7}
 801a1c8:	b085      	sub	sp, #20
 801a1ca:	af00      	add	r7, sp, #0
 801a1cc:	6078      	str	r0, [r7, #4]
 801a1ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	3314      	adds	r3, #20
 801a1d4:	461a      	mov	r2, r3
 801a1d6:	683b      	ldr	r3, [r7, #0]
 801a1d8:	4413      	add	r3, r2
 801a1da:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801a1dc:	68fb      	ldr	r3, [r7, #12]
 801a1de:	681b      	ldr	r3, [r3, #0]
}
 801a1e0:	4618      	mov	r0, r3
 801a1e2:	3714      	adds	r7, #20
 801a1e4:	46bd      	mov	sp, r7
 801a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ea:	4770      	bx	lr

0801a1ec <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 801a1ec:	b480      	push	{r7}
 801a1ee:	b085      	sub	sp, #20
 801a1f0:	af00      	add	r7, sp, #0
 801a1f2:	6078      	str	r0, [r7, #4]
 801a1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801a1f6:	2300      	movs	r3, #0
 801a1f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801a1fa:	683b      	ldr	r3, [r7, #0]
 801a1fc:	681a      	ldr	r2, [r3, #0]
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801a202:	683b      	ldr	r3, [r7, #0]
 801a204:	685a      	ldr	r2, [r3, #4]
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801a20a:	683b      	ldr	r3, [r7, #0]
 801a20c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801a20e:	683b      	ldr	r3, [r7, #0]
 801a210:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801a212:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 801a214:	683b      	ldr	r3, [r7, #0]
 801a216:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 801a218:	431a      	orrs	r2, r3
                       Data->DPSM);
 801a21a:	683b      	ldr	r3, [r7, #0]
 801a21c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801a21e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801a220:	68fa      	ldr	r2, [r7, #12]
 801a222:	4313      	orrs	r3, r2
 801a224:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a22a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801a22e:	68fb      	ldr	r3, [r7, #12]
 801a230:	431a      	orrs	r2, r3
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 801a236:	2300      	movs	r3, #0

}
 801a238:	4618      	mov	r0, r3
 801a23a:	3714      	adds	r7, #20
 801a23c:	46bd      	mov	sp, r7
 801a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a242:	4770      	bx	lr

0801a244 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801a244:	b580      	push	{r7, lr}
 801a246:	b088      	sub	sp, #32
 801a248:	af00      	add	r7, sp, #0
 801a24a:	6078      	str	r0, [r7, #4]
 801a24c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801a24e:	683b      	ldr	r3, [r7, #0]
 801a250:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801a252:	2310      	movs	r3, #16
 801a254:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a256:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a25a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a25c:	2300      	movs	r3, #0
 801a25e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a260:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a264:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a266:	f107 0308 	add.w	r3, r7, #8
 801a26a:	4619      	mov	r1, r3
 801a26c:	6878      	ldr	r0, [r7, #4]
 801a26e:	f7ff ff73 	bl	801a158 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801a272:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a276:	2110      	movs	r1, #16
 801a278:	6878      	ldr	r0, [r7, #4]
 801a27a:	f000 fa5f 	bl	801a73c <SDMMC_GetCmdResp1>
 801a27e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a280:	69fb      	ldr	r3, [r7, #28]
}
 801a282:	4618      	mov	r0, r3
 801a284:	3720      	adds	r7, #32
 801a286:	46bd      	mov	sp, r7
 801a288:	bd80      	pop	{r7, pc}

0801a28a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801a28a:	b580      	push	{r7, lr}
 801a28c:	b088      	sub	sp, #32
 801a28e:	af00      	add	r7, sp, #0
 801a290:	6078      	str	r0, [r7, #4]
 801a292:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801a294:	683b      	ldr	r3, [r7, #0]
 801a296:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801a298:	2311      	movs	r3, #17
 801a29a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a29c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a2a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a2a2:	2300      	movs	r3, #0
 801a2a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a2a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a2aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a2ac:	f107 0308 	add.w	r3, r7, #8
 801a2b0:	4619      	mov	r1, r3
 801a2b2:	6878      	ldr	r0, [r7, #4]
 801a2b4:	f7ff ff50 	bl	801a158 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801a2b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a2bc:	2111      	movs	r1, #17
 801a2be:	6878      	ldr	r0, [r7, #4]
 801a2c0:	f000 fa3c 	bl	801a73c <SDMMC_GetCmdResp1>
 801a2c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a2c6:	69fb      	ldr	r3, [r7, #28]
}
 801a2c8:	4618      	mov	r0, r3
 801a2ca:	3720      	adds	r7, #32
 801a2cc:	46bd      	mov	sp, r7
 801a2ce:	bd80      	pop	{r7, pc}

0801a2d0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801a2d0:	b580      	push	{r7, lr}
 801a2d2:	b088      	sub	sp, #32
 801a2d4:	af00      	add	r7, sp, #0
 801a2d6:	6078      	str	r0, [r7, #4]
 801a2d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801a2da:	683b      	ldr	r3, [r7, #0]
 801a2dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801a2de:	2312      	movs	r3, #18
 801a2e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a2e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a2e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a2e8:	2300      	movs	r3, #0
 801a2ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a2ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a2f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a2f2:	f107 0308 	add.w	r3, r7, #8
 801a2f6:	4619      	mov	r1, r3
 801a2f8:	6878      	ldr	r0, [r7, #4]
 801a2fa:	f7ff ff2d 	bl	801a158 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801a2fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a302:	2112      	movs	r1, #18
 801a304:	6878      	ldr	r0, [r7, #4]
 801a306:	f000 fa19 	bl	801a73c <SDMMC_GetCmdResp1>
 801a30a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a30c:	69fb      	ldr	r3, [r7, #28]
}
 801a30e:	4618      	mov	r0, r3
 801a310:	3720      	adds	r7, #32
 801a312:	46bd      	mov	sp, r7
 801a314:	bd80      	pop	{r7, pc}

0801a316 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801a316:	b580      	push	{r7, lr}
 801a318:	b088      	sub	sp, #32
 801a31a:	af00      	add	r7, sp, #0
 801a31c:	6078      	str	r0, [r7, #4]
 801a31e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801a320:	683b      	ldr	r3, [r7, #0]
 801a322:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801a324:	2318      	movs	r3, #24
 801a326:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a328:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a32c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a32e:	2300      	movs	r3, #0
 801a330:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a332:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a336:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a338:	f107 0308 	add.w	r3, r7, #8
 801a33c:	4619      	mov	r1, r3
 801a33e:	6878      	ldr	r0, [r7, #4]
 801a340:	f7ff ff0a 	bl	801a158 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801a344:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a348:	2118      	movs	r1, #24
 801a34a:	6878      	ldr	r0, [r7, #4]
 801a34c:	f000 f9f6 	bl	801a73c <SDMMC_GetCmdResp1>
 801a350:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a352:	69fb      	ldr	r3, [r7, #28]
}
 801a354:	4618      	mov	r0, r3
 801a356:	3720      	adds	r7, #32
 801a358:	46bd      	mov	sp, r7
 801a35a:	bd80      	pop	{r7, pc}

0801a35c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801a35c:	b580      	push	{r7, lr}
 801a35e:	b088      	sub	sp, #32
 801a360:	af00      	add	r7, sp, #0
 801a362:	6078      	str	r0, [r7, #4]
 801a364:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801a366:	683b      	ldr	r3, [r7, #0]
 801a368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801a36a:	2319      	movs	r3, #25
 801a36c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a36e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a372:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a374:	2300      	movs	r3, #0
 801a376:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a378:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a37c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a37e:	f107 0308 	add.w	r3, r7, #8
 801a382:	4619      	mov	r1, r3
 801a384:	6878      	ldr	r0, [r7, #4]
 801a386:	f7ff fee7 	bl	801a158 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801a38a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a38e:	2119      	movs	r1, #25
 801a390:	6878      	ldr	r0, [r7, #4]
 801a392:	f000 f9d3 	bl	801a73c <SDMMC_GetCmdResp1>
 801a396:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a398:	69fb      	ldr	r3, [r7, #28]
}
 801a39a:	4618      	mov	r0, r3
 801a39c:	3720      	adds	r7, #32
 801a39e:	46bd      	mov	sp, r7
 801a3a0:	bd80      	pop	{r7, pc}
	...

0801a3a4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801a3a4:	b580      	push	{r7, lr}
 801a3a6:	b088      	sub	sp, #32
 801a3a8:	af00      	add	r7, sp, #0
 801a3aa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801a3ac:	2300      	movs	r3, #0
 801a3ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801a3b0:	230c      	movs	r3, #12
 801a3b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a3b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a3b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a3ba:	2300      	movs	r3, #0
 801a3bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a3be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a3c2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	68db      	ldr	r3, [r3, #12]
 801a3c8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	68db      	ldr	r3, [r3, #12]
 801a3d4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a3dc:	f107 0308 	add.w	r3, r7, #8
 801a3e0:	4619      	mov	r1, r3
 801a3e2:	6878      	ldr	r0, [r7, #4]
 801a3e4:	f7ff feb8 	bl	801a158 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801a3e8:	4a0b      	ldr	r2, [pc, #44]	@ (801a418 <SDMMC_CmdStopTransfer+0x74>)
 801a3ea:	210c      	movs	r1, #12
 801a3ec:	6878      	ldr	r0, [r7, #4]
 801a3ee:	f000 f9a5 	bl	801a73c <SDMMC_GetCmdResp1>
 801a3f2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	68db      	ldr	r3, [r3, #12]
 801a3f8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801a400:	69fb      	ldr	r3, [r7, #28]
 801a402:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801a406:	d101      	bne.n	801a40c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 801a408:	2300      	movs	r3, #0
 801a40a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 801a40c:	69fb      	ldr	r3, [r7, #28]
}
 801a40e:	4618      	mov	r0, r3
 801a410:	3720      	adds	r7, #32
 801a412:	46bd      	mov	sp, r7
 801a414:	bd80      	pop	{r7, pc}
 801a416:	bf00      	nop
 801a418:	05f5e100 	.word	0x05f5e100

0801a41c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 801a41c:	b580      	push	{r7, lr}
 801a41e:	b088      	sub	sp, #32
 801a420:	af00      	add	r7, sp, #0
 801a422:	6078      	str	r0, [r7, #4]
 801a424:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801a426:	683b      	ldr	r3, [r7, #0]
 801a428:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801a42a:	2307      	movs	r3, #7
 801a42c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a42e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a432:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a434:	2300      	movs	r3, #0
 801a436:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a438:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a43c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a43e:	f107 0308 	add.w	r3, r7, #8
 801a442:	4619      	mov	r1, r3
 801a444:	6878      	ldr	r0, [r7, #4]
 801a446:	f7ff fe87 	bl	801a158 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801a44a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a44e:	2107      	movs	r1, #7
 801a450:	6878      	ldr	r0, [r7, #4]
 801a452:	f000 f973 	bl	801a73c <SDMMC_GetCmdResp1>
 801a456:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a458:	69fb      	ldr	r3, [r7, #28]
}
 801a45a:	4618      	mov	r0, r3
 801a45c:	3720      	adds	r7, #32
 801a45e:	46bd      	mov	sp, r7
 801a460:	bd80      	pop	{r7, pc}

0801a462 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801a462:	b580      	push	{r7, lr}
 801a464:	b088      	sub	sp, #32
 801a466:	af00      	add	r7, sp, #0
 801a468:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801a46a:	2300      	movs	r3, #0
 801a46c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801a46e:	2300      	movs	r3, #0
 801a470:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801a472:	2300      	movs	r3, #0
 801a474:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a476:	2300      	movs	r3, #0
 801a478:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a47a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a47e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a480:	f107 0308 	add.w	r3, r7, #8
 801a484:	4619      	mov	r1, r3
 801a486:	6878      	ldr	r0, [r7, #4]
 801a488:	f7ff fe66 	bl	801a158 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801a48c:	6878      	ldr	r0, [r7, #4]
 801a48e:	f000 fb97 	bl	801abc0 <SDMMC_GetCmdError>
 801a492:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a494:	69fb      	ldr	r3, [r7, #28]
}
 801a496:	4618      	mov	r0, r3
 801a498:	3720      	adds	r7, #32
 801a49a:	46bd      	mov	sp, r7
 801a49c:	bd80      	pop	{r7, pc}

0801a49e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801a49e:	b580      	push	{r7, lr}
 801a4a0:	b088      	sub	sp, #32
 801a4a2:	af00      	add	r7, sp, #0
 801a4a4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801a4a6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 801a4aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801a4ac:	2308      	movs	r3, #8
 801a4ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a4b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a4b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a4b6:	2300      	movs	r3, #0
 801a4b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a4ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a4be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a4c0:	f107 0308 	add.w	r3, r7, #8
 801a4c4:	4619      	mov	r1, r3
 801a4c6:	6878      	ldr	r0, [r7, #4]
 801a4c8:	f7ff fe46 	bl	801a158 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801a4cc:	6878      	ldr	r0, [r7, #4]
 801a4ce:	f000 fb29 	bl	801ab24 <SDMMC_GetCmdResp7>
 801a4d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a4d4:	69fb      	ldr	r3, [r7, #28]
}
 801a4d6:	4618      	mov	r0, r3
 801a4d8:	3720      	adds	r7, #32
 801a4da:	46bd      	mov	sp, r7
 801a4dc:	bd80      	pop	{r7, pc}

0801a4de <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801a4de:	b580      	push	{r7, lr}
 801a4e0:	b088      	sub	sp, #32
 801a4e2:	af00      	add	r7, sp, #0
 801a4e4:	6078      	str	r0, [r7, #4]
 801a4e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801a4e8:	683b      	ldr	r3, [r7, #0]
 801a4ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801a4ec:	2337      	movs	r3, #55	@ 0x37
 801a4ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a4f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a4f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a4f6:	2300      	movs	r3, #0
 801a4f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a4fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a4fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a500:	f107 0308 	add.w	r3, r7, #8
 801a504:	4619      	mov	r1, r3
 801a506:	6878      	ldr	r0, [r7, #4]
 801a508:	f7ff fe26 	bl	801a158 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801a50c:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a510:	2137      	movs	r1, #55	@ 0x37
 801a512:	6878      	ldr	r0, [r7, #4]
 801a514:	f000 f912 	bl	801a73c <SDMMC_GetCmdResp1>
 801a518:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a51a:	69fb      	ldr	r3, [r7, #28]
}
 801a51c:	4618      	mov	r0, r3
 801a51e:	3720      	adds	r7, #32
 801a520:	46bd      	mov	sp, r7
 801a522:	bd80      	pop	{r7, pc}

0801a524 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801a524:	b580      	push	{r7, lr}
 801a526:	b088      	sub	sp, #32
 801a528:	af00      	add	r7, sp, #0
 801a52a:	6078      	str	r0, [r7, #4]
 801a52c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801a52e:	683b      	ldr	r3, [r7, #0]
 801a530:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801a532:	2329      	movs	r3, #41	@ 0x29
 801a534:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a536:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a53a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a53c:	2300      	movs	r3, #0
 801a53e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a544:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a546:	f107 0308 	add.w	r3, r7, #8
 801a54a:	4619      	mov	r1, r3
 801a54c:	6878      	ldr	r0, [r7, #4]
 801a54e:	f7ff fe03 	bl	801a158 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801a552:	6878      	ldr	r0, [r7, #4]
 801a554:	f000 fa2e 	bl	801a9b4 <SDMMC_GetCmdResp3>
 801a558:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a55a:	69fb      	ldr	r3, [r7, #28]
}
 801a55c:	4618      	mov	r0, r3
 801a55e:	3720      	adds	r7, #32
 801a560:	46bd      	mov	sp, r7
 801a562:	bd80      	pop	{r7, pc}

0801a564 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801a564:	b580      	push	{r7, lr}
 801a566:	b088      	sub	sp, #32
 801a568:	af00      	add	r7, sp, #0
 801a56a:	6078      	str	r0, [r7, #4]
 801a56c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801a56e:	683b      	ldr	r3, [r7, #0]
 801a570:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801a572:	2306      	movs	r3, #6
 801a574:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a576:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a57a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a57c:	2300      	movs	r3, #0
 801a57e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a580:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a584:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a586:	f107 0308 	add.w	r3, r7, #8
 801a58a:	4619      	mov	r1, r3
 801a58c:	6878      	ldr	r0, [r7, #4]
 801a58e:	f7ff fde3 	bl	801a158 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801a592:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a596:	2106      	movs	r1, #6
 801a598:	6878      	ldr	r0, [r7, #4]
 801a59a:	f000 f8cf 	bl	801a73c <SDMMC_GetCmdResp1>
 801a59e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a5a0:	69fb      	ldr	r3, [r7, #28]
}
 801a5a2:	4618      	mov	r0, r3
 801a5a4:	3720      	adds	r7, #32
 801a5a6:	46bd      	mov	sp, r7
 801a5a8:	bd80      	pop	{r7, pc}

0801a5aa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801a5aa:	b580      	push	{r7, lr}
 801a5ac:	b088      	sub	sp, #32
 801a5ae:	af00      	add	r7, sp, #0
 801a5b0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801a5b2:	2300      	movs	r3, #0
 801a5b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801a5b6:	2333      	movs	r3, #51	@ 0x33
 801a5b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a5ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a5be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a5c0:	2300      	movs	r3, #0
 801a5c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a5c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a5c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a5ca:	f107 0308 	add.w	r3, r7, #8
 801a5ce:	4619      	mov	r1, r3
 801a5d0:	6878      	ldr	r0, [r7, #4]
 801a5d2:	f7ff fdc1 	bl	801a158 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801a5d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a5da:	2133      	movs	r1, #51	@ 0x33
 801a5dc:	6878      	ldr	r0, [r7, #4]
 801a5de:	f000 f8ad 	bl	801a73c <SDMMC_GetCmdResp1>
 801a5e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a5e4:	69fb      	ldr	r3, [r7, #28]
}
 801a5e6:	4618      	mov	r0, r3
 801a5e8:	3720      	adds	r7, #32
 801a5ea:	46bd      	mov	sp, r7
 801a5ec:	bd80      	pop	{r7, pc}

0801a5ee <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801a5ee:	b580      	push	{r7, lr}
 801a5f0:	b088      	sub	sp, #32
 801a5f2:	af00      	add	r7, sp, #0
 801a5f4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801a5f6:	2300      	movs	r3, #0
 801a5f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801a5fa:	2302      	movs	r3, #2
 801a5fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801a5fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801a602:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a604:	2300      	movs	r3, #0
 801a606:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a60c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a60e:	f107 0308 	add.w	r3, r7, #8
 801a612:	4619      	mov	r1, r3
 801a614:	6878      	ldr	r0, [r7, #4]
 801a616:	f7ff fd9f 	bl	801a158 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801a61a:	6878      	ldr	r0, [r7, #4]
 801a61c:	f000 f980 	bl	801a920 <SDMMC_GetCmdResp2>
 801a620:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a622:	69fb      	ldr	r3, [r7, #28]
}
 801a624:	4618      	mov	r0, r3
 801a626:	3720      	adds	r7, #32
 801a628:	46bd      	mov	sp, r7
 801a62a:	bd80      	pop	{r7, pc}

0801a62c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801a62c:	b580      	push	{r7, lr}
 801a62e:	b088      	sub	sp, #32
 801a630:	af00      	add	r7, sp, #0
 801a632:	6078      	str	r0, [r7, #4]
 801a634:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801a636:	683b      	ldr	r3, [r7, #0]
 801a638:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801a63a:	2309      	movs	r3, #9
 801a63c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801a63e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801a642:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a644:	2300      	movs	r3, #0
 801a646:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a648:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a64c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a64e:	f107 0308 	add.w	r3, r7, #8
 801a652:	4619      	mov	r1, r3
 801a654:	6878      	ldr	r0, [r7, #4]
 801a656:	f7ff fd7f 	bl	801a158 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801a65a:	6878      	ldr	r0, [r7, #4]
 801a65c:	f000 f960 	bl	801a920 <SDMMC_GetCmdResp2>
 801a660:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a662:	69fb      	ldr	r3, [r7, #28]
}
 801a664:	4618      	mov	r0, r3
 801a666:	3720      	adds	r7, #32
 801a668:	46bd      	mov	sp, r7
 801a66a:	bd80      	pop	{r7, pc}

0801a66c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801a66c:	b580      	push	{r7, lr}
 801a66e:	b088      	sub	sp, #32
 801a670:	af00      	add	r7, sp, #0
 801a672:	6078      	str	r0, [r7, #4]
 801a674:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801a676:	2300      	movs	r3, #0
 801a678:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801a67a:	2303      	movs	r3, #3
 801a67c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a67e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a682:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a684:	2300      	movs	r3, #0
 801a686:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a688:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a68c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a68e:	f107 0308 	add.w	r3, r7, #8
 801a692:	4619      	mov	r1, r3
 801a694:	6878      	ldr	r0, [r7, #4]
 801a696:	f7ff fd5f 	bl	801a158 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801a69a:	683a      	ldr	r2, [r7, #0]
 801a69c:	2103      	movs	r1, #3
 801a69e:	6878      	ldr	r0, [r7, #4]
 801a6a0:	f000 f9c8 	bl	801aa34 <SDMMC_GetCmdResp6>
 801a6a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a6a6:	69fb      	ldr	r3, [r7, #28]
}
 801a6a8:	4618      	mov	r0, r3
 801a6aa:	3720      	adds	r7, #32
 801a6ac:	46bd      	mov	sp, r7
 801a6ae:	bd80      	pop	{r7, pc}

0801a6b0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801a6b0:	b580      	push	{r7, lr}
 801a6b2:	b088      	sub	sp, #32
 801a6b4:	af00      	add	r7, sp, #0
 801a6b6:	6078      	str	r0, [r7, #4]
 801a6b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801a6ba:	683b      	ldr	r3, [r7, #0]
 801a6bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801a6be:	230d      	movs	r3, #13
 801a6c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a6c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a6c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a6c8:	2300      	movs	r3, #0
 801a6ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a6cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a6d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a6d2:	f107 0308 	add.w	r3, r7, #8
 801a6d6:	4619      	mov	r1, r3
 801a6d8:	6878      	ldr	r0, [r7, #4]
 801a6da:	f7ff fd3d 	bl	801a158 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801a6de:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a6e2:	210d      	movs	r1, #13
 801a6e4:	6878      	ldr	r0, [r7, #4]
 801a6e6:	f000 f829 	bl	801a73c <SDMMC_GetCmdResp1>
 801a6ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a6ec:	69fb      	ldr	r3, [r7, #28]
}
 801a6ee:	4618      	mov	r0, r3
 801a6f0:	3720      	adds	r7, #32
 801a6f2:	46bd      	mov	sp, r7
 801a6f4:	bd80      	pop	{r7, pc}

0801a6f6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801a6f6:	b580      	push	{r7, lr}
 801a6f8:	b088      	sub	sp, #32
 801a6fa:	af00      	add	r7, sp, #0
 801a6fc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801a6fe:	2300      	movs	r3, #0
 801a700:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801a702:	230d      	movs	r3, #13
 801a704:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a706:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a70a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a70c:	2300      	movs	r3, #0
 801a70e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a714:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a716:	f107 0308 	add.w	r3, r7, #8
 801a71a:	4619      	mov	r1, r3
 801a71c:	6878      	ldr	r0, [r7, #4]
 801a71e:	f7ff fd1b 	bl	801a158 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801a722:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a726:	210d      	movs	r1, #13
 801a728:	6878      	ldr	r0, [r7, #4]
 801a72a:	f000 f807 	bl	801a73c <SDMMC_GetCmdResp1>
 801a72e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a730:	69fb      	ldr	r3, [r7, #28]
}
 801a732:	4618      	mov	r0, r3
 801a734:	3720      	adds	r7, #32
 801a736:	46bd      	mov	sp, r7
 801a738:	bd80      	pop	{r7, pc}
	...

0801a73c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801a73c:	b580      	push	{r7, lr}
 801a73e:	b088      	sub	sp, #32
 801a740:	af00      	add	r7, sp, #0
 801a742:	60f8      	str	r0, [r7, #12]
 801a744:	460b      	mov	r3, r1
 801a746:	607a      	str	r2, [r7, #4]
 801a748:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801a74a:	4b70      	ldr	r3, [pc, #448]	@ (801a90c <SDMMC_GetCmdResp1+0x1d0>)
 801a74c:	681b      	ldr	r3, [r3, #0]
 801a74e:	4a70      	ldr	r2, [pc, #448]	@ (801a910 <SDMMC_GetCmdResp1+0x1d4>)
 801a750:	fba2 2303 	umull	r2, r3, r2, r3
 801a754:	0a5a      	lsrs	r2, r3, #9
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	fb02 f303 	mul.w	r3, r2, r3
 801a75c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801a75e:	69fb      	ldr	r3, [r7, #28]
 801a760:	1e5a      	subs	r2, r3, #1
 801a762:	61fa      	str	r2, [r7, #28]
 801a764:	2b00      	cmp	r3, #0
 801a766:	d102      	bne.n	801a76e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801a768:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801a76c:	e0c9      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801a76e:	68fb      	ldr	r3, [r7, #12]
 801a770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a772:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801a774:	69ba      	ldr	r2, [r7, #24]
 801a776:	4b67      	ldr	r3, [pc, #412]	@ (801a914 <SDMMC_GetCmdResp1+0x1d8>)
 801a778:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d0ef      	beq.n	801a75e <SDMMC_GetCmdResp1+0x22>
 801a77e:	69bb      	ldr	r3, [r7, #24]
 801a780:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801a784:	2b00      	cmp	r3, #0
 801a786:	d1ea      	bne.n	801a75e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a78c:	f003 0304 	and.w	r3, r3, #4
 801a790:	2b00      	cmp	r3, #0
 801a792:	d004      	beq.n	801a79e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801a794:	68fb      	ldr	r3, [r7, #12]
 801a796:	2204      	movs	r2, #4
 801a798:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801a79a:	2304      	movs	r3, #4
 801a79c:	e0b1      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a7a2:	f003 0301 	and.w	r3, r3, #1
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d004      	beq.n	801a7b4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801a7aa:	68fb      	ldr	r3, [r7, #12]
 801a7ac:	2201      	movs	r2, #1
 801a7ae:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801a7b0:	2301      	movs	r3, #1
 801a7b2:	e0a6      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801a7b4:	68fb      	ldr	r3, [r7, #12]
 801a7b6:	4a58      	ldr	r2, [pc, #352]	@ (801a918 <SDMMC_GetCmdResp1+0x1dc>)
 801a7b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801a7ba:	68f8      	ldr	r0, [r7, #12]
 801a7bc:	f7ff fcf6 	bl	801a1ac <SDMMC_GetCommandResponse>
 801a7c0:	4603      	mov	r3, r0
 801a7c2:	461a      	mov	r2, r3
 801a7c4:	7afb      	ldrb	r3, [r7, #11]
 801a7c6:	4293      	cmp	r3, r2
 801a7c8:	d001      	beq.n	801a7ce <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801a7ca:	2301      	movs	r3, #1
 801a7cc:	e099      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801a7ce:	2100      	movs	r1, #0
 801a7d0:	68f8      	ldr	r0, [r7, #12]
 801a7d2:	f7ff fcf8 	bl	801a1c6 <SDMMC_GetResponse>
 801a7d6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801a7d8:	697a      	ldr	r2, [r7, #20]
 801a7da:	4b50      	ldr	r3, [pc, #320]	@ (801a91c <SDMMC_GetCmdResp1+0x1e0>)
 801a7dc:	4013      	ands	r3, r2
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	d101      	bne.n	801a7e6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801a7e2:	2300      	movs	r3, #0
 801a7e4:	e08d      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801a7e6:	697b      	ldr	r3, [r7, #20]
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	da02      	bge.n	801a7f2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801a7ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801a7f0:	e087      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801a7f2:	697b      	ldr	r3, [r7, #20]
 801a7f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d001      	beq.n	801a800 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801a7fc:	2340      	movs	r3, #64	@ 0x40
 801a7fe:	e080      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801a800:	697b      	ldr	r3, [r7, #20]
 801a802:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801a806:	2b00      	cmp	r3, #0
 801a808:	d001      	beq.n	801a80e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801a80a:	2380      	movs	r3, #128	@ 0x80
 801a80c:	e079      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801a80e:	697b      	ldr	r3, [r7, #20]
 801a810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801a814:	2b00      	cmp	r3, #0
 801a816:	d002      	beq.n	801a81e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801a818:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a81c:	e071      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801a81e:	697b      	ldr	r3, [r7, #20]
 801a820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801a824:	2b00      	cmp	r3, #0
 801a826:	d002      	beq.n	801a82e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801a828:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801a82c:	e069      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801a82e:	697b      	ldr	r3, [r7, #20]
 801a830:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801a834:	2b00      	cmp	r3, #0
 801a836:	d002      	beq.n	801a83e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801a838:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a83c:	e061      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801a83e:	697b      	ldr	r3, [r7, #20]
 801a840:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801a844:	2b00      	cmp	r3, #0
 801a846:	d002      	beq.n	801a84e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801a848:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a84c:	e059      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801a84e:	697b      	ldr	r3, [r7, #20]
 801a850:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a854:	2b00      	cmp	r3, #0
 801a856:	d002      	beq.n	801a85e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801a858:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a85c:	e051      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801a85e:	697b      	ldr	r3, [r7, #20]
 801a860:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801a864:	2b00      	cmp	r3, #0
 801a866:	d002      	beq.n	801a86e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801a868:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801a86c:	e049      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801a86e:	697b      	ldr	r3, [r7, #20]
 801a870:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801a874:	2b00      	cmp	r3, #0
 801a876:	d002      	beq.n	801a87e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801a878:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801a87c:	e041      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801a87e:	697b      	ldr	r3, [r7, #20]
 801a880:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801a884:	2b00      	cmp	r3, #0
 801a886:	d002      	beq.n	801a88e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801a888:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a88c:	e039      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801a88e:	697b      	ldr	r3, [r7, #20]
 801a890:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801a894:	2b00      	cmp	r3, #0
 801a896:	d002      	beq.n	801a89e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801a898:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801a89c:	e031      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801a89e:	697b      	ldr	r3, [r7, #20]
 801a8a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d002      	beq.n	801a8ae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801a8a8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 801a8ac:	e029      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801a8ae:	697b      	ldr	r3, [r7, #20]
 801a8b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	d002      	beq.n	801a8be <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801a8b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801a8bc:	e021      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801a8be:	697b      	ldr	r3, [r7, #20]
 801a8c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d002      	beq.n	801a8ce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801a8c8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801a8cc:	e019      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801a8ce:	697b      	ldr	r3, [r7, #20]
 801a8d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d002      	beq.n	801a8de <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801a8d8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801a8dc:	e011      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801a8de:	697b      	ldr	r3, [r7, #20]
 801a8e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801a8e4:	2b00      	cmp	r3, #0
 801a8e6:	d002      	beq.n	801a8ee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801a8e8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801a8ec:	e009      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801a8ee:	697b      	ldr	r3, [r7, #20]
 801a8f0:	f003 0308 	and.w	r3, r3, #8
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	d002      	beq.n	801a8fe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801a8f8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 801a8fc:	e001      	b.n	801a902 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801a8fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801a902:	4618      	mov	r0, r3
 801a904:	3720      	adds	r7, #32
 801a906:	46bd      	mov	sp, r7
 801a908:	bd80      	pop	{r7, pc}
 801a90a:	bf00      	nop
 801a90c:	2400001c 	.word	0x2400001c
 801a910:	10624dd3 	.word	0x10624dd3
 801a914:	00200045 	.word	0x00200045
 801a918:	002000c5 	.word	0x002000c5
 801a91c:	fdffe008 	.word	0xfdffe008

0801a920 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 801a920:	b480      	push	{r7}
 801a922:	b085      	sub	sp, #20
 801a924:	af00      	add	r7, sp, #0
 801a926:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801a928:	4b1f      	ldr	r3, [pc, #124]	@ (801a9a8 <SDMMC_GetCmdResp2+0x88>)
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	4a1f      	ldr	r2, [pc, #124]	@ (801a9ac <SDMMC_GetCmdResp2+0x8c>)
 801a92e:	fba2 2303 	umull	r2, r3, r2, r3
 801a932:	0a5b      	lsrs	r3, r3, #9
 801a934:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a938:	fb02 f303 	mul.w	r3, r2, r3
 801a93c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	1e5a      	subs	r2, r3, #1
 801a942:	60fa      	str	r2, [r7, #12]
 801a944:	2b00      	cmp	r3, #0
 801a946:	d102      	bne.n	801a94e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801a948:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801a94c:	e026      	b.n	801a99c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a952:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801a954:	68bb      	ldr	r3, [r7, #8]
 801a956:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d0ef      	beq.n	801a93e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801a95e:	68bb      	ldr	r3, [r7, #8]
 801a960:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801a964:	2b00      	cmp	r3, #0
 801a966:	d1ea      	bne.n	801a93e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a96c:	f003 0304 	and.w	r3, r3, #4
 801a970:	2b00      	cmp	r3, #0
 801a972:	d004      	beq.n	801a97e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	2204      	movs	r2, #4
 801a978:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801a97a:	2304      	movs	r3, #4
 801a97c:	e00e      	b.n	801a99c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a982:	f003 0301 	and.w	r3, r3, #1
 801a986:	2b00      	cmp	r3, #0
 801a988:	d004      	beq.n	801a994 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	2201      	movs	r2, #1
 801a98e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801a990:	2301      	movs	r3, #1
 801a992:	e003      	b.n	801a99c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	4a06      	ldr	r2, [pc, #24]	@ (801a9b0 <SDMMC_GetCmdResp2+0x90>)
 801a998:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801a99a:	2300      	movs	r3, #0
}
 801a99c:	4618      	mov	r0, r3
 801a99e:	3714      	adds	r7, #20
 801a9a0:	46bd      	mov	sp, r7
 801a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9a6:	4770      	bx	lr
 801a9a8:	2400001c 	.word	0x2400001c
 801a9ac:	10624dd3 	.word	0x10624dd3
 801a9b0:	002000c5 	.word	0x002000c5

0801a9b4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801a9b4:	b480      	push	{r7}
 801a9b6:	b085      	sub	sp, #20
 801a9b8:	af00      	add	r7, sp, #0
 801a9ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801a9bc:	4b1a      	ldr	r3, [pc, #104]	@ (801aa28 <SDMMC_GetCmdResp3+0x74>)
 801a9be:	681b      	ldr	r3, [r3, #0]
 801a9c0:	4a1a      	ldr	r2, [pc, #104]	@ (801aa2c <SDMMC_GetCmdResp3+0x78>)
 801a9c2:	fba2 2303 	umull	r2, r3, r2, r3
 801a9c6:	0a5b      	lsrs	r3, r3, #9
 801a9c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a9cc:	fb02 f303 	mul.w	r3, r2, r3
 801a9d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801a9d2:	68fb      	ldr	r3, [r7, #12]
 801a9d4:	1e5a      	subs	r2, r3, #1
 801a9d6:	60fa      	str	r2, [r7, #12]
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	d102      	bne.n	801a9e2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801a9dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801a9e0:	e01b      	b.n	801aa1a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a9e6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801a9e8:	68bb      	ldr	r3, [r7, #8]
 801a9ea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d0ef      	beq.n	801a9d2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801a9f2:	68bb      	ldr	r3, [r7, #8]
 801a9f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	d1ea      	bne.n	801a9d2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aa00:	f003 0304 	and.w	r3, r3, #4
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d004      	beq.n	801aa12 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	2204      	movs	r2, #4
 801aa0c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801aa0e:	2304      	movs	r3, #4
 801aa10:	e003      	b.n	801aa1a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	4a06      	ldr	r2, [pc, #24]	@ (801aa30 <SDMMC_GetCmdResp3+0x7c>)
 801aa16:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801aa18:	2300      	movs	r3, #0
}
 801aa1a:	4618      	mov	r0, r3
 801aa1c:	3714      	adds	r7, #20
 801aa1e:	46bd      	mov	sp, r7
 801aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa24:	4770      	bx	lr
 801aa26:	bf00      	nop
 801aa28:	2400001c 	.word	0x2400001c
 801aa2c:	10624dd3 	.word	0x10624dd3
 801aa30:	002000c5 	.word	0x002000c5

0801aa34 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801aa34:	b580      	push	{r7, lr}
 801aa36:	b088      	sub	sp, #32
 801aa38:	af00      	add	r7, sp, #0
 801aa3a:	60f8      	str	r0, [r7, #12]
 801aa3c:	460b      	mov	r3, r1
 801aa3e:	607a      	str	r2, [r7, #4]
 801aa40:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801aa42:	4b35      	ldr	r3, [pc, #212]	@ (801ab18 <SDMMC_GetCmdResp6+0xe4>)
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	4a35      	ldr	r2, [pc, #212]	@ (801ab1c <SDMMC_GetCmdResp6+0xe8>)
 801aa48:	fba2 2303 	umull	r2, r3, r2, r3
 801aa4c:	0a5b      	lsrs	r3, r3, #9
 801aa4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 801aa52:	fb02 f303 	mul.w	r3, r2, r3
 801aa56:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801aa58:	69fb      	ldr	r3, [r7, #28]
 801aa5a:	1e5a      	subs	r2, r3, #1
 801aa5c:	61fa      	str	r2, [r7, #28]
 801aa5e:	2b00      	cmp	r3, #0
 801aa60:	d102      	bne.n	801aa68 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801aa62:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801aa66:	e052      	b.n	801ab0e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 801aa68:	68fb      	ldr	r3, [r7, #12]
 801aa6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aa6c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801aa6e:	69bb      	ldr	r3, [r7, #24]
 801aa70:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	d0ef      	beq.n	801aa58 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801aa78:	69bb      	ldr	r3, [r7, #24]
 801aa7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	d1ea      	bne.n	801aa58 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801aa82:	68fb      	ldr	r3, [r7, #12]
 801aa84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aa86:	f003 0304 	and.w	r3, r3, #4
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	d004      	beq.n	801aa98 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801aa8e:	68fb      	ldr	r3, [r7, #12]
 801aa90:	2204      	movs	r2, #4
 801aa92:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801aa94:	2304      	movs	r3, #4
 801aa96:	e03a      	b.n	801ab0e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801aa98:	68fb      	ldr	r3, [r7, #12]
 801aa9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aa9c:	f003 0301 	and.w	r3, r3, #1
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d004      	beq.n	801aaae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801aaa4:	68fb      	ldr	r3, [r7, #12]
 801aaa6:	2201      	movs	r2, #1
 801aaa8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801aaaa:	2301      	movs	r3, #1
 801aaac:	e02f      	b.n	801ab0e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801aaae:	68f8      	ldr	r0, [r7, #12]
 801aab0:	f7ff fb7c 	bl	801a1ac <SDMMC_GetCommandResponse>
 801aab4:	4603      	mov	r3, r0
 801aab6:	461a      	mov	r2, r3
 801aab8:	7afb      	ldrb	r3, [r7, #11]
 801aaba:	4293      	cmp	r3, r2
 801aabc:	d001      	beq.n	801aac2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801aabe:	2301      	movs	r3, #1
 801aac0:	e025      	b.n	801ab0e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	4a16      	ldr	r2, [pc, #88]	@ (801ab20 <SDMMC_GetCmdResp6+0xec>)
 801aac6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801aac8:	2100      	movs	r1, #0
 801aaca:	68f8      	ldr	r0, [r7, #12]
 801aacc:	f7ff fb7b 	bl	801a1c6 <SDMMC_GetResponse>
 801aad0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801aad2:	697b      	ldr	r3, [r7, #20]
 801aad4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 801aad8:	2b00      	cmp	r3, #0
 801aada:	d106      	bne.n	801aaea <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801aadc:	697b      	ldr	r3, [r7, #20]
 801aade:	0c1b      	lsrs	r3, r3, #16
 801aae0:	b29a      	uxth	r2, r3
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801aae6:	2300      	movs	r3, #0
 801aae8:	e011      	b.n	801ab0e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801aaea:	697b      	ldr	r3, [r7, #20]
 801aaec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d002      	beq.n	801aafa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801aaf4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801aaf8:	e009      	b.n	801ab0e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801aafa:	697b      	ldr	r3, [r7, #20]
 801aafc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	d002      	beq.n	801ab0a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801ab04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801ab08:	e001      	b.n	801ab0e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801ab0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801ab0e:	4618      	mov	r0, r3
 801ab10:	3720      	adds	r7, #32
 801ab12:	46bd      	mov	sp, r7
 801ab14:	bd80      	pop	{r7, pc}
 801ab16:	bf00      	nop
 801ab18:	2400001c 	.word	0x2400001c
 801ab1c:	10624dd3 	.word	0x10624dd3
 801ab20:	002000c5 	.word	0x002000c5

0801ab24 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 801ab24:	b480      	push	{r7}
 801ab26:	b085      	sub	sp, #20
 801ab28:	af00      	add	r7, sp, #0
 801ab2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801ab2c:	4b22      	ldr	r3, [pc, #136]	@ (801abb8 <SDMMC_GetCmdResp7+0x94>)
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	4a22      	ldr	r2, [pc, #136]	@ (801abbc <SDMMC_GetCmdResp7+0x98>)
 801ab32:	fba2 2303 	umull	r2, r3, r2, r3
 801ab36:	0a5b      	lsrs	r3, r3, #9
 801ab38:	f241 3288 	movw	r2, #5000	@ 0x1388
 801ab3c:	fb02 f303 	mul.w	r3, r2, r3
 801ab40:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801ab42:	68fb      	ldr	r3, [r7, #12]
 801ab44:	1e5a      	subs	r2, r3, #1
 801ab46:	60fa      	str	r2, [r7, #12]
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d102      	bne.n	801ab52 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801ab4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801ab50:	e02c      	b.n	801abac <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ab56:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801ab58:	68bb      	ldr	r3, [r7, #8]
 801ab5a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	d0ef      	beq.n	801ab42 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801ab62:	68bb      	ldr	r3, [r7, #8]
 801ab64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d1ea      	bne.n	801ab42 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ab70:	f003 0304 	and.w	r3, r3, #4
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	d004      	beq.n	801ab82 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	2204      	movs	r2, #4
 801ab7c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801ab7e:	2304      	movs	r3, #4
 801ab80:	e014      	b.n	801abac <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ab86:	f003 0301 	and.w	r3, r3, #1
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d004      	beq.n	801ab98 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	2201      	movs	r2, #1
 801ab92:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801ab94:	2301      	movs	r3, #1
 801ab96:	e009      	b.n	801abac <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ab9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d002      	beq.n	801abaa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	2240      	movs	r2, #64	@ 0x40
 801aba8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801abaa:	2300      	movs	r3, #0

}
 801abac:	4618      	mov	r0, r3
 801abae:	3714      	adds	r7, #20
 801abb0:	46bd      	mov	sp, r7
 801abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abb6:	4770      	bx	lr
 801abb8:	2400001c 	.word	0x2400001c
 801abbc:	10624dd3 	.word	0x10624dd3

0801abc0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801abc0:	b480      	push	{r7}
 801abc2:	b085      	sub	sp, #20
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801abc8:	4b11      	ldr	r3, [pc, #68]	@ (801ac10 <SDMMC_GetCmdError+0x50>)
 801abca:	681b      	ldr	r3, [r3, #0]
 801abcc:	4a11      	ldr	r2, [pc, #68]	@ (801ac14 <SDMMC_GetCmdError+0x54>)
 801abce:	fba2 2303 	umull	r2, r3, r2, r3
 801abd2:	0a5b      	lsrs	r3, r3, #9
 801abd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 801abd8:	fb02 f303 	mul.w	r3, r2, r3
 801abdc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801abde:	68fb      	ldr	r3, [r7, #12]
 801abe0:	1e5a      	subs	r2, r3, #1
 801abe2:	60fa      	str	r2, [r7, #12]
 801abe4:	2b00      	cmp	r3, #0
 801abe6:	d102      	bne.n	801abee <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801abe8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801abec:	e009      	b.n	801ac02 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801abf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d0f1      	beq.n	801abde <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	4a06      	ldr	r2, [pc, #24]	@ (801ac18 <SDMMC_GetCmdError+0x58>)
 801abfe:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 801ac00:	2300      	movs	r3, #0
}
 801ac02:	4618      	mov	r0, r3
 801ac04:	3714      	adds	r7, #20
 801ac06:	46bd      	mov	sp, r7
 801ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac0c:	4770      	bx	lr
 801ac0e:	bf00      	nop
 801ac10:	2400001c 	.word	0x2400001c
 801ac14:	10624dd3 	.word	0x10624dd3
 801ac18:	002000c5 	.word	0x002000c5

0801ac1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801ac1c:	b580      	push	{r7, lr}
 801ac1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801ac20:	4904      	ldr	r1, [pc, #16]	@ (801ac34 <MX_FATFS_Init+0x18>)
 801ac22:	4805      	ldr	r0, [pc, #20]	@ (801ac38 <MX_FATFS_Init+0x1c>)
 801ac24:	f002 fc08 	bl	801d438 <FATFS_LinkDriver>
 801ac28:	4603      	mov	r3, r0
 801ac2a:	461a      	mov	r2, r3
 801ac2c:	4b03      	ldr	r3, [pc, #12]	@ (801ac3c <MX_FATFS_Init+0x20>)
 801ac2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801ac30:	bf00      	nop
 801ac32:	bd80      	pop	{r7, pc}
 801ac34:	2400041c 	.word	0x2400041c
 801ac38:	0801f75c 	.word	0x0801f75c
 801ac3c:	24000418 	.word	0x24000418

0801ac40 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801ac40:	b480      	push	{r7}
 801ac42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801ac44:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801ac46:	4618      	mov	r0, r3
 801ac48:	46bd      	mov	sp, r7
 801ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac4e:	4770      	bx	lr

0801ac50 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801ac50:	b580      	push	{r7, lr}
 801ac52:	b086      	sub	sp, #24
 801ac54:	af00      	add	r7, sp, #0
 801ac56:	60f8      	str	r0, [r7, #12]
 801ac58:	60b9      	str	r1, [r7, #8]
 801ac5a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801ac5c:	2300      	movs	r3, #0
 801ac5e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	68ba      	ldr	r2, [r7, #8]
 801ac64:	68f9      	ldr	r1, [r7, #12]
 801ac66:	4806      	ldr	r0, [pc, #24]	@ (801ac80 <BSP_SD_ReadBlocks_DMA+0x30>)
 801ac68:	f7fc fc16 	bl	8017498 <HAL_SD_ReadBlocks_DMA>
 801ac6c:	4603      	mov	r3, r0
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	d001      	beq.n	801ac76 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801ac72:	2301      	movs	r3, #1
 801ac74:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801ac76:	7dfb      	ldrb	r3, [r7, #23]
}
 801ac78:	4618      	mov	r0, r3
 801ac7a:	3718      	adds	r7, #24
 801ac7c:	46bd      	mov	sp, r7
 801ac7e:	bd80      	pop	{r7, pc}
 801ac80:	240002f8 	.word	0x240002f8

0801ac84 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801ac84:	b580      	push	{r7, lr}
 801ac86:	b086      	sub	sp, #24
 801ac88:	af00      	add	r7, sp, #0
 801ac8a:	60f8      	str	r0, [r7, #12]
 801ac8c:	60b9      	str	r1, [r7, #8]
 801ac8e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801ac90:	2300      	movs	r3, #0
 801ac92:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	68ba      	ldr	r2, [r7, #8]
 801ac98:	68f9      	ldr	r1, [r7, #12]
 801ac9a:	4806      	ldr	r0, [pc, #24]	@ (801acb4 <BSP_SD_WriteBlocks_DMA+0x30>)
 801ac9c:	f7fc fca4 	bl	80175e8 <HAL_SD_WriteBlocks_DMA>
 801aca0:	4603      	mov	r3, r0
 801aca2:	2b00      	cmp	r3, #0
 801aca4:	d001      	beq.n	801acaa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801aca6:	2301      	movs	r3, #1
 801aca8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801acaa:	7dfb      	ldrb	r3, [r7, #23]
}
 801acac:	4618      	mov	r0, r3
 801acae:	3718      	adds	r7, #24
 801acb0:	46bd      	mov	sp, r7
 801acb2:	bd80      	pop	{r7, pc}
 801acb4:	240002f8 	.word	0x240002f8

0801acb8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801acb8:	b580      	push	{r7, lr}
 801acba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801acbc:	4805      	ldr	r0, [pc, #20]	@ (801acd4 <BSP_SD_GetCardState+0x1c>)
 801acbe:	f7fd fa9d 	bl	80181fc <HAL_SD_GetCardState>
 801acc2:	4603      	mov	r3, r0
 801acc4:	2b04      	cmp	r3, #4
 801acc6:	bf14      	ite	ne
 801acc8:	2301      	movne	r3, #1
 801acca:	2300      	moveq	r3, #0
 801accc:	b2db      	uxtb	r3, r3
}
 801acce:	4618      	mov	r0, r3
 801acd0:	bd80      	pop	{r7, pc}
 801acd2:	bf00      	nop
 801acd4:	240002f8 	.word	0x240002f8

0801acd8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801acd8:	b580      	push	{r7, lr}
 801acda:	b082      	sub	sp, #8
 801acdc:	af00      	add	r7, sp, #0
 801acde:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801ace0:	6879      	ldr	r1, [r7, #4]
 801ace2:	4803      	ldr	r0, [pc, #12]	@ (801acf0 <BSP_SD_GetCardInfo+0x18>)
 801ace4:	f7fd f94c 	bl	8017f80 <HAL_SD_GetCardInfo>
}
 801ace8:	bf00      	nop
 801acea:	3708      	adds	r7, #8
 801acec:	46bd      	mov	sp, r7
 801acee:	bd80      	pop	{r7, pc}
 801acf0:	240002f8 	.word	0x240002f8

0801acf4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801acf4:	b580      	push	{r7, lr}
 801acf6:	b082      	sub	sp, #8
 801acf8:	af00      	add	r7, sp, #0
 801acfa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801acfc:	f000 fa14 	bl	801b128 <BSP_SD_WriteCpltCallback>
}
 801ad00:	bf00      	nop
 801ad02:	3708      	adds	r7, #8
 801ad04:	46bd      	mov	sp, r7
 801ad06:	bd80      	pop	{r7, pc}

0801ad08 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801ad08:	b580      	push	{r7, lr}
 801ad0a:	b082      	sub	sp, #8
 801ad0c:	af00      	add	r7, sp, #0
 801ad0e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801ad10:	f000 fa16 	bl	801b140 <BSP_SD_ReadCpltCallback>
}
 801ad14:	bf00      	nop
 801ad16:	3708      	adds	r7, #8
 801ad18:	46bd      	mov	sp, r7
 801ad1a:	bd80      	pop	{r7, pc}

0801ad1c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801ad1c:	b580      	push	{r7, lr}
 801ad1e:	b084      	sub	sp, #16
 801ad20:	af00      	add	r7, sp, #0
 801ad22:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801ad24:	f7f5 fe7a 	bl	8010a1c <HAL_GetTick>
 801ad28:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801ad2a:	e006      	b.n	801ad3a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801ad2c:	f7ff ffc4 	bl	801acb8 <BSP_SD_GetCardState>
 801ad30:	4603      	mov	r3, r0
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d101      	bne.n	801ad3a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801ad36:	2300      	movs	r3, #0
 801ad38:	e009      	b.n	801ad4e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801ad3a:	f7f5 fe6f 	bl	8010a1c <HAL_GetTick>
 801ad3e:	4602      	mov	r2, r0
 801ad40:	68fb      	ldr	r3, [r7, #12]
 801ad42:	1ad3      	subs	r3, r2, r3
 801ad44:	687a      	ldr	r2, [r7, #4]
 801ad46:	429a      	cmp	r2, r3
 801ad48:	d8f0      	bhi.n	801ad2c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801ad4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ad4e:	4618      	mov	r0, r3
 801ad50:	3710      	adds	r7, #16
 801ad52:	46bd      	mov	sp, r7
 801ad54:	bd80      	pop	{r7, pc}
	...

0801ad58 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801ad58:	b580      	push	{r7, lr}
 801ad5a:	b082      	sub	sp, #8
 801ad5c:	af00      	add	r7, sp, #0
 801ad5e:	4603      	mov	r3, r0
 801ad60:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801ad62:	4b0b      	ldr	r3, [pc, #44]	@ (801ad90 <SD_CheckStatus+0x38>)
 801ad64:	2201      	movs	r2, #1
 801ad66:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801ad68:	f7ff ffa6 	bl	801acb8 <BSP_SD_GetCardState>
 801ad6c:	4603      	mov	r3, r0
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d107      	bne.n	801ad82 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801ad72:	4b07      	ldr	r3, [pc, #28]	@ (801ad90 <SD_CheckStatus+0x38>)
 801ad74:	781b      	ldrb	r3, [r3, #0]
 801ad76:	b2db      	uxtb	r3, r3
 801ad78:	f023 0301 	bic.w	r3, r3, #1
 801ad7c:	b2da      	uxtb	r2, r3
 801ad7e:	4b04      	ldr	r3, [pc, #16]	@ (801ad90 <SD_CheckStatus+0x38>)
 801ad80:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801ad82:	4b03      	ldr	r3, [pc, #12]	@ (801ad90 <SD_CheckStatus+0x38>)
 801ad84:	781b      	ldrb	r3, [r3, #0]
 801ad86:	b2db      	uxtb	r3, r3
}
 801ad88:	4618      	mov	r0, r3
 801ad8a:	3708      	adds	r7, #8
 801ad8c:	46bd      	mov	sp, r7
 801ad8e:	bd80      	pop	{r7, pc}
 801ad90:	24000029 	.word	0x24000029

0801ad94 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801ad94:	b580      	push	{r7, lr}
 801ad96:	b082      	sub	sp, #8
 801ad98:	af00      	add	r7, sp, #0
 801ad9a:	4603      	mov	r3, r0
 801ad9c:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 801ad9e:	79fb      	ldrb	r3, [r7, #7]
 801ada0:	4618      	mov	r0, r3
 801ada2:	f7ff ffd9 	bl	801ad58 <SD_CheckStatus>
 801ada6:	4603      	mov	r3, r0
 801ada8:	461a      	mov	r2, r3
 801adaa:	4b04      	ldr	r3, [pc, #16]	@ (801adbc <SD_initialize+0x28>)
 801adac:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 801adae:	4b03      	ldr	r3, [pc, #12]	@ (801adbc <SD_initialize+0x28>)
 801adb0:	781b      	ldrb	r3, [r3, #0]
 801adb2:	b2db      	uxtb	r3, r3
}
 801adb4:	4618      	mov	r0, r3
 801adb6:	3708      	adds	r7, #8
 801adb8:	46bd      	mov	sp, r7
 801adba:	bd80      	pop	{r7, pc}
 801adbc:	24000029 	.word	0x24000029

0801adc0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801adc0:	b580      	push	{r7, lr}
 801adc2:	b082      	sub	sp, #8
 801adc4:	af00      	add	r7, sp, #0
 801adc6:	4603      	mov	r3, r0
 801adc8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801adca:	79fb      	ldrb	r3, [r7, #7]
 801adcc:	4618      	mov	r0, r3
 801adce:	f7ff ffc3 	bl	801ad58 <SD_CheckStatus>
 801add2:	4603      	mov	r3, r0
}
 801add4:	4618      	mov	r0, r3
 801add6:	3708      	adds	r7, #8
 801add8:	46bd      	mov	sp, r7
 801adda:	bd80      	pop	{r7, pc}

0801addc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801addc:	b580      	push	{r7, lr}
 801adde:	b088      	sub	sp, #32
 801ade0:	af00      	add	r7, sp, #0
 801ade2:	60b9      	str	r1, [r7, #8]
 801ade4:	607a      	str	r2, [r7, #4]
 801ade6:	603b      	str	r3, [r7, #0]
 801ade8:	4603      	mov	r3, r0
 801adea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801adec:	2301      	movs	r3, #1
 801adee:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801adf0:	f247 5030 	movw	r0, #30000	@ 0x7530
 801adf4:	f7ff ff92 	bl	801ad1c <SD_CheckStatusWithTimeout>
 801adf8:	4603      	mov	r3, r0
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	da01      	bge.n	801ae02 <SD_read+0x26>
  {
    return res;
 801adfe:	7ffb      	ldrb	r3, [r7, #31]
 801ae00:	e08b      	b.n	801af1a <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801ae02:	68bb      	ldr	r3, [r7, #8]
 801ae04:	f003 0303 	and.w	r3, r3, #3
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	d13b      	bne.n	801ae84 <SD_read+0xa8>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801ae0c:	683a      	ldr	r2, [r7, #0]
 801ae0e:	6879      	ldr	r1, [r7, #4]
 801ae10:	68b8      	ldr	r0, [r7, #8]
 801ae12:	f7ff ff1d 	bl	801ac50 <BSP_SD_ReadBlocks_DMA>
 801ae16:	4603      	mov	r3, r0
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	d17d      	bne.n	801af18 <SD_read+0x13c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801ae1c:	4b41      	ldr	r3, [pc, #260]	@ (801af24 <SD_read+0x148>)
 801ae1e:	2200      	movs	r2, #0
 801ae20:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801ae22:	f7f5 fdfb 	bl	8010a1c <HAL_GetTick>
 801ae26:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801ae28:	bf00      	nop
 801ae2a:	4b3e      	ldr	r3, [pc, #248]	@ (801af24 <SD_read+0x148>)
 801ae2c:	681b      	ldr	r3, [r3, #0]
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d108      	bne.n	801ae44 <SD_read+0x68>
 801ae32:	f7f5 fdf3 	bl	8010a1c <HAL_GetTick>
 801ae36:	4602      	mov	r2, r0
 801ae38:	697b      	ldr	r3, [r7, #20]
 801ae3a:	1ad3      	subs	r3, r2, r3
 801ae3c:	f247 522f 	movw	r2, #29999	@ 0x752f
 801ae40:	4293      	cmp	r3, r2
 801ae42:	d9f2      	bls.n	801ae2a <SD_read+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801ae44:	4b37      	ldr	r3, [pc, #220]	@ (801af24 <SD_read+0x148>)
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	d102      	bne.n	801ae52 <SD_read+0x76>
      {
        res = RES_ERROR;
 801ae4c:	2301      	movs	r3, #1
 801ae4e:	77fb      	strb	r3, [r7, #31]
 801ae50:	e062      	b.n	801af18 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 801ae52:	4b34      	ldr	r3, [pc, #208]	@ (801af24 <SD_read+0x148>)
 801ae54:	2200      	movs	r2, #0
 801ae56:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801ae58:	f7f5 fde0 	bl	8010a1c <HAL_GetTick>
 801ae5c:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801ae5e:	e007      	b.n	801ae70 <SD_read+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801ae60:	f7ff ff2a 	bl	801acb8 <BSP_SD_GetCardState>
 801ae64:	4603      	mov	r3, r0
 801ae66:	2b00      	cmp	r3, #0
 801ae68:	d102      	bne.n	801ae70 <SD_read+0x94>
          {
            res = RES_OK;
 801ae6a:	2300      	movs	r3, #0
 801ae6c:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801ae6e:	e053      	b.n	801af18 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801ae70:	f7f5 fdd4 	bl	8010a1c <HAL_GetTick>
 801ae74:	4602      	mov	r2, r0
 801ae76:	697b      	ldr	r3, [r7, #20]
 801ae78:	1ad3      	subs	r3, r2, r3
 801ae7a:	f247 522f 	movw	r2, #29999	@ 0x752f
 801ae7e:	4293      	cmp	r3, r2
 801ae80:	d9ee      	bls.n	801ae60 <SD_read+0x84>
 801ae82:	e049      	b.n	801af18 <SD_read+0x13c>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 801ae84:	2300      	movs	r3, #0
 801ae86:	61bb      	str	r3, [r7, #24]
 801ae88:	e037      	b.n	801aefa <SD_read+0x11e>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	1c5a      	adds	r2, r3, #1
 801ae8e:	607a      	str	r2, [r7, #4]
 801ae90:	2201      	movs	r2, #1
 801ae92:	4619      	mov	r1, r3
 801ae94:	4824      	ldr	r0, [pc, #144]	@ (801af28 <SD_read+0x14c>)
 801ae96:	f7ff fedb 	bl	801ac50 <BSP_SD_ReadBlocks_DMA>
 801ae9a:	4603      	mov	r3, r0
 801ae9c:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 801ae9e:	7fbb      	ldrb	r3, [r7, #30]
 801aea0:	2b00      	cmp	r3, #0
 801aea2:	d12f      	bne.n	801af04 <SD_read+0x128>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 801aea4:	f7f5 fdba 	bl	8010a1c <HAL_GetTick>
 801aea8:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801aeaa:	bf00      	nop
 801aeac:	4b1d      	ldr	r3, [pc, #116]	@ (801af24 <SD_read+0x148>)
 801aeae:	681b      	ldr	r3, [r3, #0]
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	d108      	bne.n	801aec6 <SD_read+0xea>
 801aeb4:	f7f5 fdb2 	bl	8010a1c <HAL_GetTick>
 801aeb8:	4602      	mov	r2, r0
 801aeba:	697b      	ldr	r3, [r7, #20]
 801aebc:	1ad3      	subs	r3, r2, r3
 801aebe:	f247 522f 	movw	r2, #29999	@ 0x752f
 801aec2:	4293      	cmp	r3, r2
 801aec4:	d9f2      	bls.n	801aeac <SD_read+0xd0>
          {
          }
          if (ReadStatus == 0)
 801aec6:	4b17      	ldr	r3, [pc, #92]	@ (801af24 <SD_read+0x148>)
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	d102      	bne.n	801aed4 <SD_read+0xf8>
          {
            res = RES_ERROR;
 801aece:	2301      	movs	r3, #1
 801aed0:	77fb      	strb	r3, [r7, #31]
            break;
 801aed2:	e018      	b.n	801af06 <SD_read+0x12a>
          }
          ReadStatus = 0;
 801aed4:	4b13      	ldr	r3, [pc, #76]	@ (801af24 <SD_read+0x148>)
 801aed6:	2200      	movs	r2, #0
 801aed8:	601a      	str	r2, [r3, #0]
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 801aeda:	68bb      	ldr	r3, [r7, #8]
 801aedc:	4a12      	ldr	r2, [pc, #72]	@ (801af28 <SD_read+0x14c>)
 801aede:	4618      	mov	r0, r3
 801aee0:	4611      	mov	r1, r2
 801aee2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801aee6:	461a      	mov	r2, r3
 801aee8:	f003 f98d 	bl	801e206 <memcpy>
          buff += BLOCKSIZE;
 801aeec:	68bb      	ldr	r3, [r7, #8]
 801aeee:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801aef2:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 801aef4:	69bb      	ldr	r3, [r7, #24]
 801aef6:	3301      	adds	r3, #1
 801aef8:	61bb      	str	r3, [r7, #24]
 801aefa:	69bb      	ldr	r3, [r7, #24]
 801aefc:	683a      	ldr	r2, [r7, #0]
 801aefe:	429a      	cmp	r2, r3
 801af00:	d8c3      	bhi.n	801ae8a <SD_read+0xae>
 801af02:	e000      	b.n	801af06 <SD_read+0x12a>
        }
        else
        {
          break;
 801af04:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 801af06:	69bb      	ldr	r3, [r7, #24]
 801af08:	683a      	ldr	r2, [r7, #0]
 801af0a:	429a      	cmp	r2, r3
 801af0c:	d104      	bne.n	801af18 <SD_read+0x13c>
 801af0e:	7fbb      	ldrb	r3, [r7, #30]
 801af10:	2b00      	cmp	r3, #0
 801af12:	d101      	bne.n	801af18 <SD_read+0x13c>
        res = RES_OK;
 801af14:	2300      	movs	r3, #0
 801af16:	77fb      	strb	r3, [r7, #31]
    }
#endif

  return res;
 801af18:	7ffb      	ldrb	r3, [r7, #31]
}
 801af1a:	4618      	mov	r0, r3
 801af1c:	3720      	adds	r7, #32
 801af1e:	46bd      	mov	sp, r7
 801af20:	bd80      	pop	{r7, pc}
 801af22:	bf00      	nop
 801af24:	24000a84 	.word	0x24000a84
 801af28:	24000880 	.word	0x24000880

0801af2c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801af2c:	b580      	push	{r7, lr}
 801af2e:	b088      	sub	sp, #32
 801af30:	af00      	add	r7, sp, #0
 801af32:	60b9      	str	r1, [r7, #8]
 801af34:	607a      	str	r2, [r7, #4]
 801af36:	603b      	str	r3, [r7, #0]
 801af38:	4603      	mov	r3, r0
 801af3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801af3c:	2301      	movs	r3, #1
 801af3e:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801af40:	4b4b      	ldr	r3, [pc, #300]	@ (801b070 <SD_write+0x144>)
 801af42:	2200      	movs	r2, #0
 801af44:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801af46:	f247 5030 	movw	r0, #30000	@ 0x7530
 801af4a:	f7ff fee7 	bl	801ad1c <SD_CheckStatusWithTimeout>
 801af4e:	4603      	mov	r3, r0
 801af50:	2b00      	cmp	r3, #0
 801af52:	da01      	bge.n	801af58 <SD_write+0x2c>
  {
    return res;
 801af54:	7ffb      	ldrb	r3, [r7, #31]
 801af56:	e087      	b.n	801b068 <SD_write+0x13c>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801af58:	68bb      	ldr	r3, [r7, #8]
 801af5a:	f003 0303 	and.w	r3, r3, #3
 801af5e:	2b00      	cmp	r3, #0
 801af60:	d138      	bne.n	801afd4 <SD_write+0xa8>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801af62:	683a      	ldr	r2, [r7, #0]
 801af64:	6879      	ldr	r1, [r7, #4]
 801af66:	68b8      	ldr	r0, [r7, #8]
 801af68:	f7ff fe8c 	bl	801ac84 <BSP_SD_WriteBlocks_DMA>
 801af6c:	4603      	mov	r3, r0
 801af6e:	2b00      	cmp	r3, #0
 801af70:	d179      	bne.n	801b066 <SD_write+0x13a>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801af72:	f7f5 fd53 	bl	8010a1c <HAL_GetTick>
 801af76:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801af78:	bf00      	nop
 801af7a:	4b3d      	ldr	r3, [pc, #244]	@ (801b070 <SD_write+0x144>)
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d108      	bne.n	801af94 <SD_write+0x68>
 801af82:	f7f5 fd4b 	bl	8010a1c <HAL_GetTick>
 801af86:	4602      	mov	r2, r0
 801af88:	697b      	ldr	r3, [r7, #20]
 801af8a:	1ad3      	subs	r3, r2, r3
 801af8c:	f247 522f 	movw	r2, #29999	@ 0x752f
 801af90:	4293      	cmp	r3, r2
 801af92:	d9f2      	bls.n	801af7a <SD_write+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801af94:	4b36      	ldr	r3, [pc, #216]	@ (801b070 <SD_write+0x144>)
 801af96:	681b      	ldr	r3, [r3, #0]
 801af98:	2b00      	cmp	r3, #0
 801af9a:	d102      	bne.n	801afa2 <SD_write+0x76>
      {
        res = RES_ERROR;
 801af9c:	2301      	movs	r3, #1
 801af9e:	77fb      	strb	r3, [r7, #31]
 801afa0:	e061      	b.n	801b066 <SD_write+0x13a>
      }
      else
      {
        WriteStatus = 0;
 801afa2:	4b33      	ldr	r3, [pc, #204]	@ (801b070 <SD_write+0x144>)
 801afa4:	2200      	movs	r2, #0
 801afa6:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801afa8:	f7f5 fd38 	bl	8010a1c <HAL_GetTick>
 801afac:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801afae:	e007      	b.n	801afc0 <SD_write+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801afb0:	f7ff fe82 	bl	801acb8 <BSP_SD_GetCardState>
 801afb4:	4603      	mov	r3, r0
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	d102      	bne.n	801afc0 <SD_write+0x94>
          {
            res = RES_OK;
 801afba:	2300      	movs	r3, #0
 801afbc:	77fb      	strb	r3, [r7, #31]
            break;
 801afbe:	e052      	b.n	801b066 <SD_write+0x13a>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801afc0:	f7f5 fd2c 	bl	8010a1c <HAL_GetTick>
 801afc4:	4602      	mov	r2, r0
 801afc6:	697b      	ldr	r3, [r7, #20]
 801afc8:	1ad3      	subs	r3, r2, r3
 801afca:	f247 522f 	movw	r2, #29999	@ 0x752f
 801afce:	4293      	cmp	r3, r2
 801afd0:	d9ee      	bls.n	801afb0 <SD_write+0x84>
 801afd2:	e048      	b.n	801b066 <SD_write+0x13a>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 801afd4:	2300      	movs	r3, #0
 801afd6:	61bb      	str	r3, [r7, #24]
 801afd8:	e034      	b.n	801b044 <SD_write+0x118>
      {
        WriteStatus = 0;
 801afda:	4b25      	ldr	r3, [pc, #148]	@ (801b070 <SD_write+0x144>)
 801afdc:	2200      	movs	r2, #0
 801afde:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 801afe0:	4a24      	ldr	r2, [pc, #144]	@ (801b074 <SD_write+0x148>)
 801afe2:	68bb      	ldr	r3, [r7, #8]
 801afe4:	4610      	mov	r0, r2
 801afe6:	4619      	mov	r1, r3
 801afe8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801afec:	461a      	mov	r2, r3
 801afee:	f003 f90a 	bl	801e206 <memcpy>
        buff += BLOCKSIZE;
 801aff2:	68bb      	ldr	r3, [r7, #8]
 801aff4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801aff8:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	1c5a      	adds	r2, r3, #1
 801affe:	607a      	str	r2, [r7, #4]
 801b000:	2201      	movs	r2, #1
 801b002:	4619      	mov	r1, r3
 801b004:	481b      	ldr	r0, [pc, #108]	@ (801b074 <SD_write+0x148>)
 801b006:	f7ff fe3d 	bl	801ac84 <BSP_SD_WriteBlocks_DMA>
 801b00a:	4603      	mov	r3, r0
 801b00c:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 801b00e:	7fbb      	ldrb	r3, [r7, #30]
 801b010:	2b00      	cmp	r3, #0
 801b012:	d11c      	bne.n	801b04e <SD_write+0x122>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 801b014:	f7f5 fd02 	bl	8010a1c <HAL_GetTick>
 801b018:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801b01a:	bf00      	nop
 801b01c:	4b14      	ldr	r3, [pc, #80]	@ (801b070 <SD_write+0x144>)
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	2b00      	cmp	r3, #0
 801b022:	d108      	bne.n	801b036 <SD_write+0x10a>
 801b024:	f7f5 fcfa 	bl	8010a1c <HAL_GetTick>
 801b028:	4602      	mov	r2, r0
 801b02a:	697b      	ldr	r3, [r7, #20]
 801b02c:	1ad3      	subs	r3, r2, r3
 801b02e:	f247 522f 	movw	r2, #29999	@ 0x752f
 801b032:	4293      	cmp	r3, r2
 801b034:	d9f2      	bls.n	801b01c <SD_write+0xf0>
          {
          }
          if (WriteStatus == 0)
 801b036:	4b0e      	ldr	r3, [pc, #56]	@ (801b070 <SD_write+0x144>)
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d009      	beq.n	801b052 <SD_write+0x126>
      for (i = 0; i < count; i++)
 801b03e:	69bb      	ldr	r3, [r7, #24]
 801b040:	3301      	adds	r3, #1
 801b042:	61bb      	str	r3, [r7, #24]
 801b044:	69bb      	ldr	r3, [r7, #24]
 801b046:	683a      	ldr	r2, [r7, #0]
 801b048:	429a      	cmp	r2, r3
 801b04a:	d8c6      	bhi.n	801afda <SD_write+0xae>
 801b04c:	e002      	b.n	801b054 <SD_write+0x128>
          }

        }
        else
        {
          break;
 801b04e:	bf00      	nop
 801b050:	e000      	b.n	801b054 <SD_write+0x128>
            break;
 801b052:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 801b054:	69bb      	ldr	r3, [r7, #24]
 801b056:	683a      	ldr	r2, [r7, #0]
 801b058:	429a      	cmp	r2, r3
 801b05a:	d104      	bne.n	801b066 <SD_write+0x13a>
 801b05c:	7fbb      	ldrb	r3, [r7, #30]
 801b05e:	2b00      	cmp	r3, #0
 801b060:	d101      	bne.n	801b066 <SD_write+0x13a>
        res = RES_OK;
 801b062:	2300      	movs	r3, #0
 801b064:	77fb      	strb	r3, [r7, #31]
    }
#endif
  return res;
 801b066:	7ffb      	ldrb	r3, [r7, #31]
}
 801b068:	4618      	mov	r0, r3
 801b06a:	3720      	adds	r7, #32
 801b06c:	46bd      	mov	sp, r7
 801b06e:	bd80      	pop	{r7, pc}
 801b070:	24000a80 	.word	0x24000a80
 801b074:	24000880 	.word	0x24000880

0801b078 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801b078:	b580      	push	{r7, lr}
 801b07a:	b08c      	sub	sp, #48	@ 0x30
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	4603      	mov	r3, r0
 801b080:	603a      	str	r2, [r7, #0]
 801b082:	71fb      	strb	r3, [r7, #7]
 801b084:	460b      	mov	r3, r1
 801b086:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801b088:	2301      	movs	r3, #1
 801b08a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801b08e:	4b25      	ldr	r3, [pc, #148]	@ (801b124 <SD_ioctl+0xac>)
 801b090:	781b      	ldrb	r3, [r3, #0]
 801b092:	b2db      	uxtb	r3, r3
 801b094:	f003 0301 	and.w	r3, r3, #1
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d001      	beq.n	801b0a0 <SD_ioctl+0x28>
 801b09c:	2303      	movs	r3, #3
 801b09e:	e03c      	b.n	801b11a <SD_ioctl+0xa2>

  switch (cmd)
 801b0a0:	79bb      	ldrb	r3, [r7, #6]
 801b0a2:	2b03      	cmp	r3, #3
 801b0a4:	d834      	bhi.n	801b110 <SD_ioctl+0x98>
 801b0a6:	a201      	add	r2, pc, #4	@ (adr r2, 801b0ac <SD_ioctl+0x34>)
 801b0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b0ac:	0801b0bd 	.word	0x0801b0bd
 801b0b0:	0801b0c5 	.word	0x0801b0c5
 801b0b4:	0801b0dd 	.word	0x0801b0dd
 801b0b8:	0801b0f7 	.word	0x0801b0f7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801b0bc:	2300      	movs	r3, #0
 801b0be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801b0c2:	e028      	b.n	801b116 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801b0c4:	f107 0308 	add.w	r3, r7, #8
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	f7ff fe05 	bl	801acd8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801b0ce:	6a3a      	ldr	r2, [r7, #32]
 801b0d0:	683b      	ldr	r3, [r7, #0]
 801b0d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801b0d4:	2300      	movs	r3, #0
 801b0d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801b0da:	e01c      	b.n	801b116 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801b0dc:	f107 0308 	add.w	r3, r7, #8
 801b0e0:	4618      	mov	r0, r3
 801b0e2:	f7ff fdf9 	bl	801acd8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801b0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0e8:	b29a      	uxth	r2, r3
 801b0ea:	683b      	ldr	r3, [r7, #0]
 801b0ec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801b0ee:	2300      	movs	r3, #0
 801b0f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801b0f4:	e00f      	b.n	801b116 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801b0f6:	f107 0308 	add.w	r3, r7, #8
 801b0fa:	4618      	mov	r0, r3
 801b0fc:	f7ff fdec 	bl	801acd8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801b100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b102:	0a5a      	lsrs	r2, r3, #9
 801b104:	683b      	ldr	r3, [r7, #0]
 801b106:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801b108:	2300      	movs	r3, #0
 801b10a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801b10e:	e002      	b.n	801b116 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801b110:	2304      	movs	r3, #4
 801b112:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 801b116:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801b11a:	4618      	mov	r0, r3
 801b11c:	3730      	adds	r7, #48	@ 0x30
 801b11e:	46bd      	mov	sp, r7
 801b120:	bd80      	pop	{r7, pc}
 801b122:	bf00      	nop
 801b124:	24000029 	.word	0x24000029

0801b128 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801b128:	b480      	push	{r7}
 801b12a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801b12c:	4b03      	ldr	r3, [pc, #12]	@ (801b13c <BSP_SD_WriteCpltCallback+0x14>)
 801b12e:	2201      	movs	r2, #1
 801b130:	601a      	str	r2, [r3, #0]
}
 801b132:	bf00      	nop
 801b134:	46bd      	mov	sp, r7
 801b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b13a:	4770      	bx	lr
 801b13c:	24000a80 	.word	0x24000a80

0801b140 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801b140:	b480      	push	{r7}
 801b142:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801b144:	4b03      	ldr	r3, [pc, #12]	@ (801b154 <BSP_SD_ReadCpltCallback+0x14>)
 801b146:	2201      	movs	r2, #1
 801b148:	601a      	str	r2, [r3, #0]
}
 801b14a:	bf00      	nop
 801b14c:	46bd      	mov	sp, r7
 801b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b152:	4770      	bx	lr
 801b154:	24000a84 	.word	0x24000a84

0801b158 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801b158:	b580      	push	{r7, lr}
 801b15a:	b084      	sub	sp, #16
 801b15c:	af00      	add	r7, sp, #0
 801b15e:	4603      	mov	r3, r0
 801b160:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801b162:	79fb      	ldrb	r3, [r7, #7]
 801b164:	4a08      	ldr	r2, [pc, #32]	@ (801b188 <disk_status+0x30>)
 801b166:	009b      	lsls	r3, r3, #2
 801b168:	4413      	add	r3, r2
 801b16a:	685b      	ldr	r3, [r3, #4]
 801b16c:	685b      	ldr	r3, [r3, #4]
 801b16e:	79fa      	ldrb	r2, [r7, #7]
 801b170:	4905      	ldr	r1, [pc, #20]	@ (801b188 <disk_status+0x30>)
 801b172:	440a      	add	r2, r1
 801b174:	7a12      	ldrb	r2, [r2, #8]
 801b176:	4610      	mov	r0, r2
 801b178:	4798      	blx	r3
 801b17a:	4603      	mov	r3, r0
 801b17c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801b17e:	7bfb      	ldrb	r3, [r7, #15]
}
 801b180:	4618      	mov	r0, r3
 801b182:	3710      	adds	r7, #16
 801b184:	46bd      	mov	sp, r7
 801b186:	bd80      	pop	{r7, pc}
 801b188:	24000ab0 	.word	0x24000ab0

0801b18c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801b18c:	b580      	push	{r7, lr}
 801b18e:	b084      	sub	sp, #16
 801b190:	af00      	add	r7, sp, #0
 801b192:	4603      	mov	r3, r0
 801b194:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801b196:	2300      	movs	r3, #0
 801b198:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801b19a:	79fb      	ldrb	r3, [r7, #7]
 801b19c:	4a0e      	ldr	r2, [pc, #56]	@ (801b1d8 <disk_initialize+0x4c>)
 801b19e:	5cd3      	ldrb	r3, [r2, r3]
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d114      	bne.n	801b1ce <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801b1a4:	79fb      	ldrb	r3, [r7, #7]
 801b1a6:	4a0c      	ldr	r2, [pc, #48]	@ (801b1d8 <disk_initialize+0x4c>)
 801b1a8:	009b      	lsls	r3, r3, #2
 801b1aa:	4413      	add	r3, r2
 801b1ac:	685b      	ldr	r3, [r3, #4]
 801b1ae:	681b      	ldr	r3, [r3, #0]
 801b1b0:	79fa      	ldrb	r2, [r7, #7]
 801b1b2:	4909      	ldr	r1, [pc, #36]	@ (801b1d8 <disk_initialize+0x4c>)
 801b1b4:	440a      	add	r2, r1
 801b1b6:	7a12      	ldrb	r2, [r2, #8]
 801b1b8:	4610      	mov	r0, r2
 801b1ba:	4798      	blx	r3
 801b1bc:	4603      	mov	r3, r0
 801b1be:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801b1c0:	7bfb      	ldrb	r3, [r7, #15]
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d103      	bne.n	801b1ce <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801b1c6:	79fb      	ldrb	r3, [r7, #7]
 801b1c8:	4a03      	ldr	r2, [pc, #12]	@ (801b1d8 <disk_initialize+0x4c>)
 801b1ca:	2101      	movs	r1, #1
 801b1cc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801b1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 801b1d0:	4618      	mov	r0, r3
 801b1d2:	3710      	adds	r7, #16
 801b1d4:	46bd      	mov	sp, r7
 801b1d6:	bd80      	pop	{r7, pc}
 801b1d8:	24000ab0 	.word	0x24000ab0

0801b1dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801b1dc:	b590      	push	{r4, r7, lr}
 801b1de:	b087      	sub	sp, #28
 801b1e0:	af00      	add	r7, sp, #0
 801b1e2:	60b9      	str	r1, [r7, #8]
 801b1e4:	607a      	str	r2, [r7, #4]
 801b1e6:	603b      	str	r3, [r7, #0]
 801b1e8:	4603      	mov	r3, r0
 801b1ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801b1ec:	7bfb      	ldrb	r3, [r7, #15]
 801b1ee:	4a0a      	ldr	r2, [pc, #40]	@ (801b218 <disk_read+0x3c>)
 801b1f0:	009b      	lsls	r3, r3, #2
 801b1f2:	4413      	add	r3, r2
 801b1f4:	685b      	ldr	r3, [r3, #4]
 801b1f6:	689c      	ldr	r4, [r3, #8]
 801b1f8:	7bfb      	ldrb	r3, [r7, #15]
 801b1fa:	4a07      	ldr	r2, [pc, #28]	@ (801b218 <disk_read+0x3c>)
 801b1fc:	4413      	add	r3, r2
 801b1fe:	7a18      	ldrb	r0, [r3, #8]
 801b200:	683b      	ldr	r3, [r7, #0]
 801b202:	687a      	ldr	r2, [r7, #4]
 801b204:	68b9      	ldr	r1, [r7, #8]
 801b206:	47a0      	blx	r4
 801b208:	4603      	mov	r3, r0
 801b20a:	75fb      	strb	r3, [r7, #23]
  return res;
 801b20c:	7dfb      	ldrb	r3, [r7, #23]
}
 801b20e:	4618      	mov	r0, r3
 801b210:	371c      	adds	r7, #28
 801b212:	46bd      	mov	sp, r7
 801b214:	bd90      	pop	{r4, r7, pc}
 801b216:	bf00      	nop
 801b218:	24000ab0 	.word	0x24000ab0

0801b21c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801b21c:	b590      	push	{r4, r7, lr}
 801b21e:	b087      	sub	sp, #28
 801b220:	af00      	add	r7, sp, #0
 801b222:	60b9      	str	r1, [r7, #8]
 801b224:	607a      	str	r2, [r7, #4]
 801b226:	603b      	str	r3, [r7, #0]
 801b228:	4603      	mov	r3, r0
 801b22a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801b22c:	7bfb      	ldrb	r3, [r7, #15]
 801b22e:	4a0a      	ldr	r2, [pc, #40]	@ (801b258 <disk_write+0x3c>)
 801b230:	009b      	lsls	r3, r3, #2
 801b232:	4413      	add	r3, r2
 801b234:	685b      	ldr	r3, [r3, #4]
 801b236:	68dc      	ldr	r4, [r3, #12]
 801b238:	7bfb      	ldrb	r3, [r7, #15]
 801b23a:	4a07      	ldr	r2, [pc, #28]	@ (801b258 <disk_write+0x3c>)
 801b23c:	4413      	add	r3, r2
 801b23e:	7a18      	ldrb	r0, [r3, #8]
 801b240:	683b      	ldr	r3, [r7, #0]
 801b242:	687a      	ldr	r2, [r7, #4]
 801b244:	68b9      	ldr	r1, [r7, #8]
 801b246:	47a0      	blx	r4
 801b248:	4603      	mov	r3, r0
 801b24a:	75fb      	strb	r3, [r7, #23]
  return res;
 801b24c:	7dfb      	ldrb	r3, [r7, #23]
}
 801b24e:	4618      	mov	r0, r3
 801b250:	371c      	adds	r7, #28
 801b252:	46bd      	mov	sp, r7
 801b254:	bd90      	pop	{r4, r7, pc}
 801b256:	bf00      	nop
 801b258:	24000ab0 	.word	0x24000ab0

0801b25c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801b25c:	b580      	push	{r7, lr}
 801b25e:	b084      	sub	sp, #16
 801b260:	af00      	add	r7, sp, #0
 801b262:	4603      	mov	r3, r0
 801b264:	603a      	str	r2, [r7, #0]
 801b266:	71fb      	strb	r3, [r7, #7]
 801b268:	460b      	mov	r3, r1
 801b26a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801b26c:	79fb      	ldrb	r3, [r7, #7]
 801b26e:	4a09      	ldr	r2, [pc, #36]	@ (801b294 <disk_ioctl+0x38>)
 801b270:	009b      	lsls	r3, r3, #2
 801b272:	4413      	add	r3, r2
 801b274:	685b      	ldr	r3, [r3, #4]
 801b276:	691b      	ldr	r3, [r3, #16]
 801b278:	79fa      	ldrb	r2, [r7, #7]
 801b27a:	4906      	ldr	r1, [pc, #24]	@ (801b294 <disk_ioctl+0x38>)
 801b27c:	440a      	add	r2, r1
 801b27e:	7a10      	ldrb	r0, [r2, #8]
 801b280:	79b9      	ldrb	r1, [r7, #6]
 801b282:	683a      	ldr	r2, [r7, #0]
 801b284:	4798      	blx	r3
 801b286:	4603      	mov	r3, r0
 801b288:	73fb      	strb	r3, [r7, #15]
  return res;
 801b28a:	7bfb      	ldrb	r3, [r7, #15]
}
 801b28c:	4618      	mov	r0, r3
 801b28e:	3710      	adds	r7, #16
 801b290:	46bd      	mov	sp, r7
 801b292:	bd80      	pop	{r7, pc}
 801b294:	24000ab0 	.word	0x24000ab0

0801b298 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801b298:	b480      	push	{r7}
 801b29a:	b085      	sub	sp, #20
 801b29c:	af00      	add	r7, sp, #0
 801b29e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	3301      	adds	r3, #1
 801b2a4:	781b      	ldrb	r3, [r3, #0]
 801b2a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801b2a8:	89fb      	ldrh	r3, [r7, #14]
 801b2aa:	021b      	lsls	r3, r3, #8
 801b2ac:	b21a      	sxth	r2, r3
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	781b      	ldrb	r3, [r3, #0]
 801b2b2:	b21b      	sxth	r3, r3
 801b2b4:	4313      	orrs	r3, r2
 801b2b6:	b21b      	sxth	r3, r3
 801b2b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 801b2ba:	89fb      	ldrh	r3, [r7, #14]
}
 801b2bc:	4618      	mov	r0, r3
 801b2be:	3714      	adds	r7, #20
 801b2c0:	46bd      	mov	sp, r7
 801b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2c6:	4770      	bx	lr

0801b2c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801b2c8:	b480      	push	{r7}
 801b2ca:	b085      	sub	sp, #20
 801b2cc:	af00      	add	r7, sp, #0
 801b2ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	3303      	adds	r3, #3
 801b2d4:	781b      	ldrb	r3, [r3, #0]
 801b2d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801b2d8:	68fb      	ldr	r3, [r7, #12]
 801b2da:	021b      	lsls	r3, r3, #8
 801b2dc:	687a      	ldr	r2, [r7, #4]
 801b2de:	3202      	adds	r2, #2
 801b2e0:	7812      	ldrb	r2, [r2, #0]
 801b2e2:	4313      	orrs	r3, r2
 801b2e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801b2e6:	68fb      	ldr	r3, [r7, #12]
 801b2e8:	021b      	lsls	r3, r3, #8
 801b2ea:	687a      	ldr	r2, [r7, #4]
 801b2ec:	3201      	adds	r2, #1
 801b2ee:	7812      	ldrb	r2, [r2, #0]
 801b2f0:	4313      	orrs	r3, r2
 801b2f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801b2f4:	68fb      	ldr	r3, [r7, #12]
 801b2f6:	021b      	lsls	r3, r3, #8
 801b2f8:	687a      	ldr	r2, [r7, #4]
 801b2fa:	7812      	ldrb	r2, [r2, #0]
 801b2fc:	4313      	orrs	r3, r2
 801b2fe:	60fb      	str	r3, [r7, #12]
	return rv;
 801b300:	68fb      	ldr	r3, [r7, #12]
}
 801b302:	4618      	mov	r0, r3
 801b304:	3714      	adds	r7, #20
 801b306:	46bd      	mov	sp, r7
 801b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b30c:	4770      	bx	lr

0801b30e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801b30e:	b480      	push	{r7}
 801b310:	b083      	sub	sp, #12
 801b312:	af00      	add	r7, sp, #0
 801b314:	6078      	str	r0, [r7, #4]
 801b316:	460b      	mov	r3, r1
 801b318:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	1c5a      	adds	r2, r3, #1
 801b31e:	607a      	str	r2, [r7, #4]
 801b320:	887a      	ldrh	r2, [r7, #2]
 801b322:	b2d2      	uxtb	r2, r2
 801b324:	701a      	strb	r2, [r3, #0]
 801b326:	887b      	ldrh	r3, [r7, #2]
 801b328:	0a1b      	lsrs	r3, r3, #8
 801b32a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	1c5a      	adds	r2, r3, #1
 801b330:	607a      	str	r2, [r7, #4]
 801b332:	887a      	ldrh	r2, [r7, #2]
 801b334:	b2d2      	uxtb	r2, r2
 801b336:	701a      	strb	r2, [r3, #0]
}
 801b338:	bf00      	nop
 801b33a:	370c      	adds	r7, #12
 801b33c:	46bd      	mov	sp, r7
 801b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b342:	4770      	bx	lr

0801b344 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801b344:	b480      	push	{r7}
 801b346:	b083      	sub	sp, #12
 801b348:	af00      	add	r7, sp, #0
 801b34a:	6078      	str	r0, [r7, #4]
 801b34c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	1c5a      	adds	r2, r3, #1
 801b352:	607a      	str	r2, [r7, #4]
 801b354:	683a      	ldr	r2, [r7, #0]
 801b356:	b2d2      	uxtb	r2, r2
 801b358:	701a      	strb	r2, [r3, #0]
 801b35a:	683b      	ldr	r3, [r7, #0]
 801b35c:	0a1b      	lsrs	r3, r3, #8
 801b35e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	1c5a      	adds	r2, r3, #1
 801b364:	607a      	str	r2, [r7, #4]
 801b366:	683a      	ldr	r2, [r7, #0]
 801b368:	b2d2      	uxtb	r2, r2
 801b36a:	701a      	strb	r2, [r3, #0]
 801b36c:	683b      	ldr	r3, [r7, #0]
 801b36e:	0a1b      	lsrs	r3, r3, #8
 801b370:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	1c5a      	adds	r2, r3, #1
 801b376:	607a      	str	r2, [r7, #4]
 801b378:	683a      	ldr	r2, [r7, #0]
 801b37a:	b2d2      	uxtb	r2, r2
 801b37c:	701a      	strb	r2, [r3, #0]
 801b37e:	683b      	ldr	r3, [r7, #0]
 801b380:	0a1b      	lsrs	r3, r3, #8
 801b382:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	1c5a      	adds	r2, r3, #1
 801b388:	607a      	str	r2, [r7, #4]
 801b38a:	683a      	ldr	r2, [r7, #0]
 801b38c:	b2d2      	uxtb	r2, r2
 801b38e:	701a      	strb	r2, [r3, #0]
}
 801b390:	bf00      	nop
 801b392:	370c      	adds	r7, #12
 801b394:	46bd      	mov	sp, r7
 801b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b39a:	4770      	bx	lr

0801b39c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801b39c:	b480      	push	{r7}
 801b39e:	b087      	sub	sp, #28
 801b3a0:	af00      	add	r7, sp, #0
 801b3a2:	60f8      	str	r0, [r7, #12]
 801b3a4:	60b9      	str	r1, [r7, #8]
 801b3a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b3a8:	68fb      	ldr	r3, [r7, #12]
 801b3aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801b3ac:	68bb      	ldr	r3, [r7, #8]
 801b3ae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	d00d      	beq.n	801b3d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801b3b6:	693a      	ldr	r2, [r7, #16]
 801b3b8:	1c53      	adds	r3, r2, #1
 801b3ba:	613b      	str	r3, [r7, #16]
 801b3bc:	697b      	ldr	r3, [r7, #20]
 801b3be:	1c59      	adds	r1, r3, #1
 801b3c0:	6179      	str	r1, [r7, #20]
 801b3c2:	7812      	ldrb	r2, [r2, #0]
 801b3c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	3b01      	subs	r3, #1
 801b3ca:	607b      	str	r3, [r7, #4]
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d1f1      	bne.n	801b3b6 <mem_cpy+0x1a>
	}
}
 801b3d2:	bf00      	nop
 801b3d4:	371c      	adds	r7, #28
 801b3d6:	46bd      	mov	sp, r7
 801b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3dc:	4770      	bx	lr

0801b3de <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801b3de:	b480      	push	{r7}
 801b3e0:	b087      	sub	sp, #28
 801b3e2:	af00      	add	r7, sp, #0
 801b3e4:	60f8      	str	r0, [r7, #12]
 801b3e6:	60b9      	str	r1, [r7, #8]
 801b3e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b3ea:	68fb      	ldr	r3, [r7, #12]
 801b3ec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801b3ee:	697b      	ldr	r3, [r7, #20]
 801b3f0:	1c5a      	adds	r2, r3, #1
 801b3f2:	617a      	str	r2, [r7, #20]
 801b3f4:	68ba      	ldr	r2, [r7, #8]
 801b3f6:	b2d2      	uxtb	r2, r2
 801b3f8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	3b01      	subs	r3, #1
 801b3fe:	607b      	str	r3, [r7, #4]
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	2b00      	cmp	r3, #0
 801b404:	d1f3      	bne.n	801b3ee <mem_set+0x10>
}
 801b406:	bf00      	nop
 801b408:	bf00      	nop
 801b40a:	371c      	adds	r7, #28
 801b40c:	46bd      	mov	sp, r7
 801b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b412:	4770      	bx	lr

0801b414 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801b414:	b480      	push	{r7}
 801b416:	b089      	sub	sp, #36	@ 0x24
 801b418:	af00      	add	r7, sp, #0
 801b41a:	60f8      	str	r0, [r7, #12]
 801b41c:	60b9      	str	r1, [r7, #8]
 801b41e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801b420:	68fb      	ldr	r3, [r7, #12]
 801b422:	61fb      	str	r3, [r7, #28]
 801b424:	68bb      	ldr	r3, [r7, #8]
 801b426:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801b428:	2300      	movs	r3, #0
 801b42a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801b42c:	69fb      	ldr	r3, [r7, #28]
 801b42e:	1c5a      	adds	r2, r3, #1
 801b430:	61fa      	str	r2, [r7, #28]
 801b432:	781b      	ldrb	r3, [r3, #0]
 801b434:	4619      	mov	r1, r3
 801b436:	69bb      	ldr	r3, [r7, #24]
 801b438:	1c5a      	adds	r2, r3, #1
 801b43a:	61ba      	str	r2, [r7, #24]
 801b43c:	781b      	ldrb	r3, [r3, #0]
 801b43e:	1acb      	subs	r3, r1, r3
 801b440:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	3b01      	subs	r3, #1
 801b446:	607b      	str	r3, [r7, #4]
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d002      	beq.n	801b454 <mem_cmp+0x40>
 801b44e:	697b      	ldr	r3, [r7, #20]
 801b450:	2b00      	cmp	r3, #0
 801b452:	d0eb      	beq.n	801b42c <mem_cmp+0x18>

	return r;
 801b454:	697b      	ldr	r3, [r7, #20]
}
 801b456:	4618      	mov	r0, r3
 801b458:	3724      	adds	r7, #36	@ 0x24
 801b45a:	46bd      	mov	sp, r7
 801b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b460:	4770      	bx	lr

0801b462 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801b462:	b480      	push	{r7}
 801b464:	b083      	sub	sp, #12
 801b466:	af00      	add	r7, sp, #0
 801b468:	6078      	str	r0, [r7, #4]
 801b46a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801b46c:	e002      	b.n	801b474 <chk_chr+0x12>
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	3301      	adds	r3, #1
 801b472:	607b      	str	r3, [r7, #4]
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	781b      	ldrb	r3, [r3, #0]
 801b478:	2b00      	cmp	r3, #0
 801b47a:	d005      	beq.n	801b488 <chk_chr+0x26>
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	781b      	ldrb	r3, [r3, #0]
 801b480:	461a      	mov	r2, r3
 801b482:	683b      	ldr	r3, [r7, #0]
 801b484:	4293      	cmp	r3, r2
 801b486:	d1f2      	bne.n	801b46e <chk_chr+0xc>
	return *str;
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	781b      	ldrb	r3, [r3, #0]
}
 801b48c:	4618      	mov	r0, r3
 801b48e:	370c      	adds	r7, #12
 801b490:	46bd      	mov	sp, r7
 801b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b496:	4770      	bx	lr

0801b498 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b498:	b480      	push	{r7}
 801b49a:	b085      	sub	sp, #20
 801b49c:	af00      	add	r7, sp, #0
 801b49e:	6078      	str	r0, [r7, #4]
 801b4a0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b4a2:	2300      	movs	r3, #0
 801b4a4:	60bb      	str	r3, [r7, #8]
 801b4a6:	68bb      	ldr	r3, [r7, #8]
 801b4a8:	60fb      	str	r3, [r7, #12]
 801b4aa:	e029      	b.n	801b500 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801b4ac:	4a27      	ldr	r2, [pc, #156]	@ (801b54c <chk_lock+0xb4>)
 801b4ae:	68fb      	ldr	r3, [r7, #12]
 801b4b0:	011b      	lsls	r3, r3, #4
 801b4b2:	4413      	add	r3, r2
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d01d      	beq.n	801b4f6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b4ba:	4a24      	ldr	r2, [pc, #144]	@ (801b54c <chk_lock+0xb4>)
 801b4bc:	68fb      	ldr	r3, [r7, #12]
 801b4be:	011b      	lsls	r3, r3, #4
 801b4c0:	4413      	add	r3, r2
 801b4c2:	681a      	ldr	r2, [r3, #0]
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	429a      	cmp	r2, r3
 801b4ca:	d116      	bne.n	801b4fa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801b4cc:	4a1f      	ldr	r2, [pc, #124]	@ (801b54c <chk_lock+0xb4>)
 801b4ce:	68fb      	ldr	r3, [r7, #12]
 801b4d0:	011b      	lsls	r3, r3, #4
 801b4d2:	4413      	add	r3, r2
 801b4d4:	3304      	adds	r3, #4
 801b4d6:	681a      	ldr	r2, [r3, #0]
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b4dc:	429a      	cmp	r2, r3
 801b4de:	d10c      	bne.n	801b4fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b4e0:	4a1a      	ldr	r2, [pc, #104]	@ (801b54c <chk_lock+0xb4>)
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	011b      	lsls	r3, r3, #4
 801b4e6:	4413      	add	r3, r2
 801b4e8:	3308      	adds	r3, #8
 801b4ea:	681a      	ldr	r2, [r3, #0]
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801b4f0:	429a      	cmp	r2, r3
 801b4f2:	d102      	bne.n	801b4fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b4f4:	e007      	b.n	801b506 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801b4f6:	2301      	movs	r3, #1
 801b4f8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b4fa:	68fb      	ldr	r3, [r7, #12]
 801b4fc:	3301      	adds	r3, #1
 801b4fe:	60fb      	str	r3, [r7, #12]
 801b500:	68fb      	ldr	r3, [r7, #12]
 801b502:	2b01      	cmp	r3, #1
 801b504:	d9d2      	bls.n	801b4ac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801b506:	68fb      	ldr	r3, [r7, #12]
 801b508:	2b02      	cmp	r3, #2
 801b50a:	d109      	bne.n	801b520 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801b50c:	68bb      	ldr	r3, [r7, #8]
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d102      	bne.n	801b518 <chk_lock+0x80>
 801b512:	683b      	ldr	r3, [r7, #0]
 801b514:	2b02      	cmp	r3, #2
 801b516:	d101      	bne.n	801b51c <chk_lock+0x84>
 801b518:	2300      	movs	r3, #0
 801b51a:	e010      	b.n	801b53e <chk_lock+0xa6>
 801b51c:	2312      	movs	r3, #18
 801b51e:	e00e      	b.n	801b53e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801b520:	683b      	ldr	r3, [r7, #0]
 801b522:	2b00      	cmp	r3, #0
 801b524:	d108      	bne.n	801b538 <chk_lock+0xa0>
 801b526:	4a09      	ldr	r2, [pc, #36]	@ (801b54c <chk_lock+0xb4>)
 801b528:	68fb      	ldr	r3, [r7, #12]
 801b52a:	011b      	lsls	r3, r3, #4
 801b52c:	4413      	add	r3, r2
 801b52e:	330c      	adds	r3, #12
 801b530:	881b      	ldrh	r3, [r3, #0]
 801b532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b536:	d101      	bne.n	801b53c <chk_lock+0xa4>
 801b538:	2310      	movs	r3, #16
 801b53a:	e000      	b.n	801b53e <chk_lock+0xa6>
 801b53c:	2300      	movs	r3, #0
}
 801b53e:	4618      	mov	r0, r3
 801b540:	3714      	adds	r7, #20
 801b542:	46bd      	mov	sp, r7
 801b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b548:	4770      	bx	lr
 801b54a:	bf00      	nop
 801b54c:	24000a90 	.word	0x24000a90

0801b550 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801b550:	b480      	push	{r7}
 801b552:	b083      	sub	sp, #12
 801b554:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b556:	2300      	movs	r3, #0
 801b558:	607b      	str	r3, [r7, #4]
 801b55a:	e002      	b.n	801b562 <enq_lock+0x12>
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	3301      	adds	r3, #1
 801b560:	607b      	str	r3, [r7, #4]
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	2b01      	cmp	r3, #1
 801b566:	d806      	bhi.n	801b576 <enq_lock+0x26>
 801b568:	4a09      	ldr	r2, [pc, #36]	@ (801b590 <enq_lock+0x40>)
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	011b      	lsls	r3, r3, #4
 801b56e:	4413      	add	r3, r2
 801b570:	681b      	ldr	r3, [r3, #0]
 801b572:	2b00      	cmp	r3, #0
 801b574:	d1f2      	bne.n	801b55c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	2b02      	cmp	r3, #2
 801b57a:	bf14      	ite	ne
 801b57c:	2301      	movne	r3, #1
 801b57e:	2300      	moveq	r3, #0
 801b580:	b2db      	uxtb	r3, r3
}
 801b582:	4618      	mov	r0, r3
 801b584:	370c      	adds	r7, #12
 801b586:	46bd      	mov	sp, r7
 801b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b58c:	4770      	bx	lr
 801b58e:	bf00      	nop
 801b590:	24000a90 	.word	0x24000a90

0801b594 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b594:	b480      	push	{r7}
 801b596:	b085      	sub	sp, #20
 801b598:	af00      	add	r7, sp, #0
 801b59a:	6078      	str	r0, [r7, #4]
 801b59c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b59e:	2300      	movs	r3, #0
 801b5a0:	60fb      	str	r3, [r7, #12]
 801b5a2:	e01f      	b.n	801b5e4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801b5a4:	4a41      	ldr	r2, [pc, #260]	@ (801b6ac <inc_lock+0x118>)
 801b5a6:	68fb      	ldr	r3, [r7, #12]
 801b5a8:	011b      	lsls	r3, r3, #4
 801b5aa:	4413      	add	r3, r2
 801b5ac:	681a      	ldr	r2, [r3, #0]
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	429a      	cmp	r2, r3
 801b5b4:	d113      	bne.n	801b5de <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801b5b6:	4a3d      	ldr	r2, [pc, #244]	@ (801b6ac <inc_lock+0x118>)
 801b5b8:	68fb      	ldr	r3, [r7, #12]
 801b5ba:	011b      	lsls	r3, r3, #4
 801b5bc:	4413      	add	r3, r2
 801b5be:	3304      	adds	r3, #4
 801b5c0:	681a      	ldr	r2, [r3, #0]
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801b5c6:	429a      	cmp	r2, r3
 801b5c8:	d109      	bne.n	801b5de <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801b5ca:	4a38      	ldr	r2, [pc, #224]	@ (801b6ac <inc_lock+0x118>)
 801b5cc:	68fb      	ldr	r3, [r7, #12]
 801b5ce:	011b      	lsls	r3, r3, #4
 801b5d0:	4413      	add	r3, r2
 801b5d2:	3308      	adds	r3, #8
 801b5d4:	681a      	ldr	r2, [r3, #0]
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801b5da:	429a      	cmp	r2, r3
 801b5dc:	d006      	beq.n	801b5ec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b5de:	68fb      	ldr	r3, [r7, #12]
 801b5e0:	3301      	adds	r3, #1
 801b5e2:	60fb      	str	r3, [r7, #12]
 801b5e4:	68fb      	ldr	r3, [r7, #12]
 801b5e6:	2b01      	cmp	r3, #1
 801b5e8:	d9dc      	bls.n	801b5a4 <inc_lock+0x10>
 801b5ea:	e000      	b.n	801b5ee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801b5ec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801b5ee:	68fb      	ldr	r3, [r7, #12]
 801b5f0:	2b02      	cmp	r3, #2
 801b5f2:	d132      	bne.n	801b65a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b5f4:	2300      	movs	r3, #0
 801b5f6:	60fb      	str	r3, [r7, #12]
 801b5f8:	e002      	b.n	801b600 <inc_lock+0x6c>
 801b5fa:	68fb      	ldr	r3, [r7, #12]
 801b5fc:	3301      	adds	r3, #1
 801b5fe:	60fb      	str	r3, [r7, #12]
 801b600:	68fb      	ldr	r3, [r7, #12]
 801b602:	2b01      	cmp	r3, #1
 801b604:	d806      	bhi.n	801b614 <inc_lock+0x80>
 801b606:	4a29      	ldr	r2, [pc, #164]	@ (801b6ac <inc_lock+0x118>)
 801b608:	68fb      	ldr	r3, [r7, #12]
 801b60a:	011b      	lsls	r3, r3, #4
 801b60c:	4413      	add	r3, r2
 801b60e:	681b      	ldr	r3, [r3, #0]
 801b610:	2b00      	cmp	r3, #0
 801b612:	d1f2      	bne.n	801b5fa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801b614:	68fb      	ldr	r3, [r7, #12]
 801b616:	2b02      	cmp	r3, #2
 801b618:	d101      	bne.n	801b61e <inc_lock+0x8a>
 801b61a:	2300      	movs	r3, #0
 801b61c:	e040      	b.n	801b6a0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	681a      	ldr	r2, [r3, #0]
 801b622:	4922      	ldr	r1, [pc, #136]	@ (801b6ac <inc_lock+0x118>)
 801b624:	68fb      	ldr	r3, [r7, #12]
 801b626:	011b      	lsls	r3, r3, #4
 801b628:	440b      	add	r3, r1
 801b62a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	689a      	ldr	r2, [r3, #8]
 801b630:	491e      	ldr	r1, [pc, #120]	@ (801b6ac <inc_lock+0x118>)
 801b632:	68fb      	ldr	r3, [r7, #12]
 801b634:	011b      	lsls	r3, r3, #4
 801b636:	440b      	add	r3, r1
 801b638:	3304      	adds	r3, #4
 801b63a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	695a      	ldr	r2, [r3, #20]
 801b640:	491a      	ldr	r1, [pc, #104]	@ (801b6ac <inc_lock+0x118>)
 801b642:	68fb      	ldr	r3, [r7, #12]
 801b644:	011b      	lsls	r3, r3, #4
 801b646:	440b      	add	r3, r1
 801b648:	3308      	adds	r3, #8
 801b64a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801b64c:	4a17      	ldr	r2, [pc, #92]	@ (801b6ac <inc_lock+0x118>)
 801b64e:	68fb      	ldr	r3, [r7, #12]
 801b650:	011b      	lsls	r3, r3, #4
 801b652:	4413      	add	r3, r2
 801b654:	330c      	adds	r3, #12
 801b656:	2200      	movs	r2, #0
 801b658:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801b65a:	683b      	ldr	r3, [r7, #0]
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	d009      	beq.n	801b674 <inc_lock+0xe0>
 801b660:	4a12      	ldr	r2, [pc, #72]	@ (801b6ac <inc_lock+0x118>)
 801b662:	68fb      	ldr	r3, [r7, #12]
 801b664:	011b      	lsls	r3, r3, #4
 801b666:	4413      	add	r3, r2
 801b668:	330c      	adds	r3, #12
 801b66a:	881b      	ldrh	r3, [r3, #0]
 801b66c:	2b00      	cmp	r3, #0
 801b66e:	d001      	beq.n	801b674 <inc_lock+0xe0>
 801b670:	2300      	movs	r3, #0
 801b672:	e015      	b.n	801b6a0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801b674:	683b      	ldr	r3, [r7, #0]
 801b676:	2b00      	cmp	r3, #0
 801b678:	d108      	bne.n	801b68c <inc_lock+0xf8>
 801b67a:	4a0c      	ldr	r2, [pc, #48]	@ (801b6ac <inc_lock+0x118>)
 801b67c:	68fb      	ldr	r3, [r7, #12]
 801b67e:	011b      	lsls	r3, r3, #4
 801b680:	4413      	add	r3, r2
 801b682:	330c      	adds	r3, #12
 801b684:	881b      	ldrh	r3, [r3, #0]
 801b686:	3301      	adds	r3, #1
 801b688:	b29a      	uxth	r2, r3
 801b68a:	e001      	b.n	801b690 <inc_lock+0xfc>
 801b68c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b690:	4906      	ldr	r1, [pc, #24]	@ (801b6ac <inc_lock+0x118>)
 801b692:	68fb      	ldr	r3, [r7, #12]
 801b694:	011b      	lsls	r3, r3, #4
 801b696:	440b      	add	r3, r1
 801b698:	330c      	adds	r3, #12
 801b69a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801b69c:	68fb      	ldr	r3, [r7, #12]
 801b69e:	3301      	adds	r3, #1
}
 801b6a0:	4618      	mov	r0, r3
 801b6a2:	3714      	adds	r7, #20
 801b6a4:	46bd      	mov	sp, r7
 801b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6aa:	4770      	bx	lr
 801b6ac:	24000a90 	.word	0x24000a90

0801b6b0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801b6b0:	b480      	push	{r7}
 801b6b2:	b085      	sub	sp, #20
 801b6b4:	af00      	add	r7, sp, #0
 801b6b6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	3b01      	subs	r3, #1
 801b6bc:	607b      	str	r3, [r7, #4]
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	2b01      	cmp	r3, #1
 801b6c2:	d825      	bhi.n	801b710 <dec_lock+0x60>
		n = Files[i].ctr;
 801b6c4:	4a17      	ldr	r2, [pc, #92]	@ (801b724 <dec_lock+0x74>)
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	011b      	lsls	r3, r3, #4
 801b6ca:	4413      	add	r3, r2
 801b6cc:	330c      	adds	r3, #12
 801b6ce:	881b      	ldrh	r3, [r3, #0]
 801b6d0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801b6d2:	89fb      	ldrh	r3, [r7, #14]
 801b6d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b6d8:	d101      	bne.n	801b6de <dec_lock+0x2e>
 801b6da:	2300      	movs	r3, #0
 801b6dc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801b6de:	89fb      	ldrh	r3, [r7, #14]
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	d002      	beq.n	801b6ea <dec_lock+0x3a>
 801b6e4:	89fb      	ldrh	r3, [r7, #14]
 801b6e6:	3b01      	subs	r3, #1
 801b6e8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801b6ea:	4a0e      	ldr	r2, [pc, #56]	@ (801b724 <dec_lock+0x74>)
 801b6ec:	687b      	ldr	r3, [r7, #4]
 801b6ee:	011b      	lsls	r3, r3, #4
 801b6f0:	4413      	add	r3, r2
 801b6f2:	330c      	adds	r3, #12
 801b6f4:	89fa      	ldrh	r2, [r7, #14]
 801b6f6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801b6f8:	89fb      	ldrh	r3, [r7, #14]
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	d105      	bne.n	801b70a <dec_lock+0x5a>
 801b6fe:	4a09      	ldr	r2, [pc, #36]	@ (801b724 <dec_lock+0x74>)
 801b700:	687b      	ldr	r3, [r7, #4]
 801b702:	011b      	lsls	r3, r3, #4
 801b704:	4413      	add	r3, r2
 801b706:	2200      	movs	r2, #0
 801b708:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801b70a:	2300      	movs	r3, #0
 801b70c:	737b      	strb	r3, [r7, #13]
 801b70e:	e001      	b.n	801b714 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801b710:	2302      	movs	r3, #2
 801b712:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801b714:	7b7b      	ldrb	r3, [r7, #13]
}
 801b716:	4618      	mov	r0, r3
 801b718:	3714      	adds	r7, #20
 801b71a:	46bd      	mov	sp, r7
 801b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b720:	4770      	bx	lr
 801b722:	bf00      	nop
 801b724:	24000a90 	.word	0x24000a90

0801b728 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801b728:	b480      	push	{r7}
 801b72a:	b085      	sub	sp, #20
 801b72c:	af00      	add	r7, sp, #0
 801b72e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801b730:	2300      	movs	r3, #0
 801b732:	60fb      	str	r3, [r7, #12]
 801b734:	e010      	b.n	801b758 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801b736:	4a0d      	ldr	r2, [pc, #52]	@ (801b76c <clear_lock+0x44>)
 801b738:	68fb      	ldr	r3, [r7, #12]
 801b73a:	011b      	lsls	r3, r3, #4
 801b73c:	4413      	add	r3, r2
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	687a      	ldr	r2, [r7, #4]
 801b742:	429a      	cmp	r2, r3
 801b744:	d105      	bne.n	801b752 <clear_lock+0x2a>
 801b746:	4a09      	ldr	r2, [pc, #36]	@ (801b76c <clear_lock+0x44>)
 801b748:	68fb      	ldr	r3, [r7, #12]
 801b74a:	011b      	lsls	r3, r3, #4
 801b74c:	4413      	add	r3, r2
 801b74e:	2200      	movs	r2, #0
 801b750:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801b752:	68fb      	ldr	r3, [r7, #12]
 801b754:	3301      	adds	r3, #1
 801b756:	60fb      	str	r3, [r7, #12]
 801b758:	68fb      	ldr	r3, [r7, #12]
 801b75a:	2b01      	cmp	r3, #1
 801b75c:	d9eb      	bls.n	801b736 <clear_lock+0xe>
	}
}
 801b75e:	bf00      	nop
 801b760:	bf00      	nop
 801b762:	3714      	adds	r7, #20
 801b764:	46bd      	mov	sp, r7
 801b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b76a:	4770      	bx	lr
 801b76c:	24000a90 	.word	0x24000a90

0801b770 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801b770:	b580      	push	{r7, lr}
 801b772:	b086      	sub	sp, #24
 801b774:	af00      	add	r7, sp, #0
 801b776:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801b778:	2300      	movs	r3, #0
 801b77a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801b77c:	687b      	ldr	r3, [r7, #4]
 801b77e:	78db      	ldrb	r3, [r3, #3]
 801b780:	2b00      	cmp	r3, #0
 801b782:	d034      	beq.n	801b7ee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b788:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	7858      	ldrb	r0, [r3, #1]
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801b794:	2301      	movs	r3, #1
 801b796:	697a      	ldr	r2, [r7, #20]
 801b798:	f7ff fd40 	bl	801b21c <disk_write>
 801b79c:	4603      	mov	r3, r0
 801b79e:	2b00      	cmp	r3, #0
 801b7a0:	d002      	beq.n	801b7a8 <sync_window+0x38>
			res = FR_DISK_ERR;
 801b7a2:	2301      	movs	r3, #1
 801b7a4:	73fb      	strb	r3, [r7, #15]
 801b7a6:	e022      	b.n	801b7ee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	2200      	movs	r2, #0
 801b7ac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	6a1b      	ldr	r3, [r3, #32]
 801b7b2:	697a      	ldr	r2, [r7, #20]
 801b7b4:	1ad2      	subs	r2, r2, r3
 801b7b6:	687b      	ldr	r3, [r7, #4]
 801b7b8:	699b      	ldr	r3, [r3, #24]
 801b7ba:	429a      	cmp	r2, r3
 801b7bc:	d217      	bcs.n	801b7ee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	789b      	ldrb	r3, [r3, #2]
 801b7c2:	613b      	str	r3, [r7, #16]
 801b7c4:	e010      	b.n	801b7e8 <sync_window+0x78>
					wsect += fs->fsize;
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	699b      	ldr	r3, [r3, #24]
 801b7ca:	697a      	ldr	r2, [r7, #20]
 801b7cc:	4413      	add	r3, r2
 801b7ce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	7858      	ldrb	r0, [r3, #1]
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801b7da:	2301      	movs	r3, #1
 801b7dc:	697a      	ldr	r2, [r7, #20]
 801b7de:	f7ff fd1d 	bl	801b21c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b7e2:	693b      	ldr	r3, [r7, #16]
 801b7e4:	3b01      	subs	r3, #1
 801b7e6:	613b      	str	r3, [r7, #16]
 801b7e8:	693b      	ldr	r3, [r7, #16]
 801b7ea:	2b01      	cmp	r3, #1
 801b7ec:	d8eb      	bhi.n	801b7c6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801b7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 801b7f0:	4618      	mov	r0, r3
 801b7f2:	3718      	adds	r7, #24
 801b7f4:	46bd      	mov	sp, r7
 801b7f6:	bd80      	pop	{r7, pc}

0801b7f8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801b7f8:	b580      	push	{r7, lr}
 801b7fa:	b084      	sub	sp, #16
 801b7fc:	af00      	add	r7, sp, #0
 801b7fe:	6078      	str	r0, [r7, #4]
 801b800:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801b802:	2300      	movs	r3, #0
 801b804:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b80a:	683a      	ldr	r2, [r7, #0]
 801b80c:	429a      	cmp	r2, r3
 801b80e:	d01b      	beq.n	801b848 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801b810:	6878      	ldr	r0, [r7, #4]
 801b812:	f7ff ffad 	bl	801b770 <sync_window>
 801b816:	4603      	mov	r3, r0
 801b818:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801b81a:	7bfb      	ldrb	r3, [r7, #15]
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	d113      	bne.n	801b848 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	7858      	ldrb	r0, [r3, #1]
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801b82a:	2301      	movs	r3, #1
 801b82c:	683a      	ldr	r2, [r7, #0]
 801b82e:	f7ff fcd5 	bl	801b1dc <disk_read>
 801b832:	4603      	mov	r3, r0
 801b834:	2b00      	cmp	r3, #0
 801b836:	d004      	beq.n	801b842 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801b838:	f04f 33ff 	mov.w	r3, #4294967295
 801b83c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801b83e:	2301      	movs	r3, #1
 801b840:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	683a      	ldr	r2, [r7, #0]
 801b846:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 801b848:	7bfb      	ldrb	r3, [r7, #15]
}
 801b84a:	4618      	mov	r0, r3
 801b84c:	3710      	adds	r7, #16
 801b84e:	46bd      	mov	sp, r7
 801b850:	bd80      	pop	{r7, pc}
	...

0801b854 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801b854:	b580      	push	{r7, lr}
 801b856:	b084      	sub	sp, #16
 801b858:	af00      	add	r7, sp, #0
 801b85a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801b85c:	6878      	ldr	r0, [r7, #4]
 801b85e:	f7ff ff87 	bl	801b770 <sync_window>
 801b862:	4603      	mov	r3, r0
 801b864:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801b866:	7bfb      	ldrb	r3, [r7, #15]
 801b868:	2b00      	cmp	r3, #0
 801b86a:	d158      	bne.n	801b91e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	781b      	ldrb	r3, [r3, #0]
 801b870:	2b03      	cmp	r3, #3
 801b872:	d148      	bne.n	801b906 <sync_fs+0xb2>
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	791b      	ldrb	r3, [r3, #4]
 801b878:	2b01      	cmp	r3, #1
 801b87a:	d144      	bne.n	801b906 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	3330      	adds	r3, #48	@ 0x30
 801b880:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b884:	2100      	movs	r1, #0
 801b886:	4618      	mov	r0, r3
 801b888:	f7ff fda9 	bl	801b3de <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	3330      	adds	r3, #48	@ 0x30
 801b890:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b894:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801b898:	4618      	mov	r0, r3
 801b89a:	f7ff fd38 	bl	801b30e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	3330      	adds	r3, #48	@ 0x30
 801b8a2:	4921      	ldr	r1, [pc, #132]	@ (801b928 <sync_fs+0xd4>)
 801b8a4:	4618      	mov	r0, r3
 801b8a6:	f7ff fd4d 	bl	801b344 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	3330      	adds	r3, #48	@ 0x30
 801b8ae:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b8b2:	491e      	ldr	r1, [pc, #120]	@ (801b92c <sync_fs+0xd8>)
 801b8b4:	4618      	mov	r0, r3
 801b8b6:	f7ff fd45 	bl	801b344 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	3330      	adds	r3, #48	@ 0x30
 801b8be:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	691b      	ldr	r3, [r3, #16]
 801b8c6:	4619      	mov	r1, r3
 801b8c8:	4610      	mov	r0, r2
 801b8ca:	f7ff fd3b 	bl	801b344 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	3330      	adds	r3, #48	@ 0x30
 801b8d2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	68db      	ldr	r3, [r3, #12]
 801b8da:	4619      	mov	r1, r3
 801b8dc:	4610      	mov	r0, r2
 801b8de:	f7ff fd31 	bl	801b344 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	69db      	ldr	r3, [r3, #28]
 801b8e6:	1c5a      	adds	r2, r3, #1
 801b8e8:	687b      	ldr	r3, [r7, #4]
 801b8ea:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	7858      	ldrb	r0, [r3, #1]
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b8fa:	2301      	movs	r3, #1
 801b8fc:	f7ff fc8e 	bl	801b21c <disk_write>
			fs->fsi_flag = 0;
 801b900:	687b      	ldr	r3, [r7, #4]
 801b902:	2200      	movs	r2, #0
 801b904:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	785b      	ldrb	r3, [r3, #1]
 801b90a:	2200      	movs	r2, #0
 801b90c:	2100      	movs	r1, #0
 801b90e:	4618      	mov	r0, r3
 801b910:	f7ff fca4 	bl	801b25c <disk_ioctl>
 801b914:	4603      	mov	r3, r0
 801b916:	2b00      	cmp	r3, #0
 801b918:	d001      	beq.n	801b91e <sync_fs+0xca>
 801b91a:	2301      	movs	r3, #1
 801b91c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801b91e:	7bfb      	ldrb	r3, [r7, #15]
}
 801b920:	4618      	mov	r0, r3
 801b922:	3710      	adds	r7, #16
 801b924:	46bd      	mov	sp, r7
 801b926:	bd80      	pop	{r7, pc}
 801b928:	41615252 	.word	0x41615252
 801b92c:	61417272 	.word	0x61417272

0801b930 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801b930:	b480      	push	{r7}
 801b932:	b083      	sub	sp, #12
 801b934:	af00      	add	r7, sp, #0
 801b936:	6078      	str	r0, [r7, #4]
 801b938:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801b93a:	683b      	ldr	r3, [r7, #0]
 801b93c:	3b02      	subs	r3, #2
 801b93e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	695b      	ldr	r3, [r3, #20]
 801b944:	3b02      	subs	r3, #2
 801b946:	683a      	ldr	r2, [r7, #0]
 801b948:	429a      	cmp	r2, r3
 801b94a:	d301      	bcc.n	801b950 <clust2sect+0x20>
 801b94c:	2300      	movs	r3, #0
 801b94e:	e008      	b.n	801b962 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	895b      	ldrh	r3, [r3, #10]
 801b954:	461a      	mov	r2, r3
 801b956:	683b      	ldr	r3, [r7, #0]
 801b958:	fb03 f202 	mul.w	r2, r3, r2
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b960:	4413      	add	r3, r2
}
 801b962:	4618      	mov	r0, r3
 801b964:	370c      	adds	r7, #12
 801b966:	46bd      	mov	sp, r7
 801b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b96c:	4770      	bx	lr

0801b96e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801b96e:	b580      	push	{r7, lr}
 801b970:	b086      	sub	sp, #24
 801b972:	af00      	add	r7, sp, #0
 801b974:	6078      	str	r0, [r7, #4]
 801b976:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801b97e:	683b      	ldr	r3, [r7, #0]
 801b980:	2b01      	cmp	r3, #1
 801b982:	d904      	bls.n	801b98e <get_fat+0x20>
 801b984:	693b      	ldr	r3, [r7, #16]
 801b986:	695b      	ldr	r3, [r3, #20]
 801b988:	683a      	ldr	r2, [r7, #0]
 801b98a:	429a      	cmp	r2, r3
 801b98c:	d302      	bcc.n	801b994 <get_fat+0x26>
		val = 1;	/* Internal error */
 801b98e:	2301      	movs	r3, #1
 801b990:	617b      	str	r3, [r7, #20]
 801b992:	e08e      	b.n	801bab2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801b994:	f04f 33ff 	mov.w	r3, #4294967295
 801b998:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801b99a:	693b      	ldr	r3, [r7, #16]
 801b99c:	781b      	ldrb	r3, [r3, #0]
 801b99e:	2b03      	cmp	r3, #3
 801b9a0:	d061      	beq.n	801ba66 <get_fat+0xf8>
 801b9a2:	2b03      	cmp	r3, #3
 801b9a4:	dc7b      	bgt.n	801ba9e <get_fat+0x130>
 801b9a6:	2b01      	cmp	r3, #1
 801b9a8:	d002      	beq.n	801b9b0 <get_fat+0x42>
 801b9aa:	2b02      	cmp	r3, #2
 801b9ac:	d041      	beq.n	801ba32 <get_fat+0xc4>
 801b9ae:	e076      	b.n	801ba9e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801b9b0:	683b      	ldr	r3, [r7, #0]
 801b9b2:	60fb      	str	r3, [r7, #12]
 801b9b4:	68fb      	ldr	r3, [r7, #12]
 801b9b6:	085b      	lsrs	r3, r3, #1
 801b9b8:	68fa      	ldr	r2, [r7, #12]
 801b9ba:	4413      	add	r3, r2
 801b9bc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b9be:	693b      	ldr	r3, [r7, #16]
 801b9c0:	6a1a      	ldr	r2, [r3, #32]
 801b9c2:	68fb      	ldr	r3, [r7, #12]
 801b9c4:	0a5b      	lsrs	r3, r3, #9
 801b9c6:	4413      	add	r3, r2
 801b9c8:	4619      	mov	r1, r3
 801b9ca:	6938      	ldr	r0, [r7, #16]
 801b9cc:	f7ff ff14 	bl	801b7f8 <move_window>
 801b9d0:	4603      	mov	r3, r0
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d166      	bne.n	801baa4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 801b9d6:	68fb      	ldr	r3, [r7, #12]
 801b9d8:	1c5a      	adds	r2, r3, #1
 801b9da:	60fa      	str	r2, [r7, #12]
 801b9dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b9e0:	693a      	ldr	r2, [r7, #16]
 801b9e2:	4413      	add	r3, r2
 801b9e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b9e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b9ea:	693b      	ldr	r3, [r7, #16]
 801b9ec:	6a1a      	ldr	r2, [r3, #32]
 801b9ee:	68fb      	ldr	r3, [r7, #12]
 801b9f0:	0a5b      	lsrs	r3, r3, #9
 801b9f2:	4413      	add	r3, r2
 801b9f4:	4619      	mov	r1, r3
 801b9f6:	6938      	ldr	r0, [r7, #16]
 801b9f8:	f7ff fefe 	bl	801b7f8 <move_window>
 801b9fc:	4603      	mov	r3, r0
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	d152      	bne.n	801baa8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 801ba02:	68fb      	ldr	r3, [r7, #12]
 801ba04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ba08:	693a      	ldr	r2, [r7, #16]
 801ba0a:	4413      	add	r3, r2
 801ba0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801ba10:	021b      	lsls	r3, r3, #8
 801ba12:	68ba      	ldr	r2, [r7, #8]
 801ba14:	4313      	orrs	r3, r2
 801ba16:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801ba18:	683b      	ldr	r3, [r7, #0]
 801ba1a:	f003 0301 	and.w	r3, r3, #1
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d002      	beq.n	801ba28 <get_fat+0xba>
 801ba22:	68bb      	ldr	r3, [r7, #8]
 801ba24:	091b      	lsrs	r3, r3, #4
 801ba26:	e002      	b.n	801ba2e <get_fat+0xc0>
 801ba28:	68bb      	ldr	r3, [r7, #8]
 801ba2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ba2e:	617b      	str	r3, [r7, #20]
			break;
 801ba30:	e03f      	b.n	801bab2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801ba32:	693b      	ldr	r3, [r7, #16]
 801ba34:	6a1a      	ldr	r2, [r3, #32]
 801ba36:	683b      	ldr	r3, [r7, #0]
 801ba38:	0a1b      	lsrs	r3, r3, #8
 801ba3a:	4413      	add	r3, r2
 801ba3c:	4619      	mov	r1, r3
 801ba3e:	6938      	ldr	r0, [r7, #16]
 801ba40:	f7ff feda 	bl	801b7f8 <move_window>
 801ba44:	4603      	mov	r3, r0
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	d130      	bne.n	801baac <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801ba4a:	693b      	ldr	r3, [r7, #16]
 801ba4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801ba50:	683b      	ldr	r3, [r7, #0]
 801ba52:	005b      	lsls	r3, r3, #1
 801ba54:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801ba58:	4413      	add	r3, r2
 801ba5a:	4618      	mov	r0, r3
 801ba5c:	f7ff fc1c 	bl	801b298 <ld_word>
 801ba60:	4603      	mov	r3, r0
 801ba62:	617b      	str	r3, [r7, #20]
			break;
 801ba64:	e025      	b.n	801bab2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801ba66:	693b      	ldr	r3, [r7, #16]
 801ba68:	6a1a      	ldr	r2, [r3, #32]
 801ba6a:	683b      	ldr	r3, [r7, #0]
 801ba6c:	09db      	lsrs	r3, r3, #7
 801ba6e:	4413      	add	r3, r2
 801ba70:	4619      	mov	r1, r3
 801ba72:	6938      	ldr	r0, [r7, #16]
 801ba74:	f7ff fec0 	bl	801b7f8 <move_window>
 801ba78:	4603      	mov	r3, r0
 801ba7a:	2b00      	cmp	r3, #0
 801ba7c:	d118      	bne.n	801bab0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801ba7e:	693b      	ldr	r3, [r7, #16]
 801ba80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801ba84:	683b      	ldr	r3, [r7, #0]
 801ba86:	009b      	lsls	r3, r3, #2
 801ba88:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801ba8c:	4413      	add	r3, r2
 801ba8e:	4618      	mov	r0, r3
 801ba90:	f7ff fc1a 	bl	801b2c8 <ld_dword>
 801ba94:	4603      	mov	r3, r0
 801ba96:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801ba9a:	617b      	str	r3, [r7, #20]
			break;
 801ba9c:	e009      	b.n	801bab2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801ba9e:	2301      	movs	r3, #1
 801baa0:	617b      	str	r3, [r7, #20]
 801baa2:	e006      	b.n	801bab2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801baa4:	bf00      	nop
 801baa6:	e004      	b.n	801bab2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801baa8:	bf00      	nop
 801baaa:	e002      	b.n	801bab2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801baac:	bf00      	nop
 801baae:	e000      	b.n	801bab2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801bab0:	bf00      	nop
		}
	}

	return val;
 801bab2:	697b      	ldr	r3, [r7, #20]
}
 801bab4:	4618      	mov	r0, r3
 801bab6:	3718      	adds	r7, #24
 801bab8:	46bd      	mov	sp, r7
 801baba:	bd80      	pop	{r7, pc}

0801babc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801babc:	b590      	push	{r4, r7, lr}
 801babe:	b089      	sub	sp, #36	@ 0x24
 801bac0:	af00      	add	r7, sp, #0
 801bac2:	60f8      	str	r0, [r7, #12]
 801bac4:	60b9      	str	r1, [r7, #8]
 801bac6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801bac8:	2302      	movs	r3, #2
 801baca:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801bacc:	68bb      	ldr	r3, [r7, #8]
 801bace:	2b01      	cmp	r3, #1
 801bad0:	f240 80d9 	bls.w	801bc86 <put_fat+0x1ca>
 801bad4:	68fb      	ldr	r3, [r7, #12]
 801bad6:	695b      	ldr	r3, [r3, #20]
 801bad8:	68ba      	ldr	r2, [r7, #8]
 801bada:	429a      	cmp	r2, r3
 801badc:	f080 80d3 	bcs.w	801bc86 <put_fat+0x1ca>
		switch (fs->fs_type) {
 801bae0:	68fb      	ldr	r3, [r7, #12]
 801bae2:	781b      	ldrb	r3, [r3, #0]
 801bae4:	2b03      	cmp	r3, #3
 801bae6:	f000 8096 	beq.w	801bc16 <put_fat+0x15a>
 801baea:	2b03      	cmp	r3, #3
 801baec:	f300 80cb 	bgt.w	801bc86 <put_fat+0x1ca>
 801baf0:	2b01      	cmp	r3, #1
 801baf2:	d002      	beq.n	801bafa <put_fat+0x3e>
 801baf4:	2b02      	cmp	r3, #2
 801baf6:	d06e      	beq.n	801bbd6 <put_fat+0x11a>
 801baf8:	e0c5      	b.n	801bc86 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801bafa:	68bb      	ldr	r3, [r7, #8]
 801bafc:	61bb      	str	r3, [r7, #24]
 801bafe:	69bb      	ldr	r3, [r7, #24]
 801bb00:	085b      	lsrs	r3, r3, #1
 801bb02:	69ba      	ldr	r2, [r7, #24]
 801bb04:	4413      	add	r3, r2
 801bb06:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801bb08:	68fb      	ldr	r3, [r7, #12]
 801bb0a:	6a1a      	ldr	r2, [r3, #32]
 801bb0c:	69bb      	ldr	r3, [r7, #24]
 801bb0e:	0a5b      	lsrs	r3, r3, #9
 801bb10:	4413      	add	r3, r2
 801bb12:	4619      	mov	r1, r3
 801bb14:	68f8      	ldr	r0, [r7, #12]
 801bb16:	f7ff fe6f 	bl	801b7f8 <move_window>
 801bb1a:	4603      	mov	r3, r0
 801bb1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801bb1e:	7ffb      	ldrb	r3, [r7, #31]
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	f040 80a9 	bne.w	801bc78 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801bb26:	68fb      	ldr	r3, [r7, #12]
 801bb28:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801bb2c:	69bb      	ldr	r3, [r7, #24]
 801bb2e:	1c59      	adds	r1, r3, #1
 801bb30:	61b9      	str	r1, [r7, #24]
 801bb32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bb36:	4413      	add	r3, r2
 801bb38:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801bb3a:	68bb      	ldr	r3, [r7, #8]
 801bb3c:	f003 0301 	and.w	r3, r3, #1
 801bb40:	2b00      	cmp	r3, #0
 801bb42:	d00d      	beq.n	801bb60 <put_fat+0xa4>
 801bb44:	697b      	ldr	r3, [r7, #20]
 801bb46:	781b      	ldrb	r3, [r3, #0]
 801bb48:	b25b      	sxtb	r3, r3
 801bb4a:	f003 030f 	and.w	r3, r3, #15
 801bb4e:	b25a      	sxtb	r2, r3
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	b2db      	uxtb	r3, r3
 801bb54:	011b      	lsls	r3, r3, #4
 801bb56:	b25b      	sxtb	r3, r3
 801bb58:	4313      	orrs	r3, r2
 801bb5a:	b25b      	sxtb	r3, r3
 801bb5c:	b2db      	uxtb	r3, r3
 801bb5e:	e001      	b.n	801bb64 <put_fat+0xa8>
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	b2db      	uxtb	r3, r3
 801bb64:	697a      	ldr	r2, [r7, #20]
 801bb66:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801bb68:	68fb      	ldr	r3, [r7, #12]
 801bb6a:	2201      	movs	r2, #1
 801bb6c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801bb6e:	68fb      	ldr	r3, [r7, #12]
 801bb70:	6a1a      	ldr	r2, [r3, #32]
 801bb72:	69bb      	ldr	r3, [r7, #24]
 801bb74:	0a5b      	lsrs	r3, r3, #9
 801bb76:	4413      	add	r3, r2
 801bb78:	4619      	mov	r1, r3
 801bb7a:	68f8      	ldr	r0, [r7, #12]
 801bb7c:	f7ff fe3c 	bl	801b7f8 <move_window>
 801bb80:	4603      	mov	r3, r0
 801bb82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801bb84:	7ffb      	ldrb	r3, [r7, #31]
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d178      	bne.n	801bc7c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801bb8a:	68fb      	ldr	r3, [r7, #12]
 801bb8c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801bb90:	69bb      	ldr	r3, [r7, #24]
 801bb92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bb96:	4413      	add	r3, r2
 801bb98:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801bb9a:	68bb      	ldr	r3, [r7, #8]
 801bb9c:	f003 0301 	and.w	r3, r3, #1
 801bba0:	2b00      	cmp	r3, #0
 801bba2:	d003      	beq.n	801bbac <put_fat+0xf0>
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	091b      	lsrs	r3, r3, #4
 801bba8:	b2db      	uxtb	r3, r3
 801bbaa:	e00e      	b.n	801bbca <put_fat+0x10e>
 801bbac:	697b      	ldr	r3, [r7, #20]
 801bbae:	781b      	ldrb	r3, [r3, #0]
 801bbb0:	b25b      	sxtb	r3, r3
 801bbb2:	f023 030f 	bic.w	r3, r3, #15
 801bbb6:	b25a      	sxtb	r2, r3
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	0a1b      	lsrs	r3, r3, #8
 801bbbc:	b25b      	sxtb	r3, r3
 801bbbe:	f003 030f 	and.w	r3, r3, #15
 801bbc2:	b25b      	sxtb	r3, r3
 801bbc4:	4313      	orrs	r3, r2
 801bbc6:	b25b      	sxtb	r3, r3
 801bbc8:	b2db      	uxtb	r3, r3
 801bbca:	697a      	ldr	r2, [r7, #20]
 801bbcc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801bbce:	68fb      	ldr	r3, [r7, #12]
 801bbd0:	2201      	movs	r2, #1
 801bbd2:	70da      	strb	r2, [r3, #3]
			break;
 801bbd4:	e057      	b.n	801bc86 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801bbd6:	68fb      	ldr	r3, [r7, #12]
 801bbd8:	6a1a      	ldr	r2, [r3, #32]
 801bbda:	68bb      	ldr	r3, [r7, #8]
 801bbdc:	0a1b      	lsrs	r3, r3, #8
 801bbde:	4413      	add	r3, r2
 801bbe0:	4619      	mov	r1, r3
 801bbe2:	68f8      	ldr	r0, [r7, #12]
 801bbe4:	f7ff fe08 	bl	801b7f8 <move_window>
 801bbe8:	4603      	mov	r3, r0
 801bbea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801bbec:	7ffb      	ldrb	r3, [r7, #31]
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	d146      	bne.n	801bc80 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801bbf2:	68fb      	ldr	r3, [r7, #12]
 801bbf4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801bbf8:	68bb      	ldr	r3, [r7, #8]
 801bbfa:	005b      	lsls	r3, r3, #1
 801bbfc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801bc00:	4413      	add	r3, r2
 801bc02:	687a      	ldr	r2, [r7, #4]
 801bc04:	b292      	uxth	r2, r2
 801bc06:	4611      	mov	r1, r2
 801bc08:	4618      	mov	r0, r3
 801bc0a:	f7ff fb80 	bl	801b30e <st_word>
			fs->wflag = 1;
 801bc0e:	68fb      	ldr	r3, [r7, #12]
 801bc10:	2201      	movs	r2, #1
 801bc12:	70da      	strb	r2, [r3, #3]
			break;
 801bc14:	e037      	b.n	801bc86 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801bc16:	68fb      	ldr	r3, [r7, #12]
 801bc18:	6a1a      	ldr	r2, [r3, #32]
 801bc1a:	68bb      	ldr	r3, [r7, #8]
 801bc1c:	09db      	lsrs	r3, r3, #7
 801bc1e:	4413      	add	r3, r2
 801bc20:	4619      	mov	r1, r3
 801bc22:	68f8      	ldr	r0, [r7, #12]
 801bc24:	f7ff fde8 	bl	801b7f8 <move_window>
 801bc28:	4603      	mov	r3, r0
 801bc2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801bc2c:	7ffb      	ldrb	r3, [r7, #31]
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d128      	bne.n	801bc84 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801bc38:	68fb      	ldr	r3, [r7, #12]
 801bc3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801bc3e:	68bb      	ldr	r3, [r7, #8]
 801bc40:	009b      	lsls	r3, r3, #2
 801bc42:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801bc46:	4413      	add	r3, r2
 801bc48:	4618      	mov	r0, r3
 801bc4a:	f7ff fb3d 	bl	801b2c8 <ld_dword>
 801bc4e:	4603      	mov	r3, r0
 801bc50:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801bc54:	4323      	orrs	r3, r4
 801bc56:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801bc58:	68fb      	ldr	r3, [r7, #12]
 801bc5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801bc5e:	68bb      	ldr	r3, [r7, #8]
 801bc60:	009b      	lsls	r3, r3, #2
 801bc62:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801bc66:	4413      	add	r3, r2
 801bc68:	6879      	ldr	r1, [r7, #4]
 801bc6a:	4618      	mov	r0, r3
 801bc6c:	f7ff fb6a 	bl	801b344 <st_dword>
			fs->wflag = 1;
 801bc70:	68fb      	ldr	r3, [r7, #12]
 801bc72:	2201      	movs	r2, #1
 801bc74:	70da      	strb	r2, [r3, #3]
			break;
 801bc76:	e006      	b.n	801bc86 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801bc78:	bf00      	nop
 801bc7a:	e004      	b.n	801bc86 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801bc7c:	bf00      	nop
 801bc7e:	e002      	b.n	801bc86 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801bc80:	bf00      	nop
 801bc82:	e000      	b.n	801bc86 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801bc84:	bf00      	nop
		}
	}
	return res;
 801bc86:	7ffb      	ldrb	r3, [r7, #31]
}
 801bc88:	4618      	mov	r0, r3
 801bc8a:	3724      	adds	r7, #36	@ 0x24
 801bc8c:	46bd      	mov	sp, r7
 801bc8e:	bd90      	pop	{r4, r7, pc}

0801bc90 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801bc90:	b580      	push	{r7, lr}
 801bc92:	b088      	sub	sp, #32
 801bc94:	af00      	add	r7, sp, #0
 801bc96:	60f8      	str	r0, [r7, #12]
 801bc98:	60b9      	str	r1, [r7, #8]
 801bc9a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801bc9c:	2300      	movs	r3, #0
 801bc9e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801bca0:	68fb      	ldr	r3, [r7, #12]
 801bca2:	681b      	ldr	r3, [r3, #0]
 801bca4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801bca6:	68bb      	ldr	r3, [r7, #8]
 801bca8:	2b01      	cmp	r3, #1
 801bcaa:	d904      	bls.n	801bcb6 <remove_chain+0x26>
 801bcac:	69bb      	ldr	r3, [r7, #24]
 801bcae:	695b      	ldr	r3, [r3, #20]
 801bcb0:	68ba      	ldr	r2, [r7, #8]
 801bcb2:	429a      	cmp	r2, r3
 801bcb4:	d301      	bcc.n	801bcba <remove_chain+0x2a>
 801bcb6:	2302      	movs	r3, #2
 801bcb8:	e04b      	b.n	801bd52 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d00c      	beq.n	801bcda <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801bcc0:	f04f 32ff 	mov.w	r2, #4294967295
 801bcc4:	6879      	ldr	r1, [r7, #4]
 801bcc6:	69b8      	ldr	r0, [r7, #24]
 801bcc8:	f7ff fef8 	bl	801babc <put_fat>
 801bccc:	4603      	mov	r3, r0
 801bcce:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801bcd0:	7ffb      	ldrb	r3, [r7, #31]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	d001      	beq.n	801bcda <remove_chain+0x4a>
 801bcd6:	7ffb      	ldrb	r3, [r7, #31]
 801bcd8:	e03b      	b.n	801bd52 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801bcda:	68b9      	ldr	r1, [r7, #8]
 801bcdc:	68f8      	ldr	r0, [r7, #12]
 801bcde:	f7ff fe46 	bl	801b96e <get_fat>
 801bce2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801bce4:	697b      	ldr	r3, [r7, #20]
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d031      	beq.n	801bd4e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801bcea:	697b      	ldr	r3, [r7, #20]
 801bcec:	2b01      	cmp	r3, #1
 801bcee:	d101      	bne.n	801bcf4 <remove_chain+0x64>
 801bcf0:	2302      	movs	r3, #2
 801bcf2:	e02e      	b.n	801bd52 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801bcf4:	697b      	ldr	r3, [r7, #20]
 801bcf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bcfa:	d101      	bne.n	801bd00 <remove_chain+0x70>
 801bcfc:	2301      	movs	r3, #1
 801bcfe:	e028      	b.n	801bd52 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801bd00:	2200      	movs	r2, #0
 801bd02:	68b9      	ldr	r1, [r7, #8]
 801bd04:	69b8      	ldr	r0, [r7, #24]
 801bd06:	f7ff fed9 	bl	801babc <put_fat>
 801bd0a:	4603      	mov	r3, r0
 801bd0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801bd0e:	7ffb      	ldrb	r3, [r7, #31]
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d001      	beq.n	801bd18 <remove_chain+0x88>
 801bd14:	7ffb      	ldrb	r3, [r7, #31]
 801bd16:	e01c      	b.n	801bd52 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801bd18:	69bb      	ldr	r3, [r7, #24]
 801bd1a:	691a      	ldr	r2, [r3, #16]
 801bd1c:	69bb      	ldr	r3, [r7, #24]
 801bd1e:	695b      	ldr	r3, [r3, #20]
 801bd20:	3b02      	subs	r3, #2
 801bd22:	429a      	cmp	r2, r3
 801bd24:	d20b      	bcs.n	801bd3e <remove_chain+0xae>
			fs->free_clst++;
 801bd26:	69bb      	ldr	r3, [r7, #24]
 801bd28:	691b      	ldr	r3, [r3, #16]
 801bd2a:	1c5a      	adds	r2, r3, #1
 801bd2c:	69bb      	ldr	r3, [r7, #24]
 801bd2e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801bd30:	69bb      	ldr	r3, [r7, #24]
 801bd32:	791b      	ldrb	r3, [r3, #4]
 801bd34:	f043 0301 	orr.w	r3, r3, #1
 801bd38:	b2da      	uxtb	r2, r3
 801bd3a:	69bb      	ldr	r3, [r7, #24]
 801bd3c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801bd3e:	697b      	ldr	r3, [r7, #20]
 801bd40:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801bd42:	69bb      	ldr	r3, [r7, #24]
 801bd44:	695b      	ldr	r3, [r3, #20]
 801bd46:	68ba      	ldr	r2, [r7, #8]
 801bd48:	429a      	cmp	r2, r3
 801bd4a:	d3c6      	bcc.n	801bcda <remove_chain+0x4a>
 801bd4c:	e000      	b.n	801bd50 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801bd4e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801bd50:	2300      	movs	r3, #0
}
 801bd52:	4618      	mov	r0, r3
 801bd54:	3720      	adds	r7, #32
 801bd56:	46bd      	mov	sp, r7
 801bd58:	bd80      	pop	{r7, pc}

0801bd5a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801bd5a:	b580      	push	{r7, lr}
 801bd5c:	b088      	sub	sp, #32
 801bd5e:	af00      	add	r7, sp, #0
 801bd60:	6078      	str	r0, [r7, #4]
 801bd62:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	681b      	ldr	r3, [r3, #0]
 801bd68:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801bd6a:	683b      	ldr	r3, [r7, #0]
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	d10d      	bne.n	801bd8c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801bd70:	693b      	ldr	r3, [r7, #16]
 801bd72:	68db      	ldr	r3, [r3, #12]
 801bd74:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801bd76:	69bb      	ldr	r3, [r7, #24]
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	d004      	beq.n	801bd86 <create_chain+0x2c>
 801bd7c:	693b      	ldr	r3, [r7, #16]
 801bd7e:	695b      	ldr	r3, [r3, #20]
 801bd80:	69ba      	ldr	r2, [r7, #24]
 801bd82:	429a      	cmp	r2, r3
 801bd84:	d31b      	bcc.n	801bdbe <create_chain+0x64>
 801bd86:	2301      	movs	r3, #1
 801bd88:	61bb      	str	r3, [r7, #24]
 801bd8a:	e018      	b.n	801bdbe <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801bd8c:	6839      	ldr	r1, [r7, #0]
 801bd8e:	6878      	ldr	r0, [r7, #4]
 801bd90:	f7ff fded 	bl	801b96e <get_fat>
 801bd94:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801bd96:	68fb      	ldr	r3, [r7, #12]
 801bd98:	2b01      	cmp	r3, #1
 801bd9a:	d801      	bhi.n	801bda0 <create_chain+0x46>
 801bd9c:	2301      	movs	r3, #1
 801bd9e:	e070      	b.n	801be82 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801bda0:	68fb      	ldr	r3, [r7, #12]
 801bda2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bda6:	d101      	bne.n	801bdac <create_chain+0x52>
 801bda8:	68fb      	ldr	r3, [r7, #12]
 801bdaa:	e06a      	b.n	801be82 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801bdac:	693b      	ldr	r3, [r7, #16]
 801bdae:	695b      	ldr	r3, [r3, #20]
 801bdb0:	68fa      	ldr	r2, [r7, #12]
 801bdb2:	429a      	cmp	r2, r3
 801bdb4:	d201      	bcs.n	801bdba <create_chain+0x60>
 801bdb6:	68fb      	ldr	r3, [r7, #12]
 801bdb8:	e063      	b.n	801be82 <create_chain+0x128>
		scl = clst;
 801bdba:	683b      	ldr	r3, [r7, #0]
 801bdbc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801bdbe:	69bb      	ldr	r3, [r7, #24]
 801bdc0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801bdc2:	69fb      	ldr	r3, [r7, #28]
 801bdc4:	3301      	adds	r3, #1
 801bdc6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801bdc8:	693b      	ldr	r3, [r7, #16]
 801bdca:	695b      	ldr	r3, [r3, #20]
 801bdcc:	69fa      	ldr	r2, [r7, #28]
 801bdce:	429a      	cmp	r2, r3
 801bdd0:	d307      	bcc.n	801bde2 <create_chain+0x88>
				ncl = 2;
 801bdd2:	2302      	movs	r3, #2
 801bdd4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801bdd6:	69fa      	ldr	r2, [r7, #28]
 801bdd8:	69bb      	ldr	r3, [r7, #24]
 801bdda:	429a      	cmp	r2, r3
 801bddc:	d901      	bls.n	801bde2 <create_chain+0x88>
 801bdde:	2300      	movs	r3, #0
 801bde0:	e04f      	b.n	801be82 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801bde2:	69f9      	ldr	r1, [r7, #28]
 801bde4:	6878      	ldr	r0, [r7, #4]
 801bde6:	f7ff fdc2 	bl	801b96e <get_fat>
 801bdea:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801bdec:	68fb      	ldr	r3, [r7, #12]
 801bdee:	2b00      	cmp	r3, #0
 801bdf0:	d00e      	beq.n	801be10 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801bdf2:	68fb      	ldr	r3, [r7, #12]
 801bdf4:	2b01      	cmp	r3, #1
 801bdf6:	d003      	beq.n	801be00 <create_chain+0xa6>
 801bdf8:	68fb      	ldr	r3, [r7, #12]
 801bdfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bdfe:	d101      	bne.n	801be04 <create_chain+0xaa>
 801be00:	68fb      	ldr	r3, [r7, #12]
 801be02:	e03e      	b.n	801be82 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801be04:	69fa      	ldr	r2, [r7, #28]
 801be06:	69bb      	ldr	r3, [r7, #24]
 801be08:	429a      	cmp	r2, r3
 801be0a:	d1da      	bne.n	801bdc2 <create_chain+0x68>
 801be0c:	2300      	movs	r3, #0
 801be0e:	e038      	b.n	801be82 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801be10:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801be12:	f04f 32ff 	mov.w	r2, #4294967295
 801be16:	69f9      	ldr	r1, [r7, #28]
 801be18:	6938      	ldr	r0, [r7, #16]
 801be1a:	f7ff fe4f 	bl	801babc <put_fat>
 801be1e:	4603      	mov	r3, r0
 801be20:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801be22:	7dfb      	ldrb	r3, [r7, #23]
 801be24:	2b00      	cmp	r3, #0
 801be26:	d109      	bne.n	801be3c <create_chain+0xe2>
 801be28:	683b      	ldr	r3, [r7, #0]
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d006      	beq.n	801be3c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801be2e:	69fa      	ldr	r2, [r7, #28]
 801be30:	6839      	ldr	r1, [r7, #0]
 801be32:	6938      	ldr	r0, [r7, #16]
 801be34:	f7ff fe42 	bl	801babc <put_fat>
 801be38:	4603      	mov	r3, r0
 801be3a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801be3c:	7dfb      	ldrb	r3, [r7, #23]
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d116      	bne.n	801be70 <create_chain+0x116>
		fs->last_clst = ncl;
 801be42:	693b      	ldr	r3, [r7, #16]
 801be44:	69fa      	ldr	r2, [r7, #28]
 801be46:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801be48:	693b      	ldr	r3, [r7, #16]
 801be4a:	691a      	ldr	r2, [r3, #16]
 801be4c:	693b      	ldr	r3, [r7, #16]
 801be4e:	695b      	ldr	r3, [r3, #20]
 801be50:	3b02      	subs	r3, #2
 801be52:	429a      	cmp	r2, r3
 801be54:	d804      	bhi.n	801be60 <create_chain+0x106>
 801be56:	693b      	ldr	r3, [r7, #16]
 801be58:	691b      	ldr	r3, [r3, #16]
 801be5a:	1e5a      	subs	r2, r3, #1
 801be5c:	693b      	ldr	r3, [r7, #16]
 801be5e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801be60:	693b      	ldr	r3, [r7, #16]
 801be62:	791b      	ldrb	r3, [r3, #4]
 801be64:	f043 0301 	orr.w	r3, r3, #1
 801be68:	b2da      	uxtb	r2, r3
 801be6a:	693b      	ldr	r3, [r7, #16]
 801be6c:	711a      	strb	r2, [r3, #4]
 801be6e:	e007      	b.n	801be80 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801be70:	7dfb      	ldrb	r3, [r7, #23]
 801be72:	2b01      	cmp	r3, #1
 801be74:	d102      	bne.n	801be7c <create_chain+0x122>
 801be76:	f04f 33ff 	mov.w	r3, #4294967295
 801be7a:	e000      	b.n	801be7e <create_chain+0x124>
 801be7c:	2301      	movs	r3, #1
 801be7e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801be80:	69fb      	ldr	r3, [r7, #28]
}
 801be82:	4618      	mov	r0, r3
 801be84:	3720      	adds	r7, #32
 801be86:	46bd      	mov	sp, r7
 801be88:	bd80      	pop	{r7, pc}

0801be8a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801be8a:	b480      	push	{r7}
 801be8c:	b087      	sub	sp, #28
 801be8e:	af00      	add	r7, sp, #0
 801be90:	6078      	str	r0, [r7, #4]
 801be92:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	681b      	ldr	r3, [r3, #0]
 801be98:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801be9e:	3304      	adds	r3, #4
 801bea0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801bea2:	683b      	ldr	r3, [r7, #0]
 801bea4:	0a5b      	lsrs	r3, r3, #9
 801bea6:	68fa      	ldr	r2, [r7, #12]
 801bea8:	8952      	ldrh	r2, [r2, #10]
 801beaa:	fbb3 f3f2 	udiv	r3, r3, r2
 801beae:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801beb0:	693b      	ldr	r3, [r7, #16]
 801beb2:	1d1a      	adds	r2, r3, #4
 801beb4:	613a      	str	r2, [r7, #16]
 801beb6:	681b      	ldr	r3, [r3, #0]
 801beb8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801beba:	68bb      	ldr	r3, [r7, #8]
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	d101      	bne.n	801bec4 <clmt_clust+0x3a>
 801bec0:	2300      	movs	r3, #0
 801bec2:	e010      	b.n	801bee6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801bec4:	697a      	ldr	r2, [r7, #20]
 801bec6:	68bb      	ldr	r3, [r7, #8]
 801bec8:	429a      	cmp	r2, r3
 801beca:	d307      	bcc.n	801bedc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801becc:	697a      	ldr	r2, [r7, #20]
 801bece:	68bb      	ldr	r3, [r7, #8]
 801bed0:	1ad3      	subs	r3, r2, r3
 801bed2:	617b      	str	r3, [r7, #20]
 801bed4:	693b      	ldr	r3, [r7, #16]
 801bed6:	3304      	adds	r3, #4
 801bed8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801beda:	e7e9      	b.n	801beb0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801bedc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801bede:	693b      	ldr	r3, [r7, #16]
 801bee0:	681a      	ldr	r2, [r3, #0]
 801bee2:	697b      	ldr	r3, [r7, #20]
 801bee4:	4413      	add	r3, r2
}
 801bee6:	4618      	mov	r0, r3
 801bee8:	371c      	adds	r7, #28
 801beea:	46bd      	mov	sp, r7
 801beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bef0:	4770      	bx	lr

0801bef2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801bef2:	b580      	push	{r7, lr}
 801bef4:	b086      	sub	sp, #24
 801bef6:	af00      	add	r7, sp, #0
 801bef8:	6078      	str	r0, [r7, #4]
 801befa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	681b      	ldr	r3, [r3, #0]
 801bf00:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801bf02:	683b      	ldr	r3, [r7, #0]
 801bf04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801bf08:	d204      	bcs.n	801bf14 <dir_sdi+0x22>
 801bf0a:	683b      	ldr	r3, [r7, #0]
 801bf0c:	f003 031f 	and.w	r3, r3, #31
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d001      	beq.n	801bf18 <dir_sdi+0x26>
		return FR_INT_ERR;
 801bf14:	2302      	movs	r3, #2
 801bf16:	e063      	b.n	801bfe0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	683a      	ldr	r2, [r7, #0]
 801bf1c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	689b      	ldr	r3, [r3, #8]
 801bf22:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801bf24:	697b      	ldr	r3, [r7, #20]
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	d106      	bne.n	801bf38 <dir_sdi+0x46>
 801bf2a:	693b      	ldr	r3, [r7, #16]
 801bf2c:	781b      	ldrb	r3, [r3, #0]
 801bf2e:	2b02      	cmp	r3, #2
 801bf30:	d902      	bls.n	801bf38 <dir_sdi+0x46>
		clst = fs->dirbase;
 801bf32:	693b      	ldr	r3, [r7, #16]
 801bf34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bf36:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801bf38:	697b      	ldr	r3, [r7, #20]
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	d10c      	bne.n	801bf58 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801bf3e:	683b      	ldr	r3, [r7, #0]
 801bf40:	095b      	lsrs	r3, r3, #5
 801bf42:	693a      	ldr	r2, [r7, #16]
 801bf44:	8912      	ldrh	r2, [r2, #8]
 801bf46:	4293      	cmp	r3, r2
 801bf48:	d301      	bcc.n	801bf4e <dir_sdi+0x5c>
 801bf4a:	2302      	movs	r3, #2
 801bf4c:	e048      	b.n	801bfe0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801bf4e:	693b      	ldr	r3, [r7, #16]
 801bf50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	61da      	str	r2, [r3, #28]
 801bf56:	e029      	b.n	801bfac <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801bf58:	693b      	ldr	r3, [r7, #16]
 801bf5a:	895b      	ldrh	r3, [r3, #10]
 801bf5c:	025b      	lsls	r3, r3, #9
 801bf5e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801bf60:	e019      	b.n	801bf96 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	6979      	ldr	r1, [r7, #20]
 801bf66:	4618      	mov	r0, r3
 801bf68:	f7ff fd01 	bl	801b96e <get_fat>
 801bf6c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801bf6e:	697b      	ldr	r3, [r7, #20]
 801bf70:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bf74:	d101      	bne.n	801bf7a <dir_sdi+0x88>
 801bf76:	2301      	movs	r3, #1
 801bf78:	e032      	b.n	801bfe0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801bf7a:	697b      	ldr	r3, [r7, #20]
 801bf7c:	2b01      	cmp	r3, #1
 801bf7e:	d904      	bls.n	801bf8a <dir_sdi+0x98>
 801bf80:	693b      	ldr	r3, [r7, #16]
 801bf82:	695b      	ldr	r3, [r3, #20]
 801bf84:	697a      	ldr	r2, [r7, #20]
 801bf86:	429a      	cmp	r2, r3
 801bf88:	d301      	bcc.n	801bf8e <dir_sdi+0x9c>
 801bf8a:	2302      	movs	r3, #2
 801bf8c:	e028      	b.n	801bfe0 <dir_sdi+0xee>
			ofs -= csz;
 801bf8e:	683a      	ldr	r2, [r7, #0]
 801bf90:	68fb      	ldr	r3, [r7, #12]
 801bf92:	1ad3      	subs	r3, r2, r3
 801bf94:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801bf96:	683a      	ldr	r2, [r7, #0]
 801bf98:	68fb      	ldr	r3, [r7, #12]
 801bf9a:	429a      	cmp	r2, r3
 801bf9c:	d2e1      	bcs.n	801bf62 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801bf9e:	6979      	ldr	r1, [r7, #20]
 801bfa0:	6938      	ldr	r0, [r7, #16]
 801bfa2:	f7ff fcc5 	bl	801b930 <clust2sect>
 801bfa6:	4602      	mov	r2, r0
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	697a      	ldr	r2, [r7, #20]
 801bfb0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	69db      	ldr	r3, [r3, #28]
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	d101      	bne.n	801bfbe <dir_sdi+0xcc>
 801bfba:	2302      	movs	r3, #2
 801bfbc:	e010      	b.n	801bfe0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	69da      	ldr	r2, [r3, #28]
 801bfc2:	683b      	ldr	r3, [r7, #0]
 801bfc4:	0a5b      	lsrs	r3, r3, #9
 801bfc6:	441a      	add	r2, r3
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801bfcc:	693b      	ldr	r3, [r7, #16]
 801bfce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801bfd2:	683b      	ldr	r3, [r7, #0]
 801bfd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bfd8:	441a      	add	r2, r3
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bfde:	2300      	movs	r3, #0
}
 801bfe0:	4618      	mov	r0, r3
 801bfe2:	3718      	adds	r7, #24
 801bfe4:	46bd      	mov	sp, r7
 801bfe6:	bd80      	pop	{r7, pc}

0801bfe8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801bfe8:	b580      	push	{r7, lr}
 801bfea:	b086      	sub	sp, #24
 801bfec:	af00      	add	r7, sp, #0
 801bfee:	6078      	str	r0, [r7, #4]
 801bff0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	681b      	ldr	r3, [r3, #0]
 801bff6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	695b      	ldr	r3, [r3, #20]
 801bffc:	3320      	adds	r3, #32
 801bffe:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801c000:	687b      	ldr	r3, [r7, #4]
 801c002:	69db      	ldr	r3, [r3, #28]
 801c004:	2b00      	cmp	r3, #0
 801c006:	d003      	beq.n	801c010 <dir_next+0x28>
 801c008:	68bb      	ldr	r3, [r7, #8]
 801c00a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801c00e:	d301      	bcc.n	801c014 <dir_next+0x2c>
 801c010:	2304      	movs	r3, #4
 801c012:	e0aa      	b.n	801c16a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801c014:	68bb      	ldr	r3, [r7, #8]
 801c016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	f040 8098 	bne.w	801c150 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	69db      	ldr	r3, [r3, #28]
 801c024:	1c5a      	adds	r2, r3, #1
 801c026:	687b      	ldr	r3, [r7, #4]
 801c028:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	699b      	ldr	r3, [r3, #24]
 801c02e:	2b00      	cmp	r3, #0
 801c030:	d10b      	bne.n	801c04a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801c032:	68bb      	ldr	r3, [r7, #8]
 801c034:	095b      	lsrs	r3, r3, #5
 801c036:	68fa      	ldr	r2, [r7, #12]
 801c038:	8912      	ldrh	r2, [r2, #8]
 801c03a:	4293      	cmp	r3, r2
 801c03c:	f0c0 8088 	bcc.w	801c150 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801c040:	687b      	ldr	r3, [r7, #4]
 801c042:	2200      	movs	r2, #0
 801c044:	61da      	str	r2, [r3, #28]
 801c046:	2304      	movs	r3, #4
 801c048:	e08f      	b.n	801c16a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801c04a:	68bb      	ldr	r3, [r7, #8]
 801c04c:	0a5b      	lsrs	r3, r3, #9
 801c04e:	68fa      	ldr	r2, [r7, #12]
 801c050:	8952      	ldrh	r2, [r2, #10]
 801c052:	3a01      	subs	r2, #1
 801c054:	4013      	ands	r3, r2
 801c056:	2b00      	cmp	r3, #0
 801c058:	d17a      	bne.n	801c150 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801c05a:	687a      	ldr	r2, [r7, #4]
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	699b      	ldr	r3, [r3, #24]
 801c060:	4619      	mov	r1, r3
 801c062:	4610      	mov	r0, r2
 801c064:	f7ff fc83 	bl	801b96e <get_fat>
 801c068:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801c06a:	697b      	ldr	r3, [r7, #20]
 801c06c:	2b01      	cmp	r3, #1
 801c06e:	d801      	bhi.n	801c074 <dir_next+0x8c>
 801c070:	2302      	movs	r3, #2
 801c072:	e07a      	b.n	801c16a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801c074:	697b      	ldr	r3, [r7, #20]
 801c076:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c07a:	d101      	bne.n	801c080 <dir_next+0x98>
 801c07c:	2301      	movs	r3, #1
 801c07e:	e074      	b.n	801c16a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801c080:	68fb      	ldr	r3, [r7, #12]
 801c082:	695b      	ldr	r3, [r3, #20]
 801c084:	697a      	ldr	r2, [r7, #20]
 801c086:	429a      	cmp	r2, r3
 801c088:	d358      	bcc.n	801c13c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801c08a:	683b      	ldr	r3, [r7, #0]
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d104      	bne.n	801c09a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	2200      	movs	r2, #0
 801c094:	61da      	str	r2, [r3, #28]
 801c096:	2304      	movs	r3, #4
 801c098:	e067      	b.n	801c16a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801c09a:	687a      	ldr	r2, [r7, #4]
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	699b      	ldr	r3, [r3, #24]
 801c0a0:	4619      	mov	r1, r3
 801c0a2:	4610      	mov	r0, r2
 801c0a4:	f7ff fe59 	bl	801bd5a <create_chain>
 801c0a8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801c0aa:	697b      	ldr	r3, [r7, #20]
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	d101      	bne.n	801c0b4 <dir_next+0xcc>
 801c0b0:	2307      	movs	r3, #7
 801c0b2:	e05a      	b.n	801c16a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801c0b4:	697b      	ldr	r3, [r7, #20]
 801c0b6:	2b01      	cmp	r3, #1
 801c0b8:	d101      	bne.n	801c0be <dir_next+0xd6>
 801c0ba:	2302      	movs	r3, #2
 801c0bc:	e055      	b.n	801c16a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801c0be:	697b      	ldr	r3, [r7, #20]
 801c0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c0c4:	d101      	bne.n	801c0ca <dir_next+0xe2>
 801c0c6:	2301      	movs	r3, #1
 801c0c8:	e04f      	b.n	801c16a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801c0ca:	68f8      	ldr	r0, [r7, #12]
 801c0cc:	f7ff fb50 	bl	801b770 <sync_window>
 801c0d0:	4603      	mov	r3, r0
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d001      	beq.n	801c0da <dir_next+0xf2>
 801c0d6:	2301      	movs	r3, #1
 801c0d8:	e047      	b.n	801c16a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801c0da:	68fb      	ldr	r3, [r7, #12]
 801c0dc:	3330      	adds	r3, #48	@ 0x30
 801c0de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c0e2:	2100      	movs	r1, #0
 801c0e4:	4618      	mov	r0, r3
 801c0e6:	f7ff f97a 	bl	801b3de <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801c0ea:	2300      	movs	r3, #0
 801c0ec:	613b      	str	r3, [r7, #16]
 801c0ee:	6979      	ldr	r1, [r7, #20]
 801c0f0:	68f8      	ldr	r0, [r7, #12]
 801c0f2:	f7ff fc1d 	bl	801b930 <clust2sect>
 801c0f6:	4602      	mov	r2, r0
 801c0f8:	68fb      	ldr	r3, [r7, #12]
 801c0fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 801c0fc:	e012      	b.n	801c124 <dir_next+0x13c>
						fs->wflag = 1;
 801c0fe:	68fb      	ldr	r3, [r7, #12]
 801c100:	2201      	movs	r2, #1
 801c102:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801c104:	68f8      	ldr	r0, [r7, #12]
 801c106:	f7ff fb33 	bl	801b770 <sync_window>
 801c10a:	4603      	mov	r3, r0
 801c10c:	2b00      	cmp	r3, #0
 801c10e:	d001      	beq.n	801c114 <dir_next+0x12c>
 801c110:	2301      	movs	r3, #1
 801c112:	e02a      	b.n	801c16a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801c114:	693b      	ldr	r3, [r7, #16]
 801c116:	3301      	adds	r3, #1
 801c118:	613b      	str	r3, [r7, #16]
 801c11a:	68fb      	ldr	r3, [r7, #12]
 801c11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c11e:	1c5a      	adds	r2, r3, #1
 801c120:	68fb      	ldr	r3, [r7, #12]
 801c122:	62da      	str	r2, [r3, #44]	@ 0x2c
 801c124:	68fb      	ldr	r3, [r7, #12]
 801c126:	895b      	ldrh	r3, [r3, #10]
 801c128:	461a      	mov	r2, r3
 801c12a:	693b      	ldr	r3, [r7, #16]
 801c12c:	4293      	cmp	r3, r2
 801c12e:	d3e6      	bcc.n	801c0fe <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801c130:	68fb      	ldr	r3, [r7, #12]
 801c132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c134:	693b      	ldr	r3, [r7, #16]
 801c136:	1ad2      	subs	r2, r2, r3
 801c138:	68fb      	ldr	r3, [r7, #12]
 801c13a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	697a      	ldr	r2, [r7, #20]
 801c140:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801c142:	6979      	ldr	r1, [r7, #20]
 801c144:	68f8      	ldr	r0, [r7, #12]
 801c146:	f7ff fbf3 	bl	801b930 <clust2sect>
 801c14a:	4602      	mov	r2, r0
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	68ba      	ldr	r2, [r7, #8]
 801c154:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801c156:	68fb      	ldr	r3, [r7, #12]
 801c158:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801c15c:	68bb      	ldr	r3, [r7, #8]
 801c15e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c162:	441a      	add	r2, r3
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801c168:	2300      	movs	r3, #0
}
 801c16a:	4618      	mov	r0, r3
 801c16c:	3718      	adds	r7, #24
 801c16e:	46bd      	mov	sp, r7
 801c170:	bd80      	pop	{r7, pc}

0801c172 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801c172:	b580      	push	{r7, lr}
 801c174:	b086      	sub	sp, #24
 801c176:	af00      	add	r7, sp, #0
 801c178:	6078      	str	r0, [r7, #4]
 801c17a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801c17c:	687b      	ldr	r3, [r7, #4]
 801c17e:	681b      	ldr	r3, [r3, #0]
 801c180:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801c182:	2100      	movs	r1, #0
 801c184:	6878      	ldr	r0, [r7, #4]
 801c186:	f7ff feb4 	bl	801bef2 <dir_sdi>
 801c18a:	4603      	mov	r3, r0
 801c18c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c18e:	7dfb      	ldrb	r3, [r7, #23]
 801c190:	2b00      	cmp	r3, #0
 801c192:	d12b      	bne.n	801c1ec <dir_alloc+0x7a>
		n = 0;
 801c194:	2300      	movs	r3, #0
 801c196:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	69db      	ldr	r3, [r3, #28]
 801c19c:	4619      	mov	r1, r3
 801c19e:	68f8      	ldr	r0, [r7, #12]
 801c1a0:	f7ff fb2a 	bl	801b7f8 <move_window>
 801c1a4:	4603      	mov	r3, r0
 801c1a6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c1a8:	7dfb      	ldrb	r3, [r7, #23]
 801c1aa:	2b00      	cmp	r3, #0
 801c1ac:	d11d      	bne.n	801c1ea <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	6a1b      	ldr	r3, [r3, #32]
 801c1b2:	781b      	ldrb	r3, [r3, #0]
 801c1b4:	2be5      	cmp	r3, #229	@ 0xe5
 801c1b6:	d004      	beq.n	801c1c2 <dir_alloc+0x50>
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	6a1b      	ldr	r3, [r3, #32]
 801c1bc:	781b      	ldrb	r3, [r3, #0]
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d107      	bne.n	801c1d2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801c1c2:	693b      	ldr	r3, [r7, #16]
 801c1c4:	3301      	adds	r3, #1
 801c1c6:	613b      	str	r3, [r7, #16]
 801c1c8:	693a      	ldr	r2, [r7, #16]
 801c1ca:	683b      	ldr	r3, [r7, #0]
 801c1cc:	429a      	cmp	r2, r3
 801c1ce:	d102      	bne.n	801c1d6 <dir_alloc+0x64>
 801c1d0:	e00c      	b.n	801c1ec <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801c1d2:	2300      	movs	r3, #0
 801c1d4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801c1d6:	2101      	movs	r1, #1
 801c1d8:	6878      	ldr	r0, [r7, #4]
 801c1da:	f7ff ff05 	bl	801bfe8 <dir_next>
 801c1de:	4603      	mov	r3, r0
 801c1e0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801c1e2:	7dfb      	ldrb	r3, [r7, #23]
 801c1e4:	2b00      	cmp	r3, #0
 801c1e6:	d0d7      	beq.n	801c198 <dir_alloc+0x26>
 801c1e8:	e000      	b.n	801c1ec <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801c1ea:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801c1ec:	7dfb      	ldrb	r3, [r7, #23]
 801c1ee:	2b04      	cmp	r3, #4
 801c1f0:	d101      	bne.n	801c1f6 <dir_alloc+0x84>
 801c1f2:	2307      	movs	r3, #7
 801c1f4:	75fb      	strb	r3, [r7, #23]
	return res;
 801c1f6:	7dfb      	ldrb	r3, [r7, #23]
}
 801c1f8:	4618      	mov	r0, r3
 801c1fa:	3718      	adds	r7, #24
 801c1fc:	46bd      	mov	sp, r7
 801c1fe:	bd80      	pop	{r7, pc}

0801c200 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801c200:	b580      	push	{r7, lr}
 801c202:	b084      	sub	sp, #16
 801c204:	af00      	add	r7, sp, #0
 801c206:	6078      	str	r0, [r7, #4]
 801c208:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801c20a:	683b      	ldr	r3, [r7, #0]
 801c20c:	331a      	adds	r3, #26
 801c20e:	4618      	mov	r0, r3
 801c210:	f7ff f842 	bl	801b298 <ld_word>
 801c214:	4603      	mov	r3, r0
 801c216:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	781b      	ldrb	r3, [r3, #0]
 801c21c:	2b03      	cmp	r3, #3
 801c21e:	d109      	bne.n	801c234 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801c220:	683b      	ldr	r3, [r7, #0]
 801c222:	3314      	adds	r3, #20
 801c224:	4618      	mov	r0, r3
 801c226:	f7ff f837 	bl	801b298 <ld_word>
 801c22a:	4603      	mov	r3, r0
 801c22c:	041b      	lsls	r3, r3, #16
 801c22e:	68fa      	ldr	r2, [r7, #12]
 801c230:	4313      	orrs	r3, r2
 801c232:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801c234:	68fb      	ldr	r3, [r7, #12]
}
 801c236:	4618      	mov	r0, r3
 801c238:	3710      	adds	r7, #16
 801c23a:	46bd      	mov	sp, r7
 801c23c:	bd80      	pop	{r7, pc}

0801c23e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801c23e:	b580      	push	{r7, lr}
 801c240:	b084      	sub	sp, #16
 801c242:	af00      	add	r7, sp, #0
 801c244:	60f8      	str	r0, [r7, #12]
 801c246:	60b9      	str	r1, [r7, #8]
 801c248:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801c24a:	68bb      	ldr	r3, [r7, #8]
 801c24c:	331a      	adds	r3, #26
 801c24e:	687a      	ldr	r2, [r7, #4]
 801c250:	b292      	uxth	r2, r2
 801c252:	4611      	mov	r1, r2
 801c254:	4618      	mov	r0, r3
 801c256:	f7ff f85a 	bl	801b30e <st_word>
	if (fs->fs_type == FS_FAT32) {
 801c25a:	68fb      	ldr	r3, [r7, #12]
 801c25c:	781b      	ldrb	r3, [r3, #0]
 801c25e:	2b03      	cmp	r3, #3
 801c260:	d109      	bne.n	801c276 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801c262:	68bb      	ldr	r3, [r7, #8]
 801c264:	f103 0214 	add.w	r2, r3, #20
 801c268:	687b      	ldr	r3, [r7, #4]
 801c26a:	0c1b      	lsrs	r3, r3, #16
 801c26c:	b29b      	uxth	r3, r3
 801c26e:	4619      	mov	r1, r3
 801c270:	4610      	mov	r0, r2
 801c272:	f7ff f84c 	bl	801b30e <st_word>
	}
}
 801c276:	bf00      	nop
 801c278:	3710      	adds	r7, #16
 801c27a:	46bd      	mov	sp, r7
 801c27c:	bd80      	pop	{r7, pc}

0801c27e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801c27e:	b580      	push	{r7, lr}
 801c280:	b086      	sub	sp, #24
 801c282:	af00      	add	r7, sp, #0
 801c284:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801c28c:	2100      	movs	r1, #0
 801c28e:	6878      	ldr	r0, [r7, #4]
 801c290:	f7ff fe2f 	bl	801bef2 <dir_sdi>
 801c294:	4603      	mov	r3, r0
 801c296:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801c298:	7dfb      	ldrb	r3, [r7, #23]
 801c29a:	2b00      	cmp	r3, #0
 801c29c:	d001      	beq.n	801c2a2 <dir_find+0x24>
 801c29e:	7dfb      	ldrb	r3, [r7, #23]
 801c2a0:	e03e      	b.n	801c320 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	69db      	ldr	r3, [r3, #28]
 801c2a6:	4619      	mov	r1, r3
 801c2a8:	6938      	ldr	r0, [r7, #16]
 801c2aa:	f7ff faa5 	bl	801b7f8 <move_window>
 801c2ae:	4603      	mov	r3, r0
 801c2b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c2b2:	7dfb      	ldrb	r3, [r7, #23]
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d12f      	bne.n	801c318 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	6a1b      	ldr	r3, [r3, #32]
 801c2bc:	781b      	ldrb	r3, [r3, #0]
 801c2be:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801c2c0:	7bfb      	ldrb	r3, [r7, #15]
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	d102      	bne.n	801c2cc <dir_find+0x4e>
 801c2c6:	2304      	movs	r3, #4
 801c2c8:	75fb      	strb	r3, [r7, #23]
 801c2ca:	e028      	b.n	801c31e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801c2cc:	687b      	ldr	r3, [r7, #4]
 801c2ce:	6a1b      	ldr	r3, [r3, #32]
 801c2d0:	330b      	adds	r3, #11
 801c2d2:	781b      	ldrb	r3, [r3, #0]
 801c2d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c2d8:	b2da      	uxtb	r2, r3
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801c2de:	687b      	ldr	r3, [r7, #4]
 801c2e0:	6a1b      	ldr	r3, [r3, #32]
 801c2e2:	330b      	adds	r3, #11
 801c2e4:	781b      	ldrb	r3, [r3, #0]
 801c2e6:	f003 0308 	and.w	r3, r3, #8
 801c2ea:	2b00      	cmp	r3, #0
 801c2ec:	d10a      	bne.n	801c304 <dir_find+0x86>
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	6a18      	ldr	r0, [r3, #32]
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	3324      	adds	r3, #36	@ 0x24
 801c2f6:	220b      	movs	r2, #11
 801c2f8:	4619      	mov	r1, r3
 801c2fa:	f7ff f88b 	bl	801b414 <mem_cmp>
 801c2fe:	4603      	mov	r3, r0
 801c300:	2b00      	cmp	r3, #0
 801c302:	d00b      	beq.n	801c31c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801c304:	2100      	movs	r1, #0
 801c306:	6878      	ldr	r0, [r7, #4]
 801c308:	f7ff fe6e 	bl	801bfe8 <dir_next>
 801c30c:	4603      	mov	r3, r0
 801c30e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801c310:	7dfb      	ldrb	r3, [r7, #23]
 801c312:	2b00      	cmp	r3, #0
 801c314:	d0c5      	beq.n	801c2a2 <dir_find+0x24>
 801c316:	e002      	b.n	801c31e <dir_find+0xa0>
		if (res != FR_OK) break;
 801c318:	bf00      	nop
 801c31a:	e000      	b.n	801c31e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801c31c:	bf00      	nop

	return res;
 801c31e:	7dfb      	ldrb	r3, [r7, #23]
}
 801c320:	4618      	mov	r0, r3
 801c322:	3718      	adds	r7, #24
 801c324:	46bd      	mov	sp, r7
 801c326:	bd80      	pop	{r7, pc}

0801c328 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801c328:	b580      	push	{r7, lr}
 801c32a:	b084      	sub	sp, #16
 801c32c:	af00      	add	r7, sp, #0
 801c32e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	681b      	ldr	r3, [r3, #0]
 801c334:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801c336:	2101      	movs	r1, #1
 801c338:	6878      	ldr	r0, [r7, #4]
 801c33a:	f7ff ff1a 	bl	801c172 <dir_alloc>
 801c33e:	4603      	mov	r3, r0
 801c340:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801c342:	7bfb      	ldrb	r3, [r7, #15]
 801c344:	2b00      	cmp	r3, #0
 801c346:	d11c      	bne.n	801c382 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	69db      	ldr	r3, [r3, #28]
 801c34c:	4619      	mov	r1, r3
 801c34e:	68b8      	ldr	r0, [r7, #8]
 801c350:	f7ff fa52 	bl	801b7f8 <move_window>
 801c354:	4603      	mov	r3, r0
 801c356:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801c358:	7bfb      	ldrb	r3, [r7, #15]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d111      	bne.n	801c382 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	6a1b      	ldr	r3, [r3, #32]
 801c362:	2220      	movs	r2, #32
 801c364:	2100      	movs	r1, #0
 801c366:	4618      	mov	r0, r3
 801c368:	f7ff f839 	bl	801b3de <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	6a18      	ldr	r0, [r3, #32]
 801c370:	687b      	ldr	r3, [r7, #4]
 801c372:	3324      	adds	r3, #36	@ 0x24
 801c374:	220b      	movs	r2, #11
 801c376:	4619      	mov	r1, r3
 801c378:	f7ff f810 	bl	801b39c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801c37c:	68bb      	ldr	r3, [r7, #8]
 801c37e:	2201      	movs	r2, #1
 801c380:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801c382:	7bfb      	ldrb	r3, [r7, #15]
}
 801c384:	4618      	mov	r0, r3
 801c386:	3710      	adds	r7, #16
 801c388:	46bd      	mov	sp, r7
 801c38a:	bd80      	pop	{r7, pc}

0801c38c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801c38c:	b580      	push	{r7, lr}
 801c38e:	b088      	sub	sp, #32
 801c390:	af00      	add	r7, sp, #0
 801c392:	6078      	str	r0, [r7, #4]
 801c394:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801c396:	683b      	ldr	r3, [r7, #0]
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	60fb      	str	r3, [r7, #12]
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	3324      	adds	r3, #36	@ 0x24
 801c3a0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801c3a2:	220b      	movs	r2, #11
 801c3a4:	2120      	movs	r1, #32
 801c3a6:	68b8      	ldr	r0, [r7, #8]
 801c3a8:	f7ff f819 	bl	801b3de <mem_set>
	si = i = 0; ni = 8;
 801c3ac:	2300      	movs	r3, #0
 801c3ae:	613b      	str	r3, [r7, #16]
 801c3b0:	693b      	ldr	r3, [r7, #16]
 801c3b2:	61fb      	str	r3, [r7, #28]
 801c3b4:	2308      	movs	r3, #8
 801c3b6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801c3b8:	69fb      	ldr	r3, [r7, #28]
 801c3ba:	1c5a      	adds	r2, r3, #1
 801c3bc:	61fa      	str	r2, [r7, #28]
 801c3be:	68fa      	ldr	r2, [r7, #12]
 801c3c0:	4413      	add	r3, r2
 801c3c2:	781b      	ldrb	r3, [r3, #0]
 801c3c4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801c3c6:	7efb      	ldrb	r3, [r7, #27]
 801c3c8:	2b20      	cmp	r3, #32
 801c3ca:	d94e      	bls.n	801c46a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801c3cc:	7efb      	ldrb	r3, [r7, #27]
 801c3ce:	2b2f      	cmp	r3, #47	@ 0x2f
 801c3d0:	d006      	beq.n	801c3e0 <create_name+0x54>
 801c3d2:	7efb      	ldrb	r3, [r7, #27]
 801c3d4:	2b5c      	cmp	r3, #92	@ 0x5c
 801c3d6:	d110      	bne.n	801c3fa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801c3d8:	e002      	b.n	801c3e0 <create_name+0x54>
 801c3da:	69fb      	ldr	r3, [r7, #28]
 801c3dc:	3301      	adds	r3, #1
 801c3de:	61fb      	str	r3, [r7, #28]
 801c3e0:	68fa      	ldr	r2, [r7, #12]
 801c3e2:	69fb      	ldr	r3, [r7, #28]
 801c3e4:	4413      	add	r3, r2
 801c3e6:	781b      	ldrb	r3, [r3, #0]
 801c3e8:	2b2f      	cmp	r3, #47	@ 0x2f
 801c3ea:	d0f6      	beq.n	801c3da <create_name+0x4e>
 801c3ec:	68fa      	ldr	r2, [r7, #12]
 801c3ee:	69fb      	ldr	r3, [r7, #28]
 801c3f0:	4413      	add	r3, r2
 801c3f2:	781b      	ldrb	r3, [r3, #0]
 801c3f4:	2b5c      	cmp	r3, #92	@ 0x5c
 801c3f6:	d0f0      	beq.n	801c3da <create_name+0x4e>
			break;
 801c3f8:	e038      	b.n	801c46c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801c3fa:	7efb      	ldrb	r3, [r7, #27]
 801c3fc:	2b2e      	cmp	r3, #46	@ 0x2e
 801c3fe:	d003      	beq.n	801c408 <create_name+0x7c>
 801c400:	693a      	ldr	r2, [r7, #16]
 801c402:	697b      	ldr	r3, [r7, #20]
 801c404:	429a      	cmp	r2, r3
 801c406:	d30c      	bcc.n	801c422 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801c408:	697b      	ldr	r3, [r7, #20]
 801c40a:	2b0b      	cmp	r3, #11
 801c40c:	d002      	beq.n	801c414 <create_name+0x88>
 801c40e:	7efb      	ldrb	r3, [r7, #27]
 801c410:	2b2e      	cmp	r3, #46	@ 0x2e
 801c412:	d001      	beq.n	801c418 <create_name+0x8c>
 801c414:	2306      	movs	r3, #6
 801c416:	e044      	b.n	801c4a2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801c418:	2308      	movs	r3, #8
 801c41a:	613b      	str	r3, [r7, #16]
 801c41c:	230b      	movs	r3, #11
 801c41e:	617b      	str	r3, [r7, #20]
			continue;
 801c420:	e022      	b.n	801c468 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801c422:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c426:	2b00      	cmp	r3, #0
 801c428:	da04      	bge.n	801c434 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801c42a:	7efb      	ldrb	r3, [r7, #27]
 801c42c:	3b80      	subs	r3, #128	@ 0x80
 801c42e:	4a1f      	ldr	r2, [pc, #124]	@ (801c4ac <create_name+0x120>)
 801c430:	5cd3      	ldrb	r3, [r2, r3]
 801c432:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801c434:	7efb      	ldrb	r3, [r7, #27]
 801c436:	4619      	mov	r1, r3
 801c438:	481d      	ldr	r0, [pc, #116]	@ (801c4b0 <create_name+0x124>)
 801c43a:	f7ff f812 	bl	801b462 <chk_chr>
 801c43e:	4603      	mov	r3, r0
 801c440:	2b00      	cmp	r3, #0
 801c442:	d001      	beq.n	801c448 <create_name+0xbc>
 801c444:	2306      	movs	r3, #6
 801c446:	e02c      	b.n	801c4a2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801c448:	7efb      	ldrb	r3, [r7, #27]
 801c44a:	2b60      	cmp	r3, #96	@ 0x60
 801c44c:	d905      	bls.n	801c45a <create_name+0xce>
 801c44e:	7efb      	ldrb	r3, [r7, #27]
 801c450:	2b7a      	cmp	r3, #122	@ 0x7a
 801c452:	d802      	bhi.n	801c45a <create_name+0xce>
 801c454:	7efb      	ldrb	r3, [r7, #27]
 801c456:	3b20      	subs	r3, #32
 801c458:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801c45a:	693b      	ldr	r3, [r7, #16]
 801c45c:	1c5a      	adds	r2, r3, #1
 801c45e:	613a      	str	r2, [r7, #16]
 801c460:	68ba      	ldr	r2, [r7, #8]
 801c462:	4413      	add	r3, r2
 801c464:	7efa      	ldrb	r2, [r7, #27]
 801c466:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801c468:	e7a6      	b.n	801c3b8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801c46a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801c46c:	68fa      	ldr	r2, [r7, #12]
 801c46e:	69fb      	ldr	r3, [r7, #28]
 801c470:	441a      	add	r2, r3
 801c472:	683b      	ldr	r3, [r7, #0]
 801c474:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801c476:	693b      	ldr	r3, [r7, #16]
 801c478:	2b00      	cmp	r3, #0
 801c47a:	d101      	bne.n	801c480 <create_name+0xf4>
 801c47c:	2306      	movs	r3, #6
 801c47e:	e010      	b.n	801c4a2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801c480:	68bb      	ldr	r3, [r7, #8]
 801c482:	781b      	ldrb	r3, [r3, #0]
 801c484:	2be5      	cmp	r3, #229	@ 0xe5
 801c486:	d102      	bne.n	801c48e <create_name+0x102>
 801c488:	68bb      	ldr	r3, [r7, #8]
 801c48a:	2205      	movs	r2, #5
 801c48c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801c48e:	7efb      	ldrb	r3, [r7, #27]
 801c490:	2b20      	cmp	r3, #32
 801c492:	d801      	bhi.n	801c498 <create_name+0x10c>
 801c494:	2204      	movs	r2, #4
 801c496:	e000      	b.n	801c49a <create_name+0x10e>
 801c498:	2200      	movs	r2, #0
 801c49a:	68bb      	ldr	r3, [r7, #8]
 801c49c:	330b      	adds	r3, #11
 801c49e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801c4a0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801c4a2:	4618      	mov	r0, r3
 801c4a4:	3720      	adds	r7, #32
 801c4a6:	46bd      	mov	sp, r7
 801c4a8:	bd80      	pop	{r7, pc}
 801c4aa:	bf00      	nop
 801c4ac:	0801f770 	.word	0x0801f770
 801c4b0:	0801f42c 	.word	0x0801f42c

0801c4b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801c4b4:	b580      	push	{r7, lr}
 801c4b6:	b086      	sub	sp, #24
 801c4b8:	af00      	add	r7, sp, #0
 801c4ba:	6078      	str	r0, [r7, #4]
 801c4bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801c4c2:	693b      	ldr	r3, [r7, #16]
 801c4c4:	681b      	ldr	r3, [r3, #0]
 801c4c6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801c4c8:	e002      	b.n	801c4d0 <follow_path+0x1c>
 801c4ca:	683b      	ldr	r3, [r7, #0]
 801c4cc:	3301      	adds	r3, #1
 801c4ce:	603b      	str	r3, [r7, #0]
 801c4d0:	683b      	ldr	r3, [r7, #0]
 801c4d2:	781b      	ldrb	r3, [r3, #0]
 801c4d4:	2b2f      	cmp	r3, #47	@ 0x2f
 801c4d6:	d0f8      	beq.n	801c4ca <follow_path+0x16>
 801c4d8:	683b      	ldr	r3, [r7, #0]
 801c4da:	781b      	ldrb	r3, [r3, #0]
 801c4dc:	2b5c      	cmp	r3, #92	@ 0x5c
 801c4de:	d0f4      	beq.n	801c4ca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801c4e0:	693b      	ldr	r3, [r7, #16]
 801c4e2:	2200      	movs	r2, #0
 801c4e4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801c4e6:	683b      	ldr	r3, [r7, #0]
 801c4e8:	781b      	ldrb	r3, [r3, #0]
 801c4ea:	2b1f      	cmp	r3, #31
 801c4ec:	d80a      	bhi.n	801c504 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	2280      	movs	r2, #128	@ 0x80
 801c4f2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801c4f6:	2100      	movs	r1, #0
 801c4f8:	6878      	ldr	r0, [r7, #4]
 801c4fa:	f7ff fcfa 	bl	801bef2 <dir_sdi>
 801c4fe:	4603      	mov	r3, r0
 801c500:	75fb      	strb	r3, [r7, #23]
 801c502:	e043      	b.n	801c58c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801c504:	463b      	mov	r3, r7
 801c506:	4619      	mov	r1, r3
 801c508:	6878      	ldr	r0, [r7, #4]
 801c50a:	f7ff ff3f 	bl	801c38c <create_name>
 801c50e:	4603      	mov	r3, r0
 801c510:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c512:	7dfb      	ldrb	r3, [r7, #23]
 801c514:	2b00      	cmp	r3, #0
 801c516:	d134      	bne.n	801c582 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801c518:	6878      	ldr	r0, [r7, #4]
 801c51a:	f7ff feb0 	bl	801c27e <dir_find>
 801c51e:	4603      	mov	r3, r0
 801c520:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c528:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801c52a:	7dfb      	ldrb	r3, [r7, #23]
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	d00a      	beq.n	801c546 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801c530:	7dfb      	ldrb	r3, [r7, #23]
 801c532:	2b04      	cmp	r3, #4
 801c534:	d127      	bne.n	801c586 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801c536:	7afb      	ldrb	r3, [r7, #11]
 801c538:	f003 0304 	and.w	r3, r3, #4
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d122      	bne.n	801c586 <follow_path+0xd2>
 801c540:	2305      	movs	r3, #5
 801c542:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801c544:	e01f      	b.n	801c586 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801c546:	7afb      	ldrb	r3, [r7, #11]
 801c548:	f003 0304 	and.w	r3, r3, #4
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	d11c      	bne.n	801c58a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801c550:	693b      	ldr	r3, [r7, #16]
 801c552:	799b      	ldrb	r3, [r3, #6]
 801c554:	f003 0310 	and.w	r3, r3, #16
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d102      	bne.n	801c562 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801c55c:	2305      	movs	r3, #5
 801c55e:	75fb      	strb	r3, [r7, #23]
 801c560:	e014      	b.n	801c58c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801c562:	68fb      	ldr	r3, [r7, #12]
 801c564:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	695b      	ldr	r3, [r3, #20]
 801c56c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c570:	4413      	add	r3, r2
 801c572:	4619      	mov	r1, r3
 801c574:	68f8      	ldr	r0, [r7, #12]
 801c576:	f7ff fe43 	bl	801c200 <ld_clust>
 801c57a:	4602      	mov	r2, r0
 801c57c:	693b      	ldr	r3, [r7, #16]
 801c57e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801c580:	e7c0      	b.n	801c504 <follow_path+0x50>
			if (res != FR_OK) break;
 801c582:	bf00      	nop
 801c584:	e002      	b.n	801c58c <follow_path+0xd8>
				break;
 801c586:	bf00      	nop
 801c588:	e000      	b.n	801c58c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801c58a:	bf00      	nop
			}
		}
	}

	return res;
 801c58c:	7dfb      	ldrb	r3, [r7, #23]
}
 801c58e:	4618      	mov	r0, r3
 801c590:	3718      	adds	r7, #24
 801c592:	46bd      	mov	sp, r7
 801c594:	bd80      	pop	{r7, pc}

0801c596 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801c596:	b480      	push	{r7}
 801c598:	b087      	sub	sp, #28
 801c59a:	af00      	add	r7, sp, #0
 801c59c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801c59e:	f04f 33ff 	mov.w	r3, #4294967295
 801c5a2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	681b      	ldr	r3, [r3, #0]
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d031      	beq.n	801c610 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	617b      	str	r3, [r7, #20]
 801c5b2:	e002      	b.n	801c5ba <get_ldnumber+0x24>
 801c5b4:	697b      	ldr	r3, [r7, #20]
 801c5b6:	3301      	adds	r3, #1
 801c5b8:	617b      	str	r3, [r7, #20]
 801c5ba:	697b      	ldr	r3, [r7, #20]
 801c5bc:	781b      	ldrb	r3, [r3, #0]
 801c5be:	2b20      	cmp	r3, #32
 801c5c0:	d903      	bls.n	801c5ca <get_ldnumber+0x34>
 801c5c2:	697b      	ldr	r3, [r7, #20]
 801c5c4:	781b      	ldrb	r3, [r3, #0]
 801c5c6:	2b3a      	cmp	r3, #58	@ 0x3a
 801c5c8:	d1f4      	bne.n	801c5b4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801c5ca:	697b      	ldr	r3, [r7, #20]
 801c5cc:	781b      	ldrb	r3, [r3, #0]
 801c5ce:	2b3a      	cmp	r3, #58	@ 0x3a
 801c5d0:	d11c      	bne.n	801c60c <get_ldnumber+0x76>
			tp = *path;
 801c5d2:	687b      	ldr	r3, [r7, #4]
 801c5d4:	681b      	ldr	r3, [r3, #0]
 801c5d6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801c5d8:	68fb      	ldr	r3, [r7, #12]
 801c5da:	1c5a      	adds	r2, r3, #1
 801c5dc:	60fa      	str	r2, [r7, #12]
 801c5de:	781b      	ldrb	r3, [r3, #0]
 801c5e0:	3b30      	subs	r3, #48	@ 0x30
 801c5e2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801c5e4:	68bb      	ldr	r3, [r7, #8]
 801c5e6:	2b09      	cmp	r3, #9
 801c5e8:	d80e      	bhi.n	801c608 <get_ldnumber+0x72>
 801c5ea:	68fa      	ldr	r2, [r7, #12]
 801c5ec:	697b      	ldr	r3, [r7, #20]
 801c5ee:	429a      	cmp	r2, r3
 801c5f0:	d10a      	bne.n	801c608 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801c5f2:	68bb      	ldr	r3, [r7, #8]
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	d107      	bne.n	801c608 <get_ldnumber+0x72>
					vol = (int)i;
 801c5f8:	68bb      	ldr	r3, [r7, #8]
 801c5fa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801c5fc:	697b      	ldr	r3, [r7, #20]
 801c5fe:	3301      	adds	r3, #1
 801c600:	617b      	str	r3, [r7, #20]
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	697a      	ldr	r2, [r7, #20]
 801c606:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801c608:	693b      	ldr	r3, [r7, #16]
 801c60a:	e002      	b.n	801c612 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801c60c:	2300      	movs	r3, #0
 801c60e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801c610:	693b      	ldr	r3, [r7, #16]
}
 801c612:	4618      	mov	r0, r3
 801c614:	371c      	adds	r7, #28
 801c616:	46bd      	mov	sp, r7
 801c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c61c:	4770      	bx	lr
	...

0801c620 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801c620:	b580      	push	{r7, lr}
 801c622:	b082      	sub	sp, #8
 801c624:	af00      	add	r7, sp, #0
 801c626:	6078      	str	r0, [r7, #4]
 801c628:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	2200      	movs	r2, #0
 801c62e:	70da      	strb	r2, [r3, #3]
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	f04f 32ff 	mov.w	r2, #4294967295
 801c636:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801c638:	6839      	ldr	r1, [r7, #0]
 801c63a:	6878      	ldr	r0, [r7, #4]
 801c63c:	f7ff f8dc 	bl	801b7f8 <move_window>
 801c640:	4603      	mov	r3, r0
 801c642:	2b00      	cmp	r3, #0
 801c644:	d001      	beq.n	801c64a <check_fs+0x2a>
 801c646:	2304      	movs	r3, #4
 801c648:	e038      	b.n	801c6bc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	3330      	adds	r3, #48	@ 0x30
 801c64e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801c652:	4618      	mov	r0, r3
 801c654:	f7fe fe20 	bl	801b298 <ld_word>
 801c658:	4603      	mov	r3, r0
 801c65a:	461a      	mov	r2, r3
 801c65c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801c660:	429a      	cmp	r2, r3
 801c662:	d001      	beq.n	801c668 <check_fs+0x48>
 801c664:	2303      	movs	r3, #3
 801c666:	e029      	b.n	801c6bc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c66e:	2be9      	cmp	r3, #233	@ 0xe9
 801c670:	d009      	beq.n	801c686 <check_fs+0x66>
 801c672:	687b      	ldr	r3, [r7, #4]
 801c674:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c678:	2beb      	cmp	r3, #235	@ 0xeb
 801c67a:	d11e      	bne.n	801c6ba <check_fs+0x9a>
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801c682:	2b90      	cmp	r3, #144	@ 0x90
 801c684:	d119      	bne.n	801c6ba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801c686:	687b      	ldr	r3, [r7, #4]
 801c688:	3330      	adds	r3, #48	@ 0x30
 801c68a:	3336      	adds	r3, #54	@ 0x36
 801c68c:	4618      	mov	r0, r3
 801c68e:	f7fe fe1b 	bl	801b2c8 <ld_dword>
 801c692:	4603      	mov	r3, r0
 801c694:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801c698:	4a0a      	ldr	r2, [pc, #40]	@ (801c6c4 <check_fs+0xa4>)
 801c69a:	4293      	cmp	r3, r2
 801c69c:	d101      	bne.n	801c6a2 <check_fs+0x82>
 801c69e:	2300      	movs	r3, #0
 801c6a0:	e00c      	b.n	801c6bc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	3330      	adds	r3, #48	@ 0x30
 801c6a6:	3352      	adds	r3, #82	@ 0x52
 801c6a8:	4618      	mov	r0, r3
 801c6aa:	f7fe fe0d 	bl	801b2c8 <ld_dword>
 801c6ae:	4603      	mov	r3, r0
 801c6b0:	4a05      	ldr	r2, [pc, #20]	@ (801c6c8 <check_fs+0xa8>)
 801c6b2:	4293      	cmp	r3, r2
 801c6b4:	d101      	bne.n	801c6ba <check_fs+0x9a>
 801c6b6:	2300      	movs	r3, #0
 801c6b8:	e000      	b.n	801c6bc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801c6ba:	2302      	movs	r3, #2
}
 801c6bc:	4618      	mov	r0, r3
 801c6be:	3708      	adds	r7, #8
 801c6c0:	46bd      	mov	sp, r7
 801c6c2:	bd80      	pop	{r7, pc}
 801c6c4:	00544146 	.word	0x00544146
 801c6c8:	33544146 	.word	0x33544146

0801c6cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801c6cc:	b580      	push	{r7, lr}
 801c6ce:	b096      	sub	sp, #88	@ 0x58
 801c6d0:	af00      	add	r7, sp, #0
 801c6d2:	60f8      	str	r0, [r7, #12]
 801c6d4:	60b9      	str	r1, [r7, #8]
 801c6d6:	4613      	mov	r3, r2
 801c6d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801c6da:	68bb      	ldr	r3, [r7, #8]
 801c6dc:	2200      	movs	r2, #0
 801c6de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801c6e0:	68f8      	ldr	r0, [r7, #12]
 801c6e2:	f7ff ff58 	bl	801c596 <get_ldnumber>
 801c6e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801c6e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c6ea:	2b00      	cmp	r3, #0
 801c6ec:	da01      	bge.n	801c6f2 <find_volume+0x26>
 801c6ee:	230b      	movs	r3, #11
 801c6f0:	e22d      	b.n	801cb4e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801c6f2:	4aa1      	ldr	r2, [pc, #644]	@ (801c978 <find_volume+0x2ac>)
 801c6f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c6f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c6fa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801c6fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c6fe:	2b00      	cmp	r3, #0
 801c700:	d101      	bne.n	801c706 <find_volume+0x3a>
 801c702:	230c      	movs	r3, #12
 801c704:	e223      	b.n	801cb4e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801c706:	68bb      	ldr	r3, [r7, #8]
 801c708:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c70a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801c70c:	79fb      	ldrb	r3, [r7, #7]
 801c70e:	f023 0301 	bic.w	r3, r3, #1
 801c712:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801c714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c716:	781b      	ldrb	r3, [r3, #0]
 801c718:	2b00      	cmp	r3, #0
 801c71a:	d01a      	beq.n	801c752 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801c71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c71e:	785b      	ldrb	r3, [r3, #1]
 801c720:	4618      	mov	r0, r3
 801c722:	f7fe fd19 	bl	801b158 <disk_status>
 801c726:	4603      	mov	r3, r0
 801c728:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801c72c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c730:	f003 0301 	and.w	r3, r3, #1
 801c734:	2b00      	cmp	r3, #0
 801c736:	d10c      	bne.n	801c752 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801c738:	79fb      	ldrb	r3, [r7, #7]
 801c73a:	2b00      	cmp	r3, #0
 801c73c:	d007      	beq.n	801c74e <find_volume+0x82>
 801c73e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c742:	f003 0304 	and.w	r3, r3, #4
 801c746:	2b00      	cmp	r3, #0
 801c748:	d001      	beq.n	801c74e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801c74a:	230a      	movs	r3, #10
 801c74c:	e1ff      	b.n	801cb4e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801c74e:	2300      	movs	r3, #0
 801c750:	e1fd      	b.n	801cb4e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801c752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c754:	2200      	movs	r2, #0
 801c756:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801c758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c75a:	b2da      	uxtb	r2, r3
 801c75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c75e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801c760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c762:	785b      	ldrb	r3, [r3, #1]
 801c764:	4618      	mov	r0, r3
 801c766:	f7fe fd11 	bl	801b18c <disk_initialize>
 801c76a:	4603      	mov	r3, r0
 801c76c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801c770:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c774:	f003 0301 	and.w	r3, r3, #1
 801c778:	2b00      	cmp	r3, #0
 801c77a:	d001      	beq.n	801c780 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801c77c:	2303      	movs	r3, #3
 801c77e:	e1e6      	b.n	801cb4e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801c780:	79fb      	ldrb	r3, [r7, #7]
 801c782:	2b00      	cmp	r3, #0
 801c784:	d007      	beq.n	801c796 <find_volume+0xca>
 801c786:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c78a:	f003 0304 	and.w	r3, r3, #4
 801c78e:	2b00      	cmp	r3, #0
 801c790:	d001      	beq.n	801c796 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801c792:	230a      	movs	r3, #10
 801c794:	e1db      	b.n	801cb4e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801c796:	2300      	movs	r3, #0
 801c798:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801c79a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c79c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801c79e:	f7ff ff3f 	bl	801c620 <check_fs>
 801c7a2:	4603      	mov	r3, r0
 801c7a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801c7a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c7ac:	2b02      	cmp	r3, #2
 801c7ae:	d149      	bne.n	801c844 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801c7b0:	2300      	movs	r3, #0
 801c7b2:	643b      	str	r3, [r7, #64]	@ 0x40
 801c7b4:	e01e      	b.n	801c7f4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801c7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c7b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801c7bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7be:	011b      	lsls	r3, r3, #4
 801c7c0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801c7c4:	4413      	add	r3, r2
 801c7c6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801c7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7ca:	3304      	adds	r3, #4
 801c7cc:	781b      	ldrb	r3, [r3, #0]
 801c7ce:	2b00      	cmp	r3, #0
 801c7d0:	d006      	beq.n	801c7e0 <find_volume+0x114>
 801c7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7d4:	3308      	adds	r3, #8
 801c7d6:	4618      	mov	r0, r3
 801c7d8:	f7fe fd76 	bl	801b2c8 <ld_dword>
 801c7dc:	4602      	mov	r2, r0
 801c7de:	e000      	b.n	801c7e2 <find_volume+0x116>
 801c7e0:	2200      	movs	r2, #0
 801c7e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7e4:	009b      	lsls	r3, r3, #2
 801c7e6:	3358      	adds	r3, #88	@ 0x58
 801c7e8:	443b      	add	r3, r7
 801c7ea:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801c7ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7f0:	3301      	adds	r3, #1
 801c7f2:	643b      	str	r3, [r7, #64]	@ 0x40
 801c7f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7f6:	2b03      	cmp	r3, #3
 801c7f8:	d9dd      	bls.n	801c7b6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801c7fa:	2300      	movs	r3, #0
 801c7fc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801c7fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c800:	2b00      	cmp	r3, #0
 801c802:	d002      	beq.n	801c80a <find_volume+0x13e>
 801c804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c806:	3b01      	subs	r3, #1
 801c808:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801c80a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c80c:	009b      	lsls	r3, r3, #2
 801c80e:	3358      	adds	r3, #88	@ 0x58
 801c810:	443b      	add	r3, r7
 801c812:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801c816:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801c818:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d005      	beq.n	801c82a <find_volume+0x15e>
 801c81e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c820:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801c822:	f7ff fefd 	bl	801c620 <check_fs>
 801c826:	4603      	mov	r3, r0
 801c828:	e000      	b.n	801c82c <find_volume+0x160>
 801c82a:	2303      	movs	r3, #3
 801c82c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801c830:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c834:	2b01      	cmp	r3, #1
 801c836:	d905      	bls.n	801c844 <find_volume+0x178>
 801c838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c83a:	3301      	adds	r3, #1
 801c83c:	643b      	str	r3, [r7, #64]	@ 0x40
 801c83e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c840:	2b03      	cmp	r3, #3
 801c842:	d9e2      	bls.n	801c80a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801c844:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c848:	2b04      	cmp	r3, #4
 801c84a:	d101      	bne.n	801c850 <find_volume+0x184>
 801c84c:	2301      	movs	r3, #1
 801c84e:	e17e      	b.n	801cb4e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801c850:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c854:	2b01      	cmp	r3, #1
 801c856:	d901      	bls.n	801c85c <find_volume+0x190>
 801c858:	230d      	movs	r3, #13
 801c85a:	e178      	b.n	801cb4e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801c85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c85e:	3330      	adds	r3, #48	@ 0x30
 801c860:	330b      	adds	r3, #11
 801c862:	4618      	mov	r0, r3
 801c864:	f7fe fd18 	bl	801b298 <ld_word>
 801c868:	4603      	mov	r3, r0
 801c86a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c86e:	d001      	beq.n	801c874 <find_volume+0x1a8>
 801c870:	230d      	movs	r3, #13
 801c872:	e16c      	b.n	801cb4e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801c874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c876:	3330      	adds	r3, #48	@ 0x30
 801c878:	3316      	adds	r3, #22
 801c87a:	4618      	mov	r0, r3
 801c87c:	f7fe fd0c 	bl	801b298 <ld_word>
 801c880:	4603      	mov	r3, r0
 801c882:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801c884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c886:	2b00      	cmp	r3, #0
 801c888:	d106      	bne.n	801c898 <find_volume+0x1cc>
 801c88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c88c:	3330      	adds	r3, #48	@ 0x30
 801c88e:	3324      	adds	r3, #36	@ 0x24
 801c890:	4618      	mov	r0, r3
 801c892:	f7fe fd19 	bl	801b2c8 <ld_dword>
 801c896:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801c898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c89a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c89c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801c89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8a0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 801c8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801c8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8aa:	789b      	ldrb	r3, [r3, #2]
 801c8ac:	2b01      	cmp	r3, #1
 801c8ae:	d005      	beq.n	801c8bc <find_volume+0x1f0>
 801c8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8b2:	789b      	ldrb	r3, [r3, #2]
 801c8b4:	2b02      	cmp	r3, #2
 801c8b6:	d001      	beq.n	801c8bc <find_volume+0x1f0>
 801c8b8:	230d      	movs	r3, #13
 801c8ba:	e148      	b.n	801cb4e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801c8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8be:	789b      	ldrb	r3, [r3, #2]
 801c8c0:	461a      	mov	r2, r3
 801c8c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c8c4:	fb02 f303 	mul.w	r3, r2, r3
 801c8c8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801c8ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801c8d0:	461a      	mov	r2, r3
 801c8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801c8d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8d8:	895b      	ldrh	r3, [r3, #10]
 801c8da:	2b00      	cmp	r3, #0
 801c8dc:	d008      	beq.n	801c8f0 <find_volume+0x224>
 801c8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8e0:	895b      	ldrh	r3, [r3, #10]
 801c8e2:	461a      	mov	r2, r3
 801c8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8e6:	895b      	ldrh	r3, [r3, #10]
 801c8e8:	3b01      	subs	r3, #1
 801c8ea:	4013      	ands	r3, r2
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	d001      	beq.n	801c8f4 <find_volume+0x228>
 801c8f0:	230d      	movs	r3, #13
 801c8f2:	e12c      	b.n	801cb4e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801c8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8f6:	3330      	adds	r3, #48	@ 0x30
 801c8f8:	3311      	adds	r3, #17
 801c8fa:	4618      	mov	r0, r3
 801c8fc:	f7fe fccc 	bl	801b298 <ld_word>
 801c900:	4603      	mov	r3, r0
 801c902:	461a      	mov	r2, r3
 801c904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c906:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801c908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c90a:	891b      	ldrh	r3, [r3, #8]
 801c90c:	f003 030f 	and.w	r3, r3, #15
 801c910:	b29b      	uxth	r3, r3
 801c912:	2b00      	cmp	r3, #0
 801c914:	d001      	beq.n	801c91a <find_volume+0x24e>
 801c916:	230d      	movs	r3, #13
 801c918:	e119      	b.n	801cb4e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801c91a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c91c:	3330      	adds	r3, #48	@ 0x30
 801c91e:	3313      	adds	r3, #19
 801c920:	4618      	mov	r0, r3
 801c922:	f7fe fcb9 	bl	801b298 <ld_word>
 801c926:	4603      	mov	r3, r0
 801c928:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801c92a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d106      	bne.n	801c93e <find_volume+0x272>
 801c930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c932:	3330      	adds	r3, #48	@ 0x30
 801c934:	3320      	adds	r3, #32
 801c936:	4618      	mov	r0, r3
 801c938:	f7fe fcc6 	bl	801b2c8 <ld_dword>
 801c93c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801c93e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c940:	3330      	adds	r3, #48	@ 0x30
 801c942:	330e      	adds	r3, #14
 801c944:	4618      	mov	r0, r3
 801c946:	f7fe fca7 	bl	801b298 <ld_word>
 801c94a:	4603      	mov	r3, r0
 801c94c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801c94e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801c950:	2b00      	cmp	r3, #0
 801c952:	d101      	bne.n	801c958 <find_volume+0x28c>
 801c954:	230d      	movs	r3, #13
 801c956:	e0fa      	b.n	801cb4e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801c958:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801c95a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c95c:	4413      	add	r3, r2
 801c95e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c960:	8912      	ldrh	r2, [r2, #8]
 801c962:	0912      	lsrs	r2, r2, #4
 801c964:	b292      	uxth	r2, r2
 801c966:	4413      	add	r3, r2
 801c968:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801c96a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c96e:	429a      	cmp	r2, r3
 801c970:	d204      	bcs.n	801c97c <find_volume+0x2b0>
 801c972:	230d      	movs	r3, #13
 801c974:	e0eb      	b.n	801cb4e <find_volume+0x482>
 801c976:	bf00      	nop
 801c978:	24000a88 	.word	0x24000a88
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801c97c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c980:	1ad3      	subs	r3, r2, r3
 801c982:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c984:	8952      	ldrh	r2, [r2, #10]
 801c986:	fbb3 f3f2 	udiv	r3, r3, r2
 801c98a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801c98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c98e:	2b00      	cmp	r3, #0
 801c990:	d101      	bne.n	801c996 <find_volume+0x2ca>
 801c992:	230d      	movs	r3, #13
 801c994:	e0db      	b.n	801cb4e <find_volume+0x482>
		fmt = FS_FAT32;
 801c996:	2303      	movs	r3, #3
 801c998:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801c99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c99e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801c9a2:	4293      	cmp	r3, r2
 801c9a4:	d802      	bhi.n	801c9ac <find_volume+0x2e0>
 801c9a6:	2302      	movs	r3, #2
 801c9a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801c9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9ae:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801c9b2:	4293      	cmp	r3, r2
 801c9b4:	d802      	bhi.n	801c9bc <find_volume+0x2f0>
 801c9b6:	2301      	movs	r3, #1
 801c9b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801c9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9be:	1c9a      	adds	r2, r3, #2
 801c9c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9c2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801c9c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801c9c8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801c9ca:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801c9cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c9ce:	441a      	add	r2, r3
 801c9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9d2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801c9d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801c9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c9d8:	441a      	add	r2, r3
 801c9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9dc:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 801c9de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c9e2:	2b03      	cmp	r3, #3
 801c9e4:	d11e      	bne.n	801ca24 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801c9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9e8:	3330      	adds	r3, #48	@ 0x30
 801c9ea:	332a      	adds	r3, #42	@ 0x2a
 801c9ec:	4618      	mov	r0, r3
 801c9ee:	f7fe fc53 	bl	801b298 <ld_word>
 801c9f2:	4603      	mov	r3, r0
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d001      	beq.n	801c9fc <find_volume+0x330>
 801c9f8:	230d      	movs	r3, #13
 801c9fa:	e0a8      	b.n	801cb4e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801c9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9fe:	891b      	ldrh	r3, [r3, #8]
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	d001      	beq.n	801ca08 <find_volume+0x33c>
 801ca04:	230d      	movs	r3, #13
 801ca06:	e0a2      	b.n	801cb4e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801ca08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca0a:	3330      	adds	r3, #48	@ 0x30
 801ca0c:	332c      	adds	r3, #44	@ 0x2c
 801ca0e:	4618      	mov	r0, r3
 801ca10:	f7fe fc5a 	bl	801b2c8 <ld_dword>
 801ca14:	4602      	mov	r2, r0
 801ca16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca18:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801ca1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca1c:	695b      	ldr	r3, [r3, #20]
 801ca1e:	009b      	lsls	r3, r3, #2
 801ca20:	647b      	str	r3, [r7, #68]	@ 0x44
 801ca22:	e01f      	b.n	801ca64 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801ca24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca26:	891b      	ldrh	r3, [r3, #8]
 801ca28:	2b00      	cmp	r3, #0
 801ca2a:	d101      	bne.n	801ca30 <find_volume+0x364>
 801ca2c:	230d      	movs	r3, #13
 801ca2e:	e08e      	b.n	801cb4e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801ca30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca32:	6a1a      	ldr	r2, [r3, #32]
 801ca34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ca36:	441a      	add	r2, r3
 801ca38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca3a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801ca3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ca40:	2b02      	cmp	r3, #2
 801ca42:	d103      	bne.n	801ca4c <find_volume+0x380>
 801ca44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca46:	695b      	ldr	r3, [r3, #20]
 801ca48:	005b      	lsls	r3, r3, #1
 801ca4a:	e00a      	b.n	801ca62 <find_volume+0x396>
 801ca4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca4e:	695a      	ldr	r2, [r3, #20]
 801ca50:	4613      	mov	r3, r2
 801ca52:	005b      	lsls	r3, r3, #1
 801ca54:	4413      	add	r3, r2
 801ca56:	085a      	lsrs	r2, r3, #1
 801ca58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca5a:	695b      	ldr	r3, [r3, #20]
 801ca5c:	f003 0301 	and.w	r3, r3, #1
 801ca60:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801ca62:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801ca64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca66:	699a      	ldr	r2, [r3, #24]
 801ca68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ca6a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801ca6e:	0a5b      	lsrs	r3, r3, #9
 801ca70:	429a      	cmp	r2, r3
 801ca72:	d201      	bcs.n	801ca78 <find_volume+0x3ac>
 801ca74:	230d      	movs	r3, #13
 801ca76:	e06a      	b.n	801cb4e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801ca78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca7a:	f04f 32ff 	mov.w	r2, #4294967295
 801ca7e:	611a      	str	r2, [r3, #16]
 801ca80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca82:	691a      	ldr	r2, [r3, #16]
 801ca84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca86:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 801ca88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca8a:	2280      	movs	r2, #128	@ 0x80
 801ca8c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801ca8e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ca92:	2b03      	cmp	r3, #3
 801ca94:	d149      	bne.n	801cb2a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801ca96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca98:	3330      	adds	r3, #48	@ 0x30
 801ca9a:	3330      	adds	r3, #48	@ 0x30
 801ca9c:	4618      	mov	r0, r3
 801ca9e:	f7fe fbfb 	bl	801b298 <ld_word>
 801caa2:	4603      	mov	r3, r0
 801caa4:	2b01      	cmp	r3, #1
 801caa6:	d140      	bne.n	801cb2a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801caa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801caaa:	3301      	adds	r3, #1
 801caac:	4619      	mov	r1, r3
 801caae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cab0:	f7fe fea2 	bl	801b7f8 <move_window>
 801cab4:	4603      	mov	r3, r0
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	d137      	bne.n	801cb2a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801caba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cabc:	2200      	movs	r2, #0
 801cabe:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801cac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cac2:	3330      	adds	r3, #48	@ 0x30
 801cac4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801cac8:	4618      	mov	r0, r3
 801caca:	f7fe fbe5 	bl	801b298 <ld_word>
 801cace:	4603      	mov	r3, r0
 801cad0:	461a      	mov	r2, r3
 801cad2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801cad6:	429a      	cmp	r2, r3
 801cad8:	d127      	bne.n	801cb2a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801cada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cadc:	3330      	adds	r3, #48	@ 0x30
 801cade:	4618      	mov	r0, r3
 801cae0:	f7fe fbf2 	bl	801b2c8 <ld_dword>
 801cae4:	4603      	mov	r3, r0
 801cae6:	4a1c      	ldr	r2, [pc, #112]	@ (801cb58 <find_volume+0x48c>)
 801cae8:	4293      	cmp	r3, r2
 801caea:	d11e      	bne.n	801cb2a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801caec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801caee:	3330      	adds	r3, #48	@ 0x30
 801caf0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801caf4:	4618      	mov	r0, r3
 801caf6:	f7fe fbe7 	bl	801b2c8 <ld_dword>
 801cafa:	4603      	mov	r3, r0
 801cafc:	4a17      	ldr	r2, [pc, #92]	@ (801cb5c <find_volume+0x490>)
 801cafe:	4293      	cmp	r3, r2
 801cb00:	d113      	bne.n	801cb2a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801cb02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb04:	3330      	adds	r3, #48	@ 0x30
 801cb06:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801cb0a:	4618      	mov	r0, r3
 801cb0c:	f7fe fbdc 	bl	801b2c8 <ld_dword>
 801cb10:	4602      	mov	r2, r0
 801cb12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb14:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801cb16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb18:	3330      	adds	r3, #48	@ 0x30
 801cb1a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801cb1e:	4618      	mov	r0, r3
 801cb20:	f7fe fbd2 	bl	801b2c8 <ld_dword>
 801cb24:	4602      	mov	r2, r0
 801cb26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb28:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801cb2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb2c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801cb30:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801cb32:	4b0b      	ldr	r3, [pc, #44]	@ (801cb60 <find_volume+0x494>)
 801cb34:	881b      	ldrh	r3, [r3, #0]
 801cb36:	3301      	adds	r3, #1
 801cb38:	b29a      	uxth	r2, r3
 801cb3a:	4b09      	ldr	r3, [pc, #36]	@ (801cb60 <find_volume+0x494>)
 801cb3c:	801a      	strh	r2, [r3, #0]
 801cb3e:	4b08      	ldr	r3, [pc, #32]	@ (801cb60 <find_volume+0x494>)
 801cb40:	881a      	ldrh	r2, [r3, #0]
 801cb42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb44:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801cb46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cb48:	f7fe fdee 	bl	801b728 <clear_lock>
#endif
	return FR_OK;
 801cb4c:	2300      	movs	r3, #0
}
 801cb4e:	4618      	mov	r0, r3
 801cb50:	3758      	adds	r7, #88	@ 0x58
 801cb52:	46bd      	mov	sp, r7
 801cb54:	bd80      	pop	{r7, pc}
 801cb56:	bf00      	nop
 801cb58:	41615252 	.word	0x41615252
 801cb5c:	61417272 	.word	0x61417272
 801cb60:	24000a8c 	.word	0x24000a8c

0801cb64 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801cb64:	b580      	push	{r7, lr}
 801cb66:	b084      	sub	sp, #16
 801cb68:	af00      	add	r7, sp, #0
 801cb6a:	6078      	str	r0, [r7, #4]
 801cb6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801cb6e:	2309      	movs	r3, #9
 801cb70:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801cb72:	687b      	ldr	r3, [r7, #4]
 801cb74:	2b00      	cmp	r3, #0
 801cb76:	d01c      	beq.n	801cbb2 <validate+0x4e>
 801cb78:	687b      	ldr	r3, [r7, #4]
 801cb7a:	681b      	ldr	r3, [r3, #0]
 801cb7c:	2b00      	cmp	r3, #0
 801cb7e:	d018      	beq.n	801cbb2 <validate+0x4e>
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	681b      	ldr	r3, [r3, #0]
 801cb84:	781b      	ldrb	r3, [r3, #0]
 801cb86:	2b00      	cmp	r3, #0
 801cb88:	d013      	beq.n	801cbb2 <validate+0x4e>
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	889a      	ldrh	r2, [r3, #4]
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	681b      	ldr	r3, [r3, #0]
 801cb92:	88db      	ldrh	r3, [r3, #6]
 801cb94:	429a      	cmp	r2, r3
 801cb96:	d10c      	bne.n	801cbb2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	681b      	ldr	r3, [r3, #0]
 801cb9c:	785b      	ldrb	r3, [r3, #1]
 801cb9e:	4618      	mov	r0, r3
 801cba0:	f7fe fada 	bl	801b158 <disk_status>
 801cba4:	4603      	mov	r3, r0
 801cba6:	f003 0301 	and.w	r3, r3, #1
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	d101      	bne.n	801cbb2 <validate+0x4e>
			res = FR_OK;
 801cbae:	2300      	movs	r3, #0
 801cbb0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801cbb2:	7bfb      	ldrb	r3, [r7, #15]
 801cbb4:	2b00      	cmp	r3, #0
 801cbb6:	d102      	bne.n	801cbbe <validate+0x5a>
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	681b      	ldr	r3, [r3, #0]
 801cbbc:	e000      	b.n	801cbc0 <validate+0x5c>
 801cbbe:	2300      	movs	r3, #0
 801cbc0:	683a      	ldr	r2, [r7, #0]
 801cbc2:	6013      	str	r3, [r2, #0]
	return res;
 801cbc4:	7bfb      	ldrb	r3, [r7, #15]
}
 801cbc6:	4618      	mov	r0, r3
 801cbc8:	3710      	adds	r7, #16
 801cbca:	46bd      	mov	sp, r7
 801cbcc:	bd80      	pop	{r7, pc}
	...

0801cbd0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801cbd0:	b580      	push	{r7, lr}
 801cbd2:	b088      	sub	sp, #32
 801cbd4:	af00      	add	r7, sp, #0
 801cbd6:	60f8      	str	r0, [r7, #12]
 801cbd8:	60b9      	str	r1, [r7, #8]
 801cbda:	4613      	mov	r3, r2
 801cbdc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801cbde:	68bb      	ldr	r3, [r7, #8]
 801cbe0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801cbe2:	f107 0310 	add.w	r3, r7, #16
 801cbe6:	4618      	mov	r0, r3
 801cbe8:	f7ff fcd5 	bl	801c596 <get_ldnumber>
 801cbec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801cbee:	69fb      	ldr	r3, [r7, #28]
 801cbf0:	2b00      	cmp	r3, #0
 801cbf2:	da01      	bge.n	801cbf8 <f_mount+0x28>
 801cbf4:	230b      	movs	r3, #11
 801cbf6:	e02b      	b.n	801cc50 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801cbf8:	4a17      	ldr	r2, [pc, #92]	@ (801cc58 <f_mount+0x88>)
 801cbfa:	69fb      	ldr	r3, [r7, #28]
 801cbfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cc00:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801cc02:	69bb      	ldr	r3, [r7, #24]
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	d005      	beq.n	801cc14 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801cc08:	69b8      	ldr	r0, [r7, #24]
 801cc0a:	f7fe fd8d 	bl	801b728 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801cc0e:	69bb      	ldr	r3, [r7, #24]
 801cc10:	2200      	movs	r2, #0
 801cc12:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801cc14:	68fb      	ldr	r3, [r7, #12]
 801cc16:	2b00      	cmp	r3, #0
 801cc18:	d002      	beq.n	801cc20 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801cc1a:	68fb      	ldr	r3, [r7, #12]
 801cc1c:	2200      	movs	r2, #0
 801cc1e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801cc20:	68fa      	ldr	r2, [r7, #12]
 801cc22:	490d      	ldr	r1, [pc, #52]	@ (801cc58 <f_mount+0x88>)
 801cc24:	69fb      	ldr	r3, [r7, #28]
 801cc26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801cc2a:	68fb      	ldr	r3, [r7, #12]
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	d002      	beq.n	801cc36 <f_mount+0x66>
 801cc30:	79fb      	ldrb	r3, [r7, #7]
 801cc32:	2b01      	cmp	r3, #1
 801cc34:	d001      	beq.n	801cc3a <f_mount+0x6a>
 801cc36:	2300      	movs	r3, #0
 801cc38:	e00a      	b.n	801cc50 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801cc3a:	f107 010c 	add.w	r1, r7, #12
 801cc3e:	f107 0308 	add.w	r3, r7, #8
 801cc42:	2200      	movs	r2, #0
 801cc44:	4618      	mov	r0, r3
 801cc46:	f7ff fd41 	bl	801c6cc <find_volume>
 801cc4a:	4603      	mov	r3, r0
 801cc4c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801cc4e:	7dfb      	ldrb	r3, [r7, #23]
}
 801cc50:	4618      	mov	r0, r3
 801cc52:	3720      	adds	r7, #32
 801cc54:	46bd      	mov	sp, r7
 801cc56:	bd80      	pop	{r7, pc}
 801cc58:	24000a88 	.word	0x24000a88

0801cc5c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801cc5c:	b580      	push	{r7, lr}
 801cc5e:	b098      	sub	sp, #96	@ 0x60
 801cc60:	af00      	add	r7, sp, #0
 801cc62:	60f8      	str	r0, [r7, #12]
 801cc64:	60b9      	str	r1, [r7, #8]
 801cc66:	4613      	mov	r3, r2
 801cc68:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801cc6a:	68fb      	ldr	r3, [r7, #12]
 801cc6c:	2b00      	cmp	r3, #0
 801cc6e:	d101      	bne.n	801cc74 <f_open+0x18>
 801cc70:	2309      	movs	r3, #9
 801cc72:	e1a9      	b.n	801cfc8 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801cc74:	79fb      	ldrb	r3, [r7, #7]
 801cc76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cc7a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801cc7c:	79fa      	ldrb	r2, [r7, #7]
 801cc7e:	f107 0110 	add.w	r1, r7, #16
 801cc82:	f107 0308 	add.w	r3, r7, #8
 801cc86:	4618      	mov	r0, r3
 801cc88:	f7ff fd20 	bl	801c6cc <find_volume>
 801cc8c:	4603      	mov	r3, r0
 801cc8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 801cc92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	f040 818d 	bne.w	801cfb6 <f_open+0x35a>
		dj.obj.fs = fs;
 801cc9c:	693b      	ldr	r3, [r7, #16]
 801cc9e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801cca0:	68ba      	ldr	r2, [r7, #8]
 801cca2:	f107 0314 	add.w	r3, r7, #20
 801cca6:	4611      	mov	r1, r2
 801cca8:	4618      	mov	r0, r3
 801ccaa:	f7ff fc03 	bl	801c4b4 <follow_path>
 801ccae:	4603      	mov	r3, r0
 801ccb0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801ccb4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d118      	bne.n	801ccee <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801ccbc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801ccc0:	b25b      	sxtb	r3, r3
 801ccc2:	2b00      	cmp	r3, #0
 801ccc4:	da03      	bge.n	801ccce <f_open+0x72>
				res = FR_INVALID_NAME;
 801ccc6:	2306      	movs	r3, #6
 801ccc8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801cccc:	e00f      	b.n	801ccee <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801ccce:	79fb      	ldrb	r3, [r7, #7]
 801ccd0:	2b01      	cmp	r3, #1
 801ccd2:	bf8c      	ite	hi
 801ccd4:	2301      	movhi	r3, #1
 801ccd6:	2300      	movls	r3, #0
 801ccd8:	b2db      	uxtb	r3, r3
 801ccda:	461a      	mov	r2, r3
 801ccdc:	f107 0314 	add.w	r3, r7, #20
 801cce0:	4611      	mov	r1, r2
 801cce2:	4618      	mov	r0, r3
 801cce4:	f7fe fbd8 	bl	801b498 <chk_lock>
 801cce8:	4603      	mov	r3, r0
 801ccea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801ccee:	79fb      	ldrb	r3, [r7, #7]
 801ccf0:	f003 031c 	and.w	r3, r3, #28
 801ccf4:	2b00      	cmp	r3, #0
 801ccf6:	d07f      	beq.n	801cdf8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801ccf8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801ccfc:	2b00      	cmp	r3, #0
 801ccfe:	d017      	beq.n	801cd30 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801cd00:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801cd04:	2b04      	cmp	r3, #4
 801cd06:	d10e      	bne.n	801cd26 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801cd08:	f7fe fc22 	bl	801b550 <enq_lock>
 801cd0c:	4603      	mov	r3, r0
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	d006      	beq.n	801cd20 <f_open+0xc4>
 801cd12:	f107 0314 	add.w	r3, r7, #20
 801cd16:	4618      	mov	r0, r3
 801cd18:	f7ff fb06 	bl	801c328 <dir_register>
 801cd1c:	4603      	mov	r3, r0
 801cd1e:	e000      	b.n	801cd22 <f_open+0xc6>
 801cd20:	2312      	movs	r3, #18
 801cd22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801cd26:	79fb      	ldrb	r3, [r7, #7]
 801cd28:	f043 0308 	orr.w	r3, r3, #8
 801cd2c:	71fb      	strb	r3, [r7, #7]
 801cd2e:	e010      	b.n	801cd52 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801cd30:	7ebb      	ldrb	r3, [r7, #26]
 801cd32:	f003 0311 	and.w	r3, r3, #17
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d003      	beq.n	801cd42 <f_open+0xe6>
					res = FR_DENIED;
 801cd3a:	2307      	movs	r3, #7
 801cd3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801cd40:	e007      	b.n	801cd52 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801cd42:	79fb      	ldrb	r3, [r7, #7]
 801cd44:	f003 0304 	and.w	r3, r3, #4
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d002      	beq.n	801cd52 <f_open+0xf6>
 801cd4c:	2308      	movs	r3, #8
 801cd4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801cd52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	d168      	bne.n	801ce2c <f_open+0x1d0>
 801cd5a:	79fb      	ldrb	r3, [r7, #7]
 801cd5c:	f003 0308 	and.w	r3, r3, #8
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	d063      	beq.n	801ce2c <f_open+0x1d0>
				dw = GET_FATTIME();
 801cd64:	f7fd ff6c 	bl	801ac40 <get_fattime>
 801cd68:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801cd6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cd6c:	330e      	adds	r3, #14
 801cd6e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801cd70:	4618      	mov	r0, r3
 801cd72:	f7fe fae7 	bl	801b344 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801cd76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cd78:	3316      	adds	r3, #22
 801cd7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801cd7c:	4618      	mov	r0, r3
 801cd7e:	f7fe fae1 	bl	801b344 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801cd82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cd84:	330b      	adds	r3, #11
 801cd86:	2220      	movs	r2, #32
 801cd88:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801cd8a:	693b      	ldr	r3, [r7, #16]
 801cd8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801cd8e:	4611      	mov	r1, r2
 801cd90:	4618      	mov	r0, r3
 801cd92:	f7ff fa35 	bl	801c200 <ld_clust>
 801cd96:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801cd98:	693b      	ldr	r3, [r7, #16]
 801cd9a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801cd9c:	2200      	movs	r2, #0
 801cd9e:	4618      	mov	r0, r3
 801cda0:	f7ff fa4d 	bl	801c23e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801cda4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cda6:	331c      	adds	r3, #28
 801cda8:	2100      	movs	r1, #0
 801cdaa:	4618      	mov	r0, r3
 801cdac:	f7fe faca 	bl	801b344 <st_dword>
					fs->wflag = 1;
 801cdb0:	693b      	ldr	r3, [r7, #16]
 801cdb2:	2201      	movs	r2, #1
 801cdb4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801cdb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	d037      	beq.n	801ce2c <f_open+0x1d0>
						dw = fs->winsect;
 801cdbc:	693b      	ldr	r3, [r7, #16]
 801cdbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cdc0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801cdc2:	f107 0314 	add.w	r3, r7, #20
 801cdc6:	2200      	movs	r2, #0
 801cdc8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801cdca:	4618      	mov	r0, r3
 801cdcc:	f7fe ff60 	bl	801bc90 <remove_chain>
 801cdd0:	4603      	mov	r3, r0
 801cdd2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801cdd6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	d126      	bne.n	801ce2c <f_open+0x1d0>
							res = move_window(fs, dw);
 801cdde:	693b      	ldr	r3, [r7, #16]
 801cde0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801cde2:	4618      	mov	r0, r3
 801cde4:	f7fe fd08 	bl	801b7f8 <move_window>
 801cde8:	4603      	mov	r3, r0
 801cdea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801cdee:	693b      	ldr	r3, [r7, #16]
 801cdf0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801cdf2:	3a01      	subs	r2, #1
 801cdf4:	60da      	str	r2, [r3, #12]
 801cdf6:	e019      	b.n	801ce2c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801cdf8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	d115      	bne.n	801ce2c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801ce00:	7ebb      	ldrb	r3, [r7, #26]
 801ce02:	f003 0310 	and.w	r3, r3, #16
 801ce06:	2b00      	cmp	r3, #0
 801ce08:	d003      	beq.n	801ce12 <f_open+0x1b6>
					res = FR_NO_FILE;
 801ce0a:	2304      	movs	r3, #4
 801ce0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801ce10:	e00c      	b.n	801ce2c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801ce12:	79fb      	ldrb	r3, [r7, #7]
 801ce14:	f003 0302 	and.w	r3, r3, #2
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	d007      	beq.n	801ce2c <f_open+0x1d0>
 801ce1c:	7ebb      	ldrb	r3, [r7, #26]
 801ce1e:	f003 0301 	and.w	r3, r3, #1
 801ce22:	2b00      	cmp	r3, #0
 801ce24:	d002      	beq.n	801ce2c <f_open+0x1d0>
						res = FR_DENIED;
 801ce26:	2307      	movs	r3, #7
 801ce28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801ce2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	d126      	bne.n	801ce82 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801ce34:	79fb      	ldrb	r3, [r7, #7]
 801ce36:	f003 0308 	and.w	r3, r3, #8
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	d003      	beq.n	801ce46 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801ce3e:	79fb      	ldrb	r3, [r7, #7]
 801ce40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ce44:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801ce46:	693b      	ldr	r3, [r7, #16]
 801ce48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ce4a:	68fb      	ldr	r3, [r7, #12]
 801ce4c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801ce4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ce50:	68fb      	ldr	r3, [r7, #12]
 801ce52:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801ce54:	79fb      	ldrb	r3, [r7, #7]
 801ce56:	2b01      	cmp	r3, #1
 801ce58:	bf8c      	ite	hi
 801ce5a:	2301      	movhi	r3, #1
 801ce5c:	2300      	movls	r3, #0
 801ce5e:	b2db      	uxtb	r3, r3
 801ce60:	461a      	mov	r2, r3
 801ce62:	f107 0314 	add.w	r3, r7, #20
 801ce66:	4611      	mov	r1, r2
 801ce68:	4618      	mov	r0, r3
 801ce6a:	f7fe fb93 	bl	801b594 <inc_lock>
 801ce6e:	4602      	mov	r2, r0
 801ce70:	68fb      	ldr	r3, [r7, #12]
 801ce72:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801ce74:	68fb      	ldr	r3, [r7, #12]
 801ce76:	691b      	ldr	r3, [r3, #16]
 801ce78:	2b00      	cmp	r3, #0
 801ce7a:	d102      	bne.n	801ce82 <f_open+0x226>
 801ce7c:	2302      	movs	r3, #2
 801ce7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801ce82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	f040 8095 	bne.w	801cfb6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801ce8c:	693b      	ldr	r3, [r7, #16]
 801ce8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ce90:	4611      	mov	r1, r2
 801ce92:	4618      	mov	r0, r3
 801ce94:	f7ff f9b4 	bl	801c200 <ld_clust>
 801ce98:	4602      	mov	r2, r0
 801ce9a:	68fb      	ldr	r3, [r7, #12]
 801ce9c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801ce9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cea0:	331c      	adds	r3, #28
 801cea2:	4618      	mov	r0, r3
 801cea4:	f7fe fa10 	bl	801b2c8 <ld_dword>
 801cea8:	4602      	mov	r2, r0
 801ceaa:	68fb      	ldr	r3, [r7, #12]
 801ceac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801ceae:	68fb      	ldr	r3, [r7, #12]
 801ceb0:	2200      	movs	r2, #0
 801ceb2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801ceb4:	693a      	ldr	r2, [r7, #16]
 801ceb6:	68fb      	ldr	r3, [r7, #12]
 801ceb8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801ceba:	693b      	ldr	r3, [r7, #16]
 801cebc:	88da      	ldrh	r2, [r3, #6]
 801cebe:	68fb      	ldr	r3, [r7, #12]
 801cec0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801cec2:	68fb      	ldr	r3, [r7, #12]
 801cec4:	79fa      	ldrb	r2, [r7, #7]
 801cec6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801cec8:	68fb      	ldr	r3, [r7, #12]
 801ceca:	2200      	movs	r2, #0
 801cecc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801cece:	68fb      	ldr	r3, [r7, #12]
 801ced0:	2200      	movs	r2, #0
 801ced2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801ced4:	68fb      	ldr	r3, [r7, #12]
 801ced6:	2200      	movs	r2, #0
 801ced8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801ceda:	68fb      	ldr	r3, [r7, #12]
 801cedc:	3330      	adds	r3, #48	@ 0x30
 801cede:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801cee2:	2100      	movs	r1, #0
 801cee4:	4618      	mov	r0, r3
 801cee6:	f7fe fa7a 	bl	801b3de <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801ceea:	79fb      	ldrb	r3, [r7, #7]
 801ceec:	f003 0320 	and.w	r3, r3, #32
 801cef0:	2b00      	cmp	r3, #0
 801cef2:	d060      	beq.n	801cfb6 <f_open+0x35a>
 801cef4:	68fb      	ldr	r3, [r7, #12]
 801cef6:	68db      	ldr	r3, [r3, #12]
 801cef8:	2b00      	cmp	r3, #0
 801cefa:	d05c      	beq.n	801cfb6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801cefc:	68fb      	ldr	r3, [r7, #12]
 801cefe:	68da      	ldr	r2, [r3, #12]
 801cf00:	68fb      	ldr	r3, [r7, #12]
 801cf02:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801cf04:	693b      	ldr	r3, [r7, #16]
 801cf06:	895b      	ldrh	r3, [r3, #10]
 801cf08:	025b      	lsls	r3, r3, #9
 801cf0a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801cf0c:	68fb      	ldr	r3, [r7, #12]
 801cf0e:	689b      	ldr	r3, [r3, #8]
 801cf10:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801cf12:	68fb      	ldr	r3, [r7, #12]
 801cf14:	68db      	ldr	r3, [r3, #12]
 801cf16:	657b      	str	r3, [r7, #84]	@ 0x54
 801cf18:	e016      	b.n	801cf48 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801cf1a:	68fb      	ldr	r3, [r7, #12]
 801cf1c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801cf1e:	4618      	mov	r0, r3
 801cf20:	f7fe fd25 	bl	801b96e <get_fat>
 801cf24:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801cf26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801cf28:	2b01      	cmp	r3, #1
 801cf2a:	d802      	bhi.n	801cf32 <f_open+0x2d6>
 801cf2c:	2302      	movs	r3, #2
 801cf2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801cf32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801cf34:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cf38:	d102      	bne.n	801cf40 <f_open+0x2e4>
 801cf3a:	2301      	movs	r3, #1
 801cf3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801cf40:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801cf42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cf44:	1ad3      	subs	r3, r2, r3
 801cf46:	657b      	str	r3, [r7, #84]	@ 0x54
 801cf48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801cf4c:	2b00      	cmp	r3, #0
 801cf4e:	d103      	bne.n	801cf58 <f_open+0x2fc>
 801cf50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801cf52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cf54:	429a      	cmp	r2, r3
 801cf56:	d8e0      	bhi.n	801cf1a <f_open+0x2be>
				}
				fp->clust = clst;
 801cf58:	68fb      	ldr	r3, [r7, #12]
 801cf5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801cf5c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801cf5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	d127      	bne.n	801cfb6 <f_open+0x35a>
 801cf66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cf68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cf6c:	2b00      	cmp	r3, #0
 801cf6e:	d022      	beq.n	801cfb6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801cf70:	693b      	ldr	r3, [r7, #16]
 801cf72:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801cf74:	4618      	mov	r0, r3
 801cf76:	f7fe fcdb 	bl	801b930 <clust2sect>
 801cf7a:	6478      	str	r0, [r7, #68]	@ 0x44
 801cf7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d103      	bne.n	801cf8a <f_open+0x32e>
						res = FR_INT_ERR;
 801cf82:	2302      	movs	r3, #2
 801cf84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801cf88:	e015      	b.n	801cfb6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801cf8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cf8c:	0a5a      	lsrs	r2, r3, #9
 801cf8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cf90:	441a      	add	r2, r3
 801cf92:	68fb      	ldr	r3, [r7, #12]
 801cf94:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801cf96:	693b      	ldr	r3, [r7, #16]
 801cf98:	7858      	ldrb	r0, [r3, #1]
 801cf9a:	68fb      	ldr	r3, [r7, #12]
 801cf9c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801cfa0:	68fb      	ldr	r3, [r7, #12]
 801cfa2:	6a1a      	ldr	r2, [r3, #32]
 801cfa4:	2301      	movs	r3, #1
 801cfa6:	f7fe f919 	bl	801b1dc <disk_read>
 801cfaa:	4603      	mov	r3, r0
 801cfac:	2b00      	cmp	r3, #0
 801cfae:	d002      	beq.n	801cfb6 <f_open+0x35a>
 801cfb0:	2301      	movs	r3, #1
 801cfb2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801cfb6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	d002      	beq.n	801cfc4 <f_open+0x368>
 801cfbe:	68fb      	ldr	r3, [r7, #12]
 801cfc0:	2200      	movs	r2, #0
 801cfc2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801cfc4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801cfc8:	4618      	mov	r0, r3
 801cfca:	3760      	adds	r7, #96	@ 0x60
 801cfcc:	46bd      	mov	sp, r7
 801cfce:	bd80      	pop	{r7, pc}

0801cfd0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801cfd0:	b580      	push	{r7, lr}
 801cfd2:	b08e      	sub	sp, #56	@ 0x38
 801cfd4:	af00      	add	r7, sp, #0
 801cfd6:	60f8      	str	r0, [r7, #12]
 801cfd8:	60b9      	str	r1, [r7, #8]
 801cfda:	607a      	str	r2, [r7, #4]
 801cfdc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801cfde:	68bb      	ldr	r3, [r7, #8]
 801cfe0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 801cfe2:	683b      	ldr	r3, [r7, #0]
 801cfe4:	2200      	movs	r2, #0
 801cfe6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801cfe8:	68fb      	ldr	r3, [r7, #12]
 801cfea:	f107 0214 	add.w	r2, r7, #20
 801cfee:	4611      	mov	r1, r2
 801cff0:	4618      	mov	r0, r3
 801cff2:	f7ff fdb7 	bl	801cb64 <validate>
 801cff6:	4603      	mov	r3, r0
 801cff8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801cffc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d000:	2b00      	cmp	r3, #0
 801d002:	d107      	bne.n	801d014 <f_read+0x44>
 801d004:	68fb      	ldr	r3, [r7, #12]
 801d006:	7d5b      	ldrb	r3, [r3, #21]
 801d008:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801d00c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d010:	2b00      	cmp	r3, #0
 801d012:	d002      	beq.n	801d01a <f_read+0x4a>
 801d014:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d018:	e115      	b.n	801d246 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801d01a:	68fb      	ldr	r3, [r7, #12]
 801d01c:	7d1b      	ldrb	r3, [r3, #20]
 801d01e:	f003 0301 	and.w	r3, r3, #1
 801d022:	2b00      	cmp	r3, #0
 801d024:	d101      	bne.n	801d02a <f_read+0x5a>
 801d026:	2307      	movs	r3, #7
 801d028:	e10d      	b.n	801d246 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801d02a:	68fb      	ldr	r3, [r7, #12]
 801d02c:	68da      	ldr	r2, [r3, #12]
 801d02e:	68fb      	ldr	r3, [r7, #12]
 801d030:	699b      	ldr	r3, [r3, #24]
 801d032:	1ad3      	subs	r3, r2, r3
 801d034:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801d036:	687a      	ldr	r2, [r7, #4]
 801d038:	6a3b      	ldr	r3, [r7, #32]
 801d03a:	429a      	cmp	r2, r3
 801d03c:	f240 80fe 	bls.w	801d23c <f_read+0x26c>
 801d040:	6a3b      	ldr	r3, [r7, #32]
 801d042:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801d044:	e0fa      	b.n	801d23c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801d046:	68fb      	ldr	r3, [r7, #12]
 801d048:	699b      	ldr	r3, [r3, #24]
 801d04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d04e:	2b00      	cmp	r3, #0
 801d050:	f040 80c6 	bne.w	801d1e0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801d054:	68fb      	ldr	r3, [r7, #12]
 801d056:	699b      	ldr	r3, [r3, #24]
 801d058:	0a5b      	lsrs	r3, r3, #9
 801d05a:	697a      	ldr	r2, [r7, #20]
 801d05c:	8952      	ldrh	r2, [r2, #10]
 801d05e:	3a01      	subs	r2, #1
 801d060:	4013      	ands	r3, r2
 801d062:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801d064:	69fb      	ldr	r3, [r7, #28]
 801d066:	2b00      	cmp	r3, #0
 801d068:	d12f      	bne.n	801d0ca <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801d06a:	68fb      	ldr	r3, [r7, #12]
 801d06c:	699b      	ldr	r3, [r3, #24]
 801d06e:	2b00      	cmp	r3, #0
 801d070:	d103      	bne.n	801d07a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801d072:	68fb      	ldr	r3, [r7, #12]
 801d074:	689b      	ldr	r3, [r3, #8]
 801d076:	633b      	str	r3, [r7, #48]	@ 0x30
 801d078:	e013      	b.n	801d0a2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d07a:	68fb      	ldr	r3, [r7, #12]
 801d07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d07e:	2b00      	cmp	r3, #0
 801d080:	d007      	beq.n	801d092 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801d082:	68fb      	ldr	r3, [r7, #12]
 801d084:	699b      	ldr	r3, [r3, #24]
 801d086:	4619      	mov	r1, r3
 801d088:	68f8      	ldr	r0, [r7, #12]
 801d08a:	f7fe fefe 	bl	801be8a <clmt_clust>
 801d08e:	6338      	str	r0, [r7, #48]	@ 0x30
 801d090:	e007      	b.n	801d0a2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801d092:	68fa      	ldr	r2, [r7, #12]
 801d094:	68fb      	ldr	r3, [r7, #12]
 801d096:	69db      	ldr	r3, [r3, #28]
 801d098:	4619      	mov	r1, r3
 801d09a:	4610      	mov	r0, r2
 801d09c:	f7fe fc67 	bl	801b96e <get_fat>
 801d0a0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801d0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0a4:	2b01      	cmp	r3, #1
 801d0a6:	d804      	bhi.n	801d0b2 <f_read+0xe2>
 801d0a8:	68fb      	ldr	r3, [r7, #12]
 801d0aa:	2202      	movs	r2, #2
 801d0ac:	755a      	strb	r2, [r3, #21]
 801d0ae:	2302      	movs	r3, #2
 801d0b0:	e0c9      	b.n	801d246 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801d0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d0b8:	d104      	bne.n	801d0c4 <f_read+0xf4>
 801d0ba:	68fb      	ldr	r3, [r7, #12]
 801d0bc:	2201      	movs	r2, #1
 801d0be:	755a      	strb	r2, [r3, #21]
 801d0c0:	2301      	movs	r3, #1
 801d0c2:	e0c0      	b.n	801d246 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 801d0c4:	68fb      	ldr	r3, [r7, #12]
 801d0c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d0c8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801d0ca:	697a      	ldr	r2, [r7, #20]
 801d0cc:	68fb      	ldr	r3, [r7, #12]
 801d0ce:	69db      	ldr	r3, [r3, #28]
 801d0d0:	4619      	mov	r1, r3
 801d0d2:	4610      	mov	r0, r2
 801d0d4:	f7fe fc2c 	bl	801b930 <clust2sect>
 801d0d8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801d0da:	69bb      	ldr	r3, [r7, #24]
 801d0dc:	2b00      	cmp	r3, #0
 801d0de:	d104      	bne.n	801d0ea <f_read+0x11a>
 801d0e0:	68fb      	ldr	r3, [r7, #12]
 801d0e2:	2202      	movs	r2, #2
 801d0e4:	755a      	strb	r2, [r3, #21]
 801d0e6:	2302      	movs	r3, #2
 801d0e8:	e0ad      	b.n	801d246 <f_read+0x276>
			sect += csect;
 801d0ea:	69ba      	ldr	r2, [r7, #24]
 801d0ec:	69fb      	ldr	r3, [r7, #28]
 801d0ee:	4413      	add	r3, r2
 801d0f0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	0a5b      	lsrs	r3, r3, #9
 801d0f6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801d0f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	d039      	beq.n	801d172 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801d0fe:	69fa      	ldr	r2, [r7, #28]
 801d100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d102:	4413      	add	r3, r2
 801d104:	697a      	ldr	r2, [r7, #20]
 801d106:	8952      	ldrh	r2, [r2, #10]
 801d108:	4293      	cmp	r3, r2
 801d10a:	d905      	bls.n	801d118 <f_read+0x148>
					cc = fs->csize - csect;
 801d10c:	697b      	ldr	r3, [r7, #20]
 801d10e:	895b      	ldrh	r3, [r3, #10]
 801d110:	461a      	mov	r2, r3
 801d112:	69fb      	ldr	r3, [r7, #28]
 801d114:	1ad3      	subs	r3, r2, r3
 801d116:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d118:	697b      	ldr	r3, [r7, #20]
 801d11a:	7858      	ldrb	r0, [r3, #1]
 801d11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d11e:	69ba      	ldr	r2, [r7, #24]
 801d120:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d122:	f7fe f85b 	bl	801b1dc <disk_read>
 801d126:	4603      	mov	r3, r0
 801d128:	2b00      	cmp	r3, #0
 801d12a:	d004      	beq.n	801d136 <f_read+0x166>
 801d12c:	68fb      	ldr	r3, [r7, #12]
 801d12e:	2201      	movs	r2, #1
 801d130:	755a      	strb	r2, [r3, #21]
 801d132:	2301      	movs	r3, #1
 801d134:	e087      	b.n	801d246 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801d136:	68fb      	ldr	r3, [r7, #12]
 801d138:	7d1b      	ldrb	r3, [r3, #20]
 801d13a:	b25b      	sxtb	r3, r3
 801d13c:	2b00      	cmp	r3, #0
 801d13e:	da14      	bge.n	801d16a <f_read+0x19a>
 801d140:	68fb      	ldr	r3, [r7, #12]
 801d142:	6a1a      	ldr	r2, [r3, #32]
 801d144:	69bb      	ldr	r3, [r7, #24]
 801d146:	1ad3      	subs	r3, r2, r3
 801d148:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d14a:	429a      	cmp	r2, r3
 801d14c:	d90d      	bls.n	801d16a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801d14e:	68fb      	ldr	r3, [r7, #12]
 801d150:	6a1a      	ldr	r2, [r3, #32]
 801d152:	69bb      	ldr	r3, [r7, #24]
 801d154:	1ad3      	subs	r3, r2, r3
 801d156:	025b      	lsls	r3, r3, #9
 801d158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d15a:	18d0      	adds	r0, r2, r3
 801d15c:	68fb      	ldr	r3, [r7, #12]
 801d15e:	3330      	adds	r3, #48	@ 0x30
 801d160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d164:	4619      	mov	r1, r3
 801d166:	f7fe f919 	bl	801b39c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801d16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d16c:	025b      	lsls	r3, r3, #9
 801d16e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 801d170:	e050      	b.n	801d214 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801d172:	68fb      	ldr	r3, [r7, #12]
 801d174:	6a1b      	ldr	r3, [r3, #32]
 801d176:	69ba      	ldr	r2, [r7, #24]
 801d178:	429a      	cmp	r2, r3
 801d17a:	d02e      	beq.n	801d1da <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801d17c:	68fb      	ldr	r3, [r7, #12]
 801d17e:	7d1b      	ldrb	r3, [r3, #20]
 801d180:	b25b      	sxtb	r3, r3
 801d182:	2b00      	cmp	r3, #0
 801d184:	da18      	bge.n	801d1b8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d186:	697b      	ldr	r3, [r7, #20]
 801d188:	7858      	ldrb	r0, [r3, #1]
 801d18a:	68fb      	ldr	r3, [r7, #12]
 801d18c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d190:	68fb      	ldr	r3, [r7, #12]
 801d192:	6a1a      	ldr	r2, [r3, #32]
 801d194:	2301      	movs	r3, #1
 801d196:	f7fe f841 	bl	801b21c <disk_write>
 801d19a:	4603      	mov	r3, r0
 801d19c:	2b00      	cmp	r3, #0
 801d19e:	d004      	beq.n	801d1aa <f_read+0x1da>
 801d1a0:	68fb      	ldr	r3, [r7, #12]
 801d1a2:	2201      	movs	r2, #1
 801d1a4:	755a      	strb	r2, [r3, #21]
 801d1a6:	2301      	movs	r3, #1
 801d1a8:	e04d      	b.n	801d246 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801d1aa:	68fb      	ldr	r3, [r7, #12]
 801d1ac:	7d1b      	ldrb	r3, [r3, #20]
 801d1ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d1b2:	b2da      	uxtb	r2, r3
 801d1b4:	68fb      	ldr	r3, [r7, #12]
 801d1b6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801d1b8:	697b      	ldr	r3, [r7, #20]
 801d1ba:	7858      	ldrb	r0, [r3, #1]
 801d1bc:	68fb      	ldr	r3, [r7, #12]
 801d1be:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d1c2:	2301      	movs	r3, #1
 801d1c4:	69ba      	ldr	r2, [r7, #24]
 801d1c6:	f7fe f809 	bl	801b1dc <disk_read>
 801d1ca:	4603      	mov	r3, r0
 801d1cc:	2b00      	cmp	r3, #0
 801d1ce:	d004      	beq.n	801d1da <f_read+0x20a>
 801d1d0:	68fb      	ldr	r3, [r7, #12]
 801d1d2:	2201      	movs	r2, #1
 801d1d4:	755a      	strb	r2, [r3, #21]
 801d1d6:	2301      	movs	r3, #1
 801d1d8:	e035      	b.n	801d246 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801d1da:	68fb      	ldr	r3, [r7, #12]
 801d1dc:	69ba      	ldr	r2, [r7, #24]
 801d1de:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801d1e0:	68fb      	ldr	r3, [r7, #12]
 801d1e2:	699b      	ldr	r3, [r3, #24]
 801d1e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d1e8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801d1ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801d1ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d1f0:	687b      	ldr	r3, [r7, #4]
 801d1f2:	429a      	cmp	r2, r3
 801d1f4:	d901      	bls.n	801d1fa <f_read+0x22a>
 801d1f6:	687b      	ldr	r3, [r7, #4]
 801d1f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801d1fa:	68fb      	ldr	r3, [r7, #12]
 801d1fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801d200:	68fb      	ldr	r3, [r7, #12]
 801d202:	699b      	ldr	r3, [r3, #24]
 801d204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d208:	4413      	add	r3, r2
 801d20a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d20c:	4619      	mov	r1, r3
 801d20e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d210:	f7fe f8c4 	bl	801b39c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801d214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d218:	4413      	add	r3, r2
 801d21a:	627b      	str	r3, [r7, #36]	@ 0x24
 801d21c:	68fb      	ldr	r3, [r7, #12]
 801d21e:	699a      	ldr	r2, [r3, #24]
 801d220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d222:	441a      	add	r2, r3
 801d224:	68fb      	ldr	r3, [r7, #12]
 801d226:	619a      	str	r2, [r3, #24]
 801d228:	683b      	ldr	r3, [r7, #0]
 801d22a:	681a      	ldr	r2, [r3, #0]
 801d22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d22e:	441a      	add	r2, r3
 801d230:	683b      	ldr	r3, [r7, #0]
 801d232:	601a      	str	r2, [r3, #0]
 801d234:	687a      	ldr	r2, [r7, #4]
 801d236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d238:	1ad3      	subs	r3, r2, r3
 801d23a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	2b00      	cmp	r3, #0
 801d240:	f47f af01 	bne.w	801d046 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801d244:	2300      	movs	r3, #0
}
 801d246:	4618      	mov	r0, r3
 801d248:	3738      	adds	r7, #56	@ 0x38
 801d24a:	46bd      	mov	sp, r7
 801d24c:	bd80      	pop	{r7, pc}

0801d24e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801d24e:	b580      	push	{r7, lr}
 801d250:	b086      	sub	sp, #24
 801d252:	af00      	add	r7, sp, #0
 801d254:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	f107 0208 	add.w	r2, r7, #8
 801d25c:	4611      	mov	r1, r2
 801d25e:	4618      	mov	r0, r3
 801d260:	f7ff fc80 	bl	801cb64 <validate>
 801d264:	4603      	mov	r3, r0
 801d266:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801d268:	7dfb      	ldrb	r3, [r7, #23]
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d168      	bne.n	801d340 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801d26e:	687b      	ldr	r3, [r7, #4]
 801d270:	7d1b      	ldrb	r3, [r3, #20]
 801d272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d276:	2b00      	cmp	r3, #0
 801d278:	d062      	beq.n	801d340 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801d27a:	687b      	ldr	r3, [r7, #4]
 801d27c:	7d1b      	ldrb	r3, [r3, #20]
 801d27e:	b25b      	sxtb	r3, r3
 801d280:	2b00      	cmp	r3, #0
 801d282:	da15      	bge.n	801d2b0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801d284:	68bb      	ldr	r3, [r7, #8]
 801d286:	7858      	ldrb	r0, [r3, #1]
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d28e:	687b      	ldr	r3, [r7, #4]
 801d290:	6a1a      	ldr	r2, [r3, #32]
 801d292:	2301      	movs	r3, #1
 801d294:	f7fd ffc2 	bl	801b21c <disk_write>
 801d298:	4603      	mov	r3, r0
 801d29a:	2b00      	cmp	r3, #0
 801d29c:	d001      	beq.n	801d2a2 <f_sync+0x54>
 801d29e:	2301      	movs	r3, #1
 801d2a0:	e04f      	b.n	801d342 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	7d1b      	ldrb	r3, [r3, #20]
 801d2a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d2aa:	b2da      	uxtb	r2, r3
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801d2b0:	f7fd fcc6 	bl	801ac40 <get_fattime>
 801d2b4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801d2b6:	68ba      	ldr	r2, [r7, #8]
 801d2b8:	687b      	ldr	r3, [r7, #4]
 801d2ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d2bc:	4619      	mov	r1, r3
 801d2be:	4610      	mov	r0, r2
 801d2c0:	f7fe fa9a 	bl	801b7f8 <move_window>
 801d2c4:	4603      	mov	r3, r0
 801d2c6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801d2c8:	7dfb      	ldrb	r3, [r7, #23]
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	d138      	bne.n	801d340 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801d2ce:	687b      	ldr	r3, [r7, #4]
 801d2d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d2d2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801d2d4:	68fb      	ldr	r3, [r7, #12]
 801d2d6:	330b      	adds	r3, #11
 801d2d8:	781a      	ldrb	r2, [r3, #0]
 801d2da:	68fb      	ldr	r3, [r7, #12]
 801d2dc:	330b      	adds	r3, #11
 801d2de:	f042 0220 	orr.w	r2, r2, #32
 801d2e2:	b2d2      	uxtb	r2, r2
 801d2e4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801d2e6:	687b      	ldr	r3, [r7, #4]
 801d2e8:	6818      	ldr	r0, [r3, #0]
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	689b      	ldr	r3, [r3, #8]
 801d2ee:	461a      	mov	r2, r3
 801d2f0:	68f9      	ldr	r1, [r7, #12]
 801d2f2:	f7fe ffa4 	bl	801c23e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801d2f6:	68fb      	ldr	r3, [r7, #12]
 801d2f8:	f103 021c 	add.w	r2, r3, #28
 801d2fc:	687b      	ldr	r3, [r7, #4]
 801d2fe:	68db      	ldr	r3, [r3, #12]
 801d300:	4619      	mov	r1, r3
 801d302:	4610      	mov	r0, r2
 801d304:	f7fe f81e 	bl	801b344 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801d308:	68fb      	ldr	r3, [r7, #12]
 801d30a:	3316      	adds	r3, #22
 801d30c:	6939      	ldr	r1, [r7, #16]
 801d30e:	4618      	mov	r0, r3
 801d310:	f7fe f818 	bl	801b344 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801d314:	68fb      	ldr	r3, [r7, #12]
 801d316:	3312      	adds	r3, #18
 801d318:	2100      	movs	r1, #0
 801d31a:	4618      	mov	r0, r3
 801d31c:	f7fd fff7 	bl	801b30e <st_word>
					fs->wflag = 1;
 801d320:	68bb      	ldr	r3, [r7, #8]
 801d322:	2201      	movs	r2, #1
 801d324:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801d326:	68bb      	ldr	r3, [r7, #8]
 801d328:	4618      	mov	r0, r3
 801d32a:	f7fe fa93 	bl	801b854 <sync_fs>
 801d32e:	4603      	mov	r3, r0
 801d330:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801d332:	687b      	ldr	r3, [r7, #4]
 801d334:	7d1b      	ldrb	r3, [r3, #20]
 801d336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801d33a:	b2da      	uxtb	r2, r3
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801d340:	7dfb      	ldrb	r3, [r7, #23]
}
 801d342:	4618      	mov	r0, r3
 801d344:	3718      	adds	r7, #24
 801d346:	46bd      	mov	sp, r7
 801d348:	bd80      	pop	{r7, pc}

0801d34a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801d34a:	b580      	push	{r7, lr}
 801d34c:	b084      	sub	sp, #16
 801d34e:	af00      	add	r7, sp, #0
 801d350:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801d352:	6878      	ldr	r0, [r7, #4]
 801d354:	f7ff ff7b 	bl	801d24e <f_sync>
 801d358:	4603      	mov	r3, r0
 801d35a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801d35c:	7bfb      	ldrb	r3, [r7, #15]
 801d35e:	2b00      	cmp	r3, #0
 801d360:	d118      	bne.n	801d394 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801d362:	687b      	ldr	r3, [r7, #4]
 801d364:	f107 0208 	add.w	r2, r7, #8
 801d368:	4611      	mov	r1, r2
 801d36a:	4618      	mov	r0, r3
 801d36c:	f7ff fbfa 	bl	801cb64 <validate>
 801d370:	4603      	mov	r3, r0
 801d372:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801d374:	7bfb      	ldrb	r3, [r7, #15]
 801d376:	2b00      	cmp	r3, #0
 801d378:	d10c      	bne.n	801d394 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	691b      	ldr	r3, [r3, #16]
 801d37e:	4618      	mov	r0, r3
 801d380:	f7fe f996 	bl	801b6b0 <dec_lock>
 801d384:	4603      	mov	r3, r0
 801d386:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801d388:	7bfb      	ldrb	r3, [r7, #15]
 801d38a:	2b00      	cmp	r3, #0
 801d38c:	d102      	bne.n	801d394 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801d38e:	687b      	ldr	r3, [r7, #4]
 801d390:	2200      	movs	r2, #0
 801d392:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801d394:	7bfb      	ldrb	r3, [r7, #15]
}
 801d396:	4618      	mov	r0, r3
 801d398:	3710      	adds	r7, #16
 801d39a:	46bd      	mov	sp, r7
 801d39c:	bd80      	pop	{r7, pc}
	...

0801d3a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801d3a0:	b480      	push	{r7}
 801d3a2:	b087      	sub	sp, #28
 801d3a4:	af00      	add	r7, sp, #0
 801d3a6:	60f8      	str	r0, [r7, #12]
 801d3a8:	60b9      	str	r1, [r7, #8]
 801d3aa:	4613      	mov	r3, r2
 801d3ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801d3ae:	2301      	movs	r3, #1
 801d3b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801d3b2:	2300      	movs	r3, #0
 801d3b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801d3b6:	4b1f      	ldr	r3, [pc, #124]	@ (801d434 <FATFS_LinkDriverEx+0x94>)
 801d3b8:	7a5b      	ldrb	r3, [r3, #9]
 801d3ba:	b2db      	uxtb	r3, r3
 801d3bc:	2b00      	cmp	r3, #0
 801d3be:	d131      	bne.n	801d424 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801d3c0:	4b1c      	ldr	r3, [pc, #112]	@ (801d434 <FATFS_LinkDriverEx+0x94>)
 801d3c2:	7a5b      	ldrb	r3, [r3, #9]
 801d3c4:	b2db      	uxtb	r3, r3
 801d3c6:	461a      	mov	r2, r3
 801d3c8:	4b1a      	ldr	r3, [pc, #104]	@ (801d434 <FATFS_LinkDriverEx+0x94>)
 801d3ca:	2100      	movs	r1, #0
 801d3cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801d3ce:	4b19      	ldr	r3, [pc, #100]	@ (801d434 <FATFS_LinkDriverEx+0x94>)
 801d3d0:	7a5b      	ldrb	r3, [r3, #9]
 801d3d2:	b2db      	uxtb	r3, r3
 801d3d4:	4a17      	ldr	r2, [pc, #92]	@ (801d434 <FATFS_LinkDriverEx+0x94>)
 801d3d6:	009b      	lsls	r3, r3, #2
 801d3d8:	4413      	add	r3, r2
 801d3da:	68fa      	ldr	r2, [r7, #12]
 801d3dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801d3de:	4b15      	ldr	r3, [pc, #84]	@ (801d434 <FATFS_LinkDriverEx+0x94>)
 801d3e0:	7a5b      	ldrb	r3, [r3, #9]
 801d3e2:	b2db      	uxtb	r3, r3
 801d3e4:	461a      	mov	r2, r3
 801d3e6:	4b13      	ldr	r3, [pc, #76]	@ (801d434 <FATFS_LinkDriverEx+0x94>)
 801d3e8:	4413      	add	r3, r2
 801d3ea:	79fa      	ldrb	r2, [r7, #7]
 801d3ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801d3ee:	4b11      	ldr	r3, [pc, #68]	@ (801d434 <FATFS_LinkDriverEx+0x94>)
 801d3f0:	7a5b      	ldrb	r3, [r3, #9]
 801d3f2:	b2db      	uxtb	r3, r3
 801d3f4:	1c5a      	adds	r2, r3, #1
 801d3f6:	b2d1      	uxtb	r1, r2
 801d3f8:	4a0e      	ldr	r2, [pc, #56]	@ (801d434 <FATFS_LinkDriverEx+0x94>)
 801d3fa:	7251      	strb	r1, [r2, #9]
 801d3fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801d3fe:	7dbb      	ldrb	r3, [r7, #22]
 801d400:	3330      	adds	r3, #48	@ 0x30
 801d402:	b2da      	uxtb	r2, r3
 801d404:	68bb      	ldr	r3, [r7, #8]
 801d406:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801d408:	68bb      	ldr	r3, [r7, #8]
 801d40a:	3301      	adds	r3, #1
 801d40c:	223a      	movs	r2, #58	@ 0x3a
 801d40e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801d410:	68bb      	ldr	r3, [r7, #8]
 801d412:	3302      	adds	r3, #2
 801d414:	222f      	movs	r2, #47	@ 0x2f
 801d416:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801d418:	68bb      	ldr	r3, [r7, #8]
 801d41a:	3303      	adds	r3, #3
 801d41c:	2200      	movs	r2, #0
 801d41e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801d420:	2300      	movs	r3, #0
 801d422:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801d424:	7dfb      	ldrb	r3, [r7, #23]
}
 801d426:	4618      	mov	r0, r3
 801d428:	371c      	adds	r7, #28
 801d42a:	46bd      	mov	sp, r7
 801d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d430:	4770      	bx	lr
 801d432:	bf00      	nop
 801d434:	24000ab0 	.word	0x24000ab0

0801d438 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801d438:	b580      	push	{r7, lr}
 801d43a:	b082      	sub	sp, #8
 801d43c:	af00      	add	r7, sp, #0
 801d43e:	6078      	str	r0, [r7, #4]
 801d440:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801d442:	2200      	movs	r2, #0
 801d444:	6839      	ldr	r1, [r7, #0]
 801d446:	6878      	ldr	r0, [r7, #4]
 801d448:	f7ff ffaa 	bl	801d3a0 <FATFS_LinkDriverEx>
 801d44c:	4603      	mov	r3, r0
}
 801d44e:	4618      	mov	r0, r3
 801d450:	3708      	adds	r7, #8
 801d452:	46bd      	mov	sp, r7
 801d454:	bd80      	pop	{r7, pc}

0801d456 <_ZdlPvj>:
 801d456:	f000 ba3b 	b.w	801d8d0 <_ZdlPv>

0801d45a <__cxa_guard_acquire>:
 801d45a:	6802      	ldr	r2, [r0, #0]
 801d45c:	07d2      	lsls	r2, r2, #31
 801d45e:	4603      	mov	r3, r0
 801d460:	d405      	bmi.n	801d46e <__cxa_guard_acquire+0x14>
 801d462:	7842      	ldrb	r2, [r0, #1]
 801d464:	b102      	cbz	r2, 801d468 <__cxa_guard_acquire+0xe>
 801d466:	deff      	udf	#255	@ 0xff
 801d468:	2001      	movs	r0, #1
 801d46a:	7058      	strb	r0, [r3, #1]
 801d46c:	4770      	bx	lr
 801d46e:	2000      	movs	r0, #0
 801d470:	4770      	bx	lr

0801d472 <__cxa_guard_release>:
 801d472:	2301      	movs	r3, #1
 801d474:	6003      	str	r3, [r0, #0]
 801d476:	4770      	bx	lr

0801d478 <_Znwj>:
 801d478:	2801      	cmp	r0, #1
 801d47a:	bf38      	it	cc
 801d47c:	2001      	movcc	r0, #1
 801d47e:	b510      	push	{r4, lr}
 801d480:	4604      	mov	r4, r0
 801d482:	4620      	mov	r0, r4
 801d484:	f000 fad0 	bl	801da28 <malloc>
 801d488:	b100      	cbz	r0, 801d48c <_Znwj+0x14>
 801d48a:	bd10      	pop	{r4, pc}
 801d48c:	f000 fa22 	bl	801d8d4 <_ZSt15get_new_handlerv>
 801d490:	b908      	cbnz	r0, 801d496 <_Znwj+0x1e>
 801d492:	f000 fac1 	bl	801da18 <abort>
 801d496:	4780      	blx	r0
 801d498:	e7f3      	b.n	801d482 <_Znwj+0xa>

0801d49a <_ZNSaIcEC1Ev>:
 801d49a:	4770      	bx	lr

0801d49c <_ZNSaIcED1Ev>:
 801d49c:	4770      	bx	lr

0801d49e <_ZSt17__throw_bad_allocv>:
 801d49e:	b508      	push	{r3, lr}
 801d4a0:	f000 faba 	bl	801da18 <abort>

0801d4a4 <_ZSt28__throw_bad_array_new_lengthv>:
 801d4a4:	b508      	push	{r3, lr}
 801d4a6:	f000 fab7 	bl	801da18 <abort>

0801d4aa <_ZSt19__throw_logic_errorPKc>:
 801d4aa:	b508      	push	{r3, lr}
 801d4ac:	f000 fab4 	bl	801da18 <abort>

0801d4b0 <_ZSt20__throw_length_errorPKc>:
 801d4b0:	b508      	push	{r3, lr}
 801d4b2:	f000 fab1 	bl	801da18 <abort>

0801d4b6 <_ZSt25__throw_bad_function_callv>:
 801d4b6:	b508      	push	{r3, lr}
 801d4b8:	f000 faae 	bl	801da18 <abort>

0801d4bc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 801d4bc:	4901      	ldr	r1, [pc, #4]	@ (801d4c4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 801d4be:	f000 ba95 	b.w	801d9ec <_ZNKSt9type_info7__equalERKS_>
 801d4c2:	bf00      	nop
 801d4c4:	0801f808 	.word	0x0801f808

0801d4c8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 801d4c8:	b10a      	cbz	r2, 801d4ce <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 801d4ca:	f000 be9c 	b.w	801e206 <memcpy>
 801d4ce:	4770      	bx	lr

0801d4d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 801d4d0:	6001      	str	r1, [r0, #0]
 801d4d2:	4770      	bx	lr

0801d4d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 801d4d4:	6800      	ldr	r0, [r0, #0]
 801d4d6:	4770      	bx	lr

0801d4d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 801d4d8:	3008      	adds	r0, #8
 801d4da:	4770      	bx	lr

0801d4dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 801d4dc:	6081      	str	r1, [r0, #8]
 801d4de:	4770      	bx	lr

0801d4e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 801d4e0:	6803      	ldr	r3, [r0, #0]
 801d4e2:	6041      	str	r1, [r0, #4]
 801d4e4:	2200      	movs	r2, #0
 801d4e6:	545a      	strb	r2, [r3, r1]
 801d4e8:	4770      	bx	lr

0801d4ea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 801d4ea:	f850 3b08 	ldr.w	r3, [r0], #8
 801d4ee:	1a1b      	subs	r3, r3, r0
 801d4f0:	4258      	negs	r0, r3
 801d4f2:	4158      	adcs	r0, r3
 801d4f4:	4770      	bx	lr
	...

0801d4f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801d4f8:	b508      	push	{r3, lr}
 801d4fa:	680b      	ldr	r3, [r1, #0]
 801d4fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d500:	d302      	bcc.n	801d508 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801d502:	480d      	ldr	r0, [pc, #52]	@ (801d538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 801d504:	f7ff ffd4 	bl	801d4b0 <_ZSt20__throw_length_errorPKc>
 801d508:	4293      	cmp	r3, r2
 801d50a:	d90b      	bls.n	801d524 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801d50c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801d510:	ea4f 0042 	mov.w	r0, r2, lsl #1
 801d514:	d206      	bcs.n	801d524 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801d516:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801d51a:	bf2a      	itet	cs
 801d51c:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 801d520:	6008      	strcc	r0, [r1, #0]
 801d522:	600b      	strcs	r3, [r1, #0]
 801d524:	6808      	ldr	r0, [r1, #0]
 801d526:	3001      	adds	r0, #1
 801d528:	d501      	bpl.n	801d52e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801d52a:	f7ff ffb8 	bl	801d49e <_ZSt17__throw_bad_allocv>
 801d52e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801d532:	f7ff bfa1 	b.w	801d478 <_Znwj>
 801d536:	bf00      	nop
 801d538:	0801f810 	.word	0x0801f810

0801d53c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 801d53c:	b510      	push	{r4, lr}
 801d53e:	4604      	mov	r4, r0
 801d540:	f7ff ffd3 	bl	801d4ea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801d544:	b920      	cbnz	r0, 801d550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 801d546:	6820      	ldr	r0, [r4, #0]
 801d548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d54c:	f000 b9c0 	b.w	801d8d0 <_ZdlPv>
 801d550:	bd10      	pop	{r4, pc}

0801d552 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 801d552:	6840      	ldr	r0, [r0, #4]
 801d554:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 801d558:	3901      	subs	r1, #1
 801d55a:	1a09      	subs	r1, r1, r0
 801d55c:	4291      	cmp	r1, r2
 801d55e:	b508      	push	{r3, lr}
 801d560:	d202      	bcs.n	801d568 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 801d562:	4618      	mov	r0, r3
 801d564:	f7ff ffa4 	bl	801d4b0 <_ZSt20__throw_length_errorPKc>
 801d568:	bd08      	pop	{r3, pc}

0801d56a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 801d56a:	2a01      	cmp	r2, #1
 801d56c:	b410      	push	{r4}
 801d56e:	d104      	bne.n	801d57a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 801d570:	780a      	ldrb	r2, [r1, #0]
 801d572:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d576:	7002      	strb	r2, [r0, #0]
 801d578:	4770      	bx	lr
 801d57a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d57e:	f7ff bfa3 	b.w	801d4c8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0801d582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 801d582:	2a01      	cmp	r2, #1
 801d584:	b430      	push	{r4, r5}
 801d586:	d103      	bne.n	801d590 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 801d588:	780b      	ldrb	r3, [r1, #0]
 801d58a:	7003      	strb	r3, [r0, #0]
 801d58c:	bc30      	pop	{r4, r5}
 801d58e:	4770      	bx	lr
 801d590:	2a00      	cmp	r2, #0
 801d592:	d0fb      	beq.n	801d58c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 801d594:	bc30      	pop	{r4, r5}
 801d596:	f000 bd4d 	b.w	801e034 <memmove>

0801d59a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 801d59a:	460b      	mov	r3, r1
 801d59c:	2b01      	cmp	r3, #1
 801d59e:	b410      	push	{r4}
 801d5a0:	4611      	mov	r1, r2
 801d5a2:	4604      	mov	r4, r0
 801d5a4:	d103      	bne.n	801d5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 801d5a6:	7022      	strb	r2, [r4, #0]
 801d5a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d5ac:	4770      	bx	lr
 801d5ae:	2b00      	cmp	r3, #0
 801d5b0:	d0fa      	beq.n	801d5a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 801d5b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d5b6:	461a      	mov	r2, r3
 801d5b8:	f000 bd56 	b.w	801e068 <memset>

0801d5bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 801d5bc:	b508      	push	{r3, lr}
 801d5be:	1a52      	subs	r2, r2, r1
 801d5c0:	f7ff ffd3 	bl	801d56a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801d5c4:	bd08      	pop	{r3, pc}

0801d5c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 801d5c6:	b508      	push	{r3, lr}
 801d5c8:	1a52      	subs	r2, r2, r1
 801d5ca:	f7ff ffce 	bl	801d56a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801d5ce:	bd08      	pop	{r3, pc}

0801d5d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801d5d0:	b510      	push	{r4, lr}
 801d5d2:	4604      	mov	r4, r0
 801d5d4:	f7ff ffb2 	bl	801d53c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801d5d8:	4620      	mov	r0, r4
 801d5da:	bd10      	pop	{r4, pc}

0801d5dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 801d5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5de:	460c      	mov	r4, r1
 801d5e0:	4605      	mov	r5, r0
 801d5e2:	f7ff ff82 	bl	801d4ea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801d5e6:	4606      	mov	r6, r0
 801d5e8:	4620      	mov	r0, r4
 801d5ea:	f7ff ff7e 	bl	801d4ea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801d5ee:	b190      	cbz	r0, 801d616 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 801d5f0:	42a5      	cmp	r5, r4
 801d5f2:	d00a      	beq.n	801d60a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 801d5f4:	6862      	ldr	r2, [r4, #4]
 801d5f6:	b11a      	cbz	r2, 801d600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 801d5f8:	6821      	ldr	r1, [r4, #0]
 801d5fa:	6828      	ldr	r0, [r5, #0]
 801d5fc:	f7ff ffb5 	bl	801d56a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801d600:	6863      	ldr	r3, [r4, #4]
 801d602:	682a      	ldr	r2, [r5, #0]
 801d604:	606b      	str	r3, [r5, #4]
 801d606:	2100      	movs	r1, #0
 801d608:	54d1      	strb	r1, [r2, r3]
 801d60a:	6822      	ldr	r2, [r4, #0]
 801d60c:	2300      	movs	r3, #0
 801d60e:	6063      	str	r3, [r4, #4]
 801d610:	7013      	strb	r3, [r2, #0]
 801d612:	4628      	mov	r0, r5
 801d614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d616:	b90e      	cbnz	r6, 801d61c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 801d618:	6828      	ldr	r0, [r5, #0]
 801d61a:	68af      	ldr	r7, [r5, #8]
 801d61c:	6823      	ldr	r3, [r4, #0]
 801d61e:	602b      	str	r3, [r5, #0]
 801d620:	6863      	ldr	r3, [r4, #4]
 801d622:	606b      	str	r3, [r5, #4]
 801d624:	68a3      	ldr	r3, [r4, #8]
 801d626:	60ab      	str	r3, [r5, #8]
 801d628:	b110      	cbz	r0, 801d630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 801d62a:	6020      	str	r0, [r4, #0]
 801d62c:	60a7      	str	r7, [r4, #8]
 801d62e:	e7ec      	b.n	801d60a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 801d630:	f104 0308 	add.w	r3, r4, #8
 801d634:	6023      	str	r3, [r4, #0]
 801d636:	e7e8      	b.n	801d60a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

0801d638 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 801d638:	b510      	push	{r4, lr}
 801d63a:	4604      	mov	r4, r0
 801d63c:	f7ff ff55 	bl	801d4ea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801d640:	b908      	cbnz	r0, 801d646 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 801d642:	68a0      	ldr	r0, [r4, #8]
 801d644:	bd10      	pop	{r4, pc}
 801d646:	200f      	movs	r0, #15
 801d648:	e7fc      	b.n	801d644 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

0801d64a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 801d64a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801d64e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801d650:	461f      	mov	r7, r3
 801d652:	6843      	ldr	r3, [r0, #4]
 801d654:	eb01 0802 	add.w	r8, r1, r2
 801d658:	1ab2      	subs	r2, r6, r2
 801d65a:	441a      	add	r2, r3
 801d65c:	4604      	mov	r4, r0
 801d65e:	460d      	mov	r5, r1
 801d660:	eba3 0908 	sub.w	r9, r3, r8
 801d664:	9201      	str	r2, [sp, #4]
 801d666:	f7ff ffe7 	bl	801d638 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801d66a:	a901      	add	r1, sp, #4
 801d66c:	4602      	mov	r2, r0
 801d66e:	4620      	mov	r0, r4
 801d670:	f7ff ff42 	bl	801d4f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801d674:	4682      	mov	sl, r0
 801d676:	b11d      	cbz	r5, 801d680 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 801d678:	6821      	ldr	r1, [r4, #0]
 801d67a:	462a      	mov	r2, r5
 801d67c:	f7ff ff75 	bl	801d56a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801d680:	b137      	cbz	r7, 801d690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 801d682:	b12e      	cbz	r6, 801d690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 801d684:	4632      	mov	r2, r6
 801d686:	4639      	mov	r1, r7
 801d688:	eb0a 0005 	add.w	r0, sl, r5
 801d68c:	f7ff ff6d 	bl	801d56a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801d690:	f1b9 0f00 	cmp.w	r9, #0
 801d694:	d007      	beq.n	801d6a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 801d696:	6821      	ldr	r1, [r4, #0]
 801d698:	4435      	add	r5, r6
 801d69a:	464a      	mov	r2, r9
 801d69c:	4441      	add	r1, r8
 801d69e:	eb0a 0005 	add.w	r0, sl, r5
 801d6a2:	f7ff ff62 	bl	801d56a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801d6a6:	4620      	mov	r0, r4
 801d6a8:	f7ff ff48 	bl	801d53c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801d6ac:	9b01      	ldr	r3, [sp, #4]
 801d6ae:	f8c4 a000 	str.w	sl, [r4]
 801d6b2:	60a3      	str	r3, [r4, #8]
 801d6b4:	b002      	add	sp, #8
 801d6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801d6ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 801d6ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d6bc:	4604      	mov	r4, r0
 801d6be:	9101      	str	r1, [sp, #4]
 801d6c0:	f7ff ffba 	bl	801d638 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801d6c4:	9b01      	ldr	r3, [sp, #4]
 801d6c6:	4283      	cmp	r3, r0
 801d6c8:	4602      	mov	r2, r0
 801d6ca:	d90f      	bls.n	801d6ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 801d6cc:	a901      	add	r1, sp, #4
 801d6ce:	4620      	mov	r0, r4
 801d6d0:	f7ff ff12 	bl	801d4f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801d6d4:	6862      	ldr	r2, [r4, #4]
 801d6d6:	6821      	ldr	r1, [r4, #0]
 801d6d8:	3201      	adds	r2, #1
 801d6da:	4605      	mov	r5, r0
 801d6dc:	f7ff ff45 	bl	801d56a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801d6e0:	4620      	mov	r0, r4
 801d6e2:	f7ff ff2b 	bl	801d53c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801d6e6:	9b01      	ldr	r3, [sp, #4]
 801d6e8:	6025      	str	r5, [r4, #0]
 801d6ea:	60a3      	str	r3, [r4, #8]
 801d6ec:	b003      	add	sp, #12
 801d6ee:	bd30      	pop	{r4, r5, pc}

0801d6f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 801d6f0:	6802      	ldr	r2, [r0, #0]
 801d6f2:	2300      	movs	r3, #0
 801d6f4:	6043      	str	r3, [r0, #4]
 801d6f6:	7013      	strb	r3, [r2, #0]
 801d6f8:	4770      	bx	lr

0801d6fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 801d6fa:	6800      	ldr	r0, [r0, #0]
 801d6fc:	4408      	add	r0, r1
 801d6fe:	4770      	bx	lr

0801d700 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 801d700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d704:	4616      	mov	r6, r2
 801d706:	461d      	mov	r5, r3
 801d708:	4604      	mov	r4, r0
 801d70a:	4b1b      	ldr	r3, [pc, #108]	@ (801d778 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 801d70c:	462a      	mov	r2, r5
 801d70e:	460f      	mov	r7, r1
 801d710:	4631      	mov	r1, r6
 801d712:	f7ff ff1e 	bl	801d552 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801d716:	4620      	mov	r0, r4
 801d718:	f7ff ff8e 	bl	801d638 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801d71c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801d720:	eba5 0806 	sub.w	r8, r5, r6
 801d724:	44c8      	add	r8, r9
 801d726:	4540      	cmp	r0, r8
 801d728:	d31d      	bcc.n	801d766 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 801d72a:	19f3      	adds	r3, r6, r7
 801d72c:	ebb9 0203 	subs.w	r2, r9, r3
 801d730:	d007      	beq.n	801d742 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801d732:	42ae      	cmp	r6, r5
 801d734:	d005      	beq.n	801d742 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801d736:	6820      	ldr	r0, [r4, #0]
 801d738:	4438      	add	r0, r7
 801d73a:	1981      	adds	r1, r0, r6
 801d73c:	4428      	add	r0, r5
 801d73e:	f7ff ff20 	bl	801d582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801d742:	b135      	cbz	r5, 801d752 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 801d744:	6820      	ldr	r0, [r4, #0]
 801d746:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 801d74a:	4629      	mov	r1, r5
 801d74c:	4438      	add	r0, r7
 801d74e:	f7ff ff24 	bl	801d59a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 801d752:	6823      	ldr	r3, [r4, #0]
 801d754:	f8c4 8004 	str.w	r8, [r4, #4]
 801d758:	2200      	movs	r2, #0
 801d75a:	4620      	mov	r0, r4
 801d75c:	f803 2008 	strb.w	r2, [r3, r8]
 801d760:	b003      	add	sp, #12
 801d762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d766:	9500      	str	r5, [sp, #0]
 801d768:	2300      	movs	r3, #0
 801d76a:	4632      	mov	r2, r6
 801d76c:	4639      	mov	r1, r7
 801d76e:	4620      	mov	r0, r4
 801d770:	f7ff ff6b 	bl	801d64a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801d774:	e7e5      	b.n	801d742 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801d776:	bf00      	nop
 801d778:	0801f828 	.word	0x0801f828

0801d77c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 801d77c:	b507      	push	{r0, r1, r2, lr}
 801d77e:	9200      	str	r2, [sp, #0]
 801d780:	460b      	mov	r3, r1
 801d782:	2200      	movs	r2, #0
 801d784:	6841      	ldr	r1, [r0, #4]
 801d786:	f7ff ffbb 	bl	801d700 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 801d78a:	b003      	add	sp, #12
 801d78c:	f85d fb04 	ldr.w	pc, [sp], #4

0801d790 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 801d790:	6800      	ldr	r0, [r0, #0]
 801d792:	4770      	bx	lr

0801d794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 801d794:	6001      	str	r1, [r0, #0]
 801d796:	4770      	bx	lr

0801d798 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 801d798:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d79a:	1a53      	subs	r3, r2, r1
 801d79c:	2b0f      	cmp	r3, #15
 801d79e:	4604      	mov	r4, r0
 801d7a0:	460d      	mov	r5, r1
 801d7a2:	4616      	mov	r6, r2
 801d7a4:	9301      	str	r3, [sp, #4]
 801d7a6:	d906      	bls.n	801d7b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 801d7a8:	2200      	movs	r2, #0
 801d7aa:	a901      	add	r1, sp, #4
 801d7ac:	f7ff fea4 	bl	801d4f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801d7b0:	9b01      	ldr	r3, [sp, #4]
 801d7b2:	6020      	str	r0, [r4, #0]
 801d7b4:	60a3      	str	r3, [r4, #8]
 801d7b6:	4632      	mov	r2, r6
 801d7b8:	4629      	mov	r1, r5
 801d7ba:	6820      	ldr	r0, [r4, #0]
 801d7bc:	f7ff fefe 	bl	801d5bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 801d7c0:	9b01      	ldr	r3, [sp, #4]
 801d7c2:	6822      	ldr	r2, [r4, #0]
 801d7c4:	6063      	str	r3, [r4, #4]
 801d7c6:	2100      	movs	r1, #0
 801d7c8:	54d1      	strb	r1, [r2, r3]
 801d7ca:	b002      	add	sp, #8
 801d7cc:	bd70      	pop	{r4, r5, r6, pc}

0801d7ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 801d7ce:	f100 0208 	add.w	r2, r0, #8
 801d7d2:	b510      	push	{r4, lr}
 801d7d4:	6002      	str	r2, [r0, #0]
 801d7d6:	e9d1 1200 	ldrd	r1, r2, [r1]
 801d7da:	4604      	mov	r4, r0
 801d7dc:	f04f 0300 	mov.w	r3, #0
 801d7e0:	440a      	add	r2, r1
 801d7e2:	f7ff ffd9 	bl	801d798 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 801d7e6:	4620      	mov	r0, r4
 801d7e8:	bd10      	pop	{r4, pc}

0801d7ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 801d7ea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801d7ec:	2400      	movs	r4, #0
 801d7ee:	2310      	movs	r3, #16
 801d7f0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801d7f4:	6803      	ldr	r3, [r0, #0]
 801d7f6:	4615      	mov	r5, r2
 801d7f8:	699e      	ldr	r6, [r3, #24]
 801d7fa:	6812      	ldr	r2, [r2, #0]
 801d7fc:	466b      	mov	r3, sp
 801d7fe:	e9cd 4400 	strd	r4, r4, [sp]
 801d802:	47b0      	blx	r6
 801d804:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801d808:	f003 0306 	and.w	r3, r3, #6
 801d80c:	2b06      	cmp	r3, #6
 801d80e:	bf03      	ittte	eq
 801d810:	9b00      	ldreq	r3, [sp, #0]
 801d812:	602b      	streq	r3, [r5, #0]
 801d814:	2001      	moveq	r0, #1
 801d816:	4620      	movne	r0, r4
 801d818:	b004      	add	sp, #16
 801d81a:	bd70      	pop	{r4, r5, r6, pc}

0801d81c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 801d81c:	9800      	ldr	r0, [sp, #0]
 801d81e:	4290      	cmp	r0, r2
 801d820:	bf0c      	ite	eq
 801d822:	2006      	moveq	r0, #6
 801d824:	2001      	movne	r0, #1
 801d826:	4770      	bx	lr

0801d828 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 801d828:	b510      	push	{r4, lr}
 801d82a:	4b03      	ldr	r3, [pc, #12]	@ (801d838 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 801d82c:	6003      	str	r3, [r0, #0]
 801d82e:	4604      	mov	r4, r0
 801d830:	f000 f8d9 	bl	801d9e6 <_ZNSt9type_infoD1Ev>
 801d834:	4620      	mov	r0, r4
 801d836:	bd10      	pop	{r4, pc}
 801d838:	0801f87c 	.word	0x0801f87c

0801d83c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 801d83c:	b510      	push	{r4, lr}
 801d83e:	4604      	mov	r4, r0
 801d840:	f7ff fff2 	bl	801d828 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801d844:	4620      	mov	r0, r4
 801d846:	2108      	movs	r1, #8
 801d848:	f7ff fe05 	bl	801d456 <_ZdlPvj>
 801d84c:	4620      	mov	r0, r4
 801d84e:	bd10      	pop	{r4, pc}

0801d850 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 801d850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d854:	461f      	mov	r7, r3
 801d856:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801d85a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801d85e:	4598      	cmp	r8, r3
 801d860:	4606      	mov	r6, r0
 801d862:	4615      	mov	r5, r2
 801d864:	d107      	bne.n	801d876 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801d866:	9907      	ldr	r1, [sp, #28]
 801d868:	f000 f8c0 	bl	801d9ec <_ZNKSt9type_info7__equalERKS_>
 801d86c:	b118      	cbz	r0, 801d876 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801d86e:	7165      	strb	r5, [r4, #5]
 801d870:	2000      	movs	r0, #0
 801d872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d876:	4639      	mov	r1, r7
 801d878:	4630      	mov	r0, r6
 801d87a:	f000 f8b7 	bl	801d9ec <_ZNKSt9type_info7__equalERKS_>
 801d87e:	2800      	cmp	r0, #0
 801d880:	d0f6      	beq.n	801d870 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 801d882:	2301      	movs	r3, #1
 801d884:	f8c4 8000 	str.w	r8, [r4]
 801d888:	7125      	strb	r5, [r4, #4]
 801d88a:	71a3      	strb	r3, [r4, #6]
 801d88c:	e7f0      	b.n	801d870 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0801d88e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 801d88e:	b538      	push	{r3, r4, r5, lr}
 801d890:	4615      	mov	r5, r2
 801d892:	461c      	mov	r4, r3
 801d894:	f000 f8aa 	bl	801d9ec <_ZNKSt9type_info7__equalERKS_>
 801d898:	b120      	cbz	r0, 801d8a4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 801d89a:	2308      	movs	r3, #8
 801d89c:	60e3      	str	r3, [r4, #12]
 801d89e:	2306      	movs	r3, #6
 801d8a0:	6025      	str	r5, [r4, #0]
 801d8a2:	7123      	strb	r3, [r4, #4]
 801d8a4:	bd38      	pop	{r3, r4, r5, pc}

0801d8a6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 801d8a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8aa:	4605      	mov	r5, r0
 801d8ac:	460c      	mov	r4, r1
 801d8ae:	4616      	mov	r6, r2
 801d8b0:	461f      	mov	r7, r3
 801d8b2:	f000 f89b 	bl	801d9ec <_ZNKSt9type_info7__equalERKS_>
 801d8b6:	b948      	cbnz	r0, 801d8cc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801d8b8:	2f03      	cmp	r7, #3
 801d8ba:	d807      	bhi.n	801d8cc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801d8bc:	6823      	ldr	r3, [r4, #0]
 801d8be:	4632      	mov	r2, r6
 801d8c0:	4629      	mov	r1, r5
 801d8c2:	4620      	mov	r0, r4
 801d8c4:	695b      	ldr	r3, [r3, #20]
 801d8c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d8ca:	4718      	bx	r3
 801d8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d8d0 <_ZdlPv>:
 801d8d0:	f000 b8b2 	b.w	801da38 <free>

0801d8d4 <_ZSt15get_new_handlerv>:
 801d8d4:	4b02      	ldr	r3, [pc, #8]	@ (801d8e0 <_ZSt15get_new_handlerv+0xc>)
 801d8d6:	6818      	ldr	r0, [r3, #0]
 801d8d8:	f3bf 8f5b 	dmb	ish
 801d8dc:	4770      	bx	lr
 801d8de:	bf00      	nop
 801d8e0:	24000abc 	.word	0x24000abc

0801d8e4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 801d8e4:	b510      	push	{r4, lr}
 801d8e6:	4b03      	ldr	r3, [pc, #12]	@ (801d8f4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 801d8e8:	6003      	str	r3, [r0, #0]
 801d8ea:	4604      	mov	r4, r0
 801d8ec:	f7ff ff9c 	bl	801d828 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801d8f0:	4620      	mov	r0, r4
 801d8f2:	bd10      	pop	{r4, pc}
 801d8f4:	0801f8dc 	.word	0x0801f8dc

0801d8f8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 801d8f8:	b510      	push	{r4, lr}
 801d8fa:	4604      	mov	r4, r0
 801d8fc:	f7ff fff2 	bl	801d8e4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 801d900:	4620      	mov	r0, r4
 801d902:	210c      	movs	r1, #12
 801d904:	f7ff fda7 	bl	801d456 <_ZdlPvj>
 801d908:	4620      	mov	r0, r4
 801d90a:	bd10      	pop	{r4, pc}

0801d90c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 801d90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d910:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801d914:	4590      	cmp	r8, r2
 801d916:	4606      	mov	r6, r0
 801d918:	460f      	mov	r7, r1
 801d91a:	4615      	mov	r5, r2
 801d91c:	461c      	mov	r4, r3
 801d91e:	d00b      	beq.n	801d938 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 801d920:	68b0      	ldr	r0, [r6, #8]
 801d922:	6803      	ldr	r3, [r0, #0]
 801d924:	f8cd 8018 	str.w	r8, [sp, #24]
 801d928:	6a1e      	ldr	r6, [r3, #32]
 801d92a:	462a      	mov	r2, r5
 801d92c:	4623      	mov	r3, r4
 801d92e:	4639      	mov	r1, r7
 801d930:	46b4      	mov	ip, r6
 801d932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d936:	4760      	bx	ip
 801d938:	4619      	mov	r1, r3
 801d93a:	f000 f857 	bl	801d9ec <_ZNKSt9type_info7__equalERKS_>
 801d93e:	2800      	cmp	r0, #0
 801d940:	d0ee      	beq.n	801d920 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 801d942:	2006      	movs	r0, #6
 801d944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d948 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 801d948:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d94c:	460d      	mov	r5, r1
 801d94e:	4619      	mov	r1, r3
 801d950:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 801d954:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 801d958:	4681      	mov	r9, r0
 801d95a:	4617      	mov	r7, r2
 801d95c:	4698      	mov	r8, r3
 801d95e:	f000 f845 	bl	801d9ec <_ZNKSt9type_info7__equalERKS_>
 801d962:	b190      	cbz	r0, 801d98a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 801d964:	2d00      	cmp	r5, #0
 801d966:	6034      	str	r4, [r6, #0]
 801d968:	7137      	strb	r7, [r6, #4]
 801d96a:	db09      	blt.n	801d980 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 801d96c:	442c      	add	r4, r5
 801d96e:	45a2      	cmp	sl, r4
 801d970:	bf14      	ite	ne
 801d972:	2401      	movne	r4, #1
 801d974:	2406      	moveq	r4, #6
 801d976:	71b4      	strb	r4, [r6, #6]
 801d978:	2000      	movs	r0, #0
 801d97a:	b001      	add	sp, #4
 801d97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d980:	3502      	adds	r5, #2
 801d982:	d1f9      	bne.n	801d978 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801d984:	2301      	movs	r3, #1
 801d986:	71b3      	strb	r3, [r6, #6]
 801d988:	e7f6      	b.n	801d978 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801d98a:	4554      	cmp	r4, sl
 801d98c:	d106      	bne.n	801d99c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801d98e:	4659      	mov	r1, fp
 801d990:	4648      	mov	r0, r9
 801d992:	f000 f82b 	bl	801d9ec <_ZNKSt9type_info7__equalERKS_>
 801d996:	b108      	cbz	r0, 801d99c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801d998:	7177      	strb	r7, [r6, #5]
 801d99a:	e7ed      	b.n	801d978 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801d99c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 801d9a0:	6803      	ldr	r3, [r0, #0]
 801d9a2:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 801d9a6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 801d9aa:	69dc      	ldr	r4, [r3, #28]
 801d9ac:	463a      	mov	r2, r7
 801d9ae:	4643      	mov	r3, r8
 801d9b0:	4629      	mov	r1, r5
 801d9b2:	46a4      	mov	ip, r4
 801d9b4:	b001      	add	sp, #4
 801d9b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9ba:	4760      	bx	ip

0801d9bc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 801d9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9c0:	4607      	mov	r7, r0
 801d9c2:	460c      	mov	r4, r1
 801d9c4:	4615      	mov	r5, r2
 801d9c6:	461e      	mov	r6, r3
 801d9c8:	f7ff ff61 	bl	801d88e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 801d9cc:	b948      	cbnz	r0, 801d9e2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 801d9ce:	68b8      	ldr	r0, [r7, #8]
 801d9d0:	6803      	ldr	r3, [r0, #0]
 801d9d2:	699f      	ldr	r7, [r3, #24]
 801d9d4:	462a      	mov	r2, r5
 801d9d6:	4633      	mov	r3, r6
 801d9d8:	4621      	mov	r1, r4
 801d9da:	46bc      	mov	ip, r7
 801d9dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d9e0:	4760      	bx	ip
 801d9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d9e6 <_ZNSt9type_infoD1Ev>:
 801d9e6:	4770      	bx	lr

0801d9e8 <_ZNKSt9type_info14__is_pointer_pEv>:
 801d9e8:	2000      	movs	r0, #0
 801d9ea:	4770      	bx	lr

0801d9ec <_ZNKSt9type_info7__equalERKS_>:
 801d9ec:	4281      	cmp	r1, r0
 801d9ee:	b508      	push	{r3, lr}
 801d9f0:	d00e      	beq.n	801da10 <_ZNKSt9type_info7__equalERKS_+0x24>
 801d9f2:	6840      	ldr	r0, [r0, #4]
 801d9f4:	7803      	ldrb	r3, [r0, #0]
 801d9f6:	2b2a      	cmp	r3, #42	@ 0x2a
 801d9f8:	d00c      	beq.n	801da14 <_ZNKSt9type_info7__equalERKS_+0x28>
 801d9fa:	6849      	ldr	r1, [r1, #4]
 801d9fc:	780b      	ldrb	r3, [r1, #0]
 801d9fe:	2b2a      	cmp	r3, #42	@ 0x2a
 801da00:	bf08      	it	eq
 801da02:	3101      	addeq	r1, #1
 801da04:	f7e2 fc6c 	bl	80002e0 <strcmp>
 801da08:	fab0 f080 	clz	r0, r0
 801da0c:	0940      	lsrs	r0, r0, #5
 801da0e:	bd08      	pop	{r3, pc}
 801da10:	2001      	movs	r0, #1
 801da12:	e7fc      	b.n	801da0e <_ZNKSt9type_info7__equalERKS_+0x22>
 801da14:	2000      	movs	r0, #0
 801da16:	e7fa      	b.n	801da0e <_ZNKSt9type_info7__equalERKS_+0x22>

0801da18 <abort>:
 801da18:	b508      	push	{r3, lr}
 801da1a:	2006      	movs	r0, #6
 801da1c:	f000 fb54 	bl	801e0c8 <raise>
 801da20:	2001      	movs	r0, #1
 801da22:	f7ee f815 	bl	800ba50 <_exit>
	...

0801da28 <malloc>:
 801da28:	4b02      	ldr	r3, [pc, #8]	@ (801da34 <malloc+0xc>)
 801da2a:	4601      	mov	r1, r0
 801da2c:	6818      	ldr	r0, [r3, #0]
 801da2e:	f000 b82d 	b.w	801da8c <_malloc_r>
 801da32:	bf00      	nop
 801da34:	24000038 	.word	0x24000038

0801da38 <free>:
 801da38:	4b02      	ldr	r3, [pc, #8]	@ (801da44 <free+0xc>)
 801da3a:	4601      	mov	r1, r0
 801da3c:	6818      	ldr	r0, [r3, #0]
 801da3e:	f000 bbf1 	b.w	801e224 <_free_r>
 801da42:	bf00      	nop
 801da44:	24000038 	.word	0x24000038

0801da48 <sbrk_aligned>:
 801da48:	b570      	push	{r4, r5, r6, lr}
 801da4a:	4e0f      	ldr	r6, [pc, #60]	@ (801da88 <sbrk_aligned+0x40>)
 801da4c:	460c      	mov	r4, r1
 801da4e:	6831      	ldr	r1, [r6, #0]
 801da50:	4605      	mov	r5, r0
 801da52:	b911      	cbnz	r1, 801da5a <sbrk_aligned+0x12>
 801da54:	f000 fb88 	bl	801e168 <_sbrk_r>
 801da58:	6030      	str	r0, [r6, #0]
 801da5a:	4621      	mov	r1, r4
 801da5c:	4628      	mov	r0, r5
 801da5e:	f000 fb83 	bl	801e168 <_sbrk_r>
 801da62:	1c43      	adds	r3, r0, #1
 801da64:	d103      	bne.n	801da6e <sbrk_aligned+0x26>
 801da66:	f04f 34ff 	mov.w	r4, #4294967295
 801da6a:	4620      	mov	r0, r4
 801da6c:	bd70      	pop	{r4, r5, r6, pc}
 801da6e:	1cc4      	adds	r4, r0, #3
 801da70:	f024 0403 	bic.w	r4, r4, #3
 801da74:	42a0      	cmp	r0, r4
 801da76:	d0f8      	beq.n	801da6a <sbrk_aligned+0x22>
 801da78:	1a21      	subs	r1, r4, r0
 801da7a:	4628      	mov	r0, r5
 801da7c:	f000 fb74 	bl	801e168 <_sbrk_r>
 801da80:	3001      	adds	r0, #1
 801da82:	d1f2      	bne.n	801da6a <sbrk_aligned+0x22>
 801da84:	e7ef      	b.n	801da66 <sbrk_aligned+0x1e>
 801da86:	bf00      	nop
 801da88:	24000ac0 	.word	0x24000ac0

0801da8c <_malloc_r>:
 801da8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801da90:	1ccd      	adds	r5, r1, #3
 801da92:	f025 0503 	bic.w	r5, r5, #3
 801da96:	3508      	adds	r5, #8
 801da98:	2d0c      	cmp	r5, #12
 801da9a:	bf38      	it	cc
 801da9c:	250c      	movcc	r5, #12
 801da9e:	2d00      	cmp	r5, #0
 801daa0:	4606      	mov	r6, r0
 801daa2:	db01      	blt.n	801daa8 <_malloc_r+0x1c>
 801daa4:	42a9      	cmp	r1, r5
 801daa6:	d904      	bls.n	801dab2 <_malloc_r+0x26>
 801daa8:	230c      	movs	r3, #12
 801daaa:	6033      	str	r3, [r6, #0]
 801daac:	2000      	movs	r0, #0
 801daae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dab2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801db88 <_malloc_r+0xfc>
 801dab6:	f000 f869 	bl	801db8c <__malloc_lock>
 801daba:	f8d8 3000 	ldr.w	r3, [r8]
 801dabe:	461c      	mov	r4, r3
 801dac0:	bb44      	cbnz	r4, 801db14 <_malloc_r+0x88>
 801dac2:	4629      	mov	r1, r5
 801dac4:	4630      	mov	r0, r6
 801dac6:	f7ff ffbf 	bl	801da48 <sbrk_aligned>
 801daca:	1c43      	adds	r3, r0, #1
 801dacc:	4604      	mov	r4, r0
 801dace:	d158      	bne.n	801db82 <_malloc_r+0xf6>
 801dad0:	f8d8 4000 	ldr.w	r4, [r8]
 801dad4:	4627      	mov	r7, r4
 801dad6:	2f00      	cmp	r7, #0
 801dad8:	d143      	bne.n	801db62 <_malloc_r+0xd6>
 801dada:	2c00      	cmp	r4, #0
 801dadc:	d04b      	beq.n	801db76 <_malloc_r+0xea>
 801dade:	6823      	ldr	r3, [r4, #0]
 801dae0:	4639      	mov	r1, r7
 801dae2:	4630      	mov	r0, r6
 801dae4:	eb04 0903 	add.w	r9, r4, r3
 801dae8:	f000 fb3e 	bl	801e168 <_sbrk_r>
 801daec:	4581      	cmp	r9, r0
 801daee:	d142      	bne.n	801db76 <_malloc_r+0xea>
 801daf0:	6821      	ldr	r1, [r4, #0]
 801daf2:	1a6d      	subs	r5, r5, r1
 801daf4:	4629      	mov	r1, r5
 801daf6:	4630      	mov	r0, r6
 801daf8:	f7ff ffa6 	bl	801da48 <sbrk_aligned>
 801dafc:	3001      	adds	r0, #1
 801dafe:	d03a      	beq.n	801db76 <_malloc_r+0xea>
 801db00:	6823      	ldr	r3, [r4, #0]
 801db02:	442b      	add	r3, r5
 801db04:	6023      	str	r3, [r4, #0]
 801db06:	f8d8 3000 	ldr.w	r3, [r8]
 801db0a:	685a      	ldr	r2, [r3, #4]
 801db0c:	bb62      	cbnz	r2, 801db68 <_malloc_r+0xdc>
 801db0e:	f8c8 7000 	str.w	r7, [r8]
 801db12:	e00f      	b.n	801db34 <_malloc_r+0xa8>
 801db14:	6822      	ldr	r2, [r4, #0]
 801db16:	1b52      	subs	r2, r2, r5
 801db18:	d420      	bmi.n	801db5c <_malloc_r+0xd0>
 801db1a:	2a0b      	cmp	r2, #11
 801db1c:	d917      	bls.n	801db4e <_malloc_r+0xc2>
 801db1e:	1961      	adds	r1, r4, r5
 801db20:	42a3      	cmp	r3, r4
 801db22:	6025      	str	r5, [r4, #0]
 801db24:	bf18      	it	ne
 801db26:	6059      	strne	r1, [r3, #4]
 801db28:	6863      	ldr	r3, [r4, #4]
 801db2a:	bf08      	it	eq
 801db2c:	f8c8 1000 	streq.w	r1, [r8]
 801db30:	5162      	str	r2, [r4, r5]
 801db32:	604b      	str	r3, [r1, #4]
 801db34:	4630      	mov	r0, r6
 801db36:	f000 f82f 	bl	801db98 <__malloc_unlock>
 801db3a:	f104 000b 	add.w	r0, r4, #11
 801db3e:	1d23      	adds	r3, r4, #4
 801db40:	f020 0007 	bic.w	r0, r0, #7
 801db44:	1ac2      	subs	r2, r0, r3
 801db46:	bf1c      	itt	ne
 801db48:	1a1b      	subne	r3, r3, r0
 801db4a:	50a3      	strne	r3, [r4, r2]
 801db4c:	e7af      	b.n	801daae <_malloc_r+0x22>
 801db4e:	6862      	ldr	r2, [r4, #4]
 801db50:	42a3      	cmp	r3, r4
 801db52:	bf0c      	ite	eq
 801db54:	f8c8 2000 	streq.w	r2, [r8]
 801db58:	605a      	strne	r2, [r3, #4]
 801db5a:	e7eb      	b.n	801db34 <_malloc_r+0xa8>
 801db5c:	4623      	mov	r3, r4
 801db5e:	6864      	ldr	r4, [r4, #4]
 801db60:	e7ae      	b.n	801dac0 <_malloc_r+0x34>
 801db62:	463c      	mov	r4, r7
 801db64:	687f      	ldr	r7, [r7, #4]
 801db66:	e7b6      	b.n	801dad6 <_malloc_r+0x4a>
 801db68:	461a      	mov	r2, r3
 801db6a:	685b      	ldr	r3, [r3, #4]
 801db6c:	42a3      	cmp	r3, r4
 801db6e:	d1fb      	bne.n	801db68 <_malloc_r+0xdc>
 801db70:	2300      	movs	r3, #0
 801db72:	6053      	str	r3, [r2, #4]
 801db74:	e7de      	b.n	801db34 <_malloc_r+0xa8>
 801db76:	230c      	movs	r3, #12
 801db78:	6033      	str	r3, [r6, #0]
 801db7a:	4630      	mov	r0, r6
 801db7c:	f000 f80c 	bl	801db98 <__malloc_unlock>
 801db80:	e794      	b.n	801daac <_malloc_r+0x20>
 801db82:	6005      	str	r5, [r0, #0]
 801db84:	e7d6      	b.n	801db34 <_malloc_r+0xa8>
 801db86:	bf00      	nop
 801db88:	24000ac4 	.word	0x24000ac4

0801db8c <__malloc_lock>:
 801db8c:	4801      	ldr	r0, [pc, #4]	@ (801db94 <__malloc_lock+0x8>)
 801db8e:	f000 bb38 	b.w	801e202 <__retarget_lock_acquire_recursive>
 801db92:	bf00      	nop
 801db94:	24000c08 	.word	0x24000c08

0801db98 <__malloc_unlock>:
 801db98:	4801      	ldr	r0, [pc, #4]	@ (801dba0 <__malloc_unlock+0x8>)
 801db9a:	f000 bb33 	b.w	801e204 <__retarget_lock_release_recursive>
 801db9e:	bf00      	nop
 801dba0:	24000c08 	.word	0x24000c08

0801dba4 <realloc>:
 801dba4:	4b02      	ldr	r3, [pc, #8]	@ (801dbb0 <realloc+0xc>)
 801dba6:	460a      	mov	r2, r1
 801dba8:	4601      	mov	r1, r0
 801dbaa:	6818      	ldr	r0, [r3, #0]
 801dbac:	f000 b802 	b.w	801dbb4 <_realloc_r>
 801dbb0:	24000038 	.word	0x24000038

0801dbb4 <_realloc_r>:
 801dbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dbb8:	4680      	mov	r8, r0
 801dbba:	4615      	mov	r5, r2
 801dbbc:	460c      	mov	r4, r1
 801dbbe:	b921      	cbnz	r1, 801dbca <_realloc_r+0x16>
 801dbc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dbc4:	4611      	mov	r1, r2
 801dbc6:	f7ff bf61 	b.w	801da8c <_malloc_r>
 801dbca:	b92a      	cbnz	r2, 801dbd8 <_realloc_r+0x24>
 801dbcc:	f000 fb2a 	bl	801e224 <_free_r>
 801dbd0:	2400      	movs	r4, #0
 801dbd2:	4620      	mov	r0, r4
 801dbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbd8:	f000 fb6e 	bl	801e2b8 <_malloc_usable_size_r>
 801dbdc:	4285      	cmp	r5, r0
 801dbde:	4606      	mov	r6, r0
 801dbe0:	d802      	bhi.n	801dbe8 <_realloc_r+0x34>
 801dbe2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801dbe6:	d8f4      	bhi.n	801dbd2 <_realloc_r+0x1e>
 801dbe8:	4629      	mov	r1, r5
 801dbea:	4640      	mov	r0, r8
 801dbec:	f7ff ff4e 	bl	801da8c <_malloc_r>
 801dbf0:	4607      	mov	r7, r0
 801dbf2:	2800      	cmp	r0, #0
 801dbf4:	d0ec      	beq.n	801dbd0 <_realloc_r+0x1c>
 801dbf6:	42b5      	cmp	r5, r6
 801dbf8:	462a      	mov	r2, r5
 801dbfa:	4621      	mov	r1, r4
 801dbfc:	bf28      	it	cs
 801dbfe:	4632      	movcs	r2, r6
 801dc00:	f000 fb01 	bl	801e206 <memcpy>
 801dc04:	4621      	mov	r1, r4
 801dc06:	4640      	mov	r0, r8
 801dc08:	f000 fb0c 	bl	801e224 <_free_r>
 801dc0c:	463c      	mov	r4, r7
 801dc0e:	e7e0      	b.n	801dbd2 <_realloc_r+0x1e>

0801dc10 <std>:
 801dc10:	2300      	movs	r3, #0
 801dc12:	b510      	push	{r4, lr}
 801dc14:	4604      	mov	r4, r0
 801dc16:	e9c0 3300 	strd	r3, r3, [r0]
 801dc1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dc1e:	6083      	str	r3, [r0, #8]
 801dc20:	8181      	strh	r1, [r0, #12]
 801dc22:	6643      	str	r3, [r0, #100]	@ 0x64
 801dc24:	81c2      	strh	r2, [r0, #14]
 801dc26:	6183      	str	r3, [r0, #24]
 801dc28:	4619      	mov	r1, r3
 801dc2a:	2208      	movs	r2, #8
 801dc2c:	305c      	adds	r0, #92	@ 0x5c
 801dc2e:	f000 fa1b 	bl	801e068 <memset>
 801dc32:	4b0d      	ldr	r3, [pc, #52]	@ (801dc68 <std+0x58>)
 801dc34:	6263      	str	r3, [r4, #36]	@ 0x24
 801dc36:	4b0d      	ldr	r3, [pc, #52]	@ (801dc6c <std+0x5c>)
 801dc38:	62a3      	str	r3, [r4, #40]	@ 0x28
 801dc3a:	4b0d      	ldr	r3, [pc, #52]	@ (801dc70 <std+0x60>)
 801dc3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801dc3e:	4b0d      	ldr	r3, [pc, #52]	@ (801dc74 <std+0x64>)
 801dc40:	6323      	str	r3, [r4, #48]	@ 0x30
 801dc42:	4b0d      	ldr	r3, [pc, #52]	@ (801dc78 <std+0x68>)
 801dc44:	6224      	str	r4, [r4, #32]
 801dc46:	429c      	cmp	r4, r3
 801dc48:	d006      	beq.n	801dc58 <std+0x48>
 801dc4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801dc4e:	4294      	cmp	r4, r2
 801dc50:	d002      	beq.n	801dc58 <std+0x48>
 801dc52:	33d0      	adds	r3, #208	@ 0xd0
 801dc54:	429c      	cmp	r4, r3
 801dc56:	d105      	bne.n	801dc64 <std+0x54>
 801dc58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801dc5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc60:	f000 bace 	b.w	801e200 <__retarget_lock_init_recursive>
 801dc64:	bd10      	pop	{r4, pc}
 801dc66:	bf00      	nop
 801dc68:	0801de85 	.word	0x0801de85
 801dc6c:	0801dea7 	.word	0x0801dea7
 801dc70:	0801dedf 	.word	0x0801dedf
 801dc74:	0801df03 	.word	0x0801df03
 801dc78:	24000ac8 	.word	0x24000ac8

0801dc7c <stdio_exit_handler>:
 801dc7c:	4a02      	ldr	r2, [pc, #8]	@ (801dc88 <stdio_exit_handler+0xc>)
 801dc7e:	4903      	ldr	r1, [pc, #12]	@ (801dc8c <stdio_exit_handler+0x10>)
 801dc80:	4803      	ldr	r0, [pc, #12]	@ (801dc90 <stdio_exit_handler+0x14>)
 801dc82:	f000 b869 	b.w	801dd58 <_fwalk_sglue>
 801dc86:	bf00      	nop
 801dc88:	2400002c 	.word	0x2400002c
 801dc8c:	0801e971 	.word	0x0801e971
 801dc90:	2400003c 	.word	0x2400003c

0801dc94 <cleanup_stdio>:
 801dc94:	6841      	ldr	r1, [r0, #4]
 801dc96:	4b0c      	ldr	r3, [pc, #48]	@ (801dcc8 <cleanup_stdio+0x34>)
 801dc98:	4299      	cmp	r1, r3
 801dc9a:	b510      	push	{r4, lr}
 801dc9c:	4604      	mov	r4, r0
 801dc9e:	d001      	beq.n	801dca4 <cleanup_stdio+0x10>
 801dca0:	f000 fe66 	bl	801e970 <_fflush_r>
 801dca4:	68a1      	ldr	r1, [r4, #8]
 801dca6:	4b09      	ldr	r3, [pc, #36]	@ (801dccc <cleanup_stdio+0x38>)
 801dca8:	4299      	cmp	r1, r3
 801dcaa:	d002      	beq.n	801dcb2 <cleanup_stdio+0x1e>
 801dcac:	4620      	mov	r0, r4
 801dcae:	f000 fe5f 	bl	801e970 <_fflush_r>
 801dcb2:	68e1      	ldr	r1, [r4, #12]
 801dcb4:	4b06      	ldr	r3, [pc, #24]	@ (801dcd0 <cleanup_stdio+0x3c>)
 801dcb6:	4299      	cmp	r1, r3
 801dcb8:	d004      	beq.n	801dcc4 <cleanup_stdio+0x30>
 801dcba:	4620      	mov	r0, r4
 801dcbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dcc0:	f000 be56 	b.w	801e970 <_fflush_r>
 801dcc4:	bd10      	pop	{r4, pc}
 801dcc6:	bf00      	nop
 801dcc8:	24000ac8 	.word	0x24000ac8
 801dccc:	24000b30 	.word	0x24000b30
 801dcd0:	24000b98 	.word	0x24000b98

0801dcd4 <global_stdio_init.part.0>:
 801dcd4:	b510      	push	{r4, lr}
 801dcd6:	4b0b      	ldr	r3, [pc, #44]	@ (801dd04 <global_stdio_init.part.0+0x30>)
 801dcd8:	4c0b      	ldr	r4, [pc, #44]	@ (801dd08 <global_stdio_init.part.0+0x34>)
 801dcda:	4a0c      	ldr	r2, [pc, #48]	@ (801dd0c <global_stdio_init.part.0+0x38>)
 801dcdc:	601a      	str	r2, [r3, #0]
 801dcde:	4620      	mov	r0, r4
 801dce0:	2200      	movs	r2, #0
 801dce2:	2104      	movs	r1, #4
 801dce4:	f7ff ff94 	bl	801dc10 <std>
 801dce8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801dcec:	2201      	movs	r2, #1
 801dcee:	2109      	movs	r1, #9
 801dcf0:	f7ff ff8e 	bl	801dc10 <std>
 801dcf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801dcf8:	2202      	movs	r2, #2
 801dcfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dcfe:	2112      	movs	r1, #18
 801dd00:	f7ff bf86 	b.w	801dc10 <std>
 801dd04:	24000c00 	.word	0x24000c00
 801dd08:	24000ac8 	.word	0x24000ac8
 801dd0c:	0801dc7d 	.word	0x0801dc7d

0801dd10 <__sfp_lock_acquire>:
 801dd10:	4801      	ldr	r0, [pc, #4]	@ (801dd18 <__sfp_lock_acquire+0x8>)
 801dd12:	f000 ba76 	b.w	801e202 <__retarget_lock_acquire_recursive>
 801dd16:	bf00      	nop
 801dd18:	24000c09 	.word	0x24000c09

0801dd1c <__sfp_lock_release>:
 801dd1c:	4801      	ldr	r0, [pc, #4]	@ (801dd24 <__sfp_lock_release+0x8>)
 801dd1e:	f000 ba71 	b.w	801e204 <__retarget_lock_release_recursive>
 801dd22:	bf00      	nop
 801dd24:	24000c09 	.word	0x24000c09

0801dd28 <__sinit>:
 801dd28:	b510      	push	{r4, lr}
 801dd2a:	4604      	mov	r4, r0
 801dd2c:	f7ff fff0 	bl	801dd10 <__sfp_lock_acquire>
 801dd30:	6a23      	ldr	r3, [r4, #32]
 801dd32:	b11b      	cbz	r3, 801dd3c <__sinit+0x14>
 801dd34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dd38:	f7ff bff0 	b.w	801dd1c <__sfp_lock_release>
 801dd3c:	4b04      	ldr	r3, [pc, #16]	@ (801dd50 <__sinit+0x28>)
 801dd3e:	6223      	str	r3, [r4, #32]
 801dd40:	4b04      	ldr	r3, [pc, #16]	@ (801dd54 <__sinit+0x2c>)
 801dd42:	681b      	ldr	r3, [r3, #0]
 801dd44:	2b00      	cmp	r3, #0
 801dd46:	d1f5      	bne.n	801dd34 <__sinit+0xc>
 801dd48:	f7ff ffc4 	bl	801dcd4 <global_stdio_init.part.0>
 801dd4c:	e7f2      	b.n	801dd34 <__sinit+0xc>
 801dd4e:	bf00      	nop
 801dd50:	0801dc95 	.word	0x0801dc95
 801dd54:	24000c00 	.word	0x24000c00

0801dd58 <_fwalk_sglue>:
 801dd58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd5c:	4607      	mov	r7, r0
 801dd5e:	4688      	mov	r8, r1
 801dd60:	4614      	mov	r4, r2
 801dd62:	2600      	movs	r6, #0
 801dd64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dd68:	f1b9 0901 	subs.w	r9, r9, #1
 801dd6c:	d505      	bpl.n	801dd7a <_fwalk_sglue+0x22>
 801dd6e:	6824      	ldr	r4, [r4, #0]
 801dd70:	2c00      	cmp	r4, #0
 801dd72:	d1f7      	bne.n	801dd64 <_fwalk_sglue+0xc>
 801dd74:	4630      	mov	r0, r6
 801dd76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd7a:	89ab      	ldrh	r3, [r5, #12]
 801dd7c:	2b01      	cmp	r3, #1
 801dd7e:	d907      	bls.n	801dd90 <_fwalk_sglue+0x38>
 801dd80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dd84:	3301      	adds	r3, #1
 801dd86:	d003      	beq.n	801dd90 <_fwalk_sglue+0x38>
 801dd88:	4629      	mov	r1, r5
 801dd8a:	4638      	mov	r0, r7
 801dd8c:	47c0      	blx	r8
 801dd8e:	4306      	orrs	r6, r0
 801dd90:	3568      	adds	r5, #104	@ 0x68
 801dd92:	e7e9      	b.n	801dd68 <_fwalk_sglue+0x10>

0801dd94 <iprintf>:
 801dd94:	b40f      	push	{r0, r1, r2, r3}
 801dd96:	b507      	push	{r0, r1, r2, lr}
 801dd98:	4906      	ldr	r1, [pc, #24]	@ (801ddb4 <iprintf+0x20>)
 801dd9a:	ab04      	add	r3, sp, #16
 801dd9c:	6808      	ldr	r0, [r1, #0]
 801dd9e:	f853 2b04 	ldr.w	r2, [r3], #4
 801dda2:	6881      	ldr	r1, [r0, #8]
 801dda4:	9301      	str	r3, [sp, #4]
 801dda6:	f000 fab9 	bl	801e31c <_vfiprintf_r>
 801ddaa:	b003      	add	sp, #12
 801ddac:	f85d eb04 	ldr.w	lr, [sp], #4
 801ddb0:	b004      	add	sp, #16
 801ddb2:	4770      	bx	lr
 801ddb4:	24000038 	.word	0x24000038

0801ddb8 <putchar>:
 801ddb8:	4b02      	ldr	r3, [pc, #8]	@ (801ddc4 <putchar+0xc>)
 801ddba:	4601      	mov	r1, r0
 801ddbc:	6818      	ldr	r0, [r3, #0]
 801ddbe:	6882      	ldr	r2, [r0, #8]
 801ddc0:	f000 be60 	b.w	801ea84 <_putc_r>
 801ddc4:	24000038 	.word	0x24000038

0801ddc8 <_puts_r>:
 801ddc8:	6a03      	ldr	r3, [r0, #32]
 801ddca:	b570      	push	{r4, r5, r6, lr}
 801ddcc:	6884      	ldr	r4, [r0, #8]
 801ddce:	4605      	mov	r5, r0
 801ddd0:	460e      	mov	r6, r1
 801ddd2:	b90b      	cbnz	r3, 801ddd8 <_puts_r+0x10>
 801ddd4:	f7ff ffa8 	bl	801dd28 <__sinit>
 801ddd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ddda:	07db      	lsls	r3, r3, #31
 801dddc:	d405      	bmi.n	801ddea <_puts_r+0x22>
 801ddde:	89a3      	ldrh	r3, [r4, #12]
 801dde0:	0598      	lsls	r0, r3, #22
 801dde2:	d402      	bmi.n	801ddea <_puts_r+0x22>
 801dde4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dde6:	f000 fa0c 	bl	801e202 <__retarget_lock_acquire_recursive>
 801ddea:	89a3      	ldrh	r3, [r4, #12]
 801ddec:	0719      	lsls	r1, r3, #28
 801ddee:	d502      	bpl.n	801ddf6 <_puts_r+0x2e>
 801ddf0:	6923      	ldr	r3, [r4, #16]
 801ddf2:	2b00      	cmp	r3, #0
 801ddf4:	d135      	bne.n	801de62 <_puts_r+0x9a>
 801ddf6:	4621      	mov	r1, r4
 801ddf8:	4628      	mov	r0, r5
 801ddfa:	f000 f8c5 	bl	801df88 <__swsetup_r>
 801ddfe:	b380      	cbz	r0, 801de62 <_puts_r+0x9a>
 801de00:	f04f 35ff 	mov.w	r5, #4294967295
 801de04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801de06:	07da      	lsls	r2, r3, #31
 801de08:	d405      	bmi.n	801de16 <_puts_r+0x4e>
 801de0a:	89a3      	ldrh	r3, [r4, #12]
 801de0c:	059b      	lsls	r3, r3, #22
 801de0e:	d402      	bmi.n	801de16 <_puts_r+0x4e>
 801de10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801de12:	f000 f9f7 	bl	801e204 <__retarget_lock_release_recursive>
 801de16:	4628      	mov	r0, r5
 801de18:	bd70      	pop	{r4, r5, r6, pc}
 801de1a:	2b00      	cmp	r3, #0
 801de1c:	da04      	bge.n	801de28 <_puts_r+0x60>
 801de1e:	69a2      	ldr	r2, [r4, #24]
 801de20:	429a      	cmp	r2, r3
 801de22:	dc17      	bgt.n	801de54 <_puts_r+0x8c>
 801de24:	290a      	cmp	r1, #10
 801de26:	d015      	beq.n	801de54 <_puts_r+0x8c>
 801de28:	6823      	ldr	r3, [r4, #0]
 801de2a:	1c5a      	adds	r2, r3, #1
 801de2c:	6022      	str	r2, [r4, #0]
 801de2e:	7019      	strb	r1, [r3, #0]
 801de30:	68a3      	ldr	r3, [r4, #8]
 801de32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801de36:	3b01      	subs	r3, #1
 801de38:	60a3      	str	r3, [r4, #8]
 801de3a:	2900      	cmp	r1, #0
 801de3c:	d1ed      	bne.n	801de1a <_puts_r+0x52>
 801de3e:	2b00      	cmp	r3, #0
 801de40:	da11      	bge.n	801de66 <_puts_r+0x9e>
 801de42:	4622      	mov	r2, r4
 801de44:	210a      	movs	r1, #10
 801de46:	4628      	mov	r0, r5
 801de48:	f000 f85f 	bl	801df0a <__swbuf_r>
 801de4c:	3001      	adds	r0, #1
 801de4e:	d0d7      	beq.n	801de00 <_puts_r+0x38>
 801de50:	250a      	movs	r5, #10
 801de52:	e7d7      	b.n	801de04 <_puts_r+0x3c>
 801de54:	4622      	mov	r2, r4
 801de56:	4628      	mov	r0, r5
 801de58:	f000 f857 	bl	801df0a <__swbuf_r>
 801de5c:	3001      	adds	r0, #1
 801de5e:	d1e7      	bne.n	801de30 <_puts_r+0x68>
 801de60:	e7ce      	b.n	801de00 <_puts_r+0x38>
 801de62:	3e01      	subs	r6, #1
 801de64:	e7e4      	b.n	801de30 <_puts_r+0x68>
 801de66:	6823      	ldr	r3, [r4, #0]
 801de68:	1c5a      	adds	r2, r3, #1
 801de6a:	6022      	str	r2, [r4, #0]
 801de6c:	220a      	movs	r2, #10
 801de6e:	701a      	strb	r2, [r3, #0]
 801de70:	e7ee      	b.n	801de50 <_puts_r+0x88>
	...

0801de74 <puts>:
 801de74:	4b02      	ldr	r3, [pc, #8]	@ (801de80 <puts+0xc>)
 801de76:	4601      	mov	r1, r0
 801de78:	6818      	ldr	r0, [r3, #0]
 801de7a:	f7ff bfa5 	b.w	801ddc8 <_puts_r>
 801de7e:	bf00      	nop
 801de80:	24000038 	.word	0x24000038

0801de84 <__sread>:
 801de84:	b510      	push	{r4, lr}
 801de86:	460c      	mov	r4, r1
 801de88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de8c:	f000 f946 	bl	801e11c <_read_r>
 801de90:	2800      	cmp	r0, #0
 801de92:	bfab      	itete	ge
 801de94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801de96:	89a3      	ldrhlt	r3, [r4, #12]
 801de98:	181b      	addge	r3, r3, r0
 801de9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801de9e:	bfac      	ite	ge
 801dea0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801dea2:	81a3      	strhlt	r3, [r4, #12]
 801dea4:	bd10      	pop	{r4, pc}

0801dea6 <__swrite>:
 801dea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801deaa:	461f      	mov	r7, r3
 801deac:	898b      	ldrh	r3, [r1, #12]
 801deae:	05db      	lsls	r3, r3, #23
 801deb0:	4605      	mov	r5, r0
 801deb2:	460c      	mov	r4, r1
 801deb4:	4616      	mov	r6, r2
 801deb6:	d505      	bpl.n	801dec4 <__swrite+0x1e>
 801deb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801debc:	2302      	movs	r3, #2
 801debe:	2200      	movs	r2, #0
 801dec0:	f000 f91a 	bl	801e0f8 <_lseek_r>
 801dec4:	89a3      	ldrh	r3, [r4, #12]
 801dec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801deca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801dece:	81a3      	strh	r3, [r4, #12]
 801ded0:	4632      	mov	r2, r6
 801ded2:	463b      	mov	r3, r7
 801ded4:	4628      	mov	r0, r5
 801ded6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801deda:	f000 b955 	b.w	801e188 <_write_r>

0801dede <__sseek>:
 801dede:	b510      	push	{r4, lr}
 801dee0:	460c      	mov	r4, r1
 801dee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dee6:	f000 f907 	bl	801e0f8 <_lseek_r>
 801deea:	1c43      	adds	r3, r0, #1
 801deec:	89a3      	ldrh	r3, [r4, #12]
 801deee:	bf15      	itete	ne
 801def0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801def2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801def6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801defa:	81a3      	strheq	r3, [r4, #12]
 801defc:	bf18      	it	ne
 801defe:	81a3      	strhne	r3, [r4, #12]
 801df00:	bd10      	pop	{r4, pc}

0801df02 <__sclose>:
 801df02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df06:	f000 b8e7 	b.w	801e0d8 <_close_r>

0801df0a <__swbuf_r>:
 801df0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df0c:	460e      	mov	r6, r1
 801df0e:	4614      	mov	r4, r2
 801df10:	4605      	mov	r5, r0
 801df12:	b118      	cbz	r0, 801df1c <__swbuf_r+0x12>
 801df14:	6a03      	ldr	r3, [r0, #32]
 801df16:	b90b      	cbnz	r3, 801df1c <__swbuf_r+0x12>
 801df18:	f7ff ff06 	bl	801dd28 <__sinit>
 801df1c:	69a3      	ldr	r3, [r4, #24]
 801df1e:	60a3      	str	r3, [r4, #8]
 801df20:	89a3      	ldrh	r3, [r4, #12]
 801df22:	071a      	lsls	r2, r3, #28
 801df24:	d501      	bpl.n	801df2a <__swbuf_r+0x20>
 801df26:	6923      	ldr	r3, [r4, #16]
 801df28:	b943      	cbnz	r3, 801df3c <__swbuf_r+0x32>
 801df2a:	4621      	mov	r1, r4
 801df2c:	4628      	mov	r0, r5
 801df2e:	f000 f82b 	bl	801df88 <__swsetup_r>
 801df32:	b118      	cbz	r0, 801df3c <__swbuf_r+0x32>
 801df34:	f04f 37ff 	mov.w	r7, #4294967295
 801df38:	4638      	mov	r0, r7
 801df3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df3c:	6823      	ldr	r3, [r4, #0]
 801df3e:	6922      	ldr	r2, [r4, #16]
 801df40:	1a98      	subs	r0, r3, r2
 801df42:	6963      	ldr	r3, [r4, #20]
 801df44:	b2f6      	uxtb	r6, r6
 801df46:	4283      	cmp	r3, r0
 801df48:	4637      	mov	r7, r6
 801df4a:	dc05      	bgt.n	801df58 <__swbuf_r+0x4e>
 801df4c:	4621      	mov	r1, r4
 801df4e:	4628      	mov	r0, r5
 801df50:	f000 fd0e 	bl	801e970 <_fflush_r>
 801df54:	2800      	cmp	r0, #0
 801df56:	d1ed      	bne.n	801df34 <__swbuf_r+0x2a>
 801df58:	68a3      	ldr	r3, [r4, #8]
 801df5a:	3b01      	subs	r3, #1
 801df5c:	60a3      	str	r3, [r4, #8]
 801df5e:	6823      	ldr	r3, [r4, #0]
 801df60:	1c5a      	adds	r2, r3, #1
 801df62:	6022      	str	r2, [r4, #0]
 801df64:	701e      	strb	r6, [r3, #0]
 801df66:	6962      	ldr	r2, [r4, #20]
 801df68:	1c43      	adds	r3, r0, #1
 801df6a:	429a      	cmp	r2, r3
 801df6c:	d004      	beq.n	801df78 <__swbuf_r+0x6e>
 801df6e:	89a3      	ldrh	r3, [r4, #12]
 801df70:	07db      	lsls	r3, r3, #31
 801df72:	d5e1      	bpl.n	801df38 <__swbuf_r+0x2e>
 801df74:	2e0a      	cmp	r6, #10
 801df76:	d1df      	bne.n	801df38 <__swbuf_r+0x2e>
 801df78:	4621      	mov	r1, r4
 801df7a:	4628      	mov	r0, r5
 801df7c:	f000 fcf8 	bl	801e970 <_fflush_r>
 801df80:	2800      	cmp	r0, #0
 801df82:	d0d9      	beq.n	801df38 <__swbuf_r+0x2e>
 801df84:	e7d6      	b.n	801df34 <__swbuf_r+0x2a>
	...

0801df88 <__swsetup_r>:
 801df88:	b538      	push	{r3, r4, r5, lr}
 801df8a:	4b29      	ldr	r3, [pc, #164]	@ (801e030 <__swsetup_r+0xa8>)
 801df8c:	4605      	mov	r5, r0
 801df8e:	6818      	ldr	r0, [r3, #0]
 801df90:	460c      	mov	r4, r1
 801df92:	b118      	cbz	r0, 801df9c <__swsetup_r+0x14>
 801df94:	6a03      	ldr	r3, [r0, #32]
 801df96:	b90b      	cbnz	r3, 801df9c <__swsetup_r+0x14>
 801df98:	f7ff fec6 	bl	801dd28 <__sinit>
 801df9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dfa0:	0719      	lsls	r1, r3, #28
 801dfa2:	d422      	bmi.n	801dfea <__swsetup_r+0x62>
 801dfa4:	06da      	lsls	r2, r3, #27
 801dfa6:	d407      	bmi.n	801dfb8 <__swsetup_r+0x30>
 801dfa8:	2209      	movs	r2, #9
 801dfaa:	602a      	str	r2, [r5, #0]
 801dfac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dfb0:	81a3      	strh	r3, [r4, #12]
 801dfb2:	f04f 30ff 	mov.w	r0, #4294967295
 801dfb6:	e033      	b.n	801e020 <__swsetup_r+0x98>
 801dfb8:	0758      	lsls	r0, r3, #29
 801dfba:	d512      	bpl.n	801dfe2 <__swsetup_r+0x5a>
 801dfbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dfbe:	b141      	cbz	r1, 801dfd2 <__swsetup_r+0x4a>
 801dfc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dfc4:	4299      	cmp	r1, r3
 801dfc6:	d002      	beq.n	801dfce <__swsetup_r+0x46>
 801dfc8:	4628      	mov	r0, r5
 801dfca:	f000 f92b 	bl	801e224 <_free_r>
 801dfce:	2300      	movs	r3, #0
 801dfd0:	6363      	str	r3, [r4, #52]	@ 0x34
 801dfd2:	89a3      	ldrh	r3, [r4, #12]
 801dfd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801dfd8:	81a3      	strh	r3, [r4, #12]
 801dfda:	2300      	movs	r3, #0
 801dfdc:	6063      	str	r3, [r4, #4]
 801dfde:	6923      	ldr	r3, [r4, #16]
 801dfe0:	6023      	str	r3, [r4, #0]
 801dfe2:	89a3      	ldrh	r3, [r4, #12]
 801dfe4:	f043 0308 	orr.w	r3, r3, #8
 801dfe8:	81a3      	strh	r3, [r4, #12]
 801dfea:	6923      	ldr	r3, [r4, #16]
 801dfec:	b94b      	cbnz	r3, 801e002 <__swsetup_r+0x7a>
 801dfee:	89a3      	ldrh	r3, [r4, #12]
 801dff0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801dff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dff8:	d003      	beq.n	801e002 <__swsetup_r+0x7a>
 801dffa:	4621      	mov	r1, r4
 801dffc:	4628      	mov	r0, r5
 801dffe:	f000 fd05 	bl	801ea0c <__smakebuf_r>
 801e002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e006:	f013 0201 	ands.w	r2, r3, #1
 801e00a:	d00a      	beq.n	801e022 <__swsetup_r+0x9a>
 801e00c:	2200      	movs	r2, #0
 801e00e:	60a2      	str	r2, [r4, #8]
 801e010:	6962      	ldr	r2, [r4, #20]
 801e012:	4252      	negs	r2, r2
 801e014:	61a2      	str	r2, [r4, #24]
 801e016:	6922      	ldr	r2, [r4, #16]
 801e018:	b942      	cbnz	r2, 801e02c <__swsetup_r+0xa4>
 801e01a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e01e:	d1c5      	bne.n	801dfac <__swsetup_r+0x24>
 801e020:	bd38      	pop	{r3, r4, r5, pc}
 801e022:	0799      	lsls	r1, r3, #30
 801e024:	bf58      	it	pl
 801e026:	6962      	ldrpl	r2, [r4, #20]
 801e028:	60a2      	str	r2, [r4, #8]
 801e02a:	e7f4      	b.n	801e016 <__swsetup_r+0x8e>
 801e02c:	2000      	movs	r0, #0
 801e02e:	e7f7      	b.n	801e020 <__swsetup_r+0x98>
 801e030:	24000038 	.word	0x24000038

0801e034 <memmove>:
 801e034:	4288      	cmp	r0, r1
 801e036:	b510      	push	{r4, lr}
 801e038:	eb01 0402 	add.w	r4, r1, r2
 801e03c:	d902      	bls.n	801e044 <memmove+0x10>
 801e03e:	4284      	cmp	r4, r0
 801e040:	4623      	mov	r3, r4
 801e042:	d807      	bhi.n	801e054 <memmove+0x20>
 801e044:	1e43      	subs	r3, r0, #1
 801e046:	42a1      	cmp	r1, r4
 801e048:	d008      	beq.n	801e05c <memmove+0x28>
 801e04a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e04e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e052:	e7f8      	b.n	801e046 <memmove+0x12>
 801e054:	4402      	add	r2, r0
 801e056:	4601      	mov	r1, r0
 801e058:	428a      	cmp	r2, r1
 801e05a:	d100      	bne.n	801e05e <memmove+0x2a>
 801e05c:	bd10      	pop	{r4, pc}
 801e05e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e066:	e7f7      	b.n	801e058 <memmove+0x24>

0801e068 <memset>:
 801e068:	4402      	add	r2, r0
 801e06a:	4603      	mov	r3, r0
 801e06c:	4293      	cmp	r3, r2
 801e06e:	d100      	bne.n	801e072 <memset+0xa>
 801e070:	4770      	bx	lr
 801e072:	f803 1b01 	strb.w	r1, [r3], #1
 801e076:	e7f9      	b.n	801e06c <memset+0x4>

0801e078 <_raise_r>:
 801e078:	291f      	cmp	r1, #31
 801e07a:	b538      	push	{r3, r4, r5, lr}
 801e07c:	4605      	mov	r5, r0
 801e07e:	460c      	mov	r4, r1
 801e080:	d904      	bls.n	801e08c <_raise_r+0x14>
 801e082:	2316      	movs	r3, #22
 801e084:	6003      	str	r3, [r0, #0]
 801e086:	f04f 30ff 	mov.w	r0, #4294967295
 801e08a:	bd38      	pop	{r3, r4, r5, pc}
 801e08c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e08e:	b112      	cbz	r2, 801e096 <_raise_r+0x1e>
 801e090:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e094:	b94b      	cbnz	r3, 801e0aa <_raise_r+0x32>
 801e096:	4628      	mov	r0, r5
 801e098:	f000 f864 	bl	801e164 <_getpid_r>
 801e09c:	4622      	mov	r2, r4
 801e09e:	4601      	mov	r1, r0
 801e0a0:	4628      	mov	r0, r5
 801e0a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e0a6:	f000 b84b 	b.w	801e140 <_kill_r>
 801e0aa:	2b01      	cmp	r3, #1
 801e0ac:	d00a      	beq.n	801e0c4 <_raise_r+0x4c>
 801e0ae:	1c59      	adds	r1, r3, #1
 801e0b0:	d103      	bne.n	801e0ba <_raise_r+0x42>
 801e0b2:	2316      	movs	r3, #22
 801e0b4:	6003      	str	r3, [r0, #0]
 801e0b6:	2001      	movs	r0, #1
 801e0b8:	e7e7      	b.n	801e08a <_raise_r+0x12>
 801e0ba:	2100      	movs	r1, #0
 801e0bc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e0c0:	4620      	mov	r0, r4
 801e0c2:	4798      	blx	r3
 801e0c4:	2000      	movs	r0, #0
 801e0c6:	e7e0      	b.n	801e08a <_raise_r+0x12>

0801e0c8 <raise>:
 801e0c8:	4b02      	ldr	r3, [pc, #8]	@ (801e0d4 <raise+0xc>)
 801e0ca:	4601      	mov	r1, r0
 801e0cc:	6818      	ldr	r0, [r3, #0]
 801e0ce:	f7ff bfd3 	b.w	801e078 <_raise_r>
 801e0d2:	bf00      	nop
 801e0d4:	24000038 	.word	0x24000038

0801e0d8 <_close_r>:
 801e0d8:	b538      	push	{r3, r4, r5, lr}
 801e0da:	4d06      	ldr	r5, [pc, #24]	@ (801e0f4 <_close_r+0x1c>)
 801e0dc:	2300      	movs	r3, #0
 801e0de:	4604      	mov	r4, r0
 801e0e0:	4608      	mov	r0, r1
 801e0e2:	602b      	str	r3, [r5, #0]
 801e0e4:	f7ed fcf8 	bl	800bad8 <_close>
 801e0e8:	1c43      	adds	r3, r0, #1
 801e0ea:	d102      	bne.n	801e0f2 <_close_r+0x1a>
 801e0ec:	682b      	ldr	r3, [r5, #0]
 801e0ee:	b103      	cbz	r3, 801e0f2 <_close_r+0x1a>
 801e0f0:	6023      	str	r3, [r4, #0]
 801e0f2:	bd38      	pop	{r3, r4, r5, pc}
 801e0f4:	24000c04 	.word	0x24000c04

0801e0f8 <_lseek_r>:
 801e0f8:	b538      	push	{r3, r4, r5, lr}
 801e0fa:	4d07      	ldr	r5, [pc, #28]	@ (801e118 <_lseek_r+0x20>)
 801e0fc:	4604      	mov	r4, r0
 801e0fe:	4608      	mov	r0, r1
 801e100:	4611      	mov	r1, r2
 801e102:	2200      	movs	r2, #0
 801e104:	602a      	str	r2, [r5, #0]
 801e106:	461a      	mov	r2, r3
 801e108:	f7ed fd0d 	bl	800bb26 <_lseek>
 801e10c:	1c43      	adds	r3, r0, #1
 801e10e:	d102      	bne.n	801e116 <_lseek_r+0x1e>
 801e110:	682b      	ldr	r3, [r5, #0]
 801e112:	b103      	cbz	r3, 801e116 <_lseek_r+0x1e>
 801e114:	6023      	str	r3, [r4, #0]
 801e116:	bd38      	pop	{r3, r4, r5, pc}
 801e118:	24000c04 	.word	0x24000c04

0801e11c <_read_r>:
 801e11c:	b538      	push	{r3, r4, r5, lr}
 801e11e:	4d07      	ldr	r5, [pc, #28]	@ (801e13c <_read_r+0x20>)
 801e120:	4604      	mov	r4, r0
 801e122:	4608      	mov	r0, r1
 801e124:	4611      	mov	r1, r2
 801e126:	2200      	movs	r2, #0
 801e128:	602a      	str	r2, [r5, #0]
 801e12a:	461a      	mov	r2, r3
 801e12c:	f7ed fc9b 	bl	800ba66 <_read>
 801e130:	1c43      	adds	r3, r0, #1
 801e132:	d102      	bne.n	801e13a <_read_r+0x1e>
 801e134:	682b      	ldr	r3, [r5, #0]
 801e136:	b103      	cbz	r3, 801e13a <_read_r+0x1e>
 801e138:	6023      	str	r3, [r4, #0]
 801e13a:	bd38      	pop	{r3, r4, r5, pc}
 801e13c:	24000c04 	.word	0x24000c04

0801e140 <_kill_r>:
 801e140:	b538      	push	{r3, r4, r5, lr}
 801e142:	4d07      	ldr	r5, [pc, #28]	@ (801e160 <_kill_r+0x20>)
 801e144:	2300      	movs	r3, #0
 801e146:	4604      	mov	r4, r0
 801e148:	4608      	mov	r0, r1
 801e14a:	4611      	mov	r1, r2
 801e14c:	602b      	str	r3, [r5, #0]
 801e14e:	f7ed fc6f 	bl	800ba30 <_kill>
 801e152:	1c43      	adds	r3, r0, #1
 801e154:	d102      	bne.n	801e15c <_kill_r+0x1c>
 801e156:	682b      	ldr	r3, [r5, #0]
 801e158:	b103      	cbz	r3, 801e15c <_kill_r+0x1c>
 801e15a:	6023      	str	r3, [r4, #0]
 801e15c:	bd38      	pop	{r3, r4, r5, pc}
 801e15e:	bf00      	nop
 801e160:	24000c04 	.word	0x24000c04

0801e164 <_getpid_r>:
 801e164:	f7ed bc5c 	b.w	800ba20 <_getpid>

0801e168 <_sbrk_r>:
 801e168:	b538      	push	{r3, r4, r5, lr}
 801e16a:	4d06      	ldr	r5, [pc, #24]	@ (801e184 <_sbrk_r+0x1c>)
 801e16c:	2300      	movs	r3, #0
 801e16e:	4604      	mov	r4, r0
 801e170:	4608      	mov	r0, r1
 801e172:	602b      	str	r3, [r5, #0]
 801e174:	f7ed fce4 	bl	800bb40 <_sbrk>
 801e178:	1c43      	adds	r3, r0, #1
 801e17a:	d102      	bne.n	801e182 <_sbrk_r+0x1a>
 801e17c:	682b      	ldr	r3, [r5, #0]
 801e17e:	b103      	cbz	r3, 801e182 <_sbrk_r+0x1a>
 801e180:	6023      	str	r3, [r4, #0]
 801e182:	bd38      	pop	{r3, r4, r5, pc}
 801e184:	24000c04 	.word	0x24000c04

0801e188 <_write_r>:
 801e188:	b538      	push	{r3, r4, r5, lr}
 801e18a:	4d07      	ldr	r5, [pc, #28]	@ (801e1a8 <_write_r+0x20>)
 801e18c:	4604      	mov	r4, r0
 801e18e:	4608      	mov	r0, r1
 801e190:	4611      	mov	r1, r2
 801e192:	2200      	movs	r2, #0
 801e194:	602a      	str	r2, [r5, #0]
 801e196:	461a      	mov	r2, r3
 801e198:	f7ed fc82 	bl	800baa0 <_write>
 801e19c:	1c43      	adds	r3, r0, #1
 801e19e:	d102      	bne.n	801e1a6 <_write_r+0x1e>
 801e1a0:	682b      	ldr	r3, [r5, #0]
 801e1a2:	b103      	cbz	r3, 801e1a6 <_write_r+0x1e>
 801e1a4:	6023      	str	r3, [r4, #0]
 801e1a6:	bd38      	pop	{r3, r4, r5, pc}
 801e1a8:	24000c04 	.word	0x24000c04

0801e1ac <__errno>:
 801e1ac:	4b01      	ldr	r3, [pc, #4]	@ (801e1b4 <__errno+0x8>)
 801e1ae:	6818      	ldr	r0, [r3, #0]
 801e1b0:	4770      	bx	lr
 801e1b2:	bf00      	nop
 801e1b4:	24000038 	.word	0x24000038

0801e1b8 <__libc_init_array>:
 801e1b8:	b570      	push	{r4, r5, r6, lr}
 801e1ba:	4d0d      	ldr	r5, [pc, #52]	@ (801e1f0 <__libc_init_array+0x38>)
 801e1bc:	4c0d      	ldr	r4, [pc, #52]	@ (801e1f4 <__libc_init_array+0x3c>)
 801e1be:	1b64      	subs	r4, r4, r5
 801e1c0:	10a4      	asrs	r4, r4, #2
 801e1c2:	2600      	movs	r6, #0
 801e1c4:	42a6      	cmp	r6, r4
 801e1c6:	d109      	bne.n	801e1dc <__libc_init_array+0x24>
 801e1c8:	4d0b      	ldr	r5, [pc, #44]	@ (801e1f8 <__libc_init_array+0x40>)
 801e1ca:	4c0c      	ldr	r4, [pc, #48]	@ (801e1fc <__libc_init_array+0x44>)
 801e1cc:	f000 fcb0 	bl	801eb30 <_init>
 801e1d0:	1b64      	subs	r4, r4, r5
 801e1d2:	10a4      	asrs	r4, r4, #2
 801e1d4:	2600      	movs	r6, #0
 801e1d6:	42a6      	cmp	r6, r4
 801e1d8:	d105      	bne.n	801e1e6 <__libc_init_array+0x2e>
 801e1da:	bd70      	pop	{r4, r5, r6, pc}
 801e1dc:	f855 3b04 	ldr.w	r3, [r5], #4
 801e1e0:	4798      	blx	r3
 801e1e2:	3601      	adds	r6, #1
 801e1e4:	e7ee      	b.n	801e1c4 <__libc_init_array+0xc>
 801e1e6:	f855 3b04 	ldr.w	r3, [r5], #4
 801e1ea:	4798      	blx	r3
 801e1ec:	3601      	adds	r6, #1
 801e1ee:	e7f2      	b.n	801e1d6 <__libc_init_array+0x1e>
 801e1f0:	0801f954 	.word	0x0801f954
 801e1f4:	0801f954 	.word	0x0801f954
 801e1f8:	0801f954 	.word	0x0801f954
 801e1fc:	0801f960 	.word	0x0801f960

0801e200 <__retarget_lock_init_recursive>:
 801e200:	4770      	bx	lr

0801e202 <__retarget_lock_acquire_recursive>:
 801e202:	4770      	bx	lr

0801e204 <__retarget_lock_release_recursive>:
 801e204:	4770      	bx	lr

0801e206 <memcpy>:
 801e206:	440a      	add	r2, r1
 801e208:	4291      	cmp	r1, r2
 801e20a:	f100 33ff 	add.w	r3, r0, #4294967295
 801e20e:	d100      	bne.n	801e212 <memcpy+0xc>
 801e210:	4770      	bx	lr
 801e212:	b510      	push	{r4, lr}
 801e214:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e218:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e21c:	4291      	cmp	r1, r2
 801e21e:	d1f9      	bne.n	801e214 <memcpy+0xe>
 801e220:	bd10      	pop	{r4, pc}
	...

0801e224 <_free_r>:
 801e224:	b538      	push	{r3, r4, r5, lr}
 801e226:	4605      	mov	r5, r0
 801e228:	2900      	cmp	r1, #0
 801e22a:	d041      	beq.n	801e2b0 <_free_r+0x8c>
 801e22c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e230:	1f0c      	subs	r4, r1, #4
 801e232:	2b00      	cmp	r3, #0
 801e234:	bfb8      	it	lt
 801e236:	18e4      	addlt	r4, r4, r3
 801e238:	f7ff fca8 	bl	801db8c <__malloc_lock>
 801e23c:	4a1d      	ldr	r2, [pc, #116]	@ (801e2b4 <_free_r+0x90>)
 801e23e:	6813      	ldr	r3, [r2, #0]
 801e240:	b933      	cbnz	r3, 801e250 <_free_r+0x2c>
 801e242:	6063      	str	r3, [r4, #4]
 801e244:	6014      	str	r4, [r2, #0]
 801e246:	4628      	mov	r0, r5
 801e248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e24c:	f7ff bca4 	b.w	801db98 <__malloc_unlock>
 801e250:	42a3      	cmp	r3, r4
 801e252:	d908      	bls.n	801e266 <_free_r+0x42>
 801e254:	6820      	ldr	r0, [r4, #0]
 801e256:	1821      	adds	r1, r4, r0
 801e258:	428b      	cmp	r3, r1
 801e25a:	bf01      	itttt	eq
 801e25c:	6819      	ldreq	r1, [r3, #0]
 801e25e:	685b      	ldreq	r3, [r3, #4]
 801e260:	1809      	addeq	r1, r1, r0
 801e262:	6021      	streq	r1, [r4, #0]
 801e264:	e7ed      	b.n	801e242 <_free_r+0x1e>
 801e266:	461a      	mov	r2, r3
 801e268:	685b      	ldr	r3, [r3, #4]
 801e26a:	b10b      	cbz	r3, 801e270 <_free_r+0x4c>
 801e26c:	42a3      	cmp	r3, r4
 801e26e:	d9fa      	bls.n	801e266 <_free_r+0x42>
 801e270:	6811      	ldr	r1, [r2, #0]
 801e272:	1850      	adds	r0, r2, r1
 801e274:	42a0      	cmp	r0, r4
 801e276:	d10b      	bne.n	801e290 <_free_r+0x6c>
 801e278:	6820      	ldr	r0, [r4, #0]
 801e27a:	4401      	add	r1, r0
 801e27c:	1850      	adds	r0, r2, r1
 801e27e:	4283      	cmp	r3, r0
 801e280:	6011      	str	r1, [r2, #0]
 801e282:	d1e0      	bne.n	801e246 <_free_r+0x22>
 801e284:	6818      	ldr	r0, [r3, #0]
 801e286:	685b      	ldr	r3, [r3, #4]
 801e288:	6053      	str	r3, [r2, #4]
 801e28a:	4408      	add	r0, r1
 801e28c:	6010      	str	r0, [r2, #0]
 801e28e:	e7da      	b.n	801e246 <_free_r+0x22>
 801e290:	d902      	bls.n	801e298 <_free_r+0x74>
 801e292:	230c      	movs	r3, #12
 801e294:	602b      	str	r3, [r5, #0]
 801e296:	e7d6      	b.n	801e246 <_free_r+0x22>
 801e298:	6820      	ldr	r0, [r4, #0]
 801e29a:	1821      	adds	r1, r4, r0
 801e29c:	428b      	cmp	r3, r1
 801e29e:	bf04      	itt	eq
 801e2a0:	6819      	ldreq	r1, [r3, #0]
 801e2a2:	685b      	ldreq	r3, [r3, #4]
 801e2a4:	6063      	str	r3, [r4, #4]
 801e2a6:	bf04      	itt	eq
 801e2a8:	1809      	addeq	r1, r1, r0
 801e2aa:	6021      	streq	r1, [r4, #0]
 801e2ac:	6054      	str	r4, [r2, #4]
 801e2ae:	e7ca      	b.n	801e246 <_free_r+0x22>
 801e2b0:	bd38      	pop	{r3, r4, r5, pc}
 801e2b2:	bf00      	nop
 801e2b4:	24000ac4 	.word	0x24000ac4

0801e2b8 <_malloc_usable_size_r>:
 801e2b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e2bc:	1f18      	subs	r0, r3, #4
 801e2be:	2b00      	cmp	r3, #0
 801e2c0:	bfbc      	itt	lt
 801e2c2:	580b      	ldrlt	r3, [r1, r0]
 801e2c4:	18c0      	addlt	r0, r0, r3
 801e2c6:	4770      	bx	lr

0801e2c8 <__sfputc_r>:
 801e2c8:	6893      	ldr	r3, [r2, #8]
 801e2ca:	3b01      	subs	r3, #1
 801e2cc:	2b00      	cmp	r3, #0
 801e2ce:	b410      	push	{r4}
 801e2d0:	6093      	str	r3, [r2, #8]
 801e2d2:	da08      	bge.n	801e2e6 <__sfputc_r+0x1e>
 801e2d4:	6994      	ldr	r4, [r2, #24]
 801e2d6:	42a3      	cmp	r3, r4
 801e2d8:	db01      	blt.n	801e2de <__sfputc_r+0x16>
 801e2da:	290a      	cmp	r1, #10
 801e2dc:	d103      	bne.n	801e2e6 <__sfputc_r+0x1e>
 801e2de:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e2e2:	f7ff be12 	b.w	801df0a <__swbuf_r>
 801e2e6:	6813      	ldr	r3, [r2, #0]
 801e2e8:	1c58      	adds	r0, r3, #1
 801e2ea:	6010      	str	r0, [r2, #0]
 801e2ec:	7019      	strb	r1, [r3, #0]
 801e2ee:	4608      	mov	r0, r1
 801e2f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e2f4:	4770      	bx	lr

0801e2f6 <__sfputs_r>:
 801e2f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e2f8:	4606      	mov	r6, r0
 801e2fa:	460f      	mov	r7, r1
 801e2fc:	4614      	mov	r4, r2
 801e2fe:	18d5      	adds	r5, r2, r3
 801e300:	42ac      	cmp	r4, r5
 801e302:	d101      	bne.n	801e308 <__sfputs_r+0x12>
 801e304:	2000      	movs	r0, #0
 801e306:	e007      	b.n	801e318 <__sfputs_r+0x22>
 801e308:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e30c:	463a      	mov	r2, r7
 801e30e:	4630      	mov	r0, r6
 801e310:	f7ff ffda 	bl	801e2c8 <__sfputc_r>
 801e314:	1c43      	adds	r3, r0, #1
 801e316:	d1f3      	bne.n	801e300 <__sfputs_r+0xa>
 801e318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e31c <_vfiprintf_r>:
 801e31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e320:	460d      	mov	r5, r1
 801e322:	b09d      	sub	sp, #116	@ 0x74
 801e324:	4614      	mov	r4, r2
 801e326:	4698      	mov	r8, r3
 801e328:	4606      	mov	r6, r0
 801e32a:	b118      	cbz	r0, 801e334 <_vfiprintf_r+0x18>
 801e32c:	6a03      	ldr	r3, [r0, #32]
 801e32e:	b90b      	cbnz	r3, 801e334 <_vfiprintf_r+0x18>
 801e330:	f7ff fcfa 	bl	801dd28 <__sinit>
 801e334:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e336:	07d9      	lsls	r1, r3, #31
 801e338:	d405      	bmi.n	801e346 <_vfiprintf_r+0x2a>
 801e33a:	89ab      	ldrh	r3, [r5, #12]
 801e33c:	059a      	lsls	r2, r3, #22
 801e33e:	d402      	bmi.n	801e346 <_vfiprintf_r+0x2a>
 801e340:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e342:	f7ff ff5e 	bl	801e202 <__retarget_lock_acquire_recursive>
 801e346:	89ab      	ldrh	r3, [r5, #12]
 801e348:	071b      	lsls	r3, r3, #28
 801e34a:	d501      	bpl.n	801e350 <_vfiprintf_r+0x34>
 801e34c:	692b      	ldr	r3, [r5, #16]
 801e34e:	b99b      	cbnz	r3, 801e378 <_vfiprintf_r+0x5c>
 801e350:	4629      	mov	r1, r5
 801e352:	4630      	mov	r0, r6
 801e354:	f7ff fe18 	bl	801df88 <__swsetup_r>
 801e358:	b170      	cbz	r0, 801e378 <_vfiprintf_r+0x5c>
 801e35a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e35c:	07dc      	lsls	r4, r3, #31
 801e35e:	d504      	bpl.n	801e36a <_vfiprintf_r+0x4e>
 801e360:	f04f 30ff 	mov.w	r0, #4294967295
 801e364:	b01d      	add	sp, #116	@ 0x74
 801e366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e36a:	89ab      	ldrh	r3, [r5, #12]
 801e36c:	0598      	lsls	r0, r3, #22
 801e36e:	d4f7      	bmi.n	801e360 <_vfiprintf_r+0x44>
 801e370:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e372:	f7ff ff47 	bl	801e204 <__retarget_lock_release_recursive>
 801e376:	e7f3      	b.n	801e360 <_vfiprintf_r+0x44>
 801e378:	2300      	movs	r3, #0
 801e37a:	9309      	str	r3, [sp, #36]	@ 0x24
 801e37c:	2320      	movs	r3, #32
 801e37e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e382:	f8cd 800c 	str.w	r8, [sp, #12]
 801e386:	2330      	movs	r3, #48	@ 0x30
 801e388:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e538 <_vfiprintf_r+0x21c>
 801e38c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e390:	f04f 0901 	mov.w	r9, #1
 801e394:	4623      	mov	r3, r4
 801e396:	469a      	mov	sl, r3
 801e398:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e39c:	b10a      	cbz	r2, 801e3a2 <_vfiprintf_r+0x86>
 801e39e:	2a25      	cmp	r2, #37	@ 0x25
 801e3a0:	d1f9      	bne.n	801e396 <_vfiprintf_r+0x7a>
 801e3a2:	ebba 0b04 	subs.w	fp, sl, r4
 801e3a6:	d00b      	beq.n	801e3c0 <_vfiprintf_r+0xa4>
 801e3a8:	465b      	mov	r3, fp
 801e3aa:	4622      	mov	r2, r4
 801e3ac:	4629      	mov	r1, r5
 801e3ae:	4630      	mov	r0, r6
 801e3b0:	f7ff ffa1 	bl	801e2f6 <__sfputs_r>
 801e3b4:	3001      	adds	r0, #1
 801e3b6:	f000 80a7 	beq.w	801e508 <_vfiprintf_r+0x1ec>
 801e3ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e3bc:	445a      	add	r2, fp
 801e3be:	9209      	str	r2, [sp, #36]	@ 0x24
 801e3c0:	f89a 3000 	ldrb.w	r3, [sl]
 801e3c4:	2b00      	cmp	r3, #0
 801e3c6:	f000 809f 	beq.w	801e508 <_vfiprintf_r+0x1ec>
 801e3ca:	2300      	movs	r3, #0
 801e3cc:	f04f 32ff 	mov.w	r2, #4294967295
 801e3d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e3d4:	f10a 0a01 	add.w	sl, sl, #1
 801e3d8:	9304      	str	r3, [sp, #16]
 801e3da:	9307      	str	r3, [sp, #28]
 801e3dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e3e0:	931a      	str	r3, [sp, #104]	@ 0x68
 801e3e2:	4654      	mov	r4, sl
 801e3e4:	2205      	movs	r2, #5
 801e3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e3ea:	4853      	ldr	r0, [pc, #332]	@ (801e538 <_vfiprintf_r+0x21c>)
 801e3ec:	f7e1 ff88 	bl	8000300 <memchr>
 801e3f0:	9a04      	ldr	r2, [sp, #16]
 801e3f2:	b9d8      	cbnz	r0, 801e42c <_vfiprintf_r+0x110>
 801e3f4:	06d1      	lsls	r1, r2, #27
 801e3f6:	bf44      	itt	mi
 801e3f8:	2320      	movmi	r3, #32
 801e3fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e3fe:	0713      	lsls	r3, r2, #28
 801e400:	bf44      	itt	mi
 801e402:	232b      	movmi	r3, #43	@ 0x2b
 801e404:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e408:	f89a 3000 	ldrb.w	r3, [sl]
 801e40c:	2b2a      	cmp	r3, #42	@ 0x2a
 801e40e:	d015      	beq.n	801e43c <_vfiprintf_r+0x120>
 801e410:	9a07      	ldr	r2, [sp, #28]
 801e412:	4654      	mov	r4, sl
 801e414:	2000      	movs	r0, #0
 801e416:	f04f 0c0a 	mov.w	ip, #10
 801e41a:	4621      	mov	r1, r4
 801e41c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e420:	3b30      	subs	r3, #48	@ 0x30
 801e422:	2b09      	cmp	r3, #9
 801e424:	d94b      	bls.n	801e4be <_vfiprintf_r+0x1a2>
 801e426:	b1b0      	cbz	r0, 801e456 <_vfiprintf_r+0x13a>
 801e428:	9207      	str	r2, [sp, #28]
 801e42a:	e014      	b.n	801e456 <_vfiprintf_r+0x13a>
 801e42c:	eba0 0308 	sub.w	r3, r0, r8
 801e430:	fa09 f303 	lsl.w	r3, r9, r3
 801e434:	4313      	orrs	r3, r2
 801e436:	9304      	str	r3, [sp, #16]
 801e438:	46a2      	mov	sl, r4
 801e43a:	e7d2      	b.n	801e3e2 <_vfiprintf_r+0xc6>
 801e43c:	9b03      	ldr	r3, [sp, #12]
 801e43e:	1d19      	adds	r1, r3, #4
 801e440:	681b      	ldr	r3, [r3, #0]
 801e442:	9103      	str	r1, [sp, #12]
 801e444:	2b00      	cmp	r3, #0
 801e446:	bfbb      	ittet	lt
 801e448:	425b      	neglt	r3, r3
 801e44a:	f042 0202 	orrlt.w	r2, r2, #2
 801e44e:	9307      	strge	r3, [sp, #28]
 801e450:	9307      	strlt	r3, [sp, #28]
 801e452:	bfb8      	it	lt
 801e454:	9204      	strlt	r2, [sp, #16]
 801e456:	7823      	ldrb	r3, [r4, #0]
 801e458:	2b2e      	cmp	r3, #46	@ 0x2e
 801e45a:	d10a      	bne.n	801e472 <_vfiprintf_r+0x156>
 801e45c:	7863      	ldrb	r3, [r4, #1]
 801e45e:	2b2a      	cmp	r3, #42	@ 0x2a
 801e460:	d132      	bne.n	801e4c8 <_vfiprintf_r+0x1ac>
 801e462:	9b03      	ldr	r3, [sp, #12]
 801e464:	1d1a      	adds	r2, r3, #4
 801e466:	681b      	ldr	r3, [r3, #0]
 801e468:	9203      	str	r2, [sp, #12]
 801e46a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e46e:	3402      	adds	r4, #2
 801e470:	9305      	str	r3, [sp, #20]
 801e472:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e548 <_vfiprintf_r+0x22c>
 801e476:	7821      	ldrb	r1, [r4, #0]
 801e478:	2203      	movs	r2, #3
 801e47a:	4650      	mov	r0, sl
 801e47c:	f7e1 ff40 	bl	8000300 <memchr>
 801e480:	b138      	cbz	r0, 801e492 <_vfiprintf_r+0x176>
 801e482:	9b04      	ldr	r3, [sp, #16]
 801e484:	eba0 000a 	sub.w	r0, r0, sl
 801e488:	2240      	movs	r2, #64	@ 0x40
 801e48a:	4082      	lsls	r2, r0
 801e48c:	4313      	orrs	r3, r2
 801e48e:	3401      	adds	r4, #1
 801e490:	9304      	str	r3, [sp, #16]
 801e492:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e496:	4829      	ldr	r0, [pc, #164]	@ (801e53c <_vfiprintf_r+0x220>)
 801e498:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e49c:	2206      	movs	r2, #6
 801e49e:	f7e1 ff2f 	bl	8000300 <memchr>
 801e4a2:	2800      	cmp	r0, #0
 801e4a4:	d03f      	beq.n	801e526 <_vfiprintf_r+0x20a>
 801e4a6:	4b26      	ldr	r3, [pc, #152]	@ (801e540 <_vfiprintf_r+0x224>)
 801e4a8:	bb1b      	cbnz	r3, 801e4f2 <_vfiprintf_r+0x1d6>
 801e4aa:	9b03      	ldr	r3, [sp, #12]
 801e4ac:	3307      	adds	r3, #7
 801e4ae:	f023 0307 	bic.w	r3, r3, #7
 801e4b2:	3308      	adds	r3, #8
 801e4b4:	9303      	str	r3, [sp, #12]
 801e4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e4b8:	443b      	add	r3, r7
 801e4ba:	9309      	str	r3, [sp, #36]	@ 0x24
 801e4bc:	e76a      	b.n	801e394 <_vfiprintf_r+0x78>
 801e4be:	fb0c 3202 	mla	r2, ip, r2, r3
 801e4c2:	460c      	mov	r4, r1
 801e4c4:	2001      	movs	r0, #1
 801e4c6:	e7a8      	b.n	801e41a <_vfiprintf_r+0xfe>
 801e4c8:	2300      	movs	r3, #0
 801e4ca:	3401      	adds	r4, #1
 801e4cc:	9305      	str	r3, [sp, #20]
 801e4ce:	4619      	mov	r1, r3
 801e4d0:	f04f 0c0a 	mov.w	ip, #10
 801e4d4:	4620      	mov	r0, r4
 801e4d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e4da:	3a30      	subs	r2, #48	@ 0x30
 801e4dc:	2a09      	cmp	r2, #9
 801e4de:	d903      	bls.n	801e4e8 <_vfiprintf_r+0x1cc>
 801e4e0:	2b00      	cmp	r3, #0
 801e4e2:	d0c6      	beq.n	801e472 <_vfiprintf_r+0x156>
 801e4e4:	9105      	str	r1, [sp, #20]
 801e4e6:	e7c4      	b.n	801e472 <_vfiprintf_r+0x156>
 801e4e8:	fb0c 2101 	mla	r1, ip, r1, r2
 801e4ec:	4604      	mov	r4, r0
 801e4ee:	2301      	movs	r3, #1
 801e4f0:	e7f0      	b.n	801e4d4 <_vfiprintf_r+0x1b8>
 801e4f2:	ab03      	add	r3, sp, #12
 801e4f4:	9300      	str	r3, [sp, #0]
 801e4f6:	462a      	mov	r2, r5
 801e4f8:	4b12      	ldr	r3, [pc, #72]	@ (801e544 <_vfiprintf_r+0x228>)
 801e4fa:	a904      	add	r1, sp, #16
 801e4fc:	4630      	mov	r0, r6
 801e4fe:	f3af 8000 	nop.w
 801e502:	4607      	mov	r7, r0
 801e504:	1c78      	adds	r0, r7, #1
 801e506:	d1d6      	bne.n	801e4b6 <_vfiprintf_r+0x19a>
 801e508:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e50a:	07d9      	lsls	r1, r3, #31
 801e50c:	d405      	bmi.n	801e51a <_vfiprintf_r+0x1fe>
 801e50e:	89ab      	ldrh	r3, [r5, #12]
 801e510:	059a      	lsls	r2, r3, #22
 801e512:	d402      	bmi.n	801e51a <_vfiprintf_r+0x1fe>
 801e514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e516:	f7ff fe75 	bl	801e204 <__retarget_lock_release_recursive>
 801e51a:	89ab      	ldrh	r3, [r5, #12]
 801e51c:	065b      	lsls	r3, r3, #25
 801e51e:	f53f af1f 	bmi.w	801e360 <_vfiprintf_r+0x44>
 801e522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e524:	e71e      	b.n	801e364 <_vfiprintf_r+0x48>
 801e526:	ab03      	add	r3, sp, #12
 801e528:	9300      	str	r3, [sp, #0]
 801e52a:	462a      	mov	r2, r5
 801e52c:	4b05      	ldr	r3, [pc, #20]	@ (801e544 <_vfiprintf_r+0x228>)
 801e52e:	a904      	add	r1, sp, #16
 801e530:	4630      	mov	r0, r6
 801e532:	f000 f879 	bl	801e628 <_printf_i>
 801e536:	e7e4      	b.n	801e502 <_vfiprintf_r+0x1e6>
 801e538:	0801f918 	.word	0x0801f918
 801e53c:	0801f922 	.word	0x0801f922
 801e540:	00000000 	.word	0x00000000
 801e544:	0801e2f7 	.word	0x0801e2f7
 801e548:	0801f91e 	.word	0x0801f91e

0801e54c <_printf_common>:
 801e54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e550:	4616      	mov	r6, r2
 801e552:	4698      	mov	r8, r3
 801e554:	688a      	ldr	r2, [r1, #8]
 801e556:	690b      	ldr	r3, [r1, #16]
 801e558:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e55c:	4293      	cmp	r3, r2
 801e55e:	bfb8      	it	lt
 801e560:	4613      	movlt	r3, r2
 801e562:	6033      	str	r3, [r6, #0]
 801e564:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e568:	4607      	mov	r7, r0
 801e56a:	460c      	mov	r4, r1
 801e56c:	b10a      	cbz	r2, 801e572 <_printf_common+0x26>
 801e56e:	3301      	adds	r3, #1
 801e570:	6033      	str	r3, [r6, #0]
 801e572:	6823      	ldr	r3, [r4, #0]
 801e574:	0699      	lsls	r1, r3, #26
 801e576:	bf42      	ittt	mi
 801e578:	6833      	ldrmi	r3, [r6, #0]
 801e57a:	3302      	addmi	r3, #2
 801e57c:	6033      	strmi	r3, [r6, #0]
 801e57e:	6825      	ldr	r5, [r4, #0]
 801e580:	f015 0506 	ands.w	r5, r5, #6
 801e584:	d106      	bne.n	801e594 <_printf_common+0x48>
 801e586:	f104 0a19 	add.w	sl, r4, #25
 801e58a:	68e3      	ldr	r3, [r4, #12]
 801e58c:	6832      	ldr	r2, [r6, #0]
 801e58e:	1a9b      	subs	r3, r3, r2
 801e590:	42ab      	cmp	r3, r5
 801e592:	dc26      	bgt.n	801e5e2 <_printf_common+0x96>
 801e594:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e598:	6822      	ldr	r2, [r4, #0]
 801e59a:	3b00      	subs	r3, #0
 801e59c:	bf18      	it	ne
 801e59e:	2301      	movne	r3, #1
 801e5a0:	0692      	lsls	r2, r2, #26
 801e5a2:	d42b      	bmi.n	801e5fc <_printf_common+0xb0>
 801e5a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e5a8:	4641      	mov	r1, r8
 801e5aa:	4638      	mov	r0, r7
 801e5ac:	47c8      	blx	r9
 801e5ae:	3001      	adds	r0, #1
 801e5b0:	d01e      	beq.n	801e5f0 <_printf_common+0xa4>
 801e5b2:	6823      	ldr	r3, [r4, #0]
 801e5b4:	6922      	ldr	r2, [r4, #16]
 801e5b6:	f003 0306 	and.w	r3, r3, #6
 801e5ba:	2b04      	cmp	r3, #4
 801e5bc:	bf02      	ittt	eq
 801e5be:	68e5      	ldreq	r5, [r4, #12]
 801e5c0:	6833      	ldreq	r3, [r6, #0]
 801e5c2:	1aed      	subeq	r5, r5, r3
 801e5c4:	68a3      	ldr	r3, [r4, #8]
 801e5c6:	bf0c      	ite	eq
 801e5c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e5cc:	2500      	movne	r5, #0
 801e5ce:	4293      	cmp	r3, r2
 801e5d0:	bfc4      	itt	gt
 801e5d2:	1a9b      	subgt	r3, r3, r2
 801e5d4:	18ed      	addgt	r5, r5, r3
 801e5d6:	2600      	movs	r6, #0
 801e5d8:	341a      	adds	r4, #26
 801e5da:	42b5      	cmp	r5, r6
 801e5dc:	d11a      	bne.n	801e614 <_printf_common+0xc8>
 801e5de:	2000      	movs	r0, #0
 801e5e0:	e008      	b.n	801e5f4 <_printf_common+0xa8>
 801e5e2:	2301      	movs	r3, #1
 801e5e4:	4652      	mov	r2, sl
 801e5e6:	4641      	mov	r1, r8
 801e5e8:	4638      	mov	r0, r7
 801e5ea:	47c8      	blx	r9
 801e5ec:	3001      	adds	r0, #1
 801e5ee:	d103      	bne.n	801e5f8 <_printf_common+0xac>
 801e5f0:	f04f 30ff 	mov.w	r0, #4294967295
 801e5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e5f8:	3501      	adds	r5, #1
 801e5fa:	e7c6      	b.n	801e58a <_printf_common+0x3e>
 801e5fc:	18e1      	adds	r1, r4, r3
 801e5fe:	1c5a      	adds	r2, r3, #1
 801e600:	2030      	movs	r0, #48	@ 0x30
 801e602:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e606:	4422      	add	r2, r4
 801e608:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e60c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e610:	3302      	adds	r3, #2
 801e612:	e7c7      	b.n	801e5a4 <_printf_common+0x58>
 801e614:	2301      	movs	r3, #1
 801e616:	4622      	mov	r2, r4
 801e618:	4641      	mov	r1, r8
 801e61a:	4638      	mov	r0, r7
 801e61c:	47c8      	blx	r9
 801e61e:	3001      	adds	r0, #1
 801e620:	d0e6      	beq.n	801e5f0 <_printf_common+0xa4>
 801e622:	3601      	adds	r6, #1
 801e624:	e7d9      	b.n	801e5da <_printf_common+0x8e>
	...

0801e628 <_printf_i>:
 801e628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e62c:	7e0f      	ldrb	r7, [r1, #24]
 801e62e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e630:	2f78      	cmp	r7, #120	@ 0x78
 801e632:	4691      	mov	r9, r2
 801e634:	4680      	mov	r8, r0
 801e636:	460c      	mov	r4, r1
 801e638:	469a      	mov	sl, r3
 801e63a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e63e:	d807      	bhi.n	801e650 <_printf_i+0x28>
 801e640:	2f62      	cmp	r7, #98	@ 0x62
 801e642:	d80a      	bhi.n	801e65a <_printf_i+0x32>
 801e644:	2f00      	cmp	r7, #0
 801e646:	f000 80d2 	beq.w	801e7ee <_printf_i+0x1c6>
 801e64a:	2f58      	cmp	r7, #88	@ 0x58
 801e64c:	f000 80b9 	beq.w	801e7c2 <_printf_i+0x19a>
 801e650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e654:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e658:	e03a      	b.n	801e6d0 <_printf_i+0xa8>
 801e65a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e65e:	2b15      	cmp	r3, #21
 801e660:	d8f6      	bhi.n	801e650 <_printf_i+0x28>
 801e662:	a101      	add	r1, pc, #4	@ (adr r1, 801e668 <_printf_i+0x40>)
 801e664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e668:	0801e6c1 	.word	0x0801e6c1
 801e66c:	0801e6d5 	.word	0x0801e6d5
 801e670:	0801e651 	.word	0x0801e651
 801e674:	0801e651 	.word	0x0801e651
 801e678:	0801e651 	.word	0x0801e651
 801e67c:	0801e651 	.word	0x0801e651
 801e680:	0801e6d5 	.word	0x0801e6d5
 801e684:	0801e651 	.word	0x0801e651
 801e688:	0801e651 	.word	0x0801e651
 801e68c:	0801e651 	.word	0x0801e651
 801e690:	0801e651 	.word	0x0801e651
 801e694:	0801e7d5 	.word	0x0801e7d5
 801e698:	0801e6ff 	.word	0x0801e6ff
 801e69c:	0801e78f 	.word	0x0801e78f
 801e6a0:	0801e651 	.word	0x0801e651
 801e6a4:	0801e651 	.word	0x0801e651
 801e6a8:	0801e7f7 	.word	0x0801e7f7
 801e6ac:	0801e651 	.word	0x0801e651
 801e6b0:	0801e6ff 	.word	0x0801e6ff
 801e6b4:	0801e651 	.word	0x0801e651
 801e6b8:	0801e651 	.word	0x0801e651
 801e6bc:	0801e797 	.word	0x0801e797
 801e6c0:	6833      	ldr	r3, [r6, #0]
 801e6c2:	1d1a      	adds	r2, r3, #4
 801e6c4:	681b      	ldr	r3, [r3, #0]
 801e6c6:	6032      	str	r2, [r6, #0]
 801e6c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e6cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e6d0:	2301      	movs	r3, #1
 801e6d2:	e09d      	b.n	801e810 <_printf_i+0x1e8>
 801e6d4:	6833      	ldr	r3, [r6, #0]
 801e6d6:	6820      	ldr	r0, [r4, #0]
 801e6d8:	1d19      	adds	r1, r3, #4
 801e6da:	6031      	str	r1, [r6, #0]
 801e6dc:	0606      	lsls	r6, r0, #24
 801e6de:	d501      	bpl.n	801e6e4 <_printf_i+0xbc>
 801e6e0:	681d      	ldr	r5, [r3, #0]
 801e6e2:	e003      	b.n	801e6ec <_printf_i+0xc4>
 801e6e4:	0645      	lsls	r5, r0, #25
 801e6e6:	d5fb      	bpl.n	801e6e0 <_printf_i+0xb8>
 801e6e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e6ec:	2d00      	cmp	r5, #0
 801e6ee:	da03      	bge.n	801e6f8 <_printf_i+0xd0>
 801e6f0:	232d      	movs	r3, #45	@ 0x2d
 801e6f2:	426d      	negs	r5, r5
 801e6f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e6f8:	4859      	ldr	r0, [pc, #356]	@ (801e860 <_printf_i+0x238>)
 801e6fa:	230a      	movs	r3, #10
 801e6fc:	e011      	b.n	801e722 <_printf_i+0xfa>
 801e6fe:	6821      	ldr	r1, [r4, #0]
 801e700:	6833      	ldr	r3, [r6, #0]
 801e702:	0608      	lsls	r0, r1, #24
 801e704:	f853 5b04 	ldr.w	r5, [r3], #4
 801e708:	d402      	bmi.n	801e710 <_printf_i+0xe8>
 801e70a:	0649      	lsls	r1, r1, #25
 801e70c:	bf48      	it	mi
 801e70e:	b2ad      	uxthmi	r5, r5
 801e710:	2f6f      	cmp	r7, #111	@ 0x6f
 801e712:	4853      	ldr	r0, [pc, #332]	@ (801e860 <_printf_i+0x238>)
 801e714:	6033      	str	r3, [r6, #0]
 801e716:	bf14      	ite	ne
 801e718:	230a      	movne	r3, #10
 801e71a:	2308      	moveq	r3, #8
 801e71c:	2100      	movs	r1, #0
 801e71e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e722:	6866      	ldr	r6, [r4, #4]
 801e724:	60a6      	str	r6, [r4, #8]
 801e726:	2e00      	cmp	r6, #0
 801e728:	bfa2      	ittt	ge
 801e72a:	6821      	ldrge	r1, [r4, #0]
 801e72c:	f021 0104 	bicge.w	r1, r1, #4
 801e730:	6021      	strge	r1, [r4, #0]
 801e732:	b90d      	cbnz	r5, 801e738 <_printf_i+0x110>
 801e734:	2e00      	cmp	r6, #0
 801e736:	d04b      	beq.n	801e7d0 <_printf_i+0x1a8>
 801e738:	4616      	mov	r6, r2
 801e73a:	fbb5 f1f3 	udiv	r1, r5, r3
 801e73e:	fb03 5711 	mls	r7, r3, r1, r5
 801e742:	5dc7      	ldrb	r7, [r0, r7]
 801e744:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e748:	462f      	mov	r7, r5
 801e74a:	42bb      	cmp	r3, r7
 801e74c:	460d      	mov	r5, r1
 801e74e:	d9f4      	bls.n	801e73a <_printf_i+0x112>
 801e750:	2b08      	cmp	r3, #8
 801e752:	d10b      	bne.n	801e76c <_printf_i+0x144>
 801e754:	6823      	ldr	r3, [r4, #0]
 801e756:	07df      	lsls	r7, r3, #31
 801e758:	d508      	bpl.n	801e76c <_printf_i+0x144>
 801e75a:	6923      	ldr	r3, [r4, #16]
 801e75c:	6861      	ldr	r1, [r4, #4]
 801e75e:	4299      	cmp	r1, r3
 801e760:	bfde      	ittt	le
 801e762:	2330      	movle	r3, #48	@ 0x30
 801e764:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e768:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e76c:	1b92      	subs	r2, r2, r6
 801e76e:	6122      	str	r2, [r4, #16]
 801e770:	f8cd a000 	str.w	sl, [sp]
 801e774:	464b      	mov	r3, r9
 801e776:	aa03      	add	r2, sp, #12
 801e778:	4621      	mov	r1, r4
 801e77a:	4640      	mov	r0, r8
 801e77c:	f7ff fee6 	bl	801e54c <_printf_common>
 801e780:	3001      	adds	r0, #1
 801e782:	d14a      	bne.n	801e81a <_printf_i+0x1f2>
 801e784:	f04f 30ff 	mov.w	r0, #4294967295
 801e788:	b004      	add	sp, #16
 801e78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e78e:	6823      	ldr	r3, [r4, #0]
 801e790:	f043 0320 	orr.w	r3, r3, #32
 801e794:	6023      	str	r3, [r4, #0]
 801e796:	4833      	ldr	r0, [pc, #204]	@ (801e864 <_printf_i+0x23c>)
 801e798:	2778      	movs	r7, #120	@ 0x78
 801e79a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e79e:	6823      	ldr	r3, [r4, #0]
 801e7a0:	6831      	ldr	r1, [r6, #0]
 801e7a2:	061f      	lsls	r7, r3, #24
 801e7a4:	f851 5b04 	ldr.w	r5, [r1], #4
 801e7a8:	d402      	bmi.n	801e7b0 <_printf_i+0x188>
 801e7aa:	065f      	lsls	r7, r3, #25
 801e7ac:	bf48      	it	mi
 801e7ae:	b2ad      	uxthmi	r5, r5
 801e7b0:	6031      	str	r1, [r6, #0]
 801e7b2:	07d9      	lsls	r1, r3, #31
 801e7b4:	bf44      	itt	mi
 801e7b6:	f043 0320 	orrmi.w	r3, r3, #32
 801e7ba:	6023      	strmi	r3, [r4, #0]
 801e7bc:	b11d      	cbz	r5, 801e7c6 <_printf_i+0x19e>
 801e7be:	2310      	movs	r3, #16
 801e7c0:	e7ac      	b.n	801e71c <_printf_i+0xf4>
 801e7c2:	4827      	ldr	r0, [pc, #156]	@ (801e860 <_printf_i+0x238>)
 801e7c4:	e7e9      	b.n	801e79a <_printf_i+0x172>
 801e7c6:	6823      	ldr	r3, [r4, #0]
 801e7c8:	f023 0320 	bic.w	r3, r3, #32
 801e7cc:	6023      	str	r3, [r4, #0]
 801e7ce:	e7f6      	b.n	801e7be <_printf_i+0x196>
 801e7d0:	4616      	mov	r6, r2
 801e7d2:	e7bd      	b.n	801e750 <_printf_i+0x128>
 801e7d4:	6833      	ldr	r3, [r6, #0]
 801e7d6:	6825      	ldr	r5, [r4, #0]
 801e7d8:	6961      	ldr	r1, [r4, #20]
 801e7da:	1d18      	adds	r0, r3, #4
 801e7dc:	6030      	str	r0, [r6, #0]
 801e7de:	062e      	lsls	r6, r5, #24
 801e7e0:	681b      	ldr	r3, [r3, #0]
 801e7e2:	d501      	bpl.n	801e7e8 <_printf_i+0x1c0>
 801e7e4:	6019      	str	r1, [r3, #0]
 801e7e6:	e002      	b.n	801e7ee <_printf_i+0x1c6>
 801e7e8:	0668      	lsls	r0, r5, #25
 801e7ea:	d5fb      	bpl.n	801e7e4 <_printf_i+0x1bc>
 801e7ec:	8019      	strh	r1, [r3, #0]
 801e7ee:	2300      	movs	r3, #0
 801e7f0:	6123      	str	r3, [r4, #16]
 801e7f2:	4616      	mov	r6, r2
 801e7f4:	e7bc      	b.n	801e770 <_printf_i+0x148>
 801e7f6:	6833      	ldr	r3, [r6, #0]
 801e7f8:	1d1a      	adds	r2, r3, #4
 801e7fa:	6032      	str	r2, [r6, #0]
 801e7fc:	681e      	ldr	r6, [r3, #0]
 801e7fe:	6862      	ldr	r2, [r4, #4]
 801e800:	2100      	movs	r1, #0
 801e802:	4630      	mov	r0, r6
 801e804:	f7e1 fd7c 	bl	8000300 <memchr>
 801e808:	b108      	cbz	r0, 801e80e <_printf_i+0x1e6>
 801e80a:	1b80      	subs	r0, r0, r6
 801e80c:	6060      	str	r0, [r4, #4]
 801e80e:	6863      	ldr	r3, [r4, #4]
 801e810:	6123      	str	r3, [r4, #16]
 801e812:	2300      	movs	r3, #0
 801e814:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e818:	e7aa      	b.n	801e770 <_printf_i+0x148>
 801e81a:	6923      	ldr	r3, [r4, #16]
 801e81c:	4632      	mov	r2, r6
 801e81e:	4649      	mov	r1, r9
 801e820:	4640      	mov	r0, r8
 801e822:	47d0      	blx	sl
 801e824:	3001      	adds	r0, #1
 801e826:	d0ad      	beq.n	801e784 <_printf_i+0x15c>
 801e828:	6823      	ldr	r3, [r4, #0]
 801e82a:	079b      	lsls	r3, r3, #30
 801e82c:	d413      	bmi.n	801e856 <_printf_i+0x22e>
 801e82e:	68e0      	ldr	r0, [r4, #12]
 801e830:	9b03      	ldr	r3, [sp, #12]
 801e832:	4298      	cmp	r0, r3
 801e834:	bfb8      	it	lt
 801e836:	4618      	movlt	r0, r3
 801e838:	e7a6      	b.n	801e788 <_printf_i+0x160>
 801e83a:	2301      	movs	r3, #1
 801e83c:	4632      	mov	r2, r6
 801e83e:	4649      	mov	r1, r9
 801e840:	4640      	mov	r0, r8
 801e842:	47d0      	blx	sl
 801e844:	3001      	adds	r0, #1
 801e846:	d09d      	beq.n	801e784 <_printf_i+0x15c>
 801e848:	3501      	adds	r5, #1
 801e84a:	68e3      	ldr	r3, [r4, #12]
 801e84c:	9903      	ldr	r1, [sp, #12]
 801e84e:	1a5b      	subs	r3, r3, r1
 801e850:	42ab      	cmp	r3, r5
 801e852:	dcf2      	bgt.n	801e83a <_printf_i+0x212>
 801e854:	e7eb      	b.n	801e82e <_printf_i+0x206>
 801e856:	2500      	movs	r5, #0
 801e858:	f104 0619 	add.w	r6, r4, #25
 801e85c:	e7f5      	b.n	801e84a <_printf_i+0x222>
 801e85e:	bf00      	nop
 801e860:	0801f929 	.word	0x0801f929
 801e864:	0801f93a 	.word	0x0801f93a

0801e868 <__sflush_r>:
 801e868:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e870:	0716      	lsls	r6, r2, #28
 801e872:	4605      	mov	r5, r0
 801e874:	460c      	mov	r4, r1
 801e876:	d454      	bmi.n	801e922 <__sflush_r+0xba>
 801e878:	684b      	ldr	r3, [r1, #4]
 801e87a:	2b00      	cmp	r3, #0
 801e87c:	dc02      	bgt.n	801e884 <__sflush_r+0x1c>
 801e87e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e880:	2b00      	cmp	r3, #0
 801e882:	dd48      	ble.n	801e916 <__sflush_r+0xae>
 801e884:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e886:	2e00      	cmp	r6, #0
 801e888:	d045      	beq.n	801e916 <__sflush_r+0xae>
 801e88a:	2300      	movs	r3, #0
 801e88c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e890:	682f      	ldr	r7, [r5, #0]
 801e892:	6a21      	ldr	r1, [r4, #32]
 801e894:	602b      	str	r3, [r5, #0]
 801e896:	d030      	beq.n	801e8fa <__sflush_r+0x92>
 801e898:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e89a:	89a3      	ldrh	r3, [r4, #12]
 801e89c:	0759      	lsls	r1, r3, #29
 801e89e:	d505      	bpl.n	801e8ac <__sflush_r+0x44>
 801e8a0:	6863      	ldr	r3, [r4, #4]
 801e8a2:	1ad2      	subs	r2, r2, r3
 801e8a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e8a6:	b10b      	cbz	r3, 801e8ac <__sflush_r+0x44>
 801e8a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e8aa:	1ad2      	subs	r2, r2, r3
 801e8ac:	2300      	movs	r3, #0
 801e8ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e8b0:	6a21      	ldr	r1, [r4, #32]
 801e8b2:	4628      	mov	r0, r5
 801e8b4:	47b0      	blx	r6
 801e8b6:	1c43      	adds	r3, r0, #1
 801e8b8:	89a3      	ldrh	r3, [r4, #12]
 801e8ba:	d106      	bne.n	801e8ca <__sflush_r+0x62>
 801e8bc:	6829      	ldr	r1, [r5, #0]
 801e8be:	291d      	cmp	r1, #29
 801e8c0:	d82b      	bhi.n	801e91a <__sflush_r+0xb2>
 801e8c2:	4a2a      	ldr	r2, [pc, #168]	@ (801e96c <__sflush_r+0x104>)
 801e8c4:	410a      	asrs	r2, r1
 801e8c6:	07d6      	lsls	r6, r2, #31
 801e8c8:	d427      	bmi.n	801e91a <__sflush_r+0xb2>
 801e8ca:	2200      	movs	r2, #0
 801e8cc:	6062      	str	r2, [r4, #4]
 801e8ce:	04d9      	lsls	r1, r3, #19
 801e8d0:	6922      	ldr	r2, [r4, #16]
 801e8d2:	6022      	str	r2, [r4, #0]
 801e8d4:	d504      	bpl.n	801e8e0 <__sflush_r+0x78>
 801e8d6:	1c42      	adds	r2, r0, #1
 801e8d8:	d101      	bne.n	801e8de <__sflush_r+0x76>
 801e8da:	682b      	ldr	r3, [r5, #0]
 801e8dc:	b903      	cbnz	r3, 801e8e0 <__sflush_r+0x78>
 801e8de:	6560      	str	r0, [r4, #84]	@ 0x54
 801e8e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e8e2:	602f      	str	r7, [r5, #0]
 801e8e4:	b1b9      	cbz	r1, 801e916 <__sflush_r+0xae>
 801e8e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e8ea:	4299      	cmp	r1, r3
 801e8ec:	d002      	beq.n	801e8f4 <__sflush_r+0x8c>
 801e8ee:	4628      	mov	r0, r5
 801e8f0:	f7ff fc98 	bl	801e224 <_free_r>
 801e8f4:	2300      	movs	r3, #0
 801e8f6:	6363      	str	r3, [r4, #52]	@ 0x34
 801e8f8:	e00d      	b.n	801e916 <__sflush_r+0xae>
 801e8fa:	2301      	movs	r3, #1
 801e8fc:	4628      	mov	r0, r5
 801e8fe:	47b0      	blx	r6
 801e900:	4602      	mov	r2, r0
 801e902:	1c50      	adds	r0, r2, #1
 801e904:	d1c9      	bne.n	801e89a <__sflush_r+0x32>
 801e906:	682b      	ldr	r3, [r5, #0]
 801e908:	2b00      	cmp	r3, #0
 801e90a:	d0c6      	beq.n	801e89a <__sflush_r+0x32>
 801e90c:	2b1d      	cmp	r3, #29
 801e90e:	d001      	beq.n	801e914 <__sflush_r+0xac>
 801e910:	2b16      	cmp	r3, #22
 801e912:	d11e      	bne.n	801e952 <__sflush_r+0xea>
 801e914:	602f      	str	r7, [r5, #0]
 801e916:	2000      	movs	r0, #0
 801e918:	e022      	b.n	801e960 <__sflush_r+0xf8>
 801e91a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e91e:	b21b      	sxth	r3, r3
 801e920:	e01b      	b.n	801e95a <__sflush_r+0xf2>
 801e922:	690f      	ldr	r7, [r1, #16]
 801e924:	2f00      	cmp	r7, #0
 801e926:	d0f6      	beq.n	801e916 <__sflush_r+0xae>
 801e928:	0793      	lsls	r3, r2, #30
 801e92a:	680e      	ldr	r6, [r1, #0]
 801e92c:	bf08      	it	eq
 801e92e:	694b      	ldreq	r3, [r1, #20]
 801e930:	600f      	str	r7, [r1, #0]
 801e932:	bf18      	it	ne
 801e934:	2300      	movne	r3, #0
 801e936:	eba6 0807 	sub.w	r8, r6, r7
 801e93a:	608b      	str	r3, [r1, #8]
 801e93c:	f1b8 0f00 	cmp.w	r8, #0
 801e940:	dde9      	ble.n	801e916 <__sflush_r+0xae>
 801e942:	6a21      	ldr	r1, [r4, #32]
 801e944:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e946:	4643      	mov	r3, r8
 801e948:	463a      	mov	r2, r7
 801e94a:	4628      	mov	r0, r5
 801e94c:	47b0      	blx	r6
 801e94e:	2800      	cmp	r0, #0
 801e950:	dc08      	bgt.n	801e964 <__sflush_r+0xfc>
 801e952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e95a:	81a3      	strh	r3, [r4, #12]
 801e95c:	f04f 30ff 	mov.w	r0, #4294967295
 801e960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e964:	4407      	add	r7, r0
 801e966:	eba8 0800 	sub.w	r8, r8, r0
 801e96a:	e7e7      	b.n	801e93c <__sflush_r+0xd4>
 801e96c:	dfbffffe 	.word	0xdfbffffe

0801e970 <_fflush_r>:
 801e970:	b538      	push	{r3, r4, r5, lr}
 801e972:	690b      	ldr	r3, [r1, #16]
 801e974:	4605      	mov	r5, r0
 801e976:	460c      	mov	r4, r1
 801e978:	b913      	cbnz	r3, 801e980 <_fflush_r+0x10>
 801e97a:	2500      	movs	r5, #0
 801e97c:	4628      	mov	r0, r5
 801e97e:	bd38      	pop	{r3, r4, r5, pc}
 801e980:	b118      	cbz	r0, 801e98a <_fflush_r+0x1a>
 801e982:	6a03      	ldr	r3, [r0, #32]
 801e984:	b90b      	cbnz	r3, 801e98a <_fflush_r+0x1a>
 801e986:	f7ff f9cf 	bl	801dd28 <__sinit>
 801e98a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e98e:	2b00      	cmp	r3, #0
 801e990:	d0f3      	beq.n	801e97a <_fflush_r+0xa>
 801e992:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e994:	07d0      	lsls	r0, r2, #31
 801e996:	d404      	bmi.n	801e9a2 <_fflush_r+0x32>
 801e998:	0599      	lsls	r1, r3, #22
 801e99a:	d402      	bmi.n	801e9a2 <_fflush_r+0x32>
 801e99c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e99e:	f7ff fc30 	bl	801e202 <__retarget_lock_acquire_recursive>
 801e9a2:	4628      	mov	r0, r5
 801e9a4:	4621      	mov	r1, r4
 801e9a6:	f7ff ff5f 	bl	801e868 <__sflush_r>
 801e9aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e9ac:	07da      	lsls	r2, r3, #31
 801e9ae:	4605      	mov	r5, r0
 801e9b0:	d4e4      	bmi.n	801e97c <_fflush_r+0xc>
 801e9b2:	89a3      	ldrh	r3, [r4, #12]
 801e9b4:	059b      	lsls	r3, r3, #22
 801e9b6:	d4e1      	bmi.n	801e97c <_fflush_r+0xc>
 801e9b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e9ba:	f7ff fc23 	bl	801e204 <__retarget_lock_release_recursive>
 801e9be:	e7dd      	b.n	801e97c <_fflush_r+0xc>

0801e9c0 <__swhatbuf_r>:
 801e9c0:	b570      	push	{r4, r5, r6, lr}
 801e9c2:	460c      	mov	r4, r1
 801e9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e9c8:	2900      	cmp	r1, #0
 801e9ca:	b096      	sub	sp, #88	@ 0x58
 801e9cc:	4615      	mov	r5, r2
 801e9ce:	461e      	mov	r6, r3
 801e9d0:	da0d      	bge.n	801e9ee <__swhatbuf_r+0x2e>
 801e9d2:	89a3      	ldrh	r3, [r4, #12]
 801e9d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e9d8:	f04f 0100 	mov.w	r1, #0
 801e9dc:	bf14      	ite	ne
 801e9de:	2340      	movne	r3, #64	@ 0x40
 801e9e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e9e4:	2000      	movs	r0, #0
 801e9e6:	6031      	str	r1, [r6, #0]
 801e9e8:	602b      	str	r3, [r5, #0]
 801e9ea:	b016      	add	sp, #88	@ 0x58
 801e9ec:	bd70      	pop	{r4, r5, r6, pc}
 801e9ee:	466a      	mov	r2, sp
 801e9f0:	f000 f87c 	bl	801eaec <_fstat_r>
 801e9f4:	2800      	cmp	r0, #0
 801e9f6:	dbec      	blt.n	801e9d2 <__swhatbuf_r+0x12>
 801e9f8:	9901      	ldr	r1, [sp, #4]
 801e9fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e9fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ea02:	4259      	negs	r1, r3
 801ea04:	4159      	adcs	r1, r3
 801ea06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ea0a:	e7eb      	b.n	801e9e4 <__swhatbuf_r+0x24>

0801ea0c <__smakebuf_r>:
 801ea0c:	898b      	ldrh	r3, [r1, #12]
 801ea0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ea10:	079d      	lsls	r5, r3, #30
 801ea12:	4606      	mov	r6, r0
 801ea14:	460c      	mov	r4, r1
 801ea16:	d507      	bpl.n	801ea28 <__smakebuf_r+0x1c>
 801ea18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ea1c:	6023      	str	r3, [r4, #0]
 801ea1e:	6123      	str	r3, [r4, #16]
 801ea20:	2301      	movs	r3, #1
 801ea22:	6163      	str	r3, [r4, #20]
 801ea24:	b003      	add	sp, #12
 801ea26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea28:	ab01      	add	r3, sp, #4
 801ea2a:	466a      	mov	r2, sp
 801ea2c:	f7ff ffc8 	bl	801e9c0 <__swhatbuf_r>
 801ea30:	9f00      	ldr	r7, [sp, #0]
 801ea32:	4605      	mov	r5, r0
 801ea34:	4639      	mov	r1, r7
 801ea36:	4630      	mov	r0, r6
 801ea38:	f7ff f828 	bl	801da8c <_malloc_r>
 801ea3c:	b948      	cbnz	r0, 801ea52 <__smakebuf_r+0x46>
 801ea3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ea42:	059a      	lsls	r2, r3, #22
 801ea44:	d4ee      	bmi.n	801ea24 <__smakebuf_r+0x18>
 801ea46:	f023 0303 	bic.w	r3, r3, #3
 801ea4a:	f043 0302 	orr.w	r3, r3, #2
 801ea4e:	81a3      	strh	r3, [r4, #12]
 801ea50:	e7e2      	b.n	801ea18 <__smakebuf_r+0xc>
 801ea52:	89a3      	ldrh	r3, [r4, #12]
 801ea54:	6020      	str	r0, [r4, #0]
 801ea56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ea5a:	81a3      	strh	r3, [r4, #12]
 801ea5c:	9b01      	ldr	r3, [sp, #4]
 801ea5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ea62:	b15b      	cbz	r3, 801ea7c <__smakebuf_r+0x70>
 801ea64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ea68:	4630      	mov	r0, r6
 801ea6a:	f000 f851 	bl	801eb10 <_isatty_r>
 801ea6e:	b128      	cbz	r0, 801ea7c <__smakebuf_r+0x70>
 801ea70:	89a3      	ldrh	r3, [r4, #12]
 801ea72:	f023 0303 	bic.w	r3, r3, #3
 801ea76:	f043 0301 	orr.w	r3, r3, #1
 801ea7a:	81a3      	strh	r3, [r4, #12]
 801ea7c:	89a3      	ldrh	r3, [r4, #12]
 801ea7e:	431d      	orrs	r5, r3
 801ea80:	81a5      	strh	r5, [r4, #12]
 801ea82:	e7cf      	b.n	801ea24 <__smakebuf_r+0x18>

0801ea84 <_putc_r>:
 801ea84:	b570      	push	{r4, r5, r6, lr}
 801ea86:	460d      	mov	r5, r1
 801ea88:	4614      	mov	r4, r2
 801ea8a:	4606      	mov	r6, r0
 801ea8c:	b118      	cbz	r0, 801ea96 <_putc_r+0x12>
 801ea8e:	6a03      	ldr	r3, [r0, #32]
 801ea90:	b90b      	cbnz	r3, 801ea96 <_putc_r+0x12>
 801ea92:	f7ff f949 	bl	801dd28 <__sinit>
 801ea96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ea98:	07d8      	lsls	r0, r3, #31
 801ea9a:	d405      	bmi.n	801eaa8 <_putc_r+0x24>
 801ea9c:	89a3      	ldrh	r3, [r4, #12]
 801ea9e:	0599      	lsls	r1, r3, #22
 801eaa0:	d402      	bmi.n	801eaa8 <_putc_r+0x24>
 801eaa2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801eaa4:	f7ff fbad 	bl	801e202 <__retarget_lock_acquire_recursive>
 801eaa8:	68a3      	ldr	r3, [r4, #8]
 801eaaa:	3b01      	subs	r3, #1
 801eaac:	2b00      	cmp	r3, #0
 801eaae:	60a3      	str	r3, [r4, #8]
 801eab0:	da05      	bge.n	801eabe <_putc_r+0x3a>
 801eab2:	69a2      	ldr	r2, [r4, #24]
 801eab4:	4293      	cmp	r3, r2
 801eab6:	db12      	blt.n	801eade <_putc_r+0x5a>
 801eab8:	b2eb      	uxtb	r3, r5
 801eaba:	2b0a      	cmp	r3, #10
 801eabc:	d00f      	beq.n	801eade <_putc_r+0x5a>
 801eabe:	6823      	ldr	r3, [r4, #0]
 801eac0:	1c5a      	adds	r2, r3, #1
 801eac2:	6022      	str	r2, [r4, #0]
 801eac4:	701d      	strb	r5, [r3, #0]
 801eac6:	b2ed      	uxtb	r5, r5
 801eac8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801eaca:	07da      	lsls	r2, r3, #31
 801eacc:	d405      	bmi.n	801eada <_putc_r+0x56>
 801eace:	89a3      	ldrh	r3, [r4, #12]
 801ead0:	059b      	lsls	r3, r3, #22
 801ead2:	d402      	bmi.n	801eada <_putc_r+0x56>
 801ead4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ead6:	f7ff fb95 	bl	801e204 <__retarget_lock_release_recursive>
 801eada:	4628      	mov	r0, r5
 801eadc:	bd70      	pop	{r4, r5, r6, pc}
 801eade:	4629      	mov	r1, r5
 801eae0:	4622      	mov	r2, r4
 801eae2:	4630      	mov	r0, r6
 801eae4:	f7ff fa11 	bl	801df0a <__swbuf_r>
 801eae8:	4605      	mov	r5, r0
 801eaea:	e7ed      	b.n	801eac8 <_putc_r+0x44>

0801eaec <_fstat_r>:
 801eaec:	b538      	push	{r3, r4, r5, lr}
 801eaee:	4d07      	ldr	r5, [pc, #28]	@ (801eb0c <_fstat_r+0x20>)
 801eaf0:	2300      	movs	r3, #0
 801eaf2:	4604      	mov	r4, r0
 801eaf4:	4608      	mov	r0, r1
 801eaf6:	4611      	mov	r1, r2
 801eaf8:	602b      	str	r3, [r5, #0]
 801eafa:	f7ec fff9 	bl	800baf0 <_fstat>
 801eafe:	1c43      	adds	r3, r0, #1
 801eb00:	d102      	bne.n	801eb08 <_fstat_r+0x1c>
 801eb02:	682b      	ldr	r3, [r5, #0]
 801eb04:	b103      	cbz	r3, 801eb08 <_fstat_r+0x1c>
 801eb06:	6023      	str	r3, [r4, #0]
 801eb08:	bd38      	pop	{r3, r4, r5, pc}
 801eb0a:	bf00      	nop
 801eb0c:	24000c04 	.word	0x24000c04

0801eb10 <_isatty_r>:
 801eb10:	b538      	push	{r3, r4, r5, lr}
 801eb12:	4d06      	ldr	r5, [pc, #24]	@ (801eb2c <_isatty_r+0x1c>)
 801eb14:	2300      	movs	r3, #0
 801eb16:	4604      	mov	r4, r0
 801eb18:	4608      	mov	r0, r1
 801eb1a:	602b      	str	r3, [r5, #0]
 801eb1c:	f7ec fff8 	bl	800bb10 <_isatty>
 801eb20:	1c43      	adds	r3, r0, #1
 801eb22:	d102      	bne.n	801eb2a <_isatty_r+0x1a>
 801eb24:	682b      	ldr	r3, [r5, #0]
 801eb26:	b103      	cbz	r3, 801eb2a <_isatty_r+0x1a>
 801eb28:	6023      	str	r3, [r4, #0]
 801eb2a:	bd38      	pop	{r3, r4, r5, pc}
 801eb2c:	24000c04 	.word	0x24000c04

0801eb30 <_init>:
 801eb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb32:	bf00      	nop
 801eb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb36:	bc08      	pop	{r3}
 801eb38:	469e      	mov	lr, r3
 801eb3a:	4770      	bx	lr

0801eb3c <_fini>:
 801eb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb3e:	bf00      	nop
 801eb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb42:	bc08      	pop	{r3}
 801eb44:	469e      	mov	lr, r3
 801eb46:	4770      	bx	lr
