
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d88  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e8  08014028  08014028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014910  08014910  00015910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08014918  08014918  00015918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08014920  08014920  00015920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000bc  24000000  08014928  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c4c  240000c0  080149e4  000160c0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24000d0c  080149e4  00016d0c  2**0
                  ALLOC
  9 .dma_buffers  00000140  30000000  00000000  00001000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000160bc  2**0
                  CONTENTS, READONLY
 11 .debug_info   00058bd1  00000000  00000000  000160ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00007d6c  00000000  00000000  0006ecbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001ea0  00000000  00000000  00076a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000177f  00000000  00000000  000788c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004330b  00000000  00000000  0007a047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003408a  00000000  00000000  000bd352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001829bd  00000000  00000000  000f13dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00273d99  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a1f0  00000000  00000000  00273ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000069  00000000  00000000  0027dfcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000c0 	.word	0x240000c0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014010 	.word	0x08014010

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000c4 	.word	0x240000c4
 80002dc:	08014010 	.word	0x08014010

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b97e 	b.w	8000a3c <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f81a 	bl	8000780 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__popcountsi2>:
 8000758:	0843      	lsrs	r3, r0, #1
 800075a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 800075e:	1ac0      	subs	r0, r0, r3
 8000760:	0883      	lsrs	r3, r0, #2
 8000762:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000766:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 800076a:	4418      	add	r0, r3
 800076c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000770:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8000774:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000778:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 800077c:	0e00      	lsrs	r0, r0, #24
 800077e:	4770      	bx	lr

08000780 <__udivmoddi4>:
 8000780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000784:	9d08      	ldr	r5, [sp, #32]
 8000786:	460c      	mov	r4, r1
 8000788:	2b00      	cmp	r3, #0
 800078a:	d14e      	bne.n	800082a <__udivmoddi4+0xaa>
 800078c:	4694      	mov	ip, r2
 800078e:	458c      	cmp	ip, r1
 8000790:	4686      	mov	lr, r0
 8000792:	fab2 f282 	clz	r2, r2
 8000796:	d962      	bls.n	800085e <__udivmoddi4+0xde>
 8000798:	b14a      	cbz	r2, 80007ae <__udivmoddi4+0x2e>
 800079a:	f1c2 0320 	rsb	r3, r2, #32
 800079e:	4091      	lsls	r1, r2
 80007a0:	fa20 f303 	lsr.w	r3, r0, r3
 80007a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80007a8:	4319      	orrs	r1, r3
 80007aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80007ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007b2:	fa1f f68c 	uxth.w	r6, ip
 80007b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80007ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007be:	fb07 1114 	mls	r1, r7, r4, r1
 80007c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007c6:	fb04 f106 	mul.w	r1, r4, r6
 80007ca:	4299      	cmp	r1, r3
 80007cc:	d90a      	bls.n	80007e4 <__udivmoddi4+0x64>
 80007ce:	eb1c 0303 	adds.w	r3, ip, r3
 80007d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80007d6:	f080 8112 	bcs.w	80009fe <__udivmoddi4+0x27e>
 80007da:	4299      	cmp	r1, r3
 80007dc:	f240 810f 	bls.w	80009fe <__udivmoddi4+0x27e>
 80007e0:	3c02      	subs	r4, #2
 80007e2:	4463      	add	r3, ip
 80007e4:	1a59      	subs	r1, r3, r1
 80007e6:	fa1f f38e 	uxth.w	r3, lr
 80007ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80007ee:	fb07 1110 	mls	r1, r7, r0, r1
 80007f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007f6:	fb00 f606 	mul.w	r6, r0, r6
 80007fa:	429e      	cmp	r6, r3
 80007fc:	d90a      	bls.n	8000814 <__udivmoddi4+0x94>
 80007fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000802:	f100 31ff 	add.w	r1, r0, #4294967295
 8000806:	f080 80fc 	bcs.w	8000a02 <__udivmoddi4+0x282>
 800080a:	429e      	cmp	r6, r3
 800080c:	f240 80f9 	bls.w	8000a02 <__udivmoddi4+0x282>
 8000810:	4463      	add	r3, ip
 8000812:	3802      	subs	r0, #2
 8000814:	1b9b      	subs	r3, r3, r6
 8000816:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800081a:	2100      	movs	r1, #0
 800081c:	b11d      	cbz	r5, 8000826 <__udivmoddi4+0xa6>
 800081e:	40d3      	lsrs	r3, r2
 8000820:	2200      	movs	r2, #0
 8000822:	e9c5 3200 	strd	r3, r2, [r5]
 8000826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800082a:	428b      	cmp	r3, r1
 800082c:	d905      	bls.n	800083a <__udivmoddi4+0xba>
 800082e:	b10d      	cbz	r5, 8000834 <__udivmoddi4+0xb4>
 8000830:	e9c5 0100 	strd	r0, r1, [r5]
 8000834:	2100      	movs	r1, #0
 8000836:	4608      	mov	r0, r1
 8000838:	e7f5      	b.n	8000826 <__udivmoddi4+0xa6>
 800083a:	fab3 f183 	clz	r1, r3
 800083e:	2900      	cmp	r1, #0
 8000840:	d146      	bne.n	80008d0 <__udivmoddi4+0x150>
 8000842:	42a3      	cmp	r3, r4
 8000844:	d302      	bcc.n	800084c <__udivmoddi4+0xcc>
 8000846:	4290      	cmp	r0, r2
 8000848:	f0c0 80f0 	bcc.w	8000a2c <__udivmoddi4+0x2ac>
 800084c:	1a86      	subs	r6, r0, r2
 800084e:	eb64 0303 	sbc.w	r3, r4, r3
 8000852:	2001      	movs	r0, #1
 8000854:	2d00      	cmp	r5, #0
 8000856:	d0e6      	beq.n	8000826 <__udivmoddi4+0xa6>
 8000858:	e9c5 6300 	strd	r6, r3, [r5]
 800085c:	e7e3      	b.n	8000826 <__udivmoddi4+0xa6>
 800085e:	2a00      	cmp	r2, #0
 8000860:	f040 8090 	bne.w	8000984 <__udivmoddi4+0x204>
 8000864:	eba1 040c 	sub.w	r4, r1, ip
 8000868:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800086c:	fa1f f78c 	uxth.w	r7, ip
 8000870:	2101      	movs	r1, #1
 8000872:	fbb4 f6f8 	udiv	r6, r4, r8
 8000876:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800087a:	fb08 4416 	mls	r4, r8, r6, r4
 800087e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000882:	fb07 f006 	mul.w	r0, r7, r6
 8000886:	4298      	cmp	r0, r3
 8000888:	d908      	bls.n	800089c <__udivmoddi4+0x11c>
 800088a:	eb1c 0303 	adds.w	r3, ip, r3
 800088e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000892:	d202      	bcs.n	800089a <__udivmoddi4+0x11a>
 8000894:	4298      	cmp	r0, r3
 8000896:	f200 80cd 	bhi.w	8000a34 <__udivmoddi4+0x2b4>
 800089a:	4626      	mov	r6, r4
 800089c:	1a1c      	subs	r4, r3, r0
 800089e:	fa1f f38e 	uxth.w	r3, lr
 80008a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80008a6:	fb08 4410 	mls	r4, r8, r0, r4
 80008aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ae:	fb00 f707 	mul.w	r7, r0, r7
 80008b2:	429f      	cmp	r7, r3
 80008b4:	d908      	bls.n	80008c8 <__udivmoddi4+0x148>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80008be:	d202      	bcs.n	80008c6 <__udivmoddi4+0x146>
 80008c0:	429f      	cmp	r7, r3
 80008c2:	f200 80b0 	bhi.w	8000a26 <__udivmoddi4+0x2a6>
 80008c6:	4620      	mov	r0, r4
 80008c8:	1bdb      	subs	r3, r3, r7
 80008ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008ce:	e7a5      	b.n	800081c <__udivmoddi4+0x9c>
 80008d0:	f1c1 0620 	rsb	r6, r1, #32
 80008d4:	408b      	lsls	r3, r1
 80008d6:	fa22 f706 	lsr.w	r7, r2, r6
 80008da:	431f      	orrs	r7, r3
 80008dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80008e0:	fa04 f301 	lsl.w	r3, r4, r1
 80008e4:	ea43 030c 	orr.w	r3, r3, ip
 80008e8:	40f4      	lsrs	r4, r6
 80008ea:	fa00 f801 	lsl.w	r8, r0, r1
 80008ee:	0c38      	lsrs	r0, r7, #16
 80008f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008f4:	fbb4 fef0 	udiv	lr, r4, r0
 80008f8:	fa1f fc87 	uxth.w	ip, r7
 80008fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000900:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000904:	fb0e f90c 	mul.w	r9, lr, ip
 8000908:	45a1      	cmp	r9, r4
 800090a:	fa02 f201 	lsl.w	r2, r2, r1
 800090e:	d90a      	bls.n	8000926 <__udivmoddi4+0x1a6>
 8000910:	193c      	adds	r4, r7, r4
 8000912:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000916:	f080 8084 	bcs.w	8000a22 <__udivmoddi4+0x2a2>
 800091a:	45a1      	cmp	r9, r4
 800091c:	f240 8081 	bls.w	8000a22 <__udivmoddi4+0x2a2>
 8000920:	f1ae 0e02 	sub.w	lr, lr, #2
 8000924:	443c      	add	r4, r7
 8000926:	eba4 0409 	sub.w	r4, r4, r9
 800092a:	fa1f f983 	uxth.w	r9, r3
 800092e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000932:	fb00 4413 	mls	r4, r0, r3, r4
 8000936:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800093a:	fb03 fc0c 	mul.w	ip, r3, ip
 800093e:	45a4      	cmp	ip, r4
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x1d2>
 8000942:	193c      	adds	r4, r7, r4
 8000944:	f103 30ff 	add.w	r0, r3, #4294967295
 8000948:	d267      	bcs.n	8000a1a <__udivmoddi4+0x29a>
 800094a:	45a4      	cmp	ip, r4
 800094c:	d965      	bls.n	8000a1a <__udivmoddi4+0x29a>
 800094e:	3b02      	subs	r3, #2
 8000950:	443c      	add	r4, r7
 8000952:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000956:	fba0 9302 	umull	r9, r3, r0, r2
 800095a:	eba4 040c 	sub.w	r4, r4, ip
 800095e:	429c      	cmp	r4, r3
 8000960:	46ce      	mov	lr, r9
 8000962:	469c      	mov	ip, r3
 8000964:	d351      	bcc.n	8000a0a <__udivmoddi4+0x28a>
 8000966:	d04e      	beq.n	8000a06 <__udivmoddi4+0x286>
 8000968:	b155      	cbz	r5, 8000980 <__udivmoddi4+0x200>
 800096a:	ebb8 030e 	subs.w	r3, r8, lr
 800096e:	eb64 040c 	sbc.w	r4, r4, ip
 8000972:	fa04 f606 	lsl.w	r6, r4, r6
 8000976:	40cb      	lsrs	r3, r1
 8000978:	431e      	orrs	r6, r3
 800097a:	40cc      	lsrs	r4, r1
 800097c:	e9c5 6400 	strd	r6, r4, [r5]
 8000980:	2100      	movs	r1, #0
 8000982:	e750      	b.n	8000826 <__udivmoddi4+0xa6>
 8000984:	f1c2 0320 	rsb	r3, r2, #32
 8000988:	fa20 f103 	lsr.w	r1, r0, r3
 800098c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000990:	fa24 f303 	lsr.w	r3, r4, r3
 8000994:	4094      	lsls	r4, r2
 8000996:	430c      	orrs	r4, r1
 8000998:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800099c:	fa00 fe02 	lsl.w	lr, r0, r2
 80009a0:	fa1f f78c 	uxth.w	r7, ip
 80009a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009a8:	fb08 3110 	mls	r1, r8, r0, r3
 80009ac:	0c23      	lsrs	r3, r4, #16
 80009ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009b2:	fb00 f107 	mul.w	r1, r0, r7
 80009b6:	4299      	cmp	r1, r3
 80009b8:	d908      	bls.n	80009cc <__udivmoddi4+0x24c>
 80009ba:	eb1c 0303 	adds.w	r3, ip, r3
 80009be:	f100 36ff 	add.w	r6, r0, #4294967295
 80009c2:	d22c      	bcs.n	8000a1e <__udivmoddi4+0x29e>
 80009c4:	4299      	cmp	r1, r3
 80009c6:	d92a      	bls.n	8000a1e <__udivmoddi4+0x29e>
 80009c8:	3802      	subs	r0, #2
 80009ca:	4463      	add	r3, ip
 80009cc:	1a5b      	subs	r3, r3, r1
 80009ce:	b2a4      	uxth	r4, r4
 80009d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80009d4:	fb08 3311 	mls	r3, r8, r1, r3
 80009d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009dc:	fb01 f307 	mul.w	r3, r1, r7
 80009e0:	42a3      	cmp	r3, r4
 80009e2:	d908      	bls.n	80009f6 <__udivmoddi4+0x276>
 80009e4:	eb1c 0404 	adds.w	r4, ip, r4
 80009e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80009ec:	d213      	bcs.n	8000a16 <__udivmoddi4+0x296>
 80009ee:	42a3      	cmp	r3, r4
 80009f0:	d911      	bls.n	8000a16 <__udivmoddi4+0x296>
 80009f2:	3902      	subs	r1, #2
 80009f4:	4464      	add	r4, ip
 80009f6:	1ae4      	subs	r4, r4, r3
 80009f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009fc:	e739      	b.n	8000872 <__udivmoddi4+0xf2>
 80009fe:	4604      	mov	r4, r0
 8000a00:	e6f0      	b.n	80007e4 <__udivmoddi4+0x64>
 8000a02:	4608      	mov	r0, r1
 8000a04:	e706      	b.n	8000814 <__udivmoddi4+0x94>
 8000a06:	45c8      	cmp	r8, r9
 8000a08:	d2ae      	bcs.n	8000968 <__udivmoddi4+0x1e8>
 8000a0a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a0e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a12:	3801      	subs	r0, #1
 8000a14:	e7a8      	b.n	8000968 <__udivmoddi4+0x1e8>
 8000a16:	4631      	mov	r1, r6
 8000a18:	e7ed      	b.n	80009f6 <__udivmoddi4+0x276>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	e799      	b.n	8000952 <__udivmoddi4+0x1d2>
 8000a1e:	4630      	mov	r0, r6
 8000a20:	e7d4      	b.n	80009cc <__udivmoddi4+0x24c>
 8000a22:	46d6      	mov	lr, sl
 8000a24:	e77f      	b.n	8000926 <__udivmoddi4+0x1a6>
 8000a26:	4463      	add	r3, ip
 8000a28:	3802      	subs	r0, #2
 8000a2a:	e74d      	b.n	80008c8 <__udivmoddi4+0x148>
 8000a2c:	4606      	mov	r6, r0
 8000a2e:	4623      	mov	r3, r4
 8000a30:	4608      	mov	r0, r1
 8000a32:	e70f      	b.n	8000854 <__udivmoddi4+0xd4>
 8000a34:	3e02      	subs	r6, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	e730      	b.n	800089c <__udivmoddi4+0x11c>
 8000a3a:	bf00      	nop

08000a3c <__aeabi_idiv0>:
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>:
#include <cstdio>
#include <cerrno>
#include <string>


Pin::Pin(std::string portAndPin, int dir) :
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
    portAndPin(portAndPin),
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	68b9      	ldr	r1, [r7, #8]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f012 fa1e 	bl	8012e92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    dir(dir)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	761a      	strb	r2, [r3, #24]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	3330      	adds	r3, #48	@ 0x30
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
{
    // Set direction
    if (this->dir == INPUT)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	7e1b      	ldrb	r3, [r3, #24]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d106      	bne.n	8000a84 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x44>
    {
        this->mode = GPIO_MODE_INPUT;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	@ 0x24
 8000a82:	e005      	b.n	8000a90 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x50>
    }
    else
    {
        this->mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2201      	movs	r2, #1
 8000a88:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    this->configPin();
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	f000 f805 	bl	8000aa0 <_ZN3Pin9configPinEv>
}
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <_ZN3Pin9configPinEv>:

    this->configPin();
}

void Pin::configPin()
{
 8000aa0:	b5b0      	push	{r4, r5, r7, lr}
 8000aa2:	b08e      	sub	sp, #56	@ 0x38
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
    printf("Creating Pin @\n");
 8000aa8:	4868      	ldr	r0, [pc, #416]	@ (8000c4c <_ZN3Pin9configPinEv+0x1ac>)
 8000aaa:	f012 fc5b 	bl	8013364 <puts>

    //x can be (A..H) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
    GPIO_TypeDef* gpios[5] ={GPIOA,GPIOB,GPIOC,GPIOD,GPIOE};
 8000aae:	4b68      	ldr	r3, [pc, #416]	@ (8000c50 <_ZN3Pin9configPinEv+0x1b0>)
 8000ab0:	f107 0420 	add.w	r4, r7, #32
 8000ab4:	461d      	mov	r5, r3
 8000ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aba:	682b      	ldr	r3, [r5, #0]
 8000abc:	6023      	str	r3, [r4, #0]
    

    if (this->portAndPin[0] == 'P') // PXXX e.g.PA_2 PC_15
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f012 f97b 	bl	8012dbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b50      	cmp	r3, #80	@ 0x50
 8000ace:	bf0c      	ite	eq
 8000ad0:	2301      	moveq	r3, #1
 8000ad2:	2300      	movne	r3, #0
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d05e      	beq.n	8000b98 <_ZN3Pin9configPinEv+0xf8>
    {  
        this->portIndex     = this->portAndPin[1] - 'A';
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2101      	movs	r1, #1
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f012 f96d 	bl	8012dbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	3b41      	subs	r3, #65	@ 0x41
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	769a      	strb	r2, [r3, #26]
        this->pinNumber     = this->portAndPin[3] - '0';       
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2103      	movs	r1, #3
 8000af4:	4618      	mov	r0, r3
 8000af6:	f012 f962 	bl	8012dbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000afa:	4603      	mov	r3, r0
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	3b30      	subs	r3, #48	@ 0x30
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	839a      	strh	r2, [r3, #28]
        uint16_t pin2       = this->portAndPin[4] - '0';       
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2104      	movs	r1, #4
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f012 f957 	bl	8012dbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000b10:	4603      	mov	r3, r0
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	3b30      	subs	r3, #48	@ 0x30
 8000b16:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if (pin2 <= 8) 
 8000b18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000b1a:	2b08      	cmp	r3, #8
 8000b1c:	d80b      	bhi.n	8000b36 <_ZN3Pin9configPinEv+0x96>
        {
            this->pinNumber = this->pinNumber * 10 + pin2;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	8b9b      	ldrh	r3, [r3, #28]
 8000b22:	461a      	mov	r2, r3
 8000b24:	0092      	lsls	r2, r2, #2
 8000b26:	4413      	add	r3, r2
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000b2e:	4413      	add	r3, r2
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	839a      	strh	r2, [r3, #28]
        }

        this->pin = 1 << this->pinNumber; // this is equivalent to GPIO_PIN_x definition
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	8b9b      	ldrh	r3, [r3, #28]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	4093      	lsls	r3, r2
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	83da      	strh	r2, [r3, #30]
    {
        printf("  Invalid port and pin definition\n");
        return;
    }    

    printf("  port = GPIO%c\n", char('A' + this->portIndex));
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	7e9b      	ldrb	r3, [r3, #26]
 8000b4a:	3341      	adds	r3, #65	@ 0x41
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4840      	ldr	r0, [pc, #256]	@ (8000c54 <_ZN3Pin9configPinEv+0x1b4>)
 8000b52:	f012 fb97 	bl	8013284 <iprintf>
    printf("  pin = %d\n", this->pinNumber);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	8b9b      	ldrh	r3, [r3, #28]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	483e      	ldr	r0, [pc, #248]	@ (8000c58 <_ZN3Pin9configPinEv+0x1b8>)
 8000b5e:	f012 fb91 	bl	8013284 <iprintf>

    // translate port index into something useful
    this->GPIOx = gpios[this->portIndex];
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	7e9b      	ldrb	r3, [r3, #26]
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	3338      	adds	r3, #56	@ 0x38
 8000b6a:	443b      	add	r3, r7
 8000b6c:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	62da      	str	r2, [r3, #44]	@ 0x2c

    // enable the peripheral clock
    switch (portIndex){
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	7e9b      	ldrb	r3, [r3, #26]
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	d861      	bhi.n	8000c40 <_ZN3Pin9configPinEv+0x1a0>
 8000b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b84 <_ZN3Pin9configPinEv+0xe4>)
 8000b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b82:	bf00      	nop
 8000b84:	08000ba1 	.word	0x08000ba1
 8000b88:	08000bc1 	.word	0x08000bc1
 8000b8c:	08000be1 	.word	0x08000be1
 8000b90:	08000c01 	.word	0x08000c01
 8000b94:	08000c21 	.word	0x08000c21
        printf("  Invalid port and pin definition\n");
 8000b98:	4830      	ldr	r0, [pc, #192]	@ (8000c5c <_ZN3Pin9configPinEv+0x1bc>)
 8000b9a:	f012 fbe3 	bl	8013364 <puts>
 8000b9e:	e052      	b.n	8000c46 <_ZN3Pin9configPinEv+0x1a6>
        case 0:
            __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba6:	4a2e      	ldr	r2, [pc, #184]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	61fb      	str	r3, [r7, #28]
 8000bbc:	69fb      	ldr	r3, [r7, #28]
            break;
 8000bbe:	e03f      	b.n	8000c40 <_ZN3Pin9configPinEv+0x1a0>

        case 1:
            __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	4b27      	ldr	r3, [pc, #156]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc6:	4a26      	ldr	r2, [pc, #152]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd0:	4b23      	ldr	r3, [pc, #140]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	69bb      	ldr	r3, [r7, #24]
            break;
 8000bde:	e02f      	b.n	8000c40 <_ZN3Pin9configPinEv+0x1a0>

        case 2:
            __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be6:	4a1e      	ldr	r2, [pc, #120]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
            break;
 8000bfe:	e01f      	b.n	8000c40 <_ZN3Pin9configPinEv+0x1a0>
        
        case 3:
            __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c00:	4b17      	ldr	r3, [pc, #92]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c06:	4a16      	ldr	r2, [pc, #88]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c10:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
            break;
 8000c1e:	e00f      	b.n	8000c40 <_ZN3Pin9configPinEv+0x1a0>

        case 4:
            __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c26:	4a0e      	ldr	r2, [pc, #56]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000c28:	f043 0310 	orr.w	r3, r3, #16
 8000c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c30:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c36:	f003 0310 	and.w	r3, r3, #16
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
            break;
 8000c3e:	bf00      	nop
    }

    this->initPin();
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f000 f80f 	bl	8000c64 <_ZN3Pin7initPinEv>
}
 8000c46:	3738      	adds	r7, #56	@ 0x38
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4c:	0801407c 	.word	0x0801407c
 8000c50:	080140d0 	.word	0x080140d0
 8000c54:	080140b0 	.word	0x080140b0
 8000c58:	080140c4 	.word	0x080140c4
 8000c5c:	0801408c 	.word	0x0801408c
 8000c60:	58024400 	.word	0x58024400

08000c64 <_ZN3Pin7initPinEv>:


void Pin::initPin()
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
    // Configure GPIO pin Output Level
    HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	8bdb      	ldrh	r3, [r3, #30]
 8000c74:	2200      	movs	r2, #0
 8000c76:	4619      	mov	r1, r3
 8000c78:	f008 f842 	bl	8008d00 <HAL_GPIO_WritePin>

    // Configure the GPIO pin
    this->GPIO_InitStruct.Pin = this->pin;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	8bdb      	ldrh	r3, [r3, #30]
 8000c80:	461a      	mov	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	631a      	str	r2, [r3, #48]	@ 0x30
    this->GPIO_InitStruct.Mode = this->mode;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a1a      	ldr	r2, [r3, #32]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	635a      	str	r2, [r3, #52]	@ 0x34
    this->GPIO_InitStruct.Pull = this->pull;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	639a      	str	r2, [r3, #56]	@ 0x38
    this->GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2202      	movs	r2, #2
 8000c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(this->GPIOx, &this->GPIO_InitStruct);  
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3330      	adds	r3, #48	@ 0x30
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4610      	mov	r0, r2
 8000ca8:	f007 fe7a 	bl	80089a0 <HAL_GPIO_Init>
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	4a04      	ldr	r2, [pc, #16]	@ (8000cd0 <_ZN9InterruptC1Ev+0x1c>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	08014770 	.word	0x08014770

08000cd4 <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <_ZN9Interrupt8RegisterEiPS_+0x24>)
 8000ce2:	f012 facf 	bl	8013284 <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 8000ce6:	4905      	ldr	r1, [pc, #20]	@ (8000cfc <_ZN9Interrupt8RegisterEiPS_+0x28>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	080140e4 	.word	0x080140e4
 8000cfc:	240000dc 	.word	0x240000dc

08000d00 <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 8000d04:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a02      	ldr	r2, [pc, #8]	@ (8000d18 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000d0e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000d10:	4610      	mov	r0, r2
 8000d12:	4798      	blx	r3
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	240000dc 	.word	0x240000dc

08000d1c <_ZN9Interrupt20DMA1_Stream0_WrapperEv>:

void Interrupt::DMA1_Stream0_Wrapper(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream0_IRQn]->ISR_Handler();
 8000d20:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8000d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a02      	ldr	r2, [pc, #8]	@ (8000d34 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8000d2a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	4798      	blx	r3
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	240000dc 	.word	0x240000dc

08000d38 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>:

void Interrupt::DMA1_Stream1_Wrapper(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream1_IRQn]->ISR_Handler();
 8000d3c:	4b04      	ldr	r3, [pc, #16]	@ (8000d50 <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a02      	ldr	r2, [pc, #8]	@ (8000d50 <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8000d46:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8000d48:	4610      	mov	r0, r2
 8000d4a:	4798      	blx	r3
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	240000dc 	.word	0x240000dc

08000d54 <_ZN9Interrupt12TIM2_WrapperEv>:


void Interrupt::TIM2_Wrapper(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM2_IRQn]->ISR_Handler();
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8000d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a02      	ldr	r2, [pc, #8]	@ (8000d6c <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8000d62:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8000d64:	4610      	mov	r0, r2
 8000d66:	4798      	blx	r3
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	240000dc 	.word	0x240000dc

08000d70 <_ZN9Interrupt12TIM3_WrapperEv>:

void Interrupt::TIM3_Wrapper(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM3_IRQn]->ISR_Handler();
 8000d74:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8000d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a02      	ldr	r2, [pc, #8]	@ (8000d88 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8000d7e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8000d80:	4610      	mov	r0, r2
 8000d82:	4798      	blx	r3
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	240000dc 	.word	0x240000dc

08000d8c <_ZN9Interrupt12TIM4_WrapperEv>:

void Interrupt::TIM4_Wrapper(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM4_IRQn]->ISR_Handler();
 8000d90:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8000d92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a02      	ldr	r2, [pc, #8]	@ (8000da4 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8000d9a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	4798      	blx	r3
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	240000dc 	.word	0x240000dc

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	@ (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	@ (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__is_constant_evaluated>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8000e00:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_ZNK19ArduinoJson6101_11014CollectionData4headEv>:
  VariantData *get(size_t index) const;

  template <typename TAdaptedString>
  VariantData *get(TAdaptedString key) const;

  VariantSlot *head() const {
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
    return _head;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
  }
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>:
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(&_content);
 8000e2c:	687b      	ldr	r3, [r7, #4]
  }
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>:

  const VariantData* data() const {
    return reinterpret_cast<const VariantData*>(&_content);
  }

  VariantSlot* next() {
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
    return _next ? this + _next : 0;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d006      	beq.n	8000e5a <_ZN19ArduinoJson6101_11011VariantSlot4nextEv+0x20>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000e52:	011b      	lsls	r3, r3, #4
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	4413      	add	r3, r2
 8000e58:	e000      	b.n	8000e5c <_ZN19ArduinoJson6101_11011VariantSlot4nextEv+0x22>
 8000e5a:	2300      	movs	r3, #0
  }
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>:

  void setNext(VariantSlot* slot) {
    _next = VariantSlotDiff(slot ? slot - this : 0);
  }

  void setNextNotNull(VariantSlot* slot) {
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	111b      	asrs	r3, r3, #4
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	815a      	strh	r2, [r3, #10]
  }
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>:

  void setOwnedKey(not_null<const char*> k) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
    _flags |= KEY_IS_OWNED;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	7a1b      	ldrb	r3, [r3, #8]
 8000e9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	721a      	strb	r2, [r3, #8]
    _key = k.get();
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f001 fdfa 	bl	8002aa0 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8000eac:	4602      	mov	r2, r0
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	60da      	str	r2, [r3, #12]
  }
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <_ZNK19ArduinoJson6101_11011VariantSlot3keyEv>:
  void setLinkedKey(not_null<const char*> k) {
    _flags &= VALUE_MASK;
    _key = k.get();
  }

  const char* key() const {
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
    return _key;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
  }
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>:

  bool ownsKey() const {
    return (_flags & KEY_IS_OWNED) != 0;
  }

  void clear() {
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
    _next = 0;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	815a      	strh	r2, [r3, #10]
    _flags = 0;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	721a      	strb	r2, [r3, #8]
    _key = 0;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
  }
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <_ZN19ArduinoJson6101_11010addPaddingEj>:
  const size_t mask = sizeof(void *) - 1;
  size_t addr = reinterpret_cast<size_t>(ptr);
  return (addr & mask) == 0;
}

inline size_t addPadding(size_t bytes) {
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  const size_t mask = sizeof(void *) - 1;
 8000f00:	2303      	movs	r3, #3
 8000f02:	60fb      	str	r3, [r7, #12]
  return (bytes + mask) & ~mask;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3303      	adds	r3, #3
 8000f08:	f023 0303 	bic.w	r3, r3, #3
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>:
//               ^              ^
//             _left          _right

class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
      : _begin(buf),
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	601a      	str	r2, [r3, #0]
        _left(buf),
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	605a      	str	r2, [r3, #4]
        _right(buf ? buf + capa : 0),
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x26>
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	e000      	b.n	8000f40 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x28>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	6093      	str	r3, [r2, #8]
        _end(buf ? buf + capa : 0) {
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3a>
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	e000      	b.n	8000f54 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3c>
 8000f52:	2300      	movs	r3, #0
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	60d3      	str	r3, [r2, #12]
    ARDUINOJSON_ASSERT(isAligned(_begin));
    ARDUINOJSON_ASSERT(isAligned(_right));
    ARDUINOJSON_ASSERT(isAligned(_end));
  }
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>:

  void* buffer() {
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
    return _begin;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
  }
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>:

  size_t size() const {
    return size_t(_left - _begin + _end - _right);
  }

  VariantSlot* allocVariant() {
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
    return allocRight<VariantSlot>();
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f001 fd96 	bl	8002ab8 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>
 8000f8c:	4603      	mov	r3, r0
  }
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>:
    _left += n;
    checkInvariants();
    return s;
  }

  StringSlot allocExpandableString() {
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	6039      	str	r1, [r7, #0]
    StringSlot s;
    s.value = _left;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	601a      	str	r2, [r3, #0]
    s.size = size_t(_right - _left);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	605a      	str	r2, [r3, #4]
    _left = _right;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000fc0:	6838      	ldr	r0, [r7, #0]
 8000fc2:	f000 f864 	bl	800108e <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
    return s;
 8000fc6:	bf00      	nop
  }
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>:

  void freezeString(StringSlot& s, size_t newSize) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
    _left -= (s.size - newSize);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	1acb      	subs	r3, r1, r3
 8000fe8:	441a      	add	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	605a      	str	r2, [r3, #4]
    s.size = newSize;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f000 f84a 	bl	800108e <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
  }
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>:

  void clear() {
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
    _left = _begin;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	605a      	str	r2, [r3, #4]
    _right = _end;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	609a      	str	r2, [r3, #8]
  }
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>:

  bool canAlloc(size_t bytes) const {
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
    return _left + bytes <= _right;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	441a      	add	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	429a      	cmp	r2, r3
 800103e:	bf94      	ite	ls
 8001040:	2301      	movls	r3, #1
 8001042:	2300      	movhi	r3, #0
 8001044:	b2db      	uxtb	r3, r3
  }
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>:
  template <typename T>
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
    if (!canAlloc(bytes)) return 0;
 800105c:	6839      	ldr	r1, [r7, #0]
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffe1 	bl	8001026 <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>
 8001064:	4603      	mov	r3, r0
 8001066:	f083 0301 	eor.w	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x22>
 8001070:	2300      	movs	r3, #0
 8001072:	e008      	b.n	8001086 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x34>
    _right -= bytes;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	425b      	negs	r3, r3
 800107c:	441a      	add	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	609a      	str	r2, [r3, #8]
    return _right;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
  }
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>:
 private:
  StringSlot* allocStringSlot() {
    return allocRight<StringSlot>();
  }

  void checkInvariants() {
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_begin <= _left);
    ARDUINOJSON_ASSERT(_left <= _right);
    ARDUINOJSON_ASSERT(_right <= _end);
    ARDUINOJSON_ASSERT(isAligned(_right));
  }
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_ZN19ArduinoJson6101_11021ConstRamStringAdapterC1EPKc>:

namespace ARDUINOJSON_NAMESPACE {

class ConstRamStringAdapter {
 public:
  ConstRamStringAdapter(const char* str = 0) : _str(str) {}
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc>:

  bool equals(const char* expected) const {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
    const char* actual = _str;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	60fb      	str	r3, [r7, #12]
    if (!actual || !expected) return actual == expected;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x1c>
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d107      	bne.n	80010ec <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x2c>
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	bf0c      	ite	eq
 80010e4:	2301      	moveq	r3, #1
 80010e6:	2300      	movne	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	e009      	b.n	8001100 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x40>
    return strcmp(actual, expected) == 0;
 80010ec:	6839      	ldr	r1, [r7, #0]
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f7ff f8f6 	bl	80002e0 <strcmp>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	bf0c      	ite	eq
 80010fa:	2301      	moveq	r3, #1
 80010fc:	2300      	movne	r3, #0
 80010fe:	b2db      	uxtb	r3, r3
  }
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <_ZN19ArduinoJson6101_11011adaptStringEPKc>:

 protected:
  const char* _str;
};

inline ConstRamStringAdapter adaptString(const char* str) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  return ConstRamStringAdapter(str);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ffc3 	bl	80010a2 <_ZN19ArduinoJson6101_11021ConstRamStringAdapterC1EPKc>
 800111c:	68fb      	ldr	r3, [r7, #12]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
 800112e:	f7ff fe65 	bl	8000dfc <__is_constant_evaluated>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d004      	beq.n	8001142 <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f001 fcca 	bl	8002ad2 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 800113e:	4603      	mov	r3, r0
 8001140:	e004      	b.n	800114c <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff f92c 	bl	80003a0 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	bf00      	nop
      }
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <_ZN19ArduinoJson6101_11011VariantData7asArrayEv>:

  const char *asString() const;

  bool asBoolean() const;

  CollectionData *asArray() {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    return isArray() ? &_content.asCollection : 0;
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f81b 	bl	8001198 <_ZNK19ArduinoJson6101_11011VariantData7isArrayEv>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <_ZN19ArduinoJson6101_11011VariantData7asArrayEv+0x18>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	e000      	b.n	800116e <_ZN19ArduinoJson6101_11011VariantData7asArrayEv+0x1a>
 800116c:	2300      	movs	r3, #0
  }
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <_ZN19ArduinoJson6101_11011VariantData8asObjectEv>:

  const CollectionData *asArray() const {
    return const_cast<VariantData *>(this)->asArray();
  }

  CollectionData *asObject() {
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
    return isObject() ? &_content.asCollection : 0;
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f81d 	bl	80011be <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <_ZN19ArduinoJson6101_11011VariantData8asObjectEv+0x18>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	e000      	b.n	8001190 <_ZN19ArduinoJson6101_11011VariantData8asObjectEv+0x1a>
 800118e:	2300      	movs	r3, #0
  }
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <_ZNK19ArduinoJson6101_11011VariantData7isArrayEv>:
      default:
        return true;
    }
  }

  bool isArray() const {
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    return (_flags & VALUE_IS_ARRAY) != 0;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7a1b      	ldrb	r3, [r3, #8]
 80011a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	bf14      	ite	ne
 80011ac:	2301      	movne	r3, #1
 80011ae:	2300      	moveq	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
  }
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>:

  bool isString() const {
    return type() == VALUE_IS_LINKED_STRING || type() == VALUE_IS_OWNED_STRING;
  }

  bool isObject() const {
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
    return (_flags & VALUE_IS_OBJECT) != 0;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7a1b      	ldrb	r3, [r3, #8]
 80011ca:	f003 0320 	and.w	r3, r3, #32
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	bf14      	ite	ne
 80011d2:	2301      	movne	r3, #1
 80011d4:	2300      	moveq	r3, #0
 80011d6:	b2db      	uxtb	r3, r3
  }
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>:
  template <typename TAdaptedString>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
 80011e4:	b5b0      	push	{r4, r5, r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	70fb      	strb	r3, [r7, #3]
    setType(VALUE_IS_BOOLEAN);
 80011f0:	2105      	movs	r1, #5
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 f895 	bl	8001322 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = static_cast<UInt>(value);
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	2200      	movs	r2, #0
 80011fc:	461c      	mov	r4, r3
 80011fe:	4615      	mov	r5, r2
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	e9c3 4500 	strd	r4, r5, [r3]
  }
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bdb0      	pop	{r4, r5, r7, pc}

0800120e <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>:

  void setFloat(Float value) {
 800120e:	b580      	push	{r7, lr}
 8001210:	b084      	sub	sp, #16
 8001212:	af00      	add	r7, sp, #0
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	ed87 0b00 	vstr	d0, [r7]
    setType(VALUE_IS_FLOAT);
 800121a:	2108      	movs	r1, #8
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f000 f880 	bl	8001322 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asFloat = value;
 8001222:	68f9      	ldr	r1, [r7, #12]
 8001224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001228:	e9c1 2300 	strd	r2, r3, [r1]
  }
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>:
    } else {
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_POSITIVE_INTEGER);
 8001240:	2106      	movs	r1, #6
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f000 f86d 	bl	8001322 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8001248:	68f9      	ldr	r1, [r7, #12]
 800124a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800124e:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>:

  void setNegativeInteger(UInt value) {
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_NEGATIVE_INTEGER);
 8001266:	2107      	movs	r1, #7
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f000 f85a 	bl	8001322 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 800126e:	68f9      	ldr	r1, [r7, #12]
 8001270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001274:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>:
    } else {
      setType(VALUE_IS_NULL);
    }
  }

  void setNull() {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_NULL);
 8001288:	2100      	movs	r1, #0
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f849 	bl	8001322 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
  }
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>:

  void setOwnedString(not_null<const char *> s) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
    setType(VALUE_IS_OWNED_STRING);
 80012a2:	2104      	movs	r1, #4
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f83c 	bl	8001322 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asString = s.get();
 80012aa:	463b      	mov	r3, r7
 80012ac:	4618      	mov	r0, r3
 80012ae:	f001 fbf7 	bl	8002aa0 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 80012b2:	4602      	mov	r2, r0
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	601a      	str	r2, [r3, #0]
  }
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>:
  void setUnsignedInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
    _content.asInteger = static_cast<UInt>(value);
  }

  CollectionData &toArray() {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_ARRAY);
 80012c8:	2140      	movs	r1, #64	@ 0x40
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 f829 	bl	8001322 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f957 	bl	8001586 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 80012d8:	687b      	ldr	r3, [r7, #4]
  }
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>:

  CollectionData &toObject() {
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_OBJECT);
 80012ea:	2120      	movs	r1, #32
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f818 	bl	8001322 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 f946 	bl	8001586 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 80012fa:	687b      	ldr	r3, [r7, #4]
  }
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>:
    if (var) return var;
    return _content.asCollection.add(key, pool);
  }

 private:
  uint8_t type() const {
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
    return _flags & VALUE_MASK;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7a1b      	ldrb	r3, [r3, #8]
 8001310:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001314:	b2db      	uxtb	r3, r3
  }
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>:

  void setType(uint8_t t) {
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	460b      	mov	r3, r1
 800132c:	70fb      	strb	r3, [r7, #3]
    _flags &= KEY_IS_OWNED;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7a1b      	ldrb	r3, [r3, #8]
 8001332:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001336:	b2da      	uxtb	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	721a      	strb	r2, [r3, #8]
    _flags |= t;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	7a1a      	ldrb	r2, [r3, #8]
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	4313      	orrs	r3, r2
 8001344:	b2da      	uxtb	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	721a      	strb	r2, [r3, #8]
  }
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>:
    var = var->next();
  }
  return n;
}

inline VariantData* slotData(VariantSlot* slot) {
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<VariantData*>(slot);
 800135e:	687b      	ldr	r3, [r7, #4]
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE>:

inline const CollectionData *variantAsObject(const VariantData *var) {
  return var != 0 ? var->asObject() : 0;
}

inline CollectionData *variantAsObject(VariantData *var) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  return var != 0 ? var->asObject() : 0;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d004      	beq.n	8001384 <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE+0x18>
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff fefb 	bl	8001176 <_ZN19ArduinoJson6101_11011VariantData8asObjectEv>
 8001380:	4603      	mov	r3, r0
 8001382:	e000      	b.n	8001386 <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE+0x1a>
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>:
  VariantRef _variant;
};

class ArrayIterator {
 public:
  ArrayIterator() : _slot(0) {}
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_ZN19ArduinoJson6101_11013ArrayIteratorC1EPNS_10MemoryPoolEPNS_11VariantSlotE>:
  explicit ArrayIterator(MemoryPool *pool, VariantSlot *slot)
 80013aa:	b480      	push	{r7}
 80013ac:	b085      	sub	sp, #20
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
      : _pool(pool), _slot(slot) {}
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_ZNK19ArduinoJson6101_11013ArrayIteratordeEv>:

  VariantRef operator*() const {
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
    return VariantRef(_pool, _slot->data());
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681c      	ldr	r4, [r3, #0]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fd1e 	bl	8000e24 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 80013e8:	4603      	mov	r3, r0
 80013ea:	60fc      	str	r4, [r7, #12]
 80013ec:	60bb      	str	r3, [r7, #8]
  friend class VariantConstRef;

 public:
  // Intenal use only
  FORCE_INLINE VariantRef(MemoryPool *pool, VariantData *data)
      : base_type(data), _pool(pool) {}
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f001 fb9c 	bl	8002b30 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	bf00      	nop
  }
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	bd90      	pop	{r4, r7, pc}

08001408 <_ZNK19ArduinoJson6101_11013ArrayIteratorneERKS0_>:

  bool operator==(const ArrayIterator &other) const {
    return _slot == other._slot;
  }

  bool operator!=(const ArrayIterator &other) const {
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
    return _slot != other._slot;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	429a      	cmp	r2, r3
 800141c:	bf14      	ite	ne
 800141e:	2301      	movne	r3, #1
 8001420:	2300      	moveq	r3, #0
 8001422:	b2db      	uxtb	r3, r3
  }
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZN19ArduinoJson6101_11013ArrayIteratorppEv>:

  ArrayIterator &operator++() {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    _slot = _slot->next();
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fcfc 	bl	8000e3a <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>
 8001442:	4602      	mov	r2, r0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	605a      	str	r2, [r3, #4]
    return *this;
 8001448:	687b      	ldr	r3, [r7, #4]
  }
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>:
  template <typename T>
  typename VariantConstAs<T>::type as() const {
    return getVariant().template as<T>();
  }

  void clear() {
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
    _pool.clear();
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fdd0 	bl	8001002 <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>
    _data.setNull();
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3310      	adds	r3, #16
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff0a 	bl	8001280 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>:
    clear();
    return getVariant().template to<T>();
  }

  // for internal use only
  MemoryPool& memoryPool() {
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
    return _pool;
 800147c:	687b      	ldr	r3, [r7, #4]
  }
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>:

  VariantData& data() {
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
    return _data;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3310      	adds	r3, #16
  }
 8001496:	4618      	mov	r0, r3
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>:
      const TString& key) {
    _data.remove(adaptString(key));
  }

 protected:
  JsonDocument(MemoryPool pool) : _pool(pool) {
 80014a2:	b084      	sub	sp, #16
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	f107 001c 	add.w	r0, r7, #28
 80014b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	461c      	mov	r4, r3
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    _data.setNull();
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3310      	adds	r3, #16
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff feda 	bl	8001280 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80014d8:	b004      	add	sp, #16
 80014da:	4770      	bx	lr

080014dc <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>:
#include <stdlib.h>  // malloc, free

namespace ARDUINOJSON_NAMESPACE {

struct DefaultAllocator {
  void* allocate(size_t n) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
    return malloc(n);
 80014e6:	6838      	ldr	r0, [r7, #0]
 80014e8:	f011 fcf6 	bl	8012ed8 <malloc>
 80014ec:	4603      	mov	r3, r0
  }
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>:

  void deallocate(void* p) {
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	6039      	str	r1, [r7, #0]
    free(p);
 8001500:	6838      	ldr	r0, [r7, #0]
 8001502:	f011 fcf1 	bl	8012ee8 <free>
  }
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>:
#include "../Variant/VariantData.hpp"
#include "CollectionData.hpp"

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = pool->allocVariant();
 8001518:	6838      	ldr	r0, [r7, #0]
 800151a:	f7ff fd30 	bl	8000f7e <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>
 800151e:	60f8      	str	r0, [r7, #12]
  if (!slot) return 0;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x1c>
 8001526:	2300      	movs	r3, #0
 8001528:	e017      	b.n	800155a <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x4c>

  if (_tail) {
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d009      	beq.n	8001546 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x38>
    _tail->setNextNotNull(slot);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	68f9      	ldr	r1, [r7, #12]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fc95 	bl	8000e68 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>
    _tail = slot;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	e005      	b.n	8001552 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x44>
  } else {
    _head = slot;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	601a      	str	r2, [r3, #0]
    _tail = slot;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	605a      	str	r2, [r3, #4]
  }

  slot->clear();
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f7ff fcbd 	bl	8000ed2 <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>
  return slot;
 8001558:	68fb      	ldr	r3, [r7, #12]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>:

inline VariantData* CollectionData::add(MemoryPool* pool) {
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	6039      	str	r1, [r7, #0]
  return slotData(addSlot(pool));
 800156c:	6839      	ldr	r1, [r7, #0]
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ffcd 	bl	800150e <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 8001574:	4603      	mov	r3, r0
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff feed 	bl	8001356 <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>
 800157c:	4603      	mov	r3, r0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>:
  VariantSlot* slot = addSlot(pool);
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  _head = 0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
  _tail = 0;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	605a      	str	r2, [r3, #4]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <_ZN19ArduinoJson6101_1107isdigitEc>:

#pragma once

namespace ARDUINOJSON_NAMESPACE {

inline bool isdigit(char c) {
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80015b4:	d904      	bls.n	80015c0 <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b39      	cmp	r3, #57	@ 0x39
 80015ba:	d801      	bhi.n	80015c0 <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <_ZN19ArduinoJson6101_1107isdigitEc+0x1c>
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <_ZNK19ArduinoJson6101_11011VariantData8asStringEv>:
    default:
      return 0;
  }
}

inline const char *VariantData::asString() const {
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  switch (type()) {
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff fe94 	bl	8001304 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>
 80015dc:	4603      	mov	r3, r0
 80015de:	3b03      	subs	r3, #3
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d802      	bhi.n	80015ea <_ZNK19ArduinoJson6101_11011VariantData8asStringEv+0x1c>
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return _content.asString;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	e000      	b.n	80015ec <_ZNK19ArduinoJson6101_11011VariantData8asStringEv+0x1e>
    default:
      return 0;
 80015ea:	2300      	movs	r3, #0
  }
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>:

namespace ARDUINOJSON_NAMESPACE {

class StringBuilder {
 public:
  explicit StringBuilder(MemoryPool* parent) : _parent(parent), _size(0) {
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	605a      	str	r2, [r3, #4]
    _slot = _parent->allocExpandableString();
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68fc      	ldr	r4, [r7, #12]
 8001610:	463b      	mov	r3, r7
 8001612:	4611      	mov	r1, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fcbe 	bl	8000f96 <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>
 800161a:	f104 0308 	add.w	r3, r4, #8
 800161e:	463a      	mov	r2, r7
 8001620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001624:	e883 0003 	stmia.w	r3, {r0, r1}
  }
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	bd90      	pop	{r4, r7, pc}

08001632 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>:

  void append(const char* s, size_t n) {
    while (n-- > 0) append(*s++);
  }

  void append(char c) {
 8001632:	b490      	push	{r4, r7}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	460b      	mov	r3, r1
 800163c:	70fb      	strb	r3, [r7, #3]
    if (!_slot.value) return;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d015      	beq.n	8001672 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>

    if (_size >= _slot.size) {
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	429a      	cmp	r2, r3
 8001650:	d303      	bcc.n	800165a <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x28>
      _slot.value = 0;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
      return;
 8001658:	e00c      	b.n	8001674 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x42>
    }

    _slot.value[_size++] = c;
 800165a:	78fc      	ldrb	r4, [r7, #3]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	1c58      	adds	r0, r3, #1
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	6048      	str	r0, [r1, #4]
 800166a:	4413      	add	r3, r2
 800166c:	4622      	mov	r2, r4
 800166e:	701a      	strb	r2, [r3, #0]
 8001670:	e000      	b.n	8001674 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x42>
    if (!_slot.value) return;
 8001672:	bf00      	nop
  }
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bc90      	pop	{r4, r7}
 800167a:	4770      	bx	lr

0800167c <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>:

  char* complete() {
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
    append('\0');
 8001684:	2100      	movs	r1, #0
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffd3 	bl	8001632 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    if (_slot.value) {
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d009      	beq.n	80016a8 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv+0x2c>
      _parent->freezeString(_slot, _size);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f103 0108 	add.w	r1, r3, #8
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	461a      	mov	r2, r3
 80016a4:	f7ff fc94 	bl	8000fd0 <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>
    }
    return _slot.value;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
  }
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>:

class StringCopier {
 public:
  typedef ARDUINOJSON_NAMESPACE::StringBuilder StringBuilder;

  StringCopier(MemoryPool* pool) : _pool(pool) {}
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>:

  StringBuilder startString() {
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
    return StringBuilder(_pool);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ff86 	bl	80015f4 <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>
  }
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>:

class UnsafeCharPointerReader {
  const char* _ptr;

 public:
  explicit UnsafeCharPointerReader(const char* ptr)
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
      : _ptr(ptr ? ptr : reinterpret_cast<const char*>("")) {}
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x14>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	e000      	b.n	8001706 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x16>
 8001704:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x28>)
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	08014118 	.word	0x08014118

0800171c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>:

  char read() {
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
    return static_cast<char>(*_ptr++);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	1c59      	adds	r1, r3, #1
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6011      	str	r1, [r2, #0]
 800172e:	781b      	ldrb	r3, [r3, #0]
  }
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>:

  bool ended() const {
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
    // we cannot know, that's why it's unsafe
    return false;
 8001744:	2300      	movs	r3, #0
  }
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <_ZNK19ArduinoJson6101_11020DeserializationError14safeBoolHelperEv>:
namespace ARDUINOJSON_NAMESPACE {

class DeserializationError {
  // safe bool idiom
  typedef void (DeserializationError::*bool_type)() const;
  void safeBoolHelper() const {}
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>:
    NotSupported,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : _code(c) {}
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	460b      	mov	r3, r1
 8001770:	70fb      	strb	r3, [r7, #3]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	78fa      	ldrb	r2, [r7, #3]
 8001776:	701a      	strb	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>:
  friend bool operator!=(Code lhs, const DeserializationError& rhs) {
    return lhs != rhs._code;
  }

  // Behaves like a bool
  operator bool_type() const {
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
    return _code != Ok ? &DeserializationError::safeBoolHelper : 0;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d106      	bne.n	80017a8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x20>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	e005      	b.n	80017b4 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x2c>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a05      	ldr	r2, [pc, #20]	@ (80017c0 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x38>)
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
  }
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	08001753 	.word	0x08001753

080017c4 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>:
  friend bool operator!=(const DeserializationError& err, bool value) {
    return static_cast<bool>(err) != value;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
    return _code;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	781b      	ldrb	r3, [r3, #0]
  }
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>:

  const char* c_str() const {
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
    switch (_code) {
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b05      	cmp	r3, #5
 80017ea:	d81b      	bhi.n	8001824 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x48>
 80017ec:	a201      	add	r2, pc, #4	@ (adr r2, 80017f4 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x18>)
 80017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f2:	bf00      	nop
 80017f4:	0800180d 	.word	0x0800180d
 80017f8:	0800181d 	.word	0x0800181d
 80017fc:	08001819 	.word	0x08001819
 8001800:	08001815 	.word	0x08001815
 8001804:	08001821 	.word	0x08001821
 8001808:	08001811 	.word	0x08001811
      case Ok:
        return "Ok";
 800180c:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x58>)
 800180e:	e00a      	b.n	8001826 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case TooDeep:
        return "TooDeep";
 8001810:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x5c>)
 8001812:	e008      	b.n	8001826 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NoMemory:
        return "NoMemory";
 8001814:	4b09      	ldr	r3, [pc, #36]	@ (800183c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x60>)
 8001816:	e006      	b.n	8001826 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case InvalidInput:
        return "InvalidInput";
 8001818:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x64>)
 800181a:	e004      	b.n	8001826 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case IncompleteInput:
        return "IncompleteInput";
 800181c:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x68>)
 800181e:	e002      	b.n	8001826 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NotSupported:
        return "NotSupported";
 8001820:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x6c>)
 8001822:	e000      	b.n	8001826 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      default:
        return "???";
 8001824:	4b09      	ldr	r3, [pc, #36]	@ (800184c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x70>)
    }
  }
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	0801411c 	.word	0x0801411c
 8001838:	08014120 	.word	0x08014120
 800183c:	08014128 	.word	0x08014128
 8001840:	08014134 	.word	0x08014134
 8001844:	08014144 	.word	0x08014144
 8001848:	08014154 	.word	0x08014154
 800184c:	08014164 	.word	0x08014164

08001850 <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>:
#include "../Configuration.hpp"

namespace ARDUINOJSON_NAMESPACE {

struct NestingLimit {
  NestingLimit() : value(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2232      	movs	r2, #50	@ 0x32
 800185c:	701a      	strb	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
    const char *p = escapeTable(true);
 8001876:	2001      	movs	r0, #1
 8001878:	f000 f818 	bl	80018ac <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>
 800187c:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0') return c;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x1e>
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	e00c      	b.n	80018a4 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c) return p[1];
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	79fa      	ldrb	r2, [r7, #7]
 8001890:	429a      	cmp	r2, r3
 8001892:	d103      	bne.n	800189c <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x30>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3301      	adds	r3, #1
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	e003      	b.n	80018a4 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3302      	adds	r3, #2
 80018a0:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0') return c;
 80018a2:	e7ec      	b.n	800187e <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x12>
    }
  }
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>:

 private:
  static const char *escapeTable(bool excludeIdenticals) {
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
    return &"\"\"\\\\b\bf\fn\nr\rt\t"[excludeIdenticals ? 4 : 0];
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x14>
 80018bc:	2304      	movs	r3, #4
 80018be:	e000      	b.n	80018c2 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x16>
 80018c0:	2300      	movs	r3, #0
 80018c2:	4a04      	ldr	r2, [pc, #16]	@ (80018d4 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x28>)
 80018c4:	4413      	add	r3, r2
  }
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	08014168 	.word	0x08014168

080018d8 <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
		// Chip select pin is PC_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 80018dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	bf14      	ite	ne
 80018ec:	2301      	movne	r3, #1
 80018ee:	2300      	moveq	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d006      	beq.n	8001904 <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fa:	2210      	movs	r2, #16
 80018fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 8001900:	f7ff f9fe 	bl	8000d00 <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <DMA1_Stream0_IRQHandler>:

	void DMA1_Stream0_IRQHandler()
	{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream0_Wrapper();
 800190c:	f7ff fa06 	bl	8000d1c <_ZN9Interrupt20DMA1_Stream0_WrapperEv>
	}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}

08001914 <DMA1_Stream1_IRQHandler>:

	void DMA1_Stream1_IRQHandler()
	{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream1_Wrapper();
 8001918:	f7ff fa0e 	bl	8000d38 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>
	}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}

08001920 <TIM2_IRQHandler>:


	void TIM2_IRQHandler()
	{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	  if(TIM2->SR & TIM_SR_UIF) // if UIF flag is set
 8001924:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	bf14      	ite	ne
 8001932:	2301      	movne	r3, #1
 8001934:	2300      	moveq	r3, #0
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d009      	beq.n	8001950 <TIM2_IRQHandler+0x30>
	  {
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 800193c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001946:	f023 0301 	bic.w	r3, r3, #1
 800194a:	6113      	str	r3, [r2, #16]

		Interrupt::TIM2_Wrapper();
 800194c:	f7ff fa02 	bl	8000d54 <_ZN9Interrupt12TIM2_WrapperEv>
	  }
	}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <TIM3_IRQHandler>:


	void TIM3_IRQHandler()
	{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	  if(TIM3->SR & TIM_SR_UIF) // if UIF flag is set
 8001958:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <TIM3_IRQHandler+0x30>)
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf14      	ite	ne
 8001964:	2301      	movne	r3, #1
 8001966:	2300      	moveq	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d007      	beq.n	800197e <TIM3_IRQHandler+0x2a>
	  {
		TIM3->SR &= ~TIM_SR_UIF; // clear UIF flag
 800196e:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <TIM3_IRQHandler+0x30>)
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <TIM3_IRQHandler+0x30>)
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	6113      	str	r3, [r2, #16]

		Interrupt::TIM3_Wrapper();
 800197a:	f7ff f9f9 	bl	8000d70 <_ZN9Interrupt12TIM3_WrapperEv>
	  }
	}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40000400 	.word	0x40000400

08001988 <TIM4_IRQHandler>:

	void TIM4_IRQHandler()
	{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	  if(TIM4->SR & TIM_SR_UIF) // if UIF flag is set
 800198c:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <TIM4_IRQHandler+0x30>)
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf14      	ite	ne
 8001998:	2301      	movne	r3, #1
 800199a:	2300      	moveq	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <TIM4_IRQHandler+0x2a>
	  {
		TIM4->SR &= ~TIM_SR_UIF; // clear UIF flag
 80019a2:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <TIM4_IRQHandler+0x30>)
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	4a04      	ldr	r2, [pc, #16]	@ (80019b8 <TIM4_IRQHandler+0x30>)
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	6113      	str	r3, [r2, #16]

		Interrupt::TIM4_Wrapper();
 80019ae:	f7ff f9ed 	bl	8000d8c <_ZN9Interrupt12TIM4_WrapperEv>
	  }
	}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40000800 	.word	0x40000800

080019bc <_Z13createThreadsv>:
#include "extern.h"


void createThreads(void)
{
 80019bc:	b598      	push	{r3, r4, r7, lr}
 80019be:	af00      	add	r7, sp, #0
	servoThread = new pruThread(TIM2, TIM2_IRQn, servo_freq);
 80019c0:	2030      	movs	r0, #48	@ 0x30
 80019c2:	f011 f8ac 	bl	8012b1e <_Znwj>
 80019c6:	4603      	mov	r3, r0
 80019c8:	461c      	mov	r4, r3
 80019ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <_Z13createThreadsv+0x78>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	221c      	movs	r2, #28
 80019d0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80019d4:	4620      	mov	r0, r4
 80019d6:	f004 fe0f 	bl	80065f8 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 80019da:	4b17      	ldr	r3, [pc, #92]	@ (8001a38 <_Z13createThreadsv+0x7c>)
 80019dc:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM2_IRQn, 2);
 80019de:	2102      	movs	r1, #2
 80019e0:	201c      	movs	r0, #28
 80019e2:	f7ff f9e1 	bl	8000da8 <__NVIC_SetPriority>

    baseThread = new pruThread(TIM3, TIM3_IRQn , base_freq);
 80019e6:	2030      	movs	r0, #48	@ 0x30
 80019e8:	f011 f899 	bl	8012b1e <_Znwj>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461c      	mov	r4, r3
 80019f0:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <_Z13createThreadsv+0x80>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	221d      	movs	r2, #29
 80019f6:	4912      	ldr	r1, [pc, #72]	@ (8001a40 <_Z13createThreadsv+0x84>)
 80019f8:	4620      	mov	r0, r4
 80019fa:	f004 fdfd 	bl	80065f8 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 80019fe:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <_Z13createThreadsv+0x88>)
 8001a00:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM3_IRQn , 3);
 8001a02:	2103      	movs	r1, #3
 8001a04:	201d      	movs	r0, #29
 8001a06:	f7ff f9cf 	bl	8000da8 <__NVIC_SetPriority>

    commsThread = new pruThread(TIM4, TIM4_IRQn, PRU_COMMSFREQ);
 8001a0a:	2030      	movs	r0, #48	@ 0x30
 8001a0c:	f011 f887 	bl	8012b1e <_Znwj>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461c      	mov	r4, r3
 8001a14:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8001a18:	221e      	movs	r2, #30
 8001a1a:	490b      	ldr	r1, [pc, #44]	@ (8001a48 <_Z13createThreadsv+0x8c>)
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f004 fdeb 	bl	80065f8 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 8001a22:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <_Z13createThreadsv+0x90>)
 8001a24:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM4_IRQn, 4);
 8001a26:	2104      	movs	r1, #4
 8001a28:	201e      	movs	r0, #30
 8001a2a:	f7ff f9bd 	bl	8000da8 <__NVIC_SetPriority>
}
 8001a2e:	bf00      	nop
 8001a30:	bd98      	pop	{r3, r4, r7, pc}
 8001a32:	bf00      	nop
 8001a34:	24000004 	.word	0x24000004
 8001a38:	24000334 	.word	0x24000334
 8001a3c:	24000000 	.word	0x24000000
 8001a40:	40000400 	.word	0x40000400
 8001a44:	24000338 	.word	0x24000338
 8001a48:	40000800 	.word	0x40000800
 8001a4c:	2400033c 	.word	0x2400033c

08001a50 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001a58:	1d39      	adds	r1, r7, #4
 8001a5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4803      	ldr	r0, [pc, #12]	@ (8001a70 <__io_putchar+0x20>)
 8001a62:	f00c fc82 	bl	800e36a <HAL_UART_Transmit>
	  return ch;
 8001a66:	687b      	ldr	r3, [r7, #4]
	}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	24000418 	.word	0x24000418

08001a74 <_Z14readJsonConfigv>:
}



void readJsonConfig()
{
 8001a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a78:	b08d      	sub	sp, #52	@ 0x34
 8001a7a:	af00      	add	r7, sp, #0
	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 8001a7c:	4854      	ldr	r0, [pc, #336]	@ (8001bd0 <_Z14readJsonConfigv+0x15c>)
 8001a7e:	f011 fc71 	bl	8013364 <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 8001a82:	4854      	ldr	r0, [pc, #336]	@ (8001bd4 <_Z14readJsonConfigv+0x160>)
 8001a84:	f011 fc6e 	bl	8013364 <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4953      	ldr	r1, [pc, #332]	@ (8001bd8 <_Z14readJsonConfigv+0x164>)
 8001a8c:	4853      	ldr	r0, [pc, #332]	@ (8001bdc <_Z14readJsonConfigv+0x168>)
 8001a8e:	f010 fbef 	bl	8012270 <f_mount>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d005      	beq.n	8001aae <_Z14readJsonConfigv+0x3a>
	{
    	printf("	Failed to mount SD card\n\r");
 8001aa2:	484f      	ldr	r0, [pc, #316]	@ (8001be0 <_Z14readJsonConfigv+0x16c>)
 8001aa4:	f011 fbee 	bl	8013284 <iprintf>
    	Error_Handler();
 8001aa8:	f000 ffee 	bl	8002a88 <Error_Handler>
			}

			f_close(&SDFile);
		}
    }
}
 8001aac:	e08a      	b.n	8001bc4 <_Z14readJsonConfigv+0x150>
		if(f_open(&SDFile, "config.txt", FA_READ) != FR_OK)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	494c      	ldr	r1, [pc, #304]	@ (8001be4 <_Z14readJsonConfigv+0x170>)
 8001ab2:	484d      	ldr	r0, [pc, #308]	@ (8001be8 <_Z14readJsonConfigv+0x174>)
 8001ab4:	f010 fc22 	bl	80122fc <f_open>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	bf14      	ite	ne
 8001abe:	2301      	movne	r3, #1
 8001ac0:	2300      	moveq	r3, #0
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <_Z14readJsonConfigv+0x60>
			printf("	Failed to open JSON config file\n");
 8001ac8:	4848      	ldr	r0, [pc, #288]	@ (8001bec <_Z14readJsonConfigv+0x178>)
 8001aca:	f011 fc4b 	bl	8013364 <puts>
			Error_Handler();
 8001ace:	f000 ffdb 	bl	8002a88 <Error_Handler>
}
 8001ad2:	e077      	b.n	8001bc4 <_Z14readJsonConfigv+0x150>
		}
 8001ad4:	466b      	mov	r3, sp
 8001ad6:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 8001ad8:	4b43      	ldr	r3, [pc, #268]	@ (8001be8 <_Z14readJsonConfigv+0x174>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	62bb      	str	r3, [r7, #40]	@ 0x28
			printf("	JSON config file lenght = %2ld\n", length);
 8001ade:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ae0:	4843      	ldr	r0, [pc, #268]	@ (8001bf0 <_Z14readJsonConfigv+0x17c>)
 8001ae2:	f011 fbcf 	bl	8013284 <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 8001ae6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ae8:	1e4b      	subs	r3, r1, #1
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aec:	460a      	mov	r2, r1
 8001aee:	2300      	movs	r3, #0
 8001af0:	4690      	mov	r8, r2
 8001af2:	4699      	mov	r9, r3
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b08:	460a      	mov	r2, r1
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	461d      	mov	r5, r3
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	00eb      	lsls	r3, r5, #3
 8001b1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b1e:	00e2      	lsls	r2, r4, #3
 8001b20:	460b      	mov	r3, r1
 8001b22:	3318      	adds	r3, #24
 8001b24:	3307      	adds	r3, #7
 8001b26:	08db      	lsrs	r3, r3, #3
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	ebad 0d03 	sub.w	sp, sp, r3
 8001b2e:	466b      	mov	r3, sp
 8001b30:	331f      	adds	r3, #31
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	015b      	lsls	r3, r3, #5
 8001b36:	623b      	str	r3, [r7, #32]
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 8001b38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	6a39      	ldr	r1, [r7, #32]
 8001b3e:	482a      	ldr	r0, [pc, #168]	@ (8001be8 <_Z14readJsonConfigv+0x174>)
 8001b40:	f010 fd96 	bl	8012670 <f_read>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	bf14      	ite	ne
 8001b4a:	2301      	movne	r3, #1
 8001b4c:	2300      	moveq	r3, #0
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <_Z14readJsonConfigv+0xe8>
				printf("	JSON config file read FAILURE\n");
 8001b54:	4827      	ldr	r0, [pc, #156]	@ (8001bf4 <_Z14readJsonConfigv+0x180>)
 8001b56:	f011 fc05 	bl	8013364 <puts>
 8001b5a:	e02f      	b.n	8001bbc <_Z14readJsonConfigv+0x148>
				printf("	JSON config file read SUCCESS!\n");
 8001b5c:	4826      	ldr	r0, [pc, #152]	@ (8001bf8 <_Z14readJsonConfigv+0x184>)
 8001b5e:	f011 fc01 	bl	8013364 <puts>
				strJson.reserve(length + 1);
 8001b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b64:	3301      	adds	r3, #1
 8001b66:	4619      	mov	r1, r3
 8001b68:	4824      	ldr	r0, [pc, #144]	@ (8001bfc <_Z14readJsonConfigv+0x188>)
 8001b6a:	f011 f90d 	bl	8012d88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b72:	e017      	b.n	8001ba4 <_Z14readJsonConfigv+0x130>
			    	strJson = strJson + rtext[i];
 8001b74:	6a3a      	ldr	r2, [r7, #32]
 8001b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b78:	4413      	add	r3, r2
 8001b7a:	781a      	ldrb	r2, [r3, #0]
 8001b7c:	f107 0308 	add.w	r3, r7, #8
 8001b80:	491e      	ldr	r1, [pc, #120]	@ (8001bfc <_Z14readJsonConfigv+0x188>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	f001 f83a 	bl	8002bfc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	481b      	ldr	r0, [pc, #108]	@ (8001bfc <_Z14readJsonConfigv+0x188>)
 8001b90:	f011 f88b 	bl	8012caa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001b94:	f107 0308 	add.w	r3, r7, #8
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f011 f880 	bl	8012c9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 8001b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ba4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	dbe3      	blt.n	8001b74 <_Z14readJsonConfigv+0x100>
			    printf("\n%s\n", strJson.c_str());
 8001bac:	4813      	ldr	r0, [pc, #76]	@ (8001bfc <_Z14readJsonConfigv+0x188>)
 8001bae:	f011 f951 	bl	8012e54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4812      	ldr	r0, [pc, #72]	@ (8001c00 <_Z14readJsonConfigv+0x18c>)
 8001bb8:	f011 fb64 	bl	8013284 <iprintf>
			f_close(&SDFile);
 8001bbc:	480a      	ldr	r0, [pc, #40]	@ (8001be8 <_Z14readJsonConfigv+0x174>)
 8001bbe:	f010 ff14 	bl	80129ea <f_close>
 8001bc2:	46b5      	mov	sp, r6
}
 8001bc4:	bf00      	nop
 8001bc6:	3734      	adds	r7, #52	@ 0x34
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bce:	bf00      	nop
 8001bd0:	08014178 	.word	0x08014178
 8001bd4:	0801419c 	.word	0x0801419c
 8001bd8:	24000508 	.word	0x24000508
 8001bdc:	2400050c 	.word	0x2400050c
 8001be0:	080141bc 	.word	0x080141bc
 8001be4:	080141d8 	.word	0x080141d8
 8001be8:	2400073c 	.word	0x2400073c
 8001bec:	080141e4 	.word	0x080141e4
 8001bf0:	08014208 	.word	0x08014208
 8001bf4:	0801422c 	.word	0x0801422c
 8001bf8:	0801424c 	.word	0x0801424c
 8001bfc:	24000344 	.word	0x24000344
 8001c00:	0801426c 	.word	0x0801426c

08001c04 <_Z5setupv>:

void setup()
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
    printf("\n2. Setting up SPI DMA and threads\n");
 8001c08:	4807      	ldr	r0, [pc, #28]	@ (8001c28 <_Z5setupv+0x24>)
 8001c0a:	f011 fbab 	bl	8013364 <puts>

    // initialise the Remora comms
    comms->init();
 8001c0e:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <_Z5setupv+0x28>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 fb3a 	bl	800528c <_ZN11RemoraComms4initEv>
    comms->start();
 8001c18:	4b04      	ldr	r3, [pc, #16]	@ (8001c2c <_Z5setupv+0x28>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f003 fc75 	bl	800550c <_ZN11RemoraComms5startEv>
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	08014274 	.word	0x08014274
 8001c2c:	24000398 	.word	0x24000398

08001c30 <_Z15deserialiseJSONv>:


void deserialiseJSON()
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
    printf("\n3. Parsing json configuration file\n");
 8001c36:	4826      	ldr	r0, [pc, #152]	@ (8001cd0 <_Z15deserialiseJSONv+0xa0>)
 8001c38:	f011 fb94 	bl	8013364 <puts>

    const char *json = strJson.c_str();
 8001c3c:	4825      	ldr	r0, [pc, #148]	@ (8001cd4 <_Z15deserialiseJSONv+0xa4>)
 8001c3e:	f011 f909 	bl	8012e54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001c42:	60f8      	str	r0, [r7, #12]

    // parse the json configuration file
    DeserializationError error = deserializeJson(doc, json);
 8001c44:	f107 0308 	add.w	r3, r7, #8
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fe01 	bl	8001850 <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>
 8001c4e:	7a3a      	ldrb	r2, [r7, #8]
 8001c50:	68f9      	ldr	r1, [r7, #12]
 8001c52:	4821      	ldr	r0, [pc, #132]	@ (8001cd8 <_Z15deserialiseJSONv+0xa8>)
 8001c54:	f000 ffe8 	bl	8002c28 <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	713b      	strb	r3, [r7, #4]

    printf("	Config deserialisation - ");
 8001c5c:	481f      	ldr	r0, [pc, #124]	@ (8001cdc <_Z15deserialiseJSONv+0xac>)
 8001c5e:	f011 fb11 	bl	8013284 <iprintf>

    switch (error.code())
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fdad 	bl	80017c4 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d011      	beq.n	8001c94 <_Z15deserialiseJSONv+0x64>
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	dc16      	bgt.n	8001ca2 <_Z15deserialiseJSONv+0x72>
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <_Z15deserialiseJSONv+0x4e>
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d004      	beq.n	8001c86 <_Z15deserialiseJSONv+0x56>
 8001c7c:	e011      	b.n	8001ca2 <_Z15deserialiseJSONv+0x72>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 8001c7e:	4818      	ldr	r0, [pc, #96]	@ (8001ce0 <_Z15deserialiseJSONv+0xb0>)
 8001c80:	f011 fb70 	bl	8013364 <puts>
            break;
 8001c84:	e01f      	b.n	8001cc6 <_Z15deserialiseJSONv+0x96>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 8001c86:	4817      	ldr	r0, [pc, #92]	@ (8001ce4 <_Z15deserialiseJSONv+0xb4>)
 8001c88:	f011 fb6c 	bl	8013364 <puts>
            configError = true;
 8001c8c:	4b16      	ldr	r3, [pc, #88]	@ (8001ce8 <_Z15deserialiseJSONv+0xb8>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
            break;
 8001c92:	e018      	b.n	8001cc6 <_Z15deserialiseJSONv+0x96>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 8001c94:	4815      	ldr	r0, [pc, #84]	@ (8001cec <_Z15deserialiseJSONv+0xbc>)
 8001c96:	f011 fb65 	bl	8013364 <puts>
            configError = true;
 8001c9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ce8 <_Z15deserialiseJSONv+0xb8>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	701a      	strb	r2, [r3, #0]
            break;
 8001ca0:	e011      	b.n	8001cc6 <_Z15deserialiseJSONv+0x96>
        default:
            printf("Deserialization failed: ");
 8001ca2:	4813      	ldr	r0, [pc, #76]	@ (8001cf0 <_Z15deserialiseJSONv+0xc0>)
 8001ca4:	f011 faee 	bl	8013284 <iprintf>
            printf(error.c_str());
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fd96 	bl	80017dc <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f011 fae6 	bl	8013284 <iprintf>
            printf("\n");
 8001cb8:	200a      	movs	r0, #10
 8001cba:	f011 faf5 	bl	80132a8 <putchar>
            configError = true;
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <_Z15deserialiseJSONv+0xb8>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
            break;
 8001cc4:	bf00      	nop
    }
}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	08014298 	.word	0x08014298
 8001cd4:	24000344 	.word	0x24000344
 8001cd8:	24000368 	.word	0x24000368
 8001cdc:	080142bc 	.word	0x080142bc
 8001ce0:	080142d8 	.word	0x080142d8
 8001ce4:	080142f4 	.word	0x080142f4
 8001ce8:	24000332 	.word	0x24000332
 8001cec:	08014304 	.word	0x08014304
 8001cf0:	08014318 	.word	0x08014318

08001cf4 <_Z13configThreadsv>:

void configThreads()
{
 8001cf4:	b5b0      	push	{r4, r5, r7, lr}
 8001cf6:	b0bc      	sub	sp, #240	@ 0xf0
 8001cf8:	af00      	add	r7, sp, #0
    if (configError) return;
 8001cfa:	4bcb      	ldr	r3, [pc, #812]	@ (8002028 <_Z13configThreadsv+0x334>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f040 818d 	bne.w	800201e <_Z13configThreadsv+0x32a>

    printf("\n4. Configuring threads\n");
 8001d04:	48c9      	ldr	r0, [pc, #804]	@ (800202c <_Z13configThreadsv+0x338>)
 8001d06:	f011 fb2d 	bl	8013364 <puts>
 8001d0a:	4bc9      	ldr	r3, [pc, #804]	@ (8002030 <_Z13configThreadsv+0x33c>)
 8001d0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001d10:	4bc8      	ldr	r3, [pc, #800]	@ (8002034 <_Z13configThreadsv+0x340>)
 8001d12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001d16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d1a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
                    public Visitable {
  typedef MemberProxy<TObject, TStringRef> this_type;

 public:
  FORCE_INLINE MemberProxy(TObject variant, TStringRef key)
      : _object(variant), _key(key) {}
 8001d1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d22:	623b      	str	r3, [r7, #32]
 8001d24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
    return MemberProxy<JsonDocument&, TChar*>(*this, key);
 8001d2a:	bf00      	nop
template <typename TImpl>
class VariantCasts {
 public:
  template <typename T>
  FORCE_INLINE operator T() const {
    return impl()->template as<T>();
 8001d2c:	f107 0320 	add.w	r3, r7, #32
 8001d30:	4618      	mov	r0, r3
 8001d32:	f001 f8b7 	bl	8002ea4 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRNS_12JsonDocumentEPKcEEE4implEv>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    return getOrAddUpstreamMember().getOrAddMember(key);
  }

 private:
  FORCE_INLINE VariantRef getUpstreamMember() const {
    return _object.getMember(_key);
 8001d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001d54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
 8001d58:	f8d7 40dc 	ldr.w	r4, [r7, #220]	@ 0xdc
 8001d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d60:	f103 0510 	add.w	r5, r3, #16
 8001d64:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8001d68:	f7ff f9ce 	bl	8001108 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4628      	mov	r0, r5
 8001d72:	f001 ff2c 	bl	8003bce <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
 8001d76:	4603      	mov	r3, r0
 8001d78:	f8c7 40d4 	str.w	r4, [r7, #212]	@ 0xd4
 8001d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001d80:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d84:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 fed1 	bl	8002b30 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
}

template <typename T>
inline typename enable_if<is_same<T, ArrayRef>::value, T>::type VariantRef::as()
    const {
  return ArrayRef(_pool, _data != 0 ? _data->asArray() : 0);
 8001d98:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8001d9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <_Z13configThreadsv+0xb8>
 8001da0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff f9d6 	bl	8001154 <_ZN19ArduinoJson6101_11011VariantData7asArrayEv>
 8001da8:	4603      	mov	r3, r0
 8001daa:	e000      	b.n	8001dae <_Z13configThreadsv+0xba>
 8001dac:	2300      	movs	r3, #0
 8001dae:	f8c7 40cc 	str.w	r4, [r7, #204]	@ 0xcc
 8001db2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 public:
  typedef ArrayIterator iterator;

  FORCE_INLINE ArrayRef() : base_type(0), _pool(0) {}
  FORCE_INLINE ArrayRef(MemoryPool* pool, CollectionData* data)
      : base_type(data), _pool(pool) {}
 8001db6:	f107 0318 	add.w	r3, r7, #24
 8001dba:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fec5 	bl	8002b4e <_ZN19ArduinoJson6101_11012ArrayRefBaseINS_14CollectionDataEEC1EPS1_>
 8001dc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
  VariantRef addElement() const {
    return VariantRef(_pool, arrayAdd(_data, _pool));
  }

  FORCE_INLINE iterator begin() const {
    if (!_data) return iterator();
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d105      	bne.n	8001de2 <_Z13configThreadsv+0xee>
 8001dd6:	f107 0310 	add.w	r3, r7, #16
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fad7 	bl	800138e <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>
 8001de0:	e00b      	b.n	8001dfa <_Z13configThreadsv+0x106>
    return iterator(_pool, _data->head());
 8001de2:	69fc      	ldr	r4, [r7, #28]
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff f810 	bl	8000e0c <_ZNK19ArduinoJson6101_11014CollectionData4headEv>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f107 0310 	add.w	r3, r7, #16
 8001df2:	4621      	mov	r1, r4
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fad8 	bl	80013aa <_ZN19ArduinoJson6101_11013ArrayIteratorC1EPNS_10MemoryPoolEPNS_11VariantSlotE>

    JsonArray Threads = doc["Threads"];

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it)
 8001dfa:	e0fe      	b.n	8001ffa <_Z13configThreadsv+0x306>
    {
        thread = *it;
 8001dfc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e00:	f107 0210 	add.w	r2, r7, #16
 8001e04:	4611      	mov	r1, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fae2 	bl	80013d0 <_ZNK19ArduinoJson6101_11013ArrayIteratordeEv>
 8001e0c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e10:	4618      	mov	r0, r3
 8001e12:	f001 f852 	bl	8002eba <_ZNK19ArduinoJson6101_11012VariantCastsINS_10VariantRefEE4implEv>
 8001e16:	4603      	mov	r3, r0
 8001e18:	66bb      	str	r3, [r7, #104]	@ 0x68
}

template <typename T>
inline typename enable_if<is_same<T, ObjectRef>::value, T>::type
VariantRef::as() const {
  return ObjectRef(_pool, variantAsObject(_data));
 8001e1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e1c:	685c      	ldr	r4, [r3, #4]
 8001e1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff faa2 	bl	800136c <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	667c      	str	r4, [r7, #100]	@ 0x64
 8001e2c:	663b      	str	r3, [r7, #96]	@ 0x60
 public:
  typedef ObjectIterator iterator;

  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
  FORCE_INLINE ObjectRef(MemoryPool* buf, CollectionData* data)
      : base_type(data), _pool(buf) {}
 8001e2e:	f107 0308 	add.w	r3, r7, #8
 8001e32:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fe99 	bl	8002b6c <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 8001e3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
 8001e42:	4b7d      	ldr	r3, [pc, #500]	@ (8002038 <_Z13configThreadsv+0x344>)
 8001e44:	461a      	mov	r2, r3
 8001e46:	f107 0308 	add.w	r3, r7, #8
 8001e4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e4e:	e882 0003 	stmia.w	r2, {r0, r1}
 8001e52:	4b7a      	ldr	r3, [pc, #488]	@ (800203c <_Z13configThreadsv+0x348>)
 8001e54:	677b      	str	r3, [r7, #116]	@ 0x74
template <typename TObject>
template <typename TString>
inline typename enable_if<IsString<TString *>::value,
                          MemberProxy<const TObject &, TString *> >::type
    ObjectShortcuts<TObject>::operator[](TString *key) const {
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001e56:	4878      	ldr	r0, [pc, #480]	@ (8002038 <_Z13configThreadsv+0x344>)
 8001e58:	f001 f83a 	bl	8002ed0 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e62:	66fb      	str	r3, [r7, #108]	@ 0x6c
      : _object(variant), _key(key) {}
 8001e64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e66:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e6a:	637b      	str	r3, [r7, #52]	@ 0x34
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001e6c:	bf00      	nop
 8001e6e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e72:	4618      	mov	r0, r3
 8001e74:	f001 f837 	bl	8002ee6 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    return _object.getMember(_key);
 8001e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001e96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  // getMember(char*) const
  // getMember(const char*) const
  // getMember(const __FlashStringHelper*) const
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) const {
    return get_impl(adaptString(key));
 8001e9a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001e9e:	f7ff f933 	bl	8001108 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ea8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001eac:	607a      	str	r2, [r7, #4]
  }

 private:
  template <typename TAdaptedString>
  FORCE_INLINE VariantRef get_impl(TAdaptedString key) const {
    return VariantRef(_pool, objectGet(_data, key));
 8001eae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001eb2:	685c      	ldr	r4, [r3, #4]
 8001eb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 fa25 	bl	800430c <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	67fc      	str	r4, [r7, #124]	@ 0x7c
 8001ec6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001ec8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001ecc:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 fe2e 	bl	8002b30 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001ed4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ed6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ed8:	bf00      	nop
    return get_impl(adaptString(key));
 8001eda:	bf00      	nop
 8001edc:	bf00      	nop
  FORCE_INLINE typename enable_if<!is_same<T, ArrayRef>::value &&
                                      !is_same<T, ObjectRef>::value &&
                                      !is_same<T, VariantRef>::value,
                                  typename VariantAs<T>::type>::type
  as() const {
    return variantAs<T>(_data);
 8001ede:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f001 fd03 	bl	80038ec <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8001eea:	bf00      	nop
 8001eec:	bf00      	nop

        const char* configor = thread["Thread"];
 8001eee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001ef2:	4b53      	ldr	r3, [pc, #332]	@ (8002040 <_Z13configThreadsv+0x34c>)
 8001ef4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001ef8:	484f      	ldr	r0, [pc, #316]	@ (8002038 <_Z13configThreadsv+0x344>)
 8001efa:	f000 ffe9 	bl	8002ed0 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      : _object(variant), _key(key) {}
 8001f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001f18:	bf00      	nop
 8001f1a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 ffe1 	bl	8002ee6 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    return _object.getMember(_key);
 8001f32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8001f42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001f46:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001f4a:	f7ff f8dd 	bl	8001108 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001f58:	603a      	str	r2, [r7, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8001f5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f5e:	685c      	ldr	r4, [r3, #4]
 8001f60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6839      	ldr	r1, [r7, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f002 f9cf 	bl	800430c <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	f8c7 40a4 	str.w	r4, [r7, #164]	@ 0xa4
 8001f74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      : base_type(data), _pool(pool) {}
 8001f78:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001f7c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 fdd5 	bl	8002b30 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001f86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f8c:	bf00      	nop
    return get_impl(adaptString(key));
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
    return variantAs<T>(_data);
 8001f92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f94:	4618      	mov	r0, r3
 8001f96:	f001 fcba 	bl	800390e <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8001f9e:	bf00      	nop
 8001fa0:	bf00      	nop
        uint32_t    freq = thread["Frequency"];
 8001fa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

        if (!strcmp(configor,"Base"))
 8001fa6:	4927      	ldr	r1, [pc, #156]	@ (8002044 <_Z13configThreadsv+0x350>)
 8001fa8:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8001fac:	f7fe f998 	bl	80002e0 <strcmp>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10a      	bne.n	8001fcc <_Z13configThreadsv+0x2d8>
        {
            base_freq = freq;
 8001fb6:	4a24      	ldr	r2, [pc, #144]	@ (8002048 <_Z13configThreadsv+0x354>)
 8001fb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001fbc:	6013      	str	r3, [r2, #0]
            printf("	Setting BASE thread frequency to %lu\n", base_freq);
 8001fbe:	4b22      	ldr	r3, [pc, #136]	@ (8002048 <_Z13configThreadsv+0x354>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4821      	ldr	r0, [pc, #132]	@ (800204c <_Z13configThreadsv+0x358>)
 8001fc6:	f011 f95d 	bl	8013284 <iprintf>
 8001fca:	e011      	b.n	8001ff0 <_Z13configThreadsv+0x2fc>
        }
        else if (!strcmp(configor,"Servo"))
 8001fcc:	4920      	ldr	r1, [pc, #128]	@ (8002050 <_Z13configThreadsv+0x35c>)
 8001fce:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8001fd2:	f7fe f985 	bl	80002e0 <strcmp>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d109      	bne.n	8001ff0 <_Z13configThreadsv+0x2fc>
        {
            servo_freq = freq;
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002054 <_Z13configThreadsv+0x360>)
 8001fde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001fe2:	6013      	str	r3, [r2, #0]
            printf("	Setting SERVO thread frequency to %lu\n", servo_freq);
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <_Z13configThreadsv+0x360>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	481b      	ldr	r0, [pc, #108]	@ (8002058 <_Z13configThreadsv+0x364>)
 8001fec:	f011 f94a 	bl	8013284 <iprintf>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it)
 8001ff0:	f107 0310 	add.w	r3, r7, #16
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fa1b 	bl	8001430 <_ZN19ArduinoJson6101_11013ArrayIteratorppEv>
  }

  FORCE_INLINE iterator end() const {
    return iterator();
 8001ffa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff f9c5 	bl	800138e <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>
 8002004:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002008:	f107 0310 	add.w	r3, r7, #16
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff f9fa 	bl	8001408 <_ZNK19ArduinoJson6101_11013ArrayIteratorneERKS0_>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	f47f aef0 	bne.w	8001dfc <_Z13configThreadsv+0x108>
 800201c:	e000      	b.n	8002020 <_Z13configThreadsv+0x32c>
    if (configError) return;
 800201e:	bf00      	nop
        }
    }
}
 8002020:	37f0      	adds	r7, #240	@ 0xf0
 8002022:	46bd      	mov	sp, r7
 8002024:	bdb0      	pop	{r4, r5, r7, pc}
 8002026:	bf00      	nop
 8002028:	24000332 	.word	0x24000332
 800202c:	08014334 	.word	0x08014334
 8002030:	0801434c 	.word	0x0801434c
 8002034:	24000368 	.word	0x24000368
 8002038:	24000388 	.word	0x24000388
 800203c:	08014354 	.word	0x08014354
 8002040:	0801435c 	.word	0x0801435c
 8002044:	08014368 	.word	0x08014368
 8002048:	24000000 	.word	0x24000000
 800204c:	08014370 	.word	0x08014370
 8002050:	08014398 	.word	0x08014398
 8002054:	24000004 	.word	0x24000004
 8002058:	080143a0 	.word	0x080143a0

0800205c <main>:
    //Module* debugOffC = new Debug("PE_6", 0);
    //commsThread->registerModule(debugOffC);
}

int main(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08c      	sub	sp, #48	@ 0x30
 8002060:	af02      	add	r7, sp, #8
	MPU_Config();
 8002062:	f000 fcc9 	bl	80029f8 <_ZL10MPU_Configv>
	SCB->VTOR = 0x08000000;
 8002066:	4bae      	ldr	r3, [pc, #696]	@ (8002320 <main+0x2c4>)
 8002068:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800206c:	609a      	str	r2, [r3, #8]
	HAL_Init();
 800206e:	f004 fd69 	bl	8006b44 <HAL_Init>
	SystemClock_Config();
 8002072:	f000 fad7 	bl	8002624 <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 8002076:	f000 fb9f 	bl	80027b8 <_Z24PeriphCommonClock_Configv>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800207a:	f3bf 8f4f 	dsb	sy
}
 800207e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002080:	f3bf 8f6f 	isb	sy
}
 8002084:	bf00      	nop
__STATIC_FORCEINLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8002086:	4ba6      	ldr	r3, [pc, #664]	@ (8002320 <main+0x2c4>)
 8002088:	2200      	movs	r2, #0
 800208a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800208e:	f3bf 8f4f 	dsb	sy
}
 8002092:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002094:	f3bf 8f6f 	isb	sy
}
 8002098:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800209a:	bf00      	nop
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800209c:	4ba0      	ldr	r3, [pc, #640]	@ (8002320 <main+0x2c4>)
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf14      	ite	ne
 80020a8:	2301      	movne	r3, #1
 80020aa:	2300      	moveq	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d11b      	bne.n	80020ea <main+0x8e>
  __ASM volatile ("dsb 0xF":::"memory");
 80020b2:	f3bf 8f4f 	dsb	sy
}
 80020b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80020b8:	f3bf 8f6f 	isb	sy
}
 80020bc:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80020be:	4b98      	ldr	r3, [pc, #608]	@ (8002320 <main+0x2c4>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80020c6:	f3bf 8f4f 	dsb	sy
}
 80020ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80020cc:	f3bf 8f6f 	isb	sy
}
 80020d0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80020d2:	4b93      	ldr	r3, [pc, #588]	@ (8002320 <main+0x2c4>)
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	4a92      	ldr	r2, [pc, #584]	@ (8002320 <main+0x2c4>)
 80020d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80020de:	f3bf 8f4f 	dsb	sy
}
 80020e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80020e4:	f3bf 8f6f 	isb	sy
}
 80020e8:	e000      	b.n	80020ec <main+0x90>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80020ea:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80020ec:	4b8c      	ldr	r3, [pc, #560]	@ (8002320 <main+0x2c4>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80020f4:	f3bf 8f4f 	dsb	sy
}
 80020f8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80020fa:	4b89      	ldr	r3, [pc, #548]	@ (8002320 <main+0x2c4>)
 80020fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002100:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	0b5b      	lsrs	r3, r3, #13
 8002106:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800210a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	08db      	lsrs	r3, r3, #3
 8002110:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002114:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	015a      	lsls	r2, r3, #5
 800211a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800211e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002124:	497e      	ldr	r1, [pc, #504]	@ (8002320 <main+0x2c4>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	1e5a      	subs	r2, r3, #1
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	bf14      	ite	ne
 8002136:	2301      	movne	r3, #1
 8002138:	2300      	moveq	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1ea      	bne.n	8002116 <main+0xba>
    } while(sets-- != 0U);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	1e5a      	subs	r2, r3, #1
 8002144:	60ba      	str	r2, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf14      	ite	ne
 800214a:	2301      	movne	r3, #1
 800214c:	2300      	moveq	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1db      	bne.n	800210c <main+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8002154:	f3bf 8f4f 	dsb	sy
}
 8002158:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800215a:	f3bf 8f6f 	isb	sy
}
 800215e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8002160:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002162:	4b6f      	ldr	r3, [pc, #444]	@ (8002320 <main+0x2c4>)
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800216a:	2b00      	cmp	r3, #0
 800216c:	bf14      	ite	ne
 800216e:	2301      	movne	r3, #1
 8002170:	2300      	moveq	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d142      	bne.n	80021fe <main+0x1a2>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002178:	4b69      	ldr	r3, [pc, #420]	@ (8002320 <main+0x2c4>)
 800217a:	2200      	movs	r2, #0
 800217c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002180:	f3bf 8f4f 	dsb	sy
}
 8002184:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8002186:	4b66      	ldr	r3, [pc, #408]	@ (8002320 <main+0x2c4>)
 8002188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800218c:	61bb      	str	r3, [r7, #24]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	0b5b      	lsrs	r3, r3, #13
 8002192:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002196:	617b      	str	r3, [r7, #20]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	08db      	lsrs	r3, r3, #3
 800219c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021a0:	613b      	str	r3, [r7, #16]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80021aa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80021b0:	495b      	ldr	r1, [pc, #364]	@ (8002320 <main+0x2c4>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1e5a      	subs	r2, r3, #1
 80021bc:	613a      	str	r2, [r7, #16]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	bf14      	ite	ne
 80021c2:	2301      	movne	r3, #1
 80021c4:	2300      	moveq	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1ea      	bne.n	80021a2 <main+0x146>
    } while(sets-- != 0U);
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	1e5a      	subs	r2, r3, #1
 80021d0:	617a      	str	r2, [r7, #20]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	bf14      	ite	ne
 80021d6:	2301      	movne	r3, #1
 80021d8:	2300      	moveq	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1db      	bne.n	8002198 <main+0x13c>
  __ASM volatile ("dsb 0xF":::"memory");
 80021e0:	f3bf 8f4f 	dsb	sy
}
 80021e4:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80021e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002320 <main+0x2c4>)
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	4a4d      	ldr	r2, [pc, #308]	@ (8002320 <main+0x2c4>)
 80021ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80021f2:	f3bf 8f4f 	dsb	sy
}
 80021f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021f8:	f3bf 8f6f 	isb	sy
}
 80021fc:	e000      	b.n	8002200 <main+0x1a4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80021fe:	bf00      	nop
	SCB_EnableICache();
	SCB_InvalidateDCache();
	SCB_EnableDCache();

	/* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8002200:	4b48      	ldr	r3, [pc, #288]	@ (8002324 <main+0x2c8>)
 8002202:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002206:	4a47      	ldr	r2, [pc, #284]	@ (8002324 <main+0x2c8>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002210:	4b44      	ldr	r3, [pc, #272]	@ (8002324 <main+0x2c8>)
 8002212:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	683b      	ldr	r3, [r7, #0]

	MX_GPIO_Init(); 			// used for SD card detect
 800221e:	f000 fb8f 	bl	8002940 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 8002222:	f000 fb2d 	bl	8002880 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();		// uncomment line 62 #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 in FATFT/Target/sd_diskio.c
 8002226:	f000 faff 	bl	8002828 <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 800222a:	f00d ff83 	bl	8010134 <MX_FATFS_Init>


	// prepare DMA buffers
	int n = sizeof(txPingPongBuffer.txBuffers[0].txBuffer);
 800222e:	2340      	movs	r3, #64	@ 0x40
 8002230:	627b      	str	r3, [r7, #36]	@ 0x24
	while(n-- > 0)
 8002232:	e015      	b.n	8002260 <main+0x204>
	{
		txPingPongBuffer.txBuffers[0].txBuffer[n] = 0;
 8002234:	4a3c      	ldr	r2, [pc, #240]	@ (8002328 <main+0x2cc>)
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	4413      	add	r3, r2
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]
		txPingPongBuffer.txBuffers[1].txBuffer[n] = 0;
 800223e:	4a3a      	ldr	r2, [pc, #232]	@ (8002328 <main+0x2cc>)
 8002240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002242:	4413      	add	r3, r2
 8002244:	3340      	adds	r3, #64	@ 0x40
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
		rxPingPongBuffer.rxBuffers[0].rxBuffer[n] = 0;
 800224a:	4a38      	ldr	r2, [pc, #224]	@ (800232c <main+0x2d0>)
 800224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224e:	4413      	add	r3, r2
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
		rxPingPongBuffer.rxBuffers[1].rxBuffer[n] = 0;
 8002254:	4a35      	ldr	r2, [pc, #212]	@ (800232c <main+0x2d0>)
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	4413      	add	r3, r2
 800225a:	3340      	adds	r3, #64	@ 0x40
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
	while(n-- > 0)
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	1e5a      	subs	r2, r3, #1
 8002264:	627a      	str	r2, [r7, #36]	@ 0x24
 8002266:	2b00      	cmp	r3, #0
 8002268:	bfcc      	ite	gt
 800226a:	2301      	movgt	r3, #1
 800226c:	2300      	movle	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1df      	bne.n	8002234 <main+0x1d8>
	}

	txPingPongBuffer.txBuffers[0].header = PRU_DATA;
 8002274:	4b2c      	ldr	r3, [pc, #176]	@ (8002328 <main+0x2cc>)
 8002276:	4a2e      	ldr	r2, [pc, #184]	@ (8002330 <main+0x2d4>)
 8002278:	601a      	str	r2, [r3, #0]
	txPingPongBuffer.txBuffers[1].header = PRU_DATA;
 800227a:	4b2b      	ldr	r3, [pc, #172]	@ (8002328 <main+0x2cc>)
 800227c:	4a2c      	ldr	r2, [pc, #176]	@ (8002330 <main+0x2d4>)
 800227e:	641a      	str	r2, [r3, #64]	@ 0x40


	enum State currentState;
	enum State prevState;

	currentState = ST_SETUP;
 8002280:	2300      	movs	r3, #0
 8002282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	prevState = ST_RESET;
 8002286:	2305      	movs	r3, #5
 8002288:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    comms->setStatus(false);
 800228c:	4b29      	ldr	r3, [pc, #164]	@ (8002334 <main+0x2d8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2100      	movs	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f004 f93b 	bl	800650e <_ZN11RemoraComms9setStatusEb>
    comms->setError(false);
 8002298:	4b26      	ldr	r3, [pc, #152]	@ (8002334 <main+0x2d8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2100      	movs	r1, #0
 800229e:	4618      	mov	r0, r3
 80022a0:	f004 f952 	bl	8006548 <_ZN11RemoraComms8setErrorEb>
    resetCnt = 0;
 80022a4:	4b24      	ldr	r3, [pc, #144]	@ (8002338 <main+0x2dc>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]

	printf("\nRemora version %d.%d.%d for %s starting\n\n", MAJOR_VERSION, MINOR_VERSION, PATCH, BOARD);
 80022aa:	4b24      	ldr	r3, [pc, #144]	@ (800233c <main+0x2e0>)
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2300      	movs	r3, #0
 80022b0:	2201      	movs	r2, #1
 80022b2:	2100      	movs	r1, #0
 80022b4:	4822      	ldr	r0, [pc, #136]	@ (8002340 <main+0x2e4>)
 80022b6:	f010 ffe5 	bl	8013284 <iprintf>

	while (1)
	{
		switch(currentState){
 80022ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022be:	2b06      	cmp	r3, #6
 80022c0:	f200 8123 	bhi.w	800250a <main+0x4ae>
 80022c4:	a201      	add	r2, pc, #4	@ (adr r2, 80022cc <main+0x270>)
 80022c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ca:	bf00      	nop
 80022cc:	080022e9 	.word	0x080022e9
 80022d0:	08002349 	.word	0x08002349
 80022d4:	0800239f 	.word	0x0800239f
 80022d8:	080023df 	.word	0x080023df
 80022dc:	08002477 	.word	0x08002477
 80022e0:	08002499 	.word	0x08002499
 80022e4:	080024ff 	.word	0x080024ff
			          case ST_SETUP:
			              // do setup tasks
			              if (currentState != prevState)
 80022e8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80022ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d002      	beq.n	80022fa <main+0x29e>
			              {
			                  printf("\n## Entering SETUP state\n\n");
 80022f4:	4813      	ldr	r0, [pc, #76]	@ (8002344 <main+0x2e8>)
 80022f6:	f011 f835 	bl	8013364 <puts>
			              }
			              prevState = currentState;
 80022fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022fe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			              readJsonConfig();
 8002302:	f7ff fbb7 	bl	8001a74 <_Z14readJsonConfigv>
			              setup();
 8002306:	f7ff fc7d 	bl	8001c04 <_Z5setupv>
			              deserialiseJSON();
 800230a:	f7ff fc91 	bl	8001c30 <_Z15deserialiseJSONv>
			              configThreads();
 800230e:	f7ff fcf1 	bl	8001cf4 <_Z13configThreadsv>
			              createThreads();
 8002312:	f7ff fb53 	bl	80019bc <_Z13createThreadsv>
			              //debugThreadHigh();
			              //loadModules();
			              //debugThreadLow();

			              currentState = ST_START;
 8002316:	2301      	movs	r3, #1
 8002318:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			              break;
 800231c:	e0f5      	b.n	800250a <main+0x4ae>
 800231e:	bf00      	nop
 8002320:	e000ed00 	.word	0xe000ed00
 8002324:	58024400 	.word	0x58024400
 8002328:	300000a0 	.word	0x300000a0
 800232c:	30000000 	.word	0x30000000
 8002330:	64617461 	.word	0x64617461
 8002334:	24000398 	.word	0x24000398
 8002338:	24000330 	.word	0x24000330
 800233c:	08014404 	.word	0x08014404
 8002340:	080143d8 	.word	0x080143d8
 8002344:	08014410 	.word	0x08014410

			          case ST_START:
			              // do start tasks
			              if (currentState != prevState)
 8002348:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800234c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002350:	429a      	cmp	r2, r3
 8002352:	d002      	beq.n	800235a <main+0x2fe>
			              {
			                  printf("\n## Entering START state\n");
 8002354:	486f      	ldr	r0, [pc, #444]	@ (8002514 <main+0x4b8>)
 8002356:	f011 f805 	bl	8013364 <puts>
			              }
			              prevState = currentState;
 800235a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800235e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			              if (!threadsRunning)
 8002362:	4b6d      	ldr	r3, [pc, #436]	@ (8002518 <main+0x4bc>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	f083 0301 	eor.w	r3, r3, #1
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d012      	beq.n	8002396 <main+0x33a>
			              {
			                  // Start the threads
			                  printf("\nStarting the BASE thread\n");
 8002370:	486a      	ldr	r0, [pc, #424]	@ (800251c <main+0x4c0>)
 8002372:	f010 fff7 	bl	8013364 <puts>
			                  baseThread->startThread();
 8002376:	4b6a      	ldr	r3, [pc, #424]	@ (8002520 <main+0x4c4>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f004 f96a 	bl	8006654 <_ZN9pruThread11startThreadEv>

			                  printf("\nStarting the SERVO thread\n");
 8002380:	4868      	ldr	r0, [pc, #416]	@ (8002524 <main+0x4c8>)
 8002382:	f010 ffef 	bl	8013364 <puts>
			                  servoThread->startThread();
 8002386:	4b68      	ldr	r3, [pc, #416]	@ (8002528 <main+0x4cc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f004 f962 	bl	8006654 <_ZN9pruThread11startThreadEv>

			                  threadsRunning = true;
 8002390:	4b61      	ldr	r3, [pc, #388]	@ (8002518 <main+0x4bc>)
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
			              }

			              currentState = ST_IDLE;
 8002396:	2302      	movs	r3, #2
 8002398:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

			              break;
 800239c:	e0b5      	b.n	800250a <main+0x4ae>


			          case ST_IDLE:
			              // do something when idle
			              if (currentState != prevState)
 800239e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023a2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d002      	beq.n	80023b0 <main+0x354>
			              {
			                  printf("\n## Entering IDLE state\n");
 80023aa:	4860      	ldr	r0, [pc, #384]	@ (800252c <main+0x4d0>)
 80023ac:	f010 ffda 	bl	8013364 <puts>
			              }
			              prevState = currentState;
 80023b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			              //wait for data before changing to running state
			              if (comms->getStatus())
 80023b8:	4b5d      	ldr	r3, [pc, #372]	@ (8002530 <main+0x4d4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f004 f899 	bl	80064f4 <_ZN11RemoraComms9getStatusEv>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 809d 	beq.w	8002504 <main+0x4a8>
			              {
				          	  txPingPongBuffer.txBuffers[0].header =  PRU_DATA;
 80023ca:	4b5a      	ldr	r3, [pc, #360]	@ (8002534 <main+0x4d8>)
 80023cc:	4a5a      	ldr	r2, [pc, #360]	@ (8002538 <main+0x4dc>)
 80023ce:	601a      	str	r2, [r3, #0]
				          	  txPingPongBuffer.txBuffers[1].header =  PRU_DATA;
 80023d0:	4b58      	ldr	r3, [pc, #352]	@ (8002534 <main+0x4d8>)
 80023d2:	4a59      	ldr	r2, [pc, #356]	@ (8002538 <main+0x4dc>)
 80023d4:	641a      	str	r2, [r3, #64]	@ 0x40
			                  currentState = ST_RUNNING;
 80023d6:	2303      	movs	r3, #3
 80023d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			              }

			              break;
 80023dc:	e092      	b.n	8002504 <main+0x4a8>

			          case ST_RUNNING:
			              // do running tasks
			              if (currentState != prevState)
 80023de:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023e2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d002      	beq.n	80023f0 <main+0x394>
			              {
			                  printf("\n## Entering RUNNING state\n");
 80023ea:	4854      	ldr	r0, [pc, #336]	@ (800253c <main+0x4e0>)
 80023ec:	f010 ffba 	bl	8013364 <puts>
			              }
			              prevState = currentState;
 80023f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22


			              // check to see if there there has been SPI errors
			              if (comms->getError())
 80023f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002530 <main+0x4d4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f004 f896 	bl	800652e <_ZN11RemoraComms8getErrorEv>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <main+0x3be>
			              {
			                  printf("Communication data error\n");
 8002408:	484d      	ldr	r0, [pc, #308]	@ (8002540 <main+0x4e4>)
 800240a:	f010 ffab 	bl	8013364 <puts>
			                  comms->setError(false);
 800240e:	4b48      	ldr	r3, [pc, #288]	@ (8002530 <main+0x4d4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2100      	movs	r1, #0
 8002414:	4618      	mov	r0, r3
 8002416:	f004 f897 	bl	8006548 <_ZN11RemoraComms8setErrorEb>
			              }

			              if (comms->getStatus())
 800241a:	4b45      	ldr	r3, [pc, #276]	@ (8002530 <main+0x4d4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f004 f868 	bl	80064f4 <_ZN11RemoraComms9getStatusEv>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <main+0x3e2>
			              {
			                  // SPI data received by DMA
			                  resetCnt = 0;
 800242a:	4b46      	ldr	r3, [pc, #280]	@ (8002544 <main+0x4e8>)
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
			                  comms->setStatus(false);
 8002430:	4b3f      	ldr	r3, [pc, #252]	@ (8002530 <main+0x4d4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f004 f869 	bl	800650e <_ZN11RemoraComms9setStatusEb>
 800243c:	e005      	b.n	800244a <main+0x3ee>
			              }
			              else
			              {
			                  // no data received by DMA
			                  resetCnt++;
 800243e:	4b41      	ldr	r3, [pc, #260]	@ (8002544 <main+0x4e8>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	3301      	adds	r3, #1
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4b3f      	ldr	r3, [pc, #252]	@ (8002544 <main+0x4e8>)
 8002448:	701a      	strb	r2, [r3, #0]
			              }

			              if (resetCnt > SPI_ERR_MAX)
 800244a:	4b3e      	ldr	r3, [pc, #248]	@ (8002544 <main+0x4e8>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b05      	cmp	r3, #5
 8002450:	d908      	bls.n	8002464 <main+0x408>
			              {
			                  // reset threshold reached, reset the PRU
			                  printf("   Communication data error limit reached, resetting\n");
 8002452:	483d      	ldr	r0, [pc, #244]	@ (8002548 <main+0x4ec>)
 8002454:	f010 ff86 	bl	8013364 <puts>
			                  resetCnt = 0;
 8002458:	4b3a      	ldr	r3, [pc, #232]	@ (8002544 <main+0x4e8>)
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
			                  currentState = ST_RESET;
 800245e:	2305      	movs	r3, #5
 8002460:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			              }

			              if (PRUreset)
 8002464:	4b39      	ldr	r3, [pc, #228]	@ (800254c <main+0x4f0>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d04c      	beq.n	8002508 <main+0x4ac>
			              {
			                  currentState = ST_WDRESET;
 800246e:	2306      	movs	r3, #6
 8002470:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			              }

			              break;
 8002474:	e048      	b.n	8002508 <main+0x4ac>

			          case ST_STOP:
			              // do stop tasks
			              if (currentState != prevState)
 8002476:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800247a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800247e:	429a      	cmp	r2, r3
 8002480:	d002      	beq.n	8002488 <main+0x42c>
			              {
			                  printf("\n## Entering STOP state\n");
 8002482:	4833      	ldr	r0, [pc, #204]	@ (8002550 <main+0x4f4>)
 8002484:	f010 ff6e 	bl	8013364 <puts>
			              }
			              prevState = currentState;
 8002488:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800248c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22


			              currentState = ST_STOP;
 8002490:	2304      	movs	r3, #4
 8002492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			              break;
 8002496:	e038      	b.n	800250a <main+0x4ae>

			          case ST_RESET:
			              // do reset tasks
			              if (currentState != prevState)
 8002498:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800249c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d002      	beq.n	80024aa <main+0x44e>
			              {
			                  printf("\n## Entering RESET state\n");
 80024a4:	482b      	ldr	r0, [pc, #172]	@ (8002554 <main+0x4f8>)
 80024a6:	f010 ff5d 	bl	8013364 <puts>
			              }
			              prevState = currentState;
 80024aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80024ae:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			              // set all of the rxData buffer to 0
			              // rxData.rxBuffer is volatile so need to do this the long way. memset cannot be used for volatile

			              pruRxData = getCurrentRxBuffer(&rxPingPongBuffer);
 80024b2:	4829      	ldr	r0, [pc, #164]	@ (8002558 <main+0x4fc>)
 80024b4:	f000 f884 	bl	80025c0 <_Z18getCurrentRxBufferP16RxPingPongBuffer>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4a28      	ldr	r2, [pc, #160]	@ (800255c <main+0x500>)
 80024bc:	6013      	str	r3, [r2, #0]

			              printf("   Resetting rxBuffer\n");
 80024be:	4828      	ldr	r0, [pc, #160]	@ (8002560 <main+0x504>)
 80024c0:	f010 ff50 	bl	8013364 <puts>
			              {
							  int n = sizeof(pruRxData->rxBuffer);
 80024c4:	2340      	movs	r3, #64	@ 0x40
 80024c6:	61fb      	str	r3, [r7, #28]
							  while(n-- > 0)
 80024c8:	e005      	b.n	80024d6 <main+0x47a>
							  {
								  pruRxData->rxBuffer[n] = 0;
 80024ca:	4b24      	ldr	r3, [pc, #144]	@ (800255c <main+0x500>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	4413      	add	r3, r2
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
							  while(n-- > 0)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	1e5a      	subs	r2, r3, #1
 80024da:	61fa      	str	r2, [r7, #28]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bfcc      	ite	gt
 80024e0:	2301      	movgt	r3, #1
 80024e2:	2300      	movle	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1ef      	bne.n	80024ca <main+0x46e>
							  }
			              }
			              txPingPongBuffer.txBuffers[0].header = 0;
 80024ea:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <main+0x4d8>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
			              txPingPongBuffer.txBuffers[1].header = 0;
 80024f0:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <main+0x4d8>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	641a      	str	r2, [r3, #64]	@ 0x40

			              currentState = ST_IDLE;
 80024f6:	2302      	movs	r3, #2
 80024f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			              break;
 80024fc:	e005      	b.n	800250a <main+0x4ae>

			          case ST_WDRESET:
			        	  // force a reset
			        	  HAL_NVIC_SystemReset();
 80024fe:	f004 fcfc 	bl	8006efa <HAL_NVIC_SystemReset>
			              break;
 8002502:	e002      	b.n	800250a <main+0x4ae>
			              break;
 8002504:	bf00      	nop
 8002506:	e000      	b.n	800250a <main+0x4ae>
			              break;
 8002508:	bf00      	nop
			  }
		HAL_Delay(100);
 800250a:	2064      	movs	r0, #100	@ 0x64
 800250c:	f004 fbac 	bl	8006c68 <HAL_Delay>
	}
 8002510:	e6d3      	b.n	80022ba <main+0x25e>
 8002512:	bf00      	nop
 8002514:	0801442c 	.word	0x0801442c
 8002518:	24000333 	.word	0x24000333
 800251c:	08014448 	.word	0x08014448
 8002520:	24000338 	.word	0x24000338
 8002524:	08014464 	.word	0x08014464
 8002528:	24000334 	.word	0x24000334
 800252c:	08014480 	.word	0x08014480
 8002530:	24000398 	.word	0x24000398
 8002534:	300000a0 	.word	0x300000a0
 8002538:	64617461 	.word	0x64617461
 800253c:	08014498 	.word	0x08014498
 8002540:	080144b4 	.word	0x080144b4
 8002544:	24000330 	.word	0x24000330
 8002548:	080144d0 	.word	0x080144d0
 800254c:	24000331 	.word	0x24000331
 8002550:	08014508 	.word	0x08014508
 8002554:	08014520 	.word	0x08014520
 8002558:	30000000 	.word	0x30000000
 800255c:	24000340 	.word	0x24000340
 8002560:	0801453c 	.word	0x0801453c

08002564 <_Z20initRxPingPongBufferP16RxPingPongBuffer>:
}



void initRxPingPongBuffer(RxPingPongBuffer* buffer) {
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
    buffer->currentRxBuffer = 0;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <_Z20initTxPingPongBufferP16TxPingPongBuffer>:

void initTxPingPongBuffer(TxPingPongBuffer* buffer) {
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
    buffer->currentTxBuffer = 0;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <_Z13swapTxBuffersP16TxPingPongBuffer>:

void swapRxBuffers(RxPingPongBuffer* buffer) {
    buffer->currentRxBuffer = 1 - buffer->currentRxBuffer;
}

void swapTxBuffers(TxPingPongBuffer* buffer) {
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
    buffer->currentTxBuffer = 1 - buffer->currentTxBuffer;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025aa:	f1c3 0201 	rsb	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <_Z18getCurrentRxBufferP16RxPingPongBuffer>:
int getCurrentTxBufferIndex(TxPingPongBuffer* buffer)
{
	return buffer->currentTxBuffer;
}

rxData_t* getCurrentRxBuffer(RxPingPongBuffer* buffer) {
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
    return &buffer->rxBuffers[buffer->currentRxBuffer];
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025ce:	019b      	lsls	r3, r3, #6
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	4413      	add	r3, r2
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <_Z18getCurrentTxBufferP16TxPingPongBuffer>:

txData_t* getCurrentTxBuffer(TxPingPongBuffer* buffer) {
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
    return &buffer->txBuffers[buffer->currentTxBuffer];
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025ee:	019b      	lsls	r3, r3, #6
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	4413      	add	r3, r2
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <_Z14getAltRxBufferP16RxPingPongBuffer>:

rxData_t* getAltRxBuffer(RxPingPongBuffer* buffer) {
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
    return &buffer->rxBuffers[1 - buffer->currentRxBuffer];
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800260e:	f1c3 0301 	rsb	r3, r3, #1
 8002612:	019b      	lsls	r3, r3, #6
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	4413      	add	r3, r2
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b09e      	sub	sp, #120	@ 0x78
 8002628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800262a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800262e:	224c      	movs	r2, #76	@ 0x4c
 8002630:	2100      	movs	r1, #0
 8002632:	4618      	mov	r0, r3
 8002634:	f010 ff90 	bl	8013558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002638:	f107 030c 	add.w	r3, r7, #12
 800263c:	2220      	movs	r2, #32
 800263e:	2100      	movs	r1, #0
 8002640:	4618      	mov	r0, r3
 8002642:	f010 ff89 	bl	8013558 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002646:	2002      	movs	r0, #2
 8002648:	f006 fb74 	bl	8008d34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800264c:	2300      	movs	r3, #0
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	4b56      	ldr	r3, [pc, #344]	@ (80027ac <_Z18SystemClock_Configv+0x188>)
 8002652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002654:	4a55      	ldr	r2, [pc, #340]	@ (80027ac <_Z18SystemClock_Configv+0x188>)
 8002656:	f023 0301 	bic.w	r3, r3, #1
 800265a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800265c:	4b53      	ldr	r3, [pc, #332]	@ (80027ac <_Z18SystemClock_Configv+0x188>)
 800265e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	4b52      	ldr	r3, [pc, #328]	@ (80027b0 <_Z18SystemClock_Configv+0x18c>)
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	4a51      	ldr	r2, [pc, #324]	@ (80027b0 <_Z18SystemClock_Configv+0x18c>)
 800266c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002670:	6193      	str	r3, [r2, #24]
 8002672:	4b4f      	ldr	r3, [pc, #316]	@ (80027b0 <_Z18SystemClock_Configv+0x18c>)
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800267e:	bf00      	nop
 8002680:	4b4b      	ldr	r3, [pc, #300]	@ (80027b0 <_Z18SystemClock_Configv+0x18c>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002688:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800268c:	bf14      	ite	ne
 800268e:	2301      	movne	r3, #1
 8002690:	2300      	moveq	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f3      	bne.n	8002680 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002698:	4b46      	ldr	r3, [pc, #280]	@ (80027b4 <_Z18SystemClock_Configv+0x190>)
 800269a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800269e:	4a45      	ldr	r2, [pc, #276]	@ (80027b4 <_Z18SystemClock_Configv+0x190>)
 80026a0:	f043 0302 	orr.w	r3, r3, #2
 80026a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80026a8:	4b42      	ldr	r3, [pc, #264]	@ (80027b4 <_Z18SystemClock_Configv+0x190>)
 80026aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80026b6:	2300      	movs	r3, #0
 80026b8:	603b      	str	r3, [r7, #0]
 80026ba:	4b3d      	ldr	r3, [pc, #244]	@ (80027b0 <_Z18SystemClock_Configv+0x18c>)
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	4a3c      	ldr	r2, [pc, #240]	@ (80027b0 <_Z18SystemClock_Configv+0x18c>)
 80026c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026c4:	6193      	str	r3, [r2, #24]
 80026c6:	4b3a      	ldr	r3, [pc, #232]	@ (80027b0 <_Z18SystemClock_Configv+0x18c>)
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	4b36      	ldr	r3, [pc, #216]	@ (80027ac <_Z18SystemClock_Configv+0x188>)
 80026d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d4:	4a35      	ldr	r2, [pc, #212]	@ (80027ac <_Z18SystemClock_Configv+0x188>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80026dc:	4b33      	ldr	r3, [pc, #204]	@ (80027ac <_Z18SystemClock_Configv+0x188>)
 80026de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80026e8:	bf00      	nop
 80026ea:	4b31      	ldr	r3, [pc, #196]	@ (80027b0 <_Z18SystemClock_Configv+0x18c>)
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026f6:	bf14      	ite	ne
 80026f8:	2301      	movne	r3, #1
 80026fa:	2300      	moveq	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f3      	bne.n	80026ea <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002702:	4b2c      	ldr	r3, [pc, #176]	@ (80027b4 <_Z18SystemClock_Configv+0x190>)
 8002704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002706:	f023 0303 	bic.w	r3, r3, #3
 800270a:	4a2a      	ldr	r2, [pc, #168]	@ (80027b4 <_Z18SystemClock_Configv+0x190>)
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002712:	2301      	movs	r3, #1
 8002714:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002716:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800271a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800271c:	2302      	movs	r3, #2
 800271e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002720:	2302      	movs	r3, #2
 8002722:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002724:	2305      	movs	r3, #5
 8002726:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002728:	23c0      	movs	r3, #192	@ 0xc0
 800272a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800272c:	2302      	movs	r3, #2
 800272e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002730:	2304      	movs	r3, #4
 8002732:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002734:	2302      	movs	r3, #2
 8002736:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002738:	2308      	movs	r3, #8
 800273a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800273c:	2300      	movs	r3, #0
 800273e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002744:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002748:	4618      	mov	r0, r3
 800274a:	f006 fb2d 	bl	8008da8 <HAL_RCC_OscConfig>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf14      	ite	ne
 8002754:	2301      	movne	r3, #1
 8002756:	2300      	moveq	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 800275e:	f000 f993 	bl	8002a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002762:	233f      	movs	r3, #63	@ 0x3f
 8002764:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002766:	2303      	movs	r3, #3
 8002768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800276e:	2308      	movs	r3, #8
 8002770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002772:	2340      	movs	r3, #64	@ 0x40
 8002774:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002776:	2340      	movs	r3, #64	@ 0x40
 8002778:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800277a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002780:	2340      	movs	r3, #64	@ 0x40
 8002782:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002784:	f107 030c 	add.w	r3, r7, #12
 8002788:	2104      	movs	r1, #4
 800278a:	4618      	mov	r0, r3
 800278c:	f006 ff66 	bl	800965c <HAL_RCC_ClockConfig>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	bf14      	ite	ne
 8002796:	2301      	movne	r3, #1
 8002798:	2300      	moveq	r3, #0
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 80027a0:	f000 f972 	bl	8002a88 <Error_Handler>
  }
}
 80027a4:	bf00      	nop
 80027a6:	3778      	adds	r7, #120	@ 0x78
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	58000400 	.word	0x58000400
 80027b0:	58024800 	.word	0x58024800
 80027b4:	58024400 	.word	0x58024400

080027b8 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b0b0      	sub	sp, #192	@ 0xc0
 80027bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027be:	463b      	mov	r3, r7
 80027c0:	22c0      	movs	r2, #192	@ 0xc0
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f010 fec7 	bl	8013558 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 80027ca:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80027d6:	2302      	movs	r3, #2
 80027d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80027da:	230c      	movs	r3, #12
 80027dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80027de:	2301      	movs	r3, #1
 80027e0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 80027e2:	230a      	movs	r3, #10
 80027e4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80027e6:	2302      	movs	r3, #2
 80027e8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80027ea:	23c0      	movs	r3, #192	@ 0xc0
 80027ec:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80027ee:	2320      	movs	r3, #32
 80027f0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80027f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027fa:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80027fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002800:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002802:	463b      	mov	r3, r7
 8002804:	4618      	mov	r0, r3
 8002806:	f007 fab5 	bl	8009d74 <HAL_RCCEx_PeriphCLKConfig>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	bf14      	ite	ne
 8002810:	2301      	movne	r3, #1
 8002812:	2300      	moveq	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 800281a:	f000 f935 	bl	8002a88 <Error_Handler>
  }
}
 800281e:	bf00      	nop
 8002820:	37c0      	adds	r7, #192	@ 0xc0
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800282c:	4b11      	ldr	r3, [pc, #68]	@ (8002874 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800282e:	4a12      	ldr	r2, [pc, #72]	@ (8002878 <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 8002830:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002832:	4b10      	ldr	r3, [pc, #64]	@ (8002874 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002834:	2200      	movs	r2, #0
 8002836:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8002838:	4b0e      	ldr	r3, [pc, #56]	@ (8002874 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800283a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800283e:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002840:	4b0c      	ldr	r3, [pc, #48]	@ (8002874 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002842:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002846:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002848:	4b0a      	ldr	r3, [pc, #40]	@ (8002874 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800284a:	2200      	movs	r2, #0
 800284c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 800284e:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002850:	2208      	movs	r2, #8
 8002852:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8002854:	4807      	ldr	r0, [pc, #28]	@ (8002874 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002856:	f009 ff8b 	bl	800c770 <HAL_SD_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf14      	ite	ne
 8002860:	2301      	movne	r3, #1
 8002862:	2300      	moveq	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 800286a:	4804      	ldr	r0, [pc, #16]	@ (800287c <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 800286c:	f010 fd7a 	bl	8013364 <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}
 8002874:	2400039c 	.word	0x2400039c
 8002878:	52007000 	.word	0x52007000
 800287c:	08014554 	.word	0x08014554

08002880 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002884:	4b2c      	ldr	r3, [pc, #176]	@ (8002938 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002886:	4a2d      	ldr	r2, [pc, #180]	@ (800293c <_ZL19MX_USART1_UART_Initv+0xbc>)
 8002888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = PC_BAUD;
 800288a:	4b2b      	ldr	r3, [pc, #172]	@ (8002938 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800288c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002892:	4b29      	ldr	r3, [pc, #164]	@ (8002938 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002898:	4b27      	ldr	r3, [pc, #156]	@ (8002938 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800289a:	2200      	movs	r2, #0
 800289c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800289e:	4b26      	ldr	r3, [pc, #152]	@ (8002938 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028a4:	4b24      	ldr	r3, [pc, #144]	@ (8002938 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80028a6:	220c      	movs	r2, #12
 80028a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028aa:	4b23      	ldr	r3, [pc, #140]	@ (8002938 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b0:	4b21      	ldr	r3, [pc, #132]	@ (8002938 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028b6:	4b20      	ldr	r3, [pc, #128]	@ (8002938 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002938 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80028be:	2200      	movs	r2, #0
 80028c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002938 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028c8:	481b      	ldr	r0, [pc, #108]	@ (8002938 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80028ca:	f00b fcfe 	bl	800e2ca <HAL_UART_Init>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf14      	ite	ne
 80028d4:	2301      	movne	r3, #1
 80028d6:	2300      	moveq	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80028de:	f000 f8d3 	bl	8002a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028e2:	2100      	movs	r1, #0
 80028e4:	4814      	ldr	r0, [pc, #80]	@ (8002938 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80028e6:	f00c fd90 	bl	800f40a <HAL_UARTEx_SetTxFifoThreshold>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf14      	ite	ne
 80028f0:	2301      	movne	r3, #1
 80028f2:	2300      	moveq	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 80028fa:	f000 f8c5 	bl	8002a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028fe:	2100      	movs	r1, #0
 8002900:	480d      	ldr	r0, [pc, #52]	@ (8002938 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002902:	f00c fdc0 	bl	800f486 <HAL_UARTEx_SetRxFifoThreshold>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf14      	ite	ne
 800290c:	2301      	movne	r3, #1
 800290e:	2300      	moveq	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8002916:	f000 f8b7 	bl	8002a88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800291a:	4807      	ldr	r0, [pc, #28]	@ (8002938 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800291c:	f00c fd3c 	bl	800f398 <HAL_UARTEx_DisableFifoMode>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	bf14      	ite	ne
 8002926:	2301      	movne	r3, #1
 8002928:	2300      	moveq	r3, #0
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8002930:	f000 f8aa 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}
 8002938:	24000418 	.word	0x24000418
 800293c:	40011000 	.word	0x40011000

08002940 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	@ 0x28
 8002944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002946:	f107 0314 	add.w	r3, r7, #20
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	609a      	str	r2, [r3, #8]
 8002952:	60da      	str	r2, [r3, #12]
 8002954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002956:	4b26      	ldr	r3, [pc, #152]	@ (80029f0 <_ZL12MX_GPIO_Initv+0xb0>)
 8002958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800295c:	4a24      	ldr	r2, [pc, #144]	@ (80029f0 <_ZL12MX_GPIO_Initv+0xb0>)
 800295e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002966:	4b22      	ldr	r3, [pc, #136]	@ (80029f0 <_ZL12MX_GPIO_Initv+0xb0>)
 8002968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800296c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002974:	4b1e      	ldr	r3, [pc, #120]	@ (80029f0 <_ZL12MX_GPIO_Initv+0xb0>)
 8002976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800297a:	4a1d      	ldr	r2, [pc, #116]	@ (80029f0 <_ZL12MX_GPIO_Initv+0xb0>)
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002984:	4b1a      	ldr	r3, [pc, #104]	@ (80029f0 <_ZL12MX_GPIO_Initv+0xb0>)
 8002986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002992:	4b17      	ldr	r3, [pc, #92]	@ (80029f0 <_ZL12MX_GPIO_Initv+0xb0>)
 8002994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002998:	4a15      	ldr	r2, [pc, #84]	@ (80029f0 <_ZL12MX_GPIO_Initv+0xb0>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029a2:	4b13      	ldr	r3, [pc, #76]	@ (80029f0 <_ZL12MX_GPIO_Initv+0xb0>)
 80029a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b0:	4b0f      	ldr	r3, [pc, #60]	@ (80029f0 <_ZL12MX_GPIO_Initv+0xb0>)
 80029b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029b6:	4a0e      	ldr	r2, [pc, #56]	@ (80029f0 <_ZL12MX_GPIO_Initv+0xb0>)
 80029b8:	f043 0308 	orr.w	r3, r3, #8
 80029bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029c0:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <_ZL12MX_GPIO_Initv+0xb0>)
 80029c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	607b      	str	r3, [r7, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029ce:	2310      	movs	r3, #16
 80029d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029da:	f107 0314 	add.w	r3, r7, #20
 80029de:	4619      	mov	r1, r3
 80029e0:	4804      	ldr	r0, [pc, #16]	@ (80029f4 <_ZL12MX_GPIO_Initv+0xb4>)
 80029e2:	f005 ffdd 	bl	80089a0 <HAL_GPIO_Init>

}
 80029e6:	bf00      	nop
 80029e8:	3728      	adds	r7, #40	@ 0x28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	58024400 	.word	0x58024400
 80029f4:	58020800 	.word	0x58020800

080029f8 <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80029fe:	463b      	mov	r3, r7
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002a0a:	f004 fa87 	bl	8006f1c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002a1a:	231f      	movs	r3, #31
 8002a1c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002a1e:	2387      	movs	r3, #135	@ 0x87
 8002a20:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002a26:	2300      	movs	r3, #0
 8002a28:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002a3a:	463b      	mov	r3, r7
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f004 faa5 	bl	8006f8c <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for DMA buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002a42:	2301      	movs	r3, #1
 8002a44:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8002a46:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002a4a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8002a4c:	2307      	movs	r3, #7
 8002a4e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002a50:	2303      	movs	r3, #3
 8002a52:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002a60:	2301      	movs	r3, #1
 8002a62:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002a70:	463b      	mov	r3, r7
 8002a72:	4618      	mov	r0, r3
 8002a74:	f004 fa8a 	bl	8006f8c <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002a78:	2004      	movs	r0, #4
 8002a7a:	f004 fa67 	bl	8006f4c <HAL_MPU_Enable>

}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 8002a8c:	4803      	ldr	r0, [pc, #12]	@ (8002a9c <Error_Handler+0x14>)
 8002a8e:	f010 fbf9 	bl	8013284 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a92:	b672      	cpsid	i
}
 8002a94:	bf00      	nop

  __disable_irq();
  while (1)
 8002a96:	bf00      	nop
 8002a98:	e7fd      	b.n	8002a96 <Error_Handler+0xe>
 8002a9a:	bf00      	nop
 8002a9c:	08014564 	.word	0x08014564

08002aa0 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>:
 public:
  explicit not_null(T ptr) : _ptr(ptr) {
    ARDUINOJSON_ASSERT(ptr != NULL);
  }

  T get() const {
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_ptr != NULL);
    return _ptr;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
  }
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>:
  T* allocRight() {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
 8002ac0:	2110      	movs	r1, #16
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7fe fac5 	bl	8001052 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>
 8002ac8:	4603      	mov	r3, r0
  }
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8002ade:	e002      	b.n	8002ae6 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x14>
        ++__i;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4413      	add	r3, r2
 8002aec:	2200      	movs	r2, #0
 8002aee:	72fa      	strb	r2, [r7, #11]
 8002af0:	f107 020b 	add.w	r2, r7, #11
 8002af4:	4611      	mov	r1, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f8d0 	bl	8002c9c <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f083 0301 	eor.w	r3, r3, #1
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1eb      	bne.n	8002ae0 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xe>
      return __i;
 8002b08:	68fb      	ldr	r3, [r7, #12]
    }
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>:
 private:
  T _ptr;
};

template <typename T>
not_null<T> make_not_null(T ptr) {
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  ARDUINOJSON_ASSERT(ptr != NULL);
  return not_null<T>(ptr);
 8002b1a:	f107 030c 	add.w	r3, r7, #12
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f936 	bl	8002d92 <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>
 8002b26:	68fb      	ldr	r3, [r7, #12]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>:
  VariantRefBase(TData *data) : _data(data) {}
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <_ZN19ArduinoJson6101_11012ArrayRefBaseINS_14CollectionDataEEC1EPS1_>:
  ArrayRefBase(TData* data) : _data(data) {}
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>:
  ObjectRefBase(TData* data) : _data(data) {}
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>:
  }
  return 0;
}

template <typename TAdaptedString>
inline VariantData* CollectionData::get(TAdaptedString key) const {
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = getSlot(key);
 8002b94:	6839      	ldr	r1, [r7, #0]
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f90a 	bl	8002db0 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_>
 8002b9c:	60f8      	str	r0, [r7, #12]
  return slot ? slot->data() : 0;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d004      	beq.n	8002bae <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_+0x24>
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f7fe f93d 	bl	8000e24 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 8002baa:	4603      	mov	r3, r0
 8002bac:	e000      	b.n	8002bb0 <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_+0x26>
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>:
};

template <typename TAllocator>
class BasicJsonDocument : AllocatorOwner<TAllocator>, public JsonDocument {
 public:
  explicit BasicJsonDocument(size_t capa, TAllocator allocator = TAllocator())
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b08b      	sub	sp, #44	@ 0x2c
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	713a      	strb	r2, [r7, #4]
      : AllocatorOwner<TAllocator>(allocator), JsonDocument(allocPool(capa)) {}
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 f92d 	bl	8002e28 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f103 0408 	add.w	r4, r3, #8
 8002bd4:	f107 0310 	add.w	r3, r7, #16
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	68f9      	ldr	r1, [r7, #12]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 f90a 	bl	8002df6 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	f107 0310 	add.w	r3, r7, #16
 8002bea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bec:	4620      	mov	r0, r4
 8002bee:	f7fe fc58 	bl	80014a2 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3724      	adds	r7, #36	@ 0x24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd90      	pop	{r4, r7, pc}

08002bfc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
   *  @return  New string with @a __lhs followed by @a __rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	4613      	mov	r3, r2
 8002c08:	71fb      	strb	r3, [r7, #7]
    {
      typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
      typedef typename __string_type::size_type		__size_type;
      __string_type __str(__lhs);
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f010 f940 	bl	8012e92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	461a      	mov	r2, r3
 8002c16:	2101      	movs	r1, #1
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f010 f911 	bl	8012e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 8002c1e:	bf00      	nop
    }
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>:
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
}

template <typename TInput>
DeserializationError deserializeJson(
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	713a      	strb	r2, [r7, #4]
    JsonDocument &doc, TInput *input,
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
 8002c34:	793a      	ldrb	r2, [r7, #4]
 8002c36:	68b9      	ldr	r1, [r7, #8]
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 f901 	bl	8002e40 <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>
 8002c3e:	4603      	mov	r3, r0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8002c48:	b5b0      	push	{r4, r5, r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 8002c54:	68fc      	ldr	r4, [r7, #12]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f00f ff9e 	bl	8012b98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	4619      	mov	r1, r3
 8002c62:	4620      	mov	r0, r4
 8002c64:	f010 f8f8 	bl	8012e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	if (__s == 0)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d102      	bne.n	8002c74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2c>
	  std::__throw_logic_error(__N("basic_string: "
 8002c6e:	480a      	ldr	r0, [pc, #40]	@ (8002c98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
 8002c70:	f00f ff84 	bl	8012b7c <_ZSt19__throw_logic_errorPKc>
	const _CharT* __end = __s + traits_type::length(__s);
 8002c74:	68b8      	ldr	r0, [r7, #8]
 8002c76:	f7fe fa56 	bl	8001126 <_ZNSt11char_traitsIcE6lengthEPKc>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	4413      	add	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]
	_M_construct(__s, __end, forward_iterator_tag());
 8002c82:	462b      	mov	r3, r5
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 f83c 	bl	8002d06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bdb0      	pop	{r4, r5, r7, pc}
 8002c98:	0801456c 	.word	0x0801456c

08002c9c <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	781a      	ldrb	r2, [r3, #0]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	bf0c      	ite	eq
 8002cb2:	2301      	moveq	r3, #1
 8002cb4:	2300      	movne	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f00f ff80 	bl	8012bfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b088      	sub	sp, #32
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	68b8      	ldr	r0, [r7, #8]
 8002d18:	f000 f8f0 	bl	8002efc <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2b0f      	cmp	r3, #15
 8002d24:	d911      	bls.n	8002d4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 8002d26:	f107 0318 	add.w	r3, r7, #24
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f00f ff42 	bl	8012bb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002d34:	4603      	mov	r3, r0
 8002d36:	4619      	mov	r1, r3
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f00f ff29 	bl	8012b90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	4619      	mov	r1, r3
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f00f ff2a 	bl	8012b9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 8002d48:	e005      	b.n	8002d56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x50>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 8002d4e:	69f8      	ldr	r0, [r7, #28]
 8002d50:	f00f ff22 	bl	8012b98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8002d54:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 8002d56:	f107 0314 	add.w	r3, r7, #20
 8002d5a:	68f9      	ldr	r1, [r7, #12]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ffb1 	bl	8002cc4 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f00f ff16 	bl	8012b94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f00f ff89 	bl	8012c86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f00f ff0f 	bl	8012ba0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8002d82:	f107 0314 	add.w	r3, r7, #20
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff ffab 	bl	8002ce2 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>:
  explicit not_null(T ptr) : _ptr(ptr) {
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	601a      	str	r2, [r3, #0]
  }
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_>:
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = _head;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60fb      	str	r3, [r7, #12]
  while (slot) {
 8002dc0:	e00f      	b.n	8002de2 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x32>
    if (key.equals(slot->key())) break;
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f7fe f879 	bl	8000eba <_ZNK19ArduinoJson6101_11011VariantSlot3keyEv>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	463b      	mov	r3, r7
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe f976 	bl	80010c0 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d107      	bne.n	8002dea <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x3a>
    slot = slot->next();
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f7fe f82d 	bl	8000e3a <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>
 8002de0:	60f8      	str	r0, [r7, #12]
  while (slot) {
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1ec      	bne.n	8002dc2 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x12>
 8002de8:	e000      	b.n	8002dec <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x3c>
    if (key.equals(slot->key())) break;
 8002dea:	bf00      	nop
  return slot;
 8002dec:	68fb      	ldr	r3, [r7, #12]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>:
    set(src);
    return *this;
  }

 private:
  MemoryPool allocPool(size_t requiredSize) {
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b086      	sub	sp, #24
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
    size_t capa = addPadding(requiredSize);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fe f878 	bl	8000ef8 <_ZN19ArduinoJson6101_11010addPaddingEj>
 8002e08:	6178      	str	r0, [r7, #20]
    return MemoryPool(reinterpret_cast<char*>(this->allocate(capa)), capa);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	6979      	ldr	r1, [r7, #20]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 f888 	bl	8002f24 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>
 8002e14:	4603      	mov	r3, r0
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f7fe f87c 	bl	8000f18 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>
  }
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>:
  AllocatorOwner(TAllocator allocator) : _allocator(allocator) {}
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	7039      	strb	r1, [r7, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>:
//
// deserialize(JsonDocument&, char*);
// deserialize(JsonDocument&, const char*);
// deserialize(JsonDocument&, const __FlashStringHelper*);
template <template <typename, typename> class TDeserializer, typename TChar>
DeserializationError deserialize(JsonDocument &doc, TChar *input,
 8002e40:	b5b0      	push	{r4, r5, r7, lr}
 8002e42:	b08a      	sub	sp, #40	@ 0x28
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	713a      	strb	r2, [r7, #4]
                                 NestingLimit nestingLimit) {
  doc.clear();
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f7fe fb00 	bl	8001452 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>
  return makeDeserializer<TDeserializer>(
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f7fe fb0e 	bl	8001474 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8002e58:	4604      	mov	r4, r0
 8002e5a:	68b8      	ldr	r0, [r7, #8]
 8002e5c:	f000 f871 	bl	8002f42 <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>
 8002e60:	4605      	mov	r5, r0
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f7fe fb06 	bl	8001474 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	68b9      	ldr	r1, [r7, #8]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 f877 	bl	8002f60 <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>
 8002e72:	4602      	mov	r2, r0
 8002e74:	793b      	ldrb	r3, [r7, #4]
 8002e76:	f107 0010 	add.w	r0, r7, #16
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	462a      	mov	r2, r5
 8002e80:	4621      	mov	r1, r4
 8002e82:	f000 f87c 	bl	8002f7e <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), nestingLimit.value)
      .parse(doc.data());
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f7fe faff 	bl	800148a <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	f107 0310 	add.w	r3, r7, #16
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 f885 	bl	8002fa4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8002e9a:	4603      	mov	r3, r0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3720      	adds	r7, #32
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bdb0      	pop	{r4, r5, r7, pc}

08002ea4 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRNS_12JsonDocumentEPKcEEE4implEv>:
  }

 private:
  const TImpl *impl() const {
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 8002eac:	687b      	ldr	r3, [r7, #4]
  }
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <_ZNK19ArduinoJson6101_11012VariantCastsINS_10VariantRefEE4implEv>:
  const TImpl *impl() const {
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 8002ec2:	687b      	ldr	r3, [r7, #4]
  }
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>:
  // createNestedObject(const __FlashStringHelper*) const
  template <typename TChar>
  ObjectRef createNestedObject(TChar *key) const;

 private:
  const TObject *impl() const {
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
    return static_cast<const TObject *>(this);
 8002ed8:	687b      	ldr	r3, [r7, #4]
  }
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>:
  const TImpl *impl() const {
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 8002eee:	687b      	ldr	r3, [r7, #4]
  }
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8002efc:	b5b0      	push	{r4, r5, r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8002f06:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 f895 	bl	800303a <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8002f10:	462a      	mov	r2, r5
 8002f12:	6839      	ldr	r1, [r7, #0]
 8002f14:	4620      	mov	r0, r4
 8002f16:	f000 f89a 	bl	800304e <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8002f1a:	4603      	mov	r3, r0
    }
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bdb0      	pop	{r4, r5, r7, pc}

08002f24 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>:
  void* allocate(size_t n) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
    return _allocator.allocate(n);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6839      	ldr	r1, [r7, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe fad2 	bl	80014dc <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>
 8002f38:	4603      	mov	r3, r0
  }
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>:
    return _ptr == _end;
  }
};

template <typename TChar>
inline UnsafeCharPointerReader makeReader(TChar* input) {
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  return UnsafeCharPointerReader(reinterpret_cast<const char*>(input));
 8002f4a:	f107 030c 	add.w	r3, r7, #12
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fe fbcd 	bl	80016f0 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>
 8002f56:	68fb      	ldr	r3, [r7, #12]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>:
                                                       TInput& input) {
  return StringStorage<TInput>::create(pool, input);
}

template <typename TChar>
typename StringStorage<TChar*>::type makeStringStorage(MemoryPool& pool,
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
                                                       TChar* input) {
  return StringStorage<TChar*>::create(pool, input);
 8002f6a:	463b      	mov	r3, r7
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f87c 	bl	800306c <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>
 8002f74:	4603      	mov	r3, r0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>:
TDeserializer<TReader, TWriter> makeDeserializer(MemoryPool &pool,
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b086      	sub	sp, #24
 8002f82:	af02      	add	r7, sp, #8
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	603b      	str	r3, [r7, #0]
  return TDeserializer<TReader, TWriter>(pool, reader, writer, nestingLimit);
 8002f8c:	7e3b      	ldrb	r3, [r7, #24]
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f878 	bl	800308c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>
}
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>:
  DeserializationError parse(VariantData &variant) {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
    DeserializationError err = skipSpacesAndComments();
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f88a 	bl	80030c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8002fb8:	f107 0310 	add.w	r3, r7, #16
 8002fbc:	f107 020c 	add.w	r2, r7, #12
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe fbe0 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x3a>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f083 0301 	eor.w	r3, r3, #1
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x48>
 8002fe8:	7b3b      	ldrb	r3, [r7, #12]
 8002fea:	e022      	b.n	8003032 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
    switch (current()) {
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f94b 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b5b      	cmp	r3, #91	@ 0x5b
 8002ff6:	d002      	beq.n	8002ffe <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x5a>
 8002ff8:	2b7b      	cmp	r3, #123	@ 0x7b
 8002ffa:	d00a      	beq.n	8003012 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x6e>
 8002ffc:	e013      	b.n	8003026 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x82>
        return parseArray(variant.toArray());
 8002ffe:	6838      	ldr	r0, [r7, #0]
 8003000:	f7fe f95e 	bl	80012c0 <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>
 8003004:	4603      	mov	r3, r0
 8003006:	4619      	mov	r1, r3
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f966 	bl	80032da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>
 800300e:	4603      	mov	r3, r0
 8003010:	e00f      	b.n	8003032 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseObject(variant.toObject());
 8003012:	6838      	ldr	r0, [r7, #0]
 8003014:	f7fe f965 	bl	80012e2 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>
 8003018:	4603      	mov	r3, r0
 800301a:	4619      	mov	r1, r3
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fa83 	bl	8003528 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>
 8003022:	4603      	mov	r3, r0
 8003024:	e005      	b.n	8003032 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseValue(variant);
 8003026:	6839      	ldr	r1, [r7, #0]
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 fc40 	bl	80038ae <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>
 800302e:	4603      	mov	r3, r0
 8003030:	bf00      	nop
  }
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800304e:	b480      	push	{r7}
 8003050:	b085      	sub	sp, #20
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1ad3      	subs	r3, r2, r3
    }
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>:
  static type create(MemoryPool& pool, TInput&) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
    return type(&pool);
 8003076:	f107 030c 	add.w	r3, r7, #12
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe fb19 	bl	80016b4 <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>
 8003082:	68fb      	ldr	r3, [r7, #12]
  }
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>:
  JsonDeserializer(MemoryPool &pool, TReader reader,
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
      : _pool(&pool),
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	601a      	str	r2, [r3, #0]
        _reader(reader),
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	605a      	str	r2, [r3, #4]
        _stringStorage(stringStorage),
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	609a      	str	r2, [r3, #8]
        _nestingLimit(nestingLimit),
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	7e3a      	ldrb	r2, [r7, #24]
 80030b0:	731a      	strb	r2, [r3, #12]
        _loaded(false) {}
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	739a      	strb	r2, [r3, #14]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>:
  DeserializationError skipSpacesAndComments() {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
      switch (current()) {
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f8d9 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80030da:	f200 80c7 	bhi.w	800326c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a4>
 80030de:	a201      	add	r2, pc, #4	@ (adr r2, 80030e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1c>)
 80030e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e4:	080031a5 	.word	0x080031a5
 80030e8:	0800326d 	.word	0x0800326d
 80030ec:	0800326d 	.word	0x0800326d
 80030f0:	0800326d 	.word	0x0800326d
 80030f4:	0800326d 	.word	0x0800326d
 80030f8:	0800326d 	.word	0x0800326d
 80030fc:	0800326d 	.word	0x0800326d
 8003100:	0800326d 	.word	0x0800326d
 8003104:	0800326d 	.word	0x0800326d
 8003108:	080031b5 	.word	0x080031b5
 800310c:	080031b5 	.word	0x080031b5
 8003110:	0800326d 	.word	0x0800326d
 8003114:	0800326d 	.word	0x0800326d
 8003118:	080031b5 	.word	0x080031b5
 800311c:	0800326d 	.word	0x0800326d
 8003120:	0800326d 	.word	0x0800326d
 8003124:	0800326d 	.word	0x0800326d
 8003128:	0800326d 	.word	0x0800326d
 800312c:	0800326d 	.word	0x0800326d
 8003130:	0800326d 	.word	0x0800326d
 8003134:	0800326d 	.word	0x0800326d
 8003138:	0800326d 	.word	0x0800326d
 800313c:	0800326d 	.word	0x0800326d
 8003140:	0800326d 	.word	0x0800326d
 8003144:	0800326d 	.word	0x0800326d
 8003148:	0800326d 	.word	0x0800326d
 800314c:	0800326d 	.word	0x0800326d
 8003150:	0800326d 	.word	0x0800326d
 8003154:	0800326d 	.word	0x0800326d
 8003158:	0800326d 	.word	0x0800326d
 800315c:	0800326d 	.word	0x0800326d
 8003160:	0800326d 	.word	0x0800326d
 8003164:	080031b5 	.word	0x080031b5
 8003168:	0800326d 	.word	0x0800326d
 800316c:	0800326d 	.word	0x0800326d
 8003170:	0800326d 	.word	0x0800326d
 8003174:	0800326d 	.word	0x0800326d
 8003178:	0800326d 	.word	0x0800326d
 800317c:	0800326d 	.word	0x0800326d
 8003180:	0800326d 	.word	0x0800326d
 8003184:	0800326d 	.word	0x0800326d
 8003188:	0800326d 	.word	0x0800326d
 800318c:	0800326d 	.word	0x0800326d
 8003190:	0800326d 	.word	0x0800326d
 8003194:	0800326d 	.word	0x0800326d
 8003198:	0800326d 	.word	0x0800326d
 800319c:	0800326d 	.word	0x0800326d
 80031a0:	080031bd 	.word	0x080031bd
          return DeserializationError::IncompleteInput;
 80031a4:	f107 030c 	add.w	r3, r7, #12
 80031a8:	2101      	movs	r1, #1
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fe fadb 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80031b0:	7b3b      	ldrb	r3, [r7, #12]
 80031b2:	e064      	b.n	800327e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          move();
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fbbb 	bl	8003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          continue;
 80031ba:	e05f      	b.n	800327c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          move();  // skip '/'
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fbb7 	bl	8003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          switch (current()) {
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f860 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80031cc:	d002      	beq.n	80031d4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x10c>
 80031ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80031d0:	d02a      	beq.n	8003228 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
 80031d2:	e042      	b.n	800325a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x192>
              move();  // skip '*'
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 fbab 	bl	8003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              bool wasStar = false;
 80031da:	2300      	movs	r3, #0
 80031dc:	77fb      	strb	r3, [r7, #31]
                char c = current();
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f852 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80031e4:	4603      	mov	r3, r0
 80031e6:	777b      	strb	r3, [r7, #29]
                if (c == '\0') return DeserializationError::IncompleteInput;
 80031e8:	7f7b      	ldrb	r3, [r7, #29]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d107      	bne.n	80031fe <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x136>
 80031ee:	f107 0310 	add.w	r3, r7, #16
 80031f2:	2101      	movs	r1, #1
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fe fab6 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80031fa:	7c3b      	ldrb	r3, [r7, #16]
 80031fc:	e03f      	b.n	800327e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '/' && wasStar) {
 80031fe:	7f7b      	ldrb	r3, [r7, #29]
 8003200:	2b2f      	cmp	r3, #47	@ 0x2f
 8003202:	d107      	bne.n	8003214 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
 8003204:	7ffb      	ldrb	r3, [r7, #31]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d004      	beq.n	8003214 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
                  move();
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fb90 	bl	8003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                  break;
 8003210:	bf00      	nop
              break;
 8003212:	e02a      	b.n	800326a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
                wasStar = c == '*';
 8003214:	7f7b      	ldrb	r3, [r7, #29]
 8003216:	2b2a      	cmp	r3, #42	@ 0x2a
 8003218:	bf0c      	ite	eq
 800321a:	2301      	moveq	r3, #1
 800321c:	2300      	movne	r3, #0
 800321e:	77fb      	strb	r3, [r7, #31]
                move();
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fb85 	bl	8003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              for (;;) {
 8003226:	e7da      	b.n	80031de <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x116>
                move();
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fb81 	bl	8003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                char c = current();
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f82a 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003234:	4603      	mov	r3, r0
 8003236:	77bb      	strb	r3, [r7, #30]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8003238:	7fbb      	ldrb	r3, [r7, #30]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d107      	bne.n	800324e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x186>
 800323e:	f107 0314 	add.w	r3, r7, #20
 8003242:	2101      	movs	r1, #1
 8003244:	4618      	mov	r0, r3
 8003246:	f7fe fa8e 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800324a:	7d3b      	ldrb	r3, [r7, #20]
 800324c:	e017      	b.n	800327e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '\n') break;
 800324e:	7fbb      	ldrb	r3, [r7, #30]
 8003250:	2b0a      	cmp	r3, #10
 8003252:	d000      	beq.n	8003256 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x18e>
              for (;;) {
 8003254:	e7e8      	b.n	8003228 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
                if (c == '\n') break;
 8003256:	bf00      	nop
              break;
 8003258:	e007      	b.n	800326a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
              return DeserializationError::InvalidInput;
 800325a:	f107 0318 	add.w	r3, r7, #24
 800325e:	2102      	movs	r1, #2
 8003260:	4618      	mov	r0, r3
 8003262:	f7fe fa80 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003266:	7e3b      	ldrb	r3, [r7, #24]
 8003268:	e009      	b.n	800327e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          break;
 800326a:	e007      	b.n	800327c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          return DeserializationError::Ok;
 800326c:	f107 031c 	add.w	r3, r7, #28
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe fa77 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003278:	7f3b      	ldrb	r3, [r7, #28]
 800327a:	e000      	b.n	800327e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
    for (;;) {
 800327c:	e728      	b.n	80030d0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x8>
  }
 800327e:	4618      	mov	r0, r3
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop

08003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>:
  char current() {
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
    if (!_loaded) {
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	7b9b      	ldrb	r3, [r3, #14]
 8003294:	f083 0301 	eor.w	r3, r3, #1
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d017      	beq.n	80032ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x46>
      if (_reader.ended())
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3304      	adds	r3, #4
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe fa4a 	bl	800173c <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x2e>
        _current = 0;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	735a      	strb	r2, [r3, #13]
 80032b4:	e008      	b.n	80032c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x40>
        _current = _reader.read();
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3304      	adds	r3, #4
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe fa2e 	bl	800171c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>
 80032c0:	4603      	mov	r3, r0
 80032c2:	461a      	mov	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	735a      	strb	r2, [r3, #13]
      _loaded = true;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	739a      	strb	r2, [r3, #14]
    return _current;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	7b5b      	ldrb	r3, [r3, #13]
  }
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>:
  DeserializationError parseArray(CollectionData &array) {
 80032da:	b580      	push	{r7, lr}
 80032dc:	b098      	sub	sp, #96	@ 0x60
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	7b1b      	ldrb	r3, [r3, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d107      	bne.n	80032fc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22>
 80032ec:	f107 0310 	add.w	r3, r7, #16
 80032f0:	2105      	movs	r1, #5
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fe fa37 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80032f8:	7c3b      	ldrb	r3, [r7, #16]
 80032fa:	e111      	b.n	8003520 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003300:	235b      	movs	r3, #91	@ 0x5b
 8003302:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (current() != charToSkip) return false;
 8003306:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003308:	f7ff ffbe 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800330c:	4603      	mov	r3, r0
 800330e:	461a      	mov	r2, r3
 8003310:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003314:	4293      	cmp	r3, r2
 8003316:	bf14      	ite	ne
 8003318:	2301      	movne	r3, #1
 800331a:	2300      	moveq	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x4c>
 8003322:	2300      	movs	r3, #0
 8003324:	e003      	b.n	800332e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x54>
    move();
 8003326:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003328:	f000 fb02 	bl	8003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 800332c:	2301      	movs	r3, #1
    if (!eat('[')) return DeserializationError::InvalidInput;
 800332e:	f083 0301 	eor.w	r3, r3, #1
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d007      	beq.n	8003348 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x6e>
 8003338:	f107 0314 	add.w	r3, r7, #20
 800333c:	2102      	movs	r1, #2
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe fa11 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003344:	7d3b      	ldrb	r3, [r7, #20]
 8003346:	e0eb      	b.n	8003520 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
    DeserializationError err = skipSpacesAndComments();
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff febd 	bl	80030c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 800334e:	4603      	mov	r3, r0
 8003350:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8003352:	f107 0318 	add.w	r3, r7, #24
 8003356:	f107 020c 	add.w	r2, r7, #12
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe fa13 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d106      	bne.n	8003376 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9e>
 8003376:	2300      	movs	r3, #0
 8003378:	f083 0301 	eor.w	r3, r3, #1
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xac>
 8003382:	7b3b      	ldrb	r3, [r7, #12]
 8003384:	e0cc      	b.n	8003520 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	653b      	str	r3, [r7, #80]	@ 0x50
 800338a:	235d      	movs	r3, #93	@ 0x5d
 800338c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (current() != charToSkip) return false;
 8003390:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003392:	f7ff ff79 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003396:	4603      	mov	r3, r0
 8003398:	461a      	mov	r2, r3
 800339a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800339e:	4293      	cmp	r3, r2
 80033a0:	bf14      	ite	ne
 80033a2:	2301      	movne	r3, #1
 80033a4:	2300      	moveq	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xd6>
 80033ac:	2300      	movs	r3, #0
 80033ae:	e003      	b.n	80033b8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xde>
    move();
 80033b0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80033b2:	f000 fabd 	bl	8003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80033b6:	2301      	movs	r3, #1
    if (eat(']')) return DeserializationError::Ok;
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 80033bc:	f107 0320 	add.w	r3, r7, #32
 80033c0:	2100      	movs	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe f9cf 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80033c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033cc:	e0a8      	b.n	8003520 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      VariantData *value = array.add(_pool);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4619      	mov	r1, r3
 80033d4:	6838      	ldr	r0, [r7, #0]
 80033d6:	f7fe f8c4 	bl	8001562 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>
 80033da:	65f8      	str	r0, [r7, #92]	@ 0x5c
      if (!value) return DeserializationError::NoMemory;
 80033dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d108      	bne.n	80033f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x11a>
 80033e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033e6:	2103      	movs	r1, #3
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fe f9bc 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80033ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80033f2:	e095      	b.n	8003520 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      _nestingLimit--;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	7b1b      	ldrb	r3, [r3, #12]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	731a      	strb	r2, [r3, #12]
      err = parse(*value);
 8003400:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff fdce 	bl	8002fa4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8003408:	4603      	mov	r3, r0
 800340a:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	7b1b      	ldrb	r3, [r3, #12]
 8003410:	3301      	adds	r3, #1
 8003412:	b2da      	uxtb	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 8003418:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800341c:	f107 020c 	add.w	r2, r7, #12
 8003420:	4611      	mov	r1, r2
 8003422:	4618      	mov	r0, r3
 8003424:	f7fe f9b0 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 800342e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x164>
 800343c:	2300      	movs	r3, #0
 800343e:	f083 0301 	eor.w	r3, r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x172>
 8003448:	7b3b      	ldrb	r3, [r7, #12]
 800344a:	e069      	b.n	8003520 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      err = skipSpacesAndComments();
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff fe3b 	bl	80030c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8003452:	4603      	mov	r3, r0
 8003454:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8003456:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800345a:	f107 020c 	add.w	r2, r7, #12
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f7fe f991 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 800346c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a2>
 800347a:	2300      	movs	r3, #0
 800347c:	f083 0301 	eor.w	r3, r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1b0>
 8003486:	7b3b      	ldrb	r3, [r7, #12]
 8003488:	e04a      	b.n	8003520 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800348e:	235d      	movs	r3, #93	@ 0x5d
 8003490:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (current() != charToSkip) return false;
 8003494:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003496:	f7ff fef7 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800349a:	4603      	mov	r3, r0
 800349c:	461a      	mov	r2, r3
 800349e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80034a2:	4293      	cmp	r3, r2
 80034a4:	bf14      	ite	ne
 80034a6:	2301      	movne	r3, #1
 80034a8:	2300      	moveq	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1da>
 80034b0:	2300      	movs	r3, #0
 80034b2:	e003      	b.n	80034bc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1e2>
    move();
 80034b4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80034b6:	f000 fa3b 	bl	8003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80034ba:	2301      	movs	r3, #1
      if (eat(']')) return DeserializationError::Ok;
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1f8>
 80034c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fe f94d 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80034cc:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80034d0:	e026      	b.n	8003520 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80034d6:	232c      	movs	r3, #44	@ 0x2c
 80034d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (current() != charToSkip) return false;
 80034dc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80034de:	f7ff fed3 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80034e2:	4603      	mov	r3, r0
 80034e4:	461a      	mov	r2, r3
 80034e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80034ea:	4293      	cmp	r3, r2
 80034ec:	bf14      	ite	ne
 80034ee:	2301      	movne	r3, #1
 80034f0:	2300      	moveq	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x222>
 80034f8:	2300      	movs	r3, #0
 80034fa:	e003      	b.n	8003504 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22a>
    move();
 80034fc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80034fe:	f000 fa17 	bl	8003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003502:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 8003504:	f083 0301 	eor.w	r3, r3, #1
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	f43f af5f 	beq.w	80033ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 8003510:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003514:	2102      	movs	r1, #2
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe f925 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800351c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
  }
 8003520:	4618      	mov	r0, r3
 8003522:	3760      	adds	r7, #96	@ 0x60
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>:
  DeserializationError parseObject(CollectionData &object) {
 8003528:	b590      	push	{r4, r7, lr}
 800352a:	b0a3      	sub	sp, #140	@ 0x8c
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	7b1b      	ldrb	r3, [r3, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d107      	bne.n	800354a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x22>
 800353a:	f107 0310 	add.w	r3, r7, #16
 800353e:	2105      	movs	r1, #5
 8003540:	4618      	mov	r0, r3
 8003542:	f7fe f910 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003546:	7c3b      	ldrb	r3, [r7, #16]
 8003548:	e1ad      	b.n	80038a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003550:	237b      	movs	r3, #123	@ 0x7b
 8003552:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (current() != charToSkip) return false;
 8003556:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800355a:	f7ff fe95 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800355e:	4603      	mov	r3, r0
 8003560:	461a      	mov	r2, r3
 8003562:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003566:	4293      	cmp	r3, r2
 8003568:	bf14      	ite	ne
 800356a:	2301      	movne	r3, #1
 800356c:	2300      	moveq	r3, #0
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x50>
 8003574:	2300      	movs	r3, #0
 8003576:	e004      	b.n	8003582 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x5a>
    move();
 8003578:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800357c:	f000 f9d8 	bl	8003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003580:	2301      	movs	r3, #1
    if (!eat('{')) return DeserializationError::InvalidInput;
 8003582:	f083 0301 	eor.w	r3, r3, #1
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x74>
 800358c:	f107 0314 	add.w	r3, r7, #20
 8003590:	2102      	movs	r1, #2
 8003592:	4618      	mov	r0, r3
 8003594:	f7fe f8e7 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003598:	7d3b      	ldrb	r3, [r7, #20]
 800359a:	e184      	b.n	80038a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
    DeserializationError err = skipSpacesAndComments();
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff fd93 	bl	80030c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80035a2:	4603      	mov	r3, r0
 80035a4:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 80035a6:	f107 0318 	add.w	r3, r7, #24
 80035aa:	f107 020c 	add.w	r2, r7, #12
 80035ae:	4611      	mov	r1, r2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fe f8e9 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d106      	bne.n	80035ca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa4>
 80035ca:	2300      	movs	r3, #0
 80035cc:	f083 0301 	eor.w	r3, r3, #1
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xb2>
 80035d6:	7b3b      	ldrb	r3, [r7, #12]
 80035d8:	e165      	b.n	80038a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035de:	237d      	movs	r3, #125	@ 0x7d
 80035e0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (current() != charToSkip) return false;
 80035e4:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80035e6:	f7ff fe4f 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80035ea:	4603      	mov	r3, r0
 80035ec:	461a      	mov	r2, r3
 80035ee:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80035f2:	4293      	cmp	r3, r2
 80035f4:	bf14      	ite	ne
 80035f6:	2301      	movne	r3, #1
 80035f8:	2300      	moveq	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xdc>
 8003600:	2300      	movs	r3, #0
 8003602:	e003      	b.n	800360c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xe4>
    move();
 8003604:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8003606:	f000 f993 	bl	8003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 800360a:	2301      	movs	r3, #1
    if (eat('}')) return DeserializationError::Ok;
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 8003610:	f107 0320 	add.w	r3, r7, #32
 8003614:	2100      	movs	r1, #0
 8003616:	4618      	mov	r0, r3
 8003618:	f7fe f8a5 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800361c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003620:	e141      	b.n	80038a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      VariantSlot *slot = object.addSlot(_pool);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4619      	mov	r1, r3
 8003628:	6838      	ldr	r0, [r7, #0]
 800362a:	f7fd ff70 	bl	800150e <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 800362e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
      if (!slot) return DeserializationError::NoMemory;
 8003632:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003636:	2b00      	cmp	r3, #0
 8003638:	d108      	bne.n	800364c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x124>
 800363a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800363e:	2103      	movs	r1, #3
 8003640:	4618      	mov	r0, r3
 8003642:	f7fe f890 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003646:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800364a:	e12c      	b.n	80038a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = parseKey(key);
 800364c:	f107 0308 	add.w	r3, r7, #8
 8003650:	4619      	mov	r1, r3
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f979 	bl	800394a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>
 8003658:	4603      	mov	r3, r0
 800365a:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 800365c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003660:	f107 020c 	add.w	r2, r7, #12
 8003664:	4611      	mov	r1, r2
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe f88e 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800366c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 8003672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x15a>
 8003680:	2300      	movs	r3, #0
 8003682:	f083 0301 	eor.w	r3, r3, #1
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x168>
 800368c:	7b3b      	ldrb	r3, [r7, #12]
 800368e:	e10a      	b.n	80038a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      slot->setOwnedKey(make_not_null(key));
 8003690:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fa3b 	bl	8002b12 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 800369c:	4603      	mov	r3, r0
 800369e:	4619      	mov	r1, r3
 80036a0:	4620      	mov	r0, r4
 80036a2:	f7fd fbf3 	bl	8000e8c <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>
      err = skipSpacesAndComments();
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff fd0e 	bl	80030c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80036ac:	4603      	mov	r3, r0
 80036ae:	733b      	strb	r3, [r7, #12]
      if (err) return err;  // Colon
 80036b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80036b4:	f107 020c 	add.w	r2, r7, #12
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe f864 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80036c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 80036c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ae>
 80036d4:	2300      	movs	r3, #0
 80036d6:	f083 0301 	eor.w	r3, r3, #1
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1bc>
 80036e0:	7b3b      	ldrb	r3, [r7, #12]
 80036e2:	e0e0      	b.n	80038a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80036e8:	233a      	movs	r3, #58	@ 0x3a
 80036ea:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (current() != charToSkip) return false;
 80036ee:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80036f0:	f7ff fdca 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80036f4:	4603      	mov	r3, r0
 80036f6:	461a      	mov	r2, r3
 80036f8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80036fc:	4293      	cmp	r3, r2
 80036fe:	bf14      	ite	ne
 8003700:	2301      	movne	r3, #1
 8003702:	2300      	moveq	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1e6>
 800370a:	2300      	movs	r3, #0
 800370c:	e003      	b.n	8003716 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ee>
    move();
 800370e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003710:	f000 f90e 	bl	8003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003714:	2301      	movs	r3, #1
      if (!eat(':')) return DeserializationError::InvalidInput;
 8003716:	f083 0301 	eor.w	r3, r3, #1
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x20a>
 8003720:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003724:	2102      	movs	r1, #2
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe f81d 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800372c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003730:	e0b9      	b.n	80038a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      _nestingLimit--;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	7b1b      	ldrb	r3, [r3, #12]
 8003736:	3b01      	subs	r3, #1
 8003738:	b2da      	uxtb	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	731a      	strb	r2, [r3, #12]
      err = parse(*slot->data());
 800373e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003742:	f7fd fb6f 	bl	8000e24 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 8003746:	4603      	mov	r3, r0
 8003748:	4619      	mov	r1, r3
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff fc2a 	bl	8002fa4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8003750:	4603      	mov	r3, r0
 8003752:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	7b1b      	ldrb	r3, [r3, #12]
 8003758:	3301      	adds	r3, #1
 800375a:	b2da      	uxtb	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 8003760:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003764:	f107 020c 	add.w	r2, r7, #12
 8003768:	4611      	mov	r1, r2
 800376a:	4618      	mov	r0, r3
 800376c:	f7fe f80c 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 8003776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25e>
 8003784:	2300      	movs	r3, #0
 8003786:	f083 0301 	eor.w	r3, r3, #1
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x26c>
 8003790:	7b3b      	ldrb	r3, [r7, #12]
 8003792:	e088      	b.n	80038a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff fc97 	bl	80030c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 800379a:	4603      	mov	r3, r0
 800379c:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 800379e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80037a2:	f107 020c 	add.w	r2, r7, #12
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fd ffed 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80037ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d106      	bne.n	80037c2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 80037b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29c>
 80037c2:	2300      	movs	r3, #0
 80037c4:	f083 0301 	eor.w	r3, r3, #1
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2aa>
 80037ce:	7b3b      	ldrb	r3, [r7, #12]
 80037d0:	e069      	b.n	80038a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037d6:	237d      	movs	r3, #125	@ 0x7d
 80037d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (current() != charToSkip) return false;
 80037dc:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80037de:	f7ff fd53 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80037e2:	4603      	mov	r3, r0
 80037e4:	461a      	mov	r2, r3
 80037e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80037ea:	4293      	cmp	r3, r2
 80037ec:	bf14      	ite	ne
 80037ee:	2301      	movne	r3, #1
 80037f0:	2300      	moveq	r3, #0
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2d4>
 80037f8:	2300      	movs	r3, #0
 80037fa:	e003      	b.n	8003804 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2dc>
    move();
 80037fc:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80037fe:	f000 f897 	bl	8003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003802:	2301      	movs	r3, #1
      if (eat('}')) return DeserializationError::Ok;
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2f2>
 8003808:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800380c:	2100      	movs	r1, #0
 800380e:	4618      	mov	r0, r3
 8003810:	f7fd ffa9 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003814:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003818:	e045      	b.n	80038a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	663b      	str	r3, [r7, #96]	@ 0x60
 800381e:	232c      	movs	r3, #44	@ 0x2c
 8003820:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (current() != charToSkip) return false;
 8003824:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003826:	f7ff fd2f 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800382a:	4603      	mov	r3, r0
 800382c:	461a      	mov	r2, r3
 800382e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003832:	4293      	cmp	r3, r2
 8003834:	bf14      	ite	ne
 8003836:	2301      	movne	r3, #1
 8003838:	2300      	moveq	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x31c>
 8003840:	2300      	movs	r3, #0
 8003842:	e003      	b.n	800384c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x324>
    move();
 8003844:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003846:	f000 f873 	bl	8003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 800384a:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 800384c:	f083 0301 	eor.w	r3, r3, #1
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x340>
 8003856:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800385a:	2102      	movs	r1, #2
 800385c:	4618      	mov	r0, r3
 800385e:	f7fd ff82 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003862:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8003866:	e01e      	b.n	80038a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff fc2d 	bl	80030c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 800386e:	4603      	mov	r3, r0
 8003870:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8003872:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003876:	f107 020c 	add.w	r2, r7, #12
 800387a:	4611      	mov	r1, r2
 800387c:	4618      	mov	r0, r3
 800387e:	f7fd ff83 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003884:	2b00      	cmp	r3, #0
 8003886:	d106      	bne.n	8003896 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 8003888:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x370>
 8003896:	2300      	movs	r3, #0
 8003898:	f083 0301 	eor.w	r3, r3, #1
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f43f aebf 	beq.w	8003622 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 80038a4:	7b3b      	ldrb	r3, [r7, #12]
  }
 80038a6:	4618      	mov	r0, r3
 80038a8:	378c      	adds	r7, #140	@ 0x8c
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd90      	pop	{r4, r7, pc}

080038ae <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>:
  DeserializationError parseValue(VariantData &variant) {
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b082      	sub	sp, #8
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff fce5 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80038be:	4603      	mov	r3, r0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 f861 	bl	8003988 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x2a>
      return parseStringValue(variant);
 80038cc:	6839      	ldr	r1, [r7, #0]
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f86e 	bl	80039b0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>
 80038d4:	4603      	mov	r3, r0
 80038d6:	e005      	b.n	80038e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x36>
      return parseNumericValue(variant);
 80038d8:	6839      	ldr	r1, [r7, #0]
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f8a3 	bl	8003a26 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>
 80038e0:	4603      	mov	r3, r0
 80038e2:	bf00      	nop
  }
 80038e4:	4618      	mov	r0, r3
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>:

template <typename T>
inline typename enable_if<is_same<T, const char*>::value ||
                              is_same<T, char*>::value,
                          const char*>::type
variantAs(const VariantData* _data) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  return _data != 0 ? _data->asString() : 0;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d004      	beq.n	8003904 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE+0x18>
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fd fe67 	bl	80015ce <_ZNK19ArduinoJson6101_11011VariantData8asStringEv>
 8003900:	4603      	mov	r3, r0
 8003902:	e000      	b.n	8003906 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE+0x1a>
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>:
inline typename enable_if<is_integral<T>::value, T>::type variantAs(
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  return _data != 0 ? _data->asIntegral<T>() : T(0);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d004      	beq.n	8003926 <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x18>
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f96d 	bl	8003bfc <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v>
 8003922:	4603      	mov	r3, r0
 8003924:	e000      	b.n	8003928 <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x1a>
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>:
  void move() {
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
    _loaded = false;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	739a      	strb	r2, [r3, #14]
  }
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>:
  DeserializationError parseKey(const char *&key) {
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff fc97 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800395a:	4603      	mov	r3, r0
 800395c:	4618      	mov	r0, r3
 800395e:	f000 f813 	bl	8003988 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x2a>
      return parseQuotedString(key);
 8003968:	6839      	ldr	r1, [r7, #0]
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f988 	bl	8003c80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 8003970:	4603      	mov	r3, r0
 8003972:	e005      	b.n	8003980 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x36>
      return parseNonQuotedString(key);
 8003974:	6839      	ldr	r1, [r7, #0]
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fa1a 	bl	8003db0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>
 800397c:	4603      	mov	r3, r0
 800397e:	bf00      	nop
  }
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	2b27      	cmp	r3, #39	@ 0x27
 8003996:	d002      	beq.n	800399e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x16>
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	2b22      	cmp	r3, #34	@ 0x22
 800399c:	d101      	bne.n	80039a2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1a>
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1c>
 80039a2:	2300      	movs	r3, #0
  }
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>:
  DeserializationError parseStringValue(VariantData &variant) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
    DeserializationError err = parseQuotedString(value);
 80039ba:	f107 0310 	add.w	r3, r7, #16
 80039be:	4619      	mov	r1, r3
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f95d 	bl	8003c80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 80039c6:	4603      	mov	r3, r0
 80039c8:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 80039ca:	f107 0314 	add.w	r3, r7, #20
 80039ce:	f107 020c 	add.w	r2, r7, #12
 80039d2:	4611      	mov	r1, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fd fed7 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d106      	bne.n	80039ee <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x40>
 80039ee:	2300      	movs	r3, #0
 80039f0:	f083 0301 	eor.w	r3, r3, #1
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x4e>
 80039fa:	7b3b      	ldrb	r3, [r7, #12]
 80039fc:	e00f      	b.n	8003a1e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x6e>
    variant.setOwnedString(make_not_null(value));
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff f886 	bl	8002b12 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 8003a06:	4603      	mov	r3, r0
 8003a08:	4619      	mov	r1, r3
 8003a0a:	6838      	ldr	r0, [r7, #0]
 8003a0c:	f7fd fc44 	bl	8001298 <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>
    return DeserializationError::Ok;
 8003a10:	f107 031c 	add.w	r3, r7, #28
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fd fea5 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003a1c:	7f3b      	ldrb	r3, [r7, #28]
  }
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3720      	adds	r7, #32
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>:
  DeserializationError parseNumericValue(VariantData &result) {
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b0a0      	sub	sp, #128	@ 0x80
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    char c = current();
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff fc26 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 8003a42:	e013      	b.n	8003a6c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x46>
      move();
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff ff73 	bl	8003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      buffer[n++] = c;
 8003a4a:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8003a4e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003a52:	1c59      	adds	r1, r3, #1
 8003a54:	f887 107f 	strb.w	r1, [r7, #127]	@ 0x7f
 8003a58:	3380      	adds	r3, #128	@ 0x80
 8003a5a:	443b      	add	r3, r7
 8003a5c:	f803 2c5c 	strb.w	r2, [r3, #-92]
      c = current();
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff fc11 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 8003a6c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fa08 	bl	8003e86 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 8003a7c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003a80:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a82:	d801      	bhi.n	8003a88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x64>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1da      	bne.n	8003a44 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1e>
    buffer[n] = 0;
 8003a8e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003a92:	3380      	adds	r3, #128	@ 0x80
 8003a94:	443b      	add	r3, r7
 8003a96:	2200      	movs	r2, #0
 8003a98:	f803 2c5c 	strb.w	r2, [r3, #-92]
    c = buffer[0];
 8003a9c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003aa0:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    if (c == 't') {  // true
 8003aa4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8003aa8:	2b74      	cmp	r3, #116	@ 0x74
 8003aaa:	d114      	bne.n	8003ad6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xb0>
      result.setBoolean(true);
 8003aac:	2101      	movs	r1, #1
 8003aae:	6838      	ldr	r0, [r7, #0]
 8003ab0:	f7fd fb98 	bl	80011e4 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 4 ? DeserializationError::Ok
 8003ab4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003ac8:	4611      	mov	r1, r2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fd fe4b 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003ad0:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8003ad4:	e077      	b.n	8003bc6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'f') {  // false
 8003ad6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8003ada:	2b66      	cmp	r3, #102	@ 0x66
 8003adc:	d114      	bne.n	8003b08 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xe2>
      result.setBoolean(false);
 8003ade:	2100      	movs	r1, #0
 8003ae0:	6838      	ldr	r0, [r7, #0]
 8003ae2:	f7fd fb7f 	bl	80011e4 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 5 ? DeserializationError::Ok
 8003ae6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003aea:	2b05      	cmp	r3, #5
 8003aec:	bf14      	ite	ne
 8003aee:	2301      	movne	r3, #1
 8003af0:	2300      	moveq	r3, #0
 8003af2:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 8003af4:	461a      	mov	r2, r3
 8003af6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003afa:	4611      	mov	r1, r2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fd fe32 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003b02:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8003b06:	e05e      	b.n	8003bc6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'n') {  // null
 8003b08:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8003b0c:	2b6e      	cmp	r3, #110	@ 0x6e
 8003b0e:	d110      	bne.n	8003b32 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x10c>
      return n == 4 ? DeserializationError::Ok
 8003b10:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	bf14      	ite	ne
 8003b18:	2301      	movne	r3, #1
 8003b1a:	2300      	moveq	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003b24:	4611      	mov	r1, r2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fd fe1d 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003b2c:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8003b30:	e049      	b.n	8003bc6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    ParsedNumber<Float, UInt> num = parseNumber<Float, UInt>(buffer);
 8003b32:	f107 0308 	add.w	r3, r7, #8
 8003b36:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 f9d3 	bl	8003ee8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
    switch (num.type()) {
 8003b42:	f107 0308 	add.w	r3, r7, #8
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fbd4 	bl	80042f4 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d021      	beq.n	8003b96 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x170>
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	dc2f      	bgt.n	8003bb6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
 8003b56:	2b06      	cmp	r3, #6
 8003b58:	d00f      	beq.n	8003b7a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x154>
 8003b5a:	2b07      	cmp	r3, #7
 8003b5c:	d12b      	bne.n	8003bb6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
        result.setNegativeInteger(num.uintValue);
 8003b5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b62:	6838      	ldr	r0, [r7, #0]
 8003b64:	f7fd fb79 	bl	800125a <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>
        return DeserializationError::Ok;
 8003b68:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fd fdf9 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003b74:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8003b78:	e025      	b.n	8003bc6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setPositiveInteger(num.uintValue);
 8003b7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b7e:	6838      	ldr	r0, [r7, #0]
 8003b80:	f7fd fb58 	bl	8001234 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>
        return DeserializationError::Ok;
 8003b84:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fd fdeb 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003b90:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8003b94:	e017      	b.n	8003bc6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setFloat(num.floatValue);
 8003b96:	ed97 7b04 	vldr	d7, [r7, #16]
 8003b9a:	eeb0 0b47 	vmov.f64	d0, d7
 8003b9e:	6838      	ldr	r0, [r7, #0]
 8003ba0:	f7fd fb35 	bl	800120e <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>
        return DeserializationError::Ok;
 8003ba4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003ba8:	2100      	movs	r1, #0
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fd fddb 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003bb0:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8003bb4:	e007      	b.n	8003bc6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    return DeserializationError::InvalidInput;
 8003bb6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003bba:	2102      	movs	r1, #2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fd fdd2 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003bc2:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
  }
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3780      	adds	r7, #128	@ 0x80
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>:
  VariantData *getMember(TAdaptedString key) const {
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
    return isObject() ? _content.asCollection.get(key) : 0;
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7fd faf0 	bl	80011be <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d006      	beq.n	8003bf2 <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_+0x24>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6839      	ldr	r1, [r7, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fe ffce 	bl	8002b8a <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	e000      	b.n	8003bf4 <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_+0x26>
 8003bf2:	2300      	movs	r3, #0
  }
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v>:
inline T VariantData::asIntegral() const {
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  switch (type()) {
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7fd fb7d 	bl	8001304 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	3b03      	subs	r3, #3
 8003c0e:	2b05      	cmp	r3, #5
 8003c10:	d830      	bhi.n	8003c74 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x78>
 8003c12:	a201      	add	r2, pc, #4	@ (adr r2, 8003c18 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x1c>)
 8003c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c18:	08003c55 	.word	0x08003c55
 8003c1c:	08003c55 	.word	0x08003c55
 8003c20:	08003c31 	.word	0x08003c31
 8003c24:	08003c31 	.word	0x08003c31
 8003c28:	08003c43 	.word	0x08003c43
 8003c2c:	08003c63 	.word	0x08003c63
      return convertPositiveInteger<T>(_content.asInteger);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c36:	4610      	mov	r0, r2
 8003c38:	4619      	mov	r1, r3
 8003c3a:	f000 fb7c 	bl	8004336 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	e019      	b.n	8003c76 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return convertNegativeInteger<T>(_content.asInteger);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	f000 fb86 	bl	800435c <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>
 8003c50:	4603      	mov	r3, r0
 8003c52:	e010      	b.n	8003c76 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return parseInteger<T>(_content.asString);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fb93 	bl	8004384 <_ZN19ArduinoJson6101_11012parseIntegerImEET_PKc>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	e009      	b.n	8003c76 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return convertFloat<T>(_content.asFloat);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	ed93 7b00 	vldr	d7, [r3]
 8003c68:	eeb0 0b47 	vmov.f64	d0, d7
 8003c6c:	f000 fb9e 	bl	80043ac <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>
 8003c70:	4603      	mov	r3, r0
 8003c72:	e000      	b.n	8003c76 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return 0;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop

08003c80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>:
  DeserializationError parseQuotedString(const char *&result) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08c      	sub	sp, #48	@ 0x30
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f103 0208 	add.w	r2, r3, #8
 8003c90:	f107 0308 	add.w	r3, r7, #8
 8003c94:	4611      	mov	r1, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fd fd1b 	bl	80016d2 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    const char stopChar = current();
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff faf3 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    move();
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff fe41 	bl	8003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      char c = current();
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff faea 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      move();
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff fe38 	bl	8003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      if (c == stopChar) break;
 8003cc0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003cc4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d04f      	beq.n	8003d6c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xec>
      if (c == '\0') return DeserializationError::IncompleteInput;
 8003ccc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d107      	bne.n	8003ce4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x64>
 8003cd4:	f107 0318 	add.w	r3, r7, #24
 8003cd8:	2101      	movs	r1, #1
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fd fd43 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003ce0:	7e3b      	ldrb	r3, [r7, #24]
 8003ce2:	e061      	b.n	8003da8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
      if (c == '\\') {
 8003ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003ce8:	2b5c      	cmp	r3, #92	@ 0x5c
 8003cea:	d136      	bne.n	8003d5a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xda>
        c = current();
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff facb 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::IncompleteInput;
 8003cf8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d107      	bne.n	8003d10 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x90>
 8003d00:	f107 031c 	add.w	r3, r7, #28
 8003d04:	2101      	movs	r1, #1
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fd fd2d 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003d0c:	7f3b      	ldrb	r3, [r7, #28]
 8003d0e:	e04b      	b.n	8003da8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        if (c == 'u') {
 8003d10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003d14:	2b75      	cmp	r3, #117	@ 0x75
 8003d16:	d108      	bne.n	8003d2a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xaa>
          return DeserializationError::NotSupported;
 8003d18:	f107 0320 	add.w	r3, r7, #32
 8003d1c:	2104      	movs	r1, #4
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fd fd21 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003d24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d28:	e03e      	b.n	8003da8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        c = EscapeSequence::unescapeChar(c);
 8003d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd fd9c 	bl	800186c <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::InvalidInput;
 8003d3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d108      	bne.n	8003d54 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xd4>
 8003d42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d46:	2102      	movs	r1, #2
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fd fd0c 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003d4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003d52:	e029      	b.n	8003da8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        move();
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff fdeb 	bl	8003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      builder.append(c);
 8003d5a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003d5e:	f107 0308 	add.w	r3, r7, #8
 8003d62:	4611      	mov	r1, r2
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fd fc64 	bl	8001632 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    for (;;) {
 8003d6a:	e7a0      	b.n	8003cae <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x2e>
      if (c == stopChar) break;
 8003d6c:	bf00      	nop
    result = builder.complete();
 8003d6e:	f107 0308 	add.w	r3, r7, #8
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fd fc82 	bl	800167c <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d108      	bne.n	8003d98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x118>
 8003d86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d8a:	2103      	movs	r1, #3
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fd fcea 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003d92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003d96:	e007      	b.n	8003da8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
    return DeserializationError::Ok;
 8003d98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fd fce1 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003da4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
  }
 8003da8:	4618      	mov	r0, r3
 8003daa:	3730      	adds	r7, #48	@ 0x30
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>:
  DeserializationError parseNonQuotedString(const char *&result) {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	@ 0x28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f103 0208 	add.w	r2, r3, #8
 8003dc0:	f107 0308 	add.w	r3, r7, #8
 8003dc4:	4611      	mov	r1, r2
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fd fc83 	bl	80016d2 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    char c = current();
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff fa5b 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (c == '\0') return DeserializationError::IncompleteInput;
 8003dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d107      	bne.n	8003df0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x40>
 8003de0:	f107 0318 	add.w	r3, r7, #24
 8003de4:	2101      	movs	r1, #1
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fd fcbd 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003dec:	7e3b      	ldrb	r3, [r7, #24]
 8003dee:	e046      	b.n	8003e7e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    if (canBeInNonQuotedString(c)) {  // no quotes
 8003df0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 f846 	bl	8003e86 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d019      	beq.n	8003e34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x84>
        move();
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff fd95 	bl	8003930 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
        builder.append(c);
 8003e06:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003e0a:	f107 0308 	add.w	r3, r7, #8
 8003e0e:	4611      	mov	r1, r2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fd fc0e 	bl	8001632 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
        c = current();
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff fa36 	bl	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      } while (canBeInNonQuotedString(c));
 8003e22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 f82d 	bl	8003e86 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1e6      	bne.n	8003e00 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x50>
 8003e32:	e007      	b.n	8003e44 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x94>
      return DeserializationError::InvalidInput;
 8003e34:	f107 031c 	add.w	r3, r7, #28
 8003e38:	2102      	movs	r1, #2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fd fc93 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003e40:	7f3b      	ldrb	r3, [r7, #28]
 8003e42:	e01c      	b.n	8003e7e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    result = builder.complete();
 8003e44:	f107 0308 	add.w	r3, r7, #8
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fd fc17 	bl	800167c <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d108      	bne.n	8003e6e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xbe>
 8003e5c:	f107 0320 	add.w	r3, r7, #32
 8003e60:	2103      	movs	r1, #3
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fd fc7f 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003e68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e6c:	e007      	b.n	8003e7e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    return DeserializationError::Ok;
 8003e6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e72:	2100      	movs	r1, #0
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fd fc76 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003e7a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
  }
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3728      	adds	r7, #40	@ 0x28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b082      	sub	sp, #8
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	2239      	movs	r2, #57	@ 0x39
 8003e94:	2130      	movs	r1, #48	@ 0x30
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fab3 	bl	8004402 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8003e9c:	4603      	mov	r3, r0
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d11a      	bne.n	8003ed8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	227a      	movs	r2, #122	@ 0x7a
 8003ea6:	215f      	movs	r1, #95	@ 0x5f
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 faaa 	bl	8004402 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d111      	bne.n	8003ed8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	225a      	movs	r2, #90	@ 0x5a
 8003eb8:	2141      	movs	r1, #65	@ 0x41
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 faa1 	bl	8004402 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8003ec0:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d108      	bne.n	8003ed8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	2b2b      	cmp	r3, #43	@ 0x2b
 8003eca:	d005      	beq.n	8003ed8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 8003ecc:	79fb      	ldrb	r3, [r7, #7]
 8003ece:	2b2d      	cmp	r3, #45	@ 0x2d
 8003ed0:	d002      	beq.n	8003ed8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ed6:	d101      	bne.n	8003edc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x56>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x58>
 8003edc:	2300      	movs	r3, #0
  }
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>:

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
 8003ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eec:	b0a2      	sub	sp, #136	@ 0x88
 8003eee:	af02      	add	r7, sp, #8
 8003ef0:	6478      	str	r0, [r7, #68]	@ 0x44
 8003ef2:	6439      	str	r1, [r7, #64]	@ 0x40
  typedef typename traits::exponent_type exponent_t;
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (*s) {
 8003efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b2b      	cmp	r3, #43	@ 0x2b
 8003f00:	d008      	beq.n	8003f14 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2c>
 8003f02:	2b2d      	cmp	r3, #45	@ 0x2d
 8003f04:	d10a      	bne.n	8003f1c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '-':
      is_negative = true;
 8003f06:	2301      	movs	r3, #1
 8003f08:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 8003f0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f0e:	3301      	adds	r3, #1
 8003f10:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003f12:	e003      	b.n	8003f1c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '+':
      s++;
 8003f14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f16:	3301      	adds	r3, #1
 8003f18:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003f1a:	bf00      	nop
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
 8003f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b6e      	cmp	r3, #110	@ 0x6e
 8003f22:	d003      	beq.n	8003f2c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x44>
 8003f24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b4e      	cmp	r3, #78	@ 0x4e
 8003f2a:	d109      	bne.n	8003f40 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x58>
 8003f2c:	f000 fa84 	bl	8004438 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>
 8003f30:	eeb0 7b40 	vmov.f64	d7, d0
 8003f34:	eeb0 0b47 	vmov.f64	d0, d7
 8003f38:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003f3a:	f000 fa8b 	bl	8004454 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8003f3e:	e1d4      	b.n	80042ea <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (*s == 'i' || *s == 'I')
 8003f40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b69      	cmp	r3, #105	@ 0x69
 8003f46:	d003      	beq.n	8003f50 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x68>
 8003f48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b49      	cmp	r3, #73	@ 0x49
 8003f4e:	d114      	bne.n	8003f7a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x92>
    return is_negative ? -traits::inf() : traits::inf();
 8003f50:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d006      	beq.n	8003f66 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x7e>
 8003f58:	f000 fa92 	bl	8004480 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8003f5c:	eeb0 7b40 	vmov.f64	d7, d0
 8003f60:	eeb1 7b47 	vneg.f64	d7, d7
 8003f64:	e003      	b.n	8003f6e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x86>
 8003f66:	f000 fa8b 	bl	8004480 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8003f6a:	eeb0 7b40 	vmov.f64	d7, d0
 8003f6e:	eeb0 0b47 	vmov.f64	d0, d7
 8003f72:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003f74:	f000 fa6e 	bl	8004454 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8003f78:	e1b7      	b.n	80042ea <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (!isdigit(*s) && *s != '.') return return_type();
 8003f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fd fb11 	bl	80015a6 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f083 0301 	eor.w	r3, r3, #1
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8003f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f96:	d001      	beq.n	8003f9c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb6>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xc2>
 8003fa2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003fa4:	f000 fa7a 	bl	800449c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8003fa8:	e19f      	b.n	80042ea <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  mantissa_t mantissa = 0;
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	f04f 0300 	mov.w	r3, #0
 8003fb2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  exponent_t exponent_offset = 0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  const mantissa_t maxUint = TUInt(-1);
 8003fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc4:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

  while (isdigit(*s)) {
 8003fc8:	e054      	b.n	8004074 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x18c>
    uint8_t digit = uint8_t(*s - '0');
 8003fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	3b30      	subs	r3, #48	@ 0x30
 8003fd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (mantissa > maxUint / 10) break;
 8003fd4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003fd8:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8003fdc:	49b2      	ldr	r1, [pc, #712]	@ (80042a8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c0>)
 8003fde:	418b      	sbcs	r3, r1
 8003fe0:	d251      	bcs.n	8004086 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x19e>
    mantissa *= 10;
 8003fe2:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8003fe6:	4622      	mov	r2, r4
 8003fe8:	462b      	mov	r3, r5
 8003fea:	f04f 0000 	mov.w	r0, #0
 8003fee:	f04f 0100 	mov.w	r1, #0
 8003ff2:	0099      	lsls	r1, r3, #2
 8003ff4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003ff8:	0090      	lsls	r0, r2, #2
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	eb12 0804 	adds.w	r8, r2, r4
 8004002:	eb43 0905 	adc.w	r9, r3, r5
 8004006:	eb18 0308 	adds.w	r3, r8, r8
 800400a:	61bb      	str	r3, [r7, #24]
 800400c:	eb49 0309 	adc.w	r3, r9, r9
 8004010:	61fb      	str	r3, [r7, #28]
 8004012:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004016:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
    if (mantissa > maxUint - digit) break;
 800401a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800401e:	2200      	movs	r2, #0
 8004020:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004022:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004024:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004028:	460b      	mov	r3, r1
 800402a:	43db      	mvns	r3, r3
 800402c:	633b      	str	r3, [r7, #48]	@ 0x30
 800402e:	4613      	mov	r3, r2
 8004030:	43db      	mvns	r3, r3
 8004032:	637b      	str	r3, [r7, #52]	@ 0x34
 8004034:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004038:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800403c:	4621      	mov	r1, r4
 800403e:	4291      	cmp	r1, r2
 8004040:	4629      	mov	r1, r5
 8004042:	eb71 0303 	sbcs.w	r3, r1, r3
 8004046:	d320      	bcc.n	800408a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a2>
    mantissa += digit;
 8004048:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800404c:	2200      	movs	r2, #0
 800404e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004050:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004052:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004056:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800405a:	4621      	mov	r1, r4
 800405c:	1851      	adds	r1, r2, r1
 800405e:	6139      	str	r1, [r7, #16]
 8004060:	4629      	mov	r1, r5
 8004062:	414b      	adcs	r3, r1
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800406a:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    s++;
 800406e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004070:	3301      	adds	r3, #1
 8004072:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 8004074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f7fd fa94 	bl	80015a6 <_ZN19ArduinoJson6101_1107isdigitEc>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1a2      	bne.n	8003fca <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xe2>
 8004084:	e002      	b.n	800408c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint / 10) break;
 8004086:	bf00      	nop
 8004088:	e000      	b.n	800408c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint - digit) break;
 800408a:	bf00      	nop
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);
 800408c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d11b      	bne.n	80040cc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1e4>
 8004094:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800409e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80040a0:	f000 fa18 	bl	80044d4 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>
 80040a4:	e121      	b.n	80042ea <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 80040a6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80040aa:	f04f 020a 	mov.w	r2, #10
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	f7fc fb39 	bl	8000728 <__aeabi_uldivmod>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    exponent_offset++;
 80040be:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3301      	adds	r3, #1
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  while (mantissa > traits::mantissa_max) {
 80040cc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80040d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040d4:	d2e7      	bcs.n	80040a6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1be>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 80040d6:	e009      	b.n	80040ec <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x204>
    exponent_offset++;
 80040d8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3301      	adds	r3, #1
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    s++;
 80040e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040e8:	3301      	adds	r3, #1
 80040ea:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 80040ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fd fa58 	bl	80015a6 <_ZN19ArduinoJson6101_1107isdigitEc>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1ed      	bne.n	80040d8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f0>
  }

  if (*s == '.') {
 80040fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b2e      	cmp	r3, #46	@ 0x2e
 8004102:	d14c      	bne.n	800419e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2b6>
    s++;
 8004104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004106:	3301      	adds	r3, #1
 8004108:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 800410a:	e040      	b.n	800418e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a6>
      if (mantissa < traits::mantissa_max / 10) {
 800410c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004110:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8004114:	4965      	ldr	r1, [pc, #404]	@ (80042ac <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c4>)
 8004116:	418b      	sbcs	r3, r1
 8004118:	d236      	bcs.n	8004188 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a0>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 800411a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800411e:	4622      	mov	r2, r4
 8004120:	462b      	mov	r3, r5
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f04f 0100 	mov.w	r1, #0
 800412a:	0099      	lsls	r1, r3, #2
 800412c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8004130:	0090      	lsls	r0, r2, #2
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	eb12 0a04 	adds.w	sl, r2, r4
 800413a:	eb43 0b05 	adc.w	fp, r3, r5
 800413e:	eb1a 030a 	adds.w	r3, sl, sl
 8004142:	60bb      	str	r3, [r7, #8]
 8004144:	eb4b 030b 	adc.w	r3, fp, fp
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800414e:	4652      	mov	r2, sl
 8004150:	465b      	mov	r3, fp
 8004152:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004154:	7809      	ldrb	r1, [r1, #0]
 8004156:	3930      	subs	r1, #48	@ 0x30
 8004158:	b2c9      	uxtb	r1, r1
 800415a:	b2c9      	uxtb	r1, r1
 800415c:	2000      	movs	r0, #0
 800415e:	6239      	str	r1, [r7, #32]
 8004160:	6278      	str	r0, [r7, #36]	@ 0x24
 8004162:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004166:	4621      	mov	r1, r4
 8004168:	1851      	adds	r1, r2, r1
 800416a:	6039      	str	r1, [r7, #0]
 800416c:	4629      	mov	r1, r5
 800416e:	414b      	adcs	r3, r1
 8004170:	607b      	str	r3, [r7, #4]
 8004172:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004176:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
        exponent_offset--;
 800417a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29b      	uxth	r3, r3
 8004184:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      }
      s++;
 8004188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800418a:	3301      	adds	r3, #1
 800418c:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 800418e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7fd fa07 	bl	80015a6 <_ZN19ArduinoJson6101_1107isdigitEc>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1b6      	bne.n	800410c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x224>
    }
  }

  int exponent = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (*s == 'e' || *s == 'E') {
 80041a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b65      	cmp	r3, #101	@ 0x65
 80041a8:	d003      	beq.n	80041b2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ca>
 80041aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b45      	cmp	r3, #69	@ 0x45
 80041b0:	d164      	bne.n	800427c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
    s++;
 80041b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041b4:	3301      	adds	r3, #1
 80041b6:	643b      	str	r3, [r7, #64]	@ 0x40
    bool negative_exponent = false;
 80041b8:	2300      	movs	r3, #0
 80041ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (*s == '-') {
 80041be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b2d      	cmp	r3, #45	@ 0x2d
 80041c4:	d106      	bne.n	80041d4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ec>
      negative_exponent = true;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      s++;
 80041cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ce:	3301      	adds	r3, #1
 80041d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80041d2:	e044      	b.n	800425e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
    } else if (*s == '+') {
 80041d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b2b      	cmp	r3, #43	@ 0x2b
 80041da:	d140      	bne.n	800425e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      s++;
 80041dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041de:	3301      	adds	r3, #1
 80041e0:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    while (isdigit(*s)) {
 80041e2:	e03c      	b.n	800425e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      exponent = exponent * 10 + (*s - '0');
 80041e4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	461a      	mov	r2, r3
 80041f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	3b30      	subs	r3, #48	@ 0x30
 80041f6:	4413      	add	r3, r2
 80041f8:	66bb      	str	r3, [r7, #104]	@ 0x68
      if (exponent + exponent_offset > traits::exponent_max) {
 80041fa:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	@ 0x6e
 80041fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004200:	4413      	add	r3, r2
 8004202:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8004206:	dd27      	ble.n	8004258 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x370>
        if (negative_exponent)
 8004208:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00e      	beq.n	800422e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x346>
          return is_negative ? -0.0f : 0.0f;
 8004210:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x336>
 8004218:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8004298 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b0>
 800421c:	e001      	b.n	8004222 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x33a>
 800421e:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 80042a0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b8>
 8004222:	eeb0 0b47 	vmov.f64	d0, d7
 8004226:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004228:	f000 f914 	bl	8004454 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 800422c:	e05d      	b.n	80042ea <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
        else
          return is_negative ? -traits::inf() : traits::inf();
 800422e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8004232:	2b00      	cmp	r3, #0
 8004234:	d006      	beq.n	8004244 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x35c>
 8004236:	f000 f923 	bl	8004480 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 800423a:	eeb0 7b40 	vmov.f64	d7, d0
 800423e:	eeb1 7b47 	vneg.f64	d7, d7
 8004242:	e003      	b.n	800424c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x364>
 8004244:	f000 f91c 	bl	8004480 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8004248:	eeb0 7b40 	vmov.f64	d7, d0
 800424c:	eeb0 0b47 	vmov.f64	d0, d7
 8004250:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004252:	f000 f8ff 	bl	8004454 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8004256:	e048      	b.n	80042ea <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
      }
      s++;
 8004258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800425a:	3301      	adds	r3, #1
 800425c:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 800425e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7fd f99f 	bl	80015a6 <_ZN19ArduinoJson6101_1107isdigitEc>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1ba      	bne.n	80041e4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2fc>
    }
    if (negative_exponent) exponent = -exponent;
 800426e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
 8004276:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004278:	425b      	negs	r3, r3
 800427a:	66bb      	str	r3, [r7, #104]	@ 0x68
  }
  exponent += exponent_offset;
 800427c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8004280:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004282:	4413      	add	r3, r2
 8004284:	66bb      	str	r3, [r7, #104]	@ 0x68

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();
 8004286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d010      	beq.n	80042b0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c8>
 800428e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004290:	f000 f904 	bl	800449c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8004294:	e029      	b.n	80042ea <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
 8004296:	bf00      	nop
 8004298:	00000000 	.word	0x00000000
 800429c:	80000000 	.word	0x80000000
	...
 80042a8:	19999999 	.word	0x19999999
 80042ac:	00019999 	.word	0x00019999

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);
 80042b0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80042b4:	f7fc fa02 	bl	80006bc <__aeabi_ul2d>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80042be:	ec43 2b10 	vmov	d0, r2, r3
 80042c2:	f000 f928 	bl	8004516 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>
 80042c6:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48

  return is_negative ? -result : result;
 80042ca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d004      	beq.n	80042dc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f4>
 80042d2:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 80042d6:	eeb1 7b47 	vneg.f64	d7, d7
 80042da:	e001      	b.n	80042e0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f8>
 80042dc:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 80042e0:	eeb0 0b47 	vmov.f64	d0, d7
 80042e4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80042e6:	f000 f8b5 	bl	8004454 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
}
 80042ea:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80042ec:	3780      	adds	r7, #128	@ 0x80
 80042ee:	46bd      	mov	sp, r7
 80042f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080042f4 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>:
  uint8_t type() const {
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
    return _type;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	7c1b      	ldrb	r3, [r3, #16]
  }
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>:
  if (!lhs || !rhs) return false;
  return lhs->equalsObject(*rhs);
}

template <typename TAdaptedString>
inline VariantData *objectGet(const CollectionData *obj, TAdaptedString key) {
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  if (!obj) return 0;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_+0x14>
 800431c:	2300      	movs	r3, #0
 800431e:	e006      	b.n	800432e <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_+0x22>
  return obj->get(key);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6839      	ldr	r1, [r7, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7fe fc30 	bl	8002b8a <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>
 800432a:	4603      	mov	r3, r0
 800432c:	bf00      	nop
}
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>:
canStoreNegativeInteger(TIn) {
  return false;
}

template <typename TOut, typename TIn>
TOut convertPositiveInteger(TIn value) {
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	e9c7 0100 	strd	r0, r1, [r7]
  return canStorePositiveInteger<TOut>(value) ? TOut(value) : 0;
 8004340:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004344:	f000 f937 	bl	80045b6 <_ZN19ArduinoJson6101_11023canStorePositiveIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuelestS3_stT0_EbE4typeES5_>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_+0x1c>
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	e000      	b.n	8004354 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_+0x1e>
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>:

template <typename TOut, typename TIn>
TOut convertNegativeInteger(TIn value) {
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	e9c7 0100 	strd	r0, r1, [r7]
  return canStoreNegativeInteger<TOut>(value) ? TOut(~value + 1) : 0;
 8004366:	e9d7 0100 	ldrd	r0, r1, [r7]
 800436a:	f000 f93c 	bl	80045e6 <_ZN19ArduinoJson6101_11023canStoreNegativeIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueEbE4typeET0_>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_+0x1e>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	425b      	negs	r3, r3
 8004378:	e000      	b.n	800437c <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_+0x20>
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <_ZN19ArduinoJson6101_11012parseIntegerImEET_PKc>:
#include "convertNumber.hpp"
#include "parseNumber.hpp"

namespace ARDUINOJSON_NAMESPACE {
template <typename T>
T parseInteger(const char *s) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  // try to reuse the same parameters as JsonDeserializer
  typedef typename choose_largest<UInt, typename make_unsigned<T>::type>::type
      TUInt;
  return parseNumber<Float, TUInt>(s).template as<T>();
 800438c:	f107 0308 	add.w	r3, r7, #8
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff fda8 	bl	8003ee8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
 8004398:	f107 0308 	add.w	r3, r7, #8
 800439c:	4618      	mov	r0, r3
 800439e:	f000 f92e 	bl	80045fe <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v>
 80043a2:	4603      	mov	r3, r0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3720      	adds	r7, #32
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>:
    TIn value) {
  return TOut(value);
}

template <typename TOut, typename TIn>
typename enable_if<!is_floating_point<TOut>::value, TOut>::type convertFloat(
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	ed87 0b00 	vstr	d0, [r7]
    TIn value) {
  return value >= numeric_limits<TOut>::lowest() &&
 80043b6:	f000 f950 	bl	800465a <_ZN19ArduinoJson6101_11014numeric_limitsImvE6lowestEv>
 80043ba:	ee07 0a90 	vmov	s15, r0
 80043be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
                 value <= numeric_limits<TOut>::highest()
             ? TOut(value)
 80043c2:	ed97 6b00 	vldr	d6, [r7]
 80043c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80043ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ce:	db13      	blt.n	80043f8 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x4c>
                 value <= numeric_limits<TOut>::highest()
 80043d0:	f000 f94b 	bl	800466a <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>
 80043d4:	ee07 0a90 	vmov	s15, r0
 80043d8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 80043dc:	ed97 6b00 	vldr	d6, [r7]
 80043e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80043e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e8:	d806      	bhi.n	80043f8 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x4c>
             ? TOut(value)
 80043ea:	ed97 7b00 	vldr	d7, [r7]
 80043ee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80043f2:	ee17 3a90 	vmov	r3, s15
 80043f6:	e000      	b.n	80043fa <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x4e>
 80043f8:	2300      	movs	r3, #0
             : 0;
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	4603      	mov	r3, r0
 800440a:	71fb      	strb	r3, [r7, #7]
 800440c:	460b      	mov	r3, r1
 800440e:	71bb      	strb	r3, [r7, #6]
 8004410:	4613      	mov	r3, r2
 8004412:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 8004414:	79ba      	ldrb	r2, [r7, #6]
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	429a      	cmp	r2, r3
 800441a:	d805      	bhi.n	8004428 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 800441c:	79fa      	ldrb	r2, [r7, #7]
 800441e:	797b      	ldrb	r3, [r7, #5]
 8004420:	429a      	cmp	r2, r3
 8004422:	d801      	bhi.n	8004428 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x28>
 8004428:	2300      	movs	r3, #0
  }
 800442a:	4618      	mov	r0, r3
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
	...

08004438 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>:
        forge(0x0AFE07B2, 0x7DD78B14)   // 1e-255
    };
    return factors[index];
  }

  static T nan() {
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
    return forge(0x7ff80000, 0x00000000);
 800443c:	2100      	movs	r1, #0
 800443e:	4804      	ldr	r0, [pc, #16]	@ (8004450 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv+0x18>)
 8004440:	f000 f91c 	bl	800467c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004444:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8004448:	eeb0 0b47 	vmov.f64	d0, d7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	7ff80000 	.word	0x7ff80000

08004454 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>:
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	ed87 0b00 	vstr	d0, [r7]
 8004460:	68f9      	ldr	r1, [r7, #12]
 8004462:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004466:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2208      	movs	r2, #8
 800446e:	741a      	strb	r2, [r3, #16]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
	...

08004480 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>:

  static T inf() {
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
    return forge(0x7ff00000, 0x00000000);
 8004484:	2100      	movs	r1, #0
 8004486:	4804      	ldr	r0, [pc, #16]	@ (8004498 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv+0x18>)
 8004488:	f000 f8f8 	bl	800467c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800448c:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8004490:	eeb0 0b47 	vmov.f64	d0, d7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	7ff00000 	.word	0x7ff00000

0800449c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>:
  ParsedNumber() : uintValue(0), floatValue(0), _type(VALUE_IS_NULL) {}
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	e9c1 2300 	strd	r2, r3, [r1]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	741a      	strb	r2, [r3, #16]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4618      	mov	r0, r3
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>:
  ParsedNumber(TUInt value, bool is_negative)
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	e9c7 2300 	strd	r2, r3, [r7]
      : uintValue(value),
 80044e0:	68f9      	ldr	r1, [r7, #12]
 80044e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044e6:	e9c1 2300 	strd	r2, r3, [r1]
        floatValue(TFloat(value)),
 80044ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044ee:	f7fc f8e5 	bl	80006bc <__aeabi_ul2d>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	68f9      	ldr	r1, [r7, #12]
 80044f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
 80044fc:	7e3b      	ldrb	r3, [r7, #24]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x32>
 8004502:	2207      	movs	r2, #7
 8004504:	e000      	b.n	8004508 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x34>
 8004506:	2206      	movs	r2, #6
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	741a      	strb	r2, [r3, #16]
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>:
  static T make_float(T m, TExponent e) {
 8004516:	b580      	push	{r7, lr}
 8004518:	b086      	sub	sp, #24
 800451a:	af00      	add	r7, sp, #0
 800451c:	ed87 0b02 	vstr	d0, [r7, #8]
 8004520:	6078      	str	r0, [r7, #4]
    if (e > 0) {
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	dd1d      	ble.n	8004564 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x4e>
      for (uint8_t index = 0; e != 0; index++) {
 8004528:	2300      	movs	r3, #0
 800452a:	75fb      	strb	r3, [r7, #23]
 800452c:	e016      	b.n	800455c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x46>
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00b      	beq.n	8004550 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x3a>
 8004538:	7dfb      	ldrb	r3, [r7, #23]
 800453a:	4618      	mov	r0, r3
 800453c:	f000 f8c2 	bl	80046c4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
 8004540:	eeb0 6b40 	vmov.f64	d6, d0
 8004544:	ed97 7b02 	vldr	d7, [r7, #8]
 8004548:	ee27 7b06 	vmul.f64	d7, d7, d6
 800454c:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	105b      	asrs	r3, r3, #1
 8004554:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8004556:	7dfb      	ldrb	r3, [r7, #23]
 8004558:	3301      	adds	r3, #1
 800455a:	75fb      	strb	r3, [r7, #23]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1e5      	bne.n	800452e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x18>
 8004562:	e01f      	b.n	80045a4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x8e>
      e = TExponent(-e);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	425b      	negs	r3, r3
 8004568:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 800456a:	2300      	movs	r3, #0
 800456c:	75bb      	strb	r3, [r7, #22]
 800456e:	e016      	b.n	800459e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x88>
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00b      	beq.n	8004592 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x7c>
 800457a:	7dbb      	ldrb	r3, [r7, #22]
 800457c:	4618      	mov	r0, r3
 800457e:	f000 f905 	bl	800478c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>
 8004582:	eeb0 6b40 	vmov.f64	d6, d0
 8004586:	ed97 7b02 	vldr	d7, [r7, #8]
 800458a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800458e:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	105b      	asrs	r3, r3, #1
 8004596:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8004598:	7dbb      	ldrb	r3, [r7, #22]
 800459a:	3301      	adds	r3, #1
 800459c:	75bb      	strb	r3, [r7, #22]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e5      	bne.n	8004570 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x5a>
    return m;
 80045a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045a8:	ec43 2b17 	vmov	d7, r2, r3
  }
 80045ac:	eeb0 0b47 	vmov.f64	d0, d7
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <_ZN19ArduinoJson6101_11023canStorePositiveIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuelestS3_stT0_EbE4typeES5_>:
canStorePositiveInteger(TIn value) {
 80045b6:	b5b0      	push	{r4, r5, r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 80045c0:	f000 f853 	bl	800466a <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2200      	movs	r2, #0
 80045c8:	461c      	mov	r4, r3
 80045ca:	4615      	mov	r5, r2
 80045cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045d0:	4294      	cmp	r4, r2
 80045d2:	eb75 0303 	sbcs.w	r3, r5, r3
 80045d6:	bf2c      	ite	cs
 80045d8:	2301      	movcs	r3, #1
 80045da:	2300      	movcc	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bdb0      	pop	{r4, r5, r7, pc}

080045e6 <_ZN19ArduinoJson6101_11023canStoreNegativeIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueEbE4typeET0_>:
canStoreNegativeInteger(TIn) {
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	e9c7 0100 	strd	r0, r1, [r7]
  return false;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v>:
  T as() const {
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
    switch (_type) {
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	7c1b      	ldrb	r3, [r3, #16]
 800460a:	2b08      	cmp	r3, #8
 800460c:	d017      	beq.n	800463e <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x40>
 800460e:	2b08      	cmp	r3, #8
 8004610:	dc1e      	bgt.n	8004650 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x52>
 8004612:	2b06      	cmp	r3, #6
 8004614:	d00a      	beq.n	800462c <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x2e>
 8004616:	2b07      	cmp	r3, #7
 8004618:	d11a      	bne.n	8004650 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x52>
        return convertNegativeInteger<T>(uintValue);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004620:	4610      	mov	r0, r2
 8004622:	4619      	mov	r1, r3
 8004624:	f7ff fe9a 	bl	800435c <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>
 8004628:	4603      	mov	r3, r0
 800462a:	e012      	b.n	8004652 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return convertPositiveInteger<T>(uintValue);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	4610      	mov	r0, r2
 8004634:	4619      	mov	r1, r3
 8004636:	f7ff fe7e 	bl	8004336 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>
 800463a:	4603      	mov	r3, r0
 800463c:	e009      	b.n	8004652 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return convertFloat<T>(floatValue);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	ed93 7b02 	vldr	d7, [r3, #8]
 8004644:	eeb0 0b47 	vmov.f64	d0, d7
 8004648:	f7ff feb0 	bl	80043ac <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>
 800464c:	4603      	mov	r3, r0
 800464e:	e000      	b.n	8004652 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return 0;
 8004650:	2300      	movs	r3, #0
  }
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <_ZN19ArduinoJson6101_11014numeric_limitsImvE6lowestEv>:
template <typename T, typename Enable = void>
struct numeric_limits;

template <typename T>
struct numeric_limits<T, typename enable_if<is_unsigned<T>::value>::type> {
  static T lowest() {
 800465a:	b480      	push	{r7}
 800465c:	af00      	add	r7, sp, #0
    return 0;
 800465e:	2300      	movs	r3, #0
  }
 8004660:	4618      	mov	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>:
  static T highest() {
 800466a:	b480      	push	{r7}
 800466c:	af00      	add	r7, sp, #0
    return T(-1);
 800466e:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8004672:	4618      	mov	r0, r3
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>:
  }

  // constructs a double floating point values from its binary representation
  // we use this function to workaround platforms with single precision literals
  // (for example, when -fsingle-precision-constant is passed to GCC)
  static T forge(uint32_t msb, uint32_t lsb) {
 800467c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004680:	b082      	sub	sp, #8
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	6039      	str	r1, [r7, #0]
    return alias_cast<T>((uint64_t(msb) << 32) | lsb);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	469a      	mov	sl, r3
 800468e:	4693      	mov	fp, r2
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	4653      	mov	r3, sl
 800469a:	2200      	movs	r2, #0
 800469c:	6839      	ldr	r1, [r7, #0]
 800469e:	2000      	movs	r0, #0
 80046a0:	460c      	mov	r4, r1
 80046a2:	4605      	mov	r5, r0
 80046a4:	ea42 0804 	orr.w	r8, r2, r4
 80046a8:	ea43 0905 	orr.w	r9, r3, r5
 80046ac:	4640      	mov	r0, r8
 80046ae:	4649      	mov	r1, r9
 80046b0:	f000 f912 	bl	80048d8 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>
 80046b4:	eeb0 7b40 	vmov.f64	d7, d0
  }
 80046b8:	eeb0 0b47 	vmov.f64	d0, d7
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080046c4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>:
  static T positiveBinaryPowerOfTen(int index) {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 80046cc:	4b25      	ldr	r3, [pc, #148]	@ (8004764 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f3bf 8f5b 	dmb	ish
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	bf0c      	ite	eq
 80046dc:	2301      	moveq	r3, #1
 80046de:	2300      	movne	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d031      	beq.n	800474a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
 80046e6:	481f      	ldr	r0, [pc, #124]	@ (8004764 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 80046e8:	f00e fa0a 	bl	8012b00 <__cxa_guard_acquire>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	bf14      	ite	ne
 80046f2:	2301      	movne	r3, #1
 80046f4:	2300      	moveq	r3, #0
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d026      	beq.n	800474a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
 80046fc:	491a      	ldr	r1, [pc, #104]	@ (8004768 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa4>)
 80046fe:	481b      	ldr	r0, [pc, #108]	@ (800476c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa8>)
 8004700:	f7ff ffbc 	bl	800467c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004704:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004708:	4b19      	ldr	r3, [pc, #100]	@ (8004770 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 800470a:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
 800470e:	4919      	ldr	r1, [pc, #100]	@ (8004774 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb0>)
 8004710:	4819      	ldr	r0, [pc, #100]	@ (8004778 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb4>)
 8004712:	f7ff ffb3 	bl	800467c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004716:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800471a:	4b15      	ldr	r3, [pc, #84]	@ (8004770 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 800471c:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x5A827748, 0xF9301D32),  // 1e128
 8004720:	4916      	ldr	r1, [pc, #88]	@ (800477c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb8>)
 8004722:	4817      	ldr	r0, [pc, #92]	@ (8004780 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xbc>)
 8004724:	f7ff ffaa 	bl	800467c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004728:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800472c:	4b10      	ldr	r3, [pc, #64]	@ (8004770 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 800472e:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
 8004732:	4914      	ldr	r1, [pc, #80]	@ (8004784 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc0>)
 8004734:	4814      	ldr	r0, [pc, #80]	@ (8004788 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc4>)
 8004736:	f7ff ffa1 	bl	800467c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800473a:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800473e:	4b0c      	ldr	r3, [pc, #48]	@ (8004770 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8004740:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 8004744:	4807      	ldr	r0, [pc, #28]	@ (8004764 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 8004746:	f00e f9e7 	bl	8012b18 <__cxa_guard_release>
    return factors[index];
 800474a:	4a09      	ldr	r2, [pc, #36]	@ (8004770 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4413      	add	r3, r2
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	ec43 2b17 	vmov	d7, r2, r3
  }
 800475a:	eeb0 0b47 	vmov.f64	d0, d7
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	240004ac 	.word	0x240004ac
 8004768:	b5056e17 	.word	0xb5056e17
 800476c:	4693b8b5 	.word	0x4693b8b5
 8004770:	24000008 	.word	0x24000008
 8004774:	e93ff9f5 	.word	0xe93ff9f5
 8004778:	4d384f03 	.word	0x4d384f03
 800477c:	f9301d32 	.word	0xf9301d32
 8004780:	5a827748 	.word	0x5a827748
 8004784:	7f73bf3c 	.word	0x7f73bf3c
 8004788:	75154fdd 	.word	0x75154fdd

0800478c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>:
  static T negativeBinaryPowerOfTen(int index) {
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 8004794:	4b3c      	ldr	r3, [pc, #240]	@ (8004888 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f3bf 8f5b 	dmb	ish
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	bf0c      	ite	eq
 80047a4:	2301      	moveq	r3, #1
 80047a6:	2300      	movne	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d05e      	beq.n	800486c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
 80047ae:	4836      	ldr	r0, [pc, #216]	@ (8004888 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 80047b0:	f00e f9a6 	bl	8012b00 <__cxa_guard_acquire>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	bf14      	ite	ne
 80047ba:	2301      	movne	r3, #1
 80047bc:	2300      	moveq	r3, #0
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d053      	beq.n	800486c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
        forge(0x3FB99999, 0x9999999A),  // 1e-1
 80047c4:	4931      	ldr	r1, [pc, #196]	@ (800488c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x100>)
 80047c6:	4832      	ldr	r0, [pc, #200]	@ (8004890 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 80047c8:	f7ff ff58 	bl	800467c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80047cc:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80047d0:	4b30      	ldr	r3, [pc, #192]	@ (8004894 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80047d2:	ed83 7b00 	vstr	d7, [r3]
        forge(0x3F847AE1, 0x47AE147B),  // 1e-2
 80047d6:	4930      	ldr	r1, [pc, #192]	@ (8004898 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x10c>)
 80047d8:	4830      	ldr	r0, [pc, #192]	@ (800489c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x110>)
 80047da:	f7ff ff4f 	bl	800467c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80047de:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80047e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004894 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80047e4:	ed83 7b02 	vstr	d7, [r3, #8]
        forge(0x3F1A36E2, 0xEB1C432D),  // 1e-4
 80047e8:	492d      	ldr	r1, [pc, #180]	@ (80048a0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x114>)
 80047ea:	482e      	ldr	r0, [pc, #184]	@ (80048a4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x118>)
 80047ec:	f7ff ff46 	bl	800467c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80047f0:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80047f4:	4b27      	ldr	r3, [pc, #156]	@ (8004894 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80047f6:	ed83 7b04 	vstr	d7, [r3, #16]
        forge(0x3E45798E, 0xE2308C3A),  // 1e-8
 80047fa:	492b      	ldr	r1, [pc, #172]	@ (80048a8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x11c>)
 80047fc:	482b      	ldr	r0, [pc, #172]	@ (80048ac <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x120>)
 80047fe:	f7ff ff3d 	bl	800467c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004802:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004806:	4b23      	ldr	r3, [pc, #140]	@ (8004894 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004808:	ed83 7b06 	vstr	d7, [r3, #24]
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
 800480c:	4928      	ldr	r1, [pc, #160]	@ (80048b0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x124>)
 800480e:	4829      	ldr	r0, [pc, #164]	@ (80048b4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x128>)
 8004810:	f7ff ff34 	bl	800467c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004814:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004818:	4b1e      	ldr	r3, [pc, #120]	@ (8004894 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800481a:	ed83 7b08 	vstr	d7, [r3, #32]
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
 800481e:	4926      	ldr	r1, [pc, #152]	@ (80048b8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x12c>)
 8004820:	4826      	ldr	r0, [pc, #152]	@ (80048bc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 8004822:	f7ff ff2b 	bl	800467c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004826:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800482a:	4b1a      	ldr	r3, [pc, #104]	@ (8004894 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800482c:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
 8004830:	4923      	ldr	r1, [pc, #140]	@ (80048c0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x134>)
 8004832:	4824      	ldr	r0, [pc, #144]	@ (80048c4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x138>)
 8004834:	f7ff ff22 	bl	800467c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004838:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800483c:	4b15      	ldr	r3, [pc, #84]	@ (8004894 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800483e:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
 8004842:	4921      	ldr	r1, [pc, #132]	@ (80048c8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x13c>)
 8004844:	4821      	ldr	r0, [pc, #132]	@ (80048cc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x140>)
 8004846:	f7ff ff19 	bl	800467c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800484a:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800484e:	4b11      	ldr	r3, [pc, #68]	@ (8004894 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004850:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
 8004854:	491e      	ldr	r1, [pc, #120]	@ (80048d0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x144>)
 8004856:	481f      	ldr	r0, [pc, #124]	@ (80048d4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x148>)
 8004858:	f7ff ff10 	bl	800467c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800485c:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004860:	4b0c      	ldr	r3, [pc, #48]	@ (8004894 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004862:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 8004866:	4808      	ldr	r0, [pc, #32]	@ (8004888 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 8004868:	f00e f956 	bl	8012b18 <__cxa_guard_release>
    return factors[index];
 800486c:	4a09      	ldr	r2, [pc, #36]	@ (8004894 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	4413      	add	r3, r2
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	ec43 2b17 	vmov	d7, r2, r3
  }
 800487c:	eeb0 0b47 	vmov.f64	d0, d7
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	240004f8 	.word	0x240004f8
 800488c:	9999999a 	.word	0x9999999a
 8004890:	3fb99999 	.word	0x3fb99999
 8004894:	240004b0 	.word	0x240004b0
 8004898:	47ae147b 	.word	0x47ae147b
 800489c:	3f847ae1 	.word	0x3f847ae1
 80048a0:	eb1c432d 	.word	0xeb1c432d
 80048a4:	3f1a36e2 	.word	0x3f1a36e2
 80048a8:	e2308c3a 	.word	0xe2308c3a
 80048ac:	3e45798e 	.word	0x3e45798e
 80048b0:	97d889bc 	.word	0x97d889bc
 80048b4:	3c9cd2b2 	.word	0x3c9cd2b2
 80048b8:	d5a8a733 	.word	0xd5a8a733
 80048bc:	3949f623 	.word	0x3949f623
 80048c0:	44f4a73d 	.word	0x44f4a73d
 80048c4:	32a50ffd 	.word	0x32a50ffd
 80048c8:	cf8c979d 	.word	0xcf8c979d
 80048cc:	255bba08 	.word	0x255bba08
 80048d0:	64ac6f43 	.word	0x64ac6f43
 80048d4:	0ac80628 	.word	0x0ac80628

080048d8 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	e9c7 0100 	strd	r0, r1, [r7]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 80048e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 80048ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048ee:	ec43 2b17 	vmov	d7, r2, r3
}
 80048f2:	eeb0 0b47 	vmov.f64	d0, d7
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004900:	b590      	push	{r4, r7, lr}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d12a      	bne.n	8004966 <_Z41__static_initialization_and_destruction_0ii+0x66>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004916:	4293      	cmp	r3, r2
 8004918:	d125      	bne.n	8004966 <_Z41__static_initialization_and_destruction_0ii+0x66>
std::string strJson;
 800491a:	481c      	ldr	r0, [pc, #112]	@ (800498c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800491c:	f00e f9b8 	bl	8012c90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 8004920:	4622      	mov	r2, r4
 8004922:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004926:	481a      	ldr	r0, [pc, #104]	@ (8004990 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004928:	f7fe f946 	bl	8002bb8 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>
  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
 800492c:	4b19      	ldr	r3, [pc, #100]	@ (8004994 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800492e:	2100      	movs	r1, #0
 8004930:	4618      	mov	r0, r3
 8004932:	f7fe f91b 	bl	8002b6c <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 8004936:	4b17      	ldr	r3, [pc, #92]	@ (8004994 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004938:	2200      	movs	r2, #0
 800493a:	605a      	str	r2, [r3, #4]
 800493c:	4b16      	ldr	r3, [pc, #88]	@ (8004998 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800493e:	2100      	movs	r1, #0
 8004940:	4618      	mov	r0, r3
 8004942:	f7fe f913 	bl	8002b6c <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 8004946:	4b14      	ldr	r3, [pc, #80]	@ (8004998 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004948:	2200      	movs	r2, #0
 800494a:	605a      	str	r2, [r3, #4]
RemoraComms* comms = new RemoraComms(SPI1);
 800494c:	2120      	movs	r1, #32
 800494e:	f44f 7008 	mov.w	r0, #544	@ 0x220
 8004952:	f00e f8f5 	bl	8012b40 <_ZnwjSt11align_val_t>
 8004956:	4603      	mov	r3, r0
 8004958:	461c      	mov	r4, r3
 800495a:	4910      	ldr	r1, [pc, #64]	@ (800499c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800495c:	4620      	mov	r0, r4
 800495e:	f000 fc23 	bl	80051a8 <_ZN11RemoraCommsC1EP11SPI_TypeDef>
 8004962:	4b0f      	ldr	r3, [pc, #60]	@ (80049a0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004964:	601c      	str	r4, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <_Z41__static_initialization_and_destruction_0ii+0x82>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004972:	4293      	cmp	r3, r2
 8004974:	d105      	bne.n	8004982 <_Z41__static_initialization_and_destruction_0ii+0x82>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 8004976:	4806      	ldr	r0, [pc, #24]	@ (8004990 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004978:	f000 f814 	bl	80049a4 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>
std::string strJson;
 800497c:	4803      	ldr	r0, [pc, #12]	@ (800498c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800497e:	f00e f98e 	bl	8012c9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	bd90      	pop	{r4, r7, pc}
 800498a:	bf00      	nop
 800498c:	24000344 	.word	0x24000344
 8004990:	24000360 	.word	0x24000360
 8004994:	24000388 	.word	0x24000388
 8004998:	24000390 	.word	0x24000390
 800499c:	40013000 	.word	0x40013000
 80049a0:	24000398 	.word	0x24000398

080049a4 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>:
  ~BasicJsonDocument() {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
    freePool();
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f805 	bl	80049bc <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>
  }
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4618      	mov	r0, r3
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>:
    if (requiredSize <= capacity()) return;
    freePool();
    replacePool(allocPool(addPadding(requiredSize)));
  }

  void freePool() {
 80049bc:	b590      	push	{r4, r7, lr}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
    this->deallocate(memoryPool().buffer());
 80049c4:	687c      	ldr	r4, [r7, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	3308      	adds	r3, #8
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fc fd52 	bl	8001474 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 80049d0:	4603      	mov	r3, r0
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fc fac7 	bl	8000f66 <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>
 80049d8:	4603      	mov	r3, r0
 80049da:	4619      	mov	r1, r3
 80049dc:	4620      	mov	r0, r4
 80049de:	f000 f804 	bl	80049ea <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>
  }
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd90      	pop	{r4, r7, pc}

080049ea <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>:
  void deallocate(void* p) {
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b082      	sub	sp, #8
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	6039      	str	r1, [r7, #0]
    _allocator.deallocate(p);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6839      	ldr	r1, [r7, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fc fd7c 	bl	80014f6 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>
  }
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 8004a06:	b580      	push	{r7, lr}
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004a0e:	2001      	movs	r0, #1
 8004a10:	f7ff ff76 	bl	8004900 <_Z41__static_initialization_and_destruction_0ii>
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <_GLOBAL__sub_D_EXTI4_IRQHandler>:
 8004a16:	b580      	push	{r7, lr}
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004a1e:	2000      	movs	r0, #0
 8004a20:	f7ff ff6e 	bl	8004900 <_Z41__static_initialization_and_destruction_0ii>
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a58 <HAL_MspInit+0x30>)
 8004a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a34:	4a08      	ldr	r2, [pc, #32]	@ (8004a58 <HAL_MspInit+0x30>)
 8004a36:	f043 0302 	orr.w	r3, r3, #2
 8004a3a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004a3e:	4b06      	ldr	r3, [pc, #24]	@ (8004a58 <HAL_MspInit+0x30>)
 8004a40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	607b      	str	r3, [r7, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	58024400 	.word	0x58024400

08004a5c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b0bc      	sub	sp, #240	@ 0xf0
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a64:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	605a      	str	r2, [r3, #4]
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	60da      	str	r2, [r3, #12]
 8004a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a74:	f107 0318 	add.w	r3, r7, #24
 8004a78:	22c0      	movs	r2, #192	@ 0xc0
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f00e fd6b 	bl	8013558 <memset>
  if(hsd->Instance==SDMMC1)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a3c      	ldr	r2, [pc, #240]	@ (8004b78 <HAL_SD_MspInit+0x11c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d171      	bne.n	8004b70 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8004a8c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a9c:	f107 0318 	add.w	r3, r7, #24
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f005 f967 	bl	8009d74 <HAL_RCCEx_PeriphCLKConfig>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8004aac:	f7fd ffec 	bl	8002a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004ab0:	4b32      	ldr	r3, [pc, #200]	@ (8004b7c <HAL_SD_MspInit+0x120>)
 8004ab2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004ab6:	4a31      	ldr	r2, [pc, #196]	@ (8004b7c <HAL_SD_MspInit+0x120>)
 8004ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004abc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8004ac0:	4b2e      	ldr	r3, [pc, #184]	@ (8004b7c <HAL_SD_MspInit+0x120>)
 8004ac2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004ac6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ace:	4b2b      	ldr	r3, [pc, #172]	@ (8004b7c <HAL_SD_MspInit+0x120>)
 8004ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ad4:	4a29      	ldr	r2, [pc, #164]	@ (8004b7c <HAL_SD_MspInit+0x120>)
 8004ad6:	f043 0304 	orr.w	r3, r3, #4
 8004ada:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ade:	4b27      	ldr	r3, [pc, #156]	@ (8004b7c <HAL_SD_MspInit+0x120>)
 8004ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004aec:	4b23      	ldr	r3, [pc, #140]	@ (8004b7c <HAL_SD_MspInit+0x120>)
 8004aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004af2:	4a22      	ldr	r2, [pc, #136]	@ (8004b7c <HAL_SD_MspInit+0x120>)
 8004af4:	f043 0308 	orr.w	r3, r3, #8
 8004af8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004afc:	4b1f      	ldr	r3, [pc, #124]	@ (8004b7c <HAL_SD_MspInit+0x120>)
 8004afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004b0a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8004b0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b12:	2302      	movs	r3, #2
 8004b14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8004b24:	230c      	movs	r3, #12
 8004b26:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b2a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4813      	ldr	r0, [pc, #76]	@ (8004b80 <HAL_SD_MspInit+0x124>)
 8004b32:	f003 ff35 	bl	80089a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b36:	2304      	movs	r3, #4
 8004b38:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8004b4e:	230c      	movs	r3, #12
 8004b50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b54:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004b58:	4619      	mov	r1, r3
 8004b5a:	480a      	ldr	r0, [pc, #40]	@ (8004b84 <HAL_SD_MspInit+0x128>)
 8004b5c:	f003 ff20 	bl	80089a0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8004b60:	2200      	movs	r2, #0
 8004b62:	2100      	movs	r1, #0
 8004b64:	2031      	movs	r0, #49	@ 0x31
 8004b66:	f002 f9a0 	bl	8006eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8004b6a:	2031      	movs	r0, #49	@ 0x31
 8004b6c:	f002 f9b7 	bl	8006ede <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8004b70:	bf00      	nop
 8004b72:	37f0      	adds	r7, #240	@ 0xf0
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	52007000 	.word	0x52007000
 8004b7c:	58024400 	.word	0x58024400
 8004b80:	58020800 	.word	0x58020800
 8004b84:	58020c00 	.word	0x58020c00

08004b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b0ba      	sub	sp, #232	@ 0xe8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b90:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	605a      	str	r2, [r3, #4]
 8004b9a:	609a      	str	r2, [r3, #8]
 8004b9c:	60da      	str	r2, [r3, #12]
 8004b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ba0:	f107 0310 	add.w	r3, r7, #16
 8004ba4:	22c0      	movs	r2, #192	@ 0xc0
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f00e fcd5 	bl	8013558 <memset>
  if(huart->Instance==USART1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a27      	ldr	r2, [pc, #156]	@ (8004c50 <HAL_UART_MspInit+0xc8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d146      	bne.n	8004c46 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004bb8:	f04f 0201 	mov.w	r2, #1
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004bca:	f107 0310 	add.w	r3, r7, #16
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f005 f8d0 	bl	8009d74 <HAL_RCCEx_PeriphCLKConfig>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004bda:	f7fd ff55 	bl	8002a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004bde:	4b1d      	ldr	r3, [pc, #116]	@ (8004c54 <HAL_UART_MspInit+0xcc>)
 8004be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004be4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c54 <HAL_UART_MspInit+0xcc>)
 8004be6:	f043 0310 	orr.w	r3, r3, #16
 8004bea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004bee:	4b19      	ldr	r3, [pc, #100]	@ (8004c54 <HAL_UART_MspInit+0xcc>)
 8004bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bfc:	4b15      	ldr	r3, [pc, #84]	@ (8004c54 <HAL_UART_MspInit+0xcc>)
 8004bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c02:	4a14      	ldr	r2, [pc, #80]	@ (8004c54 <HAL_UART_MspInit+0xcc>)
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c0c:	4b11      	ldr	r3, [pc, #68]	@ (8004c54 <HAL_UART_MspInit+0xcc>)
 8004c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	60bb      	str	r3, [r7, #8]
 8004c18:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004c1a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c22:	2302      	movs	r3, #2
 8004c24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c34:	2307      	movs	r3, #7
 8004c36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c3a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4805      	ldr	r0, [pc, #20]	@ (8004c58 <HAL_UART_MspInit+0xd0>)
 8004c42:	f003 fead 	bl	80089a0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8004c46:	bf00      	nop
 8004c48:	37e8      	adds	r7, #232	@ 0xe8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40011000 	.word	0x40011000
 8004c54:	58024400 	.word	0x58024400
 8004c58:	58020000 	.word	0x58020000

08004c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c60:	bf00      	nop
 8004c62:	e7fd      	b.n	8004c60 <NMI_Handler+0x4>

08004c64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c68:	bf00      	nop
 8004c6a:	e7fd      	b.n	8004c68 <HardFault_Handler+0x4>

08004c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c70:	bf00      	nop
 8004c72:	e7fd      	b.n	8004c70 <MemManage_Handler+0x4>

08004c74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c78:	bf00      	nop
 8004c7a:	e7fd      	b.n	8004c78 <BusFault_Handler+0x4>

08004c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c80:	bf00      	nop
 8004c82:	e7fd      	b.n	8004c80 <UsageFault_Handler+0x4>

08004c84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c92:	b480      	push	{r7}
 8004c94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c96:	bf00      	nop
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004cb2:	f001 ffb9 	bl	8006c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004cb6:	bf00      	nop
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004cc0:	4802      	ldr	r0, [pc, #8]	@ (8004ccc <SDMMC1_IRQHandler+0x10>)
 8004cc2:	f007 ffc5 	bl	800cc50 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8004cc6:	bf00      	nop
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	2400039c 	.word	0x2400039c

08004cd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
	return 1;
 8004cd4:	2301      	movs	r3, #1
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <_kill>:

int _kill(int pid, int sig)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004cea:	f00e fcd7 	bl	801369c <__errno>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2216      	movs	r2, #22
 8004cf2:	601a      	str	r2, [r3, #0]
	return -1;
 8004cf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <_exit>:

void _exit (int status)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004d08:	f04f 31ff 	mov.w	r1, #4294967295
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff ffe7 	bl	8004ce0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004d12:	bf00      	nop
 8004d14:	e7fd      	b.n	8004d12 <_exit+0x12>

08004d16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b086      	sub	sp, #24
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	e00a      	b.n	8004d3e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004d28:	f3af 8000 	nop.w
 8004d2c:	4601      	mov	r1, r0
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	60ba      	str	r2, [r7, #8]
 8004d34:	b2ca      	uxtb	r2, r1
 8004d36:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	dbf0      	blt.n	8004d28 <_read+0x12>
	}

return len;
 8004d46:	687b      	ldr	r3, [r7, #4]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	e009      	b.n	8004d76 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	60ba      	str	r2, [r7, #8]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fc fe70 	bl	8001a50 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	3301      	adds	r3, #1
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	dbf1      	blt.n	8004d62 <_write+0x12>
	}
	return len;
 8004d7e:	687b      	ldr	r3, [r7, #4]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <_close>:

int _close(int file)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
	return -1;
 8004d90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004db0:	605a      	str	r2, [r3, #4]
	return 0;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <_isatty>:

int _isatty(int file)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
	return 1;
 8004dc8:	2301      	movs	r3, #1
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b085      	sub	sp, #20
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
	return 0;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004df8:	4a14      	ldr	r2, [pc, #80]	@ (8004e4c <_sbrk+0x5c>)
 8004dfa:	4b15      	ldr	r3, [pc, #84]	@ (8004e50 <_sbrk+0x60>)
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e04:	4b13      	ldr	r3, [pc, #76]	@ (8004e54 <_sbrk+0x64>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d102      	bne.n	8004e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e0c:	4b11      	ldr	r3, [pc, #68]	@ (8004e54 <_sbrk+0x64>)
 8004e0e:	4a12      	ldr	r2, [pc, #72]	@ (8004e58 <_sbrk+0x68>)
 8004e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e12:	4b10      	ldr	r3, [pc, #64]	@ (8004e54 <_sbrk+0x64>)
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4413      	add	r3, r2
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d207      	bcs.n	8004e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e20:	f00e fc3c 	bl	801369c <__errno>
 8004e24:	4603      	mov	r3, r0
 8004e26:	220c      	movs	r2, #12
 8004e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e2e:	e009      	b.n	8004e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e30:	4b08      	ldr	r3, [pc, #32]	@ (8004e54 <_sbrk+0x64>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e36:	4b07      	ldr	r3, [pc, #28]	@ (8004e54 <_sbrk+0x64>)
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	4a05      	ldr	r2, [pc, #20]	@ (8004e54 <_sbrk+0x64>)
 8004e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e42:	68fb      	ldr	r3, [r7, #12]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	24080000 	.word	0x24080000
 8004e50:	00000400 	.word	0x00000400
 8004e54:	240004fc 	.word	0x240004fc
 8004e58:	24000d10 	.word	0x24000d10

08004e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004e60:	4b37      	ldr	r3, [pc, #220]	@ (8004f40 <SystemInit+0xe4>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e66:	4a36      	ldr	r2, [pc, #216]	@ (8004f40 <SystemInit+0xe4>)
 8004e68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004e70:	4b34      	ldr	r3, [pc, #208]	@ (8004f44 <SystemInit+0xe8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	2b06      	cmp	r3, #6
 8004e7a:	d807      	bhi.n	8004e8c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004e7c:	4b31      	ldr	r3, [pc, #196]	@ (8004f44 <SystemInit+0xe8>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f023 030f 	bic.w	r3, r3, #15
 8004e84:	4a2f      	ldr	r2, [pc, #188]	@ (8004f44 <SystemInit+0xe8>)
 8004e86:	f043 0307 	orr.w	r3, r3, #7
 8004e8a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8004f48 <SystemInit+0xec>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a2d      	ldr	r2, [pc, #180]	@ (8004f48 <SystemInit+0xec>)
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004e98:	4b2b      	ldr	r3, [pc, #172]	@ (8004f48 <SystemInit+0xec>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8004f48 <SystemInit+0xec>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	4929      	ldr	r1, [pc, #164]	@ (8004f48 <SystemInit+0xec>)
 8004ea4:	4b29      	ldr	r3, [pc, #164]	@ (8004f4c <SystemInit+0xf0>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004eaa:	4b26      	ldr	r3, [pc, #152]	@ (8004f44 <SystemInit+0xe8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d007      	beq.n	8004ec6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004eb6:	4b23      	ldr	r3, [pc, #140]	@ (8004f44 <SystemInit+0xe8>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f023 030f 	bic.w	r3, r3, #15
 8004ebe:	4a21      	ldr	r2, [pc, #132]	@ (8004f44 <SystemInit+0xe8>)
 8004ec0:	f043 0307 	orr.w	r3, r3, #7
 8004ec4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004ec6:	4b20      	ldr	r3, [pc, #128]	@ (8004f48 <SystemInit+0xec>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8004f48 <SystemInit+0xec>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8004f48 <SystemInit+0xec>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f48 <SystemInit+0xec>)
 8004eda:	4a1d      	ldr	r2, [pc, #116]	@ (8004f50 <SystemInit+0xf4>)
 8004edc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004ede:	4b1a      	ldr	r3, [pc, #104]	@ (8004f48 <SystemInit+0xec>)
 8004ee0:	4a1c      	ldr	r2, [pc, #112]	@ (8004f54 <SystemInit+0xf8>)
 8004ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004ee4:	4b18      	ldr	r3, [pc, #96]	@ (8004f48 <SystemInit+0xec>)
 8004ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8004f58 <SystemInit+0xfc>)
 8004ee8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004eea:	4b17      	ldr	r3, [pc, #92]	@ (8004f48 <SystemInit+0xec>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004ef0:	4b15      	ldr	r3, [pc, #84]	@ (8004f48 <SystemInit+0xec>)
 8004ef2:	4a19      	ldr	r2, [pc, #100]	@ (8004f58 <SystemInit+0xfc>)
 8004ef4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004ef6:	4b14      	ldr	r3, [pc, #80]	@ (8004f48 <SystemInit+0xec>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004efc:	4b12      	ldr	r3, [pc, #72]	@ (8004f48 <SystemInit+0xec>)
 8004efe:	4a16      	ldr	r2, [pc, #88]	@ (8004f58 <SystemInit+0xfc>)
 8004f00:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004f02:	4b11      	ldr	r3, [pc, #68]	@ (8004f48 <SystemInit+0xec>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004f08:	4b0f      	ldr	r3, [pc, #60]	@ (8004f48 <SystemInit+0xec>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a0e      	ldr	r2, [pc, #56]	@ (8004f48 <SystemInit+0xec>)
 8004f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004f14:	4b0c      	ldr	r3, [pc, #48]	@ (8004f48 <SystemInit+0xec>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004f1a:	4b10      	ldr	r3, [pc, #64]	@ (8004f5c <SystemInit+0x100>)
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	4b10      	ldr	r3, [pc, #64]	@ (8004f60 <SystemInit+0x104>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f26:	d202      	bcs.n	8004f2e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004f28:	4b0e      	ldr	r3, [pc, #56]	@ (8004f64 <SystemInit+0x108>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f68 <SystemInit+0x10c>)
 8004f30:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004f34:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004f36:	bf00      	nop
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	e000ed00 	.word	0xe000ed00
 8004f44:	52002000 	.word	0x52002000
 8004f48:	58024400 	.word	0x58024400
 8004f4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004f50:	02020200 	.word	0x02020200
 8004f54:	01ff0000 	.word	0x01ff0000
 8004f58:	01010280 	.word	0x01010280
 8004f5c:	5c001000 	.word	0x5c001000
 8004f60:	ffff0000 	.word	0xffff0000
 8004f64:	51008108 	.word	0x51008108
 8004f68:	52004000 	.word	0x52004000

08004f6c <_ZN3Pin3setEb>:
        inline bool get()
        {
            return HAL_GPIO_ReadPin(this->GPIOx, this->pin);
        }

        inline void set(bool value)
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	70fb      	strb	r3, [r7, #3]
        {
            if (value)
 8004f78:	78fb      	ldrb	r3, [r7, #3]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d008      	beq.n	8004f90 <_ZN3Pin3setEb+0x24>
            {
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_SET);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	8bdb      	ldrh	r3, [r3, #30]
 8004f86:	2201      	movs	r2, #1
 8004f88:	4619      	mov	r1, r3
 8004f8a:	f003 feb9 	bl	8008d00 <HAL_GPIO_WritePin>
            }
            else
            {
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
            }
        }
 8004f8e:	e007      	b.n	8004fa0 <_ZN3Pin3setEb+0x34>
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	8bdb      	ldrh	r3, [r3, #30]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	f003 feb0 	bl	8008d00 <HAL_GPIO_WritePin>
        }
 8004fa0:	bf00      	nop
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	4a08      	ldr	r2, [pc, #32]	@ (8004fd4 <_ZN6ModuleC1Ev+0x2c>)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	601a      	str	r2, [r3, #0]
{
	this->counter = 0;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 8004fc2:	4805      	ldr	r0, [pc, #20]	@ (8004fd8 <_ZN6ModuleC1Ev+0x30>)
 8004fc4:	f00e f9ce 	bl	8013364 <puts>
}
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	0801478c 	.word	0x0801478c
 8004fd8:	080145a0 	.word	0x080145a0

08004fdc <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	4a04      	ldr	r2, [pc, #16]	@ (8004ff8 <_ZN6ModuleD1Ev+0x1c>)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4618      	mov	r0, r3
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	0801478c 	.word	0x0801478c

08004ffc <_ZN6ModuleD0Ev>:
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff ffe9 	bl	8004fdc <_ZN6ModuleD1Ev>
 800500a:	2114      	movs	r1, #20
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f00d fd72 	bl	8012af6 <_ZdlPvj>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
	++this->counter;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	429a      	cmp	r2, r3
 8005038:	db08      	blt.n	800504c <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3310      	adds	r3, #16
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
		this->counter = 0;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	611a      	str	r2, [r3, #16]
	}

	this->update();
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3308      	adds	r3, #8
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	4798      	blx	r3
}
 8005058:	bf00      	nop
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <_ZN6Module13runModulePostEv>:


void Module::runModulePost()
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
	this->updatePost();
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	330c      	adds	r3, #12
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	4798      	blx	r3
}
 8005074:	bf00      	nop
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <_ZN6Module6updateEv>:

void Module::update(){}
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <_ZN6Module9configureEv>:
void Module::configure(){}
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <_ZN6Module15handleInterruptEv>:
void Module::handleInterrupt(){}
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>:
#include "../interrupt/interrupt.h"
#include "moduleInterrupt.h"
#include "module.h"


ModuleInterrupt::ModuleInterrupt(IRQn_Type interruptNumber, Module* ownerptr, void (Module::*handler)())
 80050e0:	b082      	sub	sp, #8
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	61fb      	str	r3, [r7, #28]
 80050ee:	460b      	mov	r3, r1
 80050f0:	817b      	strh	r3, [r7, #10]
    : InterruptOwnerPtr(ownerptr),
	  InterruptHandler(handler)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7fb fddd 	bl	8000cb4 <_ZN9InterruptC1Ev>
 80050fa:	4a0e      	ldr	r2, [pc, #56]	@ (8005134 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE+0x54>)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	601a      	str	r2, [r3, #0]
    : InterruptOwnerPtr(ownerptr),
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	605a      	str	r2, [r3, #4]
	  InterruptHandler(handler)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3308      	adds	r3, #8
 800510a:	f107 021c 	add.w	r2, r7, #28
 800510e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005112:	e883 0003 	stmia.w	r3, {r0, r1}
	// Allows interrupt to access owner's data
	//InterruptOwnerPtr = owner;

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 8005116:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4611      	mov	r1, r2
 800511e:	4618      	mov	r0, r3
 8005120:	f7fb fdd8 	bl	8000cd4 <_ZN9Interrupt8RegisterEiPS_>
}
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005130:	b002      	add	sp, #8
 8005132:	4770      	bx	lr
 8005134:	080147b0 	.word	0x080147b0

08005138 <_ZN15ModuleInterrupt11ISR_HandlerEv>:


void ModuleInterrupt::ISR_Handler(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
	//this->InterruptOwnerPtr->handleInterrupt();

    if (this->InterruptOwnerPtr && this->InterruptHandler) {
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d02a      	beq.n	800519e <_ZN15ModuleInterrupt11ISR_HandlerEv+0x66>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d107      	bne.n	8005160 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x28>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x28>
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x2a>
 8005160:	2300      	movs	r3, #0
 8005162:	2b01      	cmp	r3, #1
 8005164:	d01b      	beq.n	800519e <_ZN15ModuleInterrupt11ISR_HandlerEv+0x66>
        (this->InterruptOwnerPtr->*InterruptHandler)(); // Call the member function of the owner
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d102      	bne.n	8005178 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x40>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	e00a      	b.n	800518e <_ZN15ModuleInterrupt11ISR_HandlerEv+0x56>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	68d2      	ldr	r2, [r2, #12]
 8005180:	1052      	asrs	r2, r2, #1
 8005182:	4413      	add	r3, r2
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6892      	ldr	r2, [r2, #8]
 800518a:	4413      	add	r3, r2
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6852      	ldr	r2, [r2, #4]
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	68c9      	ldr	r1, [r1, #12]
 8005196:	1049      	asrs	r1, r1, #1
 8005198:	440a      	add	r2, r1
 800519a:	4610      	mov	r0, r2
 800519c:	4798      	blx	r3
    }
}
 800519e:	bf00      	nop
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <_ZN11RemoraCommsC1EP11SPI_TypeDef>:
#include "../remoraComms/RemoraComms.h"
#include <cstdio>


RemoraComms::RemoraComms(SPI_TypeDef* spiType) :
 80051a8:	b590      	push	{r4, r7, lr}
 80051aa:	b091      	sub	sp, #68	@ 0x44
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
    spiType(spiType)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff fef7 	bl	8004fa8 <_ZN6ModuleC1Ev>
 80051ba:	4a31      	ldr	r2, [pc, #196]	@ (8005280 <_ZN11RemoraCommsC1EP11SPI_TypeDef+0xd8>)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	61da      	str	r2, [r3, #28]
{
    this->spiHandle.Instance = this->spiType;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69da      	ldr	r2, [r3, #28]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    this->irqNss = EXTI4_IRQn;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	220a      	movs	r2, #10
 80051d2:	869a      	strh	r2, [r3, #52]	@ 0x34
    this->irqDMAtx = DMA1_Stream0_IRQn;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	220b      	movs	r2, #11
 80051d8:	871a      	strh	r2, [r3, #56]	@ 0x38
    this->irqDMArx = DMA1_Stream1_IRQn;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	220c      	movs	r2, #12
 80051de:	86da      	strh	r2, [r3, #54]	@ 0x36

    // the constructor is called before any DMA and cache setup
    // don't do stuff here

    this->pin1 = new Pin("PE_11", OUTPUT);
 80051e0:	2044      	movs	r0, #68	@ 0x44
 80051e2:	f00d fc9c 	bl	8012b1e <_Znwj>
 80051e6:	4603      	mov	r3, r0
 80051e8:	461c      	mov	r4, r3
 80051ea:	f107 0320 	add.w	r3, r7, #32
 80051ee:	4618      	mov	r0, r3
 80051f0:	f00d fcbf 	bl	8012b72 <_ZNSaIcEC1Ev>
 80051f4:	f107 0220 	add.w	r2, r7, #32
 80051f8:	f107 0308 	add.w	r3, r7, #8
 80051fc:	4921      	ldr	r1, [pc, #132]	@ (8005284 <_ZN11RemoraCommsC1EP11SPI_TypeDef+0xdc>)
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fd fd22 	bl	8002c48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8005204:	f107 0308 	add.w	r3, r7, #8
 8005208:	2201      	movs	r2, #1
 800520a:	4619      	mov	r1, r3
 800520c:	4620      	mov	r0, r4
 800520e:	f7fb fc17 	bl	8000a40 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	615c      	str	r4, [r3, #20]
 8005216:	f107 0308 	add.w	r3, r7, #8
 800521a:	4618      	mov	r0, r3
 800521c:	f00d fd3f 	bl	8012c9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005220:	f107 0320 	add.w	r3, r7, #32
 8005224:	4618      	mov	r0, r3
 8005226:	f00d fca5 	bl	8012b74 <_ZNSaIcED1Ev>
    this->pin2 = new Pin("PE_12", OUTPUT);
 800522a:	2044      	movs	r0, #68	@ 0x44
 800522c:	f00d fc77 	bl	8012b1e <_Znwj>
 8005230:	4603      	mov	r3, r0
 8005232:	461c      	mov	r4, r3
 8005234:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005238:	4618      	mov	r0, r3
 800523a:	f00d fc9a 	bl	8012b72 <_ZNSaIcEC1Ev>
 800523e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8005242:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005246:	4910      	ldr	r1, [pc, #64]	@ (8005288 <_ZN11RemoraCommsC1EP11SPI_TypeDef+0xe0>)
 8005248:	4618      	mov	r0, r3
 800524a:	f7fd fcfd 	bl	8002c48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800524e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005252:	2201      	movs	r2, #1
 8005254:	4619      	mov	r1, r3
 8005256:	4620      	mov	r0, r4
 8005258:	f7fb fbf2 	bl	8000a40 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	619c      	str	r4, [r3, #24]
 8005260:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005264:	4618      	mov	r0, r3
 8005266:	f00d fd1a 	bl	8012c9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800526a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800526e:	4618      	mov	r0, r3
 8005270:	f00d fc80 	bl	8012b74 <_ZNSaIcED1Ev>
}
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4618      	mov	r0, r3
 8005278:	3744      	adds	r7, #68	@ 0x44
 800527a:	46bd      	mov	sp, r7
 800527c:	bd90      	pop	{r4, r7, pc}
 800527e:	bf00      	nop
 8005280:	080147bc 	.word	0x080147bc
 8005284:	080145f8 	.word	0x080145f8
 8005288:	08014600 	.word	0x08014600

0800528c <_ZN11RemoraComms4initEv>:


void RemoraComms::init()
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08a      	sub	sp, #40	@ 0x28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005294:	f107 0314 	add.w	r3, r7, #20
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	605a      	str	r2, [r3, #4]
 800529e:	609a      	str	r2, [r3, #8]
 80052a0:	60da      	str	r2, [r3, #12]
 80052a2:	611a      	str	r2, [r3, #16]

    if(this->spiHandle.Instance == SPI1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a8:	4a90      	ldr	r2, [pc, #576]	@ (80054ec <_ZN11RemoraComms4initEv+0x260>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	f040 8119 	bne.w	80054e2 <_ZN11RemoraComms4initEv+0x256>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 80052b0:	4b8f      	ldr	r3, [pc, #572]	@ (80054f0 <_ZN11RemoraComms4initEv+0x264>)
 80052b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052b6:	4a8e      	ldr	r2, [pc, #568]	@ (80054f0 <_ZN11RemoraComms4initEv+0x264>)
 80052b8:	f043 0304 	orr.w	r3, r3, #4
 80052bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80052c0:	4b8b      	ldr	r3, [pc, #556]	@ (80054f0 <_ZN11RemoraComms4initEv+0x264>)
 80052c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	613b      	str	r3, [r7, #16]
 80052cc:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 80052ce:	2310      	movs	r3, #16
 80052d0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80052d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80052d6:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d8:	2300      	movs	r3, #0
 80052da:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052dc:	f107 0314 	add.w	r3, r7, #20
 80052e0:	4619      	mov	r1, r3
 80052e2:	4884      	ldr	r0, [pc, #528]	@ (80054f4 <_ZN11RemoraComms4initEv+0x268>)
 80052e4:	f003 fb5c 	bl	80089a0 <HAL_GPIO_Init>
        //NssInterrupt = new ModuleInterrupt(this->irqNss, this, static_cast<void (Module::*)()>(&RemoraComms::handleNssInterrupt));
    	//HAL_NVIC_SetPriority(this->irqNss, 6, 0);
        //HAL_NVIC_EnableIRQ(this->irqNss);


        printf("	Initialising SPI1 slave\n");
 80052e8:	4883      	ldr	r0, [pc, #524]	@ (80054f8 <_ZN11RemoraComms4initEv+0x26c>)
 80052ea:	f00e f83b 	bl	8013364 <puts>

        this->spiHandle.Init.Mode           		= SPI_MODE_SLAVE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	641a      	str	r2, [r3, #64]	@ 0x40
        this->spiHandle.Init.Direction      		= SPI_DIRECTION_2LINES;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	645a      	str	r2, [r3, #68]	@ 0x44
        this->spiHandle.Init.DataSize       		= SPI_DATASIZE_8BIT;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2207      	movs	r2, #7
 80052fe:	649a      	str	r2, [r3, #72]	@ 0x48
        this->spiHandle.Init.CLKPolarity    		= SPI_POLARITY_LOW;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	64da      	str	r2, [r3, #76]	@ 0x4c
        this->spiHandle.Init.CLKPhase       		= SPI_PHASE_1EDGE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	651a      	str	r2, [r3, #80]	@ 0x50
        this->spiHandle.Init.NSS            		= SPI_NSS_HARD_INPUT;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	655a      	str	r2, [r3, #84]	@ 0x54
        //this->spiHandle.Init.NSS            		= SPI_NSS_SOFT;
        this->spiHandle.Init.FirstBit       		= SPI_FIRSTBIT_MSB;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	65da      	str	r2, [r3, #92]	@ 0x5c
        this->spiHandle.Init.TIMode         		= SPI_TIMODE_DISABLE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	661a      	str	r2, [r3, #96]	@ 0x60
        this->spiHandle.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	665a      	str	r2, [r3, #100]	@ 0x64
        this->spiHandle.Init.CRCPolynomial  		= 0x0;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	669a      	str	r2, [r3, #104]	@ 0x68
        this->spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	671a      	str	r2, [r3, #112]	@ 0x70
        //this->spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_ENABLE;
        this->spiHandle.Init.NSSPolarity 			= SPI_NSS_POLARITY_LOW;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	675a      	str	r2, [r3, #116]	@ 0x74
        this->spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	679a      	str	r2, [r3, #120]	@ 0x78
        this->spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	67da      	str	r2, [r3, #124]	@ 0x7c
        this->spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        this->spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        this->spiHandle.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        this->spiHandle.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        this->spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        this->spiHandle.Init.IOSwap 				= SPI_IO_SWAP_DISABLE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        HAL_SPI_Init(&this->spiHandle);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	333c      	adds	r3, #60	@ 0x3c
 8005376:	4618      	mov	r0, r3
 8005378:	f008 fe5e 	bl	800e038 <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 800537c:	4b5c      	ldr	r3, [pc, #368]	@ (80054f0 <_ZN11RemoraComms4initEv+0x264>)
 800537e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005382:	4a5b      	ldr	r2, [pc, #364]	@ (80054f0 <_ZN11RemoraComms4initEv+0x264>)
 8005384:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005388:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800538c:	4b58      	ldr	r3, [pc, #352]	@ (80054f0 <_ZN11RemoraComms4initEv+0x264>)
 800538e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005392:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	68fb      	ldr	r3, [r7, #12]

		printf("	Initialising GPIO for SPI\n");
 800539a:	4858      	ldr	r0, [pc, #352]	@ (80054fc <_ZN11RemoraComms4initEv+0x270>)
 800539c:	f00d ffe2 	bl	8013364 <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053a0:	4b53      	ldr	r3, [pc, #332]	@ (80054f0 <_ZN11RemoraComms4initEv+0x264>)
 80053a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053a6:	4a52      	ldr	r2, [pc, #328]	@ (80054f0 <_ZN11RemoraComms4initEv+0x264>)
 80053a8:	f043 0301 	orr.w	r3, r3, #1
 80053ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80053b0:	4b4f      	ldr	r3, [pc, #316]	@ (80054f0 <_ZN11RemoraComms4initEv+0x264>)
 80053b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	60bb      	str	r3, [r7, #8]
 80053bc:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 80053be:	f107 0314 	add.w	r3, r7, #20
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	605a      	str	r2, [r3, #4]
 80053c8:	609a      	str	r2, [r3, #8]
 80053ca:	60da      	str	r2, [r3, #12]
 80053cc:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80053ce:	23f0      	movs	r3, #240	@ 0xf0
 80053d0:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053d2:	2302      	movs	r3, #2
 80053d4:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053da:	2300      	movs	r3, #0
 80053dc:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80053de:	2305      	movs	r3, #5
 80053e0:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053e2:	f107 0314 	add.w	r3, r7, #20
 80053e6:	4619      	mov	r1, r3
 80053e8:	4842      	ldr	r0, [pc, #264]	@ (80054f4 <_ZN11RemoraComms4initEv+0x268>)
 80053ea:	f003 fad9 	bl	80089a0 <HAL_GPIO_Init>

        printf("	Initialising DMA for SPI\n");
 80053ee:	4844      	ldr	r0, [pc, #272]	@ (8005500 <_ZN11RemoraComms4initEv+0x274>)
 80053f0:	f00d ffb8 	bl	8013364 <puts>

        this->hdma_spi_rx.Instance 					= DMA1_Stream1;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a43      	ldr	r2, [pc, #268]	@ (8005504 <_ZN11RemoraComms4initEv+0x278>)
 80053f8:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
        this->hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2225      	movs	r2, #37	@ 0x25
 8005400:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        this->hdma_spi_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
        this->hdma_spi_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        this->hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800541a:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
        this->hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
        this->hdma_spi_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        this->hdma_spi_rx.Init.Mode 				= DMA_CIRCULAR;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005434:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
        //this->hdma_spi_rx.Init.Mode 				= DMA_NORMAL;
        this->hdma_spi_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
        this->hdma_spi_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

        HAL_DMA_Init(&this->hdma_spi_rx);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800544e:	4618      	mov	r0, r3
 8005450:	f001 fddc 	bl	800700c <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmarx, this->hdma_spi_rx);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f503 729e 	add.w	r2, r3, #316	@ 0x13c
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174

        //dmaRxInterrupt = new ModuleInterrupt(this->irqDMArx, this, static_cast<void (Module::*)()>(&RemoraComms::handleRxInterrupt));
    	//HAL_NVIC_SetPriority(this->irqDMArx, 5, 0);
        //HAL_NVIC_EnableIRQ(this->irqDMArx);

        this->hdma_spi_tx.Instance 					= DMA1_Stream0;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a26      	ldr	r2, [pc, #152]	@ (8005508 <_ZN11RemoraComms4initEv+0x27c>)
 8005470:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        this->hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2226      	movs	r2, #38	@ 0x26
 8005478:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        this->hdma_spi_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2240      	movs	r2, #64	@ 0x40
 8005480:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        this->hdma_spi_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
        this->hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005492:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
        this->hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        this->hdma_spi_tx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        this->hdma_spi_tx.Init.Mode 				= DMA_CIRCULAR;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054ac:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        //this->hdma_spi_tx.Init.Mode 				= DMA_NORMAL;
        this->hdma_spi_tx.Init.Priority 			= DMA_PRIORITY_LOW;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        this->hdma_spi_tx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

        HAL_DMA_Init(&this->hdma_spi_tx);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	33c4      	adds	r3, #196	@ 0xc4
 80054c4:	4618      	mov	r0, r3
 80054c6:	f001 fda1 	bl	800700c <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmatx, this->hdma_spi_tx);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

        //dmaTxInterrupt = new ModuleInterrupt(this->irqDMAtx, this, static_cast<void (Module::*)()>(&RemoraComms::handleTxInterrupt));
        //HAL_NVIC_SetPriority(this->irqDMAtx, 4, 0);	// TX needs to be a higher priority than RX
        //HAL_NVIC_EnableIRQ(this->irqDMAtx);
    }
}
 80054e2:	bf00      	nop
 80054e4:	3728      	adds	r7, #40	@ 0x28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40013000 	.word	0x40013000
 80054f0:	58024400 	.word	0x58024400
 80054f4:	58020000 	.word	0x58020000
 80054f8:	08014608 	.word	0x08014608
 80054fc:	08014624 	.word	0x08014624
 8005500:	08014640 	.word	0x08014640
 8005504:	40020028 	.word	0x40020028
 8005508:	40020010 	.word	0x40020010

0800550c <_ZN11RemoraComms5startEv>:

void RemoraComms::start()
{
 800550c:	b590      	push	{r4, r7, lr}
 800550e:	b08b      	sub	sp, #44	@ 0x2c
 8005510:	af02      	add	r7, sp, #8
 8005512:	6078      	str	r0, [r7, #4]
    NssInterrupt = new ModuleInterrupt(this->irqNss, this, static_cast<void (Module::*)()>(&RemoraComms::handleNssInterrupt));
 8005514:	2010      	movs	r0, #16
 8005516:	f00d fb02 	bl	8012b1e <_Znwj>
 800551a:	4603      	mov	r3, r0
 800551c:	461c      	mov	r4, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f9b3 1034 	ldrsh.w	r1, [r3, #52]	@ 0x34
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	4b4d      	ldr	r3, [pc, #308]	@ (800565c <_ZN11RemoraComms5startEv+0x150>)
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	2300      	movs	r3, #0
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	4620      	mov	r0, r4
 8005536:	f7ff fdd3 	bl	80050e0 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	629c      	str	r4, [r3, #40]	@ 0x28
	HAL_NVIC_SetPriority(this->irqNss, 6, 0);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8005544:	2200      	movs	r2, #0
 8005546:	2106      	movs	r1, #6
 8005548:	4618      	mov	r0, r3
 800554a:	f001 fcae 	bl	8006eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(this->irqNss);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8005554:	4618      	mov	r0, r3
 8005556:	f001 fcc2 	bl	8006ede <HAL_NVIC_EnableIRQ>

    dmaRxInterrupt = new ModuleInterrupt(this->irqDMArx, this, static_cast<void (Module::*)()>(&RemoraComms::handleRxInterrupt));
 800555a:	2010      	movs	r0, #16
 800555c:	f00d fadf 	bl	8012b1e <_Znwj>
 8005560:	4603      	mov	r3, r0
 8005562:	461c      	mov	r4, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f9b3 1036 	ldrsh.w	r1, [r3, #54]	@ 0x36
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	4b3c      	ldr	r3, [pc, #240]	@ (8005660 <_ZN11RemoraComms5startEv+0x154>)
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	4620      	mov	r0, r4
 800557c:	f7ff fdb0 	bl	80050e0 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	631c      	str	r4, [r3, #48]	@ 0x30
	HAL_NVIC_SetPriority(this->irqDMArx, 5, 0);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 800558a:	2200      	movs	r2, #0
 800558c:	2105      	movs	r1, #5
 800558e:	4618      	mov	r0, r3
 8005590:	f001 fc8b 	bl	8006eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(this->irqDMArx);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 800559a:	4618      	mov	r0, r3
 800559c:	f001 fc9f 	bl	8006ede <HAL_NVIC_EnableIRQ>

    dmaTxInterrupt = new ModuleInterrupt(this->irqDMAtx, this, static_cast<void (Module::*)()>(&RemoraComms::handleTxInterrupt));
 80055a0:	2010      	movs	r0, #16
 80055a2:	f00d fabc 	bl	8012b1e <_Znwj>
 80055a6:	4603      	mov	r3, r0
 80055a8:	461c      	mov	r4, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f9b3 1038 	ldrsh.w	r1, [r3, #56]	@ 0x38
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	4b2c      	ldr	r3, [pc, #176]	@ (8005664 <_ZN11RemoraComms5startEv+0x158>)
 80055b4:	61bb      	str	r3, [r7, #24]
 80055b6:	2300      	movs	r3, #0
 80055b8:	61fb      	str	r3, [r7, #28]
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	4620      	mov	r0, r4
 80055c2:	f7ff fd8d 	bl	80050e0 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	62dc      	str	r4, [r3, #44]	@ 0x2c
    HAL_NVIC_SetPriority(this->irqDMAtx, 4, 0);	// TX needs to be a higher priority than RX
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 80055d0:	2200      	movs	r2, #0
 80055d2:	2104      	movs	r1, #4
 80055d4:	4618      	mov	r0, r3
 80055d6:	f001 fc68 	bl	8006eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(this->irqDMAtx);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 80055e0:	4618      	mov	r0, r3
 80055e2:	f001 fc7c 	bl	8006ede <HAL_NVIC_EnableIRQ>

	initTxPingPongBuffer(&txPingPongBuffer);
 80055e6:	4820      	ldr	r0, [pc, #128]	@ (8005668 <_ZN11RemoraComms5startEv+0x15c>)
 80055e8:	f7fc ffca 	bl	8002580 <_Z20initTxPingPongBufferP16TxPingPongBuffer>
	initRxPingPongBuffer(&rxPingPongBuffer);
 80055ec:	481f      	ldr	r0, [pc, #124]	@ (800566c <_ZN11RemoraComms5startEv+0x160>)
 80055ee:	f7fc ffb9 	bl	8002564 <_Z20initRxPingPongBufferP16RxPingPongBuffer>
    //txBuffer = getAltTxBuffer(&txPingPongBuffer);
    //txBuffer->header = PRU_DATA;
    //SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)txBuffer->txBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);

	// for Tx use only one buffer, the current buffer
	txBuffer = getCurrentTxBuffer(&txPingPongBuffer);
 80055f2:	481d      	ldr	r0, [pc, #116]	@ (8005668 <_ZN11RemoraComms5startEv+0x15c>)
 80055f4:	f7fc fff4 	bl	80025e0 <_Z18getCurrentTxBufferP16TxPingPongBuffer>
 80055f8:	4602      	mov	r2, r0
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	625a      	str	r2, [r3, #36]	@ 0x24

	// for Rx use the alternate buffer in multi buffer mode
	rxBuffer = getAltRxBuffer(&rxPingPongBuffer);
 80055fe:	481b      	ldr	r0, [pc, #108]	@ (800566c <_ZN11RemoraComms5startEv+0x160>)
 8005600:	f7fc fffe 	bl	8002600 <_Z14getAltRxBufferP16RxPingPongBuffer>
 8005604:	4602      	mov	r2, r0
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	621a      	str	r2, [r3, #32]


    this->spiHandle.Lock = HAL_UNLOCKED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc

	// start the multi buffer DMA SPI in circular mode pointing to one tx and rx buffer.
	// rx buffer will swap following a write command
	this->dmaStatus = this->startMultiBufferDMASPI((uint8_t *)txBuffer->txBuffer, (uint8_t *)txBuffer->txBuffer, (uint8_t *)rxBuffer->rxBuffer, (uint8_t *)rxBuffer->rxBuffer, SPI_BUFF_SIZE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005616:	4619      	mov	r1, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561c:	4618      	mov	r0, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	461c      	mov	r4, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	461a      	mov	r2, r3
 800562a:	2340      	movs	r3, #64	@ 0x40
 800562c:	9301      	str	r3, [sp, #4]
 800562e:	9200      	str	r2, [sp, #0]
 8005630:	4623      	mov	r3, r4
 8005632:	4602      	mov	r2, r0
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f81d 	bl	8005674 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t>
 800563a:	4603      	mov	r3, r0
 800563c:	461a      	mov	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f883 21b6 	strb.w	r2, [r3, #438]	@ 0x1b6

    printf("%d\n", this->dmaStatus);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 31b6 	ldrb.w	r3, [r3, #438]	@ 0x1b6
 800564a:	4619      	mov	r1, r3
 800564c:	4808      	ldr	r0, [pc, #32]	@ (8005670 <_ZN11RemoraComms5startEv+0x164>)
 800564e:	f00d fe19 	bl	8013284 <iprintf>
}
 8005652:	bf00      	nop
 8005654:	3724      	adds	r7, #36	@ 0x24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd90      	pop	{r4, r7, pc}
 800565a:	bf00      	nop
 800565c:	08006329 	.word	0x08006329
 8005660:	0800639d 	.word	0x0800639d
 8005664:	08006375 	.word	0x08006375
 8005668:	300000a0 	.word	0x300000a0
 800566c:	30000000 	.word	0x30000000
 8005670:	0801465c 	.word	0x0801465c

08005674 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t>:


HAL_StatusTypeDef RemoraComms::startMultiBufferDMASPI(uint8_t *pTxBuffer0, uint8_t *pTxBuffer1,
                                                      uint8_t *pRxBuffer0, uint8_t *pRxBuffer1,
                                                      uint16_t Size)
{
 8005674:	b590      	push	{r4, r7, lr}
 8005676:	b087      	sub	sp, #28
 8005678:	af02      	add	r7, sp, #8
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	603b      	str	r3, [r7, #0]
    /* Check Direction parameter */
    assert_param(IS_SPI_DIRECTION_2LINES(this->spiHandle.Init.Direction));

    if (this->spiHandle.State != HAL_SPI_STATE_READY)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b01      	cmp	r3, #1
 800568c:	bf14      	ite	ne
 800568e:	2301      	movne	r3, #1
 8005690:	2300      	moveq	r3, #0
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x28>
    {
        return HAL_BUSY;
 8005698:	2302      	movs	r3, #2
 800569a:	e13e      	b.n	800591a <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    if ((pTxBuffer0 == NULL) || (pRxBuffer0 == NULL) || (Size == 0UL))
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d005      	beq.n	80056ae <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 80056a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3e>
    {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e133      	b.n	800591a <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* If secondary Tx or Rx buffer is not provided, use the primary buffer */
    if (pTxBuffer1 == NULL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x48>
    {
        pTxBuffer1 = pTxBuffer0;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	607b      	str	r3, [r7, #4]
    }

    if (pRxBuffer1 == NULL)
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x52>
    {
        pRxBuffer1 = pRxBuffer0;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	623b      	str	r3, [r7, #32]
    }

    /* Lock the process */
    __HAL_LOCK(&this->spiHandle);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x60>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e122      	b.n	800591a <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc

    /* Set the transaction information */
    this->spiHandle.State       = HAL_SPI_STATE_BUSY_TX_RX;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2205      	movs	r2, #5
 80056e0:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd
    this->spiHandle.ErrorCode   = HAL_SPI_ERROR_NONE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    this->spiHandle.TxXferSize  = Size;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80056f0:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    this->spiHandle.TxXferCount = Size;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80056f8:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
    this->spiHandle.RxXferSize  = Size;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005700:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
    this->spiHandle.RxXferCount = Size;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005708:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6

    /* Init unused fields in handle to zero */
    this->spiHandle.RxISR       = NULL;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    this->spiHandle.TxISR       = NULL;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

    /* Set Full-Duplex mode */
    SPI_2LINES(&this->spiHandle);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005726:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800572a:	60da      	str	r2, [r3, #12]

    /* Reset the Tx/Rx DMA bits */
    CLEAR_BIT(this->spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005736:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800573a:	609a      	str	r2, [r3, #8]

    /* Adjust XferCount according to DMA alignment / Data size */
    if (this->spiHandle.Init.DataSize <= SPI_DATASIZE_8BIT)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005740:	2b07      	cmp	r3, #7
 8005742:	d820      	bhi.n	8005786 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x112>
    {
        if (this->hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800574a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800574e:	d109      	bne.n	8005764 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0xf0>
        {
            this->spiHandle.TxXferCount = (this->spiHandle.TxXferCount + 1UL) >> 1UL;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8005756:	b29b      	uxth	r3, r3
 8005758:	3301      	adds	r3, #1
 800575a:	085b      	lsrs	r3, r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
        }
        if (this->hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800576a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800576e:	d12e      	bne.n	80057ce <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            this->spiHandle.RxXferCount = (this->spiHandle.RxXferCount + 1UL) >> 1UL;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8005776:	b29b      	uxth	r3, r3
 8005778:	3301      	adds	r3, #1
 800577a:	085b      	lsrs	r3, r3, #1
 800577c:	b29a      	uxth	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
 8005784:	e023      	b.n	80057ce <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        }
    }
    else if (this->spiHandle.Init.DataSize <= SPI_DATASIZE_16BIT)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800578a:	2b0f      	cmp	r3, #15
 800578c:	d81f      	bhi.n	80057ce <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
    {
        if (this->hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005794:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005798:	d109      	bne.n	80057ae <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x13a>
        {
            this->spiHandle.TxXferCount = (this->spiHandle.TxXferCount + 1UL) >> 1UL;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	3301      	adds	r3, #1
 80057a4:	085b      	lsrs	r3, r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
        }
        if (this->hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80057b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057b8:	d109      	bne.n	80057ce <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            this->spiHandle.RxXferCount = (this->spiHandle.RxXferCount + 1UL) >> 1UL;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3301      	adds	r3, #1
 80057c4:	085b      	lsrs	r3, r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
        }
    }

    /* Configure Tx DMA with Multi-Buffer */
    this->hdma_spi_tx.XferHalfCpltCallback = NULL;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    this->hdma_spi_tx.XferCpltCallback     = NULL;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    this->hdma_spi_tx.XferErrorCallback    = NULL;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_tx,
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f103 00c4 	add.w	r0, r3, #196	@ 0xc4
 80057ec:	68b9      	ldr	r1, [r7, #8]
                                                (uint32_t)pTxBuffer0,
                                                (uint32_t)&this->spiHandle.Instance->TXDR,
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f2:	3320      	adds	r3, #32
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_tx,
 80057f4:	461c      	mov	r4, r3
 80057f6:	687a      	ldr	r2, [r7, #4]
                                                (uint32_t)pTxBuffer1,
                                                this->spiHandle.TxXferCount))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 80057fe:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_tx,
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	4613      	mov	r3, r2
 8005804:	4622      	mov	r2, r4
 8005806:	f002 fcb7 	bl	8008178 <HAL_DMAEx_MultiBufferStart_IT>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	bf14      	ite	ne
 8005810:	2301      	movne	r3, #1
 8005812:	2300      	moveq	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d005      	beq.n	8005826 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x1b2>
    {
        __HAL_UNLOCK(&this->spiHandle);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e079      	b.n	800591a <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure Rx DMA with Multi-Buffer */
    this->hdma_spi_rx.XferHalfCpltCallback = NULL;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    this->hdma_spi_rx.XferCpltCallback     = NULL;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
    this->hdma_spi_rx.XferErrorCallback    = NULL;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_rx,
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f503 709e 	add.w	r0, r3, #316	@ 0x13c
                                                (uint32_t)&this->spiHandle.Instance->RXDR,
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005848:	3330      	adds	r3, #48	@ 0x30
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_rx,
 800584a:	461c      	mov	r4, r3
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	6a39      	ldr	r1, [r7, #32]
                                                (uint32_t)pRxBuffer0,
                                                (uint32_t)pRxBuffer1,
                                                this->spiHandle.RxXferCount))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8005856:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_rx,
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	460b      	mov	r3, r1
 800585c:	4621      	mov	r1, r4
 800585e:	f002 fc8b 	bl	8008178 <HAL_DMAEx_MultiBufferStart_IT>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	bf14      	ite	ne
 8005868:	2301      	movne	r3, #1
 800586a:	2300      	moveq	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x214>
    {
        (void)HAL_DMA_Abort(&this->hdma_spi_tx);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	33c4      	adds	r3, #196	@ 0xc4
 8005876:	4618      	mov	r0, r3
 8005878:	f001 ff24 	bl	80076c4 <HAL_DMA_Abort>
        __HAL_UNLOCK(&this->spiHandle);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
        return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e048      	b.n	800591a <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure SPI TSIZE for full transfer or circular mode */
    if (this->hdma_spi_rx.Init.Mode == DMA_CIRCULAR || this->hdma_spi_tx.Init.Mode == DMA_CIRCULAR)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800588e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005892:	d005      	beq.n	80058a0 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x22c>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800589a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800589e:	d108      	bne.n	80058b2 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x23e>
    {
        MODIFY_REG(this->spiHandle.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a4:	6859      	ldr	r1, [r3, #4]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005924 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 80058ac:	400b      	ands	r3, r1
 80058ae:	6053      	str	r3, [r2, #4]
 80058b0:	e009      	b.n	80058c6 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x252>
    }
    else
    {
        MODIFY_REG(this->spiHandle.Instance->CR2, SPI_CR2_TSIZE, Size);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005924 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 80058ba:	4013      	ands	r3, r2
 80058bc:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80058c2:	430b      	orrs	r3, r1
 80058c4:	6053      	str	r3, [r2, #4]
    }

    /* Enable Tx and Rx DMA Requests */
    SET_BIT(this->spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d0:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80058d4:	609a      	str	r2, [r3, #8]

    /* Enable SPI error interrupt */
    __HAL_SPI_ENABLE_IT(&this->spiHandle, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e0:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 80058e4:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&this->spiHandle);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f0:	f042 0201 	orr.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]

    if (this->spiHandle.Init.Mode == SPI_MODE_MASTER)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058fe:	d107      	bne.n	8005910 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x29c>
    {
        SET_BIT(this->spiHandle.Instance->CR1, SPI_CR1_CSTART);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800590a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800590e:	601a      	str	r2, [r3, #0]
    }

    __HAL_UNLOCK(&this->spiHandle);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc

    return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	bd90      	pop	{r4, r7, pc}
 8005922:	bf00      	nop
 8005924:	ffff0000 	.word	0xffff0000

08005928 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval 1 if half transfer complete, 2 if transfer complete, 0 otherwise.
  */
int RemoraComms::DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b088      	sub	sp, #32
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr_dma;
  __IO uint32_t count = 0U;
 8005932:	2300      	movs	r3, #0
 8005934:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005936:	4b62      	ldr	r3, [pc, #392]	@ (8005ac0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a62      	ldr	r2, [pc, #392]	@ (8005ac4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 800593c:	fba2 2303 	umull	r2, r3, r2, r3
 8005940:	0a9b      	lsrs	r3, r3, #10
 8005942:	61bb      	str	r3, [r7, #24]
  int interrupt;

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005948:	617b      	str	r3, [r7, #20]

  tmpisr_dma  = regs_dma->ISR;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	613b      	str	r3, [r7, #16]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a5c      	ldr	r2, [pc, #368]	@ (8005ac8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d04a      	beq.n	80059f0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a5b      	ldr	r2, [pc, #364]	@ (8005acc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d045      	beq.n	80059f0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a59      	ldr	r2, [pc, #356]	@ (8005ad0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d040      	beq.n	80059f0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a58      	ldr	r2, [pc, #352]	@ (8005ad4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d03b      	beq.n	80059f0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a56      	ldr	r2, [pc, #344]	@ (8005ad8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d036      	beq.n	80059f0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a55      	ldr	r2, [pc, #340]	@ (8005adc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d031      	beq.n	80059f0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a53      	ldr	r2, [pc, #332]	@ (8005ae0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d02c      	beq.n	80059f0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a52      	ldr	r2, [pc, #328]	@ (8005ae4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d027      	beq.n	80059f0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a50      	ldr	r2, [pc, #320]	@ (8005ae8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d022      	beq.n	80059f0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a4f      	ldr	r2, [pc, #316]	@ (8005aec <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d01d      	beq.n	80059f0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a4d      	ldr	r2, [pc, #308]	@ (8005af0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d018      	beq.n	80059f0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a4c      	ldr	r2, [pc, #304]	@ (8005af4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1cc>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d013      	beq.n	80059f0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a4a      	ldr	r2, [pc, #296]	@ (8005af8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1d0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00e      	beq.n	80059f0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a49      	ldr	r2, [pc, #292]	@ (8005afc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1d4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d009      	beq.n	80059f0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a47      	ldr	r2, [pc, #284]	@ (8005b00 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1d8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d004      	beq.n	80059f0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a46      	ldr	r2, [pc, #280]	@ (8005b04 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1dc>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d101      	bne.n	80059f4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xcc>
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xce>
 80059f4:	2300      	movs	r3, #0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 8437 	beq.w	800626a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x942>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	2208      	movs	r2, #8
 8005a06:	409a      	lsls	r2, r3
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 809d 	beq.w	8005b4c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x224>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a2c      	ldr	r2, [pc, #176]	@ (8005ac8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d04a      	beq.n	8005ab2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a2a      	ldr	r2, [pc, #168]	@ (8005acc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d045      	beq.n	8005ab2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a29      	ldr	r2, [pc, #164]	@ (8005ad0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d040      	beq.n	8005ab2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a27      	ldr	r2, [pc, #156]	@ (8005ad4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d03b      	beq.n	8005ab2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a26      	ldr	r2, [pc, #152]	@ (8005ad8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d036      	beq.n	8005ab2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a24      	ldr	r2, [pc, #144]	@ (8005adc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d031      	beq.n	8005ab2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a23      	ldr	r2, [pc, #140]	@ (8005ae0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d02c      	beq.n	8005ab2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a21      	ldr	r2, [pc, #132]	@ (8005ae4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d027      	beq.n	8005ab2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a20      	ldr	r2, [pc, #128]	@ (8005ae8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d022      	beq.n	8005ab2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a1e      	ldr	r2, [pc, #120]	@ (8005aec <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c4>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d01d      	beq.n	8005ab2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8005af0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d018      	beq.n	8005ab2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a1b      	ldr	r2, [pc, #108]	@ (8005af4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1cc>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d013      	beq.n	8005ab2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8005af8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1d0>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00e      	beq.n	8005ab2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a18      	ldr	r2, [pc, #96]	@ (8005afc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1d4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d009      	beq.n	8005ab2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a17      	ldr	r2, [pc, #92]	@ (8005b00 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1d8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d004      	beq.n	8005ab2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a15      	ldr	r2, [pc, #84]	@ (8005b04 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1dc>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d12a      	bne.n	8005b08 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1e0>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	e029      	b.n	8005b12 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ea>
 8005abe:	bf00      	nop
 8005ac0:	24000050 	.word	0x24000050
 8005ac4:	1b4e81b5 	.word	0x1b4e81b5
 8005ac8:	40020010 	.word	0x40020010
 8005acc:	40020028 	.word	0x40020028
 8005ad0:	40020040 	.word	0x40020040
 8005ad4:	40020058 	.word	0x40020058
 8005ad8:	40020070 	.word	0x40020070
 8005adc:	40020088 	.word	0x40020088
 8005ae0:	400200a0 	.word	0x400200a0
 8005ae4:	400200b8 	.word	0x400200b8
 8005ae8:	40020410 	.word	0x40020410
 8005aec:	40020428 	.word	0x40020428
 8005af0:	40020440 	.word	0x40020440
 8005af4:	40020458 	.word	0x40020458
 8005af8:	40020470 	.word	0x40020470
 8005afc:	40020488 	.word	0x40020488
 8005b00:	400204a0 	.word	0x400204a0
 8005b04:	400204b8 	.word	0x400204b8
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	bf14      	ite	ne
 8005b16:	2301      	movne	r3, #1
 8005b18:	2300      	moveq	r3, #0
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d015      	beq.n	8005b4c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x224>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0204 	bic.w	r2, r2, #4
 8005b2e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b34:	f003 031f 	and.w	r3, r3, #31
 8005b38:	2208      	movs	r2, #8
 8005b3a:	409a      	lsls	r2, r3
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b44:	f043 0201 	orr.w	r2, r3, #1
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b50:	f003 031f 	and.w	r3, r3, #31
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d06e      	beq.n	8005c40 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x318>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a67      	ldr	r2, [pc, #412]	@ (8005d04 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d04a      	beq.n	8005c02 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a65      	ldr	r2, [pc, #404]	@ (8005d08 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d045      	beq.n	8005c02 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a64      	ldr	r2, [pc, #400]	@ (8005d0c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d040      	beq.n	8005c02 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a62      	ldr	r2, [pc, #392]	@ (8005d10 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d03b      	beq.n	8005c02 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a61      	ldr	r2, [pc, #388]	@ (8005d14 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d036      	beq.n	8005c02 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a5f      	ldr	r2, [pc, #380]	@ (8005d18 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d031      	beq.n	8005c02 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a5e      	ldr	r2, [pc, #376]	@ (8005d1c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d02c      	beq.n	8005c02 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a5c      	ldr	r2, [pc, #368]	@ (8005d20 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d027      	beq.n	8005c02 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a5b      	ldr	r2, [pc, #364]	@ (8005d24 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d022      	beq.n	8005c02 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a59      	ldr	r2, [pc, #356]	@ (8005d28 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d01d      	beq.n	8005c02 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a58      	ldr	r2, [pc, #352]	@ (8005d2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d018      	beq.n	8005c02 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a56      	ldr	r2, [pc, #344]	@ (8005d30 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x408>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d013      	beq.n	8005c02 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a55      	ldr	r2, [pc, #340]	@ (8005d34 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x40c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00e      	beq.n	8005c02 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a53      	ldr	r2, [pc, #332]	@ (8005d38 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x410>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d009      	beq.n	8005c02 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a52      	ldr	r2, [pc, #328]	@ (8005d3c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x414>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d004      	beq.n	8005c02 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a50      	ldr	r2, [pc, #320]	@ (8005d40 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x418>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d105      	bne.n	8005c0e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2e6>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c0c:	e003      	b.n	8005c16 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2ee>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2300      	movs	r3, #0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	bf14      	ite	ne
 8005c1a:	2301      	movne	r3, #1
 8005c1c:	2300      	moveq	r3, #0
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00d      	beq.n	8005c40 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x318>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c28:	f003 031f 	and.w	r3, r3, #31
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	409a      	lsls	r2, r3
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c38:	f043 0202 	orr.w	r2, r3, #2
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c44:	f003 031f 	and.w	r3, r3, #31
 8005c48:	2204      	movs	r2, #4
 8005c4a:	409a      	lsls	r2, r3
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 8090 	beq.w	8005d76 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x44e>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a2a      	ldr	r2, [pc, #168]	@ (8005d04 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d04a      	beq.n	8005cf6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a28      	ldr	r2, [pc, #160]	@ (8005d08 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d045      	beq.n	8005cf6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a27      	ldr	r2, [pc, #156]	@ (8005d0c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d040      	beq.n	8005cf6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a25      	ldr	r2, [pc, #148]	@ (8005d10 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d03b      	beq.n	8005cf6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a24      	ldr	r2, [pc, #144]	@ (8005d14 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d036      	beq.n	8005cf6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a22      	ldr	r2, [pc, #136]	@ (8005d18 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d031      	beq.n	8005cf6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a21      	ldr	r2, [pc, #132]	@ (8005d1c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d02c      	beq.n	8005cf6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8005d20 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d027      	beq.n	8005cf6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a1e      	ldr	r2, [pc, #120]	@ (8005d24 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d022      	beq.n	8005cf6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d28 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d01d      	beq.n	8005cf6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8005d2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d018      	beq.n	8005cf6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a19      	ldr	r2, [pc, #100]	@ (8005d30 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x408>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d013      	beq.n	8005cf6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a18      	ldr	r2, [pc, #96]	@ (8005d34 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x40c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d00e      	beq.n	8005cf6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a16      	ldr	r2, [pc, #88]	@ (8005d38 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x410>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d009      	beq.n	8005cf6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a15      	ldr	r2, [pc, #84]	@ (8005d3c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x414>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d004      	beq.n	8005cf6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a13      	ldr	r2, [pc, #76]	@ (8005d40 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x418>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d126      	bne.n	8005d44 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x41c>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	e024      	b.n	8005d4c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x424>
 8005d02:	bf00      	nop
 8005d04:	40020010 	.word	0x40020010
 8005d08:	40020028 	.word	0x40020028
 8005d0c:	40020040 	.word	0x40020040
 8005d10:	40020058 	.word	0x40020058
 8005d14:	40020070 	.word	0x40020070
 8005d18:	40020088 	.word	0x40020088
 8005d1c:	400200a0 	.word	0x400200a0
 8005d20:	400200b8 	.word	0x400200b8
 8005d24:	40020410 	.word	0x40020410
 8005d28:	40020428 	.word	0x40020428
 8005d2c:	40020440 	.word	0x40020440
 8005d30:	40020458 	.word	0x40020458
 8005d34:	40020470 	.word	0x40020470
 8005d38:	40020488 	.word	0x40020488
 8005d3c:	400204a0 	.word	0x400204a0
 8005d40:	400204b8 	.word	0x400204b8
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	bf14      	ite	ne
 8005d50:	2301      	movne	r3, #1
 8005d52:	2300      	moveq	r3, #0
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00d      	beq.n	8005d76 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x44e>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d5e:	f003 031f 	and.w	r3, r3, #31
 8005d62:	2204      	movs	r2, #4
 8005d64:	409a      	lsls	r2, r3
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d6e:	f043 0204 	orr.w	r2, r3, #4
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	2210      	movs	r2, #16
 8005d80:	409a      	lsls	r2, r3
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	4013      	ands	r3, r2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 80a0 	beq.w	8005ecc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x5a4>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a7f      	ldr	r2, [pc, #508]	@ (8005f90 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x668>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d04a      	beq.n	8005e2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a7e      	ldr	r2, [pc, #504]	@ (8005f94 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x66c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d045      	beq.n	8005e2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a7c      	ldr	r2, [pc, #496]	@ (8005f98 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x670>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d040      	beq.n	8005e2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a7b      	ldr	r2, [pc, #492]	@ (8005f9c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x674>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d03b      	beq.n	8005e2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a79      	ldr	r2, [pc, #484]	@ (8005fa0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x678>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d036      	beq.n	8005e2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a78      	ldr	r2, [pc, #480]	@ (8005fa4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x67c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d031      	beq.n	8005e2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a76      	ldr	r2, [pc, #472]	@ (8005fa8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x680>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d02c      	beq.n	8005e2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a75      	ldr	r2, [pc, #468]	@ (8005fac <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x684>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d027      	beq.n	8005e2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a73      	ldr	r2, [pc, #460]	@ (8005fb0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x688>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d022      	beq.n	8005e2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a72      	ldr	r2, [pc, #456]	@ (8005fb4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x68c>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d01d      	beq.n	8005e2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a70      	ldr	r2, [pc, #448]	@ (8005fb8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x690>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d018      	beq.n	8005e2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a6f      	ldr	r2, [pc, #444]	@ (8005fbc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x694>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d013      	beq.n	8005e2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a6d      	ldr	r2, [pc, #436]	@ (8005fc0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x698>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00e      	beq.n	8005e2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a6c      	ldr	r2, [pc, #432]	@ (8005fc4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x69c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d009      	beq.n	8005e2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a6a      	ldr	r2, [pc, #424]	@ (8005fc8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6a0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d004      	beq.n	8005e2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a69      	ldr	r2, [pc, #420]	@ (8005fcc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6a4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d105      	bne.n	8005e38 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x510>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	e004      	b.n	8005e42 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x51a>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0304 	and.w	r3, r3, #4
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	bf14      	ite	ne
 8005e46:	2301      	movne	r3, #1
 8005e48:	2300      	moveq	r3, #0
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d03d      	beq.n	8005ecc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x5a4>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e54:	f003 031f 	and.w	r3, r3, #31
 8005e58:	2210      	movs	r2, #16
 8005e5a:	409a      	lsls	r2, r3
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	bf14      	ite	ne
 8005e6e:	2301      	movne	r3, #1
 8005e70:	2300      	moveq	r3, #0
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00b      	beq.n	8005e90 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x568>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	bf0c      	ite	eq
 8005e86:	2301      	moveq	r3, #1
 8005e88:	2300      	movne	r3, #0
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	e01b      	b.n	8005ec8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x5a0>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	bf0c      	ite	eq
 8005e9e:	2301      	moveq	r3, #1
 8005ea0:	2300      	movne	r3, #0
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d007      	beq.n	8005eb8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x590>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0208 	bic.w	r2, r2, #8
 8005eb6:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d003      	beq.n	8005ec8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x5a0>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec4:	6838      	ldr	r0, [r7, #0]
 8005ec6:	4798      	blx	r3
          }
        }
        interrupt = 1;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	61fb      	str	r3, [r7, #28]
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed0:	f003 031f 	and.w	r3, r3, #31
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 810f 	beq.w	8006100 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x7d8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a2a      	ldr	r2, [pc, #168]	@ (8005f90 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x668>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d04a      	beq.n	8005f82 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a28      	ldr	r2, [pc, #160]	@ (8005f94 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x66c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d045      	beq.n	8005f82 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a27      	ldr	r2, [pc, #156]	@ (8005f98 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x670>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d040      	beq.n	8005f82 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a25      	ldr	r2, [pc, #148]	@ (8005f9c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x674>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d03b      	beq.n	8005f82 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a24      	ldr	r2, [pc, #144]	@ (8005fa0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x678>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d036      	beq.n	8005f82 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a22      	ldr	r2, [pc, #136]	@ (8005fa4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x67c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d031      	beq.n	8005f82 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a21      	ldr	r2, [pc, #132]	@ (8005fa8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x680>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d02c      	beq.n	8005f82 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a1f      	ldr	r2, [pc, #124]	@ (8005fac <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x684>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d027      	beq.n	8005f82 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a1e      	ldr	r2, [pc, #120]	@ (8005fb0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x688>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d022      	beq.n	8005f82 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a1c      	ldr	r2, [pc, #112]	@ (8005fb4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x68c>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d01d      	beq.n	8005f82 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8005fb8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x690>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d018      	beq.n	8005f82 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a19      	ldr	r2, [pc, #100]	@ (8005fbc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x694>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d013      	beq.n	8005f82 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a18      	ldr	r2, [pc, #96]	@ (8005fc0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x698>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d00e      	beq.n	8005f82 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a16      	ldr	r2, [pc, #88]	@ (8005fc4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x69c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d009      	beq.n	8005f82 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a15      	ldr	r2, [pc, #84]	@ (8005fc8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6a0>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d004      	beq.n	8005f82 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a13      	ldr	r2, [pc, #76]	@ (8005fcc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6a4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d126      	bne.n	8005fd0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6a8>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0310 	and.w	r3, r3, #16
 8005f8c:	e025      	b.n	8005fda <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6b2>
 8005f8e:	bf00      	nop
 8005f90:	40020010 	.word	0x40020010
 8005f94:	40020028 	.word	0x40020028
 8005f98:	40020040 	.word	0x40020040
 8005f9c:	40020058 	.word	0x40020058
 8005fa0:	40020070 	.word	0x40020070
 8005fa4:	40020088 	.word	0x40020088
 8005fa8:	400200a0 	.word	0x400200a0
 8005fac:	400200b8 	.word	0x400200b8
 8005fb0:	40020410 	.word	0x40020410
 8005fb4:	40020428 	.word	0x40020428
 8005fb8:	40020440 	.word	0x40020440
 8005fbc:	40020458 	.word	0x40020458
 8005fc0:	40020470 	.word	0x40020470
 8005fc4:	40020488 	.word	0x40020488
 8005fc8:	400204a0 	.word	0x400204a0
 8005fcc:	400204b8 	.word	0x400204b8
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	bf14      	ite	ne
 8005fde:	2301      	movne	r3, #1
 8005fe0:	2300      	moveq	r3, #0
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 808b 	beq.w	8006100 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x7d8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fee:	f003 031f 	and.w	r3, r3, #31
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	409a      	lsls	r2, r3
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b04      	cmp	r3, #4
 8006004:	bf0c      	ite	eq
 8006006:	2301      	moveq	r3, #1
 8006008:	2300      	movne	r3, #0
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	d039      	beq.n	8006084 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x75c>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0216 	bic.w	r2, r2, #22
 800601e:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	695a      	ldr	r2, [r3, #20]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800602e:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006034:	2b00      	cmp	r3, #0
 8006036:	d103      	bne.n	8006040 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x718>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800603c:	2b00      	cmp	r3, #0
 800603e:	d007      	beq.n	8006050 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x728>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0208 	bic.w	r2, r2, #8
 800604e:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006054:	f003 031f 	and.w	r3, r3, #31
 8006058:	223f      	movs	r2, #63	@ 0x3f
 800605a:	409a      	lsls	r2, r3
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x758>
          {
            hdma->XferAbortCallback(hdma);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800607c:	6838      	ldr	r0, [r7, #0]
 800607e:	4798      	blx	r3
          }
          interrupt = 0;
 8006080:	2300      	movs	r3, #0
 8006082:	61fb      	str	r3, [r7, #28]
        }


        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800608e:	2b00      	cmp	r3, #0
 8006090:	bf14      	ite	ne
 8006092:	2301      	movne	r3, #1
 8006094:	2300      	moveq	r3, #0
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00b      	beq.n	80060b4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x78c>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	bf0c      	ite	eq
 80060aa:	2301      	moveq	r3, #1
 80060ac:	2300      	movne	r3, #0
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	e023      	b.n	80060fc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x7d4>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060be:	2b00      	cmp	r3, #0
 80060c0:	bf0c      	ite	eq
 80060c2:	2301      	moveq	r3, #1
 80060c4:	2300      	movne	r3, #0
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00f      	beq.n	80060ec <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x7c4>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0210 	bic.w	r2, r2, #16
 80060da:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x7d4>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f8:	6838      	ldr	r0, [r7, #0]
 80060fa:	4798      	blx	r3
          }
        }
        interrupt =  2;
 80060fc:	2302      	movs	r3, #2
 80060fe:	61fb      	str	r3, [r7, #28]
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006104:	2b00      	cmp	r3, #0
 8006106:	bf14      	ite	ne
 8006108:	2301      	movne	r3, #1
 800610a:	2300      	moveq	r3, #0
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 80ab 	beq.w	800626a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x942>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	bf14      	ite	ne
 8006120:	2301      	movne	r3, #1
 8006122:	2300      	moveq	r3, #0
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 8097 	beq.w	800625a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x932>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	2204      	movs	r2, #4
 8006130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a4e      	ldr	r2, [pc, #312]	@ (8006274 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x94c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d04a      	beq.n	80061d4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a4d      	ldr	r2, [pc, #308]	@ (8006278 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x950>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d045      	beq.n	80061d4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a4b      	ldr	r2, [pc, #300]	@ (800627c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x954>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d040      	beq.n	80061d4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a4a      	ldr	r2, [pc, #296]	@ (8006280 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x958>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d03b      	beq.n	80061d4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a48      	ldr	r2, [pc, #288]	@ (8006284 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x95c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d036      	beq.n	80061d4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a47      	ldr	r2, [pc, #284]	@ (8006288 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x960>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d031      	beq.n	80061d4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a45      	ldr	r2, [pc, #276]	@ (800628c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x964>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d02c      	beq.n	80061d4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a44      	ldr	r2, [pc, #272]	@ (8006290 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x968>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d027      	beq.n	80061d4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a42      	ldr	r2, [pc, #264]	@ (8006294 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x96c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d022      	beq.n	80061d4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a41      	ldr	r2, [pc, #260]	@ (8006298 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x970>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d01d      	beq.n	80061d4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a3f      	ldr	r2, [pc, #252]	@ (800629c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x974>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d018      	beq.n	80061d4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a3e      	ldr	r2, [pc, #248]	@ (80062a0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x978>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d013      	beq.n	80061d4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a3c      	ldr	r2, [pc, #240]	@ (80062a4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x97c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d00e      	beq.n	80061d4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a3b      	ldr	r2, [pc, #236]	@ (80062a8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x980>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d009      	beq.n	80061d4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a39      	ldr	r2, [pc, #228]	@ (80062ac <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x984>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d004      	beq.n	80061d4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a38      	ldr	r2, [pc, #224]	@ (80062b0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x988>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d108      	bne.n	80061e6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8be>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 0201 	bic.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	e007      	b.n	80061f6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ce>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0201 	bic.w	r2, r2, #1
 80061f4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3301      	adds	r3, #1
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	429a      	cmp	r2, r3
 8006200:	bf34      	ite	cc
 8006202:	2301      	movcc	r3, #1
 8006204:	2300      	movcs	r3, #0
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10c      	bne.n	8006226 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8fe>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	bf14      	ite	ne
 800621a:	2301      	movne	r3, #1
 800621c:	2300      	moveq	r3, #0
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e8      	bne.n	80061f6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ce>
 8006224:	e000      	b.n	8006228 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x900>
            break;
 8006226:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	bf14      	ite	ne
 8006236:	2301      	movne	r3, #1
 8006238:	2300      	moveq	r3, #0
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d004      	beq.n	800624a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x922>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2203      	movs	r2, #3
 8006244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006248:	e003      	b.n	8006252 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x92a>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x942>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006266:	6838      	ldr	r0, [r7, #0]
 8006268:	4798      	blx	r3
      }
    }
  }
  return interrupt;
 800626a:	69fb      	ldr	r3, [r7, #28]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3720      	adds	r7, #32
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	40020010 	.word	0x40020010
 8006278:	40020028 	.word	0x40020028
 800627c:	40020040 	.word	0x40020040
 8006280:	40020058 	.word	0x40020058
 8006284:	40020070 	.word	0x40020070
 8006288:	40020088 	.word	0x40020088
 800628c:	400200a0 	.word	0x400200a0
 8006290:	400200b8 	.word	0x400200b8
 8006294:	40020410 	.word	0x40020410
 8006298:	40020428 	.word	0x40020428
 800629c:	40020440 	.word	0x40020440
 80062a0:	40020458 	.word	0x40020458
 80062a4:	40020470 	.word	0x40020470
 80062a8:	40020488 	.word	0x40020488
 80062ac:	400204a0 	.word	0x400204a0
 80062b0:	400204b8 	.word	0x400204b8

080062b4 <_ZN11RemoraComms18getActiveDMAbufferEP19__DMA_HandleTypeDef>:


int RemoraComms::getActiveDMAbuffer(DMA_HandleTypeDef *hdma)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
	if (((((DMA_Stream_TypeDef *)hdma->Instance)->CR) & DMA_SxCR_CT) != 0)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	bf14      	ite	ne
 80062cc:	2301      	movne	r3, #1
 80062ce:	2300      	moveq	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <_ZN11RemoraComms18getActiveDMAbufferEP19__DMA_HandleTypeDef+0x26>
	{
		return 1;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e000      	b.n	80062dc <_ZN11RemoraComms18getActiveDMAbufferEP19__DMA_HandleTypeDef+0x28>
	}
	else
	{
		return 0;
 80062da:	2300      	movs	r3, #0
	}
}
 80062dc:	4618      	mov	r0, r3
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <_ZN11RemoraComms16changeDMAAddressEP19__DMA_HandleTypeDefmi>:


HAL_StatusTypeDef RemoraComms::changeDMAAddress(DMA_HandleTypeDef *hdma, uint32_t Address, int memory)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	603b      	str	r3, [r7, #0]
    if (memory == MEMORY0)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d104      	bne.n	8006306 <_ZN11RemoraComms16changeDMAAddressEP19__DMA_HandleTypeDefmi+0x1e>
    {
        ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = Address;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	60da      	str	r2, [r3, #12]
 8006304:	e009      	b.n	800631a <_ZN11RemoraComms16changeDMAAddressEP19__DMA_HandleTypeDefmi+0x32>
    }
    else if (memory == MEMORY1)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d104      	bne.n	8006316 <_ZN11RemoraComms16changeDMAAddressEP19__DMA_HandleTypeDefmi+0x2e>
    {
        ((DMA_Stream_TypeDef *)hdma->Instance)->M1AR = Address;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	611a      	str	r2, [r3, #16]
 8006314:	e001      	b.n	800631a <_ZN11RemoraComms16changeDMAAddressEP19__DMA_HandleTypeDefmi+0x32>
    }
    else
    {
    	return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e000      	b.n	800631c <_ZN11RemoraComms16changeDMAAddressEP19__DMA_HandleTypeDefmi+0x34>
    }
    return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3714      	adds	r7, #20
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <_ZN11RemoraComms18handleNssInterruptEv>:


void RemoraComms::handleNssInterrupt()
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
	this->pin2->set(1);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	2101      	movs	r1, #1
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe fe18 	bl	8004f6c <_ZN3Pin3setEb>

	if (this->swapRx == true)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 31bd 	ldrb.w	r3, [r3, #445]	@ 0x1bd
 8006342:	2b01      	cmp	r3, #1
 8006344:	d10a      	bne.n	800635c <_ZN11RemoraComms18handleNssInterruptEv+0x34>
  __ASM volatile ("cpsid i" : : : "memory");
 8006346:	b672      	cpsid	i
}
 8006348:	bf00      	nop
	{
		__disable_irq();
		swapTxBuffers(&txPingPongBuffer);
 800634a:	4809      	ldr	r0, [pc, #36]	@ (8006370 <_ZN11RemoraComms18handleNssInterruptEv+0x48>)
 800634c:	f7fc f926 	bl	800259c <_Z13swapTxBuffersP16TxPingPongBuffer>
  __ASM volatile ("cpsie i" : : : "memory");
 8006350:	b662      	cpsie	i
}
 8006352:	bf00      	nop
		__enable_irq();
		this->swapRx = false;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 21bd 	strb.w	r2, [r3, #445]	@ 0x1bd
	}

    this->pin2->set(0);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	2100      	movs	r1, #0
 8006362:	4618      	mov	r0, r3
 8006364:	f7fe fe02 	bl	8004f6c <_ZN3Pin3setEb>
}
 8006368:	bf00      	nop
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	300000a0 	.word	0x300000a0

08006374 <_ZN11RemoraComms17handleTxInterruptEv>:


void RemoraComms::handleTxInterrupt()
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
	DMA_IRQHandler(&this->hdma_spi_tx);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	33c4      	adds	r3, #196	@ 0xc4
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7ff fad0 	bl	8005928 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
	HAL_NVIC_EnableIRQ(this->irqDMAtx);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 800638e:	4618      	mov	r0, r3
 8006390:	f000 fda5 	bl	8006ede <HAL_NVIC_EnableIRQ>
}
 8006394:	bf00      	nop
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <_ZN11RemoraComms17handleRxInterruptEv>:


void RemoraComms::handleRxInterrupt()
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
	this->pin1->set(1);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	2101      	movs	r1, #1
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fe fdde 	bl	8004f6c <_ZN3Pin3setEb>

	this->interruptType = DMA_IRQHandler(&this->hdma_spi_rx);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80063b6:	4619      	mov	r1, r3
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7ff fab5 	bl	8005928 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
 80063be:	4603      	mov	r3, r0
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f883 21b5 	strb.w	r2, [r3, #437]	@ 0x1b5

    switch (interruptType)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 31b5 	ldrb.w	r3, [r3, #437]	@ 0x1b5
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d002      	beq.n	80063d8 <_ZN11RemoraComms17handleRxInterruptEv+0x3c>
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d03a      	beq.n	800644c <_ZN11RemoraComms17handleRxInterruptEv+0xb0>
            }
            break;

        default:
            // No relevant interrupt
            break;
 80063d6:	e076      	b.n	80064c6 <_ZN11RemoraComms17handleRxInterruptEv+0x12a>
            if (this->rxBuffer->header == PRU_WRITE)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a42      	ldr	r2, [pc, #264]	@ (80064e8 <_ZN11RemoraComms17handleRxInterruptEv+0x14c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d16d      	bne.n	80064c0 <_ZN11RemoraComms17handleRxInterruptEv+0x124>
            	this->pin2->set(1);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	2101      	movs	r1, #1
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fe fdbe 	bl	8004f6c <_ZN3Pin3setEb>
            	this->memory = 1 - getActiveDMAbuffer(&this->hdma_spi_rx);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7ff ff5b 	bl	80062b4 <_ZN11RemoraComms18getActiveDMAbufferEP19__DMA_HandleTypeDef>
 80063fe:	4603      	mov	r3, r0
 8006400:	b2db      	uxtb	r3, r3
 8006402:	f1c3 0301 	rsb	r3, r3, #1
 8006406:	b2da      	uxtb	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f883 21bc 	strb.w	r2, [r3, #444]	@ 0x1bc
            	this->address = (uint32_t)getAltRxBuffer(&rxPingPongBuffer);
 800640e:	4837      	ldr	r0, [pc, #220]	@ (80064ec <_ZN11RemoraComms17handleRxInterruptEv+0x150>)
 8006410:	f7fc f8f6 	bl	8002600 <_Z14getAltRxBufferP16RxPingPongBuffer>
 8006414:	4603      	mov	r3, r0
 8006416:	461a      	mov	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
				changeDMAAddress(&this->hdma_spi_rx, this->address, this->memory); // point the DMA transactions at the alternate buffer
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 21b8 	ldr.w	r2, [r3, #440]	@ 0x1b8
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 31bc 	ldrb.w	r3, [r3, #444]	@ 0x1bc
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff ff59 	bl	80062e8 <_ZN11RemoraComms16changeDMAAddressEP19__DMA_HandleTypeDefmi>
				this->swapRx = true; // flag the swap of Rx buffers in NNS interrupt handler
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 21bd 	strb.w	r2, [r3, #445]	@ 0x1bd
			    this->pin2->set(0);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	2100      	movs	r1, #0
 8006444:	4618      	mov	r0, r3
 8006446:	f7fe fd91 	bl	8004f6c <_ZN3Pin3setEb>
            break;
 800644a:	e039      	b.n	80064c0 <_ZN11RemoraComms17handleRxInterruptEv+0x124>
            if (this->rxBuffer->header == PRU_READ || this->rxBuffer->header == PRU_WRITE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a27      	ldr	r2, [pc, #156]	@ (80064f0 <_ZN11RemoraComms17handleRxInterruptEv+0x154>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d005      	beq.n	8006464 <_ZN11RemoraComms17handleRxInterruptEv+0xc8>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a22      	ldr	r2, [pc, #136]	@ (80064e8 <_ZN11RemoraComms17handleRxInterruptEv+0x14c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d11b      	bne.n	800649c <_ZN11RemoraComms17handleRxInterruptEv+0x100>
            	if (this->swapRx == true)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 31bd 	ldrb.w	r3, [r3, #445]	@ 0x1bd
 800646a:	2b01      	cmp	r3, #1
 800646c:	d10d      	bne.n	800648a <_ZN11RemoraComms17handleRxInterruptEv+0xee>
            		changeDMAAddress(&this->hdma_spi_rx, this->address, 1 - this->memory);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 21b8 	ldr.w	r2, [r3, #440]	@ 0x1b8
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 31bc 	ldrb.w	r3, [r3, #444]	@ 0x1bc
 8006480:	f1c3 0301 	rsb	r3, r3, #1
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff ff2f 	bl	80062e8 <_ZN11RemoraComms16changeDMAAddressEP19__DMA_HandleTypeDefmi>
                this->SPIdata = true;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
                this->rejectCnt = 0;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
            break;
 800649a:	e013      	b.n	80064c4 <_ZN11RemoraComms17handleRxInterruptEv+0x128>
                this->rejectCnt++;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80064a2:	3301      	adds	r3, #1
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
                if (this->rejectCnt > 5)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80064b2:	2b05      	cmp	r3, #5
 80064b4:	d906      	bls.n	80064c4 <_ZN11RemoraComms17handleRxInterruptEv+0x128>
                    this->SPIdataError = true;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
            break;
 80064be:	e001      	b.n	80064c4 <_ZN11RemoraComms17handleRxInterruptEv+0x128>
            break;
 80064c0:	bf00      	nop
 80064c2:	e000      	b.n	80064c6 <_ZN11RemoraComms17handleRxInterruptEv+0x12a>
            break;
 80064c4:	bf00      	nop
    }

	HAL_NVIC_EnableIRQ(this->irqDMArx);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fd06 	bl	8006ede <HAL_NVIC_EnableIRQ>

    this->pin1->set(0);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	2100      	movs	r1, #0
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fe fd47 	bl	8004f6c <_ZN3Pin3setEb>
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	77726974 	.word	0x77726974
 80064ec:	30000000 	.word	0x30000000
 80064f0:	72656164 	.word	0x72656164

080064f4 <_ZN11RemoraComms9getStatusEv>:


bool RemoraComms::getStatus(void)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
    return this->SPIdata;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
}
 8006502:	4618      	mov	r0, r3
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <_ZN11RemoraComms9setStatusEb>:

void RemoraComms::setStatus(bool status)
{
 800650e:	b480      	push	{r7}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	460b      	mov	r3, r1
 8006518:	70fb      	strb	r3, [r7, #3]
    this->SPIdata = status;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	78fa      	ldrb	r2, [r7, #3]
 800651e:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
}
 8006522:	bf00      	nop
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <_ZN11RemoraComms8getErrorEv>:

bool RemoraComms::getError(void)
{
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
    return this->SPIdataError;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
}
 800653c:	4618      	mov	r0, r3
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <_ZN11RemoraComms8setErrorEb>:

void RemoraComms::setError(bool error)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	70fb      	strb	r3, [r7, #3]
    this->SPIdataError = error;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	78fa      	ldrb	r2, [r7, #3]
 8006558:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <_ZN11RemoraComms6updateEv>:

void RemoraComms::update()
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
	// unused for RemoraComms
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <_ZN11RemoraCommsD1Ev>:
  __IO uint32_t ISR;   /*!< DMA interrupt status register */
  __IO uint32_t Reserved0;
  __IO uint32_t IFCR;  /*!< DMA interrupt flag clear register */
} DMA_Base_Registers;

class RemoraComms : public Module
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	4a05      	ldr	r2, [pc, #20]	@ (800659c <_ZN11RemoraCommsD1Ev+0x20>)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	601a      	str	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4618      	mov	r0, r3
 800658e:	f7fe fd25 	bl	8004fdc <_ZN6ModuleD1Ev>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4618      	mov	r0, r3
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	080147bc 	.word	0x080147bc

080065a0 <_ZN11RemoraCommsD0Ev>:
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff ffe7 	bl	800657c <_ZN11RemoraCommsD1Ev>
 80065ae:	2220      	movs	r2, #32
 80065b0:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f00c faa0 	bl	8012afa <_ZdlPvjSt11align_val_t>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4618      	mov	r0, r3
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 f8bc 	bl	800674c <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE12_Vector_implC1Ev>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4618      	mov	r0, r3
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80065de:	b580      	push	{r7, lr}
 80065e0:	b082      	sub	sp, #8
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7ff ffeb 	bl	80065c4 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EEC1Ev>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4618      	mov	r0, r3
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>:


using namespace std;

// Thread constructor
pruThread::pruThread(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency) :
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	603b      	str	r3, [r7, #0]
 8006604:	4613      	mov	r3, r2
 8006606:	80fb      	strh	r3, [r7, #6]
	timer(timer),
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	605a      	str	r2, [r3, #4]
	irq(irq),
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	88fa      	ldrh	r2, [r7, #6]
 8006612:	811a      	strh	r2, [r3, #8]
	frequency(frequency)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	60da      	str	r2, [r3, #12]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3314      	adds	r3, #20
 800661e:	4618      	mov	r0, r3
 8006620:	f7ff ffdd 	bl	80065de <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3320      	adds	r3, #32
 8006628:	4618      	mov	r0, r3
 800662a:	f7ff ffd8 	bl	80065de <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	332c      	adds	r3, #44	@ 0x2c
 8006632:	4618      	mov	r0, r3
 8006634:	f000 f89a 	bl	800676c <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1Ev>
{
	printf("	Creating thread %lu\n", this->frequency);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	4619      	mov	r1, r3
 800663e:	4804      	ldr	r0, [pc, #16]	@ (8006650 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem+0x58>)
 8006640:	f00c fe20 	bl	8013284 <iprintf>
}
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	08014694 	.word	0x08014694

08006654 <_ZN9pruThread11startThreadEv>:

void pruThread::startThread(void)
{
 8006654:	b590      	push	{r4, r7, lr}
 8006656:	b085      	sub	sp, #20
 8006658:	af02      	add	r7, sp, #8
 800665a:	6078      	str	r0, [r7, #4]
	TimerPtr = new pruTimer(this->timer, this->irq, this->frequency, this);
 800665c:	2014      	movs	r0, #20
 800665e:	f00c fa5e 	bl	8012b1e <_Znwj>
 8006662:	4603      	mov	r3, r0
 8006664:	461c      	mov	r4, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6859      	ldr	r1, [r3, #4]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68d8      	ldr	r0, [r3, #12]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	4603      	mov	r3, r0
 800667a:	4620      	mov	r0, r4
 800667c:	f000 f93e 	bl	80068fc <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	601c      	str	r4, [r3, #0]
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	bd90      	pop	{r4, r7, pc}

0800668c <_ZN9pruThread3runEv>:
	this->hasThreadPost = true;
}


void pruThread::run(void)
{
 800668c:	b590      	push	{r4, r7, lr}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
	// iterate over the Thread pointer vector to run all instances of Module::runModule()
	for (iter = vThread.begin(); iter != vThread.end(); ++iter) (*iter)->runModule();
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3314      	adds	r3, #20
 8006698:	687c      	ldr	r4, [r7, #4]
 800669a:	4618      	mov	r0, r3
 800669c:	f000 f874 	bl	8006788 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 80066a0:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80066a2:	e00e      	b.n	80066c2 <_ZN9pruThread3runEv+0x36>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	332c      	adds	r3, #44	@ 0x2c
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 f8b6 	bl	800681a <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>
 80066ae:	4603      	mov	r3, r0
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fe fcb2 	bl	800501c <_ZN6Module9runModuleEv>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	332c      	adds	r3, #44	@ 0x2c
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 f89c 	bl	80067fa <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	3314      	adds	r3, #20
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 f86b 	bl	80067a8 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 80066d2:	4603      	mov	r3, r0
 80066d4:	60bb      	str	r3, [r7, #8]
 80066d6:	f107 0308 	add.w	r3, r7, #8
 80066da:	4619      	mov	r1, r3
 80066dc:	4620      	mov	r0, r4
 80066de:	f000 f874 	bl	80067ca <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1dd      	bne.n	80066a4 <_ZN9pruThread3runEv+0x18>

	// iterate over the second vector that contains module pointers to run after (post) the main vector
	if (hasThreadPost)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	7c1b      	ldrb	r3, [r3, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d029      	beq.n	8006744 <_ZN9pruThread3runEv+0xb8>
	{
		for (iter = vThreadPost.begin(); iter != vThreadPost.end(); ++iter) (*iter)->runModulePost();
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3320      	adds	r3, #32
 80066f4:	687c      	ldr	r4, [r7, #4]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 f846 	bl	8006788 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 80066fc:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80066fe:	e00e      	b.n	800671e <_ZN9pruThread3runEv+0x92>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	332c      	adds	r3, #44	@ 0x2c
 8006704:	4618      	mov	r0, r3
 8006706:	f000 f888 	bl	800681a <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>
 800670a:	4603      	mov	r3, r0
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4618      	mov	r0, r3
 8006710:	f7fe fca6 	bl	8005060 <_ZN6Module13runModulePostEv>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	332c      	adds	r3, #44	@ 0x2c
 8006718:	4618      	mov	r0, r3
 800671a:	f000 f86e 	bl	80067fa <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3320      	adds	r3, #32
 8006728:	4618      	mov	r0, r3
 800672a:	f000 f83d 	bl	80067a8 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 800672e:	4603      	mov	r3, r0
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	f107 030c 	add.w	r3, r7, #12
 8006736:	4619      	mov	r1, r3
 8006738:	4620      	mov	r0, r4
 800673a:	f000 f846 	bl	80067ca <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1dd      	bne.n	8006700 <_ZN9pruThread3runEv+0x74>
	}
}
 8006744:	bf00      	nop
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	bd90      	pop	{r4, r7, pc}

0800674c <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f86c 	bl	8006832 <_ZNSaIP6ModuleEC1Ev>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4618      	mov	r0, r3
 800675e:	f000 f874 	bl	800684a <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1Ev>:

#if __cplusplus > 201703L && __cpp_lib_concepts
      using iterator_concept = std::__detail::__iter_concept<_Iterator>;
#endif

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
      : _M_current(_Iterator()) { }
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	f107 030c 	add.w	r3, r7, #12
 8006796:	4611      	mov	r1, r2
 8006798:	4618      	mov	r0, r3
 800679a:	f000 f86a 	bl	8006872 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	1d1a      	adds	r2, r3, #4
 80067b4:	f107 030c 	add.w	r3, r7, #12
 80067b8:	4611      	mov	r1, r2
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 f859 	bl	8006872 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80067ca:	b590      	push	{r4, r7, lr}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f85c 	bl	8006892 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 80067da:	4603      	mov	r3, r0
 80067dc:	681c      	ldr	r4, [r3, #0]
 80067de:	6838      	ldr	r0, [r7, #0]
 80067e0:	f000 f857 	bl	8006892 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 80067e4:	4603      	mov	r3, r0
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	429c      	cmp	r4, r3
 80067ea:	bf14      	ite	ne
 80067ec:	2301      	movne	r3, #1
 80067ee:	2300      	moveq	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	4618      	mov	r0, r3
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd90      	pop	{r4, r7, pc}

080067fa <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
	++_M_current;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	1d1a      	adds	r2, r3, #4
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	601a      	str	r2, [r3, #0]
	return *this;
 800680c:	687b      	ldr	r3, [r7, #4]
      }
 800680e:	4618      	mov	r0, r3
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <_ZNSaIP6ModuleEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8006832:	b580      	push	{r7, lr}
 8006834:	b082      	sub	sp, #8
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f834 	bl	80068a8 <_ZNSt15__new_allocatorIP6ModuleEC1Ev>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4618      	mov	r0, r3
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	605a      	str	r2, [r3, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	609a      	str	r2, [r3, #8]
	{ }
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4618      	mov	r0, r3
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4618      	mov	r0, r3
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4618      	mov	r0, r3
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <_ZNSt15__new_allocatorIP6ModuleEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4618      	mov	r0, r3
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
	...

080068c0 <__NVIC_EnableIRQ>:
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	4603      	mov	r3, r0
 80068c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80068ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	db0b      	blt.n	80068ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068d2:	88fb      	ldrh	r3, [r7, #6]
 80068d4:	f003 021f 	and.w	r2, r3, #31
 80068d8:	4907      	ldr	r1, [pc, #28]	@ (80068f8 <__NVIC_EnableIRQ+0x38>)
 80068da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068de:	095b      	lsrs	r3, r3, #5
 80068e0:	2001      	movs	r0, #1
 80068e2:	fa00 f202 	lsl.w	r2, r0, r2
 80068e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	e000e100 	.word	0xe000e100

080068fc <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency, pruThread* ownerPtr):
 80068fc:	b590      	push	{r4, r7, lr}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	603b      	str	r3, [r7, #0]
 8006908:	4613      	mov	r3, r2
 800690a:	80fb      	strh	r3, [r7, #6]
	timer(timer),
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	605a      	str	r2, [r3, #4]
	irq(irq),
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	88fa      	ldrh	r2, [r7, #6]
 8006916:	811a      	strh	r2, [r3, #8]
	frequency(frequency),
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	60da      	str	r2, [r3, #12]
	timerOwnerPtr(ownerPtr)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6a3a      	ldr	r2, [r7, #32]
 8006922:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(this->irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 8006924:	2008      	movs	r0, #8
 8006926:	f00c f8fa 	bl	8012b1e <_Znwj>
 800692a:	4603      	mov	r3, r0
 800692c:	461c      	mov	r4, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4619      	mov	r1, r3
 8006938:	4620      	mov	r0, r4
 800693a:	f000 f8af 	bl	8006a9c <_ZN14TimerInterruptC1EiP8pruTimer>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	601c      	str	r4, [r3, #0]

	this->startTimer();
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 f812 	bl	800696c <_ZN8pruTimer10startTimerEv>
}
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4618      	mov	r0, r3
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	bd90      	pop	{r4, r7, pc}

08006952 <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b082      	sub	sp, #8
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
	//Do something here
	this->timerOwnerPtr->run();
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff fe94 	bl	800668c <_ZN9pruThread3runEv>
}
 8006964:	bf00      	nop
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (this->timer == TIM2)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800697c:	d116      	bne.n	80069ac <_ZN8pruTimer10startTimerEv+0x40>
    {
        printf("	power on Timer 2\n\r");
 800697e:	483f      	ldr	r0, [pc, #252]	@ (8006a7c <_ZN8pruTimer10startTimerEv+0x110>)
 8006980:	f00c fc80 	bl	8013284 <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 8006984:	4b3e      	ldr	r3, [pc, #248]	@ (8006a80 <_ZN8pruTimer10startTimerEv+0x114>)
 8006986:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800698a:	4a3d      	ldr	r2, [pc, #244]	@ (8006a80 <_ZN8pruTimer10startTimerEv+0x114>)
 800698c:	f043 0301 	orr.w	r3, r3, #1
 8006990:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006994:	4b3a      	ldr	r3, [pc, #232]	@ (8006a80 <_ZN8pruTimer10startTimerEv+0x114>)
 8006996:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	613b      	str	r3, [r7, #16]
 80069a0:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB1CLK;
 80069a2:	4b38      	ldr	r3, [pc, #224]	@ (8006a84 <_ZN8pruTimer10startTimerEv+0x118>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	085b      	lsrs	r3, r3, #1
 80069a8:	617b      	str	r3, [r7, #20]
 80069aa:	e036      	b.n	8006a1a <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (this->timer == TIM3)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	4a35      	ldr	r2, [pc, #212]	@ (8006a88 <_ZN8pruTimer10startTimerEv+0x11c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d116      	bne.n	80069e4 <_ZN8pruTimer10startTimerEv+0x78>
    {
        printf("	power on Timer 3\n\r");
 80069b6:	4835      	ldr	r0, [pc, #212]	@ (8006a8c <_ZN8pruTimer10startTimerEv+0x120>)
 80069b8:	f00c fc64 	bl	8013284 <iprintf>
        __HAL_RCC_TIM3_CLK_ENABLE();
 80069bc:	4b30      	ldr	r3, [pc, #192]	@ (8006a80 <_ZN8pruTimer10startTimerEv+0x114>)
 80069be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069c2:	4a2f      	ldr	r2, [pc, #188]	@ (8006a80 <_ZN8pruTimer10startTimerEv+0x114>)
 80069c4:	f043 0302 	orr.w	r3, r3, #2
 80069c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80069cc:	4b2c      	ldr	r3, [pc, #176]	@ (8006a80 <_ZN8pruTimer10startTimerEv+0x114>)
 80069ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 80069da:	4b2a      	ldr	r3, [pc, #168]	@ (8006a84 <_ZN8pruTimer10startTimerEv+0x118>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	085b      	lsrs	r3, r3, #1
 80069e0:	617b      	str	r3, [r7, #20]
 80069e2:	e01a      	b.n	8006a1a <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (this->timer == TIM4)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	4a29      	ldr	r2, [pc, #164]	@ (8006a90 <_ZN8pruTimer10startTimerEv+0x124>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d115      	bne.n	8006a1a <_ZN8pruTimer10startTimerEv+0xae>
    {
        printf("	power on Timer 4\n\r");
 80069ee:	4829      	ldr	r0, [pc, #164]	@ (8006a94 <_ZN8pruTimer10startTimerEv+0x128>)
 80069f0:	f00c fc48 	bl	8013284 <iprintf>
        __HAL_RCC_TIM4_CLK_ENABLE();
 80069f4:	4b22      	ldr	r3, [pc, #136]	@ (8006a80 <_ZN8pruTimer10startTimerEv+0x114>)
 80069f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069fa:	4a21      	ldr	r2, [pc, #132]	@ (8006a80 <_ZN8pruTimer10startTimerEv+0x114>)
 80069fc:	f043 0304 	orr.w	r3, r3, #4
 8006a00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006a04:	4b1e      	ldr	r3, [pc, #120]	@ (8006a80 <_ZN8pruTimer10startTimerEv+0x114>)
 8006a06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a0a:	f003 0304 	and.w	r3, r3, #4
 8006a0e:	60bb      	str	r3, [r7, #8]
 8006a10:	68bb      	ldr	r3, [r7, #8]
        TIM_CLK = APB1CLK;
 8006a12:	4b1c      	ldr	r3, [pc, #112]	@ (8006a84 <_ZN8pruTimer10startTimerEv+0x118>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	085b      	lsrs	r3, r3, #1
 8006a18:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    this->timer->CR2 &= 0;                                            // UG used as trigg output
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	605a      	str	r2, [r3, #4]
    this->timer->PSC = TIM_PSC-1;                                     // prescaler
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	629a      	str	r2, [r3, #40]	@ 0x28
    this->timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period           
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	3a01      	subs	r2, #1
 8006a40:	62da      	str	r2, [r3, #44]	@ 0x2c
    this->timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	615a      	str	r2, [r3, #20]
    this->timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	60da      	str	r2, [r3, #12]

    this->timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f042 0201 	orr.w	r2, r2, #1
 8006a60:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(this->irq);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7ff ff29 	bl	80068c0 <__NVIC_EnableIRQ>

    printf("	timer started\n");
 8006a6e:	480a      	ldr	r0, [pc, #40]	@ (8006a98 <_ZN8pruTimer10startTimerEv+0x12c>)
 8006a70:	f00c fc78 	bl	8013364 <puts>
}
 8006a74:	bf00      	nop
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	080146c8 	.word	0x080146c8
 8006a80:	58024400 	.word	0x58024400
 8006a84:	24000050 	.word	0x24000050
 8006a88:	40000400 	.word	0x40000400
 8006a8c:	080146dc 	.word	0x080146dc
 8006a90:	40000800 	.word	0x40000800
 8006a94:	080146f0 	.word	0x080146f0
 8006a98:	08014704 	.word	0x08014704

08006a9c <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fa f902 	bl	8000cb4 <_ZN9InterruptC1Ev>
 8006ab0:	4a07      	ldr	r2, [pc, #28]	@ (8006ad0 <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	68b8      	ldr	r0, [r7, #8]
 8006ac2:	f7fa f907 	bl	8000cd4 <_ZN9Interrupt8RegisterEiPS_>
}
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	080147e0 	.word	0x080147e0

08006ad4 <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7ff ff36 	bl	8006952 <_ZN8pruTimer9timerTickEv>
}
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006af0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006b28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006af4:	f7fe f9b2 	bl	8004e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006af8:	480c      	ldr	r0, [pc, #48]	@ (8006b2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006afa:	490d      	ldr	r1, [pc, #52]	@ (8006b30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006afc:	4a0d      	ldr	r2, [pc, #52]	@ (8006b34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b00:	e002      	b.n	8006b08 <LoopCopyDataInit>

08006b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b06:	3304      	adds	r3, #4

08006b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b0c:	d3f9      	bcc.n	8006b02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8006b38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006b10:	4c0a      	ldr	r4, [pc, #40]	@ (8006b3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8006b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b14:	e001      	b.n	8006b1a <LoopFillZerobss>

08006b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b18:	3204      	adds	r2, #4

08006b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b1c:	d3fb      	bcc.n	8006b16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006b1e:	f00c fdc3 	bl	80136a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b22:	f7fb fa9b 	bl	800205c <main>
  bx  lr
 8006b26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006b28:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8006b2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006b30:	240000bc 	.word	0x240000bc
  ldr r2, =_sidata
 8006b34:	08014928 	.word	0x08014928
  ldr r2, =_sbss
 8006b38:	240000c0 	.word	0x240000c0
  ldr r4, =_ebss
 8006b3c:	24000d0c 	.word	0x24000d0c

08006b40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b40:	e7fe      	b.n	8006b40 <ADC3_IRQHandler>
	...

08006b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b4a:	2003      	movs	r0, #3
 8006b4c:	f000 f9a2 	bl	8006e94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b50:	f002 ff3a 	bl	80099c8 <HAL_RCC_GetSysClockFreq>
 8006b54:	4602      	mov	r2, r0
 8006b56:	4b15      	ldr	r3, [pc, #84]	@ (8006bac <HAL_Init+0x68>)
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	0a1b      	lsrs	r3, r3, #8
 8006b5c:	f003 030f 	and.w	r3, r3, #15
 8006b60:	4913      	ldr	r1, [pc, #76]	@ (8006bb0 <HAL_Init+0x6c>)
 8006b62:	5ccb      	ldrb	r3, [r1, r3]
 8006b64:	f003 031f 	and.w	r3, r3, #31
 8006b68:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8006bac <HAL_Init+0x68>)
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	f003 030f 	and.w	r3, r3, #15
 8006b76:	4a0e      	ldr	r2, [pc, #56]	@ (8006bb0 <HAL_Init+0x6c>)
 8006b78:	5cd3      	ldrb	r3, [r2, r3]
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	fa22 f303 	lsr.w	r3, r2, r3
 8006b84:	4a0b      	ldr	r2, [pc, #44]	@ (8006bb4 <HAL_Init+0x70>)
 8006b86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b88:	4a0b      	ldr	r2, [pc, #44]	@ (8006bb8 <HAL_Init+0x74>)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006b8e:	200f      	movs	r0, #15
 8006b90:	f000 f814 	bl	8006bbc <HAL_InitTick>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e002      	b.n	8006ba4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006b9e:	f7fd ff43 	bl	8004a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	58024400 	.word	0x58024400
 8006bb0:	08014774 	.word	0x08014774
 8006bb4:	24000054 	.word	0x24000054
 8006bb8:	24000050 	.word	0x24000050

08006bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006bc4:	4b15      	ldr	r3, [pc, #84]	@ (8006c1c <HAL_InitTick+0x60>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e021      	b.n	8006c14 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006bd0:	4b13      	ldr	r3, [pc, #76]	@ (8006c20 <HAL_InitTick+0x64>)
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	4b11      	ldr	r3, [pc, #68]	@ (8006c1c <HAL_InitTick+0x60>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	4619      	mov	r1, r3
 8006bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8006be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 f98b 	bl	8006f02 <HAL_SYSTICK_Config>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e00e      	b.n	8006c14 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b0f      	cmp	r3, #15
 8006bfa:	d80a      	bhi.n	8006c12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	f04f 30ff 	mov.w	r0, #4294967295
 8006c04:	f000 f951 	bl	8006eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c08:	4a06      	ldr	r2, [pc, #24]	@ (8006c24 <HAL_InitTick+0x68>)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	e000      	b.n	8006c14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	2400005c 	.word	0x2400005c
 8006c20:	24000050 	.word	0x24000050
 8006c24:	24000058 	.word	0x24000058

08006c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006c2c:	4b06      	ldr	r3, [pc, #24]	@ (8006c48 <HAL_IncTick+0x20>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	461a      	mov	r2, r3
 8006c32:	4b06      	ldr	r3, [pc, #24]	@ (8006c4c <HAL_IncTick+0x24>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4413      	add	r3, r2
 8006c38:	4a04      	ldr	r2, [pc, #16]	@ (8006c4c <HAL_IncTick+0x24>)
 8006c3a:	6013      	str	r3, [r2, #0]
}
 8006c3c:	bf00      	nop
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	2400005c 	.word	0x2400005c
 8006c4c:	24000500 	.word	0x24000500

08006c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c50:	b480      	push	{r7}
 8006c52:	af00      	add	r7, sp, #0
  return uwTick;
 8006c54:	4b03      	ldr	r3, [pc, #12]	@ (8006c64 <HAL_GetTick+0x14>)
 8006c56:	681b      	ldr	r3, [r3, #0]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	24000500 	.word	0x24000500

08006c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c70:	f7ff ffee 	bl	8006c50 <HAL_GetTick>
 8006c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c80:	d005      	beq.n	8006c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c82:	4b0a      	ldr	r3, [pc, #40]	@ (8006cac <HAL_Delay+0x44>)
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006c8e:	bf00      	nop
 8006c90:	f7ff ffde 	bl	8006c50 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d8f7      	bhi.n	8006c90 <HAL_Delay+0x28>
  {
  }
}
 8006ca0:	bf00      	nop
 8006ca2:	bf00      	nop
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	2400005c 	.word	0x2400005c

08006cb0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006cb4:	4b03      	ldr	r3, [pc, #12]	@ (8006cc4 <HAL_GetREVID+0x14>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	0c1b      	lsrs	r3, r3, #16
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	5c001000 	.word	0x5c001000

08006cc8 <__NVIC_SetPriorityGrouping>:
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f003 0307 	and.w	r3, r3, #7
 8006cd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8006d08 <__NVIC_SetPriorityGrouping+0x40>)
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006cf0:	4b06      	ldr	r3, [pc, #24]	@ (8006d0c <__NVIC_SetPriorityGrouping+0x44>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006cf6:	4a04      	ldr	r2, [pc, #16]	@ (8006d08 <__NVIC_SetPriorityGrouping+0x40>)
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	60d3      	str	r3, [r2, #12]
}
 8006cfc:	bf00      	nop
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	e000ed00 	.word	0xe000ed00
 8006d0c:	05fa0000 	.word	0x05fa0000

08006d10 <__NVIC_GetPriorityGrouping>:
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d14:	4b04      	ldr	r3, [pc, #16]	@ (8006d28 <__NVIC_GetPriorityGrouping+0x18>)
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	0a1b      	lsrs	r3, r3, #8
 8006d1a:	f003 0307 	and.w	r3, r3, #7
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	e000ed00 	.word	0xe000ed00

08006d2c <__NVIC_EnableIRQ>:
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	4603      	mov	r3, r0
 8006d34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	db0b      	blt.n	8006d56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	f003 021f 	and.w	r2, r3, #31
 8006d44:	4907      	ldr	r1, [pc, #28]	@ (8006d64 <__NVIC_EnableIRQ+0x38>)
 8006d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d4a:	095b      	lsrs	r3, r3, #5
 8006d4c:	2001      	movs	r0, #1
 8006d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8006d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	e000e100 	.word	0xe000e100

08006d68 <__NVIC_SetPriority>:
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	4603      	mov	r3, r0
 8006d70:	6039      	str	r1, [r7, #0]
 8006d72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006d74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	db0a      	blt.n	8006d92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	490c      	ldr	r1, [pc, #48]	@ (8006db4 <__NVIC_SetPriority+0x4c>)
 8006d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d86:	0112      	lsls	r2, r2, #4
 8006d88:	b2d2      	uxtb	r2, r2
 8006d8a:	440b      	add	r3, r1
 8006d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006d90:	e00a      	b.n	8006da8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	4908      	ldr	r1, [pc, #32]	@ (8006db8 <__NVIC_SetPriority+0x50>)
 8006d98:	88fb      	ldrh	r3, [r7, #6]
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	3b04      	subs	r3, #4
 8006da0:	0112      	lsls	r2, r2, #4
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	440b      	add	r3, r1
 8006da6:	761a      	strb	r2, [r3, #24]
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	e000e100 	.word	0xe000e100
 8006db8:	e000ed00 	.word	0xe000ed00

08006dbc <NVIC_EncodePriority>:
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b089      	sub	sp, #36	@ 0x24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f003 0307 	and.w	r3, r3, #7
 8006dce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	f1c3 0307 	rsb	r3, r3, #7
 8006dd6:	2b04      	cmp	r3, #4
 8006dd8:	bf28      	it	cs
 8006dda:	2304      	movcs	r3, #4
 8006ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	3304      	adds	r3, #4
 8006de2:	2b06      	cmp	r3, #6
 8006de4:	d902      	bls.n	8006dec <NVIC_EncodePriority+0x30>
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	3b03      	subs	r3, #3
 8006dea:	e000      	b.n	8006dee <NVIC_EncodePriority+0x32>
 8006dec:	2300      	movs	r3, #0
 8006dee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006df0:	f04f 32ff 	mov.w	r2, #4294967295
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfa:	43da      	mvns	r2, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	401a      	ands	r2, r3
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e04:	f04f 31ff 	mov.w	r1, #4294967295
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e0e:	43d9      	mvns	r1, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e14:	4313      	orrs	r3, r2
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3724      	adds	r7, #36	@ 0x24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
	...

08006e24 <__NVIC_SystemReset>:
{
 8006e24:	b480      	push	{r7}
 8006e26:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006e28:	f3bf 8f4f 	dsb	sy
}
 8006e2c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006e2e:	4b06      	ldr	r3, [pc, #24]	@ (8006e48 <__NVIC_SystemReset+0x24>)
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006e36:	4904      	ldr	r1, [pc, #16]	@ (8006e48 <__NVIC_SystemReset+0x24>)
 8006e38:	4b04      	ldr	r3, [pc, #16]	@ (8006e4c <__NVIC_SystemReset+0x28>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006e3e:	f3bf 8f4f 	dsb	sy
}
 8006e42:	bf00      	nop
    __NOP();
 8006e44:	bf00      	nop
 8006e46:	e7fd      	b.n	8006e44 <__NVIC_SystemReset+0x20>
 8006e48:	e000ed00 	.word	0xe000ed00
 8006e4c:	05fa0004 	.word	0x05fa0004

08006e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e60:	d301      	bcc.n	8006e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e62:	2301      	movs	r3, #1
 8006e64:	e00f      	b.n	8006e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e66:	4a0a      	ldr	r2, [pc, #40]	@ (8006e90 <SysTick_Config+0x40>)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e6e:	210f      	movs	r1, #15
 8006e70:	f04f 30ff 	mov.w	r0, #4294967295
 8006e74:	f7ff ff78 	bl	8006d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e78:	4b05      	ldr	r3, [pc, #20]	@ (8006e90 <SysTick_Config+0x40>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e7e:	4b04      	ldr	r3, [pc, #16]	@ (8006e90 <SysTick_Config+0x40>)
 8006e80:	2207      	movs	r2, #7
 8006e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	e000e010 	.word	0xe000e010

08006e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7ff ff13 	bl	8006cc8 <__NVIC_SetPriorityGrouping>
}
 8006ea2:	bf00      	nop
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b086      	sub	sp, #24
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	60b9      	str	r1, [r7, #8]
 8006eb4:	607a      	str	r2, [r7, #4]
 8006eb6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006eb8:	f7ff ff2a 	bl	8006d10 <__NVIC_GetPriorityGrouping>
 8006ebc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	68b9      	ldr	r1, [r7, #8]
 8006ec2:	6978      	ldr	r0, [r7, #20]
 8006ec4:	f7ff ff7a 	bl	8006dbc <NVIC_EncodePriority>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006ece:	4611      	mov	r1, r2
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7ff ff49 	bl	8006d68 <__NVIC_SetPriority>
}
 8006ed6:	bf00      	nop
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b082      	sub	sp, #8
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ee8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7ff ff1d 	bl	8006d2c <__NVIC_EnableIRQ>
}
 8006ef2:	bf00      	nop
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006efe:	f7ff ff91 	bl	8006e24 <__NVIC_SystemReset>

08006f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7ff ffa0 	bl	8006e50 <SysTick_Config>
 8006f10:	4603      	mov	r3, r0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
	...

08006f1c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006f20:	f3bf 8f5f 	dmb	sy
}
 8006f24:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006f26:	4b07      	ldr	r3, [pc, #28]	@ (8006f44 <HAL_MPU_Disable+0x28>)
 8006f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2a:	4a06      	ldr	r2, [pc, #24]	@ (8006f44 <HAL_MPU_Disable+0x28>)
 8006f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f30:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006f32:	4b05      	ldr	r3, [pc, #20]	@ (8006f48 <HAL_MPU_Disable+0x2c>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	605a      	str	r2, [r3, #4]
}
 8006f38:	bf00      	nop
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	e000ed00 	.word	0xe000ed00
 8006f48:	e000ed90 	.word	0xe000ed90

08006f4c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006f54:	4a0b      	ldr	r2, [pc, #44]	@ (8006f84 <HAL_MPU_Enable+0x38>)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f043 0301 	orr.w	r3, r3, #1
 8006f5c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f88 <HAL_MPU_Enable+0x3c>)
 8006f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f62:	4a09      	ldr	r2, [pc, #36]	@ (8006f88 <HAL_MPU_Enable+0x3c>)
 8006f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f68:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006f6a:	f3bf 8f4f 	dsb	sy
}
 8006f6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006f70:	f3bf 8f6f 	isb	sy
}
 8006f74:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006f76:	bf00      	nop
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	e000ed90 	.word	0xe000ed90
 8006f88:	e000ed00 	.word	0xe000ed00

08006f8c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	785a      	ldrb	r2, [r3, #1]
 8006f98:	4b1b      	ldr	r3, [pc, #108]	@ (8007008 <HAL_MPU_ConfigRegion+0x7c>)
 8006f9a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8007008 <HAL_MPU_ConfigRegion+0x7c>)
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	4a19      	ldr	r2, [pc, #100]	@ (8007008 <HAL_MPU_ConfigRegion+0x7c>)
 8006fa2:	f023 0301 	bic.w	r3, r3, #1
 8006fa6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006fa8:	4a17      	ldr	r2, [pc, #92]	@ (8007008 <HAL_MPU_ConfigRegion+0x7c>)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	7b1b      	ldrb	r3, [r3, #12]
 8006fb4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	7adb      	ldrb	r3, [r3, #11]
 8006fba:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006fbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	7a9b      	ldrb	r3, [r3, #10]
 8006fc2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006fc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	7b5b      	ldrb	r3, [r3, #13]
 8006fca:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006fcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	7b9b      	ldrb	r3, [r3, #14]
 8006fd2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006fd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	7bdb      	ldrb	r3, [r3, #15]
 8006fda:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006fdc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	7a5b      	ldrb	r3, [r3, #9]
 8006fe2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006fe4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	7a1b      	ldrb	r3, [r3, #8]
 8006fea:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006fec:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	7812      	ldrb	r2, [r2, #0]
 8006ff2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006ff4:	4a04      	ldr	r2, [pc, #16]	@ (8007008 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006ff6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006ff8:	6113      	str	r3, [r2, #16]
}
 8006ffa:	bf00      	nop
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	e000ed90 	.word	0xe000ed90

0800700c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007014:	f7ff fe1c 	bl	8006c50 <HAL_GetTick>
 8007018:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e316      	b.n	8007652 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a66      	ldr	r2, [pc, #408]	@ (80071c4 <HAL_DMA_Init+0x1b8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d04a      	beq.n	80070c4 <HAL_DMA_Init+0xb8>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a65      	ldr	r2, [pc, #404]	@ (80071c8 <HAL_DMA_Init+0x1bc>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d045      	beq.n	80070c4 <HAL_DMA_Init+0xb8>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a63      	ldr	r2, [pc, #396]	@ (80071cc <HAL_DMA_Init+0x1c0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d040      	beq.n	80070c4 <HAL_DMA_Init+0xb8>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a62      	ldr	r2, [pc, #392]	@ (80071d0 <HAL_DMA_Init+0x1c4>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d03b      	beq.n	80070c4 <HAL_DMA_Init+0xb8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a60      	ldr	r2, [pc, #384]	@ (80071d4 <HAL_DMA_Init+0x1c8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d036      	beq.n	80070c4 <HAL_DMA_Init+0xb8>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a5f      	ldr	r2, [pc, #380]	@ (80071d8 <HAL_DMA_Init+0x1cc>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d031      	beq.n	80070c4 <HAL_DMA_Init+0xb8>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a5d      	ldr	r2, [pc, #372]	@ (80071dc <HAL_DMA_Init+0x1d0>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d02c      	beq.n	80070c4 <HAL_DMA_Init+0xb8>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a5c      	ldr	r2, [pc, #368]	@ (80071e0 <HAL_DMA_Init+0x1d4>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d027      	beq.n	80070c4 <HAL_DMA_Init+0xb8>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a5a      	ldr	r2, [pc, #360]	@ (80071e4 <HAL_DMA_Init+0x1d8>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d022      	beq.n	80070c4 <HAL_DMA_Init+0xb8>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a59      	ldr	r2, [pc, #356]	@ (80071e8 <HAL_DMA_Init+0x1dc>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d01d      	beq.n	80070c4 <HAL_DMA_Init+0xb8>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a57      	ldr	r2, [pc, #348]	@ (80071ec <HAL_DMA_Init+0x1e0>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d018      	beq.n	80070c4 <HAL_DMA_Init+0xb8>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a56      	ldr	r2, [pc, #344]	@ (80071f0 <HAL_DMA_Init+0x1e4>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d013      	beq.n	80070c4 <HAL_DMA_Init+0xb8>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a54      	ldr	r2, [pc, #336]	@ (80071f4 <HAL_DMA_Init+0x1e8>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d00e      	beq.n	80070c4 <HAL_DMA_Init+0xb8>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a53      	ldr	r2, [pc, #332]	@ (80071f8 <HAL_DMA_Init+0x1ec>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d009      	beq.n	80070c4 <HAL_DMA_Init+0xb8>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a51      	ldr	r2, [pc, #324]	@ (80071fc <HAL_DMA_Init+0x1f0>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d004      	beq.n	80070c4 <HAL_DMA_Init+0xb8>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a50      	ldr	r2, [pc, #320]	@ (8007200 <HAL_DMA_Init+0x1f4>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d101      	bne.n	80070c8 <HAL_DMA_Init+0xbc>
 80070c4:	2301      	movs	r3, #1
 80070c6:	e000      	b.n	80070ca <HAL_DMA_Init+0xbe>
 80070c8:	2300      	movs	r3, #0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f000 813b 	beq.w	8007346 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2202      	movs	r2, #2
 80070d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a37      	ldr	r2, [pc, #220]	@ (80071c4 <HAL_DMA_Init+0x1b8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d04a      	beq.n	8007180 <HAL_DMA_Init+0x174>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a36      	ldr	r2, [pc, #216]	@ (80071c8 <HAL_DMA_Init+0x1bc>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d045      	beq.n	8007180 <HAL_DMA_Init+0x174>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a34      	ldr	r2, [pc, #208]	@ (80071cc <HAL_DMA_Init+0x1c0>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d040      	beq.n	8007180 <HAL_DMA_Init+0x174>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a33      	ldr	r2, [pc, #204]	@ (80071d0 <HAL_DMA_Init+0x1c4>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d03b      	beq.n	8007180 <HAL_DMA_Init+0x174>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a31      	ldr	r2, [pc, #196]	@ (80071d4 <HAL_DMA_Init+0x1c8>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d036      	beq.n	8007180 <HAL_DMA_Init+0x174>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a30      	ldr	r2, [pc, #192]	@ (80071d8 <HAL_DMA_Init+0x1cc>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d031      	beq.n	8007180 <HAL_DMA_Init+0x174>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a2e      	ldr	r2, [pc, #184]	@ (80071dc <HAL_DMA_Init+0x1d0>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d02c      	beq.n	8007180 <HAL_DMA_Init+0x174>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a2d      	ldr	r2, [pc, #180]	@ (80071e0 <HAL_DMA_Init+0x1d4>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d027      	beq.n	8007180 <HAL_DMA_Init+0x174>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a2b      	ldr	r2, [pc, #172]	@ (80071e4 <HAL_DMA_Init+0x1d8>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d022      	beq.n	8007180 <HAL_DMA_Init+0x174>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a2a      	ldr	r2, [pc, #168]	@ (80071e8 <HAL_DMA_Init+0x1dc>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d01d      	beq.n	8007180 <HAL_DMA_Init+0x174>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a28      	ldr	r2, [pc, #160]	@ (80071ec <HAL_DMA_Init+0x1e0>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d018      	beq.n	8007180 <HAL_DMA_Init+0x174>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a27      	ldr	r2, [pc, #156]	@ (80071f0 <HAL_DMA_Init+0x1e4>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d013      	beq.n	8007180 <HAL_DMA_Init+0x174>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a25      	ldr	r2, [pc, #148]	@ (80071f4 <HAL_DMA_Init+0x1e8>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d00e      	beq.n	8007180 <HAL_DMA_Init+0x174>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a24      	ldr	r2, [pc, #144]	@ (80071f8 <HAL_DMA_Init+0x1ec>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d009      	beq.n	8007180 <HAL_DMA_Init+0x174>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a22      	ldr	r2, [pc, #136]	@ (80071fc <HAL_DMA_Init+0x1f0>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d004      	beq.n	8007180 <HAL_DMA_Init+0x174>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a21      	ldr	r2, [pc, #132]	@ (8007200 <HAL_DMA_Init+0x1f4>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d108      	bne.n	8007192 <HAL_DMA_Init+0x186>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0201 	bic.w	r2, r2, #1
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	e007      	b.n	80071a2 <HAL_DMA_Init+0x196>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0201 	bic.w	r2, r2, #1
 80071a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80071a2:	e02f      	b.n	8007204 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071a4:	f7ff fd54 	bl	8006c50 <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	2b05      	cmp	r3, #5
 80071b0:	d928      	bls.n	8007204 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2220      	movs	r2, #32
 80071b6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2203      	movs	r2, #3
 80071bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e246      	b.n	8007652 <HAL_DMA_Init+0x646>
 80071c4:	40020010 	.word	0x40020010
 80071c8:	40020028 	.word	0x40020028
 80071cc:	40020040 	.word	0x40020040
 80071d0:	40020058 	.word	0x40020058
 80071d4:	40020070 	.word	0x40020070
 80071d8:	40020088 	.word	0x40020088
 80071dc:	400200a0 	.word	0x400200a0
 80071e0:	400200b8 	.word	0x400200b8
 80071e4:	40020410 	.word	0x40020410
 80071e8:	40020428 	.word	0x40020428
 80071ec:	40020440 	.word	0x40020440
 80071f0:	40020458 	.word	0x40020458
 80071f4:	40020470 	.word	0x40020470
 80071f8:	40020488 	.word	0x40020488
 80071fc:	400204a0 	.word	0x400204a0
 8007200:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1c8      	bne.n	80071a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	4b83      	ldr	r3, [pc, #524]	@ (800742c <HAL_DMA_Init+0x420>)
 800721e:	4013      	ands	r3, r2
 8007220:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800722a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007236:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007242:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	4313      	orrs	r3, r2
 800724e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007254:	2b04      	cmp	r3, #4
 8007256:	d107      	bne.n	8007268 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007260:	4313      	orrs	r3, r2
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	4313      	orrs	r3, r2
 8007266:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007268:	4b71      	ldr	r3, [pc, #452]	@ (8007430 <HAL_DMA_Init+0x424>)
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	4b71      	ldr	r3, [pc, #452]	@ (8007434 <HAL_DMA_Init+0x428>)
 800726e:	4013      	ands	r3, r2
 8007270:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007274:	d328      	bcc.n	80072c8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	2b28      	cmp	r3, #40	@ 0x28
 800727c:	d903      	bls.n	8007286 <HAL_DMA_Init+0x27a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	2b2e      	cmp	r3, #46	@ 0x2e
 8007284:	d917      	bls.n	80072b6 <HAL_DMA_Init+0x2aa>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	2b3e      	cmp	r3, #62	@ 0x3e
 800728c:	d903      	bls.n	8007296 <HAL_DMA_Init+0x28a>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2b42      	cmp	r3, #66	@ 0x42
 8007294:	d90f      	bls.n	80072b6 <HAL_DMA_Init+0x2aa>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2b46      	cmp	r3, #70	@ 0x46
 800729c:	d903      	bls.n	80072a6 <HAL_DMA_Init+0x29a>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	2b48      	cmp	r3, #72	@ 0x48
 80072a4:	d907      	bls.n	80072b6 <HAL_DMA_Init+0x2aa>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	2b4e      	cmp	r3, #78	@ 0x4e
 80072ac:	d905      	bls.n	80072ba <HAL_DMA_Init+0x2ae>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	2b52      	cmp	r3, #82	@ 0x52
 80072b4:	d801      	bhi.n	80072ba <HAL_DMA_Init+0x2ae>
 80072b6:	2301      	movs	r3, #1
 80072b8:	e000      	b.n	80072bc <HAL_DMA_Init+0x2b0>
 80072ba:	2300      	movs	r3, #0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072c6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	f023 0307 	bic.w	r3, r3, #7
 80072de:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d117      	bne.n	8007322 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00e      	beq.n	8007322 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fdad 	bl	8007e64 <DMA_CheckFifoParam>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d008      	beq.n	8007322 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2240      	movs	r2, #64	@ 0x40
 8007314:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e197      	b.n	8007652 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fce8 	bl	8007d00 <DMA_CalcBaseAndBitshift>
 8007330:	4603      	mov	r3, r0
 8007332:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007338:	f003 031f 	and.w	r3, r3, #31
 800733c:	223f      	movs	r2, #63	@ 0x3f
 800733e:	409a      	lsls	r2, r3
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	609a      	str	r2, [r3, #8]
 8007344:	e0cd      	b.n	80074e2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a3b      	ldr	r2, [pc, #236]	@ (8007438 <HAL_DMA_Init+0x42c>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d022      	beq.n	8007396 <HAL_DMA_Init+0x38a>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a39      	ldr	r2, [pc, #228]	@ (800743c <HAL_DMA_Init+0x430>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d01d      	beq.n	8007396 <HAL_DMA_Init+0x38a>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a38      	ldr	r2, [pc, #224]	@ (8007440 <HAL_DMA_Init+0x434>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d018      	beq.n	8007396 <HAL_DMA_Init+0x38a>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a36      	ldr	r2, [pc, #216]	@ (8007444 <HAL_DMA_Init+0x438>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d013      	beq.n	8007396 <HAL_DMA_Init+0x38a>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a35      	ldr	r2, [pc, #212]	@ (8007448 <HAL_DMA_Init+0x43c>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d00e      	beq.n	8007396 <HAL_DMA_Init+0x38a>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a33      	ldr	r2, [pc, #204]	@ (800744c <HAL_DMA_Init+0x440>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d009      	beq.n	8007396 <HAL_DMA_Init+0x38a>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a32      	ldr	r2, [pc, #200]	@ (8007450 <HAL_DMA_Init+0x444>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d004      	beq.n	8007396 <HAL_DMA_Init+0x38a>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a30      	ldr	r2, [pc, #192]	@ (8007454 <HAL_DMA_Init+0x448>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d101      	bne.n	800739a <HAL_DMA_Init+0x38e>
 8007396:	2301      	movs	r3, #1
 8007398:	e000      	b.n	800739c <HAL_DMA_Init+0x390>
 800739a:	2300      	movs	r3, #0
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 8097 	beq.w	80074d0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a24      	ldr	r2, [pc, #144]	@ (8007438 <HAL_DMA_Init+0x42c>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d021      	beq.n	80073f0 <HAL_DMA_Init+0x3e4>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a22      	ldr	r2, [pc, #136]	@ (800743c <HAL_DMA_Init+0x430>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d01c      	beq.n	80073f0 <HAL_DMA_Init+0x3e4>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a21      	ldr	r2, [pc, #132]	@ (8007440 <HAL_DMA_Init+0x434>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d017      	beq.n	80073f0 <HAL_DMA_Init+0x3e4>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a1f      	ldr	r2, [pc, #124]	@ (8007444 <HAL_DMA_Init+0x438>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d012      	beq.n	80073f0 <HAL_DMA_Init+0x3e4>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007448 <HAL_DMA_Init+0x43c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d00d      	beq.n	80073f0 <HAL_DMA_Init+0x3e4>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a1c      	ldr	r2, [pc, #112]	@ (800744c <HAL_DMA_Init+0x440>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d008      	beq.n	80073f0 <HAL_DMA_Init+0x3e4>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a1b      	ldr	r2, [pc, #108]	@ (8007450 <HAL_DMA_Init+0x444>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d003      	beq.n	80073f0 <HAL_DMA_Init+0x3e4>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a19      	ldr	r2, [pc, #100]	@ (8007454 <HAL_DMA_Init+0x448>)
 80073ee:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	4b13      	ldr	r3, [pc, #76]	@ (8007458 <HAL_DMA_Init+0x44c>)
 800740c:	4013      	ands	r3, r2
 800740e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	2b40      	cmp	r3, #64	@ 0x40
 8007416:	d021      	beq.n	800745c <HAL_DMA_Init+0x450>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	2b80      	cmp	r3, #128	@ 0x80
 800741e:	d102      	bne.n	8007426 <HAL_DMA_Init+0x41a>
 8007420:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007424:	e01b      	b.n	800745e <HAL_DMA_Init+0x452>
 8007426:	2300      	movs	r3, #0
 8007428:	e019      	b.n	800745e <HAL_DMA_Init+0x452>
 800742a:	bf00      	nop
 800742c:	fe10803f 	.word	0xfe10803f
 8007430:	5c001000 	.word	0x5c001000
 8007434:	ffff0000 	.word	0xffff0000
 8007438:	58025408 	.word	0x58025408
 800743c:	5802541c 	.word	0x5802541c
 8007440:	58025430 	.word	0x58025430
 8007444:	58025444 	.word	0x58025444
 8007448:	58025458 	.word	0x58025458
 800744c:	5802546c 	.word	0x5802546c
 8007450:	58025480 	.word	0x58025480
 8007454:	58025494 	.word	0x58025494
 8007458:	fffe000f 	.word	0xfffe000f
 800745c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	68d2      	ldr	r2, [r2, #12]
 8007462:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007464:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800746c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007474:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800747c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007484:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800748c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	4313      	orrs	r3, r2
 8007492:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	461a      	mov	r2, r3
 80074a2:	4b6e      	ldr	r3, [pc, #440]	@ (800765c <HAL_DMA_Init+0x650>)
 80074a4:	4413      	add	r3, r2
 80074a6:	4a6e      	ldr	r2, [pc, #440]	@ (8007660 <HAL_DMA_Init+0x654>)
 80074a8:	fba2 2303 	umull	r2, r3, r2, r3
 80074ac:	091b      	lsrs	r3, r3, #4
 80074ae:	009a      	lsls	r2, r3, #2
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fc23 	bl	8007d00 <DMA_CalcBaseAndBitshift>
 80074ba:	4603      	mov	r3, r0
 80074bc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074c2:	f003 031f 	and.w	r3, r3, #31
 80074c6:	2201      	movs	r2, #1
 80074c8:	409a      	lsls	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	605a      	str	r2, [r3, #4]
 80074ce:	e008      	b.n	80074e2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2240      	movs	r2, #64	@ 0x40
 80074d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2203      	movs	r2, #3
 80074da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e0b7      	b.n	8007652 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a5f      	ldr	r2, [pc, #380]	@ (8007664 <HAL_DMA_Init+0x658>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d072      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a5d      	ldr	r2, [pc, #372]	@ (8007668 <HAL_DMA_Init+0x65c>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d06d      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a5c      	ldr	r2, [pc, #368]	@ (800766c <HAL_DMA_Init+0x660>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d068      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a5a      	ldr	r2, [pc, #360]	@ (8007670 <HAL_DMA_Init+0x664>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d063      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a59      	ldr	r2, [pc, #356]	@ (8007674 <HAL_DMA_Init+0x668>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d05e      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a57      	ldr	r2, [pc, #348]	@ (8007678 <HAL_DMA_Init+0x66c>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d059      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a56      	ldr	r2, [pc, #344]	@ (800767c <HAL_DMA_Init+0x670>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d054      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a54      	ldr	r2, [pc, #336]	@ (8007680 <HAL_DMA_Init+0x674>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d04f      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a53      	ldr	r2, [pc, #332]	@ (8007684 <HAL_DMA_Init+0x678>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d04a      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a51      	ldr	r2, [pc, #324]	@ (8007688 <HAL_DMA_Init+0x67c>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d045      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a50      	ldr	r2, [pc, #320]	@ (800768c <HAL_DMA_Init+0x680>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d040      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a4e      	ldr	r2, [pc, #312]	@ (8007690 <HAL_DMA_Init+0x684>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d03b      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a4d      	ldr	r2, [pc, #308]	@ (8007694 <HAL_DMA_Init+0x688>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d036      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a4b      	ldr	r2, [pc, #300]	@ (8007698 <HAL_DMA_Init+0x68c>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d031      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a4a      	ldr	r2, [pc, #296]	@ (800769c <HAL_DMA_Init+0x690>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d02c      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a48      	ldr	r2, [pc, #288]	@ (80076a0 <HAL_DMA_Init+0x694>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d027      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a47      	ldr	r2, [pc, #284]	@ (80076a4 <HAL_DMA_Init+0x698>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d022      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a45      	ldr	r2, [pc, #276]	@ (80076a8 <HAL_DMA_Init+0x69c>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d01d      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a44      	ldr	r2, [pc, #272]	@ (80076ac <HAL_DMA_Init+0x6a0>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d018      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a42      	ldr	r2, [pc, #264]	@ (80076b0 <HAL_DMA_Init+0x6a4>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d013      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a41      	ldr	r2, [pc, #260]	@ (80076b4 <HAL_DMA_Init+0x6a8>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d00e      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a3f      	ldr	r2, [pc, #252]	@ (80076b8 <HAL_DMA_Init+0x6ac>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d009      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a3e      	ldr	r2, [pc, #248]	@ (80076bc <HAL_DMA_Init+0x6b0>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d004      	beq.n	80075d2 <HAL_DMA_Init+0x5c6>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a3c      	ldr	r2, [pc, #240]	@ (80076c0 <HAL_DMA_Init+0x6b4>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d101      	bne.n	80075d6 <HAL_DMA_Init+0x5ca>
 80075d2:	2301      	movs	r3, #1
 80075d4:	e000      	b.n	80075d8 <HAL_DMA_Init+0x5cc>
 80075d6:	2300      	movs	r3, #0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d032      	beq.n	8007642 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fcbd 	bl	8007f5c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	2b80      	cmp	r3, #128	@ 0x80
 80075e8:	d102      	bne.n	80075f0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685a      	ldr	r2, [r3, #4]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075f8:	b2d2      	uxtb	r2, r2
 80075fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007604:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d010      	beq.n	8007630 <HAL_DMA_Init+0x624>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	2b08      	cmp	r3, #8
 8007614:	d80c      	bhi.n	8007630 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fd3a 	bl	8008090 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007620:	2200      	movs	r2, #0
 8007622:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800762c:	605a      	str	r2, [r3, #4]
 800762e:	e008      	b.n	8007642 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	a7fdabf8 	.word	0xa7fdabf8
 8007660:	cccccccd 	.word	0xcccccccd
 8007664:	40020010 	.word	0x40020010
 8007668:	40020028 	.word	0x40020028
 800766c:	40020040 	.word	0x40020040
 8007670:	40020058 	.word	0x40020058
 8007674:	40020070 	.word	0x40020070
 8007678:	40020088 	.word	0x40020088
 800767c:	400200a0 	.word	0x400200a0
 8007680:	400200b8 	.word	0x400200b8
 8007684:	40020410 	.word	0x40020410
 8007688:	40020428 	.word	0x40020428
 800768c:	40020440 	.word	0x40020440
 8007690:	40020458 	.word	0x40020458
 8007694:	40020470 	.word	0x40020470
 8007698:	40020488 	.word	0x40020488
 800769c:	400204a0 	.word	0x400204a0
 80076a0:	400204b8 	.word	0x400204b8
 80076a4:	58025408 	.word	0x58025408
 80076a8:	5802541c 	.word	0x5802541c
 80076ac:	58025430 	.word	0x58025430
 80076b0:	58025444 	.word	0x58025444
 80076b4:	58025458 	.word	0x58025458
 80076b8:	5802546c 	.word	0x5802546c
 80076bc:	58025480 	.word	0x58025480
 80076c0:	58025494 	.word	0x58025494

080076c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80076cc:	f7ff fac0 	bl	8006c50 <HAL_GetTick>
 80076d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e2dc      	b.n	8007c96 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d008      	beq.n	80076fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2280      	movs	r2, #128	@ 0x80
 80076ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e2cd      	b.n	8007c96 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a76      	ldr	r2, [pc, #472]	@ (80078d8 <HAL_DMA_Abort+0x214>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d04a      	beq.n	800779a <HAL_DMA_Abort+0xd6>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a74      	ldr	r2, [pc, #464]	@ (80078dc <HAL_DMA_Abort+0x218>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d045      	beq.n	800779a <HAL_DMA_Abort+0xd6>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a73      	ldr	r2, [pc, #460]	@ (80078e0 <HAL_DMA_Abort+0x21c>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d040      	beq.n	800779a <HAL_DMA_Abort+0xd6>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a71      	ldr	r2, [pc, #452]	@ (80078e4 <HAL_DMA_Abort+0x220>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d03b      	beq.n	800779a <HAL_DMA_Abort+0xd6>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a70      	ldr	r2, [pc, #448]	@ (80078e8 <HAL_DMA_Abort+0x224>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d036      	beq.n	800779a <HAL_DMA_Abort+0xd6>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a6e      	ldr	r2, [pc, #440]	@ (80078ec <HAL_DMA_Abort+0x228>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d031      	beq.n	800779a <HAL_DMA_Abort+0xd6>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a6d      	ldr	r2, [pc, #436]	@ (80078f0 <HAL_DMA_Abort+0x22c>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d02c      	beq.n	800779a <HAL_DMA_Abort+0xd6>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a6b      	ldr	r2, [pc, #428]	@ (80078f4 <HAL_DMA_Abort+0x230>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d027      	beq.n	800779a <HAL_DMA_Abort+0xd6>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a6a      	ldr	r2, [pc, #424]	@ (80078f8 <HAL_DMA_Abort+0x234>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d022      	beq.n	800779a <HAL_DMA_Abort+0xd6>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a68      	ldr	r2, [pc, #416]	@ (80078fc <HAL_DMA_Abort+0x238>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d01d      	beq.n	800779a <HAL_DMA_Abort+0xd6>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a67      	ldr	r2, [pc, #412]	@ (8007900 <HAL_DMA_Abort+0x23c>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d018      	beq.n	800779a <HAL_DMA_Abort+0xd6>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a65      	ldr	r2, [pc, #404]	@ (8007904 <HAL_DMA_Abort+0x240>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d013      	beq.n	800779a <HAL_DMA_Abort+0xd6>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a64      	ldr	r2, [pc, #400]	@ (8007908 <HAL_DMA_Abort+0x244>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d00e      	beq.n	800779a <HAL_DMA_Abort+0xd6>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a62      	ldr	r2, [pc, #392]	@ (800790c <HAL_DMA_Abort+0x248>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d009      	beq.n	800779a <HAL_DMA_Abort+0xd6>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a61      	ldr	r2, [pc, #388]	@ (8007910 <HAL_DMA_Abort+0x24c>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d004      	beq.n	800779a <HAL_DMA_Abort+0xd6>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a5f      	ldr	r2, [pc, #380]	@ (8007914 <HAL_DMA_Abort+0x250>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d101      	bne.n	800779e <HAL_DMA_Abort+0xda>
 800779a:	2301      	movs	r3, #1
 800779c:	e000      	b.n	80077a0 <HAL_DMA_Abort+0xdc>
 800779e:	2300      	movs	r3, #0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d013      	beq.n	80077cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 021e 	bic.w	r2, r2, #30
 80077b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	695a      	ldr	r2, [r3, #20]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80077c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	617b      	str	r3, [r7, #20]
 80077ca:	e00a      	b.n	80077e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f022 020e 	bic.w	r2, r2, #14
 80077da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a3c      	ldr	r2, [pc, #240]	@ (80078d8 <HAL_DMA_Abort+0x214>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d072      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a3a      	ldr	r2, [pc, #232]	@ (80078dc <HAL_DMA_Abort+0x218>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d06d      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a39      	ldr	r2, [pc, #228]	@ (80078e0 <HAL_DMA_Abort+0x21c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d068      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a37      	ldr	r2, [pc, #220]	@ (80078e4 <HAL_DMA_Abort+0x220>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d063      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a36      	ldr	r2, [pc, #216]	@ (80078e8 <HAL_DMA_Abort+0x224>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d05e      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a34      	ldr	r2, [pc, #208]	@ (80078ec <HAL_DMA_Abort+0x228>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d059      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a33      	ldr	r2, [pc, #204]	@ (80078f0 <HAL_DMA_Abort+0x22c>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d054      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a31      	ldr	r2, [pc, #196]	@ (80078f4 <HAL_DMA_Abort+0x230>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d04f      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a30      	ldr	r2, [pc, #192]	@ (80078f8 <HAL_DMA_Abort+0x234>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d04a      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a2e      	ldr	r2, [pc, #184]	@ (80078fc <HAL_DMA_Abort+0x238>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d045      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a2d      	ldr	r2, [pc, #180]	@ (8007900 <HAL_DMA_Abort+0x23c>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d040      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a2b      	ldr	r2, [pc, #172]	@ (8007904 <HAL_DMA_Abort+0x240>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d03b      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a2a      	ldr	r2, [pc, #168]	@ (8007908 <HAL_DMA_Abort+0x244>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d036      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a28      	ldr	r2, [pc, #160]	@ (800790c <HAL_DMA_Abort+0x248>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d031      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a27      	ldr	r2, [pc, #156]	@ (8007910 <HAL_DMA_Abort+0x24c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d02c      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a25      	ldr	r2, [pc, #148]	@ (8007914 <HAL_DMA_Abort+0x250>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d027      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a24      	ldr	r2, [pc, #144]	@ (8007918 <HAL_DMA_Abort+0x254>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d022      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a22      	ldr	r2, [pc, #136]	@ (800791c <HAL_DMA_Abort+0x258>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d01d      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a21      	ldr	r2, [pc, #132]	@ (8007920 <HAL_DMA_Abort+0x25c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d018      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a1f      	ldr	r2, [pc, #124]	@ (8007924 <HAL_DMA_Abort+0x260>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d013      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a1e      	ldr	r2, [pc, #120]	@ (8007928 <HAL_DMA_Abort+0x264>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d00e      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a1c      	ldr	r2, [pc, #112]	@ (800792c <HAL_DMA_Abort+0x268>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d009      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a1b      	ldr	r2, [pc, #108]	@ (8007930 <HAL_DMA_Abort+0x26c>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d004      	beq.n	80078d2 <HAL_DMA_Abort+0x20e>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a19      	ldr	r2, [pc, #100]	@ (8007934 <HAL_DMA_Abort+0x270>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d132      	bne.n	8007938 <HAL_DMA_Abort+0x274>
 80078d2:	2301      	movs	r3, #1
 80078d4:	e031      	b.n	800793a <HAL_DMA_Abort+0x276>
 80078d6:	bf00      	nop
 80078d8:	40020010 	.word	0x40020010
 80078dc:	40020028 	.word	0x40020028
 80078e0:	40020040 	.word	0x40020040
 80078e4:	40020058 	.word	0x40020058
 80078e8:	40020070 	.word	0x40020070
 80078ec:	40020088 	.word	0x40020088
 80078f0:	400200a0 	.word	0x400200a0
 80078f4:	400200b8 	.word	0x400200b8
 80078f8:	40020410 	.word	0x40020410
 80078fc:	40020428 	.word	0x40020428
 8007900:	40020440 	.word	0x40020440
 8007904:	40020458 	.word	0x40020458
 8007908:	40020470 	.word	0x40020470
 800790c:	40020488 	.word	0x40020488
 8007910:	400204a0 	.word	0x400204a0
 8007914:	400204b8 	.word	0x400204b8
 8007918:	58025408 	.word	0x58025408
 800791c:	5802541c 	.word	0x5802541c
 8007920:	58025430 	.word	0x58025430
 8007924:	58025444 	.word	0x58025444
 8007928:	58025458 	.word	0x58025458
 800792c:	5802546c 	.word	0x5802546c
 8007930:	58025480 	.word	0x58025480
 8007934:	58025494 	.word	0x58025494
 8007938:	2300      	movs	r3, #0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d007      	beq.n	800794e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007948:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800794c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a6d      	ldr	r2, [pc, #436]	@ (8007b08 <HAL_DMA_Abort+0x444>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d04a      	beq.n	80079ee <HAL_DMA_Abort+0x32a>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a6b      	ldr	r2, [pc, #428]	@ (8007b0c <HAL_DMA_Abort+0x448>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d045      	beq.n	80079ee <HAL_DMA_Abort+0x32a>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a6a      	ldr	r2, [pc, #424]	@ (8007b10 <HAL_DMA_Abort+0x44c>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d040      	beq.n	80079ee <HAL_DMA_Abort+0x32a>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a68      	ldr	r2, [pc, #416]	@ (8007b14 <HAL_DMA_Abort+0x450>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d03b      	beq.n	80079ee <HAL_DMA_Abort+0x32a>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a67      	ldr	r2, [pc, #412]	@ (8007b18 <HAL_DMA_Abort+0x454>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d036      	beq.n	80079ee <HAL_DMA_Abort+0x32a>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a65      	ldr	r2, [pc, #404]	@ (8007b1c <HAL_DMA_Abort+0x458>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d031      	beq.n	80079ee <HAL_DMA_Abort+0x32a>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a64      	ldr	r2, [pc, #400]	@ (8007b20 <HAL_DMA_Abort+0x45c>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d02c      	beq.n	80079ee <HAL_DMA_Abort+0x32a>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a62      	ldr	r2, [pc, #392]	@ (8007b24 <HAL_DMA_Abort+0x460>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d027      	beq.n	80079ee <HAL_DMA_Abort+0x32a>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a61      	ldr	r2, [pc, #388]	@ (8007b28 <HAL_DMA_Abort+0x464>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d022      	beq.n	80079ee <HAL_DMA_Abort+0x32a>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a5f      	ldr	r2, [pc, #380]	@ (8007b2c <HAL_DMA_Abort+0x468>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d01d      	beq.n	80079ee <HAL_DMA_Abort+0x32a>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a5e      	ldr	r2, [pc, #376]	@ (8007b30 <HAL_DMA_Abort+0x46c>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d018      	beq.n	80079ee <HAL_DMA_Abort+0x32a>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a5c      	ldr	r2, [pc, #368]	@ (8007b34 <HAL_DMA_Abort+0x470>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d013      	beq.n	80079ee <HAL_DMA_Abort+0x32a>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a5b      	ldr	r2, [pc, #364]	@ (8007b38 <HAL_DMA_Abort+0x474>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d00e      	beq.n	80079ee <HAL_DMA_Abort+0x32a>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a59      	ldr	r2, [pc, #356]	@ (8007b3c <HAL_DMA_Abort+0x478>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d009      	beq.n	80079ee <HAL_DMA_Abort+0x32a>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a58      	ldr	r2, [pc, #352]	@ (8007b40 <HAL_DMA_Abort+0x47c>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d004      	beq.n	80079ee <HAL_DMA_Abort+0x32a>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a56      	ldr	r2, [pc, #344]	@ (8007b44 <HAL_DMA_Abort+0x480>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d108      	bne.n	8007a00 <HAL_DMA_Abort+0x33c>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 0201 	bic.w	r2, r2, #1
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	e007      	b.n	8007a10 <HAL_DMA_Abort+0x34c>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 0201 	bic.w	r2, r2, #1
 8007a0e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007a10:	e013      	b.n	8007a3a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a12:	f7ff f91d 	bl	8006c50 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	2b05      	cmp	r3, #5
 8007a1e:	d90c      	bls.n	8007a3a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2220      	movs	r2, #32
 8007a24:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2203      	movs	r2, #3
 8007a2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e12d      	b.n	8007c96 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1e5      	bne.n	8007a12 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a2f      	ldr	r2, [pc, #188]	@ (8007b08 <HAL_DMA_Abort+0x444>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d04a      	beq.n	8007ae6 <HAL_DMA_Abort+0x422>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a2d      	ldr	r2, [pc, #180]	@ (8007b0c <HAL_DMA_Abort+0x448>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d045      	beq.n	8007ae6 <HAL_DMA_Abort+0x422>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8007b10 <HAL_DMA_Abort+0x44c>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d040      	beq.n	8007ae6 <HAL_DMA_Abort+0x422>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a2a      	ldr	r2, [pc, #168]	@ (8007b14 <HAL_DMA_Abort+0x450>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d03b      	beq.n	8007ae6 <HAL_DMA_Abort+0x422>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a29      	ldr	r2, [pc, #164]	@ (8007b18 <HAL_DMA_Abort+0x454>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d036      	beq.n	8007ae6 <HAL_DMA_Abort+0x422>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a27      	ldr	r2, [pc, #156]	@ (8007b1c <HAL_DMA_Abort+0x458>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d031      	beq.n	8007ae6 <HAL_DMA_Abort+0x422>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a26      	ldr	r2, [pc, #152]	@ (8007b20 <HAL_DMA_Abort+0x45c>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d02c      	beq.n	8007ae6 <HAL_DMA_Abort+0x422>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a24      	ldr	r2, [pc, #144]	@ (8007b24 <HAL_DMA_Abort+0x460>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d027      	beq.n	8007ae6 <HAL_DMA_Abort+0x422>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a23      	ldr	r2, [pc, #140]	@ (8007b28 <HAL_DMA_Abort+0x464>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d022      	beq.n	8007ae6 <HAL_DMA_Abort+0x422>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a21      	ldr	r2, [pc, #132]	@ (8007b2c <HAL_DMA_Abort+0x468>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d01d      	beq.n	8007ae6 <HAL_DMA_Abort+0x422>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a20      	ldr	r2, [pc, #128]	@ (8007b30 <HAL_DMA_Abort+0x46c>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d018      	beq.n	8007ae6 <HAL_DMA_Abort+0x422>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a1e      	ldr	r2, [pc, #120]	@ (8007b34 <HAL_DMA_Abort+0x470>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d013      	beq.n	8007ae6 <HAL_DMA_Abort+0x422>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8007b38 <HAL_DMA_Abort+0x474>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d00e      	beq.n	8007ae6 <HAL_DMA_Abort+0x422>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a1b      	ldr	r2, [pc, #108]	@ (8007b3c <HAL_DMA_Abort+0x478>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d009      	beq.n	8007ae6 <HAL_DMA_Abort+0x422>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8007b40 <HAL_DMA_Abort+0x47c>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d004      	beq.n	8007ae6 <HAL_DMA_Abort+0x422>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a18      	ldr	r2, [pc, #96]	@ (8007b44 <HAL_DMA_Abort+0x480>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d101      	bne.n	8007aea <HAL_DMA_Abort+0x426>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e000      	b.n	8007aec <HAL_DMA_Abort+0x428>
 8007aea:	2300      	movs	r3, #0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d02b      	beq.n	8007b48 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007af4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007afa:	f003 031f 	and.w	r3, r3, #31
 8007afe:	223f      	movs	r2, #63	@ 0x3f
 8007b00:	409a      	lsls	r2, r3
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	609a      	str	r2, [r3, #8]
 8007b06:	e02a      	b.n	8007b5e <HAL_DMA_Abort+0x49a>
 8007b08:	40020010 	.word	0x40020010
 8007b0c:	40020028 	.word	0x40020028
 8007b10:	40020040 	.word	0x40020040
 8007b14:	40020058 	.word	0x40020058
 8007b18:	40020070 	.word	0x40020070
 8007b1c:	40020088 	.word	0x40020088
 8007b20:	400200a0 	.word	0x400200a0
 8007b24:	400200b8 	.word	0x400200b8
 8007b28:	40020410 	.word	0x40020410
 8007b2c:	40020428 	.word	0x40020428
 8007b30:	40020440 	.word	0x40020440
 8007b34:	40020458 	.word	0x40020458
 8007b38:	40020470 	.word	0x40020470
 8007b3c:	40020488 	.word	0x40020488
 8007b40:	400204a0 	.word	0x400204a0
 8007b44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b4c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b52:	f003 031f 	and.w	r3, r3, #31
 8007b56:	2201      	movs	r2, #1
 8007b58:	409a      	lsls	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a4f      	ldr	r2, [pc, #316]	@ (8007ca0 <HAL_DMA_Abort+0x5dc>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d072      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a4d      	ldr	r2, [pc, #308]	@ (8007ca4 <HAL_DMA_Abort+0x5e0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d06d      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a4c      	ldr	r2, [pc, #304]	@ (8007ca8 <HAL_DMA_Abort+0x5e4>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d068      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a4a      	ldr	r2, [pc, #296]	@ (8007cac <HAL_DMA_Abort+0x5e8>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d063      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a49      	ldr	r2, [pc, #292]	@ (8007cb0 <HAL_DMA_Abort+0x5ec>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d05e      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a47      	ldr	r2, [pc, #284]	@ (8007cb4 <HAL_DMA_Abort+0x5f0>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d059      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a46      	ldr	r2, [pc, #280]	@ (8007cb8 <HAL_DMA_Abort+0x5f4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d054      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a44      	ldr	r2, [pc, #272]	@ (8007cbc <HAL_DMA_Abort+0x5f8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d04f      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a43      	ldr	r2, [pc, #268]	@ (8007cc0 <HAL_DMA_Abort+0x5fc>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d04a      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a41      	ldr	r2, [pc, #260]	@ (8007cc4 <HAL_DMA_Abort+0x600>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d045      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a40      	ldr	r2, [pc, #256]	@ (8007cc8 <HAL_DMA_Abort+0x604>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d040      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a3e      	ldr	r2, [pc, #248]	@ (8007ccc <HAL_DMA_Abort+0x608>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d03b      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a3d      	ldr	r2, [pc, #244]	@ (8007cd0 <HAL_DMA_Abort+0x60c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d036      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a3b      	ldr	r2, [pc, #236]	@ (8007cd4 <HAL_DMA_Abort+0x610>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d031      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a3a      	ldr	r2, [pc, #232]	@ (8007cd8 <HAL_DMA_Abort+0x614>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d02c      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a38      	ldr	r2, [pc, #224]	@ (8007cdc <HAL_DMA_Abort+0x618>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d027      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a37      	ldr	r2, [pc, #220]	@ (8007ce0 <HAL_DMA_Abort+0x61c>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d022      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a35      	ldr	r2, [pc, #212]	@ (8007ce4 <HAL_DMA_Abort+0x620>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d01d      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a34      	ldr	r2, [pc, #208]	@ (8007ce8 <HAL_DMA_Abort+0x624>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d018      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a32      	ldr	r2, [pc, #200]	@ (8007cec <HAL_DMA_Abort+0x628>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d013      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a31      	ldr	r2, [pc, #196]	@ (8007cf0 <HAL_DMA_Abort+0x62c>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d00e      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a2f      	ldr	r2, [pc, #188]	@ (8007cf4 <HAL_DMA_Abort+0x630>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d009      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a2e      	ldr	r2, [pc, #184]	@ (8007cf8 <HAL_DMA_Abort+0x634>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d004      	beq.n	8007c4e <HAL_DMA_Abort+0x58a>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a2c      	ldr	r2, [pc, #176]	@ (8007cfc <HAL_DMA_Abort+0x638>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d101      	bne.n	8007c52 <HAL_DMA_Abort+0x58e>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e000      	b.n	8007c54 <HAL_DMA_Abort+0x590>
 8007c52:	2300      	movs	r3, #0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d015      	beq.n	8007c84 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007c60:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00c      	beq.n	8007c84 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c78:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007c82:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3718      	adds	r7, #24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	40020010 	.word	0x40020010
 8007ca4:	40020028 	.word	0x40020028
 8007ca8:	40020040 	.word	0x40020040
 8007cac:	40020058 	.word	0x40020058
 8007cb0:	40020070 	.word	0x40020070
 8007cb4:	40020088 	.word	0x40020088
 8007cb8:	400200a0 	.word	0x400200a0
 8007cbc:	400200b8 	.word	0x400200b8
 8007cc0:	40020410 	.word	0x40020410
 8007cc4:	40020428 	.word	0x40020428
 8007cc8:	40020440 	.word	0x40020440
 8007ccc:	40020458 	.word	0x40020458
 8007cd0:	40020470 	.word	0x40020470
 8007cd4:	40020488 	.word	0x40020488
 8007cd8:	400204a0 	.word	0x400204a0
 8007cdc:	400204b8 	.word	0x400204b8
 8007ce0:	58025408 	.word	0x58025408
 8007ce4:	5802541c 	.word	0x5802541c
 8007ce8:	58025430 	.word	0x58025430
 8007cec:	58025444 	.word	0x58025444
 8007cf0:	58025458 	.word	0x58025458
 8007cf4:	5802546c 	.word	0x5802546c
 8007cf8:	58025480 	.word	0x58025480
 8007cfc:	58025494 	.word	0x58025494

08007d00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a42      	ldr	r2, [pc, #264]	@ (8007e18 <DMA_CalcBaseAndBitshift+0x118>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d04a      	beq.n	8007da8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a41      	ldr	r2, [pc, #260]	@ (8007e1c <DMA_CalcBaseAndBitshift+0x11c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d045      	beq.n	8007da8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a3f      	ldr	r2, [pc, #252]	@ (8007e20 <DMA_CalcBaseAndBitshift+0x120>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d040      	beq.n	8007da8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a3e      	ldr	r2, [pc, #248]	@ (8007e24 <DMA_CalcBaseAndBitshift+0x124>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d03b      	beq.n	8007da8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a3c      	ldr	r2, [pc, #240]	@ (8007e28 <DMA_CalcBaseAndBitshift+0x128>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d036      	beq.n	8007da8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a3b      	ldr	r2, [pc, #236]	@ (8007e2c <DMA_CalcBaseAndBitshift+0x12c>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d031      	beq.n	8007da8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a39      	ldr	r2, [pc, #228]	@ (8007e30 <DMA_CalcBaseAndBitshift+0x130>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d02c      	beq.n	8007da8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a38      	ldr	r2, [pc, #224]	@ (8007e34 <DMA_CalcBaseAndBitshift+0x134>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d027      	beq.n	8007da8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a36      	ldr	r2, [pc, #216]	@ (8007e38 <DMA_CalcBaseAndBitshift+0x138>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d022      	beq.n	8007da8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a35      	ldr	r2, [pc, #212]	@ (8007e3c <DMA_CalcBaseAndBitshift+0x13c>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d01d      	beq.n	8007da8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a33      	ldr	r2, [pc, #204]	@ (8007e40 <DMA_CalcBaseAndBitshift+0x140>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d018      	beq.n	8007da8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a32      	ldr	r2, [pc, #200]	@ (8007e44 <DMA_CalcBaseAndBitshift+0x144>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d013      	beq.n	8007da8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a30      	ldr	r2, [pc, #192]	@ (8007e48 <DMA_CalcBaseAndBitshift+0x148>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d00e      	beq.n	8007da8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a2f      	ldr	r2, [pc, #188]	@ (8007e4c <DMA_CalcBaseAndBitshift+0x14c>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d009      	beq.n	8007da8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a2d      	ldr	r2, [pc, #180]	@ (8007e50 <DMA_CalcBaseAndBitshift+0x150>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d004      	beq.n	8007da8 <DMA_CalcBaseAndBitshift+0xa8>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a2c      	ldr	r2, [pc, #176]	@ (8007e54 <DMA_CalcBaseAndBitshift+0x154>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d101      	bne.n	8007dac <DMA_CalcBaseAndBitshift+0xac>
 8007da8:	2301      	movs	r3, #1
 8007daa:	e000      	b.n	8007dae <DMA_CalcBaseAndBitshift+0xae>
 8007dac:	2300      	movs	r3, #0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d024      	beq.n	8007dfc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	3b10      	subs	r3, #16
 8007dba:	4a27      	ldr	r2, [pc, #156]	@ (8007e58 <DMA_CalcBaseAndBitshift+0x158>)
 8007dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc0:	091b      	lsrs	r3, r3, #4
 8007dc2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f003 0307 	and.w	r3, r3, #7
 8007dca:	4a24      	ldr	r2, [pc, #144]	@ (8007e5c <DMA_CalcBaseAndBitshift+0x15c>)
 8007dcc:	5cd3      	ldrb	r3, [r2, r3]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	d908      	bls.n	8007dec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	4b1f      	ldr	r3, [pc, #124]	@ (8007e60 <DMA_CalcBaseAndBitshift+0x160>)
 8007de2:	4013      	ands	r3, r2
 8007de4:	1d1a      	adds	r2, r3, #4
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	659a      	str	r2, [r3, #88]	@ 0x58
 8007dea:	e00d      	b.n	8007e08 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	461a      	mov	r2, r3
 8007df2:	4b1b      	ldr	r3, [pc, #108]	@ (8007e60 <DMA_CalcBaseAndBitshift+0x160>)
 8007df4:	4013      	ands	r3, r2
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007dfa:	e005      	b.n	8007e08 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	40020010 	.word	0x40020010
 8007e1c:	40020028 	.word	0x40020028
 8007e20:	40020040 	.word	0x40020040
 8007e24:	40020058 	.word	0x40020058
 8007e28:	40020070 	.word	0x40020070
 8007e2c:	40020088 	.word	0x40020088
 8007e30:	400200a0 	.word	0x400200a0
 8007e34:	400200b8 	.word	0x400200b8
 8007e38:	40020410 	.word	0x40020410
 8007e3c:	40020428 	.word	0x40020428
 8007e40:	40020440 	.word	0x40020440
 8007e44:	40020458 	.word	0x40020458
 8007e48:	40020470 	.word	0x40020470
 8007e4c:	40020488 	.word	0x40020488
 8007e50:	400204a0 	.word	0x400204a0
 8007e54:	400204b8 	.word	0x400204b8
 8007e58:	aaaaaaab 	.word	0xaaaaaaab
 8007e5c:	080147e4 	.word	0x080147e4
 8007e60:	fffffc00 	.word	0xfffffc00

08007e64 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d120      	bne.n	8007eba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e7c:	2b03      	cmp	r3, #3
 8007e7e:	d858      	bhi.n	8007f32 <DMA_CheckFifoParam+0xce>
 8007e80:	a201      	add	r2, pc, #4	@ (adr r2, 8007e88 <DMA_CheckFifoParam+0x24>)
 8007e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e86:	bf00      	nop
 8007e88:	08007e99 	.word	0x08007e99
 8007e8c:	08007eab 	.word	0x08007eab
 8007e90:	08007e99 	.word	0x08007e99
 8007e94:	08007f33 	.word	0x08007f33
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d048      	beq.n	8007f36 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ea8:	e045      	b.n	8007f36 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007eb2:	d142      	bne.n	8007f3a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007eb8:	e03f      	b.n	8007f3a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ec2:	d123      	bne.n	8007f0c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec8:	2b03      	cmp	r3, #3
 8007eca:	d838      	bhi.n	8007f3e <DMA_CheckFifoParam+0xda>
 8007ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ed4 <DMA_CheckFifoParam+0x70>)
 8007ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed2:	bf00      	nop
 8007ed4:	08007ee5 	.word	0x08007ee5
 8007ed8:	08007eeb 	.word	0x08007eeb
 8007edc:	08007ee5 	.word	0x08007ee5
 8007ee0:	08007efd 	.word	0x08007efd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	73fb      	strb	r3, [r7, #15]
        break;
 8007ee8:	e030      	b.n	8007f4c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d025      	beq.n	8007f42 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007efa:	e022      	b.n	8007f42 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f00:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007f04:	d11f      	bne.n	8007f46 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f0a:	e01c      	b.n	8007f46 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d902      	bls.n	8007f1a <DMA_CheckFifoParam+0xb6>
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	d003      	beq.n	8007f20 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007f18:	e018      	b.n	8007f4c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	73fb      	strb	r3, [r7, #15]
        break;
 8007f1e:	e015      	b.n	8007f4c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00e      	beq.n	8007f4a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f30:	e00b      	b.n	8007f4a <DMA_CheckFifoParam+0xe6>
        break;
 8007f32:	bf00      	nop
 8007f34:	e00a      	b.n	8007f4c <DMA_CheckFifoParam+0xe8>
        break;
 8007f36:	bf00      	nop
 8007f38:	e008      	b.n	8007f4c <DMA_CheckFifoParam+0xe8>
        break;
 8007f3a:	bf00      	nop
 8007f3c:	e006      	b.n	8007f4c <DMA_CheckFifoParam+0xe8>
        break;
 8007f3e:	bf00      	nop
 8007f40:	e004      	b.n	8007f4c <DMA_CheckFifoParam+0xe8>
        break;
 8007f42:	bf00      	nop
 8007f44:	e002      	b.n	8007f4c <DMA_CheckFifoParam+0xe8>
        break;
 8007f46:	bf00      	nop
 8007f48:	e000      	b.n	8007f4c <DMA_CheckFifoParam+0xe8>
    break;
 8007f4a:	bf00      	nop
    }
  }

  return status;
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop

08007f5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a38      	ldr	r2, [pc, #224]	@ (8008050 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d022      	beq.n	8007fba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a36      	ldr	r2, [pc, #216]	@ (8008054 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d01d      	beq.n	8007fba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a35      	ldr	r2, [pc, #212]	@ (8008058 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d018      	beq.n	8007fba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a33      	ldr	r2, [pc, #204]	@ (800805c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d013      	beq.n	8007fba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a32      	ldr	r2, [pc, #200]	@ (8008060 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d00e      	beq.n	8007fba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a30      	ldr	r2, [pc, #192]	@ (8008064 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d009      	beq.n	8007fba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a2f      	ldr	r2, [pc, #188]	@ (8008068 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d004      	beq.n	8007fba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a2d      	ldr	r2, [pc, #180]	@ (800806c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d101      	bne.n	8007fbe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e000      	b.n	8007fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d01a      	beq.n	8007ffa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	3b08      	subs	r3, #8
 8007fcc:	4a28      	ldr	r2, [pc, #160]	@ (8008070 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007fce:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd2:	091b      	lsrs	r3, r3, #4
 8007fd4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	4b26      	ldr	r3, [pc, #152]	@ (8008074 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007fda:	4413      	add	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	461a      	mov	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a24      	ldr	r2, [pc, #144]	@ (8008078 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007fe8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f003 031f 	and.w	r3, r3, #31
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	409a      	lsls	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007ff8:	e024      	b.n	8008044 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	3b10      	subs	r3, #16
 8008002:	4a1e      	ldr	r2, [pc, #120]	@ (800807c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008004:	fba2 2303 	umull	r2, r3, r2, r3
 8008008:	091b      	lsrs	r3, r3, #4
 800800a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	4a1c      	ldr	r2, [pc, #112]	@ (8008080 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d806      	bhi.n	8008022 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	4a1b      	ldr	r2, [pc, #108]	@ (8008084 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d902      	bls.n	8008022 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3308      	adds	r3, #8
 8008020:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	4b18      	ldr	r3, [pc, #96]	@ (8008088 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008026:	4413      	add	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	461a      	mov	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a16      	ldr	r2, [pc, #88]	@ (800808c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008034:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f003 031f 	and.w	r3, r3, #31
 800803c:	2201      	movs	r2, #1
 800803e:	409a      	lsls	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008044:	bf00      	nop
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	58025408 	.word	0x58025408
 8008054:	5802541c 	.word	0x5802541c
 8008058:	58025430 	.word	0x58025430
 800805c:	58025444 	.word	0x58025444
 8008060:	58025458 	.word	0x58025458
 8008064:	5802546c 	.word	0x5802546c
 8008068:	58025480 	.word	0x58025480
 800806c:	58025494 	.word	0x58025494
 8008070:	cccccccd 	.word	0xcccccccd
 8008074:	16009600 	.word	0x16009600
 8008078:	58025880 	.word	0x58025880
 800807c:	aaaaaaab 	.word	0xaaaaaaab
 8008080:	400204b8 	.word	0x400204b8
 8008084:	4002040f 	.word	0x4002040f
 8008088:	10008200 	.word	0x10008200
 800808c:	40020880 	.word	0x40020880

08008090 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	b2db      	uxtb	r3, r3
 800809e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d04a      	beq.n	800813c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2b08      	cmp	r3, #8
 80080aa:	d847      	bhi.n	800813c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a25      	ldr	r2, [pc, #148]	@ (8008148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d022      	beq.n	80080fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a24      	ldr	r2, [pc, #144]	@ (800814c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d01d      	beq.n	80080fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a22      	ldr	r2, [pc, #136]	@ (8008150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d018      	beq.n	80080fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a21      	ldr	r2, [pc, #132]	@ (8008154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d013      	beq.n	80080fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a1f      	ldr	r2, [pc, #124]	@ (8008158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d00e      	beq.n	80080fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a1e      	ldr	r2, [pc, #120]	@ (800815c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d009      	beq.n	80080fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a1c      	ldr	r2, [pc, #112]	@ (8008160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d004      	beq.n	80080fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a1b      	ldr	r2, [pc, #108]	@ (8008164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d101      	bne.n	8008100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80080fc:	2301      	movs	r3, #1
 80080fe:	e000      	b.n	8008102 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008100:	2300      	movs	r3, #0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00a      	beq.n	800811c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	4b17      	ldr	r3, [pc, #92]	@ (8008168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800810a:	4413      	add	r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	461a      	mov	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a15      	ldr	r2, [pc, #84]	@ (800816c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008118:	671a      	str	r2, [r3, #112]	@ 0x70
 800811a:	e009      	b.n	8008130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	4b14      	ldr	r3, [pc, #80]	@ (8008170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008120:	4413      	add	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	461a      	mov	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a11      	ldr	r2, [pc, #68]	@ (8008174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800812e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	3b01      	subs	r3, #1
 8008134:	2201      	movs	r2, #1
 8008136:	409a      	lsls	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800813c:	bf00      	nop
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	58025408 	.word	0x58025408
 800814c:	5802541c 	.word	0x5802541c
 8008150:	58025430 	.word	0x58025430
 8008154:	58025444 	.word	0x58025444
 8008158:	58025458 	.word	0x58025458
 800815c:	5802546c 	.word	0x5802546c
 8008160:	58025480 	.word	0x58025480
 8008164:	58025494 	.word	0x58025494
 8008168:	1600963f 	.word	0x1600963f
 800816c:	58025940 	.word	0x58025940
 8008170:	1000823f 	.word	0x1000823f
 8008174:	40020940 	.word	0x40020940

08008178 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	2b80      	cmp	r3, #128	@ 0x80
 8008190:	d105      	bne.n	800819e <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008198:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e315      	b.n	80087ca <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d101      	bne.n	80081ac <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80081a8:	2302      	movs	r3, #2
 80081aa:	e30e      	b.n	80087ca <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b01      	cmp	r3, #1
 80081be:	f040 82fd 	bne.w	80087bc <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2202      	movs	r2, #2
 80081c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a82      	ldr	r2, [pc, #520]	@ (80083e0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d04a      	beq.n	8008270 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a81      	ldr	r2, [pc, #516]	@ (80083e4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d045      	beq.n	8008270 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a7f      	ldr	r2, [pc, #508]	@ (80083e8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d040      	beq.n	8008270 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a7e      	ldr	r2, [pc, #504]	@ (80083ec <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d03b      	beq.n	8008270 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a7c      	ldr	r2, [pc, #496]	@ (80083f0 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d036      	beq.n	8008270 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a7b      	ldr	r2, [pc, #492]	@ (80083f4 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d031      	beq.n	8008270 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a79      	ldr	r2, [pc, #484]	@ (80083f8 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d02c      	beq.n	8008270 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a78      	ldr	r2, [pc, #480]	@ (80083fc <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d027      	beq.n	8008270 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a76      	ldr	r2, [pc, #472]	@ (8008400 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d022      	beq.n	8008270 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a75      	ldr	r2, [pc, #468]	@ (8008404 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d01d      	beq.n	8008270 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a73      	ldr	r2, [pc, #460]	@ (8008408 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d018      	beq.n	8008270 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a72      	ldr	r2, [pc, #456]	@ (800840c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d013      	beq.n	8008270 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a70      	ldr	r2, [pc, #448]	@ (8008410 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d00e      	beq.n	8008270 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a6f      	ldr	r2, [pc, #444]	@ (8008414 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d009      	beq.n	8008270 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a6d      	ldr	r2, [pc, #436]	@ (8008418 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d004      	beq.n	8008270 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a6c      	ldr	r2, [pc, #432]	@ (800841c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d101      	bne.n	8008274 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8008270:	2301      	movs	r3, #1
 8008272:	e000      	b.n	8008276 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8008274:	2300      	movs	r3, #0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d018      	beq.n	80082ac <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008288:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008296:	3308      	adds	r3, #8
 8008298:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800829e:	f003 031f 	and.w	r3, r3, #31
 80082a2:	223f      	movs	r2, #63	@ 0x3f
 80082a4:	409a      	lsls	r2, r3
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	e018      	b.n	80082de <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	6819      	ldr	r1, [r3, #0]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	f248 0320 	movw	r3, #32800	@ 0x8020
 80082ba:	430b      	orrs	r3, r1
 80082bc:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082ca:	3304      	adds	r3, #4
 80082cc:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082d2:	f003 031f 	and.w	r3, r3, #31
 80082d6:	2201      	movs	r2, #1
 80082d8:	409a      	lsls	r2, r3
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80082de:	6a3b      	ldr	r3, [r7, #32]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	68b9      	ldr	r1, [r7, #8]
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 faa5 	bl	8008834 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a3c      	ldr	r2, [pc, #240]	@ (80083e0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d072      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a3a      	ldr	r2, [pc, #232]	@ (80083e4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d06d      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a39      	ldr	r2, [pc, #228]	@ (80083e8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d068      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a37      	ldr	r2, [pc, #220]	@ (80083ec <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d063      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a36      	ldr	r2, [pc, #216]	@ (80083f0 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d05e      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a34      	ldr	r2, [pc, #208]	@ (80083f4 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d059      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a33      	ldr	r2, [pc, #204]	@ (80083f8 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d054      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a31      	ldr	r2, [pc, #196]	@ (80083fc <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d04f      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a30      	ldr	r2, [pc, #192]	@ (8008400 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d04a      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a2e      	ldr	r2, [pc, #184]	@ (8008404 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d045      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a2d      	ldr	r2, [pc, #180]	@ (8008408 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d040      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a2b      	ldr	r2, [pc, #172]	@ (800840c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d03b      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a2a      	ldr	r2, [pc, #168]	@ (8008410 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d036      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a28      	ldr	r2, [pc, #160]	@ (8008414 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d031      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a27      	ldr	r2, [pc, #156]	@ (8008418 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d02c      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a25      	ldr	r2, [pc, #148]	@ (800841c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d027      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a24      	ldr	r2, [pc, #144]	@ (8008420 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d022      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a22      	ldr	r2, [pc, #136]	@ (8008424 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d01d      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a21      	ldr	r2, [pc, #132]	@ (8008428 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d018      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a1f      	ldr	r2, [pc, #124]	@ (800842c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d013      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a1e      	ldr	r2, [pc, #120]	@ (8008430 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d00e      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a1c      	ldr	r2, [pc, #112]	@ (8008434 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d009      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a1b      	ldr	r2, [pc, #108]	@ (8008438 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d004      	beq.n	80083da <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a19      	ldr	r2, [pc, #100]	@ (800843c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d132      	bne.n	8008440 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80083da:	2301      	movs	r3, #1
 80083dc:	e031      	b.n	8008442 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80083de:	bf00      	nop
 80083e0:	40020010 	.word	0x40020010
 80083e4:	40020028 	.word	0x40020028
 80083e8:	40020040 	.word	0x40020040
 80083ec:	40020058 	.word	0x40020058
 80083f0:	40020070 	.word	0x40020070
 80083f4:	40020088 	.word	0x40020088
 80083f8:	400200a0 	.word	0x400200a0
 80083fc:	400200b8 	.word	0x400200b8
 8008400:	40020410 	.word	0x40020410
 8008404:	40020428 	.word	0x40020428
 8008408:	40020440 	.word	0x40020440
 800840c:	40020458 	.word	0x40020458
 8008410:	40020470 	.word	0x40020470
 8008414:	40020488 	.word	0x40020488
 8008418:	400204a0 	.word	0x400204a0
 800841c:	400204b8 	.word	0x400204b8
 8008420:	58025408 	.word	0x58025408
 8008424:	5802541c 	.word	0x5802541c
 8008428:	58025430 	.word	0x58025430
 800842c:	58025444 	.word	0x58025444
 8008430:	58025458 	.word	0x58025458
 8008434:	5802546c 	.word	0x5802546c
 8008438:	58025480 	.word	0x58025480
 800843c:	58025494 	.word	0x58025494
 8008440:	2300      	movs	r3, #0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00d      	beq.n	8008462 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800844e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008454:	2b00      	cmp	r3, #0
 8008456:	d004      	beq.n	8008462 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008460:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a3b      	ldr	r2, [pc, #236]	@ (8008554 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d04a      	beq.n	8008502 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a39      	ldr	r2, [pc, #228]	@ (8008558 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d045      	beq.n	8008502 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a38      	ldr	r2, [pc, #224]	@ (800855c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d040      	beq.n	8008502 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a36      	ldr	r2, [pc, #216]	@ (8008560 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d03b      	beq.n	8008502 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a35      	ldr	r2, [pc, #212]	@ (8008564 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d036      	beq.n	8008502 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a33      	ldr	r2, [pc, #204]	@ (8008568 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d031      	beq.n	8008502 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a32      	ldr	r2, [pc, #200]	@ (800856c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d02c      	beq.n	8008502 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a30      	ldr	r2, [pc, #192]	@ (8008570 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d027      	beq.n	8008502 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a2f      	ldr	r2, [pc, #188]	@ (8008574 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d022      	beq.n	8008502 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008578 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d01d      	beq.n	8008502 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a2c      	ldr	r2, [pc, #176]	@ (800857c <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d018      	beq.n	8008502 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a2a      	ldr	r2, [pc, #168]	@ (8008580 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d013      	beq.n	8008502 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a29      	ldr	r2, [pc, #164]	@ (8008584 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d00e      	beq.n	8008502 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a27      	ldr	r2, [pc, #156]	@ (8008588 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d009      	beq.n	8008502 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a26      	ldr	r2, [pc, #152]	@ (800858c <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d004      	beq.n	8008502 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a24      	ldr	r2, [pc, #144]	@ (8008590 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d101      	bne.n	8008506 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8008502:	2301      	movs	r3, #1
 8008504:	e000      	b.n	8008508 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8008506:	2300      	movs	r3, #0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d043      	beq.n	8008594 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f023 021e 	bic.w	r2, r3, #30
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f042 0216 	orr.w	r2, r2, #22
 800851e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	695a      	ldr	r2, [r3, #20]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800852e:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008534:	2b00      	cmp	r3, #0
 8008536:	d103      	bne.n	8008540 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800853c:	2b00      	cmp	r3, #0
 800853e:	d043      	beq.n	80085c8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f042 0208 	orr.w	r2, r2, #8
 800854e:	601a      	str	r2, [r3, #0]
 8008550:	e03a      	b.n	80085c8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8008552:	bf00      	nop
 8008554:	40020010 	.word	0x40020010
 8008558:	40020028 	.word	0x40020028
 800855c:	40020040 	.word	0x40020040
 8008560:	40020058 	.word	0x40020058
 8008564:	40020070 	.word	0x40020070
 8008568:	40020088 	.word	0x40020088
 800856c:	400200a0 	.word	0x400200a0
 8008570:	400200b8 	.word	0x400200b8
 8008574:	40020410 	.word	0x40020410
 8008578:	40020428 	.word	0x40020428
 800857c:	40020440 	.word	0x40020440
 8008580:	40020458 	.word	0x40020458
 8008584:	40020470 	.word	0x40020470
 8008588:	40020488 	.word	0x40020488
 800858c:	400204a0 	.word	0x400204a0
 8008590:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f023 020e 	bic.w	r2, r3, #14
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f042 020a 	orr.w	r2, r2, #10
 80085a6:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d103      	bne.n	80085b8 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d007      	beq.n	80085c8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f042 0204 	orr.w	r2, r2, #4
 80085c6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a81      	ldr	r2, [pc, #516]	@ (80087d4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d072      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a80      	ldr	r2, [pc, #512]	@ (80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d06d      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a7e      	ldr	r2, [pc, #504]	@ (80087dc <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d068      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a7d      	ldr	r2, [pc, #500]	@ (80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d063      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a7b      	ldr	r2, [pc, #492]	@ (80087e4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d05e      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a7a      	ldr	r2, [pc, #488]	@ (80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d059      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a78      	ldr	r2, [pc, #480]	@ (80087ec <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d054      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a77      	ldr	r2, [pc, #476]	@ (80087f0 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d04f      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a75      	ldr	r2, [pc, #468]	@ (80087f4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d04a      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a74      	ldr	r2, [pc, #464]	@ (80087f8 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d045      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a72      	ldr	r2, [pc, #456]	@ (80087fc <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d040      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a71      	ldr	r2, [pc, #452]	@ (8008800 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d03b      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a6f      	ldr	r2, [pc, #444]	@ (8008804 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d036      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a6e      	ldr	r2, [pc, #440]	@ (8008808 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d031      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a6c      	ldr	r2, [pc, #432]	@ (800880c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d02c      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a6b      	ldr	r2, [pc, #428]	@ (8008810 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d027      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a69      	ldr	r2, [pc, #420]	@ (8008814 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d022      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a68      	ldr	r2, [pc, #416]	@ (8008818 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d01d      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a66      	ldr	r2, [pc, #408]	@ (800881c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d018      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a65      	ldr	r2, [pc, #404]	@ (8008820 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d013      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a63      	ldr	r2, [pc, #396]	@ (8008824 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d00e      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a62      	ldr	r2, [pc, #392]	@ (8008828 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d009      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a60      	ldr	r2, [pc, #384]	@ (800882c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d004      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a5f      	ldr	r2, [pc, #380]	@ (8008830 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d101      	bne.n	80086bc <HAL_DMAEx_MultiBufferStart_IT+0x544>
 80086b8:	2301      	movs	r3, #1
 80086ba:	e000      	b.n	80086be <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80086bc:	2300      	movs	r3, #0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d01a      	beq.n	80086f8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d007      	beq.n	80086e0 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086de:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d007      	beq.n	80086f8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086f6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a35      	ldr	r2, [pc, #212]	@ (80087d4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d04a      	beq.n	8008798 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a34      	ldr	r2, [pc, #208]	@ (80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d045      	beq.n	8008798 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a32      	ldr	r2, [pc, #200]	@ (80087dc <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d040      	beq.n	8008798 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a31      	ldr	r2, [pc, #196]	@ (80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d03b      	beq.n	8008798 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a2f      	ldr	r2, [pc, #188]	@ (80087e4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d036      	beq.n	8008798 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a2e      	ldr	r2, [pc, #184]	@ (80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d031      	beq.n	8008798 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a2c      	ldr	r2, [pc, #176]	@ (80087ec <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d02c      	beq.n	8008798 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a2b      	ldr	r2, [pc, #172]	@ (80087f0 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d027      	beq.n	8008798 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a29      	ldr	r2, [pc, #164]	@ (80087f4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d022      	beq.n	8008798 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a28      	ldr	r2, [pc, #160]	@ (80087f8 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d01d      	beq.n	8008798 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a26      	ldr	r2, [pc, #152]	@ (80087fc <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d018      	beq.n	8008798 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a25      	ldr	r2, [pc, #148]	@ (8008800 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d013      	beq.n	8008798 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a23      	ldr	r2, [pc, #140]	@ (8008804 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d00e      	beq.n	8008798 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a22      	ldr	r2, [pc, #136]	@ (8008808 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d009      	beq.n	8008798 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a20      	ldr	r2, [pc, #128]	@ (800880c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d004      	beq.n	8008798 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a1f      	ldr	r2, [pc, #124]	@ (8008810 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d108      	bne.n	80087aa <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f042 0201 	orr.w	r2, r2, #1
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	e00e      	b.n	80087c8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f042 0201 	orr.w	r2, r2, #1
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	e005      	b.n	80087c8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80087c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80087c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3718      	adds	r7, #24
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	40020010 	.word	0x40020010
 80087d8:	40020028 	.word	0x40020028
 80087dc:	40020040 	.word	0x40020040
 80087e0:	40020058 	.word	0x40020058
 80087e4:	40020070 	.word	0x40020070
 80087e8:	40020088 	.word	0x40020088
 80087ec:	400200a0 	.word	0x400200a0
 80087f0:	400200b8 	.word	0x400200b8
 80087f4:	40020410 	.word	0x40020410
 80087f8:	40020428 	.word	0x40020428
 80087fc:	40020440 	.word	0x40020440
 8008800:	40020458 	.word	0x40020458
 8008804:	40020470 	.word	0x40020470
 8008808:	40020488 	.word	0x40020488
 800880c:	400204a0 	.word	0x400204a0
 8008810:	400204b8 	.word	0x400204b8
 8008814:	58025408 	.word	0x58025408
 8008818:	5802541c 	.word	0x5802541c
 800881c:	58025430 	.word	0x58025430
 8008820:	58025444 	.word	0x58025444
 8008824:	58025458 	.word	0x58025458
 8008828:	5802546c 	.word	0x5802546c
 800882c:	58025480 	.word	0x58025480
 8008830:	58025494 	.word	0x58025494

08008834 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
 8008840:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a46      	ldr	r2, [pc, #280]	@ (8008960 <DMA_MultiBufferSetConfig+0x12c>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d04a      	beq.n	80088e2 <DMA_MultiBufferSetConfig+0xae>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a44      	ldr	r2, [pc, #272]	@ (8008964 <DMA_MultiBufferSetConfig+0x130>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d045      	beq.n	80088e2 <DMA_MultiBufferSetConfig+0xae>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a43      	ldr	r2, [pc, #268]	@ (8008968 <DMA_MultiBufferSetConfig+0x134>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d040      	beq.n	80088e2 <DMA_MultiBufferSetConfig+0xae>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a41      	ldr	r2, [pc, #260]	@ (800896c <DMA_MultiBufferSetConfig+0x138>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d03b      	beq.n	80088e2 <DMA_MultiBufferSetConfig+0xae>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a40      	ldr	r2, [pc, #256]	@ (8008970 <DMA_MultiBufferSetConfig+0x13c>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d036      	beq.n	80088e2 <DMA_MultiBufferSetConfig+0xae>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a3e      	ldr	r2, [pc, #248]	@ (8008974 <DMA_MultiBufferSetConfig+0x140>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d031      	beq.n	80088e2 <DMA_MultiBufferSetConfig+0xae>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a3d      	ldr	r2, [pc, #244]	@ (8008978 <DMA_MultiBufferSetConfig+0x144>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d02c      	beq.n	80088e2 <DMA_MultiBufferSetConfig+0xae>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a3b      	ldr	r2, [pc, #236]	@ (800897c <DMA_MultiBufferSetConfig+0x148>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d027      	beq.n	80088e2 <DMA_MultiBufferSetConfig+0xae>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a3a      	ldr	r2, [pc, #232]	@ (8008980 <DMA_MultiBufferSetConfig+0x14c>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d022      	beq.n	80088e2 <DMA_MultiBufferSetConfig+0xae>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a38      	ldr	r2, [pc, #224]	@ (8008984 <DMA_MultiBufferSetConfig+0x150>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d01d      	beq.n	80088e2 <DMA_MultiBufferSetConfig+0xae>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a37      	ldr	r2, [pc, #220]	@ (8008988 <DMA_MultiBufferSetConfig+0x154>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d018      	beq.n	80088e2 <DMA_MultiBufferSetConfig+0xae>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a35      	ldr	r2, [pc, #212]	@ (800898c <DMA_MultiBufferSetConfig+0x158>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d013      	beq.n	80088e2 <DMA_MultiBufferSetConfig+0xae>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a34      	ldr	r2, [pc, #208]	@ (8008990 <DMA_MultiBufferSetConfig+0x15c>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d00e      	beq.n	80088e2 <DMA_MultiBufferSetConfig+0xae>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a32      	ldr	r2, [pc, #200]	@ (8008994 <DMA_MultiBufferSetConfig+0x160>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d009      	beq.n	80088e2 <DMA_MultiBufferSetConfig+0xae>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a31      	ldr	r2, [pc, #196]	@ (8008998 <DMA_MultiBufferSetConfig+0x164>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d004      	beq.n	80088e2 <DMA_MultiBufferSetConfig+0xae>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a2f      	ldr	r2, [pc, #188]	@ (800899c <DMA_MultiBufferSetConfig+0x168>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d101      	bne.n	80088e6 <DMA_MultiBufferSetConfig+0xb2>
 80088e2:	2301      	movs	r3, #1
 80088e4:	e000      	b.n	80088e8 <DMA_MultiBufferSetConfig+0xb4>
 80088e6:	2300      	movs	r3, #0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d019      	beq.n	8008920 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	683a      	ldr	r2, [r7, #0]
 80088f2:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	2b40      	cmp	r3, #64	@ 0x40
 80088fa:	d108      	bne.n	800890e <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 800890c:	e021      	b.n	8008952 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	60da      	str	r2, [r3, #12]
}
 800891e:	e018      	b.n	8008952 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	2b40      	cmp	r3, #64	@ 0x40
 800892e:	d108      	bne.n	8008942 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	60da      	str	r2, [r3, #12]
}
 8008940:	e007      	b.n	8008952 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	60da      	str	r2, [r3, #12]
}
 8008952:	bf00      	nop
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	40020010 	.word	0x40020010
 8008964:	40020028 	.word	0x40020028
 8008968:	40020040 	.word	0x40020040
 800896c:	40020058 	.word	0x40020058
 8008970:	40020070 	.word	0x40020070
 8008974:	40020088 	.word	0x40020088
 8008978:	400200a0 	.word	0x400200a0
 800897c:	400200b8 	.word	0x400200b8
 8008980:	40020410 	.word	0x40020410
 8008984:	40020428 	.word	0x40020428
 8008988:	40020440 	.word	0x40020440
 800898c:	40020458 	.word	0x40020458
 8008990:	40020470 	.word	0x40020470
 8008994:	40020488 	.word	0x40020488
 8008998:	400204a0 	.word	0x400204a0
 800899c:	400204b8 	.word	0x400204b8

080089a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b089      	sub	sp, #36	@ 0x24
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80089aa:	2300      	movs	r3, #0
 80089ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80089ae:	4b89      	ldr	r3, [pc, #548]	@ (8008bd4 <HAL_GPIO_Init+0x234>)
 80089b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80089b2:	e194      	b.n	8008cde <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	2101      	movs	r1, #1
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	fa01 f303 	lsl.w	r3, r1, r3
 80089c0:	4013      	ands	r3, r2
 80089c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f000 8186 	beq.w	8008cd8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f003 0303 	and.w	r3, r3, #3
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d005      	beq.n	80089e4 <HAL_GPIO_Init+0x44>
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f003 0303 	and.w	r3, r3, #3
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d130      	bne.n	8008a46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	005b      	lsls	r3, r3, #1
 80089ee:	2203      	movs	r2, #3
 80089f0:	fa02 f303 	lsl.w	r3, r2, r3
 80089f4:	43db      	mvns	r3, r3
 80089f6:	69ba      	ldr	r2, [r7, #24]
 80089f8:	4013      	ands	r3, r2
 80089fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	fa02 f303 	lsl.w	r3, r2, r3
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a22:	43db      	mvns	r3, r3
 8008a24:	69ba      	ldr	r2, [r7, #24]
 8008a26:	4013      	ands	r3, r2
 8008a28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	091b      	lsrs	r3, r3, #4
 8008a30:	f003 0201 	and.w	r2, r3, #1
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	fa02 f303 	lsl.w	r3, r2, r3
 8008a3a:	69ba      	ldr	r2, [r7, #24]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	69ba      	ldr	r2, [r7, #24]
 8008a44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	f003 0303 	and.w	r3, r3, #3
 8008a4e:	2b03      	cmp	r3, #3
 8008a50:	d017      	beq.n	8008a82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	005b      	lsls	r3, r3, #1
 8008a5c:	2203      	movs	r2, #3
 8008a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a62:	43db      	mvns	r3, r3
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	4013      	ands	r3, r2
 8008a68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	689a      	ldr	r2, [r3, #8]
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	005b      	lsls	r3, r3, #1
 8008a72:	fa02 f303 	lsl.w	r3, r2, r3
 8008a76:	69ba      	ldr	r2, [r7, #24]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	69ba      	ldr	r2, [r7, #24]
 8008a80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f003 0303 	and.w	r3, r3, #3
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d123      	bne.n	8008ad6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	08da      	lsrs	r2, r3, #3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	3208      	adds	r2, #8
 8008a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	f003 0307 	and.w	r3, r3, #7
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	220f      	movs	r2, #15
 8008aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aaa:	43db      	mvns	r3, r3
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	4013      	ands	r3, r2
 8008ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	691a      	ldr	r2, [r3, #16]
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	f003 0307 	and.w	r3, r3, #7
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac2:	69ba      	ldr	r2, [r7, #24]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	08da      	lsrs	r2, r3, #3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	3208      	adds	r2, #8
 8008ad0:	69b9      	ldr	r1, [r7, #24]
 8008ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	005b      	lsls	r3, r3, #1
 8008ae0:	2203      	movs	r2, #3
 8008ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae6:	43db      	mvns	r3, r3
 8008ae8:	69ba      	ldr	r2, [r7, #24]
 8008aea:	4013      	ands	r3, r2
 8008aec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	f003 0203 	and.w	r2, r3, #3
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	005b      	lsls	r3, r3, #1
 8008afa:	fa02 f303 	lsl.w	r3, r2, r3
 8008afe:	69ba      	ldr	r2, [r7, #24]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	69ba      	ldr	r2, [r7, #24]
 8008b08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 80e0 	beq.w	8008cd8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b18:	4b2f      	ldr	r3, [pc, #188]	@ (8008bd8 <HAL_GPIO_Init+0x238>)
 8008b1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008b1e:	4a2e      	ldr	r2, [pc, #184]	@ (8008bd8 <HAL_GPIO_Init+0x238>)
 8008b20:	f043 0302 	orr.w	r3, r3, #2
 8008b24:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008b28:	4b2b      	ldr	r3, [pc, #172]	@ (8008bd8 <HAL_GPIO_Init+0x238>)
 8008b2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008b2e:	f003 0302 	and.w	r3, r3, #2
 8008b32:	60fb      	str	r3, [r7, #12]
 8008b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b36:	4a29      	ldr	r2, [pc, #164]	@ (8008bdc <HAL_GPIO_Init+0x23c>)
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	089b      	lsrs	r3, r3, #2
 8008b3c:	3302      	adds	r3, #2
 8008b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	f003 0303 	and.w	r3, r3, #3
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	220f      	movs	r2, #15
 8008b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b52:	43db      	mvns	r3, r3
 8008b54:	69ba      	ldr	r2, [r7, #24]
 8008b56:	4013      	ands	r3, r2
 8008b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a20      	ldr	r2, [pc, #128]	@ (8008be0 <HAL_GPIO_Init+0x240>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d052      	beq.n	8008c08 <HAL_GPIO_Init+0x268>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a1f      	ldr	r2, [pc, #124]	@ (8008be4 <HAL_GPIO_Init+0x244>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d031      	beq.n	8008bce <HAL_GPIO_Init+0x22e>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a1e      	ldr	r2, [pc, #120]	@ (8008be8 <HAL_GPIO_Init+0x248>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d02b      	beq.n	8008bca <HAL_GPIO_Init+0x22a>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a1d      	ldr	r2, [pc, #116]	@ (8008bec <HAL_GPIO_Init+0x24c>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d025      	beq.n	8008bc6 <HAL_GPIO_Init+0x226>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8008bf0 <HAL_GPIO_Init+0x250>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d01f      	beq.n	8008bc2 <HAL_GPIO_Init+0x222>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a1b      	ldr	r2, [pc, #108]	@ (8008bf4 <HAL_GPIO_Init+0x254>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d019      	beq.n	8008bbe <HAL_GPIO_Init+0x21e>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a1a      	ldr	r2, [pc, #104]	@ (8008bf8 <HAL_GPIO_Init+0x258>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d013      	beq.n	8008bba <HAL_GPIO_Init+0x21a>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a19      	ldr	r2, [pc, #100]	@ (8008bfc <HAL_GPIO_Init+0x25c>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d00d      	beq.n	8008bb6 <HAL_GPIO_Init+0x216>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a18      	ldr	r2, [pc, #96]	@ (8008c00 <HAL_GPIO_Init+0x260>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d007      	beq.n	8008bb2 <HAL_GPIO_Init+0x212>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a17      	ldr	r2, [pc, #92]	@ (8008c04 <HAL_GPIO_Init+0x264>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d101      	bne.n	8008bae <HAL_GPIO_Init+0x20e>
 8008baa:	2309      	movs	r3, #9
 8008bac:	e02d      	b.n	8008c0a <HAL_GPIO_Init+0x26a>
 8008bae:	230a      	movs	r3, #10
 8008bb0:	e02b      	b.n	8008c0a <HAL_GPIO_Init+0x26a>
 8008bb2:	2308      	movs	r3, #8
 8008bb4:	e029      	b.n	8008c0a <HAL_GPIO_Init+0x26a>
 8008bb6:	2307      	movs	r3, #7
 8008bb8:	e027      	b.n	8008c0a <HAL_GPIO_Init+0x26a>
 8008bba:	2306      	movs	r3, #6
 8008bbc:	e025      	b.n	8008c0a <HAL_GPIO_Init+0x26a>
 8008bbe:	2305      	movs	r3, #5
 8008bc0:	e023      	b.n	8008c0a <HAL_GPIO_Init+0x26a>
 8008bc2:	2304      	movs	r3, #4
 8008bc4:	e021      	b.n	8008c0a <HAL_GPIO_Init+0x26a>
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e01f      	b.n	8008c0a <HAL_GPIO_Init+0x26a>
 8008bca:	2302      	movs	r3, #2
 8008bcc:	e01d      	b.n	8008c0a <HAL_GPIO_Init+0x26a>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e01b      	b.n	8008c0a <HAL_GPIO_Init+0x26a>
 8008bd2:	bf00      	nop
 8008bd4:	58000080 	.word	0x58000080
 8008bd8:	58024400 	.word	0x58024400
 8008bdc:	58000400 	.word	0x58000400
 8008be0:	58020000 	.word	0x58020000
 8008be4:	58020400 	.word	0x58020400
 8008be8:	58020800 	.word	0x58020800
 8008bec:	58020c00 	.word	0x58020c00
 8008bf0:	58021000 	.word	0x58021000
 8008bf4:	58021400 	.word	0x58021400
 8008bf8:	58021800 	.word	0x58021800
 8008bfc:	58021c00 	.word	0x58021c00
 8008c00:	58022000 	.word	0x58022000
 8008c04:	58022400 	.word	0x58022400
 8008c08:	2300      	movs	r3, #0
 8008c0a:	69fa      	ldr	r2, [r7, #28]
 8008c0c:	f002 0203 	and.w	r2, r2, #3
 8008c10:	0092      	lsls	r2, r2, #2
 8008c12:	4093      	lsls	r3, r2
 8008c14:	69ba      	ldr	r2, [r7, #24]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c1a:	4938      	ldr	r1, [pc, #224]	@ (8008cfc <HAL_GPIO_Init+0x35c>)
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	089b      	lsrs	r3, r3, #2
 8008c20:	3302      	adds	r3, #2
 8008c22:	69ba      	ldr	r2, [r7, #24]
 8008c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	43db      	mvns	r3, r3
 8008c34:	69ba      	ldr	r2, [r7, #24]
 8008c36:	4013      	ands	r3, r2
 8008c38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d003      	beq.n	8008c4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008c46:	69ba      	ldr	r2, [r7, #24]
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008c4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	43db      	mvns	r3, r3
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	4013      	ands	r3, r2
 8008c66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d003      	beq.n	8008c7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008c7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	43db      	mvns	r3, r3
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	4013      	ands	r3, r2
 8008c92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d003      	beq.n	8008ca8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008ca0:	69ba      	ldr	r2, [r7, #24]
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	43db      	mvns	r3, r3
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	4013      	ands	r3, r2
 8008cbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f47f ae63 	bne.w	80089b4 <HAL_GPIO_Init+0x14>
  }
}
 8008cee:	bf00      	nop
 8008cf0:	bf00      	nop
 8008cf2:	3724      	adds	r7, #36	@ 0x24
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	58000400 	.word	0x58000400

08008d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	807b      	strh	r3, [r7, #2]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d10:	787b      	ldrb	r3, [r7, #1]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d003      	beq.n	8008d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d16:	887a      	ldrh	r2, [r7, #2]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008d1c:	e003      	b.n	8008d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008d1e:	887b      	ldrh	r3, [r7, #2]
 8008d20:	041a      	lsls	r2, r3, #16
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	619a      	str	r2, [r3, #24]
}
 8008d26:	bf00      	nop
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
	...

08008d34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008d3c:	4b19      	ldr	r3, [pc, #100]	@ (8008da4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	f003 0304 	and.w	r3, r3, #4
 8008d44:	2b04      	cmp	r3, #4
 8008d46:	d00a      	beq.n	8008d5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d48:	4b16      	ldr	r3, [pc, #88]	@ (8008da4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	f003 0307 	and.w	r3, r3, #7
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d001      	beq.n	8008d5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e01f      	b.n	8008d9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	e01d      	b.n	8008d9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d5e:	4b11      	ldr	r3, [pc, #68]	@ (8008da4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	f023 0207 	bic.w	r2, r3, #7
 8008d66:	490f      	ldr	r1, [pc, #60]	@ (8008da4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008d6e:	f7fd ff6f 	bl	8006c50 <HAL_GetTick>
 8008d72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d74:	e009      	b.n	8008d8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008d76:	f7fd ff6b 	bl	8006c50 <HAL_GetTick>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d84:	d901      	bls.n	8008d8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e007      	b.n	8008d9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d8a:	4b06      	ldr	r3, [pc, #24]	@ (8008da4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d96:	d1ee      	bne.n	8008d76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	58024800 	.word	0x58024800

08008da8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08c      	sub	sp, #48	@ 0x30
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d102      	bne.n	8008dbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	f000 bc48 	b.w	800964c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f000 8088 	beq.w	8008eda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dca:	4b99      	ldr	r3, [pc, #612]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008dd4:	4b96      	ldr	r3, [pc, #600]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ddc:	2b10      	cmp	r3, #16
 8008dde:	d007      	beq.n	8008df0 <HAL_RCC_OscConfig+0x48>
 8008de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de2:	2b18      	cmp	r3, #24
 8008de4:	d111      	bne.n	8008e0a <HAL_RCC_OscConfig+0x62>
 8008de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de8:	f003 0303 	and.w	r3, r3, #3
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d10c      	bne.n	8008e0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008df0:	4b8f      	ldr	r3, [pc, #572]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d06d      	beq.n	8008ed8 <HAL_RCC_OscConfig+0x130>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d169      	bne.n	8008ed8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	f000 bc21 	b.w	800964c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e12:	d106      	bne.n	8008e22 <HAL_RCC_OscConfig+0x7a>
 8008e14:	4b86      	ldr	r3, [pc, #536]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a85      	ldr	r2, [pc, #532]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e1e:	6013      	str	r3, [r2, #0]
 8008e20:	e02e      	b.n	8008e80 <HAL_RCC_OscConfig+0xd8>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d10c      	bne.n	8008e44 <HAL_RCC_OscConfig+0x9c>
 8008e2a:	4b81      	ldr	r3, [pc, #516]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a80      	ldr	r2, [pc, #512]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e34:	6013      	str	r3, [r2, #0]
 8008e36:	4b7e      	ldr	r3, [pc, #504]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a7d      	ldr	r2, [pc, #500]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e40:	6013      	str	r3, [r2, #0]
 8008e42:	e01d      	b.n	8008e80 <HAL_RCC_OscConfig+0xd8>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e4c:	d10c      	bne.n	8008e68 <HAL_RCC_OscConfig+0xc0>
 8008e4e:	4b78      	ldr	r3, [pc, #480]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a77      	ldr	r2, [pc, #476]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	4b75      	ldr	r3, [pc, #468]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a74      	ldr	r2, [pc, #464]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e64:	6013      	str	r3, [r2, #0]
 8008e66:	e00b      	b.n	8008e80 <HAL_RCC_OscConfig+0xd8>
 8008e68:	4b71      	ldr	r3, [pc, #452]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a70      	ldr	r2, [pc, #448]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e72:	6013      	str	r3, [r2, #0]
 8008e74:	4b6e      	ldr	r3, [pc, #440]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a6d      	ldr	r2, [pc, #436]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d013      	beq.n	8008eb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e88:	f7fd fee2 	bl	8006c50 <HAL_GetTick>
 8008e8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e8e:	e008      	b.n	8008ea2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e90:	f7fd fede 	bl	8006c50 <HAL_GetTick>
 8008e94:	4602      	mov	r2, r0
 8008e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	2b64      	cmp	r3, #100	@ 0x64
 8008e9c:	d901      	bls.n	8008ea2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e3d4      	b.n	800964c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ea2:	4b63      	ldr	r3, [pc, #396]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d0f0      	beq.n	8008e90 <HAL_RCC_OscConfig+0xe8>
 8008eae:	e014      	b.n	8008eda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eb0:	f7fd fece 	bl	8006c50 <HAL_GetTick>
 8008eb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008eb6:	e008      	b.n	8008eca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008eb8:	f7fd feca 	bl	8006c50 <HAL_GetTick>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	2b64      	cmp	r3, #100	@ 0x64
 8008ec4:	d901      	bls.n	8008eca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e3c0      	b.n	800964c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008eca:	4b59      	ldr	r3, [pc, #356]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1f0      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x110>
 8008ed6:	e000      	b.n	8008eda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0302 	and.w	r3, r3, #2
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f000 80ca 	beq.w	800907c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ee8:	4b51      	ldr	r3, [pc, #324]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ef0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ef2:	4b4f      	ldr	r3, [pc, #316]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d007      	beq.n	8008f0e <HAL_RCC_OscConfig+0x166>
 8008efe:	6a3b      	ldr	r3, [r7, #32]
 8008f00:	2b18      	cmp	r3, #24
 8008f02:	d156      	bne.n	8008fb2 <HAL_RCC_OscConfig+0x20a>
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	f003 0303 	and.w	r3, r3, #3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d151      	bne.n	8008fb2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f0e:	4b48      	ldr	r3, [pc, #288]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 0304 	and.w	r3, r3, #4
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d005      	beq.n	8008f26 <HAL_RCC_OscConfig+0x17e>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e392      	b.n	800964c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f26:	4b42      	ldr	r3, [pc, #264]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f023 0219 	bic.w	r2, r3, #25
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	493f      	ldr	r1, [pc, #252]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008f34:	4313      	orrs	r3, r2
 8008f36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f38:	f7fd fe8a 	bl	8006c50 <HAL_GetTick>
 8008f3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f3e:	e008      	b.n	8008f52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f40:	f7fd fe86 	bl	8006c50 <HAL_GetTick>
 8008f44:	4602      	mov	r2, r0
 8008f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d901      	bls.n	8008f52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e37c      	b.n	800964c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f52:	4b37      	ldr	r3, [pc, #220]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0304 	and.w	r3, r3, #4
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d0f0      	beq.n	8008f40 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f5e:	f7fd fea7 	bl	8006cb0 <HAL_GetREVID>
 8008f62:	4603      	mov	r3, r0
 8008f64:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d817      	bhi.n	8008f9c <HAL_RCC_OscConfig+0x1f4>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	2b40      	cmp	r3, #64	@ 0x40
 8008f72:	d108      	bne.n	8008f86 <HAL_RCC_OscConfig+0x1de>
 8008f74:	4b2e      	ldr	r3, [pc, #184]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008f7c:	4a2c      	ldr	r2, [pc, #176]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008f7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f82:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f84:	e07a      	b.n	800907c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f86:	4b2a      	ldr	r3, [pc, #168]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	031b      	lsls	r3, r3, #12
 8008f94:	4926      	ldr	r1, [pc, #152]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008f96:	4313      	orrs	r3, r2
 8008f98:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f9a:	e06f      	b.n	800907c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f9c:	4b24      	ldr	r3, [pc, #144]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	061b      	lsls	r3, r3, #24
 8008faa:	4921      	ldr	r1, [pc, #132]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008fac:	4313      	orrs	r3, r2
 8008fae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fb0:	e064      	b.n	800907c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d047      	beq.n	800904a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008fba:	4b1d      	ldr	r3, [pc, #116]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f023 0219 	bic.w	r2, r3, #25
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	491a      	ldr	r1, [pc, #104]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fcc:	f7fd fe40 	bl	8006c50 <HAL_GetTick>
 8008fd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fd2:	e008      	b.n	8008fe6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fd4:	f7fd fe3c 	bl	8006c50 <HAL_GetTick>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	d901      	bls.n	8008fe6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e332      	b.n	800964c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fe6:	4b12      	ldr	r3, [pc, #72]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 0304 	and.w	r3, r3, #4
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d0f0      	beq.n	8008fd4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ff2:	f7fd fe5d 	bl	8006cb0 <HAL_GetREVID>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d819      	bhi.n	8009034 <HAL_RCC_OscConfig+0x28c>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	2b40      	cmp	r3, #64	@ 0x40
 8009006:	d108      	bne.n	800901a <HAL_RCC_OscConfig+0x272>
 8009008:	4b09      	ldr	r3, [pc, #36]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009010:	4a07      	ldr	r2, [pc, #28]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 8009012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009016:	6053      	str	r3, [r2, #4]
 8009018:	e030      	b.n	800907c <HAL_RCC_OscConfig+0x2d4>
 800901a:	4b05      	ldr	r3, [pc, #20]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	031b      	lsls	r3, r3, #12
 8009028:	4901      	ldr	r1, [pc, #4]	@ (8009030 <HAL_RCC_OscConfig+0x288>)
 800902a:	4313      	orrs	r3, r2
 800902c:	604b      	str	r3, [r1, #4]
 800902e:	e025      	b.n	800907c <HAL_RCC_OscConfig+0x2d4>
 8009030:	58024400 	.word	0x58024400
 8009034:	4b9a      	ldr	r3, [pc, #616]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	061b      	lsls	r3, r3, #24
 8009042:	4997      	ldr	r1, [pc, #604]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009044:	4313      	orrs	r3, r2
 8009046:	604b      	str	r3, [r1, #4]
 8009048:	e018      	b.n	800907c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800904a:	4b95      	ldr	r3, [pc, #596]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a94      	ldr	r2, [pc, #592]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009050:	f023 0301 	bic.w	r3, r3, #1
 8009054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009056:	f7fd fdfb 	bl	8006c50 <HAL_GetTick>
 800905a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800905c:	e008      	b.n	8009070 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800905e:	f7fd fdf7 	bl	8006c50 <HAL_GetTick>
 8009062:	4602      	mov	r2, r0
 8009064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009066:	1ad3      	subs	r3, r2, r3
 8009068:	2b02      	cmp	r3, #2
 800906a:	d901      	bls.n	8009070 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800906c:	2303      	movs	r3, #3
 800906e:	e2ed      	b.n	800964c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009070:	4b8b      	ldr	r3, [pc, #556]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0304 	and.w	r3, r3, #4
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1f0      	bne.n	800905e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0310 	and.w	r3, r3, #16
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 80a9 	beq.w	80091dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800908a:	4b85      	ldr	r3, [pc, #532]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009092:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009094:	4b82      	ldr	r3, [pc, #520]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009098:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	2b08      	cmp	r3, #8
 800909e:	d007      	beq.n	80090b0 <HAL_RCC_OscConfig+0x308>
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	2b18      	cmp	r3, #24
 80090a4:	d13a      	bne.n	800911c <HAL_RCC_OscConfig+0x374>
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	f003 0303 	and.w	r3, r3, #3
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d135      	bne.n	800911c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090b0:	4b7b      	ldr	r3, [pc, #492]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d005      	beq.n	80090c8 <HAL_RCC_OscConfig+0x320>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	69db      	ldr	r3, [r3, #28]
 80090c0:	2b80      	cmp	r3, #128	@ 0x80
 80090c2:	d001      	beq.n	80090c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e2c1      	b.n	800964c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090c8:	f7fd fdf2 	bl	8006cb0 <HAL_GetREVID>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d817      	bhi.n	8009106 <HAL_RCC_OscConfig+0x35e>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	2b20      	cmp	r3, #32
 80090dc:	d108      	bne.n	80090f0 <HAL_RCC_OscConfig+0x348>
 80090de:	4b70      	ldr	r3, [pc, #448]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80090e6:	4a6e      	ldr	r2, [pc, #440]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 80090e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80090ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090ee:	e075      	b.n	80091dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090f0:	4b6b      	ldr	r3, [pc, #428]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6a1b      	ldr	r3, [r3, #32]
 80090fc:	069b      	lsls	r3, r3, #26
 80090fe:	4968      	ldr	r1, [pc, #416]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009100:	4313      	orrs	r3, r2
 8009102:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009104:	e06a      	b.n	80091dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009106:	4b66      	ldr	r3, [pc, #408]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	061b      	lsls	r3, r3, #24
 8009114:	4962      	ldr	r1, [pc, #392]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009116:	4313      	orrs	r3, r2
 8009118:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800911a:	e05f      	b.n	80091dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	69db      	ldr	r3, [r3, #28]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d042      	beq.n	80091aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009124:	4b5e      	ldr	r3, [pc, #376]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a5d      	ldr	r2, [pc, #372]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 800912a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800912e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009130:	f7fd fd8e 	bl	8006c50 <HAL_GetTick>
 8009134:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009136:	e008      	b.n	800914a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009138:	f7fd fd8a 	bl	8006c50 <HAL_GetTick>
 800913c:	4602      	mov	r2, r0
 800913e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	2b02      	cmp	r3, #2
 8009144:	d901      	bls.n	800914a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009146:	2303      	movs	r3, #3
 8009148:	e280      	b.n	800964c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800914a:	4b55      	ldr	r3, [pc, #340]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009152:	2b00      	cmp	r3, #0
 8009154:	d0f0      	beq.n	8009138 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009156:	f7fd fdab 	bl	8006cb0 <HAL_GetREVID>
 800915a:	4603      	mov	r3, r0
 800915c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009160:	4293      	cmp	r3, r2
 8009162:	d817      	bhi.n	8009194 <HAL_RCC_OscConfig+0x3ec>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a1b      	ldr	r3, [r3, #32]
 8009168:	2b20      	cmp	r3, #32
 800916a:	d108      	bne.n	800917e <HAL_RCC_OscConfig+0x3d6>
 800916c:	4b4c      	ldr	r3, [pc, #304]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009174:	4a4a      	ldr	r2, [pc, #296]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009176:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800917a:	6053      	str	r3, [r2, #4]
 800917c:	e02e      	b.n	80091dc <HAL_RCC_OscConfig+0x434>
 800917e:	4b48      	ldr	r3, [pc, #288]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	069b      	lsls	r3, r3, #26
 800918c:	4944      	ldr	r1, [pc, #272]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 800918e:	4313      	orrs	r3, r2
 8009190:	604b      	str	r3, [r1, #4]
 8009192:	e023      	b.n	80091dc <HAL_RCC_OscConfig+0x434>
 8009194:	4b42      	ldr	r3, [pc, #264]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a1b      	ldr	r3, [r3, #32]
 80091a0:	061b      	lsls	r3, r3, #24
 80091a2:	493f      	ldr	r1, [pc, #252]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 80091a4:	4313      	orrs	r3, r2
 80091a6:	60cb      	str	r3, [r1, #12]
 80091a8:	e018      	b.n	80091dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80091aa:	4b3d      	ldr	r3, [pc, #244]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a3c      	ldr	r2, [pc, #240]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 80091b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091b6:	f7fd fd4b 	bl	8006c50 <HAL_GetTick>
 80091ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091bc:	e008      	b.n	80091d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80091be:	f7fd fd47 	bl	8006c50 <HAL_GetTick>
 80091c2:	4602      	mov	r2, r0
 80091c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d901      	bls.n	80091d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e23d      	b.n	800964c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091d0:	4b33      	ldr	r3, [pc, #204]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1f0      	bne.n	80091be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0308 	and.w	r3, r3, #8
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d036      	beq.n	8009256 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	695b      	ldr	r3, [r3, #20]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d019      	beq.n	8009224 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091f0:	4b2b      	ldr	r3, [pc, #172]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 80091f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091f4:	4a2a      	ldr	r2, [pc, #168]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 80091f6:	f043 0301 	orr.w	r3, r3, #1
 80091fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091fc:	f7fd fd28 	bl	8006c50 <HAL_GetTick>
 8009200:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009202:	e008      	b.n	8009216 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009204:	f7fd fd24 	bl	8006c50 <HAL_GetTick>
 8009208:	4602      	mov	r2, r0
 800920a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920c:	1ad3      	subs	r3, r2, r3
 800920e:	2b02      	cmp	r3, #2
 8009210:	d901      	bls.n	8009216 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009212:	2303      	movs	r3, #3
 8009214:	e21a      	b.n	800964c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009216:	4b22      	ldr	r3, [pc, #136]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800921a:	f003 0302 	and.w	r3, r3, #2
 800921e:	2b00      	cmp	r3, #0
 8009220:	d0f0      	beq.n	8009204 <HAL_RCC_OscConfig+0x45c>
 8009222:	e018      	b.n	8009256 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009224:	4b1e      	ldr	r3, [pc, #120]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009228:	4a1d      	ldr	r2, [pc, #116]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 800922a:	f023 0301 	bic.w	r3, r3, #1
 800922e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009230:	f7fd fd0e 	bl	8006c50 <HAL_GetTick>
 8009234:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009236:	e008      	b.n	800924a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009238:	f7fd fd0a 	bl	8006c50 <HAL_GetTick>
 800923c:	4602      	mov	r2, r0
 800923e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	2b02      	cmp	r3, #2
 8009244:	d901      	bls.n	800924a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	e200      	b.n	800964c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800924a:	4b15      	ldr	r3, [pc, #84]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 800924c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800924e:	f003 0302 	and.w	r3, r3, #2
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1f0      	bne.n	8009238 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 0320 	and.w	r3, r3, #32
 800925e:	2b00      	cmp	r3, #0
 8009260:	d039      	beq.n	80092d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	699b      	ldr	r3, [r3, #24]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d01c      	beq.n	80092a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800926a:	4b0d      	ldr	r3, [pc, #52]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a0c      	ldr	r2, [pc, #48]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009270:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009274:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009276:	f7fd fceb 	bl	8006c50 <HAL_GetTick>
 800927a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800927c:	e008      	b.n	8009290 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800927e:	f7fd fce7 	bl	8006c50 <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	2b02      	cmp	r3, #2
 800928a:	d901      	bls.n	8009290 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e1dd      	b.n	800964c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009290:	4b03      	ldr	r3, [pc, #12]	@ (80092a0 <HAL_RCC_OscConfig+0x4f8>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d0f0      	beq.n	800927e <HAL_RCC_OscConfig+0x4d6>
 800929c:	e01b      	b.n	80092d6 <HAL_RCC_OscConfig+0x52e>
 800929e:	bf00      	nop
 80092a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80092a4:	4b9b      	ldr	r3, [pc, #620]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a9a      	ldr	r2, [pc, #616]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 80092aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80092ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80092b0:	f7fd fcce 	bl	8006c50 <HAL_GetTick>
 80092b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092b6:	e008      	b.n	80092ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092b8:	f7fd fcca 	bl	8006c50 <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d901      	bls.n	80092ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e1c0      	b.n	800964c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092ca:	4b92      	ldr	r3, [pc, #584]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1f0      	bne.n	80092b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 0304 	and.w	r3, r3, #4
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 8081 	beq.w	80093e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80092e4:	4b8c      	ldr	r3, [pc, #560]	@ (8009518 <HAL_RCC_OscConfig+0x770>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a8b      	ldr	r2, [pc, #556]	@ (8009518 <HAL_RCC_OscConfig+0x770>)
 80092ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092f0:	f7fd fcae 	bl	8006c50 <HAL_GetTick>
 80092f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092f6:	e008      	b.n	800930a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092f8:	f7fd fcaa 	bl	8006c50 <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	2b64      	cmp	r3, #100	@ 0x64
 8009304:	d901      	bls.n	800930a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e1a0      	b.n	800964c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800930a:	4b83      	ldr	r3, [pc, #524]	@ (8009518 <HAL_RCC_OscConfig+0x770>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009312:	2b00      	cmp	r3, #0
 8009314:	d0f0      	beq.n	80092f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d106      	bne.n	800932c <HAL_RCC_OscConfig+0x584>
 800931e:	4b7d      	ldr	r3, [pc, #500]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009322:	4a7c      	ldr	r2, [pc, #496]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009324:	f043 0301 	orr.w	r3, r3, #1
 8009328:	6713      	str	r3, [r2, #112]	@ 0x70
 800932a:	e02d      	b.n	8009388 <HAL_RCC_OscConfig+0x5e0>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d10c      	bne.n	800934e <HAL_RCC_OscConfig+0x5a6>
 8009334:	4b77      	ldr	r3, [pc, #476]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009338:	4a76      	ldr	r2, [pc, #472]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 800933a:	f023 0301 	bic.w	r3, r3, #1
 800933e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009340:	4b74      	ldr	r3, [pc, #464]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009344:	4a73      	ldr	r2, [pc, #460]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009346:	f023 0304 	bic.w	r3, r3, #4
 800934a:	6713      	str	r3, [r2, #112]	@ 0x70
 800934c:	e01c      	b.n	8009388 <HAL_RCC_OscConfig+0x5e0>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	2b05      	cmp	r3, #5
 8009354:	d10c      	bne.n	8009370 <HAL_RCC_OscConfig+0x5c8>
 8009356:	4b6f      	ldr	r3, [pc, #444]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800935a:	4a6e      	ldr	r2, [pc, #440]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 800935c:	f043 0304 	orr.w	r3, r3, #4
 8009360:	6713      	str	r3, [r2, #112]	@ 0x70
 8009362:	4b6c      	ldr	r3, [pc, #432]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009366:	4a6b      	ldr	r2, [pc, #428]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009368:	f043 0301 	orr.w	r3, r3, #1
 800936c:	6713      	str	r3, [r2, #112]	@ 0x70
 800936e:	e00b      	b.n	8009388 <HAL_RCC_OscConfig+0x5e0>
 8009370:	4b68      	ldr	r3, [pc, #416]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009374:	4a67      	ldr	r2, [pc, #412]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009376:	f023 0301 	bic.w	r3, r3, #1
 800937a:	6713      	str	r3, [r2, #112]	@ 0x70
 800937c:	4b65      	ldr	r3, [pc, #404]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 800937e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009380:	4a64      	ldr	r2, [pc, #400]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009382:	f023 0304 	bic.w	r3, r3, #4
 8009386:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d015      	beq.n	80093bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009390:	f7fd fc5e 	bl	8006c50 <HAL_GetTick>
 8009394:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009396:	e00a      	b.n	80093ae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009398:	f7fd fc5a 	bl	8006c50 <HAL_GetTick>
 800939c:	4602      	mov	r2, r0
 800939e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d901      	bls.n	80093ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80093aa:	2303      	movs	r3, #3
 80093ac:	e14e      	b.n	800964c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093ae:	4b59      	ldr	r3, [pc, #356]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 80093b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093b2:	f003 0302 	and.w	r3, r3, #2
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d0ee      	beq.n	8009398 <HAL_RCC_OscConfig+0x5f0>
 80093ba:	e014      	b.n	80093e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093bc:	f7fd fc48 	bl	8006c50 <HAL_GetTick>
 80093c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80093c2:	e00a      	b.n	80093da <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093c4:	f7fd fc44 	bl	8006c50 <HAL_GetTick>
 80093c8:	4602      	mov	r2, r0
 80093ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d901      	bls.n	80093da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80093d6:	2303      	movs	r3, #3
 80093d8:	e138      	b.n	800964c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80093da:	4b4e      	ldr	r3, [pc, #312]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 80093dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093de:	f003 0302 	and.w	r3, r3, #2
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1ee      	bne.n	80093c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f000 812d 	beq.w	800964a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80093f0:	4b48      	ldr	r3, [pc, #288]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093f8:	2b18      	cmp	r3, #24
 80093fa:	f000 80bd 	beq.w	8009578 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009402:	2b02      	cmp	r3, #2
 8009404:	f040 809e 	bne.w	8009544 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009408:	4b42      	ldr	r3, [pc, #264]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a41      	ldr	r2, [pc, #260]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 800940e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009414:	f7fd fc1c 	bl	8006c50 <HAL_GetTick>
 8009418:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800941a:	e008      	b.n	800942e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800941c:	f7fd fc18 	bl	8006c50 <HAL_GetTick>
 8009420:	4602      	mov	r2, r0
 8009422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	2b02      	cmp	r3, #2
 8009428:	d901      	bls.n	800942e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800942a:	2303      	movs	r3, #3
 800942c:	e10e      	b.n	800964c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800942e:	4b39      	ldr	r3, [pc, #228]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1f0      	bne.n	800941c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800943a:	4b36      	ldr	r3, [pc, #216]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 800943c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800943e:	4b37      	ldr	r3, [pc, #220]	@ (800951c <HAL_RCC_OscConfig+0x774>)
 8009440:	4013      	ands	r3, r2
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800944a:	0112      	lsls	r2, r2, #4
 800944c:	430a      	orrs	r2, r1
 800944e:	4931      	ldr	r1, [pc, #196]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009450:	4313      	orrs	r3, r2
 8009452:	628b      	str	r3, [r1, #40]	@ 0x28
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009458:	3b01      	subs	r3, #1
 800945a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009462:	3b01      	subs	r3, #1
 8009464:	025b      	lsls	r3, r3, #9
 8009466:	b29b      	uxth	r3, r3
 8009468:	431a      	orrs	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800946e:	3b01      	subs	r3, #1
 8009470:	041b      	lsls	r3, r3, #16
 8009472:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009476:	431a      	orrs	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800947c:	3b01      	subs	r3, #1
 800947e:	061b      	lsls	r3, r3, #24
 8009480:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009484:	4923      	ldr	r1, [pc, #140]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009486:	4313      	orrs	r3, r2
 8009488:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800948a:	4b22      	ldr	r3, [pc, #136]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 800948c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948e:	4a21      	ldr	r2, [pc, #132]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009490:	f023 0301 	bic.w	r3, r3, #1
 8009494:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009496:	4b1f      	ldr	r3, [pc, #124]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009498:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800949a:	4b21      	ldr	r3, [pc, #132]	@ (8009520 <HAL_RCC_OscConfig+0x778>)
 800949c:	4013      	ands	r3, r2
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80094a2:	00d2      	lsls	r2, r2, #3
 80094a4:	491b      	ldr	r1, [pc, #108]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094a6:	4313      	orrs	r3, r2
 80094a8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80094aa:	4b1a      	ldr	r3, [pc, #104]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ae:	f023 020c 	bic.w	r2, r3, #12
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094b6:	4917      	ldr	r1, [pc, #92]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094b8:	4313      	orrs	r3, r2
 80094ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80094bc:	4b15      	ldr	r3, [pc, #84]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c0:	f023 0202 	bic.w	r2, r3, #2
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094c8:	4912      	ldr	r1, [pc, #72]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094ca:	4313      	orrs	r3, r2
 80094cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80094ce:	4b11      	ldr	r3, [pc, #68]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d2:	4a10      	ldr	r2, [pc, #64]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094da:	4b0e      	ldr	r3, [pc, #56]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094de:	4a0d      	ldr	r2, [pc, #52]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80094e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ea:	4a0a      	ldr	r2, [pc, #40]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80094f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80094f2:	4b08      	ldr	r3, [pc, #32]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f6:	4a07      	ldr	r2, [pc, #28]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 80094f8:	f043 0301 	orr.w	r3, r3, #1
 80094fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80094fe:	4b05      	ldr	r3, [pc, #20]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a04      	ldr	r2, [pc, #16]	@ (8009514 <HAL_RCC_OscConfig+0x76c>)
 8009504:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800950a:	f7fd fba1 	bl	8006c50 <HAL_GetTick>
 800950e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009510:	e011      	b.n	8009536 <HAL_RCC_OscConfig+0x78e>
 8009512:	bf00      	nop
 8009514:	58024400 	.word	0x58024400
 8009518:	58024800 	.word	0x58024800
 800951c:	fffffc0c 	.word	0xfffffc0c
 8009520:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009524:	f7fd fb94 	bl	8006c50 <HAL_GetTick>
 8009528:	4602      	mov	r2, r0
 800952a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	2b02      	cmp	r3, #2
 8009530:	d901      	bls.n	8009536 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009532:	2303      	movs	r3, #3
 8009534:	e08a      	b.n	800964c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009536:	4b47      	ldr	r3, [pc, #284]	@ (8009654 <HAL_RCC_OscConfig+0x8ac>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800953e:	2b00      	cmp	r3, #0
 8009540:	d0f0      	beq.n	8009524 <HAL_RCC_OscConfig+0x77c>
 8009542:	e082      	b.n	800964a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009544:	4b43      	ldr	r3, [pc, #268]	@ (8009654 <HAL_RCC_OscConfig+0x8ac>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a42      	ldr	r2, [pc, #264]	@ (8009654 <HAL_RCC_OscConfig+0x8ac>)
 800954a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800954e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009550:	f7fd fb7e 	bl	8006c50 <HAL_GetTick>
 8009554:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009556:	e008      	b.n	800956a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009558:	f7fd fb7a 	bl	8006c50 <HAL_GetTick>
 800955c:	4602      	mov	r2, r0
 800955e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	2b02      	cmp	r3, #2
 8009564:	d901      	bls.n	800956a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	e070      	b.n	800964c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800956a:	4b3a      	ldr	r3, [pc, #232]	@ (8009654 <HAL_RCC_OscConfig+0x8ac>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1f0      	bne.n	8009558 <HAL_RCC_OscConfig+0x7b0>
 8009576:	e068      	b.n	800964a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009578:	4b36      	ldr	r3, [pc, #216]	@ (8009654 <HAL_RCC_OscConfig+0x8ac>)
 800957a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800957c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800957e:	4b35      	ldr	r3, [pc, #212]	@ (8009654 <HAL_RCC_OscConfig+0x8ac>)
 8009580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009582:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009588:	2b01      	cmp	r3, #1
 800958a:	d031      	beq.n	80095f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	f003 0203 	and.w	r2, r3, #3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009596:	429a      	cmp	r2, r3
 8009598:	d12a      	bne.n	80095f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	091b      	lsrs	r3, r3, #4
 800959e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d122      	bne.n	80095f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d11a      	bne.n	80095f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	0a5b      	lsrs	r3, r3, #9
 80095be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d111      	bne.n	80095f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	0c1b      	lsrs	r3, r3, #16
 80095d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095da:	429a      	cmp	r2, r3
 80095dc:	d108      	bne.n	80095f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	0e1b      	lsrs	r3, r3, #24
 80095e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d001      	beq.n	80095f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e02b      	b.n	800964c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80095f4:	4b17      	ldr	r3, [pc, #92]	@ (8009654 <HAL_RCC_OscConfig+0x8ac>)
 80095f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095f8:	08db      	lsrs	r3, r3, #3
 80095fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009604:	693a      	ldr	r2, [r7, #16]
 8009606:	429a      	cmp	r2, r3
 8009608:	d01f      	beq.n	800964a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800960a:	4b12      	ldr	r3, [pc, #72]	@ (8009654 <HAL_RCC_OscConfig+0x8ac>)
 800960c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960e:	4a11      	ldr	r2, [pc, #68]	@ (8009654 <HAL_RCC_OscConfig+0x8ac>)
 8009610:	f023 0301 	bic.w	r3, r3, #1
 8009614:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009616:	f7fd fb1b 	bl	8006c50 <HAL_GetTick>
 800961a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800961c:	bf00      	nop
 800961e:	f7fd fb17 	bl	8006c50 <HAL_GetTick>
 8009622:	4602      	mov	r2, r0
 8009624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009626:	4293      	cmp	r3, r2
 8009628:	d0f9      	beq.n	800961e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800962a:	4b0a      	ldr	r3, [pc, #40]	@ (8009654 <HAL_RCC_OscConfig+0x8ac>)
 800962c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800962e:	4b0a      	ldr	r3, [pc, #40]	@ (8009658 <HAL_RCC_OscConfig+0x8b0>)
 8009630:	4013      	ands	r3, r2
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009636:	00d2      	lsls	r2, r2, #3
 8009638:	4906      	ldr	r1, [pc, #24]	@ (8009654 <HAL_RCC_OscConfig+0x8ac>)
 800963a:	4313      	orrs	r3, r2
 800963c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800963e:	4b05      	ldr	r3, [pc, #20]	@ (8009654 <HAL_RCC_OscConfig+0x8ac>)
 8009640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009642:	4a04      	ldr	r2, [pc, #16]	@ (8009654 <HAL_RCC_OscConfig+0x8ac>)
 8009644:	f043 0301 	orr.w	r3, r3, #1
 8009648:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3730      	adds	r7, #48	@ 0x30
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	58024400 	.word	0x58024400
 8009658:	ffff0007 	.word	0xffff0007

0800965c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d101      	bne.n	8009670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	e19c      	b.n	80099aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009670:	4b8a      	ldr	r3, [pc, #552]	@ (800989c <HAL_RCC_ClockConfig+0x240>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 030f 	and.w	r3, r3, #15
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	429a      	cmp	r2, r3
 800967c:	d910      	bls.n	80096a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800967e:	4b87      	ldr	r3, [pc, #540]	@ (800989c <HAL_RCC_ClockConfig+0x240>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f023 020f 	bic.w	r2, r3, #15
 8009686:	4985      	ldr	r1, [pc, #532]	@ (800989c <HAL_RCC_ClockConfig+0x240>)
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	4313      	orrs	r3, r2
 800968c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800968e:	4b83      	ldr	r3, [pc, #524]	@ (800989c <HAL_RCC_ClockConfig+0x240>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 030f 	and.w	r3, r3, #15
 8009696:	683a      	ldr	r2, [r7, #0]
 8009698:	429a      	cmp	r2, r3
 800969a:	d001      	beq.n	80096a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	e184      	b.n	80099aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 0304 	and.w	r3, r3, #4
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d010      	beq.n	80096ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	691a      	ldr	r2, [r3, #16]
 80096b0:	4b7b      	ldr	r3, [pc, #492]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80096b2:	699b      	ldr	r3, [r3, #24]
 80096b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d908      	bls.n	80096ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80096bc:	4b78      	ldr	r3, [pc, #480]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80096be:	699b      	ldr	r3, [r3, #24]
 80096c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	4975      	ldr	r1, [pc, #468]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80096ca:	4313      	orrs	r3, r2
 80096cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 0308 	and.w	r3, r3, #8
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d010      	beq.n	80096fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	695a      	ldr	r2, [r3, #20]
 80096de:	4b70      	ldr	r3, [pc, #448]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d908      	bls.n	80096fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80096ea:	4b6d      	ldr	r3, [pc, #436]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80096ec:	69db      	ldr	r3, [r3, #28]
 80096ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	496a      	ldr	r1, [pc, #424]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80096f8:	4313      	orrs	r3, r2
 80096fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f003 0310 	and.w	r3, r3, #16
 8009704:	2b00      	cmp	r3, #0
 8009706:	d010      	beq.n	800972a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	699a      	ldr	r2, [r3, #24]
 800970c:	4b64      	ldr	r3, [pc, #400]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 800970e:	69db      	ldr	r3, [r3, #28]
 8009710:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009714:	429a      	cmp	r2, r3
 8009716:	d908      	bls.n	800972a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009718:	4b61      	ldr	r3, [pc, #388]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	495e      	ldr	r1, [pc, #376]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 8009726:	4313      	orrs	r3, r2
 8009728:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 0320 	and.w	r3, r3, #32
 8009732:	2b00      	cmp	r3, #0
 8009734:	d010      	beq.n	8009758 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	69da      	ldr	r2, [r3, #28]
 800973a:	4b59      	ldr	r3, [pc, #356]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009742:	429a      	cmp	r2, r3
 8009744:	d908      	bls.n	8009758 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009746:	4b56      	ldr	r3, [pc, #344]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 8009748:	6a1b      	ldr	r3, [r3, #32]
 800974a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	69db      	ldr	r3, [r3, #28]
 8009752:	4953      	ldr	r1, [pc, #332]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 8009754:	4313      	orrs	r3, r2
 8009756:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 0302 	and.w	r3, r3, #2
 8009760:	2b00      	cmp	r3, #0
 8009762:	d010      	beq.n	8009786 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	68da      	ldr	r2, [r3, #12]
 8009768:	4b4d      	ldr	r3, [pc, #308]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	f003 030f 	and.w	r3, r3, #15
 8009770:	429a      	cmp	r2, r3
 8009772:	d908      	bls.n	8009786 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009774:	4b4a      	ldr	r3, [pc, #296]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	f023 020f 	bic.w	r2, r3, #15
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	4947      	ldr	r1, [pc, #284]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 8009782:	4313      	orrs	r3, r2
 8009784:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	2b00      	cmp	r3, #0
 8009790:	d055      	beq.n	800983e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009792:	4b43      	ldr	r3, [pc, #268]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 8009794:	699b      	ldr	r3, [r3, #24]
 8009796:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	4940      	ldr	r1, [pc, #256]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80097a0:	4313      	orrs	r3, r2
 80097a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d107      	bne.n	80097bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097ac:	4b3c      	ldr	r3, [pc, #240]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d121      	bne.n	80097fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e0f6      	b.n	80099aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	2b03      	cmp	r3, #3
 80097c2:	d107      	bne.n	80097d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80097c4:	4b36      	ldr	r3, [pc, #216]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d115      	bne.n	80097fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e0ea      	b.n	80099aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d107      	bne.n	80097ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80097dc:	4b30      	ldr	r3, [pc, #192]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d109      	bne.n	80097fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	e0de      	b.n	80099aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097ec:	4b2c      	ldr	r3, [pc, #176]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 0304 	and.w	r3, r3, #4
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e0d6      	b.n	80099aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80097fc:	4b28      	ldr	r3, [pc, #160]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	f023 0207 	bic.w	r2, r3, #7
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	4925      	ldr	r1, [pc, #148]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 800980a:	4313      	orrs	r3, r2
 800980c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800980e:	f7fd fa1f 	bl	8006c50 <HAL_GetTick>
 8009812:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009814:	e00a      	b.n	800982c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009816:	f7fd fa1b 	bl	8006c50 <HAL_GetTick>
 800981a:	4602      	mov	r2, r0
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009824:	4293      	cmp	r3, r2
 8009826:	d901      	bls.n	800982c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009828:	2303      	movs	r3, #3
 800982a:	e0be      	b.n	80099aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800982c:	4b1c      	ldr	r3, [pc, #112]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	00db      	lsls	r3, r3, #3
 800983a:	429a      	cmp	r2, r3
 800983c:	d1eb      	bne.n	8009816 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 0302 	and.w	r3, r3, #2
 8009846:	2b00      	cmp	r3, #0
 8009848:	d010      	beq.n	800986c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68da      	ldr	r2, [r3, #12]
 800984e:	4b14      	ldr	r3, [pc, #80]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	f003 030f 	and.w	r3, r3, #15
 8009856:	429a      	cmp	r2, r3
 8009858:	d208      	bcs.n	800986c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800985a:	4b11      	ldr	r3, [pc, #68]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	f023 020f 	bic.w	r2, r3, #15
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	490e      	ldr	r1, [pc, #56]	@ (80098a0 <HAL_RCC_ClockConfig+0x244>)
 8009868:	4313      	orrs	r3, r2
 800986a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800986c:	4b0b      	ldr	r3, [pc, #44]	@ (800989c <HAL_RCC_ClockConfig+0x240>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f003 030f 	and.w	r3, r3, #15
 8009874:	683a      	ldr	r2, [r7, #0]
 8009876:	429a      	cmp	r2, r3
 8009878:	d214      	bcs.n	80098a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800987a:	4b08      	ldr	r3, [pc, #32]	@ (800989c <HAL_RCC_ClockConfig+0x240>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f023 020f 	bic.w	r2, r3, #15
 8009882:	4906      	ldr	r1, [pc, #24]	@ (800989c <HAL_RCC_ClockConfig+0x240>)
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	4313      	orrs	r3, r2
 8009888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800988a:	4b04      	ldr	r3, [pc, #16]	@ (800989c <HAL_RCC_ClockConfig+0x240>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 030f 	and.w	r3, r3, #15
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	429a      	cmp	r2, r3
 8009896:	d005      	beq.n	80098a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	e086      	b.n	80099aa <HAL_RCC_ClockConfig+0x34e>
 800989c:	52002000 	.word	0x52002000
 80098a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 0304 	and.w	r3, r3, #4
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d010      	beq.n	80098d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	691a      	ldr	r2, [r3, #16]
 80098b4:	4b3f      	ldr	r3, [pc, #252]	@ (80099b4 <HAL_RCC_ClockConfig+0x358>)
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80098bc:	429a      	cmp	r2, r3
 80098be:	d208      	bcs.n	80098d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80098c0:	4b3c      	ldr	r3, [pc, #240]	@ (80099b4 <HAL_RCC_ClockConfig+0x358>)
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	4939      	ldr	r1, [pc, #228]	@ (80099b4 <HAL_RCC_ClockConfig+0x358>)
 80098ce:	4313      	orrs	r3, r2
 80098d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 0308 	and.w	r3, r3, #8
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d010      	beq.n	8009900 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	695a      	ldr	r2, [r3, #20]
 80098e2:	4b34      	ldr	r3, [pc, #208]	@ (80099b4 <HAL_RCC_ClockConfig+0x358>)
 80098e4:	69db      	ldr	r3, [r3, #28]
 80098e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d208      	bcs.n	8009900 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80098ee:	4b31      	ldr	r3, [pc, #196]	@ (80099b4 <HAL_RCC_ClockConfig+0x358>)
 80098f0:	69db      	ldr	r3, [r3, #28]
 80098f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	695b      	ldr	r3, [r3, #20]
 80098fa:	492e      	ldr	r1, [pc, #184]	@ (80099b4 <HAL_RCC_ClockConfig+0x358>)
 80098fc:	4313      	orrs	r3, r2
 80098fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 0310 	and.w	r3, r3, #16
 8009908:	2b00      	cmp	r3, #0
 800990a:	d010      	beq.n	800992e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	699a      	ldr	r2, [r3, #24]
 8009910:	4b28      	ldr	r3, [pc, #160]	@ (80099b4 <HAL_RCC_ClockConfig+0x358>)
 8009912:	69db      	ldr	r3, [r3, #28]
 8009914:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009918:	429a      	cmp	r2, r3
 800991a:	d208      	bcs.n	800992e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800991c:	4b25      	ldr	r3, [pc, #148]	@ (80099b4 <HAL_RCC_ClockConfig+0x358>)
 800991e:	69db      	ldr	r3, [r3, #28]
 8009920:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	4922      	ldr	r1, [pc, #136]	@ (80099b4 <HAL_RCC_ClockConfig+0x358>)
 800992a:	4313      	orrs	r3, r2
 800992c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 0320 	and.w	r3, r3, #32
 8009936:	2b00      	cmp	r3, #0
 8009938:	d010      	beq.n	800995c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	69da      	ldr	r2, [r3, #28]
 800993e:	4b1d      	ldr	r3, [pc, #116]	@ (80099b4 <HAL_RCC_ClockConfig+0x358>)
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009946:	429a      	cmp	r2, r3
 8009948:	d208      	bcs.n	800995c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800994a:	4b1a      	ldr	r3, [pc, #104]	@ (80099b4 <HAL_RCC_ClockConfig+0x358>)
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	4917      	ldr	r1, [pc, #92]	@ (80099b4 <HAL_RCC_ClockConfig+0x358>)
 8009958:	4313      	orrs	r3, r2
 800995a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800995c:	f000 f834 	bl	80099c8 <HAL_RCC_GetSysClockFreq>
 8009960:	4602      	mov	r2, r0
 8009962:	4b14      	ldr	r3, [pc, #80]	@ (80099b4 <HAL_RCC_ClockConfig+0x358>)
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	0a1b      	lsrs	r3, r3, #8
 8009968:	f003 030f 	and.w	r3, r3, #15
 800996c:	4912      	ldr	r1, [pc, #72]	@ (80099b8 <HAL_RCC_ClockConfig+0x35c>)
 800996e:	5ccb      	ldrb	r3, [r1, r3]
 8009970:	f003 031f 	and.w	r3, r3, #31
 8009974:	fa22 f303 	lsr.w	r3, r2, r3
 8009978:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800997a:	4b0e      	ldr	r3, [pc, #56]	@ (80099b4 <HAL_RCC_ClockConfig+0x358>)
 800997c:	699b      	ldr	r3, [r3, #24]
 800997e:	f003 030f 	and.w	r3, r3, #15
 8009982:	4a0d      	ldr	r2, [pc, #52]	@ (80099b8 <HAL_RCC_ClockConfig+0x35c>)
 8009984:	5cd3      	ldrb	r3, [r2, r3]
 8009986:	f003 031f 	and.w	r3, r3, #31
 800998a:	693a      	ldr	r2, [r7, #16]
 800998c:	fa22 f303 	lsr.w	r3, r2, r3
 8009990:	4a0a      	ldr	r2, [pc, #40]	@ (80099bc <HAL_RCC_ClockConfig+0x360>)
 8009992:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009994:	4a0a      	ldr	r2, [pc, #40]	@ (80099c0 <HAL_RCC_ClockConfig+0x364>)
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800999a:	4b0a      	ldr	r3, [pc, #40]	@ (80099c4 <HAL_RCC_ClockConfig+0x368>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fd f90c 	bl	8006bbc <HAL_InitTick>
 80099a4:	4603      	mov	r3, r0
 80099a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3718      	adds	r7, #24
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	58024400 	.word	0x58024400
 80099b8:	08014774 	.word	0x08014774
 80099bc:	24000054 	.word	0x24000054
 80099c0:	24000050 	.word	0x24000050
 80099c4:	24000058 	.word	0x24000058

080099c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b089      	sub	sp, #36	@ 0x24
 80099cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099ce:	4bb3      	ldr	r3, [pc, #716]	@ (8009c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099d6:	2b18      	cmp	r3, #24
 80099d8:	f200 8155 	bhi.w	8009c86 <HAL_RCC_GetSysClockFreq+0x2be>
 80099dc:	a201      	add	r2, pc, #4	@ (adr r2, 80099e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80099de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e2:	bf00      	nop
 80099e4:	08009a49 	.word	0x08009a49
 80099e8:	08009c87 	.word	0x08009c87
 80099ec:	08009c87 	.word	0x08009c87
 80099f0:	08009c87 	.word	0x08009c87
 80099f4:	08009c87 	.word	0x08009c87
 80099f8:	08009c87 	.word	0x08009c87
 80099fc:	08009c87 	.word	0x08009c87
 8009a00:	08009c87 	.word	0x08009c87
 8009a04:	08009a6f 	.word	0x08009a6f
 8009a08:	08009c87 	.word	0x08009c87
 8009a0c:	08009c87 	.word	0x08009c87
 8009a10:	08009c87 	.word	0x08009c87
 8009a14:	08009c87 	.word	0x08009c87
 8009a18:	08009c87 	.word	0x08009c87
 8009a1c:	08009c87 	.word	0x08009c87
 8009a20:	08009c87 	.word	0x08009c87
 8009a24:	08009a75 	.word	0x08009a75
 8009a28:	08009c87 	.word	0x08009c87
 8009a2c:	08009c87 	.word	0x08009c87
 8009a30:	08009c87 	.word	0x08009c87
 8009a34:	08009c87 	.word	0x08009c87
 8009a38:	08009c87 	.word	0x08009c87
 8009a3c:	08009c87 	.word	0x08009c87
 8009a40:	08009c87 	.word	0x08009c87
 8009a44:	08009a7b 	.word	0x08009a7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a48:	4b94      	ldr	r3, [pc, #592]	@ (8009c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 0320 	and.w	r3, r3, #32
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d009      	beq.n	8009a68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a54:	4b91      	ldr	r3, [pc, #580]	@ (8009c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	08db      	lsrs	r3, r3, #3
 8009a5a:	f003 0303 	and.w	r3, r3, #3
 8009a5e:	4a90      	ldr	r2, [pc, #576]	@ (8009ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a60:	fa22 f303 	lsr.w	r3, r2, r3
 8009a64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009a66:	e111      	b.n	8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009a68:	4b8d      	ldr	r3, [pc, #564]	@ (8009ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a6a:	61bb      	str	r3, [r7, #24]
      break;
 8009a6c:	e10e      	b.n	8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009a6e:	4b8d      	ldr	r3, [pc, #564]	@ (8009ca4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a70:	61bb      	str	r3, [r7, #24]
      break;
 8009a72:	e10b      	b.n	8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009a74:	4b8c      	ldr	r3, [pc, #560]	@ (8009ca8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009a76:	61bb      	str	r3, [r7, #24]
      break;
 8009a78:	e108      	b.n	8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a7a:	4b88      	ldr	r3, [pc, #544]	@ (8009c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a7e:	f003 0303 	and.w	r3, r3, #3
 8009a82:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009a84:	4b85      	ldr	r3, [pc, #532]	@ (8009c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a88:	091b      	lsrs	r3, r3, #4
 8009a8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a8e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009a90:	4b82      	ldr	r3, [pc, #520]	@ (8009c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a94:	f003 0301 	and.w	r3, r3, #1
 8009a98:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009a9a:	4b80      	ldr	r3, [pc, #512]	@ (8009c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a9e:	08db      	lsrs	r3, r3, #3
 8009aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	fb02 f303 	mul.w	r3, r2, r3
 8009aaa:	ee07 3a90 	vmov	s15, r3
 8009aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 80e1 	beq.w	8009c80 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	f000 8083 	beq.w	8009bcc <HAL_RCC_GetSysClockFreq+0x204>
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	f200 80a1 	bhi.w	8009c10 <HAL_RCC_GetSysClockFreq+0x248>
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d003      	beq.n	8009adc <HAL_RCC_GetSysClockFreq+0x114>
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d056      	beq.n	8009b88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009ada:	e099      	b.n	8009c10 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009adc:	4b6f      	ldr	r3, [pc, #444]	@ (8009c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 0320 	and.w	r3, r3, #32
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d02d      	beq.n	8009b44 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ae8:	4b6c      	ldr	r3, [pc, #432]	@ (8009c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	08db      	lsrs	r3, r3, #3
 8009aee:	f003 0303 	and.w	r3, r3, #3
 8009af2:	4a6b      	ldr	r2, [pc, #428]	@ (8009ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009af4:	fa22 f303 	lsr.w	r3, r2, r3
 8009af8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	ee07 3a90 	vmov	s15, r3
 8009b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	ee07 3a90 	vmov	s15, r3
 8009b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b12:	4b62      	ldr	r3, [pc, #392]	@ (8009c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b1a:	ee07 3a90 	vmov	s15, r3
 8009b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b26:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b3e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009b42:	e087      	b.n	8009c54 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	ee07 3a90 	vmov	s15, r3
 8009b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b4e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009cb0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b56:	4b51      	ldr	r3, [pc, #324]	@ (8009c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b5e:	ee07 3a90 	vmov	s15, r3
 8009b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b6a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b86:	e065      	b.n	8009c54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	ee07 3a90 	vmov	s15, r3
 8009b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b92:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009cb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b9a:	4b40      	ldr	r3, [pc, #256]	@ (8009c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ba2:	ee07 3a90 	vmov	s15, r3
 8009ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009baa:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009bca:	e043      	b.n	8009c54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	ee07 3a90 	vmov	s15, r3
 8009bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009cb8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bde:	4b2f      	ldr	r3, [pc, #188]	@ (8009c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be6:	ee07 3a90 	vmov	s15, r3
 8009bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bee:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bf2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c0e:	e021      	b.n	8009c54 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	ee07 3a90 	vmov	s15, r3
 8009c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c1a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009cb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c22:	4b1e      	ldr	r3, [pc, #120]	@ (8009c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c2a:	ee07 3a90 	vmov	s15, r3
 8009c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c32:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c36:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c52:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009c54:	4b11      	ldr	r3, [pc, #68]	@ (8009c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c58:	0a5b      	lsrs	r3, r3, #9
 8009c5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c5e:	3301      	adds	r3, #1
 8009c60:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	ee07 3a90 	vmov	s15, r3
 8009c68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009c6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c78:	ee17 3a90 	vmov	r3, s15
 8009c7c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009c7e:	e005      	b.n	8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009c80:	2300      	movs	r3, #0
 8009c82:	61bb      	str	r3, [r7, #24]
      break;
 8009c84:	e002      	b.n	8009c8c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009c86:	4b07      	ldr	r3, [pc, #28]	@ (8009ca4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009c88:	61bb      	str	r3, [r7, #24]
      break;
 8009c8a:	bf00      	nop
  }

  return sysclockfreq;
 8009c8c:	69bb      	ldr	r3, [r7, #24]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3724      	adds	r7, #36	@ 0x24
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	58024400 	.word	0x58024400
 8009ca0:	03d09000 	.word	0x03d09000
 8009ca4:	003d0900 	.word	0x003d0900
 8009ca8:	017d7840 	.word	0x017d7840
 8009cac:	46000000 	.word	0x46000000
 8009cb0:	4c742400 	.word	0x4c742400
 8009cb4:	4a742400 	.word	0x4a742400
 8009cb8:	4bbebc20 	.word	0x4bbebc20

08009cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009cc2:	f7ff fe81 	bl	80099c8 <HAL_RCC_GetSysClockFreq>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	4b10      	ldr	r3, [pc, #64]	@ (8009d0c <HAL_RCC_GetHCLKFreq+0x50>)
 8009cca:	699b      	ldr	r3, [r3, #24]
 8009ccc:	0a1b      	lsrs	r3, r3, #8
 8009cce:	f003 030f 	and.w	r3, r3, #15
 8009cd2:	490f      	ldr	r1, [pc, #60]	@ (8009d10 <HAL_RCC_GetHCLKFreq+0x54>)
 8009cd4:	5ccb      	ldrb	r3, [r1, r3]
 8009cd6:	f003 031f 	and.w	r3, r3, #31
 8009cda:	fa22 f303 	lsr.w	r3, r2, r3
 8009cde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8009d0c <HAL_RCC_GetHCLKFreq+0x50>)
 8009ce2:	699b      	ldr	r3, [r3, #24]
 8009ce4:	f003 030f 	and.w	r3, r3, #15
 8009ce8:	4a09      	ldr	r2, [pc, #36]	@ (8009d10 <HAL_RCC_GetHCLKFreq+0x54>)
 8009cea:	5cd3      	ldrb	r3, [r2, r3]
 8009cec:	f003 031f 	and.w	r3, r3, #31
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8009cf6:	4a07      	ldr	r2, [pc, #28]	@ (8009d14 <HAL_RCC_GetHCLKFreq+0x58>)
 8009cf8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009cfa:	4a07      	ldr	r2, [pc, #28]	@ (8009d18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009d00:	4b04      	ldr	r3, [pc, #16]	@ (8009d14 <HAL_RCC_GetHCLKFreq+0x58>)
 8009d02:	681b      	ldr	r3, [r3, #0]
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	58024400 	.word	0x58024400
 8009d10:	08014774 	.word	0x08014774
 8009d14:	24000054 	.word	0x24000054
 8009d18:	24000050 	.word	0x24000050

08009d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009d20:	f7ff ffcc 	bl	8009cbc <HAL_RCC_GetHCLKFreq>
 8009d24:	4602      	mov	r2, r0
 8009d26:	4b06      	ldr	r3, [pc, #24]	@ (8009d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d28:	69db      	ldr	r3, [r3, #28]
 8009d2a:	091b      	lsrs	r3, r3, #4
 8009d2c:	f003 0307 	and.w	r3, r3, #7
 8009d30:	4904      	ldr	r1, [pc, #16]	@ (8009d44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d32:	5ccb      	ldrb	r3, [r1, r3]
 8009d34:	f003 031f 	and.w	r3, r3, #31
 8009d38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	58024400 	.word	0x58024400
 8009d44:	08014774 	.word	0x08014774

08009d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009d4c:	f7ff ffb6 	bl	8009cbc <HAL_RCC_GetHCLKFreq>
 8009d50:	4602      	mov	r2, r0
 8009d52:	4b06      	ldr	r3, [pc, #24]	@ (8009d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d54:	69db      	ldr	r3, [r3, #28]
 8009d56:	0a1b      	lsrs	r3, r3, #8
 8009d58:	f003 0307 	and.w	r3, r3, #7
 8009d5c:	4904      	ldr	r1, [pc, #16]	@ (8009d70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d5e:	5ccb      	ldrb	r3, [r1, r3]
 8009d60:	f003 031f 	and.w	r3, r3, #31
 8009d64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	58024400 	.word	0x58024400
 8009d70:	08014774 	.word	0x08014774

08009d74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d78:	b0ca      	sub	sp, #296	@ 0x128
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d80:	2300      	movs	r3, #0
 8009d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d86:	2300      	movs	r3, #0
 8009d88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d94:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009d98:	2500      	movs	r5, #0
 8009d9a:	ea54 0305 	orrs.w	r3, r4, r5
 8009d9e:	d049      	beq.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009da4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009da6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009daa:	d02f      	beq.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009dac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009db0:	d828      	bhi.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009db2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009db6:	d01a      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009db8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009dbc:	d822      	bhi.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d003      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dc6:	d007      	beq.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009dc8:	e01c      	b.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dca:	4bb8      	ldr	r3, [pc, #736]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dce:	4ab7      	ldr	r2, [pc, #732]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009dd6:	e01a      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ddc:	3308      	adds	r3, #8
 8009dde:	2102      	movs	r1, #2
 8009de0:	4618      	mov	r0, r3
 8009de2:	f002 fb61 	bl	800c4a8 <RCCEx_PLL2_Config>
 8009de6:	4603      	mov	r3, r0
 8009de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009dec:	e00f      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009df2:	3328      	adds	r3, #40	@ 0x28
 8009df4:	2102      	movs	r1, #2
 8009df6:	4618      	mov	r0, r3
 8009df8:	f002 fc08 	bl	800c60c <RCCEx_PLL3_Config>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009e02:	e004      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e0a:	e000      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10a      	bne.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009e16:	4ba5      	ldr	r3, [pc, #660]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e1a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e24:	4aa1      	ldr	r2, [pc, #644]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e26:	430b      	orrs	r3, r1
 8009e28:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e2a:	e003      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009e40:	f04f 0900 	mov.w	r9, #0
 8009e44:	ea58 0309 	orrs.w	r3, r8, r9
 8009e48:	d047      	beq.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e50:	2b04      	cmp	r3, #4
 8009e52:	d82a      	bhi.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009e54:	a201      	add	r2, pc, #4	@ (adr r2, 8009e5c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5a:	bf00      	nop
 8009e5c:	08009e71 	.word	0x08009e71
 8009e60:	08009e7f 	.word	0x08009e7f
 8009e64:	08009e95 	.word	0x08009e95
 8009e68:	08009eb3 	.word	0x08009eb3
 8009e6c:	08009eb3 	.word	0x08009eb3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e70:	4b8e      	ldr	r3, [pc, #568]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e74:	4a8d      	ldr	r2, [pc, #564]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e7c:	e01a      	b.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e82:	3308      	adds	r3, #8
 8009e84:	2100      	movs	r1, #0
 8009e86:	4618      	mov	r0, r3
 8009e88:	f002 fb0e 	bl	800c4a8 <RCCEx_PLL2_Config>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e92:	e00f      	b.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e98:	3328      	adds	r3, #40	@ 0x28
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f002 fbb5 	bl	800c60c <RCCEx_PLL3_Config>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ea8:	e004      	b.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009eb0:	e000      	b.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d10a      	bne.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009ebc:	4b7b      	ldr	r3, [pc, #492]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ec0:	f023 0107 	bic.w	r1, r3, #7
 8009ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009eca:	4a78      	ldr	r2, [pc, #480]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ecc:	430b      	orrs	r3, r1
 8009ece:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ed0:	e003      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ed6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009ee6:	f04f 0b00 	mov.w	fp, #0
 8009eea:	ea5a 030b 	orrs.w	r3, sl, fp
 8009eee:	d04c      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ef6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009efa:	d030      	beq.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009efc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f00:	d829      	bhi.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009f02:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f04:	d02d      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009f06:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f08:	d825      	bhi.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009f0a:	2b80      	cmp	r3, #128	@ 0x80
 8009f0c:	d018      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009f0e:	2b80      	cmp	r3, #128	@ 0x80
 8009f10:	d821      	bhi.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d002      	beq.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009f16:	2b40      	cmp	r3, #64	@ 0x40
 8009f18:	d007      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009f1a:	e01c      	b.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f1c:	4b63      	ldr	r3, [pc, #396]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f20:	4a62      	ldr	r2, [pc, #392]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009f28:	e01c      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f2e:	3308      	adds	r3, #8
 8009f30:	2100      	movs	r1, #0
 8009f32:	4618      	mov	r0, r3
 8009f34:	f002 fab8 	bl	800c4a8 <RCCEx_PLL2_Config>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009f3e:	e011      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f44:	3328      	adds	r3, #40	@ 0x28
 8009f46:	2100      	movs	r1, #0
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f002 fb5f 	bl	800c60c <RCCEx_PLL3_Config>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009f54:	e006      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f5c:	e002      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009f5e:	bf00      	nop
 8009f60:	e000      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10a      	bne.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009f6c:	4b4f      	ldr	r3, [pc, #316]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f70:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f7a:	4a4c      	ldr	r2, [pc, #304]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f7c:	430b      	orrs	r3, r1
 8009f7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009f80:	e003      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f92:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009f96:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009fa0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	d053      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009fb2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009fb6:	d035      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009fb8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009fbc:	d82e      	bhi.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009fbe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009fc2:	d031      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009fc4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009fc8:	d828      	bhi.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009fca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009fce:	d01a      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009fd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009fd4:	d822      	bhi.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d003      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009fda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009fde:	d007      	beq.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009fe0:	e01c      	b.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fe2:	4b32      	ldr	r3, [pc, #200]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe6:	4a31      	ldr	r2, [pc, #196]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fee:	e01c      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff4:	3308      	adds	r3, #8
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f002 fa55 	bl	800c4a8 <RCCEx_PLL2_Config>
 8009ffe:	4603      	mov	r3, r0
 800a000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a004:	e011      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a00a:	3328      	adds	r3, #40	@ 0x28
 800a00c:	2100      	movs	r1, #0
 800a00e:	4618      	mov	r0, r3
 800a010:	f002 fafc 	bl	800c60c <RCCEx_PLL3_Config>
 800a014:	4603      	mov	r3, r0
 800a016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a01a:	e006      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a022:	e002      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a024:	bf00      	nop
 800a026:	e000      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a02a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10b      	bne.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a032:	4b1e      	ldr	r3, [pc, #120]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a036:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a03e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a042:	4a1a      	ldr	r2, [pc, #104]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a044:	430b      	orrs	r3, r1
 800a046:	6593      	str	r3, [r2, #88]	@ 0x58
 800a048:	e003      	b.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a04a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a04e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a05e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a062:	2300      	movs	r3, #0
 800a064:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a068:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a06c:	460b      	mov	r3, r1
 800a06e:	4313      	orrs	r3, r2
 800a070:	d056      	beq.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a076:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a07a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a07e:	d038      	beq.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a080:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a084:	d831      	bhi.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a086:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a08a:	d034      	beq.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a08c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a090:	d82b      	bhi.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a092:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a096:	d01d      	beq.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a098:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a09c:	d825      	bhi.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d006      	beq.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a0a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a0a6:	d00a      	beq.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a0a8:	e01f      	b.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a0aa:	bf00      	nop
 800a0ac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0b0:	4ba2      	ldr	r3, [pc, #648]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0b4:	4aa1      	ldr	r2, [pc, #644]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a0bc:	e01c      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0c2:	3308      	adds	r3, #8
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f002 f9ee 	bl	800c4a8 <RCCEx_PLL2_Config>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a0d2:	e011      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0d8:	3328      	adds	r3, #40	@ 0x28
 800a0da:	2100      	movs	r1, #0
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f002 fa95 	bl	800c60c <RCCEx_PLL3_Config>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a0e8:	e006      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a0f0:	e002      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a0f2:	bf00      	nop
 800a0f4:	e000      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a0f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10b      	bne.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a100:	4b8e      	ldr	r3, [pc, #568]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a104:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a10c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a110:	4a8a      	ldr	r2, [pc, #552]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a112:	430b      	orrs	r3, r1
 800a114:	6593      	str	r3, [r2, #88]	@ 0x58
 800a116:	e003      	b.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a118:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a11c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a128:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a12c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a130:	2300      	movs	r3, #0
 800a132:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a136:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a13a:	460b      	mov	r3, r1
 800a13c:	4313      	orrs	r3, r2
 800a13e:	d03a      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a146:	2b30      	cmp	r3, #48	@ 0x30
 800a148:	d01f      	beq.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a14a:	2b30      	cmp	r3, #48	@ 0x30
 800a14c:	d819      	bhi.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a14e:	2b20      	cmp	r3, #32
 800a150:	d00c      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a152:	2b20      	cmp	r3, #32
 800a154:	d815      	bhi.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a156:	2b00      	cmp	r3, #0
 800a158:	d019      	beq.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a15a:	2b10      	cmp	r3, #16
 800a15c:	d111      	bne.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a15e:	4b77      	ldr	r3, [pc, #476]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a162:	4a76      	ldr	r2, [pc, #472]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a164:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a168:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a16a:	e011      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a16c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a170:	3308      	adds	r3, #8
 800a172:	2102      	movs	r1, #2
 800a174:	4618      	mov	r0, r3
 800a176:	f002 f997 	bl	800c4a8 <RCCEx_PLL2_Config>
 800a17a:	4603      	mov	r3, r0
 800a17c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a180:	e006      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a188:	e002      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a18a:	bf00      	nop
 800a18c:	e000      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a18e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a190:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10a      	bne.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a198:	4b68      	ldr	r3, [pc, #416]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a19a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a19c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1a6:	4a65      	ldr	r2, [pc, #404]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1a8:	430b      	orrs	r3, r1
 800a1aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a1ac:	e003      	b.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a1c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a1cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	d051      	beq.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1e0:	d035      	beq.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a1e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1e6:	d82e      	bhi.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a1e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a1ec:	d031      	beq.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a1ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a1f2:	d828      	bhi.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a1f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1f8:	d01a      	beq.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a1fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1fe:	d822      	bhi.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a200:	2b00      	cmp	r3, #0
 800a202:	d003      	beq.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a208:	d007      	beq.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a20a:	e01c      	b.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a20c:	4b4b      	ldr	r3, [pc, #300]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a210:	4a4a      	ldr	r2, [pc, #296]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a212:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a216:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a218:	e01c      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a21a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a21e:	3308      	adds	r3, #8
 800a220:	2100      	movs	r1, #0
 800a222:	4618      	mov	r0, r3
 800a224:	f002 f940 	bl	800c4a8 <RCCEx_PLL2_Config>
 800a228:	4603      	mov	r3, r0
 800a22a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a22e:	e011      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a234:	3328      	adds	r3, #40	@ 0x28
 800a236:	2100      	movs	r1, #0
 800a238:	4618      	mov	r0, r3
 800a23a:	f002 f9e7 	bl	800c60c <RCCEx_PLL3_Config>
 800a23e:	4603      	mov	r3, r0
 800a240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a244:	e006      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a24c:	e002      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a24e:	bf00      	nop
 800a250:	e000      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a252:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a254:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10a      	bne.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a25c:	4b37      	ldr	r3, [pc, #220]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a25e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a260:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a26a:	4a34      	ldr	r2, [pc, #208]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a26c:	430b      	orrs	r3, r1
 800a26e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a270:	e003      	b.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a276:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a282:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a286:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a28a:	2300      	movs	r3, #0
 800a28c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a290:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a294:	460b      	mov	r3, r1
 800a296:	4313      	orrs	r3, r2
 800a298:	d056      	beq.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a29a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a29e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a2a4:	d033      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a2a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a2aa:	d82c      	bhi.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a2ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a2b0:	d02f      	beq.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a2b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a2b6:	d826      	bhi.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a2b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a2bc:	d02b      	beq.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a2be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a2c2:	d820      	bhi.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a2c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2c8:	d012      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a2ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2ce:	d81a      	bhi.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d022      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a2d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2d8:	d115      	bne.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2de:	3308      	adds	r3, #8
 800a2e0:	2101      	movs	r1, #1
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f002 f8e0 	bl	800c4a8 <RCCEx_PLL2_Config>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a2ee:	e015      	b.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2f4:	3328      	adds	r3, #40	@ 0x28
 800a2f6:	2101      	movs	r1, #1
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f002 f987 	bl	800c60c <RCCEx_PLL3_Config>
 800a2fe:	4603      	mov	r3, r0
 800a300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a304:	e00a      	b.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a30c:	e006      	b.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a30e:	bf00      	nop
 800a310:	e004      	b.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a312:	bf00      	nop
 800a314:	e002      	b.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a316:	bf00      	nop
 800a318:	e000      	b.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a31a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a31c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a320:	2b00      	cmp	r3, #0
 800a322:	d10d      	bne.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a324:	4b05      	ldr	r3, [pc, #20]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a328:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a330:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a332:	4a02      	ldr	r2, [pc, #8]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a334:	430b      	orrs	r3, r1
 800a336:	6513      	str	r3, [r2, #80]	@ 0x50
 800a338:	e006      	b.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a33a:	bf00      	nop
 800a33c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a344:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a358:	2300      	movs	r3, #0
 800a35a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a35e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a362:	460b      	mov	r3, r1
 800a364:	4313      	orrs	r3, r2
 800a366:	d055      	beq.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a36c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a370:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a374:	d033      	beq.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a376:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a37a:	d82c      	bhi.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a37c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a380:	d02f      	beq.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a386:	d826      	bhi.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a388:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a38c:	d02b      	beq.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a38e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a392:	d820      	bhi.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a398:	d012      	beq.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a39a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a39e:	d81a      	bhi.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d022      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a3a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3a8:	d115      	bne.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ae:	3308      	adds	r3, #8
 800a3b0:	2101      	movs	r1, #1
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f002 f878 	bl	800c4a8 <RCCEx_PLL2_Config>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a3be:	e015      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3c4:	3328      	adds	r3, #40	@ 0x28
 800a3c6:	2101      	movs	r1, #1
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f002 f91f 	bl	800c60c <RCCEx_PLL3_Config>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a3d4:	e00a      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a3dc:	e006      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a3de:	bf00      	nop
 800a3e0:	e004      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a3e2:	bf00      	nop
 800a3e4:	e002      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a3e6:	bf00      	nop
 800a3e8:	e000      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a3ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10b      	bne.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a3f4:	4ba3      	ldr	r3, [pc, #652]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3f8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a3fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a400:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a404:	4a9f      	ldr	r2, [pc, #636]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a406:	430b      	orrs	r3, r1
 800a408:	6593      	str	r3, [r2, #88]	@ 0x58
 800a40a:	e003      	b.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a40c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a410:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a420:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a424:	2300      	movs	r3, #0
 800a426:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a42a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a42e:	460b      	mov	r3, r1
 800a430:	4313      	orrs	r3, r2
 800a432:	d037      	beq.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a43a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a43e:	d00e      	beq.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a440:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a444:	d816      	bhi.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a446:	2b00      	cmp	r3, #0
 800a448:	d018      	beq.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a44a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a44e:	d111      	bne.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a450:	4b8c      	ldr	r3, [pc, #560]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a454:	4a8b      	ldr	r2, [pc, #556]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a45a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a45c:	e00f      	b.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a45e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a462:	3308      	adds	r3, #8
 800a464:	2101      	movs	r1, #1
 800a466:	4618      	mov	r0, r3
 800a468:	f002 f81e 	bl	800c4a8 <RCCEx_PLL2_Config>
 800a46c:	4603      	mov	r3, r0
 800a46e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a472:	e004      	b.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a47a:	e000      	b.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a47c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a47e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10a      	bne.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a486:	4b7f      	ldr	r3, [pc, #508]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a48a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a48e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a494:	4a7b      	ldr	r2, [pc, #492]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a496:	430b      	orrs	r3, r1
 800a498:	6513      	str	r3, [r2, #80]	@ 0x50
 800a49a:	e003      	b.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a49c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a4a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a4b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a4ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a4be:	460b      	mov	r3, r1
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	d039      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a4c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4ca:	2b03      	cmp	r3, #3
 800a4cc:	d81c      	bhi.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a4ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d4:	0800a511 	.word	0x0800a511
 800a4d8:	0800a4e5 	.word	0x0800a4e5
 800a4dc:	0800a4f3 	.word	0x0800a4f3
 800a4e0:	0800a511 	.word	0x0800a511
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4e4:	4b67      	ldr	r3, [pc, #412]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e8:	4a66      	ldr	r2, [pc, #408]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a4f0:	e00f      	b.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a4f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4f6:	3308      	adds	r3, #8
 800a4f8:	2102      	movs	r1, #2
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f001 ffd4 	bl	800c4a8 <RCCEx_PLL2_Config>
 800a500:	4603      	mov	r3, r0
 800a502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a506:	e004      	b.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a508:	2301      	movs	r3, #1
 800a50a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a50e:	e000      	b.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a510:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10a      	bne.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a51a:	4b5a      	ldr	r3, [pc, #360]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a51c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a51e:	f023 0103 	bic.w	r1, r3, #3
 800a522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a528:	4a56      	ldr	r2, [pc, #344]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a52a:	430b      	orrs	r3, r1
 800a52c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a52e:	e003      	b.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a534:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a540:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a544:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a548:	2300      	movs	r3, #0
 800a54a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a54e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a552:	460b      	mov	r3, r1
 800a554:	4313      	orrs	r3, r2
 800a556:	f000 809f 	beq.w	800a698 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a55a:	4b4b      	ldr	r3, [pc, #300]	@ (800a688 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a4a      	ldr	r2, [pc, #296]	@ (800a688 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a564:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a566:	f7fc fb73 	bl	8006c50 <HAL_GetTick>
 800a56a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a56e:	e00b      	b.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a570:	f7fc fb6e 	bl	8006c50 <HAL_GetTick>
 800a574:	4602      	mov	r2, r0
 800a576:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a57a:	1ad3      	subs	r3, r2, r3
 800a57c:	2b64      	cmp	r3, #100	@ 0x64
 800a57e:	d903      	bls.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a580:	2303      	movs	r3, #3
 800a582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a586:	e005      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a588:	4b3f      	ldr	r3, [pc, #252]	@ (800a688 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a590:	2b00      	cmp	r3, #0
 800a592:	d0ed      	beq.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d179      	bne.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a59c:	4b39      	ldr	r3, [pc, #228]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a59e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a5a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a5a8:	4053      	eors	r3, r2
 800a5aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d015      	beq.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a5b2:	4b34      	ldr	r3, [pc, #208]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a5be:	4b31      	ldr	r3, [pc, #196]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5c2:	4a30      	ldr	r2, [pc, #192]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5c8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a5ca:	4b2e      	ldr	r3, [pc, #184]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5ce:	4a2d      	ldr	r2, [pc, #180]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5d4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a5d6:	4a2b      	ldr	r2, [pc, #172]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a5dc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a5e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5ea:	d118      	bne.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5ec:	f7fc fb30 	bl	8006c50 <HAL_GetTick>
 800a5f0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5f4:	e00d      	b.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5f6:	f7fc fb2b 	bl	8006c50 <HAL_GetTick>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a600:	1ad2      	subs	r2, r2, r3
 800a602:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a606:	429a      	cmp	r2, r3
 800a608:	d903      	bls.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a60a:	2303      	movs	r3, #3
 800a60c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800a610:	e005      	b.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a612:	4b1c      	ldr	r3, [pc, #112]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a616:	f003 0302 	and.w	r3, r3, #2
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d0eb      	beq.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a61e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a622:	2b00      	cmp	r3, #0
 800a624:	d129      	bne.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a62a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a62e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a632:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a636:	d10e      	bne.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a638:	4b12      	ldr	r3, [pc, #72]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a644:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a648:	091a      	lsrs	r2, r3, #4
 800a64a:	4b10      	ldr	r3, [pc, #64]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a64c:	4013      	ands	r3, r2
 800a64e:	4a0d      	ldr	r2, [pc, #52]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a650:	430b      	orrs	r3, r1
 800a652:	6113      	str	r3, [r2, #16]
 800a654:	e005      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a656:	4b0b      	ldr	r3, [pc, #44]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	4a0a      	ldr	r2, [pc, #40]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a65c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a660:	6113      	str	r3, [r2, #16]
 800a662:	4b08      	ldr	r3, [pc, #32]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a664:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a66a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a66e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a672:	4a04      	ldr	r2, [pc, #16]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a674:	430b      	orrs	r3, r1
 800a676:	6713      	str	r3, [r2, #112]	@ 0x70
 800a678:	e00e      	b.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a67a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a67e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800a682:	e009      	b.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a684:	58024400 	.word	0x58024400
 800a688:	58024800 	.word	0x58024800
 800a68c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a694:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a0:	f002 0301 	and.w	r3, r2, #1
 800a6a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a6ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	f000 8089 	beq.w	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a6c0:	2b28      	cmp	r3, #40	@ 0x28
 800a6c2:	d86b      	bhi.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a6c4:	a201      	add	r2, pc, #4	@ (adr r2, 800a6cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ca:	bf00      	nop
 800a6cc:	0800a7a5 	.word	0x0800a7a5
 800a6d0:	0800a79d 	.word	0x0800a79d
 800a6d4:	0800a79d 	.word	0x0800a79d
 800a6d8:	0800a79d 	.word	0x0800a79d
 800a6dc:	0800a79d 	.word	0x0800a79d
 800a6e0:	0800a79d 	.word	0x0800a79d
 800a6e4:	0800a79d 	.word	0x0800a79d
 800a6e8:	0800a79d 	.word	0x0800a79d
 800a6ec:	0800a771 	.word	0x0800a771
 800a6f0:	0800a79d 	.word	0x0800a79d
 800a6f4:	0800a79d 	.word	0x0800a79d
 800a6f8:	0800a79d 	.word	0x0800a79d
 800a6fc:	0800a79d 	.word	0x0800a79d
 800a700:	0800a79d 	.word	0x0800a79d
 800a704:	0800a79d 	.word	0x0800a79d
 800a708:	0800a79d 	.word	0x0800a79d
 800a70c:	0800a787 	.word	0x0800a787
 800a710:	0800a79d 	.word	0x0800a79d
 800a714:	0800a79d 	.word	0x0800a79d
 800a718:	0800a79d 	.word	0x0800a79d
 800a71c:	0800a79d 	.word	0x0800a79d
 800a720:	0800a79d 	.word	0x0800a79d
 800a724:	0800a79d 	.word	0x0800a79d
 800a728:	0800a79d 	.word	0x0800a79d
 800a72c:	0800a7a5 	.word	0x0800a7a5
 800a730:	0800a79d 	.word	0x0800a79d
 800a734:	0800a79d 	.word	0x0800a79d
 800a738:	0800a79d 	.word	0x0800a79d
 800a73c:	0800a79d 	.word	0x0800a79d
 800a740:	0800a79d 	.word	0x0800a79d
 800a744:	0800a79d 	.word	0x0800a79d
 800a748:	0800a79d 	.word	0x0800a79d
 800a74c:	0800a7a5 	.word	0x0800a7a5
 800a750:	0800a79d 	.word	0x0800a79d
 800a754:	0800a79d 	.word	0x0800a79d
 800a758:	0800a79d 	.word	0x0800a79d
 800a75c:	0800a79d 	.word	0x0800a79d
 800a760:	0800a79d 	.word	0x0800a79d
 800a764:	0800a79d 	.word	0x0800a79d
 800a768:	0800a79d 	.word	0x0800a79d
 800a76c:	0800a7a5 	.word	0x0800a7a5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a774:	3308      	adds	r3, #8
 800a776:	2101      	movs	r1, #1
 800a778:	4618      	mov	r0, r3
 800a77a:	f001 fe95 	bl	800c4a8 <RCCEx_PLL2_Config>
 800a77e:	4603      	mov	r3, r0
 800a780:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a784:	e00f      	b.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a78a:	3328      	adds	r3, #40	@ 0x28
 800a78c:	2101      	movs	r1, #1
 800a78e:	4618      	mov	r0, r3
 800a790:	f001 ff3c 	bl	800c60c <RCCEx_PLL3_Config>
 800a794:	4603      	mov	r3, r0
 800a796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a79a:	e004      	b.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a7a2:	e000      	b.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a7a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d10a      	bne.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a7ae:	4bbf      	ldr	r3, [pc, #764]	@ (800aaac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7b2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a7b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7bc:	4abb      	ldr	r2, [pc, #748]	@ (800aaac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7be:	430b      	orrs	r3, r1
 800a7c0:	6553      	str	r3, [r2, #84]	@ 0x54
 800a7c2:	e003      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a7cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d4:	f002 0302 	and.w	r3, r2, #2
 800a7d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a7dc:	2300      	movs	r3, #0
 800a7de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a7e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	d041      	beq.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a7ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7f2:	2b05      	cmp	r3, #5
 800a7f4:	d824      	bhi.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a7f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a7fc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7fc:	0800a849 	.word	0x0800a849
 800a800:	0800a815 	.word	0x0800a815
 800a804:	0800a82b 	.word	0x0800a82b
 800a808:	0800a849 	.word	0x0800a849
 800a80c:	0800a849 	.word	0x0800a849
 800a810:	0800a849 	.word	0x0800a849
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a818:	3308      	adds	r3, #8
 800a81a:	2101      	movs	r1, #1
 800a81c:	4618      	mov	r0, r3
 800a81e:	f001 fe43 	bl	800c4a8 <RCCEx_PLL2_Config>
 800a822:	4603      	mov	r3, r0
 800a824:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a828:	e00f      	b.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a82a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a82e:	3328      	adds	r3, #40	@ 0x28
 800a830:	2101      	movs	r1, #1
 800a832:	4618      	mov	r0, r3
 800a834:	f001 feea 	bl	800c60c <RCCEx_PLL3_Config>
 800a838:	4603      	mov	r3, r0
 800a83a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a83e:	e004      	b.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a840:	2301      	movs	r3, #1
 800a842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a846:	e000      	b.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a84a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d10a      	bne.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a852:	4b96      	ldr	r3, [pc, #600]	@ (800aaac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a856:	f023 0107 	bic.w	r1, r3, #7
 800a85a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a85e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a860:	4a92      	ldr	r2, [pc, #584]	@ (800aaac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a862:	430b      	orrs	r3, r1
 800a864:	6553      	str	r3, [r2, #84]	@ 0x54
 800a866:	e003      	b.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a86c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a878:	f002 0304 	and.w	r3, r2, #4
 800a87c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a880:	2300      	movs	r3, #0
 800a882:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a886:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a88a:	460b      	mov	r3, r1
 800a88c:	4313      	orrs	r3, r2
 800a88e:	d044      	beq.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a894:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a898:	2b05      	cmp	r3, #5
 800a89a:	d825      	bhi.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a89c:	a201      	add	r2, pc, #4	@ (adr r2, 800a8a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a2:	bf00      	nop
 800a8a4:	0800a8f1 	.word	0x0800a8f1
 800a8a8:	0800a8bd 	.word	0x0800a8bd
 800a8ac:	0800a8d3 	.word	0x0800a8d3
 800a8b0:	0800a8f1 	.word	0x0800a8f1
 800a8b4:	0800a8f1 	.word	0x0800a8f1
 800a8b8:	0800a8f1 	.word	0x0800a8f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8c0:	3308      	adds	r3, #8
 800a8c2:	2101      	movs	r1, #1
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f001 fdef 	bl	800c4a8 <RCCEx_PLL2_Config>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a8d0:	e00f      	b.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8d6:	3328      	adds	r3, #40	@ 0x28
 800a8d8:	2101      	movs	r1, #1
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f001 fe96 	bl	800c60c <RCCEx_PLL3_Config>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a8e6:	e004      	b.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a8ee:	e000      	b.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a8f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10b      	bne.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a8fa:	4b6c      	ldr	r3, [pc, #432]	@ (800aaac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8fe:	f023 0107 	bic.w	r1, r3, #7
 800a902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a906:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a90a:	4a68      	ldr	r2, [pc, #416]	@ (800aaac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a90c:	430b      	orrs	r3, r1
 800a90e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a910:	e003      	b.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a916:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a91a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a922:	f002 0320 	and.w	r3, r2, #32
 800a926:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a92a:	2300      	movs	r3, #0
 800a92c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a930:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a934:	460b      	mov	r3, r1
 800a936:	4313      	orrs	r3, r2
 800a938:	d055      	beq.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a93a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a93e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a942:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a946:	d033      	beq.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a948:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a94c:	d82c      	bhi.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a94e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a952:	d02f      	beq.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a958:	d826      	bhi.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a95a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a95e:	d02b      	beq.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a960:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a964:	d820      	bhi.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a966:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a96a:	d012      	beq.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a96c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a970:	d81a      	bhi.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a972:	2b00      	cmp	r3, #0
 800a974:	d022      	beq.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a976:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a97a:	d115      	bne.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a980:	3308      	adds	r3, #8
 800a982:	2100      	movs	r1, #0
 800a984:	4618      	mov	r0, r3
 800a986:	f001 fd8f 	bl	800c4a8 <RCCEx_PLL2_Config>
 800a98a:	4603      	mov	r3, r0
 800a98c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a990:	e015      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a996:	3328      	adds	r3, #40	@ 0x28
 800a998:	2102      	movs	r1, #2
 800a99a:	4618      	mov	r0, r3
 800a99c:	f001 fe36 	bl	800c60c <RCCEx_PLL3_Config>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a9a6:	e00a      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a9ae:	e006      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a9b0:	bf00      	nop
 800a9b2:	e004      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a9b4:	bf00      	nop
 800a9b6:	e002      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a9b8:	bf00      	nop
 800a9ba:	e000      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a9bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d10b      	bne.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a9c6:	4b39      	ldr	r3, [pc, #228]	@ (800aaac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a9c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a9ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9d6:	4a35      	ldr	r2, [pc, #212]	@ (800aaac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a9d8:	430b      	orrs	r3, r1
 800a9da:	6553      	str	r3, [r2, #84]	@ 0x54
 800a9dc:	e003      	b.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a9e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a9f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a9fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800aa00:	460b      	mov	r3, r1
 800aa02:	4313      	orrs	r3, r2
 800aa04:	d058      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800aa06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa0e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aa12:	d033      	beq.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800aa14:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aa18:	d82c      	bhi.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aa1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa1e:	d02f      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800aa20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa24:	d826      	bhi.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aa26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa2a:	d02b      	beq.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800aa2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa30:	d820      	bhi.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aa32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa36:	d012      	beq.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800aa38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa3c:	d81a      	bhi.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d022      	beq.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800aa42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa46:	d115      	bne.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa4c:	3308      	adds	r3, #8
 800aa4e:	2100      	movs	r1, #0
 800aa50:	4618      	mov	r0, r3
 800aa52:	f001 fd29 	bl	800c4a8 <RCCEx_PLL2_Config>
 800aa56:	4603      	mov	r3, r0
 800aa58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aa5c:	e015      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa62:	3328      	adds	r3, #40	@ 0x28
 800aa64:	2102      	movs	r1, #2
 800aa66:	4618      	mov	r0, r3
 800aa68:	f001 fdd0 	bl	800c60c <RCCEx_PLL3_Config>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aa72:	e00a      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aa7a:	e006      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aa7c:	bf00      	nop
 800aa7e:	e004      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aa80:	bf00      	nop
 800aa82:	e002      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aa84:	bf00      	nop
 800aa86:	e000      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aa88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d10e      	bne.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aa92:	4b06      	ldr	r3, [pc, #24]	@ (800aaac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa96:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800aa9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aaa2:	4a02      	ldr	r2, [pc, #8]	@ (800aaac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aaa4:	430b      	orrs	r3, r1
 800aaa6:	6593      	str	r3, [r2, #88]	@ 0x58
 800aaa8:	e006      	b.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800aaaa:	bf00      	nop
 800aaac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aab0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aab4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800aab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800aac4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aac8:	2300      	movs	r3, #0
 800aaca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aace:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800aad2:	460b      	mov	r3, r1
 800aad4:	4313      	orrs	r3, r2
 800aad6:	d055      	beq.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800aad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aadc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aae0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800aae4:	d033      	beq.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800aae6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800aaea:	d82c      	bhi.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aaec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aaf0:	d02f      	beq.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800aaf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aaf6:	d826      	bhi.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aaf8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800aafc:	d02b      	beq.n	800ab56 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800aafe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ab02:	d820      	bhi.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ab04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab08:	d012      	beq.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800ab0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab0e:	d81a      	bhi.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d022      	beq.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800ab14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab18:	d115      	bne.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab1e:	3308      	adds	r3, #8
 800ab20:	2100      	movs	r1, #0
 800ab22:	4618      	mov	r0, r3
 800ab24:	f001 fcc0 	bl	800c4a8 <RCCEx_PLL2_Config>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ab2e:	e015      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab34:	3328      	adds	r3, #40	@ 0x28
 800ab36:	2102      	movs	r1, #2
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f001 fd67 	bl	800c60c <RCCEx_PLL3_Config>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ab44:	e00a      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ab4c:	e006      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ab4e:	bf00      	nop
 800ab50:	e004      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ab52:	bf00      	nop
 800ab54:	e002      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ab56:	bf00      	nop
 800ab58:	e000      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ab5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d10b      	bne.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ab64:	4ba1      	ldr	r3, [pc, #644]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab68:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ab6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab74:	4a9d      	ldr	r2, [pc, #628]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab76:	430b      	orrs	r3, r1
 800ab78:	6593      	str	r3, [r2, #88]	@ 0x58
 800ab7a:	e003      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ab84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8c:	f002 0308 	and.w	r3, r2, #8
 800ab90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ab94:	2300      	movs	r3, #0
 800ab96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ab9a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ab9e:	460b      	mov	r3, r1
 800aba0:	4313      	orrs	r3, r2
 800aba2:	d01e      	beq.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800aba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abb0:	d10c      	bne.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800abb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abb6:	3328      	adds	r3, #40	@ 0x28
 800abb8:	2102      	movs	r1, #2
 800abba:	4618      	mov	r0, r3
 800abbc:	f001 fd26 	bl	800c60c <RCCEx_PLL3_Config>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d002      	beq.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800abc6:	2301      	movs	r3, #1
 800abc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800abcc:	4b87      	ldr	r3, [pc, #540]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abd0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800abd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abdc:	4a83      	ldr	r2, [pc, #524]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abde:	430b      	orrs	r3, r1
 800abe0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800abe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abea:	f002 0310 	and.w	r3, r2, #16
 800abee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800abf2:	2300      	movs	r3, #0
 800abf4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800abf8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800abfc:	460b      	mov	r3, r1
 800abfe:	4313      	orrs	r3, r2
 800ac00:	d01e      	beq.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ac02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ac0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac0e:	d10c      	bne.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac14:	3328      	adds	r3, #40	@ 0x28
 800ac16:	2102      	movs	r1, #2
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f001 fcf7 	bl	800c60c <RCCEx_PLL3_Config>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d002      	beq.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ac2a:	4b70      	ldr	r3, [pc, #448]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ac32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ac3a:	4a6c      	ldr	r2, [pc, #432]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac3c:	430b      	orrs	r3, r1
 800ac3e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ac40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac48:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ac4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac50:	2300      	movs	r3, #0
 800ac52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac56:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	d03e      	beq.n	800acde <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ac60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ac68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac6c:	d022      	beq.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800ac6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac72:	d81b      	bhi.n	800acac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d003      	beq.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ac78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac7c:	d00b      	beq.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ac7e:	e015      	b.n	800acac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac84:	3308      	adds	r3, #8
 800ac86:	2100      	movs	r1, #0
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f001 fc0d 	bl	800c4a8 <RCCEx_PLL2_Config>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ac94:	e00f      	b.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac9a:	3328      	adds	r3, #40	@ 0x28
 800ac9c:	2102      	movs	r1, #2
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f001 fcb4 	bl	800c60c <RCCEx_PLL3_Config>
 800aca4:	4603      	mov	r3, r0
 800aca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800acaa:	e004      	b.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acac:	2301      	movs	r3, #1
 800acae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800acb2:	e000      	b.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800acb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10b      	bne.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800acbe:	4b4b      	ldr	r3, [pc, #300]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acc2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800acc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800acce:	4a47      	ldr	r2, [pc, #284]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acd0:	430b      	orrs	r3, r1
 800acd2:	6593      	str	r3, [r2, #88]	@ 0x58
 800acd4:	e003      	b.n	800acde <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800acde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ace2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800acea:	67bb      	str	r3, [r7, #120]	@ 0x78
 800acec:	2300      	movs	r3, #0
 800acee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800acf0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800acf4:	460b      	mov	r3, r1
 800acf6:	4313      	orrs	r3, r2
 800acf8:	d03b      	beq.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800acfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ad06:	d01f      	beq.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ad08:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ad0c:	d818      	bhi.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ad0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad12:	d003      	beq.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ad14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad18:	d007      	beq.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ad1a:	e011      	b.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad1c:	4b33      	ldr	r3, [pc, #204]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad20:	4a32      	ldr	r2, [pc, #200]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ad28:	e00f      	b.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad2e:	3328      	adds	r3, #40	@ 0x28
 800ad30:	2101      	movs	r1, #1
 800ad32:	4618      	mov	r0, r3
 800ad34:	f001 fc6a 	bl	800c60c <RCCEx_PLL3_Config>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ad3e:	e004      	b.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ad46:	e000      	b.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ad48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d10b      	bne.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ad52:	4b26      	ldr	r3, [pc, #152]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad56:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ad5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad62:	4a22      	ldr	r2, [pc, #136]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad64:	430b      	orrs	r3, r1
 800ad66:	6553      	str	r3, [r2, #84]	@ 0x54
 800ad68:	e003      	b.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ad72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ad7e:	673b      	str	r3, [r7, #112]	@ 0x70
 800ad80:	2300      	movs	r3, #0
 800ad82:	677b      	str	r3, [r7, #116]	@ 0x74
 800ad84:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ad88:	460b      	mov	r3, r1
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	d034      	beq.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ad8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d003      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ad98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad9c:	d007      	beq.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ad9e:	e011      	b.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ada0:	4b12      	ldr	r3, [pc, #72]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ada2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada4:	4a11      	ldr	r2, [pc, #68]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ada6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800adaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800adac:	e00e      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800adae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adb2:	3308      	adds	r3, #8
 800adb4:	2102      	movs	r1, #2
 800adb6:	4618      	mov	r0, r3
 800adb8:	f001 fb76 	bl	800c4a8 <RCCEx_PLL2_Config>
 800adbc:	4603      	mov	r3, r0
 800adbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800adc2:	e003      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800adc4:	2301      	movs	r3, #1
 800adc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800adca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800add0:	2b00      	cmp	r3, #0
 800add2:	d10d      	bne.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800add4:	4b05      	ldr	r3, [pc, #20]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800add6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800add8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800addc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ade0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ade2:	4a02      	ldr	r2, [pc, #8]	@ (800adec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ade4:	430b      	orrs	r3, r1
 800ade6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ade8:	e006      	b.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800adea:	bf00      	nop
 800adec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800adf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800adf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae00:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ae04:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ae06:	2300      	movs	r3, #0
 800ae08:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae0a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ae0e:	460b      	mov	r3, r1
 800ae10:	4313      	orrs	r3, r2
 800ae12:	d00c      	beq.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ae14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae18:	3328      	adds	r3, #40	@ 0x28
 800ae1a:	2102      	movs	r1, #2
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f001 fbf5 	bl	800c60c <RCCEx_PLL3_Config>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d002      	beq.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ae2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae36:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ae3a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	667b      	str	r3, [r7, #100]	@ 0x64
 800ae40:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ae44:	460b      	mov	r3, r1
 800ae46:	4313      	orrs	r3, r2
 800ae48:	d038      	beq.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ae4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae56:	d018      	beq.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ae58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae5c:	d811      	bhi.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ae5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae62:	d014      	beq.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ae64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae68:	d80b      	bhi.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d011      	beq.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ae6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae72:	d106      	bne.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae74:	4bc3      	ldr	r3, [pc, #780]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae78:	4ac2      	ldr	r2, [pc, #776]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ae80:	e008      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae82:	2301      	movs	r3, #1
 800ae84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ae88:	e004      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ae8a:	bf00      	nop
 800ae8c:	e002      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ae8e:	bf00      	nop
 800ae90:	e000      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ae92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10b      	bne.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ae9c:	4bb9      	ldr	r3, [pc, #740]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aea0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800aea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aeac:	4ab5      	ldr	r2, [pc, #724]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aeae:	430b      	orrs	r3, r1
 800aeb0:	6553      	str	r3, [r2, #84]	@ 0x54
 800aeb2:	e003      	b.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aeb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800aebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800aec8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aeca:	2300      	movs	r3, #0
 800aecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aece:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800aed2:	460b      	mov	r3, r1
 800aed4:	4313      	orrs	r3, r2
 800aed6:	d009      	beq.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800aed8:	4baa      	ldr	r3, [pc, #680]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aeda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aedc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800aee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aee6:	4aa7      	ldr	r2, [pc, #668]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aee8:	430b      	orrs	r3, r1
 800aeea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800aeec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800aef8:	653b      	str	r3, [r7, #80]	@ 0x50
 800aefa:	2300      	movs	r3, #0
 800aefc:	657b      	str	r3, [r7, #84]	@ 0x54
 800aefe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800af02:	460b      	mov	r3, r1
 800af04:	4313      	orrs	r3, r2
 800af06:	d00a      	beq.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800af08:	4b9e      	ldr	r3, [pc, #632]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af0a:	691b      	ldr	r3, [r3, #16]
 800af0c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800af10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800af18:	4a9a      	ldr	r2, [pc, #616]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af1a:	430b      	orrs	r3, r1
 800af1c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800af1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af26:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800af2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af2c:	2300      	movs	r3, #0
 800af2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af30:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800af34:	460b      	mov	r3, r1
 800af36:	4313      	orrs	r3, r2
 800af38:	d009      	beq.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800af3a:	4b92      	ldr	r3, [pc, #584]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af3e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800af42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af48:	4a8e      	ldr	r2, [pc, #568]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af4a:	430b      	orrs	r3, r1
 800af4c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800af4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af56:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800af5a:	643b      	str	r3, [r7, #64]	@ 0x40
 800af5c:	2300      	movs	r3, #0
 800af5e:	647b      	str	r3, [r7, #68]	@ 0x44
 800af60:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800af64:	460b      	mov	r3, r1
 800af66:	4313      	orrs	r3, r2
 800af68:	d00e      	beq.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800af6a:	4b86      	ldr	r3, [pc, #536]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af6c:	691b      	ldr	r3, [r3, #16]
 800af6e:	4a85      	ldr	r2, [pc, #532]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af70:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800af74:	6113      	str	r3, [r2, #16]
 800af76:	4b83      	ldr	r3, [pc, #524]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af78:	6919      	ldr	r1, [r3, #16]
 800af7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800af82:	4a80      	ldr	r2, [pc, #512]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af84:	430b      	orrs	r3, r1
 800af86:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800af88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af90:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800af94:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af96:	2300      	movs	r3, #0
 800af98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af9a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800af9e:	460b      	mov	r3, r1
 800afa0:	4313      	orrs	r3, r2
 800afa2:	d009      	beq.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800afa4:	4b77      	ldr	r3, [pc, #476]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afa8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800afac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afb2:	4a74      	ldr	r2, [pc, #464]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afb4:	430b      	orrs	r3, r1
 800afb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800afb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800afc4:	633b      	str	r3, [r7, #48]	@ 0x30
 800afc6:	2300      	movs	r3, #0
 800afc8:	637b      	str	r3, [r7, #52]	@ 0x34
 800afca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800afce:	460b      	mov	r3, r1
 800afd0:	4313      	orrs	r3, r2
 800afd2:	d00a      	beq.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800afd4:	4b6b      	ldr	r3, [pc, #428]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afd8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800afdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afe4:	4a67      	ldr	r2, [pc, #412]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afe6:	430b      	orrs	r3, r1
 800afe8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800afea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff2:	2100      	movs	r1, #0
 800aff4:	62b9      	str	r1, [r7, #40]	@ 0x28
 800aff6:	f003 0301 	and.w	r3, r3, #1
 800affa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800affc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b000:	460b      	mov	r3, r1
 800b002:	4313      	orrs	r3, r2
 800b004:	d011      	beq.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b00a:	3308      	adds	r3, #8
 800b00c:	2100      	movs	r1, #0
 800b00e:	4618      	mov	r0, r3
 800b010:	f001 fa4a 	bl	800c4a8 <RCCEx_PLL2_Config>
 800b014:	4603      	mov	r3, r0
 800b016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b01a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d003      	beq.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b026:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b032:	2100      	movs	r1, #0
 800b034:	6239      	str	r1, [r7, #32]
 800b036:	f003 0302 	and.w	r3, r3, #2
 800b03a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b03c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b040:	460b      	mov	r3, r1
 800b042:	4313      	orrs	r3, r2
 800b044:	d011      	beq.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b04a:	3308      	adds	r3, #8
 800b04c:	2101      	movs	r1, #1
 800b04e:	4618      	mov	r0, r3
 800b050:	f001 fa2a 	bl	800c4a8 <RCCEx_PLL2_Config>
 800b054:	4603      	mov	r3, r0
 800b056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b05a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d003      	beq.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b066:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b072:	2100      	movs	r1, #0
 800b074:	61b9      	str	r1, [r7, #24]
 800b076:	f003 0304 	and.w	r3, r3, #4
 800b07a:	61fb      	str	r3, [r7, #28]
 800b07c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b080:	460b      	mov	r3, r1
 800b082:	4313      	orrs	r3, r2
 800b084:	d011      	beq.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b08a:	3308      	adds	r3, #8
 800b08c:	2102      	movs	r1, #2
 800b08e:	4618      	mov	r0, r3
 800b090:	f001 fa0a 	bl	800c4a8 <RCCEx_PLL2_Config>
 800b094:	4603      	mov	r3, r0
 800b096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b09a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d003      	beq.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b2:	2100      	movs	r1, #0
 800b0b4:	6139      	str	r1, [r7, #16]
 800b0b6:	f003 0308 	and.w	r3, r3, #8
 800b0ba:	617b      	str	r3, [r7, #20]
 800b0bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	d011      	beq.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0ca:	3328      	adds	r3, #40	@ 0x28
 800b0cc:	2100      	movs	r1, #0
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f001 fa9c 	bl	800c60c <RCCEx_PLL3_Config>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800b0da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d003      	beq.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b0ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	f003 0310 	and.w	r3, r3, #16
 800b0fa:	60fb      	str	r3, [r7, #12]
 800b0fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b100:	460b      	mov	r3, r1
 800b102:	4313      	orrs	r3, r2
 800b104:	d011      	beq.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b10a:	3328      	adds	r3, #40	@ 0x28
 800b10c:	2101      	movs	r1, #1
 800b10e:	4618      	mov	r0, r3
 800b110:	f001 fa7c 	bl	800c60c <RCCEx_PLL3_Config>
 800b114:	4603      	mov	r3, r0
 800b116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b11a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d003      	beq.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b126:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b132:	2100      	movs	r1, #0
 800b134:	6039      	str	r1, [r7, #0]
 800b136:	f003 0320 	and.w	r3, r3, #32
 800b13a:	607b      	str	r3, [r7, #4]
 800b13c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b140:	460b      	mov	r3, r1
 800b142:	4313      	orrs	r3, r2
 800b144:	d011      	beq.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b14a:	3328      	adds	r3, #40	@ 0x28
 800b14c:	2102      	movs	r1, #2
 800b14e:	4618      	mov	r0, r3
 800b150:	f001 fa5c 	bl	800c60c <RCCEx_PLL3_Config>
 800b154:	4603      	mov	r3, r0
 800b156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b15a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d003      	beq.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800b16a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d101      	bne.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b172:	2300      	movs	r3, #0
 800b174:	e000      	b.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b176:	2301      	movs	r3, #1
}
 800b178:	4618      	mov	r0, r3
 800b17a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800b17e:	46bd      	mov	sp, r7
 800b180:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b184:	58024400 	.word	0x58024400

0800b188 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b090      	sub	sp, #64	@ 0x40
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b192:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b196:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b19a:	430b      	orrs	r3, r1
 800b19c:	f040 8094 	bne.w	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b1a0:	4b9e      	ldr	r3, [pc, #632]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1a4:	f003 0307 	and.w	r3, r3, #7
 800b1a8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ac:	2b04      	cmp	r3, #4
 800b1ae:	f200 8087 	bhi.w	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b1b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b8:	0800b1cd 	.word	0x0800b1cd
 800b1bc:	0800b1f5 	.word	0x0800b1f5
 800b1c0:	0800b21d 	.word	0x0800b21d
 800b1c4:	0800b2b9 	.word	0x0800b2b9
 800b1c8:	0800b245 	.word	0x0800b245
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1cc:	4b93      	ldr	r3, [pc, #588]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1d8:	d108      	bne.n	800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f001 f810 	bl	800c204 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1e8:	f000 bd45 	b.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1f0:	f000 bd41 	b.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1f4:	4b89      	ldr	r3, [pc, #548]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b200:	d108      	bne.n	800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b202:	f107 0318 	add.w	r3, r7, #24
 800b206:	4618      	mov	r0, r3
 800b208:	f000 fd54 	bl	800bcb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b210:	f000 bd31 	b.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b214:	2300      	movs	r3, #0
 800b216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b218:	f000 bd2d 	b.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b21c:	4b7f      	ldr	r3, [pc, #508]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b228:	d108      	bne.n	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b22a:	f107 030c 	add.w	r3, r7, #12
 800b22e:	4618      	mov	r0, r3
 800b230:	f000 fe94 	bl	800bf5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b238:	f000 bd1d 	b.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b240:	f000 bd19 	b.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b244:	4b75      	ldr	r3, [pc, #468]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b248:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b24c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b24e:	4b73      	ldr	r3, [pc, #460]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f003 0304 	and.w	r3, r3, #4
 800b256:	2b04      	cmp	r3, #4
 800b258:	d10c      	bne.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b25a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d109      	bne.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b260:	4b6e      	ldr	r3, [pc, #440]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	08db      	lsrs	r3, r3, #3
 800b266:	f003 0303 	and.w	r3, r3, #3
 800b26a:	4a6d      	ldr	r2, [pc, #436]	@ (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b26c:	fa22 f303 	lsr.w	r3, r2, r3
 800b270:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b272:	e01f      	b.n	800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b274:	4b69      	ldr	r3, [pc, #420]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b27c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b280:	d106      	bne.n	800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b284:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b288:	d102      	bne.n	800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b28a:	4b66      	ldr	r3, [pc, #408]	@ (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b28c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b28e:	e011      	b.n	800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b290:	4b62      	ldr	r3, [pc, #392]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b298:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b29c:	d106      	bne.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b29e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2a4:	d102      	bne.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b2a6:	4b60      	ldr	r3, [pc, #384]	@ (800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2aa:	e003      	b.n	800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b2b0:	f000 bce1 	b.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b2b4:	f000 bcdf 	b.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b2b8:	4b5c      	ldr	r3, [pc, #368]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2bc:	f000 bcdb 	b.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2c4:	f000 bcd7 	b.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b2c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2cc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800b2d0:	430b      	orrs	r3, r1
 800b2d2:	f040 80ad 	bne.w	800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b2d6:	4b51      	ldr	r3, [pc, #324]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2da:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b2de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2e6:	d056      	beq.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2ee:	f200 8090 	bhi.w	800b412 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f4:	2bc0      	cmp	r3, #192	@ 0xc0
 800b2f6:	f000 8088 	beq.w	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2fc:	2bc0      	cmp	r3, #192	@ 0xc0
 800b2fe:	f200 8088 	bhi.w	800b412 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b304:	2b80      	cmp	r3, #128	@ 0x80
 800b306:	d032      	beq.n	800b36e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b30a:	2b80      	cmp	r3, #128	@ 0x80
 800b30c:	f200 8081 	bhi.w	800b412 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b312:	2b00      	cmp	r3, #0
 800b314:	d003      	beq.n	800b31e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b318:	2b40      	cmp	r3, #64	@ 0x40
 800b31a:	d014      	beq.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b31c:	e079      	b.n	800b412 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b31e:	4b3f      	ldr	r3, [pc, #252]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b326:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b32a:	d108      	bne.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b32c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b330:	4618      	mov	r0, r3
 800b332:	f000 ff67 	bl	800c204 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b33a:	f000 bc9c 	b.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b33e:	2300      	movs	r3, #0
 800b340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b342:	f000 bc98 	b.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b346:	4b35      	ldr	r3, [pc, #212]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b34e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b352:	d108      	bne.n	800b366 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b354:	f107 0318 	add.w	r3, r7, #24
 800b358:	4618      	mov	r0, r3
 800b35a:	f000 fcab 	bl	800bcb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b362:	f000 bc88 	b.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b366:	2300      	movs	r3, #0
 800b368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b36a:	f000 bc84 	b.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b36e:	4b2b      	ldr	r3, [pc, #172]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b376:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b37a:	d108      	bne.n	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b37c:	f107 030c 	add.w	r3, r7, #12
 800b380:	4618      	mov	r0, r3
 800b382:	f000 fdeb 	bl	800bf5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b38a:	f000 bc74 	b.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b38e:	2300      	movs	r3, #0
 800b390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b392:	f000 bc70 	b.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b396:	4b21      	ldr	r3, [pc, #132]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b39a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b39e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3a0:	4b1e      	ldr	r3, [pc, #120]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f003 0304 	and.w	r3, r3, #4
 800b3a8:	2b04      	cmp	r3, #4
 800b3aa:	d10c      	bne.n	800b3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b3ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d109      	bne.n	800b3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3b2:	4b1a      	ldr	r3, [pc, #104]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	08db      	lsrs	r3, r3, #3
 800b3b8:	f003 0303 	and.w	r3, r3, #3
 800b3bc:	4a18      	ldr	r2, [pc, #96]	@ (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b3be:	fa22 f303 	lsr.w	r3, r2, r3
 800b3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3c4:	e01f      	b.n	800b406 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3c6:	4b15      	ldr	r3, [pc, #84]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3d2:	d106      	bne.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b3d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3da:	d102      	bne.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b3dc:	4b11      	ldr	r3, [pc, #68]	@ (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3e0:	e011      	b.n	800b406 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3e2:	4b0e      	ldr	r3, [pc, #56]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3ee:	d106      	bne.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b3f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3f6:	d102      	bne.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b3f8:	4b0b      	ldr	r3, [pc, #44]	@ (800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3fc:	e003      	b.n	800b406 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b3fe:	2300      	movs	r3, #0
 800b400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b402:	f000 bc38 	b.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b406:	f000 bc36 	b.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b40a:	4b08      	ldr	r3, [pc, #32]	@ (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b40c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b40e:	f000 bc32 	b.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b412:	2300      	movs	r3, #0
 800b414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b416:	f000 bc2e 	b.w	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b41a:	bf00      	nop
 800b41c:	58024400 	.word	0x58024400
 800b420:	03d09000 	.word	0x03d09000
 800b424:	003d0900 	.word	0x003d0900
 800b428:	017d7840 	.word	0x017d7840
 800b42c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b430:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b434:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b438:	430b      	orrs	r3, r1
 800b43a:	f040 809c 	bne.w	800b576 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b43e:	4b9e      	ldr	r3, [pc, #632]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b442:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b446:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b44a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b44e:	d054      	beq.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b452:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b456:	f200 808b 	bhi.w	800b570 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b45c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b460:	f000 8083 	beq.w	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b466:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b46a:	f200 8081 	bhi.w	800b570 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b470:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b474:	d02f      	beq.n	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b478:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b47c:	d878      	bhi.n	800b570 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b480:	2b00      	cmp	r3, #0
 800b482:	d004      	beq.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b486:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b48a:	d012      	beq.n	800b4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b48c:	e070      	b.n	800b570 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b48e:	4b8a      	ldr	r3, [pc, #552]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b496:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b49a:	d107      	bne.n	800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b49c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f000 feaf 	bl	800c204 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4aa:	e3e4      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4b0:	e3e1      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4b2:	4b81      	ldr	r3, [pc, #516]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4be:	d107      	bne.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4c0:	f107 0318 	add.w	r3, r7, #24
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f000 fbf5 	bl	800bcb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b4ca:	69bb      	ldr	r3, [r7, #24]
 800b4cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4ce:	e3d2      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4d4:	e3cf      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4d6:	4b78      	ldr	r3, [pc, #480]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b4de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4e2:	d107      	bne.n	800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4e4:	f107 030c 	add.w	r3, r7, #12
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f000 fd37 	bl	800bf5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4f2:	e3c0      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4f8:	e3bd      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b4fa:	4b6f      	ldr	r3, [pc, #444]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b502:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b504:	4b6c      	ldr	r3, [pc, #432]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f003 0304 	and.w	r3, r3, #4
 800b50c:	2b04      	cmp	r3, #4
 800b50e:	d10c      	bne.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b512:	2b00      	cmp	r3, #0
 800b514:	d109      	bne.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b516:	4b68      	ldr	r3, [pc, #416]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	08db      	lsrs	r3, r3, #3
 800b51c:	f003 0303 	and.w	r3, r3, #3
 800b520:	4a66      	ldr	r2, [pc, #408]	@ (800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b522:	fa22 f303 	lsr.w	r3, r2, r3
 800b526:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b528:	e01e      	b.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b52a:	4b63      	ldr	r3, [pc, #396]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b536:	d106      	bne.n	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b53a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b53e:	d102      	bne.n	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b540:	4b5f      	ldr	r3, [pc, #380]	@ (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b542:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b544:	e010      	b.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b546:	4b5c      	ldr	r3, [pc, #368]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b54e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b552:	d106      	bne.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b556:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b55a:	d102      	bne.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b55c:	4b59      	ldr	r3, [pc, #356]	@ (800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b55e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b560:	e002      	b.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b562:	2300      	movs	r3, #0
 800b564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b566:	e386      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b568:	e385      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b56a:	4b57      	ldr	r3, [pc, #348]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b56c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b56e:	e382      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b570:	2300      	movs	r3, #0
 800b572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b574:	e37f      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b57a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b57e:	430b      	orrs	r3, r1
 800b580:	f040 80a7 	bne.w	800b6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b584:	4b4c      	ldr	r3, [pc, #304]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b588:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b58c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b590:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b594:	d055      	beq.n	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b598:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b59c:	f200 8096 	bhi.w	800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b5a6:	f000 8084 	beq.w	800b6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b5b0:	f200 808c 	bhi.w	800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5ba:	d030      	beq.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5c2:	f200 8083 	bhi.w	800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d004      	beq.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b5cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5d2:	d012      	beq.n	800b5fa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b5d4:	e07a      	b.n	800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b5d6:	4b38      	ldr	r3, [pc, #224]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b5de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5e2:	d107      	bne.n	800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f000 fe0b 	bl	800c204 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5f2:	e340      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5f8:	e33d      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5fa:	4b2f      	ldr	r3, [pc, #188]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b602:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b606:	d107      	bne.n	800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b608:	f107 0318 	add.w	r3, r7, #24
 800b60c:	4618      	mov	r0, r3
 800b60e:	f000 fb51 	bl	800bcb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b612:	69bb      	ldr	r3, [r7, #24]
 800b614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b616:	e32e      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b618:	2300      	movs	r3, #0
 800b61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b61c:	e32b      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b61e:	4b26      	ldr	r3, [pc, #152]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b626:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b62a:	d107      	bne.n	800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b62c:	f107 030c 	add.w	r3, r7, #12
 800b630:	4618      	mov	r0, r3
 800b632:	f000 fc93 	bl	800bf5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b63a:	e31c      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b63c:	2300      	movs	r3, #0
 800b63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b640:	e319      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b642:	4b1d      	ldr	r3, [pc, #116]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b646:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b64a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b64c:	4b1a      	ldr	r3, [pc, #104]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f003 0304 	and.w	r3, r3, #4
 800b654:	2b04      	cmp	r3, #4
 800b656:	d10c      	bne.n	800b672 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d109      	bne.n	800b672 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b65e:	4b16      	ldr	r3, [pc, #88]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	08db      	lsrs	r3, r3, #3
 800b664:	f003 0303 	and.w	r3, r3, #3
 800b668:	4a14      	ldr	r2, [pc, #80]	@ (800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b66a:	fa22 f303 	lsr.w	r3, r2, r3
 800b66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b670:	e01e      	b.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b672:	4b11      	ldr	r3, [pc, #68]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b67a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b67e:	d106      	bne.n	800b68e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b682:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b686:	d102      	bne.n	800b68e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b688:	4b0d      	ldr	r3, [pc, #52]	@ (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b68a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b68c:	e010      	b.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b68e:	4b0a      	ldr	r3, [pc, #40]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b696:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b69a:	d106      	bne.n	800b6aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b69c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b69e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6a2:	d102      	bne.n	800b6aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b6a4:	4b07      	ldr	r3, [pc, #28]	@ (800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6a8:	e002      	b.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b6ae:	e2e2      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b6b0:	e2e1      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b6b2:	4b05      	ldr	r3, [pc, #20]	@ (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b6b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6b6:	e2de      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b6b8:	58024400 	.word	0x58024400
 800b6bc:	03d09000 	.word	0x03d09000
 800b6c0:	003d0900 	.word	0x003d0900
 800b6c4:	017d7840 	.word	0x017d7840
 800b6c8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6d0:	e2d1      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b6d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6d6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b6da:	430b      	orrs	r3, r1
 800b6dc:	f040 809c 	bne.w	800b818 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b6e0:	4b93      	ldr	r3, [pc, #588]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6e4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b6e8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b6ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b6f0:	d054      	beq.n	800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b6f8:	f200 808b 	bhi.w	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b6fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b702:	f000 8083 	beq.w	800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b708:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b70c:	f200 8081 	bhi.w	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b716:	d02f      	beq.n	800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b71a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b71e:	d878      	bhi.n	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b722:	2b00      	cmp	r3, #0
 800b724:	d004      	beq.n	800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b728:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b72c:	d012      	beq.n	800b754 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b72e:	e070      	b.n	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b730:	4b7f      	ldr	r3, [pc, #508]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b738:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b73c:	d107      	bne.n	800b74e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b73e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b742:	4618      	mov	r0, r3
 800b744:	f000 fd5e 	bl	800c204 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b74c:	e293      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b74e:	2300      	movs	r3, #0
 800b750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b752:	e290      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b754:	4b76      	ldr	r3, [pc, #472]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b75c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b760:	d107      	bne.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b762:	f107 0318 	add.w	r3, r7, #24
 800b766:	4618      	mov	r0, r3
 800b768:	f000 faa4 	bl	800bcb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b770:	e281      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b772:	2300      	movs	r3, #0
 800b774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b776:	e27e      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b778:	4b6d      	ldr	r3, [pc, #436]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b780:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b784:	d107      	bne.n	800b796 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b786:	f107 030c 	add.w	r3, r7, #12
 800b78a:	4618      	mov	r0, r3
 800b78c:	f000 fbe6 	bl	800bf5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b794:	e26f      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b796:	2300      	movs	r3, #0
 800b798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b79a:	e26c      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b79c:	4b64      	ldr	r3, [pc, #400]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b79e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b7a4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b7a6:	4b62      	ldr	r3, [pc, #392]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f003 0304 	and.w	r3, r3, #4
 800b7ae:	2b04      	cmp	r3, #4
 800b7b0:	d10c      	bne.n	800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b7b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d109      	bne.n	800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7b8:	4b5d      	ldr	r3, [pc, #372]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	08db      	lsrs	r3, r3, #3
 800b7be:	f003 0303 	and.w	r3, r3, #3
 800b7c2:	4a5c      	ldr	r2, [pc, #368]	@ (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b7c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b7c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7ca:	e01e      	b.n	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b7cc:	4b58      	ldr	r3, [pc, #352]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7d8:	d106      	bne.n	800b7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b7da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b7e0:	d102      	bne.n	800b7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b7e2:	4b55      	ldr	r3, [pc, #340]	@ (800b938 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b7e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7e6:	e010      	b.n	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b7e8:	4b51      	ldr	r3, [pc, #324]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7f4:	d106      	bne.n	800b804 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b7f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7fc:	d102      	bne.n	800b804 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b7fe:	4b4f      	ldr	r3, [pc, #316]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b800:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b802:	e002      	b.n	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b804:	2300      	movs	r3, #0
 800b806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b808:	e235      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b80a:	e234      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b80c:	4b4c      	ldr	r3, [pc, #304]	@ (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b810:	e231      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b812:	2300      	movs	r3, #0
 800b814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b816:	e22e      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b81c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b820:	430b      	orrs	r3, r1
 800b822:	f040 808f 	bne.w	800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b826:	4b42      	ldr	r3, [pc, #264]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b82a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b82e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b832:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b836:	d06b      	beq.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b83a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b83e:	d874      	bhi.n	800b92a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b842:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b846:	d056      	beq.n	800b8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b84a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b84e:	d86c      	bhi.n	800b92a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b852:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b856:	d03b      	beq.n	800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b85a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b85e:	d864      	bhi.n	800b92a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b862:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b866:	d021      	beq.n	800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b86a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b86e:	d85c      	bhi.n	800b92a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b872:	2b00      	cmp	r3, #0
 800b874:	d004      	beq.n	800b880 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b87c:	d004      	beq.n	800b888 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b87e:	e054      	b.n	800b92a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b880:	f7fe fa4c 	bl	8009d1c <HAL_RCC_GetPCLK1Freq>
 800b884:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b886:	e1f6      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b888:	4b29      	ldr	r3, [pc, #164]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b890:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b894:	d107      	bne.n	800b8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b896:	f107 0318 	add.w	r3, r7, #24
 800b89a:	4618      	mov	r0, r3
 800b89c:	f000 fa0a 	bl	800bcb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8a4:	e1e7      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8aa:	e1e4      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b8ac:	4b20      	ldr	r3, [pc, #128]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b8b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8b8:	d107      	bne.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8ba:	f107 030c 	add.w	r3, r7, #12
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f000 fb4c 	bl	800bf5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8c8:	e1d5      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8ce:	e1d2      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b8d0:	4b17      	ldr	r3, [pc, #92]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f003 0304 	and.w	r3, r3, #4
 800b8d8:	2b04      	cmp	r3, #4
 800b8da:	d109      	bne.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8dc:	4b14      	ldr	r3, [pc, #80]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	08db      	lsrs	r3, r3, #3
 800b8e2:	f003 0303 	and.w	r3, r3, #3
 800b8e6:	4a13      	ldr	r2, [pc, #76]	@ (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b8e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8ee:	e1c2      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8f4:	e1bf      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b8f6:	4b0e      	ldr	r3, [pc, #56]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b902:	d102      	bne.n	800b90a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b904:	4b0c      	ldr	r3, [pc, #48]	@ (800b938 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b908:	e1b5      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b90a:	2300      	movs	r3, #0
 800b90c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b90e:	e1b2      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b910:	4b07      	ldr	r3, [pc, #28]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b918:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b91c:	d102      	bne.n	800b924 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b91e:	4b07      	ldr	r3, [pc, #28]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b922:	e1a8      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b924:	2300      	movs	r3, #0
 800b926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b928:	e1a5      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b92a:	2300      	movs	r3, #0
 800b92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b92e:	e1a2      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b930:	58024400 	.word	0x58024400
 800b934:	03d09000 	.word	0x03d09000
 800b938:	003d0900 	.word	0x003d0900
 800b93c:	017d7840 	.word	0x017d7840
 800b940:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b944:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b948:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b94c:	430b      	orrs	r3, r1
 800b94e:	d173      	bne.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b950:	4b9c      	ldr	r3, [pc, #624]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b954:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b958:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b95a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b95c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b960:	d02f      	beq.n	800b9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b964:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b968:	d863      	bhi.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d004      	beq.n	800b97a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b972:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b976:	d012      	beq.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b978:	e05b      	b.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b97a:	4b92      	ldr	r3, [pc, #584]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b982:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b986:	d107      	bne.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b988:	f107 0318 	add.w	r3, r7, #24
 800b98c:	4618      	mov	r0, r3
 800b98e:	f000 f991 	bl	800bcb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b996:	e16e      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b998:	2300      	movs	r3, #0
 800b99a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b99c:	e16b      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b99e:	4b89      	ldr	r3, [pc, #548]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b9a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9aa:	d107      	bne.n	800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9ac:	f107 030c 	add.w	r3, r7, #12
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f000 fad3 	bl	800bf5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9ba:	e15c      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9c0:	e159      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b9c2:	4b80      	ldr	r3, [pc, #512]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b9ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b9cc:	4b7d      	ldr	r3, [pc, #500]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f003 0304 	and.w	r3, r3, #4
 800b9d4:	2b04      	cmp	r3, #4
 800b9d6:	d10c      	bne.n	800b9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b9d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d109      	bne.n	800b9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9de:	4b79      	ldr	r3, [pc, #484]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	08db      	lsrs	r3, r3, #3
 800b9e4:	f003 0303 	and.w	r3, r3, #3
 800b9e8:	4a77      	ldr	r2, [pc, #476]	@ (800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b9ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b9ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9f0:	e01e      	b.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b9f2:	4b74      	ldr	r3, [pc, #464]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9fe:	d106      	bne.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ba00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba06:	d102      	bne.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ba08:	4b70      	ldr	r3, [pc, #448]	@ (800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ba0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba0c:	e010      	b.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ba0e:	4b6d      	ldr	r3, [pc, #436]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba1a:	d106      	bne.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ba1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba22:	d102      	bne.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ba24:	4b6a      	ldr	r3, [pc, #424]	@ (800bbd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ba26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba28:	e002      	b.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ba2e:	e122      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ba30:	e121      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba36:	e11e      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ba38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba3c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ba40:	430b      	orrs	r3, r1
 800ba42:	d133      	bne.n	800baac <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ba44:	4b5f      	ldr	r3, [pc, #380]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba4c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ba4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d004      	beq.n	800ba5e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ba54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba5a:	d012      	beq.n	800ba82 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ba5c:	e023      	b.n	800baa6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba5e:	4b59      	ldr	r3, [pc, #356]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba6a:	d107      	bne.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba70:	4618      	mov	r0, r3
 800ba72:	f000 fbc7 	bl	800c204 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba7a:	e0fc      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba80:	e0f9      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba82:	4b50      	ldr	r3, [pc, #320]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba8e:	d107      	bne.n	800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba90:	f107 0318 	add.w	r3, r7, #24
 800ba94:	4618      	mov	r0, r3
 800ba96:	f000 f90d 	bl	800bcb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ba9a:	6a3b      	ldr	r3, [r7, #32]
 800ba9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba9e:	e0ea      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800baa0:	2300      	movs	r3, #0
 800baa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baa4:	e0e7      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800baa6:	2300      	movs	r3, #0
 800baa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baaa:	e0e4      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800baac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bab0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800bab4:	430b      	orrs	r3, r1
 800bab6:	f040 808d 	bne.w	800bbd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800baba:	4b42      	ldr	r3, [pc, #264]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800babc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800babe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800bac2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800baca:	d06b      	beq.n	800bba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800bacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bace:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bad2:	d874      	bhi.n	800bbbe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bada:	d056      	beq.n	800bb8a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800badc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bae2:	d86c      	bhi.n	800bbbe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800baea:	d03b      	beq.n	800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800baec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800baf2:	d864      	bhi.n	800bbbe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800baf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bafa:	d021      	beq.n	800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800bafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bafe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb02:	d85c      	bhi.n	800bbbe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bb04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d004      	beq.n	800bb14 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800bb0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb10:	d004      	beq.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800bb12:	e054      	b.n	800bbbe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bb14:	f000 f8b8 	bl	800bc88 <HAL_RCCEx_GetD3PCLK1Freq>
 800bb18:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bb1a:	e0ac      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb1c:	4b29      	ldr	r3, [pc, #164]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb28:	d107      	bne.n	800bb3a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb2a:	f107 0318 	add.w	r3, r7, #24
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f000 f8c0 	bl	800bcb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb38:	e09d      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb3e:	e09a      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb40:	4b20      	ldr	r3, [pc, #128]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bb48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb4c:	d107      	bne.n	800bb5e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb4e:	f107 030c 	add.w	r3, r7, #12
 800bb52:	4618      	mov	r0, r3
 800bb54:	f000 fa02 	bl	800bf5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb5c:	e08b      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb62:	e088      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bb64:	4b17      	ldr	r3, [pc, #92]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f003 0304 	and.w	r3, r3, #4
 800bb6c:	2b04      	cmp	r3, #4
 800bb6e:	d109      	bne.n	800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb70:	4b14      	ldr	r3, [pc, #80]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	08db      	lsrs	r3, r3, #3
 800bb76:	f003 0303 	and.w	r3, r3, #3
 800bb7a:	4a13      	ldr	r2, [pc, #76]	@ (800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800bb7c:	fa22 f303 	lsr.w	r3, r2, r3
 800bb80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb82:	e078      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb84:	2300      	movs	r3, #0
 800bb86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb88:	e075      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bb8a:	4b0e      	ldr	r3, [pc, #56]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb96:	d102      	bne.n	800bb9e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800bb98:	4b0c      	ldr	r3, [pc, #48]	@ (800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800bb9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb9c:	e06b      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bba2:	e068      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bba4:	4b07      	ldr	r3, [pc, #28]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bbac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bbb0:	d102      	bne.n	800bbb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800bbb2:	4b07      	ldr	r3, [pc, #28]	@ (800bbd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800bbb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbb6:	e05e      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbbc:	e05b      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbc2:	e058      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bbc4:	58024400 	.word	0x58024400
 800bbc8:	03d09000 	.word	0x03d09000
 800bbcc:	003d0900 	.word	0x003d0900
 800bbd0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bbd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbd8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800bbdc:	430b      	orrs	r3, r1
 800bbde:	d148      	bne.n	800bc72 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bbe0:	4b27      	ldr	r3, [pc, #156]	@ (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bbe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbe4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bbe8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bbea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbf0:	d02a      	beq.n	800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800bbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbf8:	d838      	bhi.n	800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800bbfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d004      	beq.n	800bc0a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800bc00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc06:	d00d      	beq.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800bc08:	e030      	b.n	800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bc0a:	4b1d      	ldr	r3, [pc, #116]	@ (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc16:	d102      	bne.n	800bc1e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800bc18:	4b1a      	ldr	r3, [pc, #104]	@ (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800bc1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc1c:	e02b      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc22:	e028      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc24:	4b16      	ldr	r3, [pc, #88]	@ (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc30:	d107      	bne.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc36:	4618      	mov	r0, r3
 800bc38:	f000 fae4 	bl	800c204 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc40:	e019      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc42:	2300      	movs	r3, #0
 800bc44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc46:	e016      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc48:	4b0d      	ldr	r3, [pc, #52]	@ (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bc54:	d107      	bne.n	800bc66 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc56:	f107 0318 	add.w	r3, r7, #24
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f000 f82a 	bl	800bcb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc64:	e007      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc66:	2300      	movs	r3, #0
 800bc68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc6a:	e004      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc70:	e001      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800bc72:	2300      	movs	r3, #0
 800bc74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800bc76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3740      	adds	r7, #64	@ 0x40
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	58024400 	.word	0x58024400
 800bc84:	017d7840 	.word	0x017d7840

0800bc88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bc8c:	f7fe f816 	bl	8009cbc <HAL_RCC_GetHCLKFreq>
 800bc90:	4602      	mov	r2, r0
 800bc92:	4b06      	ldr	r3, [pc, #24]	@ (800bcac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bc94:	6a1b      	ldr	r3, [r3, #32]
 800bc96:	091b      	lsrs	r3, r3, #4
 800bc98:	f003 0307 	and.w	r3, r3, #7
 800bc9c:	4904      	ldr	r1, [pc, #16]	@ (800bcb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bc9e:	5ccb      	ldrb	r3, [r1, r3]
 800bca0:	f003 031f 	and.w	r3, r3, #31
 800bca4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	58024400 	.word	0x58024400
 800bcb0:	08014774 	.word	0x08014774

0800bcb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b089      	sub	sp, #36	@ 0x24
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bcbc:	4ba1      	ldr	r3, [pc, #644]	@ (800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcc0:	f003 0303 	and.w	r3, r3, #3
 800bcc4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bcc6:	4b9f      	ldr	r3, [pc, #636]	@ (800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcca:	0b1b      	lsrs	r3, r3, #12
 800bccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bcd0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bcd2:	4b9c      	ldr	r3, [pc, #624]	@ (800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcd6:	091b      	lsrs	r3, r3, #4
 800bcd8:	f003 0301 	and.w	r3, r3, #1
 800bcdc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bcde:	4b99      	ldr	r3, [pc, #612]	@ (800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bce2:	08db      	lsrs	r3, r3, #3
 800bce4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bce8:	693a      	ldr	r2, [r7, #16]
 800bcea:	fb02 f303 	mul.w	r3, r2, r3
 800bcee:	ee07 3a90 	vmov	s15, r3
 800bcf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f000 8111 	beq.w	800bf24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	f000 8083 	beq.w	800be10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	f200 80a1 	bhi.w	800be54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d003      	beq.n	800bd20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d056      	beq.n	800bdcc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bd1e:	e099      	b.n	800be54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd20:	4b88      	ldr	r3, [pc, #544]	@ (800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f003 0320 	and.w	r3, r3, #32
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d02d      	beq.n	800bd88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd2c:	4b85      	ldr	r3, [pc, #532]	@ (800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	08db      	lsrs	r3, r3, #3
 800bd32:	f003 0303 	and.w	r3, r3, #3
 800bd36:	4a84      	ldr	r2, [pc, #528]	@ (800bf48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bd38:	fa22 f303 	lsr.w	r3, r2, r3
 800bd3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	ee07 3a90 	vmov	s15, r3
 800bd44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	ee07 3a90 	vmov	s15, r3
 800bd4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd56:	4b7b      	ldr	r3, [pc, #492]	@ (800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd5e:	ee07 3a90 	vmov	s15, r3
 800bd62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd66:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bf4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bd86:	e087      	b.n	800be98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	ee07 3a90 	vmov	s15, r3
 800bd8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bf50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bd96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd9a:	4b6a      	ldr	r3, [pc, #424]	@ (800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bda2:	ee07 3a90 	vmov	s15, r3
 800bda6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bf4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdca:	e065      	b.n	800be98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	ee07 3a90 	vmov	s15, r3
 800bdd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdd6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bf54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bdda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdde:	4b59      	ldr	r3, [pc, #356]	@ (800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bde0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bde2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bde6:	ee07 3a90 	vmov	s15, r3
 800bdea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdee:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdf2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bf4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be0e:	e043      	b.n	800be98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	ee07 3a90 	vmov	s15, r3
 800be16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bf58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800be1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be22:	4b48      	ldr	r3, [pc, #288]	@ (800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be2a:	ee07 3a90 	vmov	s15, r3
 800be2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be32:	ed97 6a03 	vldr	s12, [r7, #12]
 800be36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bf4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be52:	e021      	b.n	800be98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	ee07 3a90 	vmov	s15, r3
 800be5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bf54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800be62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be66:	4b37      	ldr	r3, [pc, #220]	@ (800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be6e:	ee07 3a90 	vmov	s15, r3
 800be72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be76:	ed97 6a03 	vldr	s12, [r7, #12]
 800be7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bf4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800be98:	4b2a      	ldr	r3, [pc, #168]	@ (800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be9c:	0a5b      	lsrs	r3, r3, #9
 800be9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bea2:	ee07 3a90 	vmov	s15, r3
 800bea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800beae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800beb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800beb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bebe:	ee17 2a90 	vmov	r2, s15
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bec6:	4b1f      	ldr	r3, [pc, #124]	@ (800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800beca:	0c1b      	lsrs	r3, r3, #16
 800becc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bed0:	ee07 3a90 	vmov	s15, r3
 800bed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bed8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bedc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bee0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beec:	ee17 2a90 	vmov	r2, s15
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bef4:	4b13      	ldr	r3, [pc, #76]	@ (800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bef8:	0e1b      	lsrs	r3, r3, #24
 800befa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800befe:	ee07 3a90 	vmov	s15, r3
 800bf02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf1a:	ee17 2a90 	vmov	r2, s15
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bf22:	e008      	b.n	800bf36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	609a      	str	r2, [r3, #8]
}
 800bf36:	bf00      	nop
 800bf38:	3724      	adds	r7, #36	@ 0x24
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr
 800bf42:	bf00      	nop
 800bf44:	58024400 	.word	0x58024400
 800bf48:	03d09000 	.word	0x03d09000
 800bf4c:	46000000 	.word	0x46000000
 800bf50:	4c742400 	.word	0x4c742400
 800bf54:	4a742400 	.word	0x4a742400
 800bf58:	4bbebc20 	.word	0x4bbebc20

0800bf5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b089      	sub	sp, #36	@ 0x24
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf64:	4ba1      	ldr	r3, [pc, #644]	@ (800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf68:	f003 0303 	and.w	r3, r3, #3
 800bf6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bf6e:	4b9f      	ldr	r3, [pc, #636]	@ (800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf72:	0d1b      	lsrs	r3, r3, #20
 800bf74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bf7a:	4b9c      	ldr	r3, [pc, #624]	@ (800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf7e:	0a1b      	lsrs	r3, r3, #8
 800bf80:	f003 0301 	and.w	r3, r3, #1
 800bf84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bf86:	4b99      	ldr	r3, [pc, #612]	@ (800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf8a:	08db      	lsrs	r3, r3, #3
 800bf8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf90:	693a      	ldr	r2, [r7, #16]
 800bf92:	fb02 f303 	mul.w	r3, r2, r3
 800bf96:	ee07 3a90 	vmov	s15, r3
 800bf9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	f000 8111 	beq.w	800c1cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	f000 8083 	beq.w	800c0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	2b02      	cmp	r3, #2
 800bfb6:	f200 80a1 	bhi.w	800c0fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d003      	beq.n	800bfc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	d056      	beq.n	800c074 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bfc6:	e099      	b.n	800c0fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bfc8:	4b88      	ldr	r3, [pc, #544]	@ (800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f003 0320 	and.w	r3, r3, #32
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d02d      	beq.n	800c030 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfd4:	4b85      	ldr	r3, [pc, #532]	@ (800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	08db      	lsrs	r3, r3, #3
 800bfda:	f003 0303 	and.w	r3, r3, #3
 800bfde:	4a84      	ldr	r2, [pc, #528]	@ (800c1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bfe0:	fa22 f303 	lsr.w	r3, r2, r3
 800bfe4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	ee07 3a90 	vmov	s15, r3
 800bfec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	ee07 3a90 	vmov	s15, r3
 800bff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bffe:	4b7b      	ldr	r3, [pc, #492]	@ (800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c006:	ee07 3a90 	vmov	s15, r3
 800c00a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c00e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c012:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c01a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c01e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c02a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c02e:	e087      	b.n	800c140 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	ee07 3a90 	vmov	s15, r3
 800c036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c03a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c03e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c042:	4b6a      	ldr	r3, [pc, #424]	@ (800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c04a:	ee07 3a90 	vmov	s15, r3
 800c04e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c052:	ed97 6a03 	vldr	s12, [r7, #12]
 800c056:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c05a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c05e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c06a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c06e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c072:	e065      	b.n	800c140 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	ee07 3a90 	vmov	s15, r3
 800c07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c07e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c1fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c086:	4b59      	ldr	r3, [pc, #356]	@ (800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c08e:	ee07 3a90 	vmov	s15, r3
 800c092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c096:	ed97 6a03 	vldr	s12, [r7, #12]
 800c09a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c09e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0b6:	e043      	b.n	800c140 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	ee07 3a90 	vmov	s15, r3
 800c0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c200 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c0c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0ca:	4b48      	ldr	r3, [pc, #288]	@ (800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0d2:	ee07 3a90 	vmov	s15, r3
 800c0d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0da:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c0e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0fa:	e021      	b.n	800c140 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	ee07 3a90 	vmov	s15, r3
 800c102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c106:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c1fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c10e:	4b37      	ldr	r3, [pc, #220]	@ (800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c116:	ee07 3a90 	vmov	s15, r3
 800c11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c11e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c122:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c12e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c13a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c13e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c140:	4b2a      	ldr	r3, [pc, #168]	@ (800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c144:	0a5b      	lsrs	r3, r3, #9
 800c146:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c14a:	ee07 3a90 	vmov	s15, r3
 800c14e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c152:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c156:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c15a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c15e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c166:	ee17 2a90 	vmov	r2, s15
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c16e:	4b1f      	ldr	r3, [pc, #124]	@ (800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c172:	0c1b      	lsrs	r3, r3, #16
 800c174:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c178:	ee07 3a90 	vmov	s15, r3
 800c17c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c180:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c184:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c188:	edd7 6a07 	vldr	s13, [r7, #28]
 800c18c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c194:	ee17 2a90 	vmov	r2, s15
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c19c:	4b13      	ldr	r3, [pc, #76]	@ (800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c19e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1a0:	0e1b      	lsrs	r3, r3, #24
 800c1a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1a6:	ee07 3a90 	vmov	s15, r3
 800c1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1c2:	ee17 2a90 	vmov	r2, s15
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c1ca:	e008      	b.n	800c1de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	609a      	str	r2, [r3, #8]
}
 800c1de:	bf00      	nop
 800c1e0:	3724      	adds	r7, #36	@ 0x24
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	58024400 	.word	0x58024400
 800c1f0:	03d09000 	.word	0x03d09000
 800c1f4:	46000000 	.word	0x46000000
 800c1f8:	4c742400 	.word	0x4c742400
 800c1fc:	4a742400 	.word	0x4a742400
 800c200:	4bbebc20 	.word	0x4bbebc20

0800c204 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c204:	b480      	push	{r7}
 800c206:	b089      	sub	sp, #36	@ 0x24
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c20c:	4ba0      	ldr	r3, [pc, #640]	@ (800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c20e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c210:	f003 0303 	and.w	r3, r3, #3
 800c214:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c216:	4b9e      	ldr	r3, [pc, #632]	@ (800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c21a:	091b      	lsrs	r3, r3, #4
 800c21c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c220:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c222:	4b9b      	ldr	r3, [pc, #620]	@ (800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c226:	f003 0301 	and.w	r3, r3, #1
 800c22a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c22c:	4b98      	ldr	r3, [pc, #608]	@ (800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c22e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c230:	08db      	lsrs	r3, r3, #3
 800c232:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c236:	693a      	ldr	r2, [r7, #16]
 800c238:	fb02 f303 	mul.w	r3, r2, r3
 800c23c:	ee07 3a90 	vmov	s15, r3
 800c240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c244:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f000 8111 	beq.w	800c472 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c250:	69bb      	ldr	r3, [r7, #24]
 800c252:	2b02      	cmp	r3, #2
 800c254:	f000 8083 	beq.w	800c35e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	f200 80a1 	bhi.w	800c3a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d003      	beq.n	800c26e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d056      	beq.n	800c31a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c26c:	e099      	b.n	800c3a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c26e:	4b88      	ldr	r3, [pc, #544]	@ (800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f003 0320 	and.w	r3, r3, #32
 800c276:	2b00      	cmp	r3, #0
 800c278:	d02d      	beq.n	800c2d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c27a:	4b85      	ldr	r3, [pc, #532]	@ (800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	08db      	lsrs	r3, r3, #3
 800c280:	f003 0303 	and.w	r3, r3, #3
 800c284:	4a83      	ldr	r2, [pc, #524]	@ (800c494 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c286:	fa22 f303 	lsr.w	r3, r2, r3
 800c28a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	ee07 3a90 	vmov	s15, r3
 800c292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	ee07 3a90 	vmov	s15, r3
 800c29c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2a4:	4b7a      	ldr	r3, [pc, #488]	@ (800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ac:	ee07 3a90 	vmov	s15, r3
 800c2b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2b8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c498 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c2bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2d0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c2d4:	e087      	b.n	800c3e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	ee07 3a90 	vmov	s15, r3
 800c2dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2e0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c49c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c2e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2e8:	4b69      	ldr	r3, [pc, #420]	@ (800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2f0:	ee07 3a90 	vmov	s15, r3
 800c2f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2fc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c498 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c300:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c304:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c308:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c30c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c310:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c314:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c318:	e065      	b.n	800c3e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	ee07 3a90 	vmov	s15, r3
 800c320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c324:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c4a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c328:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c32c:	4b58      	ldr	r3, [pc, #352]	@ (800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c32e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c334:	ee07 3a90 	vmov	s15, r3
 800c338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c33c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c340:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c498 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c344:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c348:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c34c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c350:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c354:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c358:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c35c:	e043      	b.n	800c3e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	ee07 3a90 	vmov	s15, r3
 800c364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c368:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c4a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c36c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c370:	4b47      	ldr	r3, [pc, #284]	@ (800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c378:	ee07 3a90 	vmov	s15, r3
 800c37c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c380:	ed97 6a03 	vldr	s12, [r7, #12]
 800c384:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c498 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c388:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c38c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c390:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c394:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c39c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3a0:	e021      	b.n	800c3e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	ee07 3a90 	vmov	s15, r3
 800c3a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3ac:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c49c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c3b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3b4:	4b36      	ldr	r3, [pc, #216]	@ (800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3bc:	ee07 3a90 	vmov	s15, r3
 800c3c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3c8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c498 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3e4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c3e6:	4b2a      	ldr	r3, [pc, #168]	@ (800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3ea:	0a5b      	lsrs	r3, r3, #9
 800c3ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3f0:	ee07 3a90 	vmov	s15, r3
 800c3f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c3fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c400:	edd7 6a07 	vldr	s13, [r7, #28]
 800c404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c40c:	ee17 2a90 	vmov	r2, s15
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c414:	4b1e      	ldr	r3, [pc, #120]	@ (800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c418:	0c1b      	lsrs	r3, r3, #16
 800c41a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c41e:	ee07 3a90 	vmov	s15, r3
 800c422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c426:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c42a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c42e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c43a:	ee17 2a90 	vmov	r2, s15
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c442:	4b13      	ldr	r3, [pc, #76]	@ (800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c446:	0e1b      	lsrs	r3, r3, #24
 800c448:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c44c:	ee07 3a90 	vmov	s15, r3
 800c450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c454:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c458:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c45c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c468:	ee17 2a90 	vmov	r2, s15
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c470:	e008      	b.n	800c484 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2200      	movs	r2, #0
 800c482:	609a      	str	r2, [r3, #8]
}
 800c484:	bf00      	nop
 800c486:	3724      	adds	r7, #36	@ 0x24
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr
 800c490:	58024400 	.word	0x58024400
 800c494:	03d09000 	.word	0x03d09000
 800c498:	46000000 	.word	0x46000000
 800c49c:	4c742400 	.word	0x4c742400
 800c4a0:	4a742400 	.word	0x4a742400
 800c4a4:	4bbebc20 	.word	0x4bbebc20

0800c4a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c4b6:	4b53      	ldr	r3, [pc, #332]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c4b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4ba:	f003 0303 	and.w	r3, r3, #3
 800c4be:	2b03      	cmp	r3, #3
 800c4c0:	d101      	bne.n	800c4c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e099      	b.n	800c5fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c4c6:	4b4f      	ldr	r3, [pc, #316]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a4e      	ldr	r2, [pc, #312]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c4cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c4d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4d2:	f7fa fbbd 	bl	8006c50 <HAL_GetTick>
 800c4d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c4d8:	e008      	b.n	800c4ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c4da:	f7fa fbb9 	bl	8006c50 <HAL_GetTick>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	1ad3      	subs	r3, r2, r3
 800c4e4:	2b02      	cmp	r3, #2
 800c4e6:	d901      	bls.n	800c4ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c4e8:	2303      	movs	r3, #3
 800c4ea:	e086      	b.n	800c5fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c4ec:	4b45      	ldr	r3, [pc, #276]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d1f0      	bne.n	800c4da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c4f8:	4b42      	ldr	r3, [pc, #264]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c4fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	031b      	lsls	r3, r3, #12
 800c506:	493f      	ldr	r1, [pc, #252]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c508:	4313      	orrs	r3, r2
 800c50a:	628b      	str	r3, [r1, #40]	@ 0x28
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	3b01      	subs	r3, #1
 800c512:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	689b      	ldr	r3, [r3, #8]
 800c51a:	3b01      	subs	r3, #1
 800c51c:	025b      	lsls	r3, r3, #9
 800c51e:	b29b      	uxth	r3, r3
 800c520:	431a      	orrs	r2, r3
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	68db      	ldr	r3, [r3, #12]
 800c526:	3b01      	subs	r3, #1
 800c528:	041b      	lsls	r3, r3, #16
 800c52a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c52e:	431a      	orrs	r2, r3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	691b      	ldr	r3, [r3, #16]
 800c534:	3b01      	subs	r3, #1
 800c536:	061b      	lsls	r3, r3, #24
 800c538:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c53c:	4931      	ldr	r1, [pc, #196]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c53e:	4313      	orrs	r3, r2
 800c540:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c542:	4b30      	ldr	r3, [pc, #192]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c546:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	695b      	ldr	r3, [r3, #20]
 800c54e:	492d      	ldr	r1, [pc, #180]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c550:	4313      	orrs	r3, r2
 800c552:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c554:	4b2b      	ldr	r3, [pc, #172]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c558:	f023 0220 	bic.w	r2, r3, #32
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	699b      	ldr	r3, [r3, #24]
 800c560:	4928      	ldr	r1, [pc, #160]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c562:	4313      	orrs	r3, r2
 800c564:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c566:	4b27      	ldr	r3, [pc, #156]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c56a:	4a26      	ldr	r2, [pc, #152]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c56c:	f023 0310 	bic.w	r3, r3, #16
 800c570:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c572:	4b24      	ldr	r3, [pc, #144]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c574:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c576:	4b24      	ldr	r3, [pc, #144]	@ (800c608 <RCCEx_PLL2_Config+0x160>)
 800c578:	4013      	ands	r3, r2
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	69d2      	ldr	r2, [r2, #28]
 800c57e:	00d2      	lsls	r2, r2, #3
 800c580:	4920      	ldr	r1, [pc, #128]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c582:	4313      	orrs	r3, r2
 800c584:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c586:	4b1f      	ldr	r3, [pc, #124]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c58a:	4a1e      	ldr	r2, [pc, #120]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c58c:	f043 0310 	orr.w	r3, r3, #16
 800c590:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d106      	bne.n	800c5a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c598:	4b1a      	ldr	r3, [pc, #104]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c59a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c59c:	4a19      	ldr	r2, [pc, #100]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c59e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c5a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c5a4:	e00f      	b.n	800c5c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d106      	bne.n	800c5ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c5ac:	4b15      	ldr	r3, [pc, #84]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c5ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5b0:	4a14      	ldr	r2, [pc, #80]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c5b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c5b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c5b8:	e005      	b.n	800c5c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c5ba:	4b12      	ldr	r3, [pc, #72]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5be:	4a11      	ldr	r2, [pc, #68]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c5c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c5c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c5c6:	4b0f      	ldr	r3, [pc, #60]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4a0e      	ldr	r2, [pc, #56]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c5cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c5d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5d2:	f7fa fb3d 	bl	8006c50 <HAL_GetTick>
 800c5d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c5d8:	e008      	b.n	800c5ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c5da:	f7fa fb39 	bl	8006c50 <HAL_GetTick>
 800c5de:	4602      	mov	r2, r0
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	1ad3      	subs	r3, r2, r3
 800c5e4:	2b02      	cmp	r3, #2
 800c5e6:	d901      	bls.n	800c5ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c5e8:	2303      	movs	r3, #3
 800c5ea:	e006      	b.n	800c5fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c5ec:	4b05      	ldr	r3, [pc, #20]	@ (800c604 <RCCEx_PLL2_Config+0x15c>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d0f0      	beq.n	800c5da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	58024400 	.word	0x58024400
 800c608:	ffff0007 	.word	0xffff0007

0800c60c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c616:	2300      	movs	r3, #0
 800c618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c61a:	4b53      	ldr	r3, [pc, #332]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c61c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c61e:	f003 0303 	and.w	r3, r3, #3
 800c622:	2b03      	cmp	r3, #3
 800c624:	d101      	bne.n	800c62a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c626:	2301      	movs	r3, #1
 800c628:	e099      	b.n	800c75e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c62a:	4b4f      	ldr	r3, [pc, #316]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4a4e      	ldr	r2, [pc, #312]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c630:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c636:	f7fa fb0b 	bl	8006c50 <HAL_GetTick>
 800c63a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c63c:	e008      	b.n	800c650 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c63e:	f7fa fb07 	bl	8006c50 <HAL_GetTick>
 800c642:	4602      	mov	r2, r0
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	1ad3      	subs	r3, r2, r3
 800c648:	2b02      	cmp	r3, #2
 800c64a:	d901      	bls.n	800c650 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c64c:	2303      	movs	r3, #3
 800c64e:	e086      	b.n	800c75e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c650:	4b45      	ldr	r3, [pc, #276]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d1f0      	bne.n	800c63e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c65c:	4b42      	ldr	r3, [pc, #264]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c65e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c660:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	051b      	lsls	r3, r3, #20
 800c66a:	493f      	ldr	r1, [pc, #252]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c66c:	4313      	orrs	r3, r2
 800c66e:	628b      	str	r3, [r1, #40]	@ 0x28
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	3b01      	subs	r3, #1
 800c676:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	689b      	ldr	r3, [r3, #8]
 800c67e:	3b01      	subs	r3, #1
 800c680:	025b      	lsls	r3, r3, #9
 800c682:	b29b      	uxth	r3, r3
 800c684:	431a      	orrs	r2, r3
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	3b01      	subs	r3, #1
 800c68c:	041b      	lsls	r3, r3, #16
 800c68e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c692:	431a      	orrs	r2, r3
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	691b      	ldr	r3, [r3, #16]
 800c698:	3b01      	subs	r3, #1
 800c69a:	061b      	lsls	r3, r3, #24
 800c69c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c6a0:	4931      	ldr	r1, [pc, #196]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c6a6:	4b30      	ldr	r3, [pc, #192]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c6a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	695b      	ldr	r3, [r3, #20]
 800c6b2:	492d      	ldr	r1, [pc, #180]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c6b8:	4b2b      	ldr	r3, [pc, #172]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c6ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	699b      	ldr	r3, [r3, #24]
 800c6c4:	4928      	ldr	r1, [pc, #160]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c6ca:	4b27      	ldr	r3, [pc, #156]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ce:	4a26      	ldr	r2, [pc, #152]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c6d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c6d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c6d6:	4b24      	ldr	r3, [pc, #144]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c6d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c6da:	4b24      	ldr	r3, [pc, #144]	@ (800c76c <RCCEx_PLL3_Config+0x160>)
 800c6dc:	4013      	ands	r3, r2
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	69d2      	ldr	r2, [r2, #28]
 800c6e2:	00d2      	lsls	r2, r2, #3
 800c6e4:	4920      	ldr	r1, [pc, #128]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c6ea:	4b1f      	ldr	r3, [pc, #124]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c6ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ee:	4a1e      	ldr	r2, [pc, #120]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c6f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c6f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d106      	bne.n	800c70a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c6fc:	4b1a      	ldr	r3, [pc, #104]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c6fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c700:	4a19      	ldr	r2, [pc, #100]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c702:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c706:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c708:	e00f      	b.n	800c72a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	d106      	bne.n	800c71e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c710:	4b15      	ldr	r3, [pc, #84]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c714:	4a14      	ldr	r2, [pc, #80]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c716:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c71a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c71c:	e005      	b.n	800c72a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c71e:	4b12      	ldr	r3, [pc, #72]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c722:	4a11      	ldr	r2, [pc, #68]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c724:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c728:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c72a:	4b0f      	ldr	r3, [pc, #60]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a0e      	ldr	r2, [pc, #56]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c736:	f7fa fa8b 	bl	8006c50 <HAL_GetTick>
 800c73a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c73c:	e008      	b.n	800c750 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c73e:	f7fa fa87 	bl	8006c50 <HAL_GetTick>
 800c742:	4602      	mov	r2, r0
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	1ad3      	subs	r3, r2, r3
 800c748:	2b02      	cmp	r3, #2
 800c74a:	d901      	bls.n	800c750 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c74c:	2303      	movs	r3, #3
 800c74e:	e006      	b.n	800c75e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c750:	4b05      	ldr	r3, [pc, #20]	@ (800c768 <RCCEx_PLL3_Config+0x15c>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d0f0      	beq.n	800c73e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3710      	adds	r7, #16
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	58024400 	.word	0x58024400
 800c76c:	ffff0007 	.word	0xffff0007

0800c770 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b08a      	sub	sp, #40	@ 0x28
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d101      	bne.n	800c782 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c77e:	2301      	movs	r3, #1
 800c780:	e075      	b.n	800c86e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d105      	bne.n	800c79a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2200      	movs	r2, #0
 800c792:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f7f8 f961 	bl	8004a5c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2204      	movs	r2, #4
 800c79e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 f868 	bl	800c878 <HAL_SD_InitCard>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d001      	beq.n	800c7b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	e05d      	b.n	800c86e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c7b2:	f107 0308 	add.w	r3, r7, #8
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 fdaf 	bl	800d31c <HAL_SD_GetCardStatus>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d001      	beq.n	800c7c8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	e052      	b.n	800c86e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c7c8:	7e3b      	ldrb	r3, [r7, #24]
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c7ce:	7e7b      	ldrb	r3, [r7, #25]
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d10a      	bne.n	800c7f2 <HAL_SD_Init+0x82>
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d102      	bne.n	800c7e8 <HAL_SD_Init+0x78>
 800c7e2:	6a3b      	ldr	r3, [r7, #32]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d004      	beq.n	800c7f2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c7ee:	659a      	str	r2, [r3, #88]	@ 0x58
 800c7f0:	e00b      	b.n	800c80a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d104      	bne.n	800c804 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c800:	659a      	str	r2, [r3, #88]	@ 0x58
 800c802:	e002      	b.n	800c80a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	4619      	mov	r1, r3
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f000 fe6d 	bl	800d4f0 <HAL_SD_ConfigWideBusOperation>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d001      	beq.n	800c820 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c81c:	2301      	movs	r3, #1
 800c81e:	e026      	b.n	800c86e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c820:	f7fa fa16 	bl	8006c50 <HAL_GetTick>
 800c824:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c826:	e011      	b.n	800c84c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c828:	f7fa fa12 	bl	8006c50 <HAL_GetTick>
 800c82c:	4602      	mov	r2, r0
 800c82e:	69fb      	ldr	r3, [r7, #28]
 800c830:	1ad3      	subs	r3, r2, r3
 800c832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c836:	d109      	bne.n	800c84c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c83e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2201      	movs	r2, #1
 800c844:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800c848:	2303      	movs	r3, #3
 800c84a:	e010      	b.n	800c86e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 ff61 	bl	800d714 <HAL_SD_GetCardState>
 800c852:	4603      	mov	r3, r0
 800c854:	2b04      	cmp	r3, #4
 800c856:	d1e7      	bne.n	800c828 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2200      	movs	r2, #0
 800c862:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2201      	movs	r2, #1
 800c868:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800c86c:	2300      	movs	r3, #0
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3728      	adds	r7, #40	@ 0x28
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
	...

0800c878 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c878:	b590      	push	{r4, r7, lr}
 800c87a:	b08d      	sub	sp, #52	@ 0x34
 800c87c:	af02      	add	r7, sp, #8
 800c87e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c880:	2300      	movs	r3, #0
 800c882:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c884:	2300      	movs	r3, #0
 800c886:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c888:	2300      	movs	r3, #0
 800c88a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c88c:	2300      	movs	r3, #0
 800c88e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c890:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c894:	f04f 0100 	mov.w	r1, #0
 800c898:	f7fe fc76 	bl	800b188 <HAL_RCCEx_GetPeriphCLKFreq>
 800c89c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800c89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d109      	bne.n	800c8b8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c8b2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	e070      	b.n	800c99a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ba:	0a1b      	lsrs	r3, r3, #8
 800c8bc:	4a39      	ldr	r2, [pc, #228]	@ (800c9a4 <HAL_SD_InitCard+0x12c>)
 800c8be:	fba2 2303 	umull	r2, r3, r2, r3
 800c8c2:	091b      	lsrs	r3, r3, #4
 800c8c4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681c      	ldr	r4, [r3, #0]
 800c8ca:	466a      	mov	r2, sp
 800c8cc:	f107 0318 	add.w	r3, r7, #24
 800c8d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c8d4:	e882 0003 	stmia.w	r2, {r0, r1}
 800c8d8:	f107 030c 	add.w	r3, r7, #12
 800c8dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f002 fe5e 	bl	800f5a0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f002 fea1 	bl	800f630 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c8ee:	69fb      	ldr	r3, [r7, #28]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d005      	beq.n	800c900 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	005b      	lsls	r3, r3, #1
 800c8f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8fe:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800c900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c902:	2b00      	cmp	r3, #0
 800c904:	d007      	beq.n	800c916 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c906:	4a28      	ldr	r2, [pc, #160]	@ (800c9a8 <HAL_SD_InitCard+0x130>)
 800c908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c90a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c90e:	3301      	adds	r3, #1
 800c910:	4618      	mov	r0, r3
 800c912:	f7fa f9a9 	bl	8006c68 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 ffea 	bl	800d8f0 <SD_PowerON>
 800c91c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c91e:	6a3b      	ldr	r3, [r7, #32]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d00b      	beq.n	800c93c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c930:	6a3b      	ldr	r3, [r7, #32]
 800c932:	431a      	orrs	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c938:	2301      	movs	r3, #1
 800c93a:	e02e      	b.n	800c99a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 ff09 	bl	800d754 <SD_InitCard>
 800c942:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c944:	6a3b      	ldr	r3, [r7, #32]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d00b      	beq.n	800c962 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2201      	movs	r2, #1
 800c94e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c956:	6a3b      	ldr	r3, [r7, #32]
 800c958:	431a      	orrs	r2, r3
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c95e:	2301      	movs	r3, #1
 800c960:	e01b      	b.n	800c99a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c96a:	4618      	mov	r0, r3
 800c96c:	f002 fef6 	bl	800f75c <SDMMC_CmdBlockLength>
 800c970:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c972:	6a3b      	ldr	r3, [r7, #32]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00f      	beq.n	800c998 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a0b      	ldr	r2, [pc, #44]	@ (800c9ac <HAL_SD_InitCard+0x134>)
 800c97e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c984:	6a3b      	ldr	r3, [r7, #32]
 800c986:	431a      	orrs	r2, r3
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2201      	movs	r2, #1
 800c990:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c994:	2301      	movs	r3, #1
 800c996:	e000      	b.n	800c99a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	372c      	adds	r7, #44	@ 0x2c
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd90      	pop	{r4, r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	014f8b59 	.word	0x014f8b59
 800c9a8:	00012110 	.word	0x00012110
 800c9ac:	1fe00fff 	.word	0x1fe00fff

0800c9b0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b08c      	sub	sp, #48	@ 0x30
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	607a      	str	r2, [r7, #4]
 800c9bc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d107      	bne.n	800c9d8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9cc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	e08d      	b.n	800caf4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	f040 8086 	bne.w	800caf2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c9ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	441a      	add	r2, r3
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d907      	bls.n	800ca0a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9fe:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	e074      	b.n	800caf4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2203      	movs	r2, #3
 800ca0e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2200      	movs	r2, #0
 800ca18:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	025a      	lsls	r2, r3, #9
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d002      	beq.n	800ca36 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800ca30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca32:	025b      	lsls	r3, r3, #9
 800ca34:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ca36:	f04f 33ff 	mov.w	r3, #4294967295
 800ca3a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	025b      	lsls	r3, r3, #9
 800ca40:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ca42:	2390      	movs	r3, #144	@ 0x90
 800ca44:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ca46:	2302      	movs	r3, #2
 800ca48:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f107 0210 	add.w	r2, r7, #16
 800ca5a:	4611      	mov	r1, r2
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f002 fe51 	bl	800f704 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	68da      	ldr	r2, [r3, #12]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ca70:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	68ba      	ldr	r2, [r7, #8]
 800ca78:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d90a      	bls.n	800ca9e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2282      	movs	r2, #130	@ 0x82
 800ca8c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca94:	4618      	mov	r0, r3
 800ca96:	f002 fea7 	bl	800f7e8 <SDMMC_CmdReadMultiBlock>
 800ca9a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800ca9c:	e009      	b.n	800cab2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2281      	movs	r2, #129	@ 0x81
 800caa2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800caaa:	4618      	mov	r0, r3
 800caac:	f002 fe79 	bl	800f7a2 <SDMMC_CmdReadSingleBlock>
 800cab0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800cab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d012      	beq.n	800cade <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a0f      	ldr	r2, [pc, #60]	@ (800cafc <HAL_SD_ReadBlocks_DMA+0x14c>)
 800cabe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cac6:	431a      	orrs	r2, r3
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2201      	movs	r2, #1
 800cad0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2200      	movs	r2, #0
 800cad8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800cada:	2301      	movs	r3, #1
 800cadc:	e00a      	b.n	800caf4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800caec:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800caee:	2300      	movs	r3, #0
 800caf0:	e000      	b.n	800caf4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800caf2:	2302      	movs	r3, #2
  }
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3730      	adds	r7, #48	@ 0x30
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	1fe00fff 	.word	0x1fe00fff

0800cb00 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b08c      	sub	sp, #48	@ 0x30
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	607a      	str	r2, [r7, #4]
 800cb0c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d107      	bne.n	800cb28 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb1c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800cb24:	2301      	movs	r3, #1
 800cb26:	e08d      	b.n	800cc44 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	f040 8086 	bne.w	800cc42 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cb3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	441a      	add	r2, r3
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d907      	bls.n	800cb5a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb4e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800cb56:	2301      	movs	r3, #1
 800cb58:	e074      	b.n	800cc44 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2203      	movs	r2, #3
 800cb5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2200      	movs	r2, #0
 800cb68:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	68ba      	ldr	r2, [r7, #8]
 800cb6e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	025a      	lsls	r2, r3, #9
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d002      	beq.n	800cb86 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800cb80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb82:	025b      	lsls	r3, r3, #9
 800cb84:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cb86:	f04f 33ff 	mov.w	r3, #4294967295
 800cb8a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	025b      	lsls	r3, r3, #9
 800cb90:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cb92:	2390      	movs	r3, #144	@ 0x90
 800cb94:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800cb96:	2300      	movs	r3, #0
 800cb98:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f107 0210 	add.w	r2, r7, #16
 800cbaa:	4611      	mov	r1, r2
 800cbac:	4618      	mov	r0, r3
 800cbae:	f002 fda9 	bl	800f704 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	68da      	ldr	r2, [r3, #12]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cbc0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	68ba      	ldr	r2, [r7, #8]
 800cbc8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2201      	movs	r2, #1
 800cbd0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d90a      	bls.n	800cbee <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	22a0      	movs	r2, #160	@ 0xa0
 800cbdc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f002 fe45 	bl	800f874 <SDMMC_CmdWriteMultiBlock>
 800cbea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800cbec:	e009      	b.n	800cc02 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2290      	movs	r2, #144	@ 0x90
 800cbf2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f002 fe17 	bl	800f82e <SDMMC_CmdWriteSingleBlock>
 800cc00:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800cc02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d012      	beq.n	800cc2e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a0f      	ldr	r2, [pc, #60]	@ (800cc4c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800cc0e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc16:	431a      	orrs	r2, r3
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2200      	movs	r2, #0
 800cc28:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e00a      	b.n	800cc44 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800cc3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	e000      	b.n	800cc44 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800cc42:	2302      	movs	r3, #2
  }
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3730      	adds	r7, #48	@ 0x30
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	1fe00fff 	.word	0x1fe00fff

0800cc50 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc5c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d008      	beq.n	800cc7e <HAL_SD_IRQHandler+0x2e>
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f003 0308 	and.w	r3, r3, #8
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d003      	beq.n	800cc7e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f001 f926 	bl	800dec8 <SD_Read_IT>
 800cc7c:	e19a      	b.n	800cfb4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	f000 80ac 	beq.w	800cde6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cc96:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	4b59      	ldr	r3, [pc, #356]	@ (800ce08 <HAL_SD_IRQHandler+0x1b8>)
 800cca4:	400b      	ands	r3, r1
 800cca6:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800ccb6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	68da      	ldr	r2, [r3, #12]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ccc6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f003 0308 	and.w	r3, r3, #8
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d038      	beq.n	800cd44 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f003 0302 	and.w	r3, r3, #2
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d104      	bne.n	800cce6 <HAL_SD_IRQHandler+0x96>
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f003 0320 	and.w	r3, r3, #32
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d011      	beq.n	800cd0a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f002 fde6 	bl	800f8bc <SDMMC_CmdStopTransfer>
 800ccf0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d008      	beq.n	800cd0a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	431a      	orrs	r2, r3
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 f95b 	bl	800cfc0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4a3f      	ldr	r2, [pc, #252]	@ (800ce0c <HAL_SD_IRQHandler+0x1bc>)
 800cd10:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2201      	movs	r2, #1
 800cd16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f003 0301 	and.w	r3, r3, #1
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d104      	bne.n	800cd34 <HAL_SD_IRQHandler+0xe4>
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f003 0302 	and.w	r3, r3, #2
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d003      	beq.n	800cd3c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f003 fa73 	bl	8010220 <HAL_SD_RxCpltCallback>
 800cd3a:	e13b      	b.n	800cfb4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f003 fa65 	bl	801020c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cd42:	e137      	b.n	800cfb4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	f000 8132 	beq.w	800cfb4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	2200      	movs	r2, #0
 800cd56:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2200      	movs	r2, #0
 800cd66:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f003 0302 	and.w	r3, r3, #2
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d104      	bne.n	800cd7c <HAL_SD_IRQHandler+0x12c>
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	f003 0320 	and.w	r3, r3, #32
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d011      	beq.n	800cda0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4618      	mov	r0, r3
 800cd82:	f002 fd9b 	bl	800f8bc <SDMMC_CmdStopTransfer>
 800cd86:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d008      	beq.n	800cda0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	431a      	orrs	r2, r3
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f000 f910 	bl	800cfc0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2201      	movs	r2, #1
 800cda4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	f003 0310 	and.w	r3, r3, #16
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d104      	bne.n	800cdc2 <HAL_SD_IRQHandler+0x172>
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f003 0320 	and.w	r3, r3, #32
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d002      	beq.n	800cdc8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f003 fa22 	bl	801020c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f003 0301 	and.w	r3, r3, #1
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d105      	bne.n	800cdde <HAL_SD_IRQHandler+0x18e>
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f003 0302 	and.w	r3, r3, #2
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	f000 80eb 	beq.w	800cfb4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f003 fa1e 	bl	8010220 <HAL_SD_RxCpltCallback>
}
 800cde4:	e0e6      	b.n	800cfb4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d00d      	beq.n	800ce10 <HAL_SD_IRQHandler+0x1c0>
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f003 0308 	and.w	r3, r3, #8
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d008      	beq.n	800ce10 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f001 f8a8 	bl	800df54 <SD_Write_IT>
 800ce04:	e0d6      	b.n	800cfb4 <HAL_SD_IRQHandler+0x364>
 800ce06:	bf00      	nop
 800ce08:	ffff3ec5 	.word	0xffff3ec5
 800ce0c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce16:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	f000 809d 	beq.w	800cf5a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce26:	f003 0302 	and.w	r3, r3, #2
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d005      	beq.n	800ce3a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce32:	f043 0202 	orr.w	r2, r3, #2
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce40:	f003 0308 	and.w	r3, r3, #8
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d005      	beq.n	800ce54 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce4c:	f043 0208 	orr.w	r2, r3, #8
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce5a:	f003 0320 	and.w	r3, r3, #32
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d005      	beq.n	800ce6e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce66:	f043 0220 	orr.w	r2, r3, #32
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce74:	f003 0310 	and.w	r3, r3, #16
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d005      	beq.n	800ce88 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce80:	f043 0210 	orr.w	r2, r3, #16
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a4b      	ldr	r2, [pc, #300]	@ (800cfbc <HAL_SD_IRQHandler+0x36c>)
 800ce8e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800ce9e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	68da      	ldr	r2, [r3, #12]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ceae:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cebe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	68da      	ldr	r2, [r3, #12]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cece:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4618      	mov	r0, r3
 800ced6:	f002 fcf1 	bl	800f8bc <SDMMC_CmdStopTransfer>
 800ceda:	4602      	mov	r2, r0
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cee0:	431a      	orrs	r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	68da      	ldr	r2, [r3, #12]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cef4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cefe:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f003 0308 	and.w	r3, r3, #8
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00a      	beq.n	800cf20 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2200      	movs	r2, #0
 800cf16:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f000 f851 	bl	800cfc0 <HAL_SD_ErrorCallback>
}
 800cf1e:	e049      	b.n	800cfb4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d044      	beq.n	800cfb4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d040      	beq.n	800cfb4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800cf40:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2200      	movs	r2, #0
 800cf48:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 f834 	bl	800cfc0 <HAL_SD_ErrorCallback>
}
 800cf58:	e02c      	b.n	800cfb4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d025      	beq.n	800cfb4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf70:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf78:	f003 0304 	and.w	r3, r3, #4
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d10c      	bne.n	800cf9a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f003 0320 	and.w	r3, r3, #32
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d003      	beq.n	800cf92 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f001 f84a 	bl	800e024 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800cf90:	e010      	b.n	800cfb4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f001 f832 	bl	800dffc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800cf98:	e00c      	b.n	800cfb4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	f003 0320 	and.w	r3, r3, #32
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d003      	beq.n	800cfac <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f001 f833 	bl	800e010 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800cfaa:	e003      	b.n	800cfb4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f001 f81b 	bl	800dfe8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800cfb2:	e7ff      	b.n	800cfb4 <HAL_SD_IRQHandler+0x364>
 800cfb4:	bf00      	nop
 800cfb6:	3710      	adds	r7, #16
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	18000f3a 	.word	0x18000f3a

0800cfc0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800cfc8:	bf00      	nop
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cfe2:	0f9b      	lsrs	r3, r3, #30
 800cfe4:	b2da      	uxtb	r2, r3
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cfee:	0e9b      	lsrs	r3, r3, #26
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	f003 030f 	and.w	r3, r3, #15
 800cff6:	b2da      	uxtb	r2, r3
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d000:	0e1b      	lsrs	r3, r3, #24
 800d002:	b2db      	uxtb	r3, r3
 800d004:	f003 0303 	and.w	r3, r3, #3
 800d008:	b2da      	uxtb	r2, r3
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d012:	0c1b      	lsrs	r3, r3, #16
 800d014:	b2da      	uxtb	r2, r3
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d01e:	0a1b      	lsrs	r3, r3, #8
 800d020:	b2da      	uxtb	r2, r3
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d02a:	b2da      	uxtb	r2, r3
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d034:	0d1b      	lsrs	r3, r3, #20
 800d036:	b29a      	uxth	r2, r3
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d040:	0c1b      	lsrs	r3, r3, #16
 800d042:	b2db      	uxtb	r3, r3
 800d044:	f003 030f 	and.w	r3, r3, #15
 800d048:	b2da      	uxtb	r2, r3
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d052:	0bdb      	lsrs	r3, r3, #15
 800d054:	b2db      	uxtb	r3, r3
 800d056:	f003 0301 	and.w	r3, r3, #1
 800d05a:	b2da      	uxtb	r2, r3
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d064:	0b9b      	lsrs	r3, r3, #14
 800d066:	b2db      	uxtb	r3, r3
 800d068:	f003 0301 	and.w	r3, r3, #1
 800d06c:	b2da      	uxtb	r2, r3
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d076:	0b5b      	lsrs	r3, r3, #13
 800d078:	b2db      	uxtb	r3, r3
 800d07a:	f003 0301 	and.w	r3, r3, #1
 800d07e:	b2da      	uxtb	r2, r3
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d088:	0b1b      	lsrs	r3, r3, #12
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	f003 0301 	and.w	r3, r3, #1
 800d090:	b2da      	uxtb	r2, r3
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	2200      	movs	r2, #0
 800d09a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d163      	bne.n	800d16c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d0a8:	009a      	lsls	r2, r3, #2
 800d0aa:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d0ae:	4013      	ands	r3, r2
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800d0b4:	0f92      	lsrs	r2, r2, #30
 800d0b6:	431a      	orrs	r2, r3
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0c0:	0edb      	lsrs	r3, r3, #27
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	f003 0307 	and.w	r3, r3, #7
 800d0c8:	b2da      	uxtb	r2, r3
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0d2:	0e1b      	lsrs	r3, r3, #24
 800d0d4:	b2db      	uxtb	r3, r3
 800d0d6:	f003 0307 	and.w	r3, r3, #7
 800d0da:	b2da      	uxtb	r2, r3
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0e4:	0d5b      	lsrs	r3, r3, #21
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	f003 0307 	and.w	r3, r3, #7
 800d0ec:	b2da      	uxtb	r2, r3
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0f6:	0c9b      	lsrs	r3, r3, #18
 800d0f8:	b2db      	uxtb	r3, r3
 800d0fa:	f003 0307 	and.w	r3, r3, #7
 800d0fe:	b2da      	uxtb	r2, r3
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d108:	0bdb      	lsrs	r3, r3, #15
 800d10a:	b2db      	uxtb	r3, r3
 800d10c:	f003 0307 	and.w	r3, r3, #7
 800d110:	b2da      	uxtb	r2, r3
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	691b      	ldr	r3, [r3, #16]
 800d11a:	1c5a      	adds	r2, r3, #1
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	7e1b      	ldrb	r3, [r3, #24]
 800d124:	b2db      	uxtb	r3, r3
 800d126:	f003 0307 	and.w	r3, r3, #7
 800d12a:	3302      	adds	r3, #2
 800d12c:	2201      	movs	r2, #1
 800d12e:	fa02 f303 	lsl.w	r3, r2, r3
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d136:	fb03 f202 	mul.w	r2, r3, r2
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	7a1b      	ldrb	r3, [r3, #8]
 800d142:	b2db      	uxtb	r3, r3
 800d144:	f003 030f 	and.w	r3, r3, #15
 800d148:	2201      	movs	r2, #1
 800d14a:	409a      	lsls	r2, r3
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800d158:	0a52      	lsrs	r2, r2, #9
 800d15a:	fb03 f202 	mul.w	r2, r3, r2
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d168:	655a      	str	r2, [r3, #84]	@ 0x54
 800d16a:	e031      	b.n	800d1d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d170:	2b01      	cmp	r3, #1
 800d172:	d11d      	bne.n	800d1b0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d178:	041b      	lsls	r3, r3, #16
 800d17a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d182:	0c1b      	lsrs	r3, r3, #16
 800d184:	431a      	orrs	r2, r3
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	691b      	ldr	r3, [r3, #16]
 800d18e:	3301      	adds	r3, #1
 800d190:	029a      	lsls	r2, r3, #10
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d1a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	655a      	str	r2, [r3, #84]	@ 0x54
 800d1ae:	e00f      	b.n	800d1d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a58      	ldr	r2, [pc, #352]	@ (800d318 <HAL_SD_GetCardCSD+0x344>)
 800d1b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	e09d      	b.n	800d30c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1d4:	0b9b      	lsrs	r3, r3, #14
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	f003 0301 	and.w	r3, r3, #1
 800d1dc:	b2da      	uxtb	r2, r3
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1e6:	09db      	lsrs	r3, r3, #7
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1fe:	b2da      	uxtb	r2, r3
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d208:	0fdb      	lsrs	r3, r3, #31
 800d20a:	b2da      	uxtb	r2, r3
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d214:	0f5b      	lsrs	r3, r3, #29
 800d216:	b2db      	uxtb	r3, r3
 800d218:	f003 0303 	and.w	r3, r3, #3
 800d21c:	b2da      	uxtb	r2, r3
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d226:	0e9b      	lsrs	r3, r3, #26
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	f003 0307 	and.w	r3, r3, #7
 800d22e:	b2da      	uxtb	r2, r3
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d238:	0d9b      	lsrs	r3, r3, #22
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	f003 030f 	and.w	r3, r3, #15
 800d240:	b2da      	uxtb	r2, r3
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d24a:	0d5b      	lsrs	r3, r3, #21
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	f003 0301 	and.w	r3, r3, #1
 800d252:	b2da      	uxtb	r2, r3
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	2200      	movs	r2, #0
 800d25e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d266:	0c1b      	lsrs	r3, r3, #16
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	f003 0301 	and.w	r3, r3, #1
 800d26e:	b2da      	uxtb	r2, r3
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d27a:	0bdb      	lsrs	r3, r3, #15
 800d27c:	b2db      	uxtb	r3, r3
 800d27e:	f003 0301 	and.w	r3, r3, #1
 800d282:	b2da      	uxtb	r2, r3
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d28e:	0b9b      	lsrs	r3, r3, #14
 800d290:	b2db      	uxtb	r3, r3
 800d292:	f003 0301 	and.w	r3, r3, #1
 800d296:	b2da      	uxtb	r2, r3
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2a2:	0b5b      	lsrs	r3, r3, #13
 800d2a4:	b2db      	uxtb	r3, r3
 800d2a6:	f003 0301 	and.w	r3, r3, #1
 800d2aa:	b2da      	uxtb	r2, r3
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2b6:	0b1b      	lsrs	r3, r3, #12
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	f003 0301 	and.w	r3, r3, #1
 800d2be:	b2da      	uxtb	r2, r3
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2ca:	0a9b      	lsrs	r3, r3, #10
 800d2cc:	b2db      	uxtb	r3, r3
 800d2ce:	f003 0303 	and.w	r3, r3, #3
 800d2d2:	b2da      	uxtb	r2, r3
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2de:	0a1b      	lsrs	r3, r3, #8
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	f003 0303 	and.w	r3, r3, #3
 800d2e6:	b2da      	uxtb	r2, r3
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2f2:	085b      	lsrs	r3, r3, #1
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2fa:	b2da      	uxtb	r2, r3
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	2201      	movs	r2, #1
 800d306:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d30a:	2300      	movs	r3, #0
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	370c      	adds	r7, #12
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr
 800d318:	1fe00fff 	.word	0x1fe00fff

0800d31c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b094      	sub	sp, #80	@ 0x50
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d326:	2300      	movs	r3, #0
 800d328:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d332:	b2db      	uxtb	r3, r3
 800d334:	2b03      	cmp	r3, #3
 800d336:	d101      	bne.n	800d33c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d338:	2301      	movs	r3, #1
 800d33a:	e0a7      	b.n	800d48c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d33c:	f107 0308 	add.w	r3, r7, #8
 800d340:	4619      	mov	r1, r3
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 fb62 	bl	800da0c <SD_SendSDStatus>
 800d348:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d34a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d011      	beq.n	800d374 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	4a4f      	ldr	r2, [pc, #316]	@ (800d494 <HAL_SD_GetCardStatus+0x178>)
 800d356:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d35c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d35e:	431a      	orrs	r2, r3
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2201      	movs	r2, #1
 800d368:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d36c:	2301      	movs	r3, #1
 800d36e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800d372:	e070      	b.n	800d456 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	099b      	lsrs	r3, r3, #6
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	f003 0303 	and.w	r3, r3, #3
 800d37e:	b2da      	uxtb	r2, r3
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	095b      	lsrs	r3, r3, #5
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	f003 0301 	and.w	r3, r3, #1
 800d38e:	b2da      	uxtb	r2, r3
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	0a1b      	lsrs	r3, r3, #8
 800d398:	b29b      	uxth	r3, r3
 800d39a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d39e:	b29a      	uxth	r2, r3
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	0e1b      	lsrs	r3, r3, #24
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	b29a      	uxth	r2, r3
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	061a      	lsls	r2, r3, #24
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	021b      	lsls	r3, r3, #8
 800d3b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d3ba:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	0a1b      	lsrs	r3, r3, #8
 800d3c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d3c4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	0e1b      	lsrs	r3, r3, #24
 800d3ca:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	b2da      	uxtb	r2, r3
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	0a1b      	lsrs	r3, r3, #8
 800d3dc:	b2da      	uxtb	r2, r3
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	0d1b      	lsrs	r3, r3, #20
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	f003 030f 	and.w	r3, r3, #15
 800d3ec:	b2da      	uxtb	r2, r3
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	0c1b      	lsrs	r3, r3, #16
 800d3f6:	b29b      	uxth	r3, r3
 800d3f8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d3fc:	b29a      	uxth	r2, r3
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	b29b      	uxth	r3, r3
 800d402:	b2db      	uxtb	r3, r3
 800d404:	b29b      	uxth	r3, r3
 800d406:	4313      	orrs	r3, r2
 800d408:	b29a      	uxth	r2, r3
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	0a9b      	lsrs	r3, r3, #10
 800d412:	b2db      	uxtb	r3, r3
 800d414:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d418:	b2da      	uxtb	r2, r3
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	0a1b      	lsrs	r3, r3, #8
 800d422:	b2db      	uxtb	r3, r3
 800d424:	f003 0303 	and.w	r3, r3, #3
 800d428:	b2da      	uxtb	r2, r3
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	091b      	lsrs	r3, r3, #4
 800d432:	b2db      	uxtb	r3, r3
 800d434:	f003 030f 	and.w	r3, r3, #15
 800d438:	b2da      	uxtb	r2, r3
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	b2db      	uxtb	r3, r3
 800d442:	f003 030f 	and.w	r3, r3, #15
 800d446:	b2da      	uxtb	r2, r3
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d44c:	69bb      	ldr	r3, [r7, #24]
 800d44e:	0e1b      	lsrs	r3, r3, #24
 800d450:	b2da      	uxtb	r2, r3
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d45e:	4618      	mov	r0, r3
 800d460:	f002 f97c 	bl	800f75c <SDMMC_CmdBlockLength>
 800d464:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d00d      	beq.n	800d488 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4a08      	ldr	r2, [pc, #32]	@ (800d494 <HAL_SD_GetCardStatus+0x178>)
 800d472:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d478:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2201      	movs	r2, #1
 800d47e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d482:	2301      	movs	r3, #1
 800d484:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800d488:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3750      	adds	r7, #80	@ 0x50
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	1fe00fff 	.word	0x1fe00fff

0800d498 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d4e2:	2300      	movs	r3, #0
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d4f0:	b590      	push	{r4, r7, lr}
 800d4f2:	b08d      	sub	sp, #52	@ 0x34
 800d4f4:	af02      	add	r7, sp, #8
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2203      	movs	r2, #3
 800d504:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d50c:	2b03      	cmp	r3, #3
 800d50e:	d02e      	beq.n	800d56e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d516:	d106      	bne.n	800d526 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d51c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	635a      	str	r2, [r3, #52]	@ 0x34
 800d524:	e029      	b.n	800d57a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d52c:	d10a      	bne.n	800d544 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f000 fb64 	bl	800dbfc <SD_WideBus_Enable>
 800d534:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d53a:	6a3b      	ldr	r3, [r7, #32]
 800d53c:	431a      	orrs	r2, r3
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	635a      	str	r2, [r3, #52]	@ 0x34
 800d542:	e01a      	b.n	800d57a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d10a      	bne.n	800d560 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f000 fba1 	bl	800dc92 <SD_WideBus_Disable>
 800d550:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d556:	6a3b      	ldr	r3, [r7, #32]
 800d558:	431a      	orrs	r2, r3
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	635a      	str	r2, [r3, #52]	@ 0x34
 800d55e:	e00c      	b.n	800d57a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d564:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	635a      	str	r2, [r3, #52]	@ 0x34
 800d56c:	e005      	b.n	800d57a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d572:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d007      	beq.n	800d592 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	4a5f      	ldr	r2, [pc, #380]	@ (800d704 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d588:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800d58a:	2301      	movs	r3, #1
 800d58c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d590:	e096      	b.n	800d6c0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d592:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d596:	f04f 0100 	mov.w	r1, #0
 800d59a:	f7fd fdf5 	bl	800b188 <HAL_RCCEx_GetPeriphCLKFreq>
 800d59e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d5a0:	69fb      	ldr	r3, [r7, #28]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	f000 8083 	beq.w	800d6ae <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	691b      	ldr	r3, [r3, #16]
 800d5bc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	695a      	ldr	r2, [r3, #20]
 800d5c2:	69fb      	ldr	r3, [r7, #28]
 800d5c4:	4950      	ldr	r1, [pc, #320]	@ (800d708 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d5c6:	fba1 1303 	umull	r1, r3, r1, r3
 800d5ca:	0e1b      	lsrs	r3, r3, #24
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d303      	bcc.n	800d5d8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	695b      	ldr	r3, [r3, #20]
 800d5d4:	61bb      	str	r3, [r7, #24]
 800d5d6:	e05a      	b.n	800d68e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5e0:	d103      	bne.n	800d5ea <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	695b      	ldr	r3, [r3, #20]
 800d5e6:	61bb      	str	r3, [r7, #24]
 800d5e8:	e051      	b.n	800d68e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d5f2:	d126      	bne.n	800d642 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	695b      	ldr	r3, [r3, #20]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d10e      	bne.n	800d61a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	4a43      	ldr	r2, [pc, #268]	@ (800d70c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d906      	bls.n	800d612 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	4a40      	ldr	r2, [pc, #256]	@ (800d708 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d608:	fba2 2303 	umull	r2, r3, r2, r3
 800d60c:	0e5b      	lsrs	r3, r3, #25
 800d60e:	61bb      	str	r3, [r7, #24]
 800d610:	e03d      	b.n	800d68e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	695b      	ldr	r3, [r3, #20]
 800d616:	61bb      	str	r3, [r7, #24]
 800d618:	e039      	b.n	800d68e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	695b      	ldr	r3, [r3, #20]
 800d61e:	005b      	lsls	r3, r3, #1
 800d620:	69fa      	ldr	r2, [r7, #28]
 800d622:	fbb2 f3f3 	udiv	r3, r2, r3
 800d626:	4a39      	ldr	r2, [pc, #228]	@ (800d70c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d906      	bls.n	800d63a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d62c:	69fb      	ldr	r3, [r7, #28]
 800d62e:	4a36      	ldr	r2, [pc, #216]	@ (800d708 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d630:	fba2 2303 	umull	r2, r3, r2, r3
 800d634:	0e5b      	lsrs	r3, r3, #25
 800d636:	61bb      	str	r3, [r7, #24]
 800d638:	e029      	b.n	800d68e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	695b      	ldr	r3, [r3, #20]
 800d63e:	61bb      	str	r3, [r7, #24]
 800d640:	e025      	b.n	800d68e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	695b      	ldr	r3, [r3, #20]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d10e      	bne.n	800d668 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d64a:	69fb      	ldr	r3, [r7, #28]
 800d64c:	4a30      	ldr	r2, [pc, #192]	@ (800d710 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d906      	bls.n	800d660 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	4a2c      	ldr	r2, [pc, #176]	@ (800d708 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d656:	fba2 2303 	umull	r2, r3, r2, r3
 800d65a:	0e1b      	lsrs	r3, r3, #24
 800d65c:	61bb      	str	r3, [r7, #24]
 800d65e:	e016      	b.n	800d68e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	695b      	ldr	r3, [r3, #20]
 800d664:	61bb      	str	r3, [r7, #24]
 800d666:	e012      	b.n	800d68e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	695b      	ldr	r3, [r3, #20]
 800d66c:	005b      	lsls	r3, r3, #1
 800d66e:	69fa      	ldr	r2, [r7, #28]
 800d670:	fbb2 f3f3 	udiv	r3, r2, r3
 800d674:	4a26      	ldr	r2, [pc, #152]	@ (800d710 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d906      	bls.n	800d688 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d67a:	69fb      	ldr	r3, [r7, #28]
 800d67c:	4a22      	ldr	r2, [pc, #136]	@ (800d708 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d67e:	fba2 2303 	umull	r2, r3, r2, r3
 800d682:	0e1b      	lsrs	r3, r3, #24
 800d684:	61bb      	str	r3, [r7, #24]
 800d686:	e002      	b.n	800d68e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	695b      	ldr	r3, [r3, #20]
 800d68c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681c      	ldr	r4, [r3, #0]
 800d692:	466a      	mov	r2, sp
 800d694:	f107 0314 	add.w	r3, r7, #20
 800d698:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d69c:	e882 0003 	stmia.w	r2, {r0, r1}
 800d6a0:	f107 0308 	add.w	r3, r7, #8
 800d6a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	f001 ff7a 	bl	800f5a0 <SDMMC_Init>
 800d6ac:	e008      	b.n	800d6c0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6b2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f002 f847 	bl	800f75c <SDMMC_CmdBlockLength>
 800d6ce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d6d0:	6a3b      	ldr	r3, [r7, #32]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d00c      	beq.n	800d6f0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4a0a      	ldr	r2, [pc, #40]	@ (800d704 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d6dc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d6e2:	6a3b      	ldr	r3, [r7, #32]
 800d6e4:	431a      	orrs	r2, r3
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800d6f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	372c      	adds	r7, #44	@ 0x2c
 800d700:	46bd      	mov	sp, r7
 800d702:	bd90      	pop	{r4, r7, pc}
 800d704:	1fe00fff 	.word	0x1fe00fff
 800d708:	55e63b89 	.word	0x55e63b89
 800d70c:	02faf080 	.word	0x02faf080
 800d710:	017d7840 	.word	0x017d7840

0800d714 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b086      	sub	sp, #24
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d71c:	2300      	movs	r3, #0
 800d71e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d720:	f107 030c 	add.w	r3, r7, #12
 800d724:	4619      	mov	r1, r3
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 fa40 	bl	800dbac <SD_SendStatus>
 800d72c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d005      	beq.n	800d740 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	431a      	orrs	r2, r3
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	0a5b      	lsrs	r3, r3, #9
 800d744:	f003 030f 	and.w	r3, r3, #15
 800d748:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d74a:	693b      	ldr	r3, [r7, #16]
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3718      	adds	r7, #24
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b090      	sub	sp, #64	@ 0x40
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800d75c:	2300      	movs	r3, #0
 800d75e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800d760:	f7f9 fa76 	bl	8006c50 <HAL_GetTick>
 800d764:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4618      	mov	r0, r3
 800d76c:	f001 ff71 	bl	800f652 <SDMMC_GetPowerState>
 800d770:	4603      	mov	r3, r0
 800d772:	2b00      	cmp	r3, #0
 800d774:	d102      	bne.n	800d77c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d776:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d77a:	e0b5      	b.n	800d8e8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d780:	2b03      	cmp	r3, #3
 800d782:	d02e      	beq.n	800d7e2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	4618      	mov	r0, r3
 800d78a:	f002 f9bc 	bl	800fb06 <SDMMC_CmdSendCID>
 800d78e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d792:	2b00      	cmp	r3, #0
 800d794:	d001      	beq.n	800d79a <SD_InitCard+0x46>
    {
      return errorstate;
 800d796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d798:	e0a6      	b.n	800d8e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	2100      	movs	r1, #0
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f001 ff9c 	bl	800f6de <SDMMC_GetResponse>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	2104      	movs	r1, #4
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f001 ff93 	bl	800f6de <SDMMC_GetResponse>
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	2108      	movs	r1, #8
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f001 ff8a 	bl	800f6de <SDMMC_GetResponse>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	210c      	movs	r1, #12
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f001 ff81 	bl	800f6de <SDMMC_GetResponse>
 800d7dc:	4602      	mov	r2, r0
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7e6:	2b03      	cmp	r3, #3
 800d7e8:	d01d      	beq.n	800d826 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d7ea:	e019      	b.n	800d820 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f107 020a 	add.w	r2, r7, #10
 800d7f4:	4611      	mov	r1, r2
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f002 f9c4 	bl	800fb84 <SDMMC_CmdSetRelAdd>
 800d7fc:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d7fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d800:	2b00      	cmp	r3, #0
 800d802:	d001      	beq.n	800d808 <SD_InitCard+0xb4>
      {
        return errorstate;
 800d804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d806:	e06f      	b.n	800d8e8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d808:	f7f9 fa22 	bl	8006c50 <HAL_GetTick>
 800d80c:	4602      	mov	r2, r0
 800d80e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d810:	1ad3      	subs	r3, r2, r3
 800d812:	f241 3287 	movw	r2, #4999	@ 0x1387
 800d816:	4293      	cmp	r3, r2
 800d818:	d902      	bls.n	800d820 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d81a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d81e:	e063      	b.n	800d8e8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d820:	897b      	ldrh	r3, [r7, #10]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d0e2      	beq.n	800d7ec <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d82a:	2b03      	cmp	r3, #3
 800d82c:	d036      	beq.n	800d89c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d82e:	897b      	ldrh	r3, [r7, #10]
 800d830:	461a      	mov	r2, r3
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d83e:	041b      	lsls	r3, r3, #16
 800d840:	4619      	mov	r1, r3
 800d842:	4610      	mov	r0, r2
 800d844:	f002 f97e 	bl	800fb44 <SDMMC_CmdSendCSD>
 800d848:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d84a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d001      	beq.n	800d854 <SD_InitCard+0x100>
    {
      return errorstate;
 800d850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d852:	e049      	b.n	800d8e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2100      	movs	r1, #0
 800d85a:	4618      	mov	r0, r3
 800d85c:	f001 ff3f 	bl	800f6de <SDMMC_GetResponse>
 800d860:	4602      	mov	r2, r0
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	2104      	movs	r1, #4
 800d86c:	4618      	mov	r0, r3
 800d86e:	f001 ff36 	bl	800f6de <SDMMC_GetResponse>
 800d872:	4602      	mov	r2, r0
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2108      	movs	r1, #8
 800d87e:	4618      	mov	r0, r3
 800d880:	f001 ff2d 	bl	800f6de <SDMMC_GetResponse>
 800d884:	4602      	mov	r2, r0
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	210c      	movs	r1, #12
 800d890:	4618      	mov	r0, r3
 800d892:	f001 ff24 	bl	800f6de <SDMMC_GetResponse>
 800d896:	4602      	mov	r2, r0
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2104      	movs	r1, #4
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f001 ff1b 	bl	800f6de <SDMMC_GetResponse>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	0d1a      	lsrs	r2, r3, #20
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d8b0:	f107 030c 	add.w	r3, r7, #12
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f7ff fb8c 	bl	800cfd4 <HAL_SD_GetCardCSD>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d002      	beq.n	800d8c8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8c2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d8c6:	e00f      	b.n	800d8e8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681a      	ldr	r2, [r3, #0]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8d0:	041b      	lsls	r3, r3, #16
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	4610      	mov	r0, r2
 800d8d6:	f002 f82d 	bl	800f934 <SDMMC_CmdSelDesel>
 800d8da:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d8dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d001      	beq.n	800d8e6 <SD_InitCard+0x192>
  {
    return errorstate;
 800d8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8e4:	e000      	b.n	800d8e8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d8e6:	2300      	movs	r3, #0
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3740      	adds	r7, #64	@ 0x40
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b086      	sub	sp, #24
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d900:	2300      	movs	r3, #0
 800d902:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4618      	mov	r0, r3
 800d90a:	f002 f836 	bl	800f97a <SDMMC_CmdGoIdleState>
 800d90e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d001      	beq.n	800d91a <SD_PowerON+0x2a>
  {
    return errorstate;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	e072      	b.n	800da00 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	4618      	mov	r0, r3
 800d920:	f002 f849 	bl	800f9b6 <SDMMC_CmdOperCond>
 800d924:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d92c:	d10d      	bne.n	800d94a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2200      	movs	r2, #0
 800d932:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4618      	mov	r0, r3
 800d93a:	f002 f81e 	bl	800f97a <SDMMC_CmdGoIdleState>
 800d93e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d004      	beq.n	800d950 <SD_PowerON+0x60>
    {
      return errorstate;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	e05a      	b.n	800da00 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2201      	movs	r2, #1
 800d94e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d954:	2b01      	cmp	r3, #1
 800d956:	d137      	bne.n	800d9c8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2100      	movs	r1, #0
 800d95e:	4618      	mov	r0, r3
 800d960:	f002 f849 	bl	800f9f6 <SDMMC_CmdAppCommand>
 800d964:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d02d      	beq.n	800d9c8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d96c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d970:	e046      	b.n	800da00 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	2100      	movs	r1, #0
 800d978:	4618      	mov	r0, r3
 800d97a:	f002 f83c 	bl	800f9f6 <SDMMC_CmdAppCommand>
 800d97e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d001      	beq.n	800d98a <SD_PowerON+0x9a>
    {
      return errorstate;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	e03a      	b.n	800da00 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	491e      	ldr	r1, [pc, #120]	@ (800da08 <SD_PowerON+0x118>)
 800d990:	4618      	mov	r0, r3
 800d992:	f002 f853 	bl	800fa3c <SDMMC_CmdAppOperCommand>
 800d996:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d002      	beq.n	800d9a4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d99e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d9a2:	e02d      	b.n	800da00 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	2100      	movs	r1, #0
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f001 fe97 	bl	800f6de <SDMMC_GetResponse>
 800d9b0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	0fdb      	lsrs	r3, r3, #31
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	d101      	bne.n	800d9be <SD_PowerON+0xce>
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	e000      	b.n	800d9c0 <SD_PowerON+0xd0>
 800d9be:	2300      	movs	r3, #0
 800d9c0:	613b      	str	r3, [r7, #16]

    count++;
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d802      	bhi.n	800d9d8 <SD_PowerON+0xe8>
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d0cc      	beq.n	800d972 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d902      	bls.n	800d9e8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d9e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d9e6:	e00b      	b.n	800da00 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d002      	beq.n	800d9fe <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d9fe:	2300      	movs	r3, #0
}
 800da00:	4618      	mov	r0, r3
 800da02:	3718      	adds	r7, #24
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}
 800da08:	c1100000 	.word	0xc1100000

0800da0c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b08c      	sub	sp, #48	@ 0x30
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800da16:	f7f9 f91b 	bl	8006c50 <HAL_GetTick>
 800da1a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	2100      	movs	r1, #0
 800da26:	4618      	mov	r0, r3
 800da28:	f001 fe59 	bl	800f6de <SDMMC_GetResponse>
 800da2c:	4603      	mov	r3, r0
 800da2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800da32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800da36:	d102      	bne.n	800da3e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800da38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800da3c:	e0b0      	b.n	800dba0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	2140      	movs	r1, #64	@ 0x40
 800da44:	4618      	mov	r0, r3
 800da46:	f001 fe89 	bl	800f75c <SDMMC_CmdBlockLength>
 800da4a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800da4c:	6a3b      	ldr	r3, [r7, #32]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d005      	beq.n	800da5e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800da5a:	6a3b      	ldr	r3, [r7, #32]
 800da5c:	e0a0      	b.n	800dba0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681a      	ldr	r2, [r3, #0]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da66:	041b      	lsls	r3, r3, #16
 800da68:	4619      	mov	r1, r3
 800da6a:	4610      	mov	r0, r2
 800da6c:	f001 ffc3 	bl	800f9f6 <SDMMC_CmdAppCommand>
 800da70:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800da72:	6a3b      	ldr	r3, [r7, #32]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d005      	beq.n	800da84 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800da80:	6a3b      	ldr	r3, [r7, #32]
 800da82:	e08d      	b.n	800dba0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800da84:	f04f 33ff 	mov.w	r3, #4294967295
 800da88:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800da8a:	2340      	movs	r3, #64	@ 0x40
 800da8c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800da8e:	2360      	movs	r3, #96	@ 0x60
 800da90:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800da92:	2302      	movs	r3, #2
 800da94:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800da96:	2300      	movs	r3, #0
 800da98:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800da9a:	2301      	movs	r3, #1
 800da9c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f107 0208 	add.w	r2, r7, #8
 800daa6:	4611      	mov	r1, r2
 800daa8:	4618      	mov	r0, r3
 800daaa:	f001 fe2b 	bl	800f704 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4618      	mov	r0, r3
 800dab4:	f002 f8ab 	bl	800fc0e <SDMMC_CmdStatusRegister>
 800dab8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800daba:	6a3b      	ldr	r3, [r7, #32]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d02b      	beq.n	800db18 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800dac8:	6a3b      	ldr	r3, [r7, #32]
 800daca:	e069      	b.n	800dba0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dad2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d013      	beq.n	800db02 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800dada:	2300      	movs	r3, #0
 800dadc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dade:	e00d      	b.n	800dafc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4618      	mov	r0, r3
 800dae6:	f001 fd85 	bl	800f5f4 <SDMMC_ReadFIFO>
 800daea:	4602      	mov	r2, r0
 800daec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daee:	601a      	str	r2, [r3, #0]
        pData++;
 800daf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daf2:	3304      	adds	r3, #4
 800daf4:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800daf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daf8:	3301      	adds	r3, #1
 800dafa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dafe:	2b07      	cmp	r3, #7
 800db00:	d9ee      	bls.n	800dae0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800db02:	f7f9 f8a5 	bl	8006c50 <HAL_GetTick>
 800db06:	4602      	mov	r2, r0
 800db08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db0a:	1ad3      	subs	r3, r2, r3
 800db0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db10:	d102      	bne.n	800db18 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800db12:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db16:	e043      	b.n	800dba0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db1e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800db22:	2b00      	cmp	r3, #0
 800db24:	d0d2      	beq.n	800dacc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db2c:	f003 0308 	and.w	r3, r3, #8
 800db30:	2b00      	cmp	r3, #0
 800db32:	d001      	beq.n	800db38 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800db34:	2308      	movs	r3, #8
 800db36:	e033      	b.n	800dba0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db3e:	f003 0302 	and.w	r3, r3, #2
 800db42:	2b00      	cmp	r3, #0
 800db44:	d001      	beq.n	800db4a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800db46:	2302      	movs	r3, #2
 800db48:	e02a      	b.n	800dba0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db50:	f003 0320 	and.w	r3, r3, #32
 800db54:	2b00      	cmp	r3, #0
 800db56:	d017      	beq.n	800db88 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800db58:	2320      	movs	r3, #32
 800db5a:	e021      	b.n	800dba0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4618      	mov	r0, r3
 800db62:	f001 fd47 	bl	800f5f4 <SDMMC_ReadFIFO>
 800db66:	4602      	mov	r2, r0
 800db68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db6a:	601a      	str	r2, [r3, #0]
    pData++;
 800db6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db6e:	3304      	adds	r3, #4
 800db70:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800db72:	f7f9 f86d 	bl	8006c50 <HAL_GetTick>
 800db76:	4602      	mov	r2, r0
 800db78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db7a:	1ad3      	subs	r3, r2, r3
 800db7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db80:	d102      	bne.n	800db88 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800db82:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db86:	e00b      	b.n	800dba0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800db92:	2b00      	cmp	r3, #0
 800db94:	d1e2      	bne.n	800db5c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4a03      	ldr	r2, [pc, #12]	@ (800dba8 <SD_SendSDStatus+0x19c>)
 800db9c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800db9e:	2300      	movs	r3, #0
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3730      	adds	r7, #48	@ 0x30
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	18000f3a 	.word	0x18000f3a

0800dbac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d102      	bne.n	800dbc2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dbbc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dbc0:	e018      	b.n	800dbf4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbca:	041b      	lsls	r3, r3, #16
 800dbcc:	4619      	mov	r1, r3
 800dbce:	4610      	mov	r0, r2
 800dbd0:	f001 fffa 	bl	800fbc8 <SDMMC_CmdSendStatus>
 800dbd4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d001      	beq.n	800dbe0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	e009      	b.n	800dbf4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	2100      	movs	r1, #0
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f001 fd79 	bl	800f6de <SDMMC_GetResponse>
 800dbec:	4602      	mov	r2, r0
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dbf2:	2300      	movs	r3, #0
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3710      	adds	r7, #16
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b086      	sub	sp, #24
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800dc04:	2300      	movs	r3, #0
 800dc06:	60fb      	str	r3, [r7, #12]
 800dc08:	2300      	movs	r3, #0
 800dc0a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	2100      	movs	r1, #0
 800dc12:	4618      	mov	r0, r3
 800dc14:	f001 fd63 	bl	800f6de <SDMMC_GetResponse>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dc22:	d102      	bne.n	800dc2a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dc24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dc28:	e02f      	b.n	800dc8a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dc2a:	f107 030c 	add.w	r3, r7, #12
 800dc2e:	4619      	mov	r1, r3
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f000 f879 	bl	800dd28 <SD_FindSCR>
 800dc36:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d001      	beq.n	800dc42 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	e023      	b.n	800dc8a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d01c      	beq.n	800dc86 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681a      	ldr	r2, [r3, #0]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc54:	041b      	lsls	r3, r3, #16
 800dc56:	4619      	mov	r1, r3
 800dc58:	4610      	mov	r0, r2
 800dc5a:	f001 fecc 	bl	800f9f6 <SDMMC_CmdAppCommand>
 800dc5e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d001      	beq.n	800dc6a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	e00f      	b.n	800dc8a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2102      	movs	r1, #2
 800dc70:	4618      	mov	r0, r3
 800dc72:	f001 ff03 	bl	800fa7c <SDMMC_CmdBusWidth>
 800dc76:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d001      	beq.n	800dc82 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	e003      	b.n	800dc8a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dc82:	2300      	movs	r3, #0
 800dc84:	e001      	b.n	800dc8a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dc86:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3718      	adds	r7, #24
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}

0800dc92 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800dc92:	b580      	push	{r7, lr}
 800dc94:	b086      	sub	sp, #24
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	60fb      	str	r3, [r7, #12]
 800dc9e:	2300      	movs	r3, #0
 800dca0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2100      	movs	r1, #0
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f001 fd18 	bl	800f6de <SDMMC_GetResponse>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dcb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dcb8:	d102      	bne.n	800dcc0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dcba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dcbe:	e02f      	b.n	800dd20 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dcc0:	f107 030c 	add.w	r3, r7, #12
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f000 f82e 	bl	800dd28 <SD_FindSCR>
 800dccc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d001      	beq.n	800dcd8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	e023      	b.n	800dd20 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d01c      	beq.n	800dd1c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcea:	041b      	lsls	r3, r3, #16
 800dcec:	4619      	mov	r1, r3
 800dcee:	4610      	mov	r0, r2
 800dcf0:	f001 fe81 	bl	800f9f6 <SDMMC_CmdAppCommand>
 800dcf4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d001      	beq.n	800dd00 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	e00f      	b.n	800dd20 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	2100      	movs	r1, #0
 800dd06:	4618      	mov	r0, r3
 800dd08:	f001 feb8 	bl	800fa7c <SDMMC_CmdBusWidth>
 800dd0c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d001      	beq.n	800dd18 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	e003      	b.n	800dd20 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	e001      	b.n	800dd20 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dd1c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3718      	adds	r7, #24
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b08e      	sub	sp, #56	@ 0x38
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dd32:	f7f8 ff8d 	bl	8006c50 <HAL_GetTick>
 800dd36:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	60bb      	str	r3, [r7, #8]
 800dd40:	2300      	movs	r3, #0
 800dd42:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	2108      	movs	r1, #8
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f001 fd04 	bl	800f75c <SDMMC_CmdBlockLength>
 800dd54:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dd56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d001      	beq.n	800dd60 <SD_FindSCR+0x38>
  {
    return errorstate;
 800dd5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd5e:	e0ad      	b.n	800debc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681a      	ldr	r2, [r3, #0]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd68:	041b      	lsls	r3, r3, #16
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	4610      	mov	r0, r2
 800dd6e:	f001 fe42 	bl	800f9f6 <SDMMC_CmdAppCommand>
 800dd72:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dd74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d001      	beq.n	800dd7e <SD_FindSCR+0x56>
  {
    return errorstate;
 800dd7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd7c:	e09e      	b.n	800debc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dd7e:	f04f 33ff 	mov.w	r3, #4294967295
 800dd82:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dd84:	2308      	movs	r3, #8
 800dd86:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800dd88:	2330      	movs	r3, #48	@ 0x30
 800dd8a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dd8c:	2302      	movs	r3, #2
 800dd8e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dd90:	2300      	movs	r3, #0
 800dd92:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800dd94:	2301      	movs	r3, #1
 800dd96:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f107 0210 	add.w	r2, r7, #16
 800dda0:	4611      	mov	r1, r2
 800dda2:	4618      	mov	r0, r3
 800dda4:	f001 fcae 	bl	800f704 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	4618      	mov	r0, r3
 800ddae:	f001 fe88 	bl	800fac2 <SDMMC_CmdSendSCR>
 800ddb2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ddb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d027      	beq.n	800de0a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ddba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddbc:	e07e      	b.n	800debc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d113      	bne.n	800ddf4 <SD_FindSCR+0xcc>
 800ddcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d110      	bne.n	800ddf4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f001 fc0c 	bl	800f5f4 <SDMMC_ReadFIFO>
 800dddc:	4603      	mov	r3, r0
 800ddde:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4618      	mov	r0, r3
 800dde6:	f001 fc05 	bl	800f5f4 <SDMMC_ReadFIFO>
 800ddea:	4603      	mov	r3, r0
 800ddec:	60fb      	str	r3, [r7, #12]
      index++;
 800ddee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddf0:	3301      	adds	r3, #1
 800ddf2:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ddf4:	f7f8 ff2c 	bl	8006c50 <HAL_GetTick>
 800ddf8:	4602      	mov	r2, r0
 800ddfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddfc:	1ad3      	subs	r3, r2, r3
 800ddfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de02:	d102      	bne.n	800de0a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800de04:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800de08:	e058      	b.n	800debc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800de10:	f240 532a 	movw	r3, #1322	@ 0x52a
 800de14:	4013      	ands	r3, r2
 800de16:	2b00      	cmp	r3, #0
 800de18:	d0d1      	beq.n	800ddbe <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de20:	f003 0308 	and.w	r3, r3, #8
 800de24:	2b00      	cmp	r3, #0
 800de26:	d005      	beq.n	800de34 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	2208      	movs	r2, #8
 800de2e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800de30:	2308      	movs	r3, #8
 800de32:	e043      	b.n	800debc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de3a:	f003 0302 	and.w	r3, r3, #2
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d005      	beq.n	800de4e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	2202      	movs	r2, #2
 800de48:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800de4a:	2302      	movs	r3, #2
 800de4c:	e036      	b.n	800debc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de54:	f003 0320 	and.w	r3, r3, #32
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d005      	beq.n	800de68 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2220      	movs	r2, #32
 800de62:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800de64:	2320      	movs	r3, #32
 800de66:	e029      	b.n	800debc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a15      	ldr	r2, [pc, #84]	@ (800dec4 <SD_FindSCR+0x19c>)
 800de6e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	061a      	lsls	r2, r3, #24
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	021b      	lsls	r3, r3, #8
 800de78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800de7c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	0a1b      	lsrs	r3, r3, #8
 800de82:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800de86:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	0e1b      	lsrs	r3, r3, #24
 800de8c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800de8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de90:	601a      	str	r2, [r3, #0]
    scr++;
 800de92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de94:	3304      	adds	r3, #4
 800de96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	061a      	lsls	r2, r3, #24
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	021b      	lsls	r3, r3, #8
 800dea0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dea4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	0a1b      	lsrs	r3, r3, #8
 800deaa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800deae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	0e1b      	lsrs	r3, r3, #24
 800deb4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800deb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deb8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800deba:	2300      	movs	r3, #0
}
 800debc:	4618      	mov	r0, r3
 800debe:	3738      	adds	r7, #56	@ 0x38
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}
 800dec4:	18000f3a 	.word	0x18000f3a

0800dec8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b086      	sub	sp, #24
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ded4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800deda:	2b1f      	cmp	r3, #31
 800dedc:	d936      	bls.n	800df4c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800dede:	2300      	movs	r3, #0
 800dee0:	617b      	str	r3, [r7, #20]
 800dee2:	e027      	b.n	800df34 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4618      	mov	r0, r3
 800deea:	f001 fb83 	bl	800f5f4 <SDMMC_ReadFIFO>
 800deee:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	b2da      	uxtb	r2, r3
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	3301      	adds	r3, #1
 800defc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	0a1b      	lsrs	r3, r3, #8
 800df02:	b2da      	uxtb	r2, r3
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	701a      	strb	r2, [r3, #0]
      tmp++;
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	3301      	adds	r3, #1
 800df0c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	0c1b      	lsrs	r3, r3, #16
 800df12:	b2da      	uxtb	r2, r3
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	701a      	strb	r2, [r3, #0]
      tmp++;
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	3301      	adds	r3, #1
 800df1c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	0e1b      	lsrs	r3, r3, #24
 800df22:	b2da      	uxtb	r2, r3
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	701a      	strb	r2, [r3, #0]
      tmp++;
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	3301      	adds	r3, #1
 800df2c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	3301      	adds	r3, #1
 800df32:	617b      	str	r3, [r7, #20]
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	2b07      	cmp	r3, #7
 800df38:	d9d4      	bls.n	800dee4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	693a      	ldr	r2, [r7, #16]
 800df3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df44:	f1a3 0220 	sub.w	r2, r3, #32
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800df4c:	bf00      	nop
 800df4e:	3718      	adds	r7, #24
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}

0800df54 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b086      	sub	sp, #24
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	69db      	ldr	r3, [r3, #28]
 800df60:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6a1b      	ldr	r3, [r3, #32]
 800df66:	2b1f      	cmp	r3, #31
 800df68:	d93a      	bls.n	800dfe0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800df6a:	2300      	movs	r3, #0
 800df6c:	617b      	str	r3, [r7, #20]
 800df6e:	e02b      	b.n	800dfc8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	60fb      	str	r3, [r7, #12]
      tmp++;
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	3301      	adds	r3, #1
 800df7a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	021a      	lsls	r2, r3, #8
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	4313      	orrs	r3, r2
 800df86:	60fb      	str	r3, [r7, #12]
      tmp++;
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	3301      	adds	r3, #1
 800df8c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	041a      	lsls	r2, r3, #16
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	4313      	orrs	r3, r2
 800df98:	60fb      	str	r3, [r7, #12]
      tmp++;
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	3301      	adds	r3, #1
 800df9e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	061a      	lsls	r2, r3, #24
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	4313      	orrs	r3, r2
 800dfaa:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	3301      	adds	r3, #1
 800dfb0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f107 020c 	add.w	r2, r7, #12
 800dfba:	4611      	mov	r1, r2
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f001 fb26 	bl	800f60e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	617b      	str	r3, [r7, #20]
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	2b07      	cmp	r3, #7
 800dfcc:	d9d0      	bls.n	800df70 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	693a      	ldr	r2, [r7, #16]
 800dfd2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6a1b      	ldr	r3, [r3, #32]
 800dfd8:	f1a3 0220 	sub.w	r2, r3, #32
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	621a      	str	r2, [r3, #32]
  }
}
 800dfe0:	bf00      	nop
 800dfe2:	3718      	adds	r7, #24
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}

0800dfe8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b083      	sub	sp, #12
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800dff0:	bf00      	nop
 800dff2:	370c      	adds	r7, #12
 800dff4:	46bd      	mov	sp, r7
 800dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffa:	4770      	bx	lr

0800dffc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b083      	sub	sp, #12
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e004:	bf00      	nop
 800e006:	370c      	adds	r7, #12
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr

0800e010 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e010:	b480      	push	{r7}
 800e012:	b083      	sub	sp, #12
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e018:	bf00      	nop
 800e01a:	370c      	adds	r7, #12
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr

0800e024 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e02c:	bf00      	nop
 800e02e:	370c      	adds	r7, #12
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr

0800e038 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d101      	bne.n	800e04a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e046:	2301      	movs	r3, #1
 800e048:	e10f      	b.n	800e26a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2200      	movs	r2, #0
 800e04e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	4a87      	ldr	r2, [pc, #540]	@ (800e274 <HAL_SPI_Init+0x23c>)
 800e056:	4293      	cmp	r3, r2
 800e058:	d00f      	beq.n	800e07a <HAL_SPI_Init+0x42>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	4a86      	ldr	r2, [pc, #536]	@ (800e278 <HAL_SPI_Init+0x240>)
 800e060:	4293      	cmp	r3, r2
 800e062:	d00a      	beq.n	800e07a <HAL_SPI_Init+0x42>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4a84      	ldr	r2, [pc, #528]	@ (800e27c <HAL_SPI_Init+0x244>)
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d005      	beq.n	800e07a <HAL_SPI_Init+0x42>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	68db      	ldr	r3, [r3, #12]
 800e072:	2b0f      	cmp	r3, #15
 800e074:	d901      	bls.n	800e07a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e076:	2301      	movs	r3, #1
 800e078:	e0f7      	b.n	800e26a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 f90a 	bl	800e294 <SPI_GetPacketSize>
 800e080:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4a7b      	ldr	r2, [pc, #492]	@ (800e274 <HAL_SPI_Init+0x23c>)
 800e088:	4293      	cmp	r3, r2
 800e08a:	d00c      	beq.n	800e0a6 <HAL_SPI_Init+0x6e>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	4a79      	ldr	r2, [pc, #484]	@ (800e278 <HAL_SPI_Init+0x240>)
 800e092:	4293      	cmp	r3, r2
 800e094:	d007      	beq.n	800e0a6 <HAL_SPI_Init+0x6e>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	4a78      	ldr	r2, [pc, #480]	@ (800e27c <HAL_SPI_Init+0x244>)
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d002      	beq.n	800e0a6 <HAL_SPI_Init+0x6e>
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2b08      	cmp	r3, #8
 800e0a4:	d811      	bhi.n	800e0ca <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e0aa:	4a72      	ldr	r2, [pc, #456]	@ (800e274 <HAL_SPI_Init+0x23c>)
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d009      	beq.n	800e0c4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	4a70      	ldr	r2, [pc, #448]	@ (800e278 <HAL_SPI_Init+0x240>)
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	d004      	beq.n	800e0c4 <HAL_SPI_Init+0x8c>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	4a6f      	ldr	r2, [pc, #444]	@ (800e27c <HAL_SPI_Init+0x244>)
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	d104      	bne.n	800e0ce <HAL_SPI_Init+0x96>
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2b10      	cmp	r3, #16
 800e0c8:	d901      	bls.n	800e0ce <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	e0cd      	b.n	800e26a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d106      	bne.n	800e0e8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 f8cc 	bl	800e280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2202      	movs	r2, #2
 800e0ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	681a      	ldr	r2, [r3, #0]
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f022 0201 	bic.w	r2, r2, #1
 800e0fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	689b      	ldr	r3, [r3, #8]
 800e106:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800e10a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	699b      	ldr	r3, [r3, #24]
 800e110:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e114:	d119      	bne.n	800e14a <HAL_SPI_Init+0x112>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	685b      	ldr	r3, [r3, #4]
 800e11a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e11e:	d103      	bne.n	800e128 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e124:	2b00      	cmp	r3, #0
 800e126:	d008      	beq.n	800e13a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d10c      	bne.n	800e14a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e134:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e138:	d107      	bne.n	800e14a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e148:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e152:	2b00      	cmp	r3, #0
 800e154:	d00f      	beq.n	800e176 <HAL_SPI_Init+0x13e>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	68db      	ldr	r3, [r3, #12]
 800e15a:	2b06      	cmp	r3, #6
 800e15c:	d90b      	bls.n	800e176 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	430a      	orrs	r2, r1
 800e172:	601a      	str	r2, [r3, #0]
 800e174:	e007      	b.n	800e186 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	681a      	ldr	r2, [r3, #0]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e184:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	69da      	ldr	r2, [r3, #28]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e18e:	431a      	orrs	r2, r3
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	431a      	orrs	r2, r3
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e198:	ea42 0103 	orr.w	r1, r2, r3
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	68da      	ldr	r2, [r3, #12]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	430a      	orrs	r2, r1
 800e1a6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1b0:	431a      	orrs	r2, r3
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1b6:	431a      	orrs	r2, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	699b      	ldr	r3, [r3, #24]
 800e1bc:	431a      	orrs	r2, r3
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	691b      	ldr	r3, [r3, #16]
 800e1c2:	431a      	orrs	r2, r3
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	695b      	ldr	r3, [r3, #20]
 800e1c8:	431a      	orrs	r2, r3
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6a1b      	ldr	r3, [r3, #32]
 800e1ce:	431a      	orrs	r2, r3
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	685b      	ldr	r3, [r3, #4]
 800e1d4:	431a      	orrs	r2, r3
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1da:	431a      	orrs	r2, r3
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	689b      	ldr	r3, [r3, #8]
 800e1e0:	431a      	orrs	r2, r3
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e1e6:	ea42 0103 	orr.w	r1, r2, r3
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	430a      	orrs	r2, r1
 800e1f4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d113      	bne.n	800e226 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	689b      	ldr	r3, [r3, #8]
 800e204:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e210:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	689b      	ldr	r3, [r3, #8]
 800e218:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e224:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f022 0201 	bic.w	r2, r2, #1
 800e234:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d00a      	beq.n	800e258 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	68db      	ldr	r3, [r3, #12]
 800e248:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	430a      	orrs	r2, r1
 800e256:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2200      	movs	r2, #0
 800e25c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2201      	movs	r2, #1
 800e264:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800e268:	2300      	movs	r3, #0
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	40013000 	.word	0x40013000
 800e278:	40003800 	.word	0x40003800
 800e27c:	40003c00 	.word	0x40003c00

0800e280 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800e280:	b480      	push	{r7}
 800e282:	b083      	sub	sp, #12
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800e288:	bf00      	nop
 800e28a:	370c      	adds	r7, #12
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr

0800e294 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e294:	b480      	push	{r7}
 800e296:	b085      	sub	sp, #20
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2a0:	095b      	lsrs	r3, r3, #5
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	68db      	ldr	r3, [r3, #12]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	3307      	adds	r3, #7
 800e2b2:	08db      	lsrs	r3, r3, #3
 800e2b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	68fa      	ldr	r2, [r7, #12]
 800e2ba:	fb02 f303 	mul.w	r3, r2, r3
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3714      	adds	r7, #20
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c8:	4770      	bx	lr

0800e2ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e2ca:	b580      	push	{r7, lr}
 800e2cc:	b082      	sub	sp, #8
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d101      	bne.n	800e2dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e2d8:	2301      	movs	r3, #1
 800e2da:	e042      	b.n	800e362 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d106      	bne.n	800e2f4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f7f6 fc4a 	bl	8004b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2224      	movs	r2, #36	@ 0x24
 800e2f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f022 0201 	bic.w	r2, r2, #1
 800e30a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e310:	2b00      	cmp	r3, #0
 800e312:	d002      	beq.n	800e31a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f000 fe1f 	bl	800ef58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f000 f8b4 	bl	800e488 <UART_SetConfig>
 800e320:	4603      	mov	r3, r0
 800e322:	2b01      	cmp	r3, #1
 800e324:	d101      	bne.n	800e32a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e326:	2301      	movs	r3, #1
 800e328:	e01b      	b.n	800e362 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	685a      	ldr	r2, [r3, #4]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e338:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	689a      	ldr	r2, [r3, #8]
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e348:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	681a      	ldr	r2, [r3, #0]
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f042 0201 	orr.w	r2, r2, #1
 800e358:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f000 fe9e 	bl	800f09c <UART_CheckIdleState>
 800e360:	4603      	mov	r3, r0
}
 800e362:	4618      	mov	r0, r3
 800e364:	3708      	adds	r7, #8
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}

0800e36a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e36a:	b580      	push	{r7, lr}
 800e36c:	b08a      	sub	sp, #40	@ 0x28
 800e36e:	af02      	add	r7, sp, #8
 800e370:	60f8      	str	r0, [r7, #12]
 800e372:	60b9      	str	r1, [r7, #8]
 800e374:	603b      	str	r3, [r7, #0]
 800e376:	4613      	mov	r3, r2
 800e378:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e380:	2b20      	cmp	r3, #32
 800e382:	d17b      	bne.n	800e47c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d002      	beq.n	800e390 <HAL_UART_Transmit+0x26>
 800e38a:	88fb      	ldrh	r3, [r7, #6]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d101      	bne.n	800e394 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e390:	2301      	movs	r3, #1
 800e392:	e074      	b.n	800e47e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2200      	movs	r2, #0
 800e398:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	2221      	movs	r2, #33	@ 0x21
 800e3a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e3a4:	f7f8 fc54 	bl	8006c50 <HAL_GetTick>
 800e3a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	88fa      	ldrh	r2, [r7, #6]
 800e3ae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	88fa      	ldrh	r2, [r7, #6]
 800e3b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	689b      	ldr	r3, [r3, #8]
 800e3be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3c2:	d108      	bne.n	800e3d6 <HAL_UART_Transmit+0x6c>
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	691b      	ldr	r3, [r3, #16]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d104      	bne.n	800e3d6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	61bb      	str	r3, [r7, #24]
 800e3d4:	e003      	b.n	800e3de <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e3de:	e030      	b.n	800e442 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	9300      	str	r3, [sp, #0]
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	2180      	movs	r1, #128	@ 0x80
 800e3ea:	68f8      	ldr	r0, [r7, #12]
 800e3ec:	f000 ff00 	bl	800f1f0 <UART_WaitOnFlagUntilTimeout>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d005      	beq.n	800e402 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2220      	movs	r2, #32
 800e3fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e3fe:	2303      	movs	r3, #3
 800e400:	e03d      	b.n	800e47e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d10b      	bne.n	800e420 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e408:	69bb      	ldr	r3, [r7, #24]
 800e40a:	881b      	ldrh	r3, [r3, #0]
 800e40c:	461a      	mov	r2, r3
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e416:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e418:	69bb      	ldr	r3, [r7, #24]
 800e41a:	3302      	adds	r3, #2
 800e41c:	61bb      	str	r3, [r7, #24]
 800e41e:	e007      	b.n	800e430 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e420:	69fb      	ldr	r3, [r7, #28]
 800e422:	781a      	ldrb	r2, [r3, #0]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e42a:	69fb      	ldr	r3, [r7, #28]
 800e42c:	3301      	adds	r3, #1
 800e42e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e436:	b29b      	uxth	r3, r3
 800e438:	3b01      	subs	r3, #1
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e448:	b29b      	uxth	r3, r3
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d1c8      	bne.n	800e3e0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	9300      	str	r3, [sp, #0]
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	2200      	movs	r2, #0
 800e456:	2140      	movs	r1, #64	@ 0x40
 800e458:	68f8      	ldr	r0, [r7, #12]
 800e45a:	f000 fec9 	bl	800f1f0 <UART_WaitOnFlagUntilTimeout>
 800e45e:	4603      	mov	r3, r0
 800e460:	2b00      	cmp	r3, #0
 800e462:	d005      	beq.n	800e470 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2220      	movs	r2, #32
 800e468:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e46c:	2303      	movs	r3, #3
 800e46e:	e006      	b.n	800e47e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2220      	movs	r2, #32
 800e474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e478:	2300      	movs	r3, #0
 800e47a:	e000      	b.n	800e47e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e47c:	2302      	movs	r3, #2
  }
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3720      	adds	r7, #32
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
	...

0800e488 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e48c:	b092      	sub	sp, #72	@ 0x48
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e492:	2300      	movs	r3, #0
 800e494:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	689a      	ldr	r2, [r3, #8]
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	691b      	ldr	r3, [r3, #16]
 800e4a0:	431a      	orrs	r2, r3
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	695b      	ldr	r3, [r3, #20]
 800e4a6:	431a      	orrs	r2, r3
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	69db      	ldr	r3, [r3, #28]
 800e4ac:	4313      	orrs	r3, r2
 800e4ae:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	4bbe      	ldr	r3, [pc, #760]	@ (800e7b0 <UART_SetConfig+0x328>)
 800e4b8:	4013      	ands	r3, r2
 800e4ba:	697a      	ldr	r2, [r7, #20]
 800e4bc:	6812      	ldr	r2, [r2, #0]
 800e4be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e4c0:	430b      	orrs	r3, r1
 800e4c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	685b      	ldr	r3, [r3, #4]
 800e4ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	68da      	ldr	r2, [r3, #12]
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	430a      	orrs	r2, r1
 800e4d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	699b      	ldr	r3, [r3, #24]
 800e4de:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4ab3      	ldr	r2, [pc, #716]	@ (800e7b4 <UART_SetConfig+0x32c>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d004      	beq.n	800e4f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	6a1b      	ldr	r3, [r3, #32]
 800e4ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e4f0:	4313      	orrs	r3, r2
 800e4f2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	689a      	ldr	r2, [r3, #8]
 800e4fa:	4baf      	ldr	r3, [pc, #700]	@ (800e7b8 <UART_SetConfig+0x330>)
 800e4fc:	4013      	ands	r3, r2
 800e4fe:	697a      	ldr	r2, [r7, #20]
 800e500:	6812      	ldr	r2, [r2, #0]
 800e502:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e504:	430b      	orrs	r3, r1
 800e506:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e50e:	f023 010f 	bic.w	r1, r3, #15
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	430a      	orrs	r2, r1
 800e51c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	4aa6      	ldr	r2, [pc, #664]	@ (800e7bc <UART_SetConfig+0x334>)
 800e524:	4293      	cmp	r3, r2
 800e526:	d177      	bne.n	800e618 <UART_SetConfig+0x190>
 800e528:	4ba5      	ldr	r3, [pc, #660]	@ (800e7c0 <UART_SetConfig+0x338>)
 800e52a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e52c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e530:	2b28      	cmp	r3, #40	@ 0x28
 800e532:	d86d      	bhi.n	800e610 <UART_SetConfig+0x188>
 800e534:	a201      	add	r2, pc, #4	@ (adr r2, 800e53c <UART_SetConfig+0xb4>)
 800e536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e53a:	bf00      	nop
 800e53c:	0800e5e1 	.word	0x0800e5e1
 800e540:	0800e611 	.word	0x0800e611
 800e544:	0800e611 	.word	0x0800e611
 800e548:	0800e611 	.word	0x0800e611
 800e54c:	0800e611 	.word	0x0800e611
 800e550:	0800e611 	.word	0x0800e611
 800e554:	0800e611 	.word	0x0800e611
 800e558:	0800e611 	.word	0x0800e611
 800e55c:	0800e5e9 	.word	0x0800e5e9
 800e560:	0800e611 	.word	0x0800e611
 800e564:	0800e611 	.word	0x0800e611
 800e568:	0800e611 	.word	0x0800e611
 800e56c:	0800e611 	.word	0x0800e611
 800e570:	0800e611 	.word	0x0800e611
 800e574:	0800e611 	.word	0x0800e611
 800e578:	0800e611 	.word	0x0800e611
 800e57c:	0800e5f1 	.word	0x0800e5f1
 800e580:	0800e611 	.word	0x0800e611
 800e584:	0800e611 	.word	0x0800e611
 800e588:	0800e611 	.word	0x0800e611
 800e58c:	0800e611 	.word	0x0800e611
 800e590:	0800e611 	.word	0x0800e611
 800e594:	0800e611 	.word	0x0800e611
 800e598:	0800e611 	.word	0x0800e611
 800e59c:	0800e5f9 	.word	0x0800e5f9
 800e5a0:	0800e611 	.word	0x0800e611
 800e5a4:	0800e611 	.word	0x0800e611
 800e5a8:	0800e611 	.word	0x0800e611
 800e5ac:	0800e611 	.word	0x0800e611
 800e5b0:	0800e611 	.word	0x0800e611
 800e5b4:	0800e611 	.word	0x0800e611
 800e5b8:	0800e611 	.word	0x0800e611
 800e5bc:	0800e601 	.word	0x0800e601
 800e5c0:	0800e611 	.word	0x0800e611
 800e5c4:	0800e611 	.word	0x0800e611
 800e5c8:	0800e611 	.word	0x0800e611
 800e5cc:	0800e611 	.word	0x0800e611
 800e5d0:	0800e611 	.word	0x0800e611
 800e5d4:	0800e611 	.word	0x0800e611
 800e5d8:	0800e611 	.word	0x0800e611
 800e5dc:	0800e609 	.word	0x0800e609
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5e6:	e222      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e5e8:	2304      	movs	r3, #4
 800e5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5ee:	e21e      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e5f0:	2308      	movs	r3, #8
 800e5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5f6:	e21a      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e5f8:	2310      	movs	r3, #16
 800e5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5fe:	e216      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e600:	2320      	movs	r3, #32
 800e602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e606:	e212      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e608:	2340      	movs	r3, #64	@ 0x40
 800e60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e60e:	e20e      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e610:	2380      	movs	r3, #128	@ 0x80
 800e612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e616:	e20a      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4a69      	ldr	r2, [pc, #420]	@ (800e7c4 <UART_SetConfig+0x33c>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d130      	bne.n	800e684 <UART_SetConfig+0x1fc>
 800e622:	4b67      	ldr	r3, [pc, #412]	@ (800e7c0 <UART_SetConfig+0x338>)
 800e624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e626:	f003 0307 	and.w	r3, r3, #7
 800e62a:	2b05      	cmp	r3, #5
 800e62c:	d826      	bhi.n	800e67c <UART_SetConfig+0x1f4>
 800e62e:	a201      	add	r2, pc, #4	@ (adr r2, 800e634 <UART_SetConfig+0x1ac>)
 800e630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e634:	0800e64d 	.word	0x0800e64d
 800e638:	0800e655 	.word	0x0800e655
 800e63c:	0800e65d 	.word	0x0800e65d
 800e640:	0800e665 	.word	0x0800e665
 800e644:	0800e66d 	.word	0x0800e66d
 800e648:	0800e675 	.word	0x0800e675
 800e64c:	2300      	movs	r3, #0
 800e64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e652:	e1ec      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e654:	2304      	movs	r3, #4
 800e656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e65a:	e1e8      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e65c:	2308      	movs	r3, #8
 800e65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e662:	e1e4      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e664:	2310      	movs	r3, #16
 800e666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e66a:	e1e0      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e66c:	2320      	movs	r3, #32
 800e66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e672:	e1dc      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e674:	2340      	movs	r3, #64	@ 0x40
 800e676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e67a:	e1d8      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e67c:	2380      	movs	r3, #128	@ 0x80
 800e67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e682:	e1d4      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	4a4f      	ldr	r2, [pc, #316]	@ (800e7c8 <UART_SetConfig+0x340>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d130      	bne.n	800e6f0 <UART_SetConfig+0x268>
 800e68e:	4b4c      	ldr	r3, [pc, #304]	@ (800e7c0 <UART_SetConfig+0x338>)
 800e690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e692:	f003 0307 	and.w	r3, r3, #7
 800e696:	2b05      	cmp	r3, #5
 800e698:	d826      	bhi.n	800e6e8 <UART_SetConfig+0x260>
 800e69a:	a201      	add	r2, pc, #4	@ (adr r2, 800e6a0 <UART_SetConfig+0x218>)
 800e69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6a0:	0800e6b9 	.word	0x0800e6b9
 800e6a4:	0800e6c1 	.word	0x0800e6c1
 800e6a8:	0800e6c9 	.word	0x0800e6c9
 800e6ac:	0800e6d1 	.word	0x0800e6d1
 800e6b0:	0800e6d9 	.word	0x0800e6d9
 800e6b4:	0800e6e1 	.word	0x0800e6e1
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6be:	e1b6      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e6c0:	2304      	movs	r3, #4
 800e6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6c6:	e1b2      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e6c8:	2308      	movs	r3, #8
 800e6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6ce:	e1ae      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e6d0:	2310      	movs	r3, #16
 800e6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6d6:	e1aa      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e6d8:	2320      	movs	r3, #32
 800e6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6de:	e1a6      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e6e0:	2340      	movs	r3, #64	@ 0x40
 800e6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6e6:	e1a2      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e6e8:	2380      	movs	r3, #128	@ 0x80
 800e6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6ee:	e19e      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4a35      	ldr	r2, [pc, #212]	@ (800e7cc <UART_SetConfig+0x344>)
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	d130      	bne.n	800e75c <UART_SetConfig+0x2d4>
 800e6fa:	4b31      	ldr	r3, [pc, #196]	@ (800e7c0 <UART_SetConfig+0x338>)
 800e6fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6fe:	f003 0307 	and.w	r3, r3, #7
 800e702:	2b05      	cmp	r3, #5
 800e704:	d826      	bhi.n	800e754 <UART_SetConfig+0x2cc>
 800e706:	a201      	add	r2, pc, #4	@ (adr r2, 800e70c <UART_SetConfig+0x284>)
 800e708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e70c:	0800e725 	.word	0x0800e725
 800e710:	0800e72d 	.word	0x0800e72d
 800e714:	0800e735 	.word	0x0800e735
 800e718:	0800e73d 	.word	0x0800e73d
 800e71c:	0800e745 	.word	0x0800e745
 800e720:	0800e74d 	.word	0x0800e74d
 800e724:	2300      	movs	r3, #0
 800e726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e72a:	e180      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e72c:	2304      	movs	r3, #4
 800e72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e732:	e17c      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e734:	2308      	movs	r3, #8
 800e736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e73a:	e178      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e73c:	2310      	movs	r3, #16
 800e73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e742:	e174      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e744:	2320      	movs	r3, #32
 800e746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e74a:	e170      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e74c:	2340      	movs	r3, #64	@ 0x40
 800e74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e752:	e16c      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e754:	2380      	movs	r3, #128	@ 0x80
 800e756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e75a:	e168      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a1b      	ldr	r2, [pc, #108]	@ (800e7d0 <UART_SetConfig+0x348>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d142      	bne.n	800e7ec <UART_SetConfig+0x364>
 800e766:	4b16      	ldr	r3, [pc, #88]	@ (800e7c0 <UART_SetConfig+0x338>)
 800e768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e76a:	f003 0307 	and.w	r3, r3, #7
 800e76e:	2b05      	cmp	r3, #5
 800e770:	d838      	bhi.n	800e7e4 <UART_SetConfig+0x35c>
 800e772:	a201      	add	r2, pc, #4	@ (adr r2, 800e778 <UART_SetConfig+0x2f0>)
 800e774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e778:	0800e791 	.word	0x0800e791
 800e77c:	0800e799 	.word	0x0800e799
 800e780:	0800e7a1 	.word	0x0800e7a1
 800e784:	0800e7a9 	.word	0x0800e7a9
 800e788:	0800e7d5 	.word	0x0800e7d5
 800e78c:	0800e7dd 	.word	0x0800e7dd
 800e790:	2300      	movs	r3, #0
 800e792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e796:	e14a      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e798:	2304      	movs	r3, #4
 800e79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e79e:	e146      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e7a0:	2308      	movs	r3, #8
 800e7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7a6:	e142      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e7a8:	2310      	movs	r3, #16
 800e7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7ae:	e13e      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e7b0:	cfff69f3 	.word	0xcfff69f3
 800e7b4:	58000c00 	.word	0x58000c00
 800e7b8:	11fff4ff 	.word	0x11fff4ff
 800e7bc:	40011000 	.word	0x40011000
 800e7c0:	58024400 	.word	0x58024400
 800e7c4:	40004400 	.word	0x40004400
 800e7c8:	40004800 	.word	0x40004800
 800e7cc:	40004c00 	.word	0x40004c00
 800e7d0:	40005000 	.word	0x40005000
 800e7d4:	2320      	movs	r3, #32
 800e7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7da:	e128      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e7dc:	2340      	movs	r3, #64	@ 0x40
 800e7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7e2:	e124      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e7e4:	2380      	movs	r3, #128	@ 0x80
 800e7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7ea:	e120      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	4acb      	ldr	r2, [pc, #812]	@ (800eb20 <UART_SetConfig+0x698>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d176      	bne.n	800e8e4 <UART_SetConfig+0x45c>
 800e7f6:	4bcb      	ldr	r3, [pc, #812]	@ (800eb24 <UART_SetConfig+0x69c>)
 800e7f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e7fe:	2b28      	cmp	r3, #40	@ 0x28
 800e800:	d86c      	bhi.n	800e8dc <UART_SetConfig+0x454>
 800e802:	a201      	add	r2, pc, #4	@ (adr r2, 800e808 <UART_SetConfig+0x380>)
 800e804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e808:	0800e8ad 	.word	0x0800e8ad
 800e80c:	0800e8dd 	.word	0x0800e8dd
 800e810:	0800e8dd 	.word	0x0800e8dd
 800e814:	0800e8dd 	.word	0x0800e8dd
 800e818:	0800e8dd 	.word	0x0800e8dd
 800e81c:	0800e8dd 	.word	0x0800e8dd
 800e820:	0800e8dd 	.word	0x0800e8dd
 800e824:	0800e8dd 	.word	0x0800e8dd
 800e828:	0800e8b5 	.word	0x0800e8b5
 800e82c:	0800e8dd 	.word	0x0800e8dd
 800e830:	0800e8dd 	.word	0x0800e8dd
 800e834:	0800e8dd 	.word	0x0800e8dd
 800e838:	0800e8dd 	.word	0x0800e8dd
 800e83c:	0800e8dd 	.word	0x0800e8dd
 800e840:	0800e8dd 	.word	0x0800e8dd
 800e844:	0800e8dd 	.word	0x0800e8dd
 800e848:	0800e8bd 	.word	0x0800e8bd
 800e84c:	0800e8dd 	.word	0x0800e8dd
 800e850:	0800e8dd 	.word	0x0800e8dd
 800e854:	0800e8dd 	.word	0x0800e8dd
 800e858:	0800e8dd 	.word	0x0800e8dd
 800e85c:	0800e8dd 	.word	0x0800e8dd
 800e860:	0800e8dd 	.word	0x0800e8dd
 800e864:	0800e8dd 	.word	0x0800e8dd
 800e868:	0800e8c5 	.word	0x0800e8c5
 800e86c:	0800e8dd 	.word	0x0800e8dd
 800e870:	0800e8dd 	.word	0x0800e8dd
 800e874:	0800e8dd 	.word	0x0800e8dd
 800e878:	0800e8dd 	.word	0x0800e8dd
 800e87c:	0800e8dd 	.word	0x0800e8dd
 800e880:	0800e8dd 	.word	0x0800e8dd
 800e884:	0800e8dd 	.word	0x0800e8dd
 800e888:	0800e8cd 	.word	0x0800e8cd
 800e88c:	0800e8dd 	.word	0x0800e8dd
 800e890:	0800e8dd 	.word	0x0800e8dd
 800e894:	0800e8dd 	.word	0x0800e8dd
 800e898:	0800e8dd 	.word	0x0800e8dd
 800e89c:	0800e8dd 	.word	0x0800e8dd
 800e8a0:	0800e8dd 	.word	0x0800e8dd
 800e8a4:	0800e8dd 	.word	0x0800e8dd
 800e8a8:	0800e8d5 	.word	0x0800e8d5
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8b2:	e0bc      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e8b4:	2304      	movs	r3, #4
 800e8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8ba:	e0b8      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e8bc:	2308      	movs	r3, #8
 800e8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8c2:	e0b4      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e8c4:	2310      	movs	r3, #16
 800e8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8ca:	e0b0      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e8cc:	2320      	movs	r3, #32
 800e8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8d2:	e0ac      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e8d4:	2340      	movs	r3, #64	@ 0x40
 800e8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8da:	e0a8      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e8dc:	2380      	movs	r3, #128	@ 0x80
 800e8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8e2:	e0a4      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	4a8f      	ldr	r2, [pc, #572]	@ (800eb28 <UART_SetConfig+0x6a0>)
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	d130      	bne.n	800e950 <UART_SetConfig+0x4c8>
 800e8ee:	4b8d      	ldr	r3, [pc, #564]	@ (800eb24 <UART_SetConfig+0x69c>)
 800e8f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8f2:	f003 0307 	and.w	r3, r3, #7
 800e8f6:	2b05      	cmp	r3, #5
 800e8f8:	d826      	bhi.n	800e948 <UART_SetConfig+0x4c0>
 800e8fa:	a201      	add	r2, pc, #4	@ (adr r2, 800e900 <UART_SetConfig+0x478>)
 800e8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e900:	0800e919 	.word	0x0800e919
 800e904:	0800e921 	.word	0x0800e921
 800e908:	0800e929 	.word	0x0800e929
 800e90c:	0800e931 	.word	0x0800e931
 800e910:	0800e939 	.word	0x0800e939
 800e914:	0800e941 	.word	0x0800e941
 800e918:	2300      	movs	r3, #0
 800e91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e91e:	e086      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e920:	2304      	movs	r3, #4
 800e922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e926:	e082      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e928:	2308      	movs	r3, #8
 800e92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e92e:	e07e      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e930:	2310      	movs	r3, #16
 800e932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e936:	e07a      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e938:	2320      	movs	r3, #32
 800e93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e93e:	e076      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e940:	2340      	movs	r3, #64	@ 0x40
 800e942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e946:	e072      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e948:	2380      	movs	r3, #128	@ 0x80
 800e94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e94e:	e06e      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	4a75      	ldr	r2, [pc, #468]	@ (800eb2c <UART_SetConfig+0x6a4>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d130      	bne.n	800e9bc <UART_SetConfig+0x534>
 800e95a:	4b72      	ldr	r3, [pc, #456]	@ (800eb24 <UART_SetConfig+0x69c>)
 800e95c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e95e:	f003 0307 	and.w	r3, r3, #7
 800e962:	2b05      	cmp	r3, #5
 800e964:	d826      	bhi.n	800e9b4 <UART_SetConfig+0x52c>
 800e966:	a201      	add	r2, pc, #4	@ (adr r2, 800e96c <UART_SetConfig+0x4e4>)
 800e968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e96c:	0800e985 	.word	0x0800e985
 800e970:	0800e98d 	.word	0x0800e98d
 800e974:	0800e995 	.word	0x0800e995
 800e978:	0800e99d 	.word	0x0800e99d
 800e97c:	0800e9a5 	.word	0x0800e9a5
 800e980:	0800e9ad 	.word	0x0800e9ad
 800e984:	2300      	movs	r3, #0
 800e986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e98a:	e050      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e98c:	2304      	movs	r3, #4
 800e98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e992:	e04c      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e994:	2308      	movs	r3, #8
 800e996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e99a:	e048      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e99c:	2310      	movs	r3, #16
 800e99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9a2:	e044      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e9a4:	2320      	movs	r3, #32
 800e9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9aa:	e040      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e9ac:	2340      	movs	r3, #64	@ 0x40
 800e9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9b2:	e03c      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e9b4:	2380      	movs	r3, #128	@ 0x80
 800e9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ba:	e038      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	4a5b      	ldr	r2, [pc, #364]	@ (800eb30 <UART_SetConfig+0x6a8>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d130      	bne.n	800ea28 <UART_SetConfig+0x5a0>
 800e9c6:	4b57      	ldr	r3, [pc, #348]	@ (800eb24 <UART_SetConfig+0x69c>)
 800e9c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e9ca:	f003 0307 	and.w	r3, r3, #7
 800e9ce:	2b05      	cmp	r3, #5
 800e9d0:	d826      	bhi.n	800ea20 <UART_SetConfig+0x598>
 800e9d2:	a201      	add	r2, pc, #4	@ (adr r2, 800e9d8 <UART_SetConfig+0x550>)
 800e9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d8:	0800e9f1 	.word	0x0800e9f1
 800e9dc:	0800e9f9 	.word	0x0800e9f9
 800e9e0:	0800ea01 	.word	0x0800ea01
 800e9e4:	0800ea09 	.word	0x0800ea09
 800e9e8:	0800ea11 	.word	0x0800ea11
 800e9ec:	0800ea19 	.word	0x0800ea19
 800e9f0:	2302      	movs	r3, #2
 800e9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9f6:	e01a      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800e9f8:	2304      	movs	r3, #4
 800e9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9fe:	e016      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800ea00:	2308      	movs	r3, #8
 800ea02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea06:	e012      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800ea08:	2310      	movs	r3, #16
 800ea0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea0e:	e00e      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800ea10:	2320      	movs	r3, #32
 800ea12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea16:	e00a      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800ea18:	2340      	movs	r3, #64	@ 0x40
 800ea1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea1e:	e006      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800ea20:	2380      	movs	r3, #128	@ 0x80
 800ea22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea26:	e002      	b.n	800ea2e <UART_SetConfig+0x5a6>
 800ea28:	2380      	movs	r3, #128	@ 0x80
 800ea2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	4a3f      	ldr	r2, [pc, #252]	@ (800eb30 <UART_SetConfig+0x6a8>)
 800ea34:	4293      	cmp	r3, r2
 800ea36:	f040 80f8 	bne.w	800ec2a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ea3a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ea3e:	2b20      	cmp	r3, #32
 800ea40:	dc46      	bgt.n	800ead0 <UART_SetConfig+0x648>
 800ea42:	2b02      	cmp	r3, #2
 800ea44:	f2c0 8082 	blt.w	800eb4c <UART_SetConfig+0x6c4>
 800ea48:	3b02      	subs	r3, #2
 800ea4a:	2b1e      	cmp	r3, #30
 800ea4c:	d87e      	bhi.n	800eb4c <UART_SetConfig+0x6c4>
 800ea4e:	a201      	add	r2, pc, #4	@ (adr r2, 800ea54 <UART_SetConfig+0x5cc>)
 800ea50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea54:	0800ead7 	.word	0x0800ead7
 800ea58:	0800eb4d 	.word	0x0800eb4d
 800ea5c:	0800eadf 	.word	0x0800eadf
 800ea60:	0800eb4d 	.word	0x0800eb4d
 800ea64:	0800eb4d 	.word	0x0800eb4d
 800ea68:	0800eb4d 	.word	0x0800eb4d
 800ea6c:	0800eaef 	.word	0x0800eaef
 800ea70:	0800eb4d 	.word	0x0800eb4d
 800ea74:	0800eb4d 	.word	0x0800eb4d
 800ea78:	0800eb4d 	.word	0x0800eb4d
 800ea7c:	0800eb4d 	.word	0x0800eb4d
 800ea80:	0800eb4d 	.word	0x0800eb4d
 800ea84:	0800eb4d 	.word	0x0800eb4d
 800ea88:	0800eb4d 	.word	0x0800eb4d
 800ea8c:	0800eaff 	.word	0x0800eaff
 800ea90:	0800eb4d 	.word	0x0800eb4d
 800ea94:	0800eb4d 	.word	0x0800eb4d
 800ea98:	0800eb4d 	.word	0x0800eb4d
 800ea9c:	0800eb4d 	.word	0x0800eb4d
 800eaa0:	0800eb4d 	.word	0x0800eb4d
 800eaa4:	0800eb4d 	.word	0x0800eb4d
 800eaa8:	0800eb4d 	.word	0x0800eb4d
 800eaac:	0800eb4d 	.word	0x0800eb4d
 800eab0:	0800eb4d 	.word	0x0800eb4d
 800eab4:	0800eb4d 	.word	0x0800eb4d
 800eab8:	0800eb4d 	.word	0x0800eb4d
 800eabc:	0800eb4d 	.word	0x0800eb4d
 800eac0:	0800eb4d 	.word	0x0800eb4d
 800eac4:	0800eb4d 	.word	0x0800eb4d
 800eac8:	0800eb4d 	.word	0x0800eb4d
 800eacc:	0800eb3f 	.word	0x0800eb3f
 800ead0:	2b40      	cmp	r3, #64	@ 0x40
 800ead2:	d037      	beq.n	800eb44 <UART_SetConfig+0x6bc>
 800ead4:	e03a      	b.n	800eb4c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ead6:	f7fd f8d7 	bl	800bc88 <HAL_RCCEx_GetD3PCLK1Freq>
 800eada:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800eadc:	e03c      	b.n	800eb58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7fd f8e6 	bl	800bcb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eaec:	e034      	b.n	800eb58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eaee:	f107 0318 	add.w	r3, r7, #24
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7fd fa32 	bl	800bf5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eaf8:	69fb      	ldr	r3, [r7, #28]
 800eafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eafc:	e02c      	b.n	800eb58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eafe:	4b09      	ldr	r3, [pc, #36]	@ (800eb24 <UART_SetConfig+0x69c>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f003 0320 	and.w	r3, r3, #32
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d016      	beq.n	800eb38 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eb0a:	4b06      	ldr	r3, [pc, #24]	@ (800eb24 <UART_SetConfig+0x69c>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	08db      	lsrs	r3, r3, #3
 800eb10:	f003 0303 	and.w	r3, r3, #3
 800eb14:	4a07      	ldr	r2, [pc, #28]	@ (800eb34 <UART_SetConfig+0x6ac>)
 800eb16:	fa22 f303 	lsr.w	r3, r2, r3
 800eb1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eb1c:	e01c      	b.n	800eb58 <UART_SetConfig+0x6d0>
 800eb1e:	bf00      	nop
 800eb20:	40011400 	.word	0x40011400
 800eb24:	58024400 	.word	0x58024400
 800eb28:	40007800 	.word	0x40007800
 800eb2c:	40007c00 	.word	0x40007c00
 800eb30:	58000c00 	.word	0x58000c00
 800eb34:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800eb38:	4b9d      	ldr	r3, [pc, #628]	@ (800edb0 <UART_SetConfig+0x928>)
 800eb3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb3c:	e00c      	b.n	800eb58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eb3e:	4b9d      	ldr	r3, [pc, #628]	@ (800edb4 <UART_SetConfig+0x92c>)
 800eb40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb42:	e009      	b.n	800eb58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eb44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eb48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb4a:	e005      	b.n	800eb58 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800eb50:	2301      	movs	r3, #1
 800eb52:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800eb56:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eb58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	f000 81de 	beq.w	800ef1c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb64:	4a94      	ldr	r2, [pc, #592]	@ (800edb8 <UART_SetConfig+0x930>)
 800eb66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb6a:	461a      	mov	r2, r3
 800eb6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb72:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	685a      	ldr	r2, [r3, #4]
 800eb78:	4613      	mov	r3, r2
 800eb7a:	005b      	lsls	r3, r3, #1
 800eb7c:	4413      	add	r3, r2
 800eb7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d305      	bcc.n	800eb90 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	685b      	ldr	r3, [r3, #4]
 800eb88:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eb8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d903      	bls.n	800eb98 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800eb90:	2301      	movs	r3, #1
 800eb92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800eb96:	e1c1      	b.n	800ef1c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	60bb      	str	r3, [r7, #8]
 800eb9e:	60fa      	str	r2, [r7, #12]
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eba4:	4a84      	ldr	r2, [pc, #528]	@ (800edb8 <UART_SetConfig+0x930>)
 800eba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ebaa:	b29b      	uxth	r3, r3
 800ebac:	2200      	movs	r2, #0
 800ebae:	603b      	str	r3, [r7, #0]
 800ebb0:	607a      	str	r2, [r7, #4]
 800ebb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ebba:	f7f1 fdb5 	bl	8000728 <__aeabi_uldivmod>
 800ebbe:	4602      	mov	r2, r0
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	4610      	mov	r0, r2
 800ebc4:	4619      	mov	r1, r3
 800ebc6:	f04f 0200 	mov.w	r2, #0
 800ebca:	f04f 0300 	mov.w	r3, #0
 800ebce:	020b      	lsls	r3, r1, #8
 800ebd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ebd4:	0202      	lsls	r2, r0, #8
 800ebd6:	6979      	ldr	r1, [r7, #20]
 800ebd8:	6849      	ldr	r1, [r1, #4]
 800ebda:	0849      	lsrs	r1, r1, #1
 800ebdc:	2000      	movs	r0, #0
 800ebde:	460c      	mov	r4, r1
 800ebe0:	4605      	mov	r5, r0
 800ebe2:	eb12 0804 	adds.w	r8, r2, r4
 800ebe6:	eb43 0905 	adc.w	r9, r3, r5
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	685b      	ldr	r3, [r3, #4]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	469a      	mov	sl, r3
 800ebf2:	4693      	mov	fp, r2
 800ebf4:	4652      	mov	r2, sl
 800ebf6:	465b      	mov	r3, fp
 800ebf8:	4640      	mov	r0, r8
 800ebfa:	4649      	mov	r1, r9
 800ebfc:	f7f1 fd94 	bl	8000728 <__aeabi_uldivmod>
 800ec00:	4602      	mov	r2, r0
 800ec02:	460b      	mov	r3, r1
 800ec04:	4613      	mov	r3, r2
 800ec06:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ec08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ec0e:	d308      	bcc.n	800ec22 <UART_SetConfig+0x79a>
 800ec10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ec16:	d204      	bcs.n	800ec22 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ec1e:	60da      	str	r2, [r3, #12]
 800ec20:	e17c      	b.n	800ef1c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ec22:	2301      	movs	r3, #1
 800ec24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ec28:	e178      	b.n	800ef1c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	69db      	ldr	r3, [r3, #28]
 800ec2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ec32:	f040 80c5 	bne.w	800edc0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ec36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ec3a:	2b20      	cmp	r3, #32
 800ec3c:	dc48      	bgt.n	800ecd0 <UART_SetConfig+0x848>
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	db7b      	blt.n	800ed3a <UART_SetConfig+0x8b2>
 800ec42:	2b20      	cmp	r3, #32
 800ec44:	d879      	bhi.n	800ed3a <UART_SetConfig+0x8b2>
 800ec46:	a201      	add	r2, pc, #4	@ (adr r2, 800ec4c <UART_SetConfig+0x7c4>)
 800ec48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec4c:	0800ecd7 	.word	0x0800ecd7
 800ec50:	0800ecdf 	.word	0x0800ecdf
 800ec54:	0800ed3b 	.word	0x0800ed3b
 800ec58:	0800ed3b 	.word	0x0800ed3b
 800ec5c:	0800ece7 	.word	0x0800ece7
 800ec60:	0800ed3b 	.word	0x0800ed3b
 800ec64:	0800ed3b 	.word	0x0800ed3b
 800ec68:	0800ed3b 	.word	0x0800ed3b
 800ec6c:	0800ecf7 	.word	0x0800ecf7
 800ec70:	0800ed3b 	.word	0x0800ed3b
 800ec74:	0800ed3b 	.word	0x0800ed3b
 800ec78:	0800ed3b 	.word	0x0800ed3b
 800ec7c:	0800ed3b 	.word	0x0800ed3b
 800ec80:	0800ed3b 	.word	0x0800ed3b
 800ec84:	0800ed3b 	.word	0x0800ed3b
 800ec88:	0800ed3b 	.word	0x0800ed3b
 800ec8c:	0800ed07 	.word	0x0800ed07
 800ec90:	0800ed3b 	.word	0x0800ed3b
 800ec94:	0800ed3b 	.word	0x0800ed3b
 800ec98:	0800ed3b 	.word	0x0800ed3b
 800ec9c:	0800ed3b 	.word	0x0800ed3b
 800eca0:	0800ed3b 	.word	0x0800ed3b
 800eca4:	0800ed3b 	.word	0x0800ed3b
 800eca8:	0800ed3b 	.word	0x0800ed3b
 800ecac:	0800ed3b 	.word	0x0800ed3b
 800ecb0:	0800ed3b 	.word	0x0800ed3b
 800ecb4:	0800ed3b 	.word	0x0800ed3b
 800ecb8:	0800ed3b 	.word	0x0800ed3b
 800ecbc:	0800ed3b 	.word	0x0800ed3b
 800ecc0:	0800ed3b 	.word	0x0800ed3b
 800ecc4:	0800ed3b 	.word	0x0800ed3b
 800ecc8:	0800ed3b 	.word	0x0800ed3b
 800eccc:	0800ed2d 	.word	0x0800ed2d
 800ecd0:	2b40      	cmp	r3, #64	@ 0x40
 800ecd2:	d02e      	beq.n	800ed32 <UART_SetConfig+0x8aa>
 800ecd4:	e031      	b.n	800ed3a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ecd6:	f7fb f821 	bl	8009d1c <HAL_RCC_GetPCLK1Freq>
 800ecda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ecdc:	e033      	b.n	800ed46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ecde:	f7fb f833 	bl	8009d48 <HAL_RCC_GetPCLK2Freq>
 800ece2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ece4:	e02f      	b.n	800ed46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ece6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7fc ffe2 	bl	800bcb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ecf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecf4:	e027      	b.n	800ed46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ecf6:	f107 0318 	add.w	r3, r7, #24
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7fd f92e 	bl	800bf5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ed00:	69fb      	ldr	r3, [r7, #28]
 800ed02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed04:	e01f      	b.n	800ed46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed06:	4b2d      	ldr	r3, [pc, #180]	@ (800edbc <UART_SetConfig+0x934>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f003 0320 	and.w	r3, r3, #32
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d009      	beq.n	800ed26 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ed12:	4b2a      	ldr	r3, [pc, #168]	@ (800edbc <UART_SetConfig+0x934>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	08db      	lsrs	r3, r3, #3
 800ed18:	f003 0303 	and.w	r3, r3, #3
 800ed1c:	4a24      	ldr	r2, [pc, #144]	@ (800edb0 <UART_SetConfig+0x928>)
 800ed1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ed22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ed24:	e00f      	b.n	800ed46 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ed26:	4b22      	ldr	r3, [pc, #136]	@ (800edb0 <UART_SetConfig+0x928>)
 800ed28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed2a:	e00c      	b.n	800ed46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ed2c:	4b21      	ldr	r3, [pc, #132]	@ (800edb4 <UART_SetConfig+0x92c>)
 800ed2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed30:	e009      	b.n	800ed46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ed36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed38:	e005      	b.n	800ed46 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ed3e:	2301      	movs	r3, #1
 800ed40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ed44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ed46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	f000 80e7 	beq.w	800ef1c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed52:	4a19      	ldr	r2, [pc, #100]	@ (800edb8 <UART_SetConfig+0x930>)
 800ed54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed58:	461a      	mov	r2, r3
 800ed5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed60:	005a      	lsls	r2, r3, #1
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	685b      	ldr	r3, [r3, #4]
 800ed66:	085b      	lsrs	r3, r3, #1
 800ed68:	441a      	add	r2, r3
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed72:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ed74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed76:	2b0f      	cmp	r3, #15
 800ed78:	d916      	bls.n	800eda8 <UART_SetConfig+0x920>
 800ed7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ed80:	d212      	bcs.n	800eda8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ed82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	f023 030f 	bic.w	r3, r3, #15
 800ed8a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ed8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed8e:	085b      	lsrs	r3, r3, #1
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	f003 0307 	and.w	r3, r3, #7
 800ed96:	b29a      	uxth	r2, r3
 800ed98:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ed9a:	4313      	orrs	r3, r2
 800ed9c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800eda4:	60da      	str	r2, [r3, #12]
 800eda6:	e0b9      	b.n	800ef1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800eda8:	2301      	movs	r3, #1
 800edaa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800edae:	e0b5      	b.n	800ef1c <UART_SetConfig+0xa94>
 800edb0:	03d09000 	.word	0x03d09000
 800edb4:	003d0900 	.word	0x003d0900
 800edb8:	080147ec 	.word	0x080147ec
 800edbc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800edc0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800edc4:	2b20      	cmp	r3, #32
 800edc6:	dc49      	bgt.n	800ee5c <UART_SetConfig+0x9d4>
 800edc8:	2b00      	cmp	r3, #0
 800edca:	db7c      	blt.n	800eec6 <UART_SetConfig+0xa3e>
 800edcc:	2b20      	cmp	r3, #32
 800edce:	d87a      	bhi.n	800eec6 <UART_SetConfig+0xa3e>
 800edd0:	a201      	add	r2, pc, #4	@ (adr r2, 800edd8 <UART_SetConfig+0x950>)
 800edd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd6:	bf00      	nop
 800edd8:	0800ee63 	.word	0x0800ee63
 800eddc:	0800ee6b 	.word	0x0800ee6b
 800ede0:	0800eec7 	.word	0x0800eec7
 800ede4:	0800eec7 	.word	0x0800eec7
 800ede8:	0800ee73 	.word	0x0800ee73
 800edec:	0800eec7 	.word	0x0800eec7
 800edf0:	0800eec7 	.word	0x0800eec7
 800edf4:	0800eec7 	.word	0x0800eec7
 800edf8:	0800ee83 	.word	0x0800ee83
 800edfc:	0800eec7 	.word	0x0800eec7
 800ee00:	0800eec7 	.word	0x0800eec7
 800ee04:	0800eec7 	.word	0x0800eec7
 800ee08:	0800eec7 	.word	0x0800eec7
 800ee0c:	0800eec7 	.word	0x0800eec7
 800ee10:	0800eec7 	.word	0x0800eec7
 800ee14:	0800eec7 	.word	0x0800eec7
 800ee18:	0800ee93 	.word	0x0800ee93
 800ee1c:	0800eec7 	.word	0x0800eec7
 800ee20:	0800eec7 	.word	0x0800eec7
 800ee24:	0800eec7 	.word	0x0800eec7
 800ee28:	0800eec7 	.word	0x0800eec7
 800ee2c:	0800eec7 	.word	0x0800eec7
 800ee30:	0800eec7 	.word	0x0800eec7
 800ee34:	0800eec7 	.word	0x0800eec7
 800ee38:	0800eec7 	.word	0x0800eec7
 800ee3c:	0800eec7 	.word	0x0800eec7
 800ee40:	0800eec7 	.word	0x0800eec7
 800ee44:	0800eec7 	.word	0x0800eec7
 800ee48:	0800eec7 	.word	0x0800eec7
 800ee4c:	0800eec7 	.word	0x0800eec7
 800ee50:	0800eec7 	.word	0x0800eec7
 800ee54:	0800eec7 	.word	0x0800eec7
 800ee58:	0800eeb9 	.word	0x0800eeb9
 800ee5c:	2b40      	cmp	r3, #64	@ 0x40
 800ee5e:	d02e      	beq.n	800eebe <UART_SetConfig+0xa36>
 800ee60:	e031      	b.n	800eec6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ee62:	f7fa ff5b 	bl	8009d1c <HAL_RCC_GetPCLK1Freq>
 800ee66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ee68:	e033      	b.n	800eed2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ee6a:	f7fa ff6d 	bl	8009d48 <HAL_RCC_GetPCLK2Freq>
 800ee6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ee70:	e02f      	b.n	800eed2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7fc ff1c 	bl	800bcb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ee7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee80:	e027      	b.n	800eed2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee82:	f107 0318 	add.w	r3, r7, #24
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7fd f868 	bl	800bf5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee90:	e01f      	b.n	800eed2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee92:	4b2d      	ldr	r3, [pc, #180]	@ (800ef48 <UART_SetConfig+0xac0>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f003 0320 	and.w	r3, r3, #32
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d009      	beq.n	800eeb2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ee9e:	4b2a      	ldr	r3, [pc, #168]	@ (800ef48 <UART_SetConfig+0xac0>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	08db      	lsrs	r3, r3, #3
 800eea4:	f003 0303 	and.w	r3, r3, #3
 800eea8:	4a28      	ldr	r2, [pc, #160]	@ (800ef4c <UART_SetConfig+0xac4>)
 800eeaa:	fa22 f303 	lsr.w	r3, r2, r3
 800eeae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eeb0:	e00f      	b.n	800eed2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800eeb2:	4b26      	ldr	r3, [pc, #152]	@ (800ef4c <UART_SetConfig+0xac4>)
 800eeb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eeb6:	e00c      	b.n	800eed2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eeb8:	4b25      	ldr	r3, [pc, #148]	@ (800ef50 <UART_SetConfig+0xac8>)
 800eeba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eebc:	e009      	b.n	800eed2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eec4:	e005      	b.n	800eed2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800eec6:	2300      	movs	r3, #0
 800eec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800eeca:	2301      	movs	r3, #1
 800eecc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800eed0:	bf00      	nop
    }

    if (pclk != 0U)
 800eed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d021      	beq.n	800ef1c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eedc:	4a1d      	ldr	r2, [pc, #116]	@ (800ef54 <UART_SetConfig+0xacc>)
 800eede:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eee2:	461a      	mov	r2, r3
 800eee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eee6:	fbb3 f2f2 	udiv	r2, r3, r2
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	085b      	lsrs	r3, r3, #1
 800eef0:	441a      	add	r2, r3
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	fbb2 f3f3 	udiv	r3, r2, r3
 800eefa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eefc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eefe:	2b0f      	cmp	r3, #15
 800ef00:	d909      	bls.n	800ef16 <UART_SetConfig+0xa8e>
 800ef02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef08:	d205      	bcs.n	800ef16 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ef0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef0c:	b29a      	uxth	r2, r3
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	60da      	str	r2, [r3, #12]
 800ef14:	e002      	b.n	800ef1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ef16:	2301      	movs	r3, #1
 800ef18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ef1c:	697b      	ldr	r3, [r7, #20]
 800ef1e:	2201      	movs	r2, #1
 800ef20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	2201      	movs	r2, #1
 800ef28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	2200      	movs	r2, #0
 800ef36:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ef38:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3748      	adds	r7, #72	@ 0x48
 800ef40:	46bd      	mov	sp, r7
 800ef42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef46:	bf00      	nop
 800ef48:	58024400 	.word	0x58024400
 800ef4c:	03d09000 	.word	0x03d09000
 800ef50:	003d0900 	.word	0x003d0900
 800ef54:	080147ec 	.word	0x080147ec

0800ef58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b083      	sub	sp, #12
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef64:	f003 0308 	and.w	r3, r3, #8
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d00a      	beq.n	800ef82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	685b      	ldr	r3, [r3, #4]
 800ef72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	430a      	orrs	r2, r1
 800ef80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef86:	f003 0301 	and.w	r3, r3, #1
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d00a      	beq.n	800efa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	685b      	ldr	r3, [r3, #4]
 800ef94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	430a      	orrs	r2, r1
 800efa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efa8:	f003 0302 	and.w	r3, r3, #2
 800efac:	2b00      	cmp	r3, #0
 800efae:	d00a      	beq.n	800efc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	430a      	orrs	r2, r1
 800efc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efca:	f003 0304 	and.w	r3, r3, #4
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d00a      	beq.n	800efe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	685b      	ldr	r3, [r3, #4]
 800efd8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	430a      	orrs	r2, r1
 800efe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efec:	f003 0310 	and.w	r3, r3, #16
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d00a      	beq.n	800f00a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	689b      	ldr	r3, [r3, #8]
 800effa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	430a      	orrs	r2, r1
 800f008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f00e:	f003 0320 	and.w	r3, r3, #32
 800f012:	2b00      	cmp	r3, #0
 800f014:	d00a      	beq.n	800f02c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	689b      	ldr	r3, [r3, #8]
 800f01c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	430a      	orrs	r2, r1
 800f02a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f034:	2b00      	cmp	r3, #0
 800f036:	d01a      	beq.n	800f06e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	430a      	orrs	r2, r1
 800f04c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f056:	d10a      	bne.n	800f06e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	430a      	orrs	r2, r1
 800f06c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f076:	2b00      	cmp	r3, #0
 800f078:	d00a      	beq.n	800f090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	685b      	ldr	r3, [r3, #4]
 800f080:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	430a      	orrs	r2, r1
 800f08e:	605a      	str	r2, [r3, #4]
  }
}
 800f090:	bf00      	nop
 800f092:	370c      	adds	r7, #12
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr

0800f09c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b098      	sub	sp, #96	@ 0x60
 800f0a0:	af02      	add	r7, sp, #8
 800f0a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f0ac:	f7f7 fdd0 	bl	8006c50 <HAL_GetTick>
 800f0b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f003 0308 	and.w	r3, r3, #8
 800f0bc:	2b08      	cmp	r3, #8
 800f0be:	d12f      	bne.n	800f120 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f0c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f0c4:	9300      	str	r3, [sp, #0]
 800f0c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f000 f88e 	bl	800f1f0 <UART_WaitOnFlagUntilTimeout>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d022      	beq.n	800f120 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0e2:	e853 3f00 	ldrex	r3, [r3]
 800f0e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f0e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f0ee:	653b      	str	r3, [r7, #80]	@ 0x50
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	461a      	mov	r2, r3
 800f0f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f0f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800f0fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f0fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f100:	e841 2300 	strex	r3, r2, [r1]
 800f104:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d1e6      	bne.n	800f0da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2220      	movs	r2, #32
 800f110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2200      	movs	r2, #0
 800f118:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f11c:	2303      	movs	r3, #3
 800f11e:	e063      	b.n	800f1e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	f003 0304 	and.w	r3, r3, #4
 800f12a:	2b04      	cmp	r3, #4
 800f12c:	d149      	bne.n	800f1c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f12e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f132:	9300      	str	r3, [sp, #0]
 800f134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f136:	2200      	movs	r2, #0
 800f138:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f000 f857 	bl	800f1f0 <UART_WaitOnFlagUntilTimeout>
 800f142:	4603      	mov	r3, r0
 800f144:	2b00      	cmp	r3, #0
 800f146:	d03c      	beq.n	800f1c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f150:	e853 3f00 	ldrex	r3, [r3]
 800f154:	623b      	str	r3, [r7, #32]
   return(result);
 800f156:	6a3b      	ldr	r3, [r7, #32]
 800f158:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f15c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	461a      	mov	r2, r3
 800f164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f166:	633b      	str	r3, [r7, #48]	@ 0x30
 800f168:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f16a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f16c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f16e:	e841 2300 	strex	r3, r2, [r1]
 800f172:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f176:	2b00      	cmp	r3, #0
 800f178:	d1e6      	bne.n	800f148 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	3308      	adds	r3, #8
 800f180:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f182:	693b      	ldr	r3, [r7, #16]
 800f184:	e853 3f00 	ldrex	r3, [r3]
 800f188:	60fb      	str	r3, [r7, #12]
   return(result);
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	f023 0301 	bic.w	r3, r3, #1
 800f190:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	3308      	adds	r3, #8
 800f198:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f19a:	61fa      	str	r2, [r7, #28]
 800f19c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f19e:	69b9      	ldr	r1, [r7, #24]
 800f1a0:	69fa      	ldr	r2, [r7, #28]
 800f1a2:	e841 2300 	strex	r3, r2, [r1]
 800f1a6:	617b      	str	r3, [r7, #20]
   return(result);
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d1e5      	bne.n	800f17a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2220      	movs	r2, #32
 800f1b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f1be:	2303      	movs	r3, #3
 800f1c0:	e012      	b.n	800f1e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2220      	movs	r2, #32
 800f1c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2220      	movs	r2, #32
 800f1ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f1e6:	2300      	movs	r3, #0
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3758      	adds	r7, #88	@ 0x58
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}

0800f1f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b084      	sub	sp, #16
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	60f8      	str	r0, [r7, #12]
 800f1f8:	60b9      	str	r1, [r7, #8]
 800f1fa:	603b      	str	r3, [r7, #0]
 800f1fc:	4613      	mov	r3, r2
 800f1fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f200:	e04f      	b.n	800f2a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f202:	69bb      	ldr	r3, [r7, #24]
 800f204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f208:	d04b      	beq.n	800f2a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f20a:	f7f7 fd21 	bl	8006c50 <HAL_GetTick>
 800f20e:	4602      	mov	r2, r0
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	1ad3      	subs	r3, r2, r3
 800f214:	69ba      	ldr	r2, [r7, #24]
 800f216:	429a      	cmp	r2, r3
 800f218:	d302      	bcc.n	800f220 <UART_WaitOnFlagUntilTimeout+0x30>
 800f21a:	69bb      	ldr	r3, [r7, #24]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d101      	bne.n	800f224 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f220:	2303      	movs	r3, #3
 800f222:	e04e      	b.n	800f2c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f003 0304 	and.w	r3, r3, #4
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d037      	beq.n	800f2a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	2b80      	cmp	r3, #128	@ 0x80
 800f236:	d034      	beq.n	800f2a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	2b40      	cmp	r3, #64	@ 0x40
 800f23c:	d031      	beq.n	800f2a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	69db      	ldr	r3, [r3, #28]
 800f244:	f003 0308 	and.w	r3, r3, #8
 800f248:	2b08      	cmp	r3, #8
 800f24a:	d110      	bne.n	800f26e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	2208      	movs	r2, #8
 800f252:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f254:	68f8      	ldr	r0, [r7, #12]
 800f256:	f000 f839 	bl	800f2cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	2208      	movs	r2, #8
 800f25e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	2200      	movs	r2, #0
 800f266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f26a:	2301      	movs	r3, #1
 800f26c:	e029      	b.n	800f2c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	69db      	ldr	r3, [r3, #28]
 800f274:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f278:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f27c:	d111      	bne.n	800f2a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f286:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f288:	68f8      	ldr	r0, [r7, #12]
 800f28a:	f000 f81f 	bl	800f2cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	2220      	movs	r2, #32
 800f292:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2200      	movs	r2, #0
 800f29a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f29e:	2303      	movs	r3, #3
 800f2a0:	e00f      	b.n	800f2c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	69da      	ldr	r2, [r3, #28]
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	4013      	ands	r3, r2
 800f2ac:	68ba      	ldr	r2, [r7, #8]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	bf0c      	ite	eq
 800f2b2:	2301      	moveq	r3, #1
 800f2b4:	2300      	movne	r3, #0
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	461a      	mov	r2, r3
 800f2ba:	79fb      	ldrb	r3, [r7, #7]
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d0a0      	beq.n	800f202 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f2c0:	2300      	movs	r3, #0
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3710      	adds	r7, #16
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
	...

0800f2cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b095      	sub	sp, #84	@ 0x54
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2dc:	e853 3f00 	ldrex	r3, [r3]
 800f2e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f2e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	461a      	mov	r2, r3
 800f2f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f2f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800f2f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f2f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f2fa:	e841 2300 	strex	r3, r2, [r1]
 800f2fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f302:	2b00      	cmp	r3, #0
 800f304:	d1e6      	bne.n	800f2d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	3308      	adds	r3, #8
 800f30c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f30e:	6a3b      	ldr	r3, [r7, #32]
 800f310:	e853 3f00 	ldrex	r3, [r3]
 800f314:	61fb      	str	r3, [r7, #28]
   return(result);
 800f316:	69fa      	ldr	r2, [r7, #28]
 800f318:	4b1e      	ldr	r3, [pc, #120]	@ (800f394 <UART_EndRxTransfer+0xc8>)
 800f31a:	4013      	ands	r3, r2
 800f31c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	3308      	adds	r3, #8
 800f324:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f326:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f328:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f32a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f32c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f32e:	e841 2300 	strex	r3, r2, [r1]
 800f332:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f336:	2b00      	cmp	r3, #0
 800f338:	d1e5      	bne.n	800f306 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f33e:	2b01      	cmp	r3, #1
 800f340:	d118      	bne.n	800f374 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	e853 3f00 	ldrex	r3, [r3]
 800f34e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	f023 0310 	bic.w	r3, r3, #16
 800f356:	647b      	str	r3, [r7, #68]	@ 0x44
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	461a      	mov	r2, r3
 800f35e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f360:	61bb      	str	r3, [r7, #24]
 800f362:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f364:	6979      	ldr	r1, [r7, #20]
 800f366:	69ba      	ldr	r2, [r7, #24]
 800f368:	e841 2300 	strex	r3, r2, [r1]
 800f36c:	613b      	str	r3, [r7, #16]
   return(result);
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d1e6      	bne.n	800f342 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2220      	movs	r2, #32
 800f378:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2200      	movs	r2, #0
 800f380:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2200      	movs	r2, #0
 800f386:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f388:	bf00      	nop
 800f38a:	3754      	adds	r7, #84	@ 0x54
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr
 800f394:	effffffe 	.word	0xeffffffe

0800f398 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f398:	b480      	push	{r7}
 800f39a:	b085      	sub	sp, #20
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f3a6:	2b01      	cmp	r3, #1
 800f3a8:	d101      	bne.n	800f3ae <HAL_UARTEx_DisableFifoMode+0x16>
 800f3aa:	2302      	movs	r3, #2
 800f3ac:	e027      	b.n	800f3fe <HAL_UARTEx_DisableFifoMode+0x66>
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2201      	movs	r2, #1
 800f3b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2224      	movs	r2, #36	@ 0x24
 800f3ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	681a      	ldr	r2, [r3, #0]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	f022 0201 	bic.w	r2, r2, #1
 800f3d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f3dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	68fa      	ldr	r2, [r7, #12]
 800f3ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2220      	movs	r2, #32
 800f3f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f3fc:	2300      	movs	r3, #0
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	3714      	adds	r7, #20
 800f402:	46bd      	mov	sp, r7
 800f404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f408:	4770      	bx	lr

0800f40a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f40a:	b580      	push	{r7, lr}
 800f40c:	b084      	sub	sp, #16
 800f40e:	af00      	add	r7, sp, #0
 800f410:	6078      	str	r0, [r7, #4]
 800f412:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f41a:	2b01      	cmp	r3, #1
 800f41c:	d101      	bne.n	800f422 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f41e:	2302      	movs	r3, #2
 800f420:	e02d      	b.n	800f47e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2201      	movs	r2, #1
 800f426:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2224      	movs	r2, #36	@ 0x24
 800f42e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	681a      	ldr	r2, [r3, #0]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f022 0201 	bic.w	r2, r2, #1
 800f448:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	689b      	ldr	r3, [r3, #8]
 800f450:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	683a      	ldr	r2, [r7, #0]
 800f45a:	430a      	orrs	r2, r1
 800f45c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f000 f850 	bl	800f504 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	68fa      	ldr	r2, [r7, #12]
 800f46a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2220      	movs	r2, #32
 800f470:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2200      	movs	r2, #0
 800f478:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f47c:	2300      	movs	r3, #0
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3710      	adds	r7, #16
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}

0800f486 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f486:	b580      	push	{r7, lr}
 800f488:	b084      	sub	sp, #16
 800f48a:	af00      	add	r7, sp, #0
 800f48c:	6078      	str	r0, [r7, #4]
 800f48e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f496:	2b01      	cmp	r3, #1
 800f498:	d101      	bne.n	800f49e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f49a:	2302      	movs	r3, #2
 800f49c:	e02d      	b.n	800f4fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2201      	movs	r2, #1
 800f4a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2224      	movs	r2, #36	@ 0x24
 800f4aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	681a      	ldr	r2, [r3, #0]
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	f022 0201 	bic.w	r2, r2, #1
 800f4c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	689b      	ldr	r3, [r3, #8]
 800f4cc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	683a      	ldr	r2, [r7, #0]
 800f4d6:	430a      	orrs	r2, r1
 800f4d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f000 f812 	bl	800f504 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	68fa      	ldr	r2, [r7, #12]
 800f4e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2220      	movs	r2, #32
 800f4ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f4f8:	2300      	movs	r3, #0
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3710      	adds	r7, #16
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
	...

0800f504 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f504:	b480      	push	{r7}
 800f506:	b085      	sub	sp, #20
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f510:	2b00      	cmp	r3, #0
 800f512:	d108      	bne.n	800f526 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2201      	movs	r2, #1
 800f518:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2201      	movs	r2, #1
 800f520:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f524:	e031      	b.n	800f58a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f526:	2310      	movs	r3, #16
 800f528:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f52a:	2310      	movs	r3, #16
 800f52c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	689b      	ldr	r3, [r3, #8]
 800f534:	0e5b      	lsrs	r3, r3, #25
 800f536:	b2db      	uxtb	r3, r3
 800f538:	f003 0307 	and.w	r3, r3, #7
 800f53c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	689b      	ldr	r3, [r3, #8]
 800f544:	0f5b      	lsrs	r3, r3, #29
 800f546:	b2db      	uxtb	r3, r3
 800f548:	f003 0307 	and.w	r3, r3, #7
 800f54c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f54e:	7bbb      	ldrb	r3, [r7, #14]
 800f550:	7b3a      	ldrb	r2, [r7, #12]
 800f552:	4911      	ldr	r1, [pc, #68]	@ (800f598 <UARTEx_SetNbDataToProcess+0x94>)
 800f554:	5c8a      	ldrb	r2, [r1, r2]
 800f556:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f55a:	7b3a      	ldrb	r2, [r7, #12]
 800f55c:	490f      	ldr	r1, [pc, #60]	@ (800f59c <UARTEx_SetNbDataToProcess+0x98>)
 800f55e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f560:	fb93 f3f2 	sdiv	r3, r3, r2
 800f564:	b29a      	uxth	r2, r3
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f56c:	7bfb      	ldrb	r3, [r7, #15]
 800f56e:	7b7a      	ldrb	r2, [r7, #13]
 800f570:	4909      	ldr	r1, [pc, #36]	@ (800f598 <UARTEx_SetNbDataToProcess+0x94>)
 800f572:	5c8a      	ldrb	r2, [r1, r2]
 800f574:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f578:	7b7a      	ldrb	r2, [r7, #13]
 800f57a:	4908      	ldr	r1, [pc, #32]	@ (800f59c <UARTEx_SetNbDataToProcess+0x98>)
 800f57c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f57e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f582:	b29a      	uxth	r2, r3
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f58a:	bf00      	nop
 800f58c:	3714      	adds	r7, #20
 800f58e:	46bd      	mov	sp, r7
 800f590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f594:	4770      	bx	lr
 800f596:	bf00      	nop
 800f598:	08014804 	.word	0x08014804
 800f59c:	0801480c 	.word	0x0801480c

0800f5a0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f5a0:	b084      	sub	sp, #16
 800f5a2:	b480      	push	{r7}
 800f5a4:	b085      	sub	sp, #20
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]
 800f5aa:	f107 001c 	add.w	r0, r7, #28
 800f5ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800f5b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800f5b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800f5ba:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800f5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800f5be:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800f5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800f5c2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800f5c6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800f5c8:	68fa      	ldr	r2, [r7, #12]
 800f5ca:	4313      	orrs	r3, r2
 800f5cc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	685a      	ldr	r2, [r3, #4]
 800f5d2:	4b07      	ldr	r3, [pc, #28]	@ (800f5f0 <SDMMC_Init+0x50>)
 800f5d4:	4013      	ands	r3, r2
 800f5d6:	68fa      	ldr	r2, [r7, #12]
 800f5d8:	431a      	orrs	r2, r3
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f5de:	2300      	movs	r3, #0
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3714      	adds	r7, #20
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	b004      	add	sp, #16
 800f5ec:	4770      	bx	lr
 800f5ee:	bf00      	nop
 800f5f0:	ffc02c00 	.word	0xffc02c00

0800f5f4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b083      	sub	sp, #12
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800f602:	4618      	mov	r0, r3
 800f604:	370c      	adds	r7, #12
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr

0800f60e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800f60e:	b480      	push	{r7}
 800f610:	b083      	sub	sp, #12
 800f612:	af00      	add	r7, sp, #0
 800f614:	6078      	str	r0, [r7, #4]
 800f616:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	681a      	ldr	r2, [r3, #0]
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800f622:	2300      	movs	r3, #0
}
 800f624:	4618      	mov	r0, r3
 800f626:	370c      	adds	r7, #12
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr

0800f630 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800f630:	b480      	push	{r7}
 800f632:	b083      	sub	sp, #12
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f043 0203 	orr.w	r2, r3, #3
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f644:	2300      	movs	r3, #0
}
 800f646:	4618      	mov	r0, r3
 800f648:	370c      	adds	r7, #12
 800f64a:	46bd      	mov	sp, r7
 800f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f650:	4770      	bx	lr

0800f652 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800f652:	b480      	push	{r7}
 800f654:	b083      	sub	sp, #12
 800f656:	af00      	add	r7, sp, #0
 800f658:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f003 0303 	and.w	r3, r3, #3
}
 800f662:	4618      	mov	r0, r3
 800f664:	370c      	adds	r7, #12
 800f666:	46bd      	mov	sp, r7
 800f668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66c:	4770      	bx	lr
	...

0800f670 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f670:	b480      	push	{r7}
 800f672:	b085      	sub	sp, #20
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f67a:	2300      	movs	r3, #0
 800f67c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	681a      	ldr	r2, [r3, #0]
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f68e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800f694:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800f69a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f69c:	68fa      	ldr	r2, [r7, #12]
 800f69e:	4313      	orrs	r3, r2
 800f6a0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	68da      	ldr	r2, [r3, #12]
 800f6a6:	4b06      	ldr	r3, [pc, #24]	@ (800f6c0 <SDMMC_SendCommand+0x50>)
 800f6a8:	4013      	ands	r3, r2
 800f6aa:	68fa      	ldr	r2, [r7, #12]
 800f6ac:	431a      	orrs	r2, r3
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f6b2:	2300      	movs	r3, #0
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3714      	adds	r7, #20
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr
 800f6c0:	fffee0c0 	.word	0xfffee0c0

0800f6c4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	691b      	ldr	r3, [r3, #16]
 800f6d0:	b2db      	uxtb	r3, r3
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	370c      	adds	r7, #12
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr

0800f6de <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f6de:	b480      	push	{r7}
 800f6e0:	b085      	sub	sp, #20
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	6078      	str	r0, [r7, #4]
 800f6e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	3314      	adds	r3, #20
 800f6ec:	461a      	mov	r2, r3
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	4413      	add	r3, r2
 800f6f2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3714      	adds	r7, #20
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr

0800f704 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800f704:	b480      	push	{r7}
 800f706:	b085      	sub	sp, #20
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f70e:	2300      	movs	r3, #0
 800f710:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	681a      	ldr	r2, [r3, #0]
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	685a      	ldr	r2, [r3, #4]
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800f72a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800f730:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800f736:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800f738:	68fa      	ldr	r2, [r7, #12]
 800f73a:	4313      	orrs	r3, r2
 800f73c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f742:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	431a      	orrs	r2, r3
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800f74e:	2300      	movs	r3, #0

}
 800f750:	4618      	mov	r0, r3
 800f752:	3714      	adds	r7, #20
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr

0800f75c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b088      	sub	sp, #32
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f76a:	2310      	movs	r3, #16
 800f76c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f76e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f772:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f774:	2300      	movs	r3, #0
 800f776:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f778:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f77c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f77e:	f107 0308 	add.w	r3, r7, #8
 800f782:	4619      	mov	r1, r3
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f7ff ff73 	bl	800f670 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f78a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f78e:	2110      	movs	r1, #16
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f000 fa5f 	bl	800fc54 <SDMMC_GetCmdResp1>
 800f796:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f798:	69fb      	ldr	r3, [r7, #28]
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3720      	adds	r7, #32
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}

0800f7a2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f7a2:	b580      	push	{r7, lr}
 800f7a4:	b088      	sub	sp, #32
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	6078      	str	r0, [r7, #4]
 800f7aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f7b0:	2311      	movs	r3, #17
 800f7b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f7b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f7b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f7be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f7c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f7c4:	f107 0308 	add.w	r3, r7, #8
 800f7c8:	4619      	mov	r1, r3
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f7ff ff50 	bl	800f670 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f7d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f7d4:	2111      	movs	r1, #17
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f000 fa3c 	bl	800fc54 <SDMMC_GetCmdResp1>
 800f7dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7de:	69fb      	ldr	r3, [r7, #28]
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3720      	adds	r7, #32
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}

0800f7e8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b088      	sub	sp, #32
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f7f6:	2312      	movs	r3, #18
 800f7f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f7fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f7fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f800:	2300      	movs	r3, #0
 800f802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f808:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f80a:	f107 0308 	add.w	r3, r7, #8
 800f80e:	4619      	mov	r1, r3
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f7ff ff2d 	bl	800f670 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f81a:	2112      	movs	r1, #18
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f000 fa19 	bl	800fc54 <SDMMC_GetCmdResp1>
 800f822:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f824:	69fb      	ldr	r3, [r7, #28]
}
 800f826:	4618      	mov	r0, r3
 800f828:	3720      	adds	r7, #32
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}

0800f82e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f82e:	b580      	push	{r7, lr}
 800f830:	b088      	sub	sp, #32
 800f832:	af00      	add	r7, sp, #0
 800f834:	6078      	str	r0, [r7, #4]
 800f836:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f83c:	2318      	movs	r3, #24
 800f83e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f840:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f844:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f846:	2300      	movs	r3, #0
 800f848:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f84a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f84e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f850:	f107 0308 	add.w	r3, r7, #8
 800f854:	4619      	mov	r1, r3
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f7ff ff0a 	bl	800f670 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f85c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f860:	2118      	movs	r1, #24
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f000 f9f6 	bl	800fc54 <SDMMC_GetCmdResp1>
 800f868:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f86a:	69fb      	ldr	r3, [r7, #28]
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	3720      	adds	r7, #32
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}

0800f874 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b088      	sub	sp, #32
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f882:	2319      	movs	r3, #25
 800f884:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f886:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f88a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f88c:	2300      	movs	r3, #0
 800f88e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f890:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f894:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f896:	f107 0308 	add.w	r3, r7, #8
 800f89a:	4619      	mov	r1, r3
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f7ff fee7 	bl	800f670 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f8a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f8a6:	2119      	movs	r1, #25
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f000 f9d3 	bl	800fc54 <SDMMC_GetCmdResp1>
 800f8ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8b0:	69fb      	ldr	r3, [r7, #28]
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3720      	adds	r7, #32
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}
	...

0800f8bc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b088      	sub	sp, #32
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f8c8:	230c      	movs	r3, #12
 800f8ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f8cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f8d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f8d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f8da:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	68db      	ldr	r3, [r3, #12]
 800f8e0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	68db      	ldr	r3, [r3, #12]
 800f8ec:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f8f4:	f107 0308 	add.w	r3, r7, #8
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	6878      	ldr	r0, [r7, #4]
 800f8fc:	f7ff feb8 	bl	800f670 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800f900:	4a0b      	ldr	r2, [pc, #44]	@ (800f930 <SDMMC_CmdStopTransfer+0x74>)
 800f902:	210c      	movs	r1, #12
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f000 f9a5 	bl	800fc54 <SDMMC_GetCmdResp1>
 800f90a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	68db      	ldr	r3, [r3, #12]
 800f910:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800f918:	69fb      	ldr	r3, [r7, #28]
 800f91a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f91e:	d101      	bne.n	800f924 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800f920:	2300      	movs	r3, #0
 800f922:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800f924:	69fb      	ldr	r3, [r7, #28]
}
 800f926:	4618      	mov	r0, r3
 800f928:	3720      	adds	r7, #32
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	05f5e100 	.word	0x05f5e100

0800f934 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b088      	sub	sp, #32
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
 800f93c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f942:	2307      	movs	r3, #7
 800f944:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f946:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f94a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f94c:	2300      	movs	r3, #0
 800f94e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f950:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f954:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f956:	f107 0308 	add.w	r3, r7, #8
 800f95a:	4619      	mov	r1, r3
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f7ff fe87 	bl	800f670 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f962:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f966:	2107      	movs	r1, #7
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f000 f973 	bl	800fc54 <SDMMC_GetCmdResp1>
 800f96e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f970:	69fb      	ldr	r3, [r7, #28]
}
 800f972:	4618      	mov	r0, r3
 800f974:	3720      	adds	r7, #32
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}

0800f97a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f97a:	b580      	push	{r7, lr}
 800f97c:	b088      	sub	sp, #32
 800f97e:	af00      	add	r7, sp, #0
 800f980:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800f982:	2300      	movs	r3, #0
 800f984:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f986:	2300      	movs	r3, #0
 800f988:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f98a:	2300      	movs	r3, #0
 800f98c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f98e:	2300      	movs	r3, #0
 800f990:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f992:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f996:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f998:	f107 0308 	add.w	r3, r7, #8
 800f99c:	4619      	mov	r1, r3
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f7ff fe66 	bl	800f670 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f000 fb97 	bl	80100d8 <SDMMC_GetCmdError>
 800f9aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9ac:	69fb      	ldr	r3, [r7, #28]
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3720      	adds	r7, #32
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}

0800f9b6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f9b6:	b580      	push	{r7, lr}
 800f9b8:	b088      	sub	sp, #32
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f9be:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800f9c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f9c4:	2308      	movs	r3, #8
 800f9c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f9c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f9cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f9d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f9d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f9d8:	f107 0308 	add.w	r3, r7, #8
 800f9dc:	4619      	mov	r1, r3
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f7ff fe46 	bl	800f670 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f000 fb29 	bl	801003c <SDMMC_GetCmdResp7>
 800f9ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9ec:	69fb      	ldr	r3, [r7, #28]
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3720      	adds	r7, #32
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}

0800f9f6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f9f6:	b580      	push	{r7, lr}
 800f9f8:	b088      	sub	sp, #32
 800f9fa:	af00      	add	r7, sp, #0
 800f9fc:	6078      	str	r0, [r7, #4]
 800f9fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800fa04:	2337      	movs	r3, #55	@ 0x37
 800fa06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fa0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fa16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa18:	f107 0308 	add.w	r3, r7, #8
 800fa1c:	4619      	mov	r1, r3
 800fa1e:	6878      	ldr	r0, [r7, #4]
 800fa20:	f7ff fe26 	bl	800f670 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800fa24:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fa28:	2137      	movs	r1, #55	@ 0x37
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f000 f912 	bl	800fc54 <SDMMC_GetCmdResp1>
 800fa30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa32:	69fb      	ldr	r3, [r7, #28]
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	3720      	adds	r7, #32
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}

0800fa3c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b088      	sub	sp, #32
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800fa4a:	2329      	movs	r3, #41	@ 0x29
 800fa4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fa52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa54:	2300      	movs	r3, #0
 800fa56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fa5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa5e:	f107 0308 	add.w	r3, r7, #8
 800fa62:	4619      	mov	r1, r3
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f7ff fe03 	bl	800f670 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800fa6a:	6878      	ldr	r0, [r7, #4]
 800fa6c:	f000 fa2e 	bl	800fecc <SDMMC_GetCmdResp3>
 800fa70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa72:	69fb      	ldr	r3, [r7, #28]
}
 800fa74:	4618      	mov	r0, r3
 800fa76:	3720      	adds	r7, #32
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}

0800fa7c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b088      	sub	sp, #32
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
 800fa84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800fa8a:	2306      	movs	r3, #6
 800fa8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fa92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa94:	2300      	movs	r3, #0
 800fa96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fa9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa9e:	f107 0308 	add.w	r3, r7, #8
 800faa2:	4619      	mov	r1, r3
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f7ff fde3 	bl	800f670 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800faaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800faae:	2106      	movs	r1, #6
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f000 f8cf 	bl	800fc54 <SDMMC_GetCmdResp1>
 800fab6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fab8:	69fb      	ldr	r3, [r7, #28]
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3720      	adds	r7, #32
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b088      	sub	sp, #32
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800faca:	2300      	movs	r3, #0
 800facc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800face:	2333      	movs	r3, #51	@ 0x33
 800fad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fad2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fad6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fad8:	2300      	movs	r3, #0
 800fada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fadc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fae0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fae2:	f107 0308 	add.w	r3, r7, #8
 800fae6:	4619      	mov	r1, r3
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f7ff fdc1 	bl	800f670 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800faee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800faf2:	2133      	movs	r1, #51	@ 0x33
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f000 f8ad 	bl	800fc54 <SDMMC_GetCmdResp1>
 800fafa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fafc:	69fb      	ldr	r3, [r7, #28]
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3720      	adds	r7, #32
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}

0800fb06 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800fb06:	b580      	push	{r7, lr}
 800fb08:	b088      	sub	sp, #32
 800fb0a:	af00      	add	r7, sp, #0
 800fb0c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800fb12:	2302      	movs	r3, #2
 800fb14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fb16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800fb1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fb24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb26:	f107 0308 	add.w	r3, r7, #8
 800fb2a:	4619      	mov	r1, r3
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f7ff fd9f 	bl	800f670 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f000 f980 	bl	800fe38 <SDMMC_GetCmdResp2>
 800fb38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb3a:	69fb      	ldr	r3, [r7, #28]
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3720      	adds	r7, #32
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b088      	sub	sp, #32
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800fb52:	2309      	movs	r3, #9
 800fb54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fb56:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800fb5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fb64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb66:	f107 0308 	add.w	r3, r7, #8
 800fb6a:	4619      	mov	r1, r3
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f7ff fd7f 	bl	800f670 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f000 f960 	bl	800fe38 <SDMMC_GetCmdResp2>
 800fb78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb7a:	69fb      	ldr	r3, [r7, #28]
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3720      	adds	r7, #32
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}

0800fb84 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b088      	sub	sp, #32
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fb92:	2303      	movs	r3, #3
 800fb94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fb96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fb9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fba0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fba4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fba6:	f107 0308 	add.w	r3, r7, #8
 800fbaa:	4619      	mov	r1, r3
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f7ff fd5f 	bl	800f670 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800fbb2:	683a      	ldr	r2, [r7, #0]
 800fbb4:	2103      	movs	r1, #3
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f000 f9c8 	bl	800ff4c <SDMMC_GetCmdResp6>
 800fbbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fbbe:	69fb      	ldr	r3, [r7, #28]
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3720      	adds	r7, #32
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}

0800fbc8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b088      	sub	sp, #32
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
 800fbd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800fbd6:	230d      	movs	r3, #13
 800fbd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fbda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fbde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fbe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fbe8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fbea:	f107 0308 	add.w	r3, r7, #8
 800fbee:	4619      	mov	r1, r3
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f7ff fd3d 	bl	800f670 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800fbf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fbfa:	210d      	movs	r1, #13
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f000 f829 	bl	800fc54 <SDMMC_GetCmdResp1>
 800fc02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc04:	69fb      	ldr	r3, [r7, #28]
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3720      	adds	r7, #32
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}

0800fc0e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800fc0e:	b580      	push	{r7, lr}
 800fc10:	b088      	sub	sp, #32
 800fc12:	af00      	add	r7, sp, #0
 800fc14:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800fc16:	2300      	movs	r3, #0
 800fc18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800fc1a:	230d      	movs	r3, #13
 800fc1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fc22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc24:	2300      	movs	r3, #0
 800fc26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fc2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc2e:	f107 0308 	add.w	r3, r7, #8
 800fc32:	4619      	mov	r1, r3
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f7ff fd1b 	bl	800f670 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800fc3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc3e:	210d      	movs	r1, #13
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f000 f807 	bl	800fc54 <SDMMC_GetCmdResp1>
 800fc46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc48:	69fb      	ldr	r3, [r7, #28]
}
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	3720      	adds	r7, #32
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}
	...

0800fc54 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b088      	sub	sp, #32
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	60f8      	str	r0, [r7, #12]
 800fc5c:	460b      	mov	r3, r1
 800fc5e:	607a      	str	r2, [r7, #4]
 800fc60:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fc62:	4b70      	ldr	r3, [pc, #448]	@ (800fe24 <SDMMC_GetCmdResp1+0x1d0>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	4a70      	ldr	r2, [pc, #448]	@ (800fe28 <SDMMC_GetCmdResp1+0x1d4>)
 800fc68:	fba2 2303 	umull	r2, r3, r2, r3
 800fc6c:	0a5a      	lsrs	r2, r3, #9
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	fb02 f303 	mul.w	r3, r2, r3
 800fc74:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800fc76:	69fb      	ldr	r3, [r7, #28]
 800fc78:	1e5a      	subs	r2, r3, #1
 800fc7a:	61fa      	str	r2, [r7, #28]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d102      	bne.n	800fc86 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fc80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fc84:	e0c9      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc8a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800fc8c:	69ba      	ldr	r2, [r7, #24]
 800fc8e:	4b67      	ldr	r3, [pc, #412]	@ (800fe2c <SDMMC_GetCmdResp1+0x1d8>)
 800fc90:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d0ef      	beq.n	800fc76 <SDMMC_GetCmdResp1+0x22>
 800fc96:	69bb      	ldr	r3, [r7, #24]
 800fc98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d1ea      	bne.n	800fc76 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fca4:	f003 0304 	and.w	r3, r3, #4
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d004      	beq.n	800fcb6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	2204      	movs	r2, #4
 800fcb0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fcb2:	2304      	movs	r3, #4
 800fcb4:	e0b1      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcba:	f003 0301 	and.w	r3, r3, #1
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d004      	beq.n	800fccc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	2201      	movs	r2, #1
 800fcc6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fcc8:	2301      	movs	r3, #1
 800fcca:	e0a6      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	4a58      	ldr	r2, [pc, #352]	@ (800fe30 <SDMMC_GetCmdResp1+0x1dc>)
 800fcd0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fcd2:	68f8      	ldr	r0, [r7, #12]
 800fcd4:	f7ff fcf6 	bl	800f6c4 <SDMMC_GetCommandResponse>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	461a      	mov	r2, r3
 800fcdc:	7afb      	ldrb	r3, [r7, #11]
 800fcde:	4293      	cmp	r3, r2
 800fce0:	d001      	beq.n	800fce6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fce2:	2301      	movs	r3, #1
 800fce4:	e099      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800fce6:	2100      	movs	r1, #0
 800fce8:	68f8      	ldr	r0, [r7, #12]
 800fcea:	f7ff fcf8 	bl	800f6de <SDMMC_GetResponse>
 800fcee:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fcf0:	697a      	ldr	r2, [r7, #20]
 800fcf2:	4b50      	ldr	r3, [pc, #320]	@ (800fe34 <SDMMC_GetCmdResp1+0x1e0>)
 800fcf4:	4013      	ands	r3, r2
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d101      	bne.n	800fcfe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	e08d      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	da02      	bge.n	800fd0a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fd04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800fd08:	e087      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d001      	beq.n	800fd18 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fd14:	2340      	movs	r3, #64	@ 0x40
 800fd16:	e080      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d001      	beq.n	800fd26 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800fd22:	2380      	movs	r3, #128	@ 0x80
 800fd24:	e079      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d002      	beq.n	800fd36 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fd30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fd34:	e071      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d002      	beq.n	800fd46 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fd40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fd44:	e069      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d002      	beq.n	800fd56 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fd50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd54:	e061      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d002      	beq.n	800fd66 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fd60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fd64:	e059      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d002      	beq.n	800fd76 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fd70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd74:	e051      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d002      	beq.n	800fd86 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fd80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fd84:	e049      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d002      	beq.n	800fd96 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fd90:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800fd94:	e041      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d002      	beq.n	800fda6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800fda0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fda4:	e039      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d002      	beq.n	800fdb6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fdb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800fdb4:	e031      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d002      	beq.n	800fdc6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fdc0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800fdc4:	e029      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d002      	beq.n	800fdd6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fdd0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fdd4:	e021      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d002      	beq.n	800fde6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fde0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fde4:	e019      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d002      	beq.n	800fdf6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fdf0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800fdf4:	e011      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d002      	beq.n	800fe06 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800fe00:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800fe04:	e009      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	f003 0308 	and.w	r3, r3, #8
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d002      	beq.n	800fe16 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800fe10:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800fe14:	e001      	b.n	800fe1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fe16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3720      	adds	r7, #32
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
 800fe22:	bf00      	nop
 800fe24:	24000050 	.word	0x24000050
 800fe28:	10624dd3 	.word	0x10624dd3
 800fe2c:	00200045 	.word	0x00200045
 800fe30:	002000c5 	.word	0x002000c5
 800fe34:	fdffe008 	.word	0xfdffe008

0800fe38 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b085      	sub	sp, #20
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800fe40:	4b1f      	ldr	r3, [pc, #124]	@ (800fec0 <SDMMC_GetCmdResp2+0x88>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	4a1f      	ldr	r2, [pc, #124]	@ (800fec4 <SDMMC_GetCmdResp2+0x8c>)
 800fe46:	fba2 2303 	umull	r2, r3, r2, r3
 800fe4a:	0a5b      	lsrs	r3, r3, #9
 800fe4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fe50:	fb02 f303 	mul.w	r3, r2, r3
 800fe54:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	1e5a      	subs	r2, r3, #1
 800fe5a:	60fa      	str	r2, [r7, #12]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d102      	bne.n	800fe66 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fe60:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fe64:	e026      	b.n	800feb4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe6a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d0ef      	beq.n	800fe56 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d1ea      	bne.n	800fe56 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe84:	f003 0304 	and.w	r3, r3, #4
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d004      	beq.n	800fe96 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2204      	movs	r2, #4
 800fe90:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fe92:	2304      	movs	r3, #4
 800fe94:	e00e      	b.n	800feb4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe9a:	f003 0301 	and.w	r3, r3, #1
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d004      	beq.n	800feac <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2201      	movs	r2, #1
 800fea6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fea8:	2301      	movs	r3, #1
 800feaa:	e003      	b.n	800feb4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	4a06      	ldr	r2, [pc, #24]	@ (800fec8 <SDMMC_GetCmdResp2+0x90>)
 800feb0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800feb2:	2300      	movs	r3, #0
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	3714      	adds	r7, #20
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr
 800fec0:	24000050 	.word	0x24000050
 800fec4:	10624dd3 	.word	0x10624dd3
 800fec8:	002000c5 	.word	0x002000c5

0800fecc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800fecc:	b480      	push	{r7}
 800fece:	b085      	sub	sp, #20
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800fed4:	4b1a      	ldr	r3, [pc, #104]	@ (800ff40 <SDMMC_GetCmdResp3+0x74>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	4a1a      	ldr	r2, [pc, #104]	@ (800ff44 <SDMMC_GetCmdResp3+0x78>)
 800feda:	fba2 2303 	umull	r2, r3, r2, r3
 800fede:	0a5b      	lsrs	r3, r3, #9
 800fee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fee4:	fb02 f303 	mul.w	r3, r2, r3
 800fee8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	1e5a      	subs	r2, r3, #1
 800feee:	60fa      	str	r2, [r7, #12]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d102      	bne.n	800fefa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fef4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fef8:	e01b      	b.n	800ff32 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fefe:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ff00:	68bb      	ldr	r3, [r7, #8]
 800ff02:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d0ef      	beq.n	800feea <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d1ea      	bne.n	800feea <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff18:	f003 0304 	and.w	r3, r3, #4
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d004      	beq.n	800ff2a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2204      	movs	r2, #4
 800ff24:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ff26:	2304      	movs	r3, #4
 800ff28:	e003      	b.n	800ff32 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	4a06      	ldr	r2, [pc, #24]	@ (800ff48 <SDMMC_GetCmdResp3+0x7c>)
 800ff2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ff30:	2300      	movs	r3, #0
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3714      	adds	r7, #20
 800ff36:	46bd      	mov	sp, r7
 800ff38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3c:	4770      	bx	lr
 800ff3e:	bf00      	nop
 800ff40:	24000050 	.word	0x24000050
 800ff44:	10624dd3 	.word	0x10624dd3
 800ff48:	002000c5 	.word	0x002000c5

0800ff4c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b088      	sub	sp, #32
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	460b      	mov	r3, r1
 800ff56:	607a      	str	r2, [r7, #4]
 800ff58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ff5a:	4b35      	ldr	r3, [pc, #212]	@ (8010030 <SDMMC_GetCmdResp6+0xe4>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	4a35      	ldr	r2, [pc, #212]	@ (8010034 <SDMMC_GetCmdResp6+0xe8>)
 800ff60:	fba2 2303 	umull	r2, r3, r2, r3
 800ff64:	0a5b      	lsrs	r3, r3, #9
 800ff66:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff6a:	fb02 f303 	mul.w	r3, r2, r3
 800ff6e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	1e5a      	subs	r2, r3, #1
 800ff74:	61fa      	str	r2, [r7, #28]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d102      	bne.n	800ff80 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ff7a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ff7e:	e052      	b.n	8010026 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff84:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ff86:	69bb      	ldr	r3, [r7, #24]
 800ff88:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d0ef      	beq.n	800ff70 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ff90:	69bb      	ldr	r3, [r7, #24]
 800ff92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d1ea      	bne.n	800ff70 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff9e:	f003 0304 	and.w	r3, r3, #4
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d004      	beq.n	800ffb0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	2204      	movs	r2, #4
 800ffaa:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ffac:	2304      	movs	r3, #4
 800ffae:	e03a      	b.n	8010026 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ffb4:	f003 0301 	and.w	r3, r3, #1
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d004      	beq.n	800ffc6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	e02f      	b.n	8010026 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ffc6:	68f8      	ldr	r0, [r7, #12]
 800ffc8:	f7ff fb7c 	bl	800f6c4 <SDMMC_GetCommandResponse>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	461a      	mov	r2, r3
 800ffd0:	7afb      	ldrb	r3, [r7, #11]
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d001      	beq.n	800ffda <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	e025      	b.n	8010026 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	4a16      	ldr	r2, [pc, #88]	@ (8010038 <SDMMC_GetCmdResp6+0xec>)
 800ffde:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ffe0:	2100      	movs	r1, #0
 800ffe2:	68f8      	ldr	r0, [r7, #12]
 800ffe4:	f7ff fb7b 	bl	800f6de <SDMMC_GetResponse>
 800ffe8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d106      	bne.n	8010002 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	0c1b      	lsrs	r3, r3, #16
 800fff8:	b29a      	uxth	r2, r3
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800fffe:	2300      	movs	r3, #0
 8010000:	e011      	b.n	8010026 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010008:	2b00      	cmp	r3, #0
 801000a:	d002      	beq.n	8010012 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801000c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010010:	e009      	b.n	8010026 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010018:	2b00      	cmp	r3, #0
 801001a:	d002      	beq.n	8010022 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801001c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010020:	e001      	b.n	8010026 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010022:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010026:	4618      	mov	r0, r3
 8010028:	3720      	adds	r7, #32
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}
 801002e:	bf00      	nop
 8010030:	24000050 	.word	0x24000050
 8010034:	10624dd3 	.word	0x10624dd3
 8010038:	002000c5 	.word	0x002000c5

0801003c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 801003c:	b480      	push	{r7}
 801003e:	b085      	sub	sp, #20
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010044:	4b22      	ldr	r3, [pc, #136]	@ (80100d0 <SDMMC_GetCmdResp7+0x94>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	4a22      	ldr	r2, [pc, #136]	@ (80100d4 <SDMMC_GetCmdResp7+0x98>)
 801004a:	fba2 2303 	umull	r2, r3, r2, r3
 801004e:	0a5b      	lsrs	r3, r3, #9
 8010050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010054:	fb02 f303 	mul.w	r3, r2, r3
 8010058:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	1e5a      	subs	r2, r3, #1
 801005e:	60fa      	str	r2, [r7, #12]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d102      	bne.n	801006a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010064:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010068:	e02c      	b.n	80100c4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801006e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010076:	2b00      	cmp	r3, #0
 8010078:	d0ef      	beq.n	801005a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010080:	2b00      	cmp	r3, #0
 8010082:	d1ea      	bne.n	801005a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010088:	f003 0304 	and.w	r3, r3, #4
 801008c:	2b00      	cmp	r3, #0
 801008e:	d004      	beq.n	801009a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2204      	movs	r2, #4
 8010094:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010096:	2304      	movs	r3, #4
 8010098:	e014      	b.n	80100c4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801009e:	f003 0301 	and.w	r3, r3, #1
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d004      	beq.n	80100b0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2201      	movs	r2, #1
 80100aa:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80100ac:	2301      	movs	r3, #1
 80100ae:	e009      	b.n	80100c4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80100b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d002      	beq.n	80100c2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2240      	movs	r2, #64	@ 0x40
 80100c0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80100c2:	2300      	movs	r3, #0

}
 80100c4:	4618      	mov	r0, r3
 80100c6:	3714      	adds	r7, #20
 80100c8:	46bd      	mov	sp, r7
 80100ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ce:	4770      	bx	lr
 80100d0:	24000050 	.word	0x24000050
 80100d4:	10624dd3 	.word	0x10624dd3

080100d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80100d8:	b480      	push	{r7}
 80100da:	b085      	sub	sp, #20
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80100e0:	4b11      	ldr	r3, [pc, #68]	@ (8010128 <SDMMC_GetCmdError+0x50>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	4a11      	ldr	r2, [pc, #68]	@ (801012c <SDMMC_GetCmdError+0x54>)
 80100e6:	fba2 2303 	umull	r2, r3, r2, r3
 80100ea:	0a5b      	lsrs	r3, r3, #9
 80100ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80100f0:	fb02 f303 	mul.w	r3, r2, r3
 80100f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	1e5a      	subs	r2, r3, #1
 80100fa:	60fa      	str	r2, [r7, #12]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d102      	bne.n	8010106 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010100:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010104:	e009      	b.n	801011a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801010a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801010e:	2b00      	cmp	r3, #0
 8010110:	d0f1      	beq.n	80100f6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	4a06      	ldr	r2, [pc, #24]	@ (8010130 <SDMMC_GetCmdError+0x58>)
 8010116:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8010118:	2300      	movs	r3, #0
}
 801011a:	4618      	mov	r0, r3
 801011c:	3714      	adds	r7, #20
 801011e:	46bd      	mov	sp, r7
 8010120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010124:	4770      	bx	lr
 8010126:	bf00      	nop
 8010128:	24000050 	.word	0x24000050
 801012c:	10624dd3 	.word	0x10624dd3
 8010130:	002000c5 	.word	0x002000c5

08010134 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010138:	4904      	ldr	r1, [pc, #16]	@ (801014c <MX_FATFS_Init+0x18>)
 801013a:	4805      	ldr	r0, [pc, #20]	@ (8010150 <MX_FATFS_Init+0x1c>)
 801013c:	f002 fccc 	bl	8012ad8 <FATFS_LinkDriver>
 8010140:	4603      	mov	r3, r0
 8010142:	461a      	mov	r2, r3
 8010144:	4b03      	ldr	r3, [pc, #12]	@ (8010154 <MX_FATFS_Init+0x20>)
 8010146:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010148:	bf00      	nop
 801014a:	bd80      	pop	{r7, pc}
 801014c:	24000508 	.word	0x24000508
 8010150:	08014814 	.word	0x08014814
 8010154:	24000504 	.word	0x24000504

08010158 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010158:	b480      	push	{r7}
 801015a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801015c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801015e:	4618      	mov	r0, r3
 8010160:	46bd      	mov	sp, r7
 8010162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010166:	4770      	bx	lr

08010168 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b086      	sub	sp, #24
 801016c:	af00      	add	r7, sp, #0
 801016e:	60f8      	str	r0, [r7, #12]
 8010170:	60b9      	str	r1, [r7, #8]
 8010172:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010174:	2300      	movs	r3, #0
 8010176:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	68ba      	ldr	r2, [r7, #8]
 801017c:	68f9      	ldr	r1, [r7, #12]
 801017e:	4806      	ldr	r0, [pc, #24]	@ (8010198 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010180:	f7fc fc16 	bl	800c9b0 <HAL_SD_ReadBlocks_DMA>
 8010184:	4603      	mov	r3, r0
 8010186:	2b00      	cmp	r3, #0
 8010188:	d001      	beq.n	801018e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801018a:	2301      	movs	r3, #1
 801018c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801018e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010190:	4618      	mov	r0, r3
 8010192:	3718      	adds	r7, #24
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}
 8010198:	2400039c 	.word	0x2400039c

0801019c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b086      	sub	sp, #24
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	60f8      	str	r0, [r7, #12]
 80101a4:	60b9      	str	r1, [r7, #8]
 80101a6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80101a8:	2300      	movs	r3, #0
 80101aa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	68ba      	ldr	r2, [r7, #8]
 80101b0:	68f9      	ldr	r1, [r7, #12]
 80101b2:	4806      	ldr	r0, [pc, #24]	@ (80101cc <BSP_SD_WriteBlocks_DMA+0x30>)
 80101b4:	f7fc fca4 	bl	800cb00 <HAL_SD_WriteBlocks_DMA>
 80101b8:	4603      	mov	r3, r0
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d001      	beq.n	80101c2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80101be:	2301      	movs	r3, #1
 80101c0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80101c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3718      	adds	r7, #24
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	2400039c 	.word	0x2400039c

080101d0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80101d4:	4805      	ldr	r0, [pc, #20]	@ (80101ec <BSP_SD_GetCardState+0x1c>)
 80101d6:	f7fd fa9d 	bl	800d714 <HAL_SD_GetCardState>
 80101da:	4603      	mov	r3, r0
 80101dc:	2b04      	cmp	r3, #4
 80101de:	bf14      	ite	ne
 80101e0:	2301      	movne	r3, #1
 80101e2:	2300      	moveq	r3, #0
 80101e4:	b2db      	uxtb	r3, r3
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	bd80      	pop	{r7, pc}
 80101ea:	bf00      	nop
 80101ec:	2400039c 	.word	0x2400039c

080101f0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b082      	sub	sp, #8
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80101f8:	6879      	ldr	r1, [r7, #4]
 80101fa:	4803      	ldr	r0, [pc, #12]	@ (8010208 <BSP_SD_GetCardInfo+0x18>)
 80101fc:	f7fd f94c 	bl	800d498 <HAL_SD_GetCardInfo>
}
 8010200:	bf00      	nop
 8010202:	3708      	adds	r7, #8
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}
 8010208:	2400039c 	.word	0x2400039c

0801020c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b082      	sub	sp, #8
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010214:	f000 fad8 	bl	80107c8 <BSP_SD_WriteCpltCallback>
}
 8010218:	bf00      	nop
 801021a:	3708      	adds	r7, #8
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010228:	f000 fada 	bl	80107e0 <BSP_SD_ReadCpltCallback>
}
 801022c:	bf00      	nop
 801022e:	3708      	adds	r7, #8
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}

08010234 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b084      	sub	sp, #16
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801023c:	f7f6 fd08 	bl	8006c50 <HAL_GetTick>
 8010240:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010242:	e006      	b.n	8010252 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010244:	f7ff ffc4 	bl	80101d0 <BSP_SD_GetCardState>
 8010248:	4603      	mov	r3, r0
 801024a:	2b00      	cmp	r3, #0
 801024c:	d101      	bne.n	8010252 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801024e:	2300      	movs	r3, #0
 8010250:	e009      	b.n	8010266 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010252:	f7f6 fcfd 	bl	8006c50 <HAL_GetTick>
 8010256:	4602      	mov	r2, r0
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	1ad3      	subs	r3, r2, r3
 801025c:	687a      	ldr	r2, [r7, #4]
 801025e:	429a      	cmp	r2, r3
 8010260:	d8f0      	bhi.n	8010244 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010262:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010266:	4618      	mov	r0, r3
 8010268:	3710      	adds	r7, #16
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}
	...

08010270 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b082      	sub	sp, #8
 8010274:	af00      	add	r7, sp, #0
 8010276:	4603      	mov	r3, r0
 8010278:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801027a:	4b0b      	ldr	r3, [pc, #44]	@ (80102a8 <SD_CheckStatus+0x38>)
 801027c:	2201      	movs	r2, #1
 801027e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010280:	f7ff ffa6 	bl	80101d0 <BSP_SD_GetCardState>
 8010284:	4603      	mov	r3, r0
 8010286:	2b00      	cmp	r3, #0
 8010288:	d107      	bne.n	801029a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801028a:	4b07      	ldr	r3, [pc, #28]	@ (80102a8 <SD_CheckStatus+0x38>)
 801028c:	781b      	ldrb	r3, [r3, #0]
 801028e:	b2db      	uxtb	r3, r3
 8010290:	f023 0301 	bic.w	r3, r3, #1
 8010294:	b2da      	uxtb	r2, r3
 8010296:	4b04      	ldr	r3, [pc, #16]	@ (80102a8 <SD_CheckStatus+0x38>)
 8010298:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801029a:	4b03      	ldr	r3, [pc, #12]	@ (80102a8 <SD_CheckStatus+0x38>)
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	b2db      	uxtb	r3, r3
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	3708      	adds	r7, #8
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}
 80102a8:	2400005d 	.word	0x2400005d

080102ac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b082      	sub	sp, #8
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	4603      	mov	r3, r0
 80102b4:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 80102b6:	79fb      	ldrb	r3, [r7, #7]
 80102b8:	4618      	mov	r0, r3
 80102ba:	f7ff ffd9 	bl	8010270 <SD_CheckStatus>
 80102be:	4603      	mov	r3, r0
 80102c0:	461a      	mov	r2, r3
 80102c2:	4b04      	ldr	r3, [pc, #16]	@ (80102d4 <SD_initialize+0x28>)
 80102c4:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 80102c6:	4b03      	ldr	r3, [pc, #12]	@ (80102d4 <SD_initialize+0x28>)
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	b2db      	uxtb	r3, r3
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3708      	adds	r7, #8
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}
 80102d4:	2400005d 	.word	0x2400005d

080102d8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
 80102de:	4603      	mov	r3, r0
 80102e0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80102e2:	79fb      	ldrb	r3, [r7, #7]
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7ff ffc3 	bl	8010270 <SD_CheckStatus>
 80102ea:	4603      	mov	r3, r0
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3708      	adds	r7, #8
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b090      	sub	sp, #64	@ 0x40
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	60b9      	str	r1, [r7, #8]
 80102fc:	607a      	str	r2, [r7, #4]
 80102fe:	603b      	str	r3, [r7, #0]
 8010300:	4603      	mov	r3, r0
 8010302:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010304:	2301      	movs	r3, #1
 8010306:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801030a:	f247 5030 	movw	r0, #30000	@ 0x7530
 801030e:	f7ff ff91 	bl	8010234 <SD_CheckStatusWithTimeout>
 8010312:	4603      	mov	r3, r0
 8010314:	2b00      	cmp	r3, #0
 8010316:	da02      	bge.n	801031e <SD_read+0x2a>
  {
    return res;
 8010318:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801031c:	e0ea      	b.n	80104f4 <SD_read+0x200>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	f003 0303 	and.w	r3, r3, #3
 8010324:	2b00      	cmp	r3, #0
 8010326:	d16d      	bne.n	8010404 <SD_read+0x110>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010328:	683a      	ldr	r2, [r7, #0]
 801032a:	6879      	ldr	r1, [r7, #4]
 801032c:	68b8      	ldr	r0, [r7, #8]
 801032e:	f7ff ff1b 	bl	8010168 <BSP_SD_ReadBlocks_DMA>
 8010332:	4603      	mov	r3, r0
 8010334:	2b00      	cmp	r3, #0
 8010336:	f040 80db 	bne.w	80104f0 <SD_read+0x1fc>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801033a:	4b70      	ldr	r3, [pc, #448]	@ (80104fc <SD_read+0x208>)
 801033c:	2200      	movs	r2, #0
 801033e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010340:	f7f6 fc86 	bl	8006c50 <HAL_GetTick>
 8010344:	6378      	str	r0, [r7, #52]	@ 0x34
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010346:	bf00      	nop
 8010348:	4b6c      	ldr	r3, [pc, #432]	@ (80104fc <SD_read+0x208>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d108      	bne.n	8010362 <SD_read+0x6e>
 8010350:	f7f6 fc7e 	bl	8006c50 <HAL_GetTick>
 8010354:	4602      	mov	r2, r0
 8010356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010358:	1ad3      	subs	r3, r2, r3
 801035a:	f247 522f 	movw	r2, #29999	@ 0x752f
 801035e:	4293      	cmp	r3, r2
 8010360:	d9f2      	bls.n	8010348 <SD_read+0x54>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8010362:	4b66      	ldr	r3, [pc, #408]	@ (80104fc <SD_read+0x208>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d103      	bne.n	8010372 <SD_read+0x7e>
      {
        res = RES_ERROR;
 801036a:	2301      	movs	r3, #1
 801036c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8010370:	e0be      	b.n	80104f0 <SD_read+0x1fc>
      }
      else
      {
        ReadStatus = 0;
 8010372:	4b62      	ldr	r3, [pc, #392]	@ (80104fc <SD_read+0x208>)
 8010374:	2200      	movs	r2, #0
 8010376:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010378:	f7f6 fc6a 	bl	8006c50 <HAL_GetTick>
 801037c:	6378      	str	r0, [r7, #52]	@ 0x34

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801037e:	e037      	b.n	80103f0 <SD_read+0xfc>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010380:	f7ff ff26 	bl	80101d0 <BSP_SD_GetCardState>
 8010384:	4603      	mov	r3, r0
 8010386:	2b00      	cmp	r3, #0
 8010388:	d132      	bne.n	80103f0 <SD_read+0xfc>
          {
            res = RES_OK;
 801038a:	2300      	movs	r3, #0
 801038c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
            /*
            the SCB_InvalidateDCache_by_Addr() requires a 32-Byte aligned address,
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	f023 031f 	bic.w	r3, r3, #31
 8010396:	633b      	str	r3, [r7, #48]	@ 0x30
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 8010398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801039a:	683a      	ldr	r2, [r7, #0]
 801039c:	0251      	lsls	r1, r2, #9
 801039e:	68b8      	ldr	r0, [r7, #8]
 80103a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80103a2:	1a82      	subs	r2, r0, r2
 80103a4:	440a      	add	r2, r1
 80103a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80103a8:	62ba      	str	r2, [r7, #40]	@ 0x28
    if ( dsize > 0 ) { 
 80103aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	dd1d      	ble.n	80103ec <SD_read+0xf8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80103b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103b2:	f003 021f 	and.w	r2, r3, #31
 80103b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103b8:	4413      	add	r3, r2
 80103ba:	627b      	str	r3, [r7, #36]	@ 0x24
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80103bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dsb 0xF":::"memory");
 80103c0:	f3bf 8f4f 	dsb	sy
}
 80103c4:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80103c6:	4a4e      	ldr	r2, [pc, #312]	@ (8010500 <SD_read+0x20c>)
 80103c8:	6a3b      	ldr	r3, [r7, #32]
 80103ca:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80103ce:	6a3b      	ldr	r3, [r7, #32]
 80103d0:	3320      	adds	r3, #32
 80103d2:	623b      	str	r3, [r7, #32]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80103d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103d6:	3b20      	subs	r3, #32
 80103d8:	627b      	str	r3, [r7, #36]	@ 0x24
      } while ( op_size > 0 );
 80103da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103dc:	2b00      	cmp	r3, #0
 80103de:	dcf2      	bgt.n	80103c6 <SD_read+0xd2>
  __ASM volatile ("dsb 0xF":::"memory");
 80103e0:	f3bf 8f4f 	dsb	sy
}
 80103e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80103e6:	f3bf 8f6f 	isb	sy
}
 80103ea:	bf00      	nop
}
 80103ec:	bf00      	nop
#endif
            break;
 80103ee:	e07f      	b.n	80104f0 <SD_read+0x1fc>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80103f0:	f7f6 fc2e 	bl	8006c50 <HAL_GetTick>
 80103f4:	4602      	mov	r2, r0
 80103f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103f8:	1ad3      	subs	r3, r2, r3
 80103fa:	f247 522f 	movw	r2, #29999	@ 0x752f
 80103fe:	4293      	cmp	r3, r2
 8010400:	d9be      	bls.n	8010380 <SD_read+0x8c>
 8010402:	e075      	b.n	80104f0 <SD_read+0x1fc>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8010404:	2300      	movs	r3, #0
 8010406:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010408:	e061      	b.n	80104ce <SD_read+0x1da>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	1c5a      	adds	r2, r3, #1
 801040e:	607a      	str	r2, [r7, #4]
 8010410:	2201      	movs	r2, #1
 8010412:	4619      	mov	r1, r3
 8010414:	483b      	ldr	r0, [pc, #236]	@ (8010504 <SD_read+0x210>)
 8010416:	f7ff fea7 	bl	8010168 <BSP_SD_ReadBlocks_DMA>
 801041a:	4603      	mov	r3, r0
 801041c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        if (ret == MSD_OK) {
 8010420:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8010424:	2b00      	cmp	r3, #0
 8010426:	d157      	bne.n	80104d8 <SD_read+0x1e4>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 8010428:	f7f6 fc12 	bl	8006c50 <HAL_GetTick>
 801042c:	6378      	str	r0, [r7, #52]	@ 0x34
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801042e:	bf00      	nop
 8010430:	4b32      	ldr	r3, [pc, #200]	@ (80104fc <SD_read+0x208>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d108      	bne.n	801044a <SD_read+0x156>
 8010438:	f7f6 fc0a 	bl	8006c50 <HAL_GetTick>
 801043c:	4602      	mov	r2, r0
 801043e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010440:	1ad3      	subs	r3, r2, r3
 8010442:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010446:	4293      	cmp	r3, r2
 8010448:	d9f2      	bls.n	8010430 <SD_read+0x13c>
          {
          }
          if (ReadStatus == 0)
 801044a:	4b2c      	ldr	r3, [pc, #176]	@ (80104fc <SD_read+0x208>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d103      	bne.n	801045a <SD_read+0x166>
          {
            res = RES_ERROR;
 8010452:	2301      	movs	r3, #1
 8010454:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 8010458:	e03f      	b.n	80104da <SD_read+0x1e6>
          }
          ReadStatus = 0;
 801045a:	4b28      	ldr	r3, [pc, #160]	@ (80104fc <SD_read+0x208>)
 801045c:	2200      	movs	r2, #0
 801045e:	601a      	str	r2, [r3, #0]
 8010460:	4b28      	ldr	r3, [pc, #160]	@ (8010504 <SD_read+0x210>)
 8010462:	61fb      	str	r3, [r7, #28]
 8010464:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010468:	61bb      	str	r3, [r7, #24]
    if ( dsize > 0 ) { 
 801046a:	69bb      	ldr	r3, [r7, #24]
 801046c:	2b00      	cmp	r3, #0
 801046e:	dd1d      	ble.n	80104ac <SD_read+0x1b8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8010470:	69fb      	ldr	r3, [r7, #28]
 8010472:	f003 021f 	and.w	r2, r3, #31
 8010476:	69bb      	ldr	r3, [r7, #24]
 8010478:	4413      	add	r3, r2
 801047a:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801047c:	69fb      	ldr	r3, [r7, #28]
 801047e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8010480:	f3bf 8f4f 	dsb	sy
}
 8010484:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8010486:	4a1e      	ldr	r2, [pc, #120]	@ (8010500 <SD_read+0x20c>)
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	3320      	adds	r3, #32
 8010492:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	3b20      	subs	r3, #32
 8010498:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
 801049a:	697b      	ldr	r3, [r7, #20]
 801049c:	2b00      	cmp	r3, #0
 801049e:	dcf2      	bgt.n	8010486 <SD_read+0x192>
  __ASM volatile ("dsb 0xF":::"memory");
 80104a0:	f3bf 8f4f 	dsb	sy
}
 80104a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80104a6:	f3bf 8f6f 	isb	sy
}
 80104aa:	bf00      	nop
}
 80104ac:	bf00      	nop
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	4a14      	ldr	r2, [pc, #80]	@ (8010504 <SD_read+0x210>)
 80104b2:	4618      	mov	r0, r3
 80104b4:	4611      	mov	r1, r2
 80104b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80104ba:	461a      	mov	r2, r3
 80104bc:	f003 f91b 	bl	80136f6 <memcpy>
          buff += BLOCKSIZE;
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80104c6:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 80104c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104ca:	3301      	adds	r3, #1
 80104cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80104ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104d0:	683a      	ldr	r2, [r7, #0]
 80104d2:	429a      	cmp	r2, r3
 80104d4:	d899      	bhi.n	801040a <SD_read+0x116>
 80104d6:	e000      	b.n	80104da <SD_read+0x1e6>
        }
        else
        {
          break;
 80104d8:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 80104da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104dc:	683a      	ldr	r2, [r7, #0]
 80104de:	429a      	cmp	r2, r3
 80104e0:	d106      	bne.n	80104f0 <SD_read+0x1fc>
 80104e2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d102      	bne.n	80104f0 <SD_read+0x1fc>
        res = RES_OK;
 80104ea:	2300      	movs	r3, #0
 80104ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
#endif

  return res;
 80104f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3740      	adds	r7, #64	@ 0x40
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}
 80104fc:	24000b84 	.word	0x24000b84
 8010500:	e000ed00 	.word	0xe000ed00
 8010504:	24000980 	.word	0x24000980

08010508 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b090      	sub	sp, #64	@ 0x40
 801050c:	af00      	add	r7, sp, #0
 801050e:	60b9      	str	r1, [r7, #8]
 8010510:	607a      	str	r2, [r7, #4]
 8010512:	603b      	str	r3, [r7, #0]
 8010514:	4603      	mov	r3, r0
 8010516:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010518:	2301      	movs	r3, #1
 801051a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801051e:	4b7b      	ldr	r3, [pc, #492]	@ (801070c <SD_write+0x204>)
 8010520:	2200      	movs	r2, #0
 8010522:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010524:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010528:	f7ff fe84 	bl	8010234 <SD_CheckStatusWithTimeout>
 801052c:	4603      	mov	r3, r0
 801052e:	2b00      	cmp	r3, #0
 8010530:	da02      	bge.n	8010538 <SD_write+0x30>
  {
    return res;
 8010532:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010536:	e0e5      	b.n	8010704 <SD_write+0x1fc>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8010538:	68bb      	ldr	r3, [r7, #8]
 801053a:	f003 0303 	and.w	r3, r3, #3
 801053e:	2b00      	cmp	r3, #0
 8010540:	d16a      	bne.n	8010618 <SD_write+0x110>

    /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	f023 031f 	bic.w	r3, r3, #31
 8010548:	633b      	str	r3, [r7, #48]	@ 0x30
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 801054a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801054c:	683a      	ldr	r2, [r7, #0]
 801054e:	0251      	lsls	r1, r2, #9
 8010550:	68b8      	ldr	r0, [r7, #8]
 8010552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010554:	1a82      	subs	r2, r0, r2
 8010556:	440a      	add	r2, r1
 8010558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801055a:	62ba      	str	r2, [r7, #40]	@ 0x28
    if ( dsize > 0 ) { 
 801055c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801055e:	2b00      	cmp	r3, #0
 8010560:	dd1d      	ble.n	801059e <SD_write+0x96>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8010562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010564:	f003 021f 	and.w	r2, r3, #31
 8010568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801056a:	4413      	add	r3, r2
 801056c:	627b      	str	r3, [r7, #36]	@ 0x24
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801056e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010570:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dsb 0xF":::"memory");
 8010572:	f3bf 8f4f 	dsb	sy
}
 8010576:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8010578:	4a65      	ldr	r2, [pc, #404]	@ (8010710 <SD_write+0x208>)
 801057a:	6a3b      	ldr	r3, [r7, #32]
 801057c:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8010580:	6a3b      	ldr	r3, [r7, #32]
 8010582:	3320      	adds	r3, #32
 8010584:	623b      	str	r3, [r7, #32]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8010586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010588:	3b20      	subs	r3, #32
 801058a:	627b      	str	r3, [r7, #36]	@ 0x24
      } while ( op_size > 0 );
 801058c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801058e:	2b00      	cmp	r3, #0
 8010590:	dcf2      	bgt.n	8010578 <SD_write+0x70>
  __ASM volatile ("dsb 0xF":::"memory");
 8010592:	f3bf 8f4f 	dsb	sy
}
 8010596:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010598:	f3bf 8f6f 	isb	sy
}
 801059c:	bf00      	nop
}
 801059e:	bf00      	nop
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80105a0:	683a      	ldr	r2, [r7, #0]
 80105a2:	6879      	ldr	r1, [r7, #4]
 80105a4:	68b8      	ldr	r0, [r7, #8]
 80105a6:	f7ff fdf9 	bl	801019c <BSP_SD_WriteBlocks_DMA>
 80105aa:	4603      	mov	r3, r0
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	f040 80a7 	bne.w	8010700 <SD_write+0x1f8>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80105b2:	f7f6 fb4d 	bl	8006c50 <HAL_GetTick>
 80105b6:	6378      	str	r0, [r7, #52]	@ 0x34
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80105b8:	bf00      	nop
 80105ba:	4b54      	ldr	r3, [pc, #336]	@ (801070c <SD_write+0x204>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d108      	bne.n	80105d4 <SD_write+0xcc>
 80105c2:	f7f6 fb45 	bl	8006c50 <HAL_GetTick>
 80105c6:	4602      	mov	r2, r0
 80105c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105ca:	1ad3      	subs	r3, r2, r3
 80105cc:	f247 522f 	movw	r2, #29999	@ 0x752f
 80105d0:	4293      	cmp	r3, r2
 80105d2:	d9f2      	bls.n	80105ba <SD_write+0xb2>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80105d4:	4b4d      	ldr	r3, [pc, #308]	@ (801070c <SD_write+0x204>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d103      	bne.n	80105e4 <SD_write+0xdc>
      {
        res = RES_ERROR;
 80105dc:	2301      	movs	r3, #1
 80105de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80105e2:	e08d      	b.n	8010700 <SD_write+0x1f8>
      }
      else
      {
        WriteStatus = 0;
 80105e4:	4b49      	ldr	r3, [pc, #292]	@ (801070c <SD_write+0x204>)
 80105e6:	2200      	movs	r2, #0
 80105e8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80105ea:	f7f6 fb31 	bl	8006c50 <HAL_GetTick>
 80105ee:	6378      	str	r0, [r7, #52]	@ 0x34

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80105f0:	e008      	b.n	8010604 <SD_write+0xfc>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80105f2:	f7ff fded 	bl	80101d0 <BSP_SD_GetCardState>
 80105f6:	4603      	mov	r3, r0
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d103      	bne.n	8010604 <SD_write+0xfc>
          {
            res = RES_OK;
 80105fc:	2300      	movs	r3, #0
 80105fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 8010602:	e07d      	b.n	8010700 <SD_write+0x1f8>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010604:	f7f6 fb24 	bl	8006c50 <HAL_GetTick>
 8010608:	4602      	mov	r2, r0
 801060a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801060c:	1ad3      	subs	r3, r2, r3
 801060e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010612:	4293      	cmp	r3, r2
 8010614:	d9ed      	bls.n	80105f2 <SD_write+0xea>
 8010616:	e073      	b.n	8010700 <SD_write+0x1f8>
 8010618:	4b3e      	ldr	r3, [pc, #248]	@ (8010714 <SD_write+0x20c>)
 801061a:	61fb      	str	r3, [r7, #28]
 801061c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010620:	61bb      	str	r3, [r7, #24]
    if ( dsize > 0 ) { 
 8010622:	69bb      	ldr	r3, [r7, #24]
 8010624:	2b00      	cmp	r3, #0
 8010626:	dd1d      	ble.n	8010664 <SD_write+0x15c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	f003 021f 	and.w	r2, r3, #31
 801062e:	69bb      	ldr	r3, [r7, #24]
 8010630:	4413      	add	r3, r2
 8010632:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8010634:	69fb      	ldr	r3, [r7, #28]
 8010636:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8010638:	f3bf 8f4f 	dsb	sy
}
 801063c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801063e:	4a34      	ldr	r2, [pc, #208]	@ (8010710 <SD_write+0x208>)
 8010640:	693b      	ldr	r3, [r7, #16]
 8010642:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8010646:	693b      	ldr	r3, [r7, #16]
 8010648:	3320      	adds	r3, #32
 801064a:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801064c:	697b      	ldr	r3, [r7, #20]
 801064e:	3b20      	subs	r3, #32
 8010650:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
 8010652:	697b      	ldr	r3, [r7, #20]
 8010654:	2b00      	cmp	r3, #0
 8010656:	dcf2      	bgt.n	801063e <SD_write+0x136>
  __ASM volatile ("dsb 0xF":::"memory");
 8010658:	f3bf 8f4f 	dsb	sy
}
 801065c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801065e:	f3bf 8f6f 	isb	sy
}
 8010662:	bf00      	nop
}
 8010664:	bf00      	nop
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8010666:	2300      	movs	r3, #0
 8010668:	63bb      	str	r3, [r7, #56]	@ 0x38
 801066a:	e036      	b.n	80106da <SD_write+0x1d2>
      {
        WriteStatus = 0;
 801066c:	4b27      	ldr	r3, [pc, #156]	@ (801070c <SD_write+0x204>)
 801066e:	2200      	movs	r2, #0
 8010670:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 8010672:	4a28      	ldr	r2, [pc, #160]	@ (8010714 <SD_write+0x20c>)
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	4610      	mov	r0, r2
 8010678:	4619      	mov	r1, r3
 801067a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801067e:	461a      	mov	r2, r3
 8010680:	f003 f839 	bl	80136f6 <memcpy>
        buff += BLOCKSIZE;
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801068a:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	1c5a      	adds	r2, r3, #1
 8010690:	607a      	str	r2, [r7, #4]
 8010692:	2201      	movs	r2, #1
 8010694:	4619      	mov	r1, r3
 8010696:	481f      	ldr	r0, [pc, #124]	@ (8010714 <SD_write+0x20c>)
 8010698:	f7ff fd80 	bl	801019c <BSP_SD_WriteBlocks_DMA>
 801069c:	4603      	mov	r3, r0
 801069e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        if (ret == MSD_OK) {
 80106a2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d11c      	bne.n	80106e4 <SD_write+0x1dc>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 80106aa:	f7f6 fad1 	bl	8006c50 <HAL_GetTick>
 80106ae:	6378      	str	r0, [r7, #52]	@ 0x34
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80106b0:	bf00      	nop
 80106b2:	4b16      	ldr	r3, [pc, #88]	@ (801070c <SD_write+0x204>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d108      	bne.n	80106cc <SD_write+0x1c4>
 80106ba:	f7f6 fac9 	bl	8006c50 <HAL_GetTick>
 80106be:	4602      	mov	r2, r0
 80106c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106c2:	1ad3      	subs	r3, r2, r3
 80106c4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80106c8:	4293      	cmp	r3, r2
 80106ca:	d9f2      	bls.n	80106b2 <SD_write+0x1aa>
          {
          }
          if (WriteStatus == 0)
 80106cc:	4b0f      	ldr	r3, [pc, #60]	@ (801070c <SD_write+0x204>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d009      	beq.n	80106e8 <SD_write+0x1e0>
      for (i = 0; i < count; i++)
 80106d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106d6:	3301      	adds	r3, #1
 80106d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80106da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106dc:	683a      	ldr	r2, [r7, #0]
 80106de:	429a      	cmp	r2, r3
 80106e0:	d8c4      	bhi.n	801066c <SD_write+0x164>
 80106e2:	e002      	b.n	80106ea <SD_write+0x1e2>
          }

        }
        else
        {
          break;
 80106e4:	bf00      	nop
 80106e6:	e000      	b.n	80106ea <SD_write+0x1e2>
            break;
 80106e8:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 80106ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106ec:	683a      	ldr	r2, [r7, #0]
 80106ee:	429a      	cmp	r2, r3
 80106f0:	d106      	bne.n	8010700 <SD_write+0x1f8>
 80106f2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d102      	bne.n	8010700 <SD_write+0x1f8>
        res = RES_OK;
 80106fa:	2300      	movs	r3, #0
 80106fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
#endif
  return res;
 8010700:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8010704:	4618      	mov	r0, r3
 8010706:	3740      	adds	r7, #64	@ 0x40
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}
 801070c:	24000b80 	.word	0x24000b80
 8010710:	e000ed00 	.word	0xe000ed00
 8010714:	24000980 	.word	0x24000980

08010718 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b08c      	sub	sp, #48	@ 0x30
 801071c:	af00      	add	r7, sp, #0
 801071e:	4603      	mov	r3, r0
 8010720:	603a      	str	r2, [r7, #0]
 8010722:	71fb      	strb	r3, [r7, #7]
 8010724:	460b      	mov	r3, r1
 8010726:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010728:	2301      	movs	r3, #1
 801072a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801072e:	4b25      	ldr	r3, [pc, #148]	@ (80107c4 <SD_ioctl+0xac>)
 8010730:	781b      	ldrb	r3, [r3, #0]
 8010732:	b2db      	uxtb	r3, r3
 8010734:	f003 0301 	and.w	r3, r3, #1
 8010738:	2b00      	cmp	r3, #0
 801073a:	d001      	beq.n	8010740 <SD_ioctl+0x28>
 801073c:	2303      	movs	r3, #3
 801073e:	e03c      	b.n	80107ba <SD_ioctl+0xa2>

  switch (cmd)
 8010740:	79bb      	ldrb	r3, [r7, #6]
 8010742:	2b03      	cmp	r3, #3
 8010744:	d834      	bhi.n	80107b0 <SD_ioctl+0x98>
 8010746:	a201      	add	r2, pc, #4	@ (adr r2, 801074c <SD_ioctl+0x34>)
 8010748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801074c:	0801075d 	.word	0x0801075d
 8010750:	08010765 	.word	0x08010765
 8010754:	0801077d 	.word	0x0801077d
 8010758:	08010797 	.word	0x08010797
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801075c:	2300      	movs	r3, #0
 801075e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010762:	e028      	b.n	80107b6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010764:	f107 0308 	add.w	r3, r7, #8
 8010768:	4618      	mov	r0, r3
 801076a:	f7ff fd41 	bl	80101f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801076e:	6a3a      	ldr	r2, [r7, #32]
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010774:	2300      	movs	r3, #0
 8010776:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801077a:	e01c      	b.n	80107b6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801077c:	f107 0308 	add.w	r3, r7, #8
 8010780:	4618      	mov	r0, r3
 8010782:	f7ff fd35 	bl	80101f0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010788:	b29a      	uxth	r2, r3
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801078e:	2300      	movs	r3, #0
 8010790:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010794:	e00f      	b.n	80107b6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010796:	f107 0308 	add.w	r3, r7, #8
 801079a:	4618      	mov	r0, r3
 801079c:	f7ff fd28 	bl	80101f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80107a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a2:	0a5a      	lsrs	r2, r3, #9
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80107a8:	2300      	movs	r3, #0
 80107aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80107ae:	e002      	b.n	80107b6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80107b0:	2304      	movs	r3, #4
 80107b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80107b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3730      	adds	r7, #48	@ 0x30
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}
 80107c2:	bf00      	nop
 80107c4:	2400005d 	.word	0x2400005d

080107c8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80107c8:	b480      	push	{r7}
 80107ca:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80107cc:	4b03      	ldr	r3, [pc, #12]	@ (80107dc <BSP_SD_WriteCpltCallback+0x14>)
 80107ce:	2201      	movs	r2, #1
 80107d0:	601a      	str	r2, [r3, #0]
}
 80107d2:	bf00      	nop
 80107d4:	46bd      	mov	sp, r7
 80107d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107da:	4770      	bx	lr
 80107dc:	24000b80 	.word	0x24000b80

080107e0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80107e0:	b480      	push	{r7}
 80107e2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80107e4:	4b03      	ldr	r3, [pc, #12]	@ (80107f4 <BSP_SD_ReadCpltCallback+0x14>)
 80107e6:	2201      	movs	r2, #1
 80107e8:	601a      	str	r2, [r3, #0]
}
 80107ea:	bf00      	nop
 80107ec:	46bd      	mov	sp, r7
 80107ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f2:	4770      	bx	lr
 80107f4:	24000b84 	.word	0x24000b84

080107f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b084      	sub	sp, #16
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	4603      	mov	r3, r0
 8010800:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010802:	79fb      	ldrb	r3, [r7, #7]
 8010804:	4a08      	ldr	r2, [pc, #32]	@ (8010828 <disk_status+0x30>)
 8010806:	009b      	lsls	r3, r3, #2
 8010808:	4413      	add	r3, r2
 801080a:	685b      	ldr	r3, [r3, #4]
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	79fa      	ldrb	r2, [r7, #7]
 8010810:	4905      	ldr	r1, [pc, #20]	@ (8010828 <disk_status+0x30>)
 8010812:	440a      	add	r2, r1
 8010814:	7a12      	ldrb	r2, [r2, #8]
 8010816:	4610      	mov	r0, r2
 8010818:	4798      	blx	r3
 801081a:	4603      	mov	r3, r0
 801081c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801081e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010820:	4618      	mov	r0, r3
 8010822:	3710      	adds	r7, #16
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}
 8010828:	24000bb0 	.word	0x24000bb0

0801082c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b084      	sub	sp, #16
 8010830:	af00      	add	r7, sp, #0
 8010832:	4603      	mov	r3, r0
 8010834:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010836:	2300      	movs	r3, #0
 8010838:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801083a:	79fb      	ldrb	r3, [r7, #7]
 801083c:	4a0e      	ldr	r2, [pc, #56]	@ (8010878 <disk_initialize+0x4c>)
 801083e:	5cd3      	ldrb	r3, [r2, r3]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d114      	bne.n	801086e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010844:	79fb      	ldrb	r3, [r7, #7]
 8010846:	4a0c      	ldr	r2, [pc, #48]	@ (8010878 <disk_initialize+0x4c>)
 8010848:	009b      	lsls	r3, r3, #2
 801084a:	4413      	add	r3, r2
 801084c:	685b      	ldr	r3, [r3, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	79fa      	ldrb	r2, [r7, #7]
 8010852:	4909      	ldr	r1, [pc, #36]	@ (8010878 <disk_initialize+0x4c>)
 8010854:	440a      	add	r2, r1
 8010856:	7a12      	ldrb	r2, [r2, #8]
 8010858:	4610      	mov	r0, r2
 801085a:	4798      	blx	r3
 801085c:	4603      	mov	r3, r0
 801085e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8010860:	7bfb      	ldrb	r3, [r7, #15]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d103      	bne.n	801086e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8010866:	79fb      	ldrb	r3, [r7, #7]
 8010868:	4a03      	ldr	r2, [pc, #12]	@ (8010878 <disk_initialize+0x4c>)
 801086a:	2101      	movs	r1, #1
 801086c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801086e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010870:	4618      	mov	r0, r3
 8010872:	3710      	adds	r7, #16
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}
 8010878:	24000bb0 	.word	0x24000bb0

0801087c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801087c:	b590      	push	{r4, r7, lr}
 801087e:	b087      	sub	sp, #28
 8010880:	af00      	add	r7, sp, #0
 8010882:	60b9      	str	r1, [r7, #8]
 8010884:	607a      	str	r2, [r7, #4]
 8010886:	603b      	str	r3, [r7, #0]
 8010888:	4603      	mov	r3, r0
 801088a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801088c:	7bfb      	ldrb	r3, [r7, #15]
 801088e:	4a0a      	ldr	r2, [pc, #40]	@ (80108b8 <disk_read+0x3c>)
 8010890:	009b      	lsls	r3, r3, #2
 8010892:	4413      	add	r3, r2
 8010894:	685b      	ldr	r3, [r3, #4]
 8010896:	689c      	ldr	r4, [r3, #8]
 8010898:	7bfb      	ldrb	r3, [r7, #15]
 801089a:	4a07      	ldr	r2, [pc, #28]	@ (80108b8 <disk_read+0x3c>)
 801089c:	4413      	add	r3, r2
 801089e:	7a18      	ldrb	r0, [r3, #8]
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	687a      	ldr	r2, [r7, #4]
 80108a4:	68b9      	ldr	r1, [r7, #8]
 80108a6:	47a0      	blx	r4
 80108a8:	4603      	mov	r3, r0
 80108aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80108ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	371c      	adds	r7, #28
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd90      	pop	{r4, r7, pc}
 80108b6:	bf00      	nop
 80108b8:	24000bb0 	.word	0x24000bb0

080108bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80108bc:	b590      	push	{r4, r7, lr}
 80108be:	b087      	sub	sp, #28
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	60b9      	str	r1, [r7, #8]
 80108c4:	607a      	str	r2, [r7, #4]
 80108c6:	603b      	str	r3, [r7, #0]
 80108c8:	4603      	mov	r3, r0
 80108ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80108cc:	7bfb      	ldrb	r3, [r7, #15]
 80108ce:	4a0a      	ldr	r2, [pc, #40]	@ (80108f8 <disk_write+0x3c>)
 80108d0:	009b      	lsls	r3, r3, #2
 80108d2:	4413      	add	r3, r2
 80108d4:	685b      	ldr	r3, [r3, #4]
 80108d6:	68dc      	ldr	r4, [r3, #12]
 80108d8:	7bfb      	ldrb	r3, [r7, #15]
 80108da:	4a07      	ldr	r2, [pc, #28]	@ (80108f8 <disk_write+0x3c>)
 80108dc:	4413      	add	r3, r2
 80108de:	7a18      	ldrb	r0, [r3, #8]
 80108e0:	683b      	ldr	r3, [r7, #0]
 80108e2:	687a      	ldr	r2, [r7, #4]
 80108e4:	68b9      	ldr	r1, [r7, #8]
 80108e6:	47a0      	blx	r4
 80108e8:	4603      	mov	r3, r0
 80108ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80108ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	371c      	adds	r7, #28
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd90      	pop	{r4, r7, pc}
 80108f6:	bf00      	nop
 80108f8:	24000bb0 	.word	0x24000bb0

080108fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b084      	sub	sp, #16
 8010900:	af00      	add	r7, sp, #0
 8010902:	4603      	mov	r3, r0
 8010904:	603a      	str	r2, [r7, #0]
 8010906:	71fb      	strb	r3, [r7, #7]
 8010908:	460b      	mov	r3, r1
 801090a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801090c:	79fb      	ldrb	r3, [r7, #7]
 801090e:	4a09      	ldr	r2, [pc, #36]	@ (8010934 <disk_ioctl+0x38>)
 8010910:	009b      	lsls	r3, r3, #2
 8010912:	4413      	add	r3, r2
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	691b      	ldr	r3, [r3, #16]
 8010918:	79fa      	ldrb	r2, [r7, #7]
 801091a:	4906      	ldr	r1, [pc, #24]	@ (8010934 <disk_ioctl+0x38>)
 801091c:	440a      	add	r2, r1
 801091e:	7a10      	ldrb	r0, [r2, #8]
 8010920:	79b9      	ldrb	r1, [r7, #6]
 8010922:	683a      	ldr	r2, [r7, #0]
 8010924:	4798      	blx	r3
 8010926:	4603      	mov	r3, r0
 8010928:	73fb      	strb	r3, [r7, #15]
  return res;
 801092a:	7bfb      	ldrb	r3, [r7, #15]
}
 801092c:	4618      	mov	r0, r3
 801092e:	3710      	adds	r7, #16
 8010930:	46bd      	mov	sp, r7
 8010932:	bd80      	pop	{r7, pc}
 8010934:	24000bb0 	.word	0x24000bb0

08010938 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010938:	b480      	push	{r7}
 801093a:	b085      	sub	sp, #20
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	3301      	adds	r3, #1
 8010944:	781b      	ldrb	r3, [r3, #0]
 8010946:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010948:	89fb      	ldrh	r3, [r7, #14]
 801094a:	021b      	lsls	r3, r3, #8
 801094c:	b21a      	sxth	r2, r3
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	781b      	ldrb	r3, [r3, #0]
 8010952:	b21b      	sxth	r3, r3
 8010954:	4313      	orrs	r3, r2
 8010956:	b21b      	sxth	r3, r3
 8010958:	81fb      	strh	r3, [r7, #14]
	return rv;
 801095a:	89fb      	ldrh	r3, [r7, #14]
}
 801095c:	4618      	mov	r0, r3
 801095e:	3714      	adds	r7, #20
 8010960:	46bd      	mov	sp, r7
 8010962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010966:	4770      	bx	lr

08010968 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010968:	b480      	push	{r7}
 801096a:	b085      	sub	sp, #20
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	3303      	adds	r3, #3
 8010974:	781b      	ldrb	r3, [r3, #0]
 8010976:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	021b      	lsls	r3, r3, #8
 801097c:	687a      	ldr	r2, [r7, #4]
 801097e:	3202      	adds	r2, #2
 8010980:	7812      	ldrb	r2, [r2, #0]
 8010982:	4313      	orrs	r3, r2
 8010984:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	021b      	lsls	r3, r3, #8
 801098a:	687a      	ldr	r2, [r7, #4]
 801098c:	3201      	adds	r2, #1
 801098e:	7812      	ldrb	r2, [r2, #0]
 8010990:	4313      	orrs	r3, r2
 8010992:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	021b      	lsls	r3, r3, #8
 8010998:	687a      	ldr	r2, [r7, #4]
 801099a:	7812      	ldrb	r2, [r2, #0]
 801099c:	4313      	orrs	r3, r2
 801099e:	60fb      	str	r3, [r7, #12]
	return rv;
 80109a0:	68fb      	ldr	r3, [r7, #12]
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	3714      	adds	r7, #20
 80109a6:	46bd      	mov	sp, r7
 80109a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ac:	4770      	bx	lr

080109ae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80109ae:	b480      	push	{r7}
 80109b0:	b083      	sub	sp, #12
 80109b2:	af00      	add	r7, sp, #0
 80109b4:	6078      	str	r0, [r7, #4]
 80109b6:	460b      	mov	r3, r1
 80109b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	1c5a      	adds	r2, r3, #1
 80109be:	607a      	str	r2, [r7, #4]
 80109c0:	887a      	ldrh	r2, [r7, #2]
 80109c2:	b2d2      	uxtb	r2, r2
 80109c4:	701a      	strb	r2, [r3, #0]
 80109c6:	887b      	ldrh	r3, [r7, #2]
 80109c8:	0a1b      	lsrs	r3, r3, #8
 80109ca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	1c5a      	adds	r2, r3, #1
 80109d0:	607a      	str	r2, [r7, #4]
 80109d2:	887a      	ldrh	r2, [r7, #2]
 80109d4:	b2d2      	uxtb	r2, r2
 80109d6:	701a      	strb	r2, [r3, #0]
}
 80109d8:	bf00      	nop
 80109da:	370c      	adds	r7, #12
 80109dc:	46bd      	mov	sp, r7
 80109de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e2:	4770      	bx	lr

080109e4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80109e4:	b480      	push	{r7}
 80109e6:	b083      	sub	sp, #12
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
 80109ec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	1c5a      	adds	r2, r3, #1
 80109f2:	607a      	str	r2, [r7, #4]
 80109f4:	683a      	ldr	r2, [r7, #0]
 80109f6:	b2d2      	uxtb	r2, r2
 80109f8:	701a      	strb	r2, [r3, #0]
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	0a1b      	lsrs	r3, r3, #8
 80109fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	1c5a      	adds	r2, r3, #1
 8010a04:	607a      	str	r2, [r7, #4]
 8010a06:	683a      	ldr	r2, [r7, #0]
 8010a08:	b2d2      	uxtb	r2, r2
 8010a0a:	701a      	strb	r2, [r3, #0]
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	0a1b      	lsrs	r3, r3, #8
 8010a10:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	1c5a      	adds	r2, r3, #1
 8010a16:	607a      	str	r2, [r7, #4]
 8010a18:	683a      	ldr	r2, [r7, #0]
 8010a1a:	b2d2      	uxtb	r2, r2
 8010a1c:	701a      	strb	r2, [r3, #0]
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	0a1b      	lsrs	r3, r3, #8
 8010a22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	1c5a      	adds	r2, r3, #1
 8010a28:	607a      	str	r2, [r7, #4]
 8010a2a:	683a      	ldr	r2, [r7, #0]
 8010a2c:	b2d2      	uxtb	r2, r2
 8010a2e:	701a      	strb	r2, [r3, #0]
}
 8010a30:	bf00      	nop
 8010a32:	370c      	adds	r7, #12
 8010a34:	46bd      	mov	sp, r7
 8010a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3a:	4770      	bx	lr

08010a3c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010a3c:	b480      	push	{r7}
 8010a3e:	b087      	sub	sp, #28
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	60f8      	str	r0, [r7, #12]
 8010a44:	60b9      	str	r1, [r7, #8]
 8010a46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d00d      	beq.n	8010a72 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010a56:	693a      	ldr	r2, [r7, #16]
 8010a58:	1c53      	adds	r3, r2, #1
 8010a5a:	613b      	str	r3, [r7, #16]
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	1c59      	adds	r1, r3, #1
 8010a60:	6179      	str	r1, [r7, #20]
 8010a62:	7812      	ldrb	r2, [r2, #0]
 8010a64:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	3b01      	subs	r3, #1
 8010a6a:	607b      	str	r3, [r7, #4]
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d1f1      	bne.n	8010a56 <mem_cpy+0x1a>
	}
}
 8010a72:	bf00      	nop
 8010a74:	371c      	adds	r7, #28
 8010a76:	46bd      	mov	sp, r7
 8010a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7c:	4770      	bx	lr

08010a7e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010a7e:	b480      	push	{r7}
 8010a80:	b087      	sub	sp, #28
 8010a82:	af00      	add	r7, sp, #0
 8010a84:	60f8      	str	r0, [r7, #12]
 8010a86:	60b9      	str	r1, [r7, #8]
 8010a88:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010a8e:	697b      	ldr	r3, [r7, #20]
 8010a90:	1c5a      	adds	r2, r3, #1
 8010a92:	617a      	str	r2, [r7, #20]
 8010a94:	68ba      	ldr	r2, [r7, #8]
 8010a96:	b2d2      	uxtb	r2, r2
 8010a98:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	3b01      	subs	r3, #1
 8010a9e:	607b      	str	r3, [r7, #4]
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d1f3      	bne.n	8010a8e <mem_set+0x10>
}
 8010aa6:	bf00      	nop
 8010aa8:	bf00      	nop
 8010aaa:	371c      	adds	r7, #28
 8010aac:	46bd      	mov	sp, r7
 8010aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab2:	4770      	bx	lr

08010ab4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010ab4:	b480      	push	{r7}
 8010ab6:	b089      	sub	sp, #36	@ 0x24
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	60f8      	str	r0, [r7, #12]
 8010abc:	60b9      	str	r1, [r7, #8]
 8010abe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	61fb      	str	r3, [r7, #28]
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010ac8:	2300      	movs	r3, #0
 8010aca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010acc:	69fb      	ldr	r3, [r7, #28]
 8010ace:	1c5a      	adds	r2, r3, #1
 8010ad0:	61fa      	str	r2, [r7, #28]
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	4619      	mov	r1, r3
 8010ad6:	69bb      	ldr	r3, [r7, #24]
 8010ad8:	1c5a      	adds	r2, r3, #1
 8010ada:	61ba      	str	r2, [r7, #24]
 8010adc:	781b      	ldrb	r3, [r3, #0]
 8010ade:	1acb      	subs	r3, r1, r3
 8010ae0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	3b01      	subs	r3, #1
 8010ae6:	607b      	str	r3, [r7, #4]
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d002      	beq.n	8010af4 <mem_cmp+0x40>
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d0eb      	beq.n	8010acc <mem_cmp+0x18>

	return r;
 8010af4:	697b      	ldr	r3, [r7, #20]
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3724      	adds	r7, #36	@ 0x24
 8010afa:	46bd      	mov	sp, r7
 8010afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b00:	4770      	bx	lr

08010b02 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010b02:	b480      	push	{r7}
 8010b04:	b083      	sub	sp, #12
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	6078      	str	r0, [r7, #4]
 8010b0a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010b0c:	e002      	b.n	8010b14 <chk_chr+0x12>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	3301      	adds	r3, #1
 8010b12:	607b      	str	r3, [r7, #4]
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	781b      	ldrb	r3, [r3, #0]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d005      	beq.n	8010b28 <chk_chr+0x26>
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	781b      	ldrb	r3, [r3, #0]
 8010b20:	461a      	mov	r2, r3
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	4293      	cmp	r3, r2
 8010b26:	d1f2      	bne.n	8010b0e <chk_chr+0xc>
	return *str;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	781b      	ldrb	r3, [r3, #0]
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	370c      	adds	r7, #12
 8010b30:	46bd      	mov	sp, r7
 8010b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b36:	4770      	bx	lr

08010b38 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b085      	sub	sp, #20
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010b42:	2300      	movs	r3, #0
 8010b44:	60bb      	str	r3, [r7, #8]
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	60fb      	str	r3, [r7, #12]
 8010b4a:	e029      	b.n	8010ba0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010b4c:	4a27      	ldr	r2, [pc, #156]	@ (8010bec <chk_lock+0xb4>)
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	011b      	lsls	r3, r3, #4
 8010b52:	4413      	add	r3, r2
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d01d      	beq.n	8010b96 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010b5a:	4a24      	ldr	r2, [pc, #144]	@ (8010bec <chk_lock+0xb4>)
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	011b      	lsls	r3, r3, #4
 8010b60:	4413      	add	r3, r2
 8010b62:	681a      	ldr	r2, [r3, #0]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d116      	bne.n	8010b9a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8010bec <chk_lock+0xb4>)
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	011b      	lsls	r3, r3, #4
 8010b72:	4413      	add	r3, r2
 8010b74:	3304      	adds	r3, #4
 8010b76:	681a      	ldr	r2, [r3, #0]
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010b7c:	429a      	cmp	r2, r3
 8010b7e:	d10c      	bne.n	8010b9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010b80:	4a1a      	ldr	r2, [pc, #104]	@ (8010bec <chk_lock+0xb4>)
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	011b      	lsls	r3, r3, #4
 8010b86:	4413      	add	r3, r2
 8010b88:	3308      	adds	r3, #8
 8010b8a:	681a      	ldr	r2, [r3, #0]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d102      	bne.n	8010b9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010b94:	e007      	b.n	8010ba6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010b96:	2301      	movs	r3, #1
 8010b98:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	3301      	adds	r3, #1
 8010b9e:	60fb      	str	r3, [r7, #12]
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	2b01      	cmp	r3, #1
 8010ba4:	d9d2      	bls.n	8010b4c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	2b02      	cmp	r3, #2
 8010baa:	d109      	bne.n	8010bc0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d102      	bne.n	8010bb8 <chk_lock+0x80>
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	2b02      	cmp	r3, #2
 8010bb6:	d101      	bne.n	8010bbc <chk_lock+0x84>
 8010bb8:	2300      	movs	r3, #0
 8010bba:	e010      	b.n	8010bde <chk_lock+0xa6>
 8010bbc:	2312      	movs	r3, #18
 8010bbe:	e00e      	b.n	8010bde <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d108      	bne.n	8010bd8 <chk_lock+0xa0>
 8010bc6:	4a09      	ldr	r2, [pc, #36]	@ (8010bec <chk_lock+0xb4>)
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	011b      	lsls	r3, r3, #4
 8010bcc:	4413      	add	r3, r2
 8010bce:	330c      	adds	r3, #12
 8010bd0:	881b      	ldrh	r3, [r3, #0]
 8010bd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010bd6:	d101      	bne.n	8010bdc <chk_lock+0xa4>
 8010bd8:	2310      	movs	r3, #16
 8010bda:	e000      	b.n	8010bde <chk_lock+0xa6>
 8010bdc:	2300      	movs	r3, #0
}
 8010bde:	4618      	mov	r0, r3
 8010be0:	3714      	adds	r7, #20
 8010be2:	46bd      	mov	sp, r7
 8010be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be8:	4770      	bx	lr
 8010bea:	bf00      	nop
 8010bec:	24000b90 	.word	0x24000b90

08010bf0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	b083      	sub	sp, #12
 8010bf4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	607b      	str	r3, [r7, #4]
 8010bfa:	e002      	b.n	8010c02 <enq_lock+0x12>
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	3301      	adds	r3, #1
 8010c00:	607b      	str	r3, [r7, #4]
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	2b01      	cmp	r3, #1
 8010c06:	d806      	bhi.n	8010c16 <enq_lock+0x26>
 8010c08:	4a09      	ldr	r2, [pc, #36]	@ (8010c30 <enq_lock+0x40>)
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	011b      	lsls	r3, r3, #4
 8010c0e:	4413      	add	r3, r2
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d1f2      	bne.n	8010bfc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	2b02      	cmp	r3, #2
 8010c1a:	bf14      	ite	ne
 8010c1c:	2301      	movne	r3, #1
 8010c1e:	2300      	moveq	r3, #0
 8010c20:	b2db      	uxtb	r3, r3
}
 8010c22:	4618      	mov	r0, r3
 8010c24:	370c      	adds	r7, #12
 8010c26:	46bd      	mov	sp, r7
 8010c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2c:	4770      	bx	lr
 8010c2e:	bf00      	nop
 8010c30:	24000b90 	.word	0x24000b90

08010c34 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010c34:	b480      	push	{r7}
 8010c36:	b085      	sub	sp, #20
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010c3e:	2300      	movs	r3, #0
 8010c40:	60fb      	str	r3, [r7, #12]
 8010c42:	e01f      	b.n	8010c84 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010c44:	4a41      	ldr	r2, [pc, #260]	@ (8010d4c <inc_lock+0x118>)
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	011b      	lsls	r3, r3, #4
 8010c4a:	4413      	add	r3, r2
 8010c4c:	681a      	ldr	r2, [r3, #0]
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d113      	bne.n	8010c7e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010c56:	4a3d      	ldr	r2, [pc, #244]	@ (8010d4c <inc_lock+0x118>)
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	011b      	lsls	r3, r3, #4
 8010c5c:	4413      	add	r3, r2
 8010c5e:	3304      	adds	r3, #4
 8010c60:	681a      	ldr	r2, [r3, #0]
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d109      	bne.n	8010c7e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010c6a:	4a38      	ldr	r2, [pc, #224]	@ (8010d4c <inc_lock+0x118>)
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	011b      	lsls	r3, r3, #4
 8010c70:	4413      	add	r3, r2
 8010c72:	3308      	adds	r3, #8
 8010c74:	681a      	ldr	r2, [r3, #0]
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	d006      	beq.n	8010c8c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	3301      	adds	r3, #1
 8010c82:	60fb      	str	r3, [r7, #12]
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	2b01      	cmp	r3, #1
 8010c88:	d9dc      	bls.n	8010c44 <inc_lock+0x10>
 8010c8a:	e000      	b.n	8010c8e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010c8c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	2b02      	cmp	r3, #2
 8010c92:	d132      	bne.n	8010cfa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010c94:	2300      	movs	r3, #0
 8010c96:	60fb      	str	r3, [r7, #12]
 8010c98:	e002      	b.n	8010ca0 <inc_lock+0x6c>
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	3301      	adds	r3, #1
 8010c9e:	60fb      	str	r3, [r7, #12]
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	2b01      	cmp	r3, #1
 8010ca4:	d806      	bhi.n	8010cb4 <inc_lock+0x80>
 8010ca6:	4a29      	ldr	r2, [pc, #164]	@ (8010d4c <inc_lock+0x118>)
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	011b      	lsls	r3, r3, #4
 8010cac:	4413      	add	r3, r2
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d1f2      	bne.n	8010c9a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	2b02      	cmp	r3, #2
 8010cb8:	d101      	bne.n	8010cbe <inc_lock+0x8a>
 8010cba:	2300      	movs	r3, #0
 8010cbc:	e040      	b.n	8010d40 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681a      	ldr	r2, [r3, #0]
 8010cc2:	4922      	ldr	r1, [pc, #136]	@ (8010d4c <inc_lock+0x118>)
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	011b      	lsls	r3, r3, #4
 8010cc8:	440b      	add	r3, r1
 8010cca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	689a      	ldr	r2, [r3, #8]
 8010cd0:	491e      	ldr	r1, [pc, #120]	@ (8010d4c <inc_lock+0x118>)
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	011b      	lsls	r3, r3, #4
 8010cd6:	440b      	add	r3, r1
 8010cd8:	3304      	adds	r3, #4
 8010cda:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	695a      	ldr	r2, [r3, #20]
 8010ce0:	491a      	ldr	r1, [pc, #104]	@ (8010d4c <inc_lock+0x118>)
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	011b      	lsls	r3, r3, #4
 8010ce6:	440b      	add	r3, r1
 8010ce8:	3308      	adds	r3, #8
 8010cea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010cec:	4a17      	ldr	r2, [pc, #92]	@ (8010d4c <inc_lock+0x118>)
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	011b      	lsls	r3, r3, #4
 8010cf2:	4413      	add	r3, r2
 8010cf4:	330c      	adds	r3, #12
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d009      	beq.n	8010d14 <inc_lock+0xe0>
 8010d00:	4a12      	ldr	r2, [pc, #72]	@ (8010d4c <inc_lock+0x118>)
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	011b      	lsls	r3, r3, #4
 8010d06:	4413      	add	r3, r2
 8010d08:	330c      	adds	r3, #12
 8010d0a:	881b      	ldrh	r3, [r3, #0]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d001      	beq.n	8010d14 <inc_lock+0xe0>
 8010d10:	2300      	movs	r3, #0
 8010d12:	e015      	b.n	8010d40 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d108      	bne.n	8010d2c <inc_lock+0xf8>
 8010d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8010d4c <inc_lock+0x118>)
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	011b      	lsls	r3, r3, #4
 8010d20:	4413      	add	r3, r2
 8010d22:	330c      	adds	r3, #12
 8010d24:	881b      	ldrh	r3, [r3, #0]
 8010d26:	3301      	adds	r3, #1
 8010d28:	b29a      	uxth	r2, r3
 8010d2a:	e001      	b.n	8010d30 <inc_lock+0xfc>
 8010d2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010d30:	4906      	ldr	r1, [pc, #24]	@ (8010d4c <inc_lock+0x118>)
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	011b      	lsls	r3, r3, #4
 8010d36:	440b      	add	r3, r1
 8010d38:	330c      	adds	r3, #12
 8010d3a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	3301      	adds	r3, #1
}
 8010d40:	4618      	mov	r0, r3
 8010d42:	3714      	adds	r7, #20
 8010d44:	46bd      	mov	sp, r7
 8010d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4a:	4770      	bx	lr
 8010d4c:	24000b90 	.word	0x24000b90

08010d50 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010d50:	b480      	push	{r7}
 8010d52:	b085      	sub	sp, #20
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	3b01      	subs	r3, #1
 8010d5c:	607b      	str	r3, [r7, #4]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2b01      	cmp	r3, #1
 8010d62:	d825      	bhi.n	8010db0 <dec_lock+0x60>
		n = Files[i].ctr;
 8010d64:	4a17      	ldr	r2, [pc, #92]	@ (8010dc4 <dec_lock+0x74>)
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	011b      	lsls	r3, r3, #4
 8010d6a:	4413      	add	r3, r2
 8010d6c:	330c      	adds	r3, #12
 8010d6e:	881b      	ldrh	r3, [r3, #0]
 8010d70:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010d72:	89fb      	ldrh	r3, [r7, #14]
 8010d74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010d78:	d101      	bne.n	8010d7e <dec_lock+0x2e>
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010d7e:	89fb      	ldrh	r3, [r7, #14]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d002      	beq.n	8010d8a <dec_lock+0x3a>
 8010d84:	89fb      	ldrh	r3, [r7, #14]
 8010d86:	3b01      	subs	r3, #1
 8010d88:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010d8a:	4a0e      	ldr	r2, [pc, #56]	@ (8010dc4 <dec_lock+0x74>)
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	011b      	lsls	r3, r3, #4
 8010d90:	4413      	add	r3, r2
 8010d92:	330c      	adds	r3, #12
 8010d94:	89fa      	ldrh	r2, [r7, #14]
 8010d96:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010d98:	89fb      	ldrh	r3, [r7, #14]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d105      	bne.n	8010daa <dec_lock+0x5a>
 8010d9e:	4a09      	ldr	r2, [pc, #36]	@ (8010dc4 <dec_lock+0x74>)
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	011b      	lsls	r3, r3, #4
 8010da4:	4413      	add	r3, r2
 8010da6:	2200      	movs	r2, #0
 8010da8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010daa:	2300      	movs	r3, #0
 8010dac:	737b      	strb	r3, [r7, #13]
 8010dae:	e001      	b.n	8010db4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010db0:	2302      	movs	r3, #2
 8010db2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010db4:	7b7b      	ldrb	r3, [r7, #13]
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	3714      	adds	r7, #20
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc0:	4770      	bx	lr
 8010dc2:	bf00      	nop
 8010dc4:	24000b90 	.word	0x24000b90

08010dc8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010dc8:	b480      	push	{r7}
 8010dca:	b085      	sub	sp, #20
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	60fb      	str	r3, [r7, #12]
 8010dd4:	e010      	b.n	8010df8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8010e0c <clear_lock+0x44>)
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	011b      	lsls	r3, r3, #4
 8010ddc:	4413      	add	r3, r2
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	687a      	ldr	r2, [r7, #4]
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d105      	bne.n	8010df2 <clear_lock+0x2a>
 8010de6:	4a09      	ldr	r2, [pc, #36]	@ (8010e0c <clear_lock+0x44>)
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	011b      	lsls	r3, r3, #4
 8010dec:	4413      	add	r3, r2
 8010dee:	2200      	movs	r2, #0
 8010df0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	3301      	adds	r3, #1
 8010df6:	60fb      	str	r3, [r7, #12]
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	2b01      	cmp	r3, #1
 8010dfc:	d9eb      	bls.n	8010dd6 <clear_lock+0xe>
	}
}
 8010dfe:	bf00      	nop
 8010e00:	bf00      	nop
 8010e02:	3714      	adds	r7, #20
 8010e04:	46bd      	mov	sp, r7
 8010e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0a:	4770      	bx	lr
 8010e0c:	24000b90 	.word	0x24000b90

08010e10 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b086      	sub	sp, #24
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010e18:	2300      	movs	r3, #0
 8010e1a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	78db      	ldrb	r3, [r3, #3]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d034      	beq.n	8010e8e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e28:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	7858      	ldrb	r0, [r3, #1]
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010e34:	2301      	movs	r3, #1
 8010e36:	697a      	ldr	r2, [r7, #20]
 8010e38:	f7ff fd40 	bl	80108bc <disk_write>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d002      	beq.n	8010e48 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010e42:	2301      	movs	r3, #1
 8010e44:	73fb      	strb	r3, [r7, #15]
 8010e46:	e022      	b.n	8010e8e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6a1b      	ldr	r3, [r3, #32]
 8010e52:	697a      	ldr	r2, [r7, #20]
 8010e54:	1ad2      	subs	r2, r2, r3
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	699b      	ldr	r3, [r3, #24]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d217      	bcs.n	8010e8e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	789b      	ldrb	r3, [r3, #2]
 8010e62:	613b      	str	r3, [r7, #16]
 8010e64:	e010      	b.n	8010e88 <sync_window+0x78>
					wsect += fs->fsize;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	699b      	ldr	r3, [r3, #24]
 8010e6a:	697a      	ldr	r2, [r7, #20]
 8010e6c:	4413      	add	r3, r2
 8010e6e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	7858      	ldrb	r0, [r3, #1]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	697a      	ldr	r2, [r7, #20]
 8010e7e:	f7ff fd1d 	bl	80108bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010e82:	693b      	ldr	r3, [r7, #16]
 8010e84:	3b01      	subs	r3, #1
 8010e86:	613b      	str	r3, [r7, #16]
 8010e88:	693b      	ldr	r3, [r7, #16]
 8010e8a:	2b01      	cmp	r3, #1
 8010e8c:	d8eb      	bhi.n	8010e66 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e90:	4618      	mov	r0, r3
 8010e92:	3718      	adds	r7, #24
 8010e94:	46bd      	mov	sp, r7
 8010e96:	bd80      	pop	{r7, pc}

08010e98 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b084      	sub	sp, #16
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
 8010ea0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010eaa:	683a      	ldr	r2, [r7, #0]
 8010eac:	429a      	cmp	r2, r3
 8010eae:	d01b      	beq.n	8010ee8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010eb0:	6878      	ldr	r0, [r7, #4]
 8010eb2:	f7ff ffad 	bl	8010e10 <sync_window>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010eba:	7bfb      	ldrb	r3, [r7, #15]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d113      	bne.n	8010ee8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	7858      	ldrb	r0, [r3, #1]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010eca:	2301      	movs	r3, #1
 8010ecc:	683a      	ldr	r2, [r7, #0]
 8010ece:	f7ff fcd5 	bl	801087c <disk_read>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d004      	beq.n	8010ee2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8010edc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010ede:	2301      	movs	r3, #1
 8010ee0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	683a      	ldr	r2, [r7, #0]
 8010ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8010ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3710      	adds	r7, #16
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
	...

08010ef4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b084      	sub	sp, #16
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f7ff ff87 	bl	8010e10 <sync_window>
 8010f02:	4603      	mov	r3, r0
 8010f04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010f06:	7bfb      	ldrb	r3, [r7, #15]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d158      	bne.n	8010fbe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	781b      	ldrb	r3, [r3, #0]
 8010f10:	2b03      	cmp	r3, #3
 8010f12:	d148      	bne.n	8010fa6 <sync_fs+0xb2>
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	791b      	ldrb	r3, [r3, #4]
 8010f18:	2b01      	cmp	r3, #1
 8010f1a:	d144      	bne.n	8010fa6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	3330      	adds	r3, #48	@ 0x30
 8010f20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f24:	2100      	movs	r1, #0
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7ff fda9 	bl	8010a7e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	3330      	adds	r3, #48	@ 0x30
 8010f30:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010f34:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f7ff fd38 	bl	80109ae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	3330      	adds	r3, #48	@ 0x30
 8010f42:	4921      	ldr	r1, [pc, #132]	@ (8010fc8 <sync_fs+0xd4>)
 8010f44:	4618      	mov	r0, r3
 8010f46:	f7ff fd4d 	bl	80109e4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	3330      	adds	r3, #48	@ 0x30
 8010f4e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010f52:	491e      	ldr	r1, [pc, #120]	@ (8010fcc <sync_fs+0xd8>)
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7ff fd45 	bl	80109e4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	3330      	adds	r3, #48	@ 0x30
 8010f5e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	691b      	ldr	r3, [r3, #16]
 8010f66:	4619      	mov	r1, r3
 8010f68:	4610      	mov	r0, r2
 8010f6a:	f7ff fd3b 	bl	80109e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	3330      	adds	r3, #48	@ 0x30
 8010f72:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	68db      	ldr	r3, [r3, #12]
 8010f7a:	4619      	mov	r1, r3
 8010f7c:	4610      	mov	r0, r2
 8010f7e:	f7ff fd31 	bl	80109e4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	69db      	ldr	r3, [r3, #28]
 8010f86:	1c5a      	adds	r2, r3, #1
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	7858      	ldrb	r0, [r3, #1]
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	f7ff fc8e 	bl	80108bc <disk_write>
			fs->fsi_flag = 0;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	785b      	ldrb	r3, [r3, #1]
 8010faa:	2200      	movs	r2, #0
 8010fac:	2100      	movs	r1, #0
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f7ff fca4 	bl	80108fc <disk_ioctl>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d001      	beq.n	8010fbe <sync_fs+0xca>
 8010fba:	2301      	movs	r3, #1
 8010fbc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3710      	adds	r7, #16
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}
 8010fc8:	41615252 	.word	0x41615252
 8010fcc:	61417272 	.word	0x61417272

08010fd0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010fd0:	b480      	push	{r7}
 8010fd2:	b083      	sub	sp, #12
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
 8010fd8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	3b02      	subs	r3, #2
 8010fde:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	695b      	ldr	r3, [r3, #20]
 8010fe4:	3b02      	subs	r3, #2
 8010fe6:	683a      	ldr	r2, [r7, #0]
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d301      	bcc.n	8010ff0 <clust2sect+0x20>
 8010fec:	2300      	movs	r3, #0
 8010fee:	e008      	b.n	8011002 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	895b      	ldrh	r3, [r3, #10]
 8010ff4:	461a      	mov	r2, r3
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	fb03 f202 	mul.w	r2, r3, r2
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011000:	4413      	add	r3, r2
}
 8011002:	4618      	mov	r0, r3
 8011004:	370c      	adds	r7, #12
 8011006:	46bd      	mov	sp, r7
 8011008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100c:	4770      	bx	lr

0801100e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801100e:	b580      	push	{r7, lr}
 8011010:	b086      	sub	sp, #24
 8011012:	af00      	add	r7, sp, #0
 8011014:	6078      	str	r0, [r7, #4]
 8011016:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	2b01      	cmp	r3, #1
 8011022:	d904      	bls.n	801102e <get_fat+0x20>
 8011024:	693b      	ldr	r3, [r7, #16]
 8011026:	695b      	ldr	r3, [r3, #20]
 8011028:	683a      	ldr	r2, [r7, #0]
 801102a:	429a      	cmp	r2, r3
 801102c:	d302      	bcc.n	8011034 <get_fat+0x26>
		val = 1;	/* Internal error */
 801102e:	2301      	movs	r3, #1
 8011030:	617b      	str	r3, [r7, #20]
 8011032:	e08e      	b.n	8011152 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011034:	f04f 33ff 	mov.w	r3, #4294967295
 8011038:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	781b      	ldrb	r3, [r3, #0]
 801103e:	2b03      	cmp	r3, #3
 8011040:	d061      	beq.n	8011106 <get_fat+0xf8>
 8011042:	2b03      	cmp	r3, #3
 8011044:	dc7b      	bgt.n	801113e <get_fat+0x130>
 8011046:	2b01      	cmp	r3, #1
 8011048:	d002      	beq.n	8011050 <get_fat+0x42>
 801104a:	2b02      	cmp	r3, #2
 801104c:	d041      	beq.n	80110d2 <get_fat+0xc4>
 801104e:	e076      	b.n	801113e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	60fb      	str	r3, [r7, #12]
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	085b      	lsrs	r3, r3, #1
 8011058:	68fa      	ldr	r2, [r7, #12]
 801105a:	4413      	add	r3, r2
 801105c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801105e:	693b      	ldr	r3, [r7, #16]
 8011060:	6a1a      	ldr	r2, [r3, #32]
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	0a5b      	lsrs	r3, r3, #9
 8011066:	4413      	add	r3, r2
 8011068:	4619      	mov	r1, r3
 801106a:	6938      	ldr	r0, [r7, #16]
 801106c:	f7ff ff14 	bl	8010e98 <move_window>
 8011070:	4603      	mov	r3, r0
 8011072:	2b00      	cmp	r3, #0
 8011074:	d166      	bne.n	8011144 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	1c5a      	adds	r2, r3, #1
 801107a:	60fa      	str	r2, [r7, #12]
 801107c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011080:	693a      	ldr	r2, [r7, #16]
 8011082:	4413      	add	r3, r2
 8011084:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011088:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	6a1a      	ldr	r2, [r3, #32]
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	0a5b      	lsrs	r3, r3, #9
 8011092:	4413      	add	r3, r2
 8011094:	4619      	mov	r1, r3
 8011096:	6938      	ldr	r0, [r7, #16]
 8011098:	f7ff fefe 	bl	8010e98 <move_window>
 801109c:	4603      	mov	r3, r0
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d152      	bne.n	8011148 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110a8:	693a      	ldr	r2, [r7, #16]
 80110aa:	4413      	add	r3, r2
 80110ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80110b0:	021b      	lsls	r3, r3, #8
 80110b2:	68ba      	ldr	r2, [r7, #8]
 80110b4:	4313      	orrs	r3, r2
 80110b6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	f003 0301 	and.w	r3, r3, #1
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d002      	beq.n	80110c8 <get_fat+0xba>
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	091b      	lsrs	r3, r3, #4
 80110c6:	e002      	b.n	80110ce <get_fat+0xc0>
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80110ce:	617b      	str	r3, [r7, #20]
			break;
 80110d0:	e03f      	b.n	8011152 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80110d2:	693b      	ldr	r3, [r7, #16]
 80110d4:	6a1a      	ldr	r2, [r3, #32]
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	0a1b      	lsrs	r3, r3, #8
 80110da:	4413      	add	r3, r2
 80110dc:	4619      	mov	r1, r3
 80110de:	6938      	ldr	r0, [r7, #16]
 80110e0:	f7ff feda 	bl	8010e98 <move_window>
 80110e4:	4603      	mov	r3, r0
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d130      	bne.n	801114c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80110ea:	693b      	ldr	r3, [r7, #16]
 80110ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	005b      	lsls	r3, r3, #1
 80110f4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80110f8:	4413      	add	r3, r2
 80110fa:	4618      	mov	r0, r3
 80110fc:	f7ff fc1c 	bl	8010938 <ld_word>
 8011100:	4603      	mov	r3, r0
 8011102:	617b      	str	r3, [r7, #20]
			break;
 8011104:	e025      	b.n	8011152 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011106:	693b      	ldr	r3, [r7, #16]
 8011108:	6a1a      	ldr	r2, [r3, #32]
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	09db      	lsrs	r3, r3, #7
 801110e:	4413      	add	r3, r2
 8011110:	4619      	mov	r1, r3
 8011112:	6938      	ldr	r0, [r7, #16]
 8011114:	f7ff fec0 	bl	8010e98 <move_window>
 8011118:	4603      	mov	r3, r0
 801111a:	2b00      	cmp	r3, #0
 801111c:	d118      	bne.n	8011150 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801111e:	693b      	ldr	r3, [r7, #16]
 8011120:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	009b      	lsls	r3, r3, #2
 8011128:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801112c:	4413      	add	r3, r2
 801112e:	4618      	mov	r0, r3
 8011130:	f7ff fc1a 	bl	8010968 <ld_dword>
 8011134:	4603      	mov	r3, r0
 8011136:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801113a:	617b      	str	r3, [r7, #20]
			break;
 801113c:	e009      	b.n	8011152 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801113e:	2301      	movs	r3, #1
 8011140:	617b      	str	r3, [r7, #20]
 8011142:	e006      	b.n	8011152 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011144:	bf00      	nop
 8011146:	e004      	b.n	8011152 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011148:	bf00      	nop
 801114a:	e002      	b.n	8011152 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801114c:	bf00      	nop
 801114e:	e000      	b.n	8011152 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011150:	bf00      	nop
		}
	}

	return val;
 8011152:	697b      	ldr	r3, [r7, #20]
}
 8011154:	4618      	mov	r0, r3
 8011156:	3718      	adds	r7, #24
 8011158:	46bd      	mov	sp, r7
 801115a:	bd80      	pop	{r7, pc}

0801115c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801115c:	b590      	push	{r4, r7, lr}
 801115e:	b089      	sub	sp, #36	@ 0x24
 8011160:	af00      	add	r7, sp, #0
 8011162:	60f8      	str	r0, [r7, #12]
 8011164:	60b9      	str	r1, [r7, #8]
 8011166:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011168:	2302      	movs	r3, #2
 801116a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	2b01      	cmp	r3, #1
 8011170:	f240 80d9 	bls.w	8011326 <put_fat+0x1ca>
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	695b      	ldr	r3, [r3, #20]
 8011178:	68ba      	ldr	r2, [r7, #8]
 801117a:	429a      	cmp	r2, r3
 801117c:	f080 80d3 	bcs.w	8011326 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	781b      	ldrb	r3, [r3, #0]
 8011184:	2b03      	cmp	r3, #3
 8011186:	f000 8096 	beq.w	80112b6 <put_fat+0x15a>
 801118a:	2b03      	cmp	r3, #3
 801118c:	f300 80cb 	bgt.w	8011326 <put_fat+0x1ca>
 8011190:	2b01      	cmp	r3, #1
 8011192:	d002      	beq.n	801119a <put_fat+0x3e>
 8011194:	2b02      	cmp	r3, #2
 8011196:	d06e      	beq.n	8011276 <put_fat+0x11a>
 8011198:	e0c5      	b.n	8011326 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801119a:	68bb      	ldr	r3, [r7, #8]
 801119c:	61bb      	str	r3, [r7, #24]
 801119e:	69bb      	ldr	r3, [r7, #24]
 80111a0:	085b      	lsrs	r3, r3, #1
 80111a2:	69ba      	ldr	r2, [r7, #24]
 80111a4:	4413      	add	r3, r2
 80111a6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	6a1a      	ldr	r2, [r3, #32]
 80111ac:	69bb      	ldr	r3, [r7, #24]
 80111ae:	0a5b      	lsrs	r3, r3, #9
 80111b0:	4413      	add	r3, r2
 80111b2:	4619      	mov	r1, r3
 80111b4:	68f8      	ldr	r0, [r7, #12]
 80111b6:	f7ff fe6f 	bl	8010e98 <move_window>
 80111ba:	4603      	mov	r3, r0
 80111bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80111be:	7ffb      	ldrb	r3, [r7, #31]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	f040 80a9 	bne.w	8011318 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80111cc:	69bb      	ldr	r3, [r7, #24]
 80111ce:	1c59      	adds	r1, r3, #1
 80111d0:	61b9      	str	r1, [r7, #24]
 80111d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111d6:	4413      	add	r3, r2
 80111d8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	f003 0301 	and.w	r3, r3, #1
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d00d      	beq.n	8011200 <put_fat+0xa4>
 80111e4:	697b      	ldr	r3, [r7, #20]
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	b25b      	sxtb	r3, r3
 80111ea:	f003 030f 	and.w	r3, r3, #15
 80111ee:	b25a      	sxtb	r2, r3
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	b2db      	uxtb	r3, r3
 80111f4:	011b      	lsls	r3, r3, #4
 80111f6:	b25b      	sxtb	r3, r3
 80111f8:	4313      	orrs	r3, r2
 80111fa:	b25b      	sxtb	r3, r3
 80111fc:	b2db      	uxtb	r3, r3
 80111fe:	e001      	b.n	8011204 <put_fat+0xa8>
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	b2db      	uxtb	r3, r3
 8011204:	697a      	ldr	r2, [r7, #20]
 8011206:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	2201      	movs	r2, #1
 801120c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	6a1a      	ldr	r2, [r3, #32]
 8011212:	69bb      	ldr	r3, [r7, #24]
 8011214:	0a5b      	lsrs	r3, r3, #9
 8011216:	4413      	add	r3, r2
 8011218:	4619      	mov	r1, r3
 801121a:	68f8      	ldr	r0, [r7, #12]
 801121c:	f7ff fe3c 	bl	8010e98 <move_window>
 8011220:	4603      	mov	r3, r0
 8011222:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011224:	7ffb      	ldrb	r3, [r7, #31]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d178      	bne.n	801131c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011230:	69bb      	ldr	r3, [r7, #24]
 8011232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011236:	4413      	add	r3, r2
 8011238:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	f003 0301 	and.w	r3, r3, #1
 8011240:	2b00      	cmp	r3, #0
 8011242:	d003      	beq.n	801124c <put_fat+0xf0>
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	091b      	lsrs	r3, r3, #4
 8011248:	b2db      	uxtb	r3, r3
 801124a:	e00e      	b.n	801126a <put_fat+0x10e>
 801124c:	697b      	ldr	r3, [r7, #20]
 801124e:	781b      	ldrb	r3, [r3, #0]
 8011250:	b25b      	sxtb	r3, r3
 8011252:	f023 030f 	bic.w	r3, r3, #15
 8011256:	b25a      	sxtb	r2, r3
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	0a1b      	lsrs	r3, r3, #8
 801125c:	b25b      	sxtb	r3, r3
 801125e:	f003 030f 	and.w	r3, r3, #15
 8011262:	b25b      	sxtb	r3, r3
 8011264:	4313      	orrs	r3, r2
 8011266:	b25b      	sxtb	r3, r3
 8011268:	b2db      	uxtb	r3, r3
 801126a:	697a      	ldr	r2, [r7, #20]
 801126c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	2201      	movs	r2, #1
 8011272:	70da      	strb	r2, [r3, #3]
			break;
 8011274:	e057      	b.n	8011326 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	6a1a      	ldr	r2, [r3, #32]
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	0a1b      	lsrs	r3, r3, #8
 801127e:	4413      	add	r3, r2
 8011280:	4619      	mov	r1, r3
 8011282:	68f8      	ldr	r0, [r7, #12]
 8011284:	f7ff fe08 	bl	8010e98 <move_window>
 8011288:	4603      	mov	r3, r0
 801128a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801128c:	7ffb      	ldrb	r3, [r7, #31]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d146      	bne.n	8011320 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	005b      	lsls	r3, r3, #1
 801129c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80112a0:	4413      	add	r3, r2
 80112a2:	687a      	ldr	r2, [r7, #4]
 80112a4:	b292      	uxth	r2, r2
 80112a6:	4611      	mov	r1, r2
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7ff fb80 	bl	80109ae <st_word>
			fs->wflag = 1;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	2201      	movs	r2, #1
 80112b2:	70da      	strb	r2, [r3, #3]
			break;
 80112b4:	e037      	b.n	8011326 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	6a1a      	ldr	r2, [r3, #32]
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	09db      	lsrs	r3, r3, #7
 80112be:	4413      	add	r3, r2
 80112c0:	4619      	mov	r1, r3
 80112c2:	68f8      	ldr	r0, [r7, #12]
 80112c4:	f7ff fde8 	bl	8010e98 <move_window>
 80112c8:	4603      	mov	r3, r0
 80112ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80112cc:	7ffb      	ldrb	r3, [r7, #31]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d128      	bne.n	8011324 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80112de:	68bb      	ldr	r3, [r7, #8]
 80112e0:	009b      	lsls	r3, r3, #2
 80112e2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80112e6:	4413      	add	r3, r2
 80112e8:	4618      	mov	r0, r3
 80112ea:	f7ff fb3d 	bl	8010968 <ld_dword>
 80112ee:	4603      	mov	r3, r0
 80112f0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80112f4:	4323      	orrs	r3, r4
 80112f6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	009b      	lsls	r3, r3, #2
 8011302:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011306:	4413      	add	r3, r2
 8011308:	6879      	ldr	r1, [r7, #4]
 801130a:	4618      	mov	r0, r3
 801130c:	f7ff fb6a 	bl	80109e4 <st_dword>
			fs->wflag = 1;
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	2201      	movs	r2, #1
 8011314:	70da      	strb	r2, [r3, #3]
			break;
 8011316:	e006      	b.n	8011326 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011318:	bf00      	nop
 801131a:	e004      	b.n	8011326 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801131c:	bf00      	nop
 801131e:	e002      	b.n	8011326 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011320:	bf00      	nop
 8011322:	e000      	b.n	8011326 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011324:	bf00      	nop
		}
	}
	return res;
 8011326:	7ffb      	ldrb	r3, [r7, #31]
}
 8011328:	4618      	mov	r0, r3
 801132a:	3724      	adds	r7, #36	@ 0x24
 801132c:	46bd      	mov	sp, r7
 801132e:	bd90      	pop	{r4, r7, pc}

08011330 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b088      	sub	sp, #32
 8011334:	af00      	add	r7, sp, #0
 8011336:	60f8      	str	r0, [r7, #12]
 8011338:	60b9      	str	r1, [r7, #8]
 801133a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801133c:	2300      	movs	r3, #0
 801133e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	2b01      	cmp	r3, #1
 801134a:	d904      	bls.n	8011356 <remove_chain+0x26>
 801134c:	69bb      	ldr	r3, [r7, #24]
 801134e:	695b      	ldr	r3, [r3, #20]
 8011350:	68ba      	ldr	r2, [r7, #8]
 8011352:	429a      	cmp	r2, r3
 8011354:	d301      	bcc.n	801135a <remove_chain+0x2a>
 8011356:	2302      	movs	r3, #2
 8011358:	e04b      	b.n	80113f2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d00c      	beq.n	801137a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011360:	f04f 32ff 	mov.w	r2, #4294967295
 8011364:	6879      	ldr	r1, [r7, #4]
 8011366:	69b8      	ldr	r0, [r7, #24]
 8011368:	f7ff fef8 	bl	801115c <put_fat>
 801136c:	4603      	mov	r3, r0
 801136e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011370:	7ffb      	ldrb	r3, [r7, #31]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d001      	beq.n	801137a <remove_chain+0x4a>
 8011376:	7ffb      	ldrb	r3, [r7, #31]
 8011378:	e03b      	b.n	80113f2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801137a:	68b9      	ldr	r1, [r7, #8]
 801137c:	68f8      	ldr	r0, [r7, #12]
 801137e:	f7ff fe46 	bl	801100e <get_fat>
 8011382:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d031      	beq.n	80113ee <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801138a:	697b      	ldr	r3, [r7, #20]
 801138c:	2b01      	cmp	r3, #1
 801138e:	d101      	bne.n	8011394 <remove_chain+0x64>
 8011390:	2302      	movs	r3, #2
 8011392:	e02e      	b.n	80113f2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011394:	697b      	ldr	r3, [r7, #20]
 8011396:	f1b3 3fff 	cmp.w	r3, #4294967295
 801139a:	d101      	bne.n	80113a0 <remove_chain+0x70>
 801139c:	2301      	movs	r3, #1
 801139e:	e028      	b.n	80113f2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80113a0:	2200      	movs	r2, #0
 80113a2:	68b9      	ldr	r1, [r7, #8]
 80113a4:	69b8      	ldr	r0, [r7, #24]
 80113a6:	f7ff fed9 	bl	801115c <put_fat>
 80113aa:	4603      	mov	r3, r0
 80113ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80113ae:	7ffb      	ldrb	r3, [r7, #31]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d001      	beq.n	80113b8 <remove_chain+0x88>
 80113b4:	7ffb      	ldrb	r3, [r7, #31]
 80113b6:	e01c      	b.n	80113f2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80113b8:	69bb      	ldr	r3, [r7, #24]
 80113ba:	691a      	ldr	r2, [r3, #16]
 80113bc:	69bb      	ldr	r3, [r7, #24]
 80113be:	695b      	ldr	r3, [r3, #20]
 80113c0:	3b02      	subs	r3, #2
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d20b      	bcs.n	80113de <remove_chain+0xae>
			fs->free_clst++;
 80113c6:	69bb      	ldr	r3, [r7, #24]
 80113c8:	691b      	ldr	r3, [r3, #16]
 80113ca:	1c5a      	adds	r2, r3, #1
 80113cc:	69bb      	ldr	r3, [r7, #24]
 80113ce:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80113d0:	69bb      	ldr	r3, [r7, #24]
 80113d2:	791b      	ldrb	r3, [r3, #4]
 80113d4:	f043 0301 	orr.w	r3, r3, #1
 80113d8:	b2da      	uxtb	r2, r3
 80113da:	69bb      	ldr	r3, [r7, #24]
 80113dc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80113e2:	69bb      	ldr	r3, [r7, #24]
 80113e4:	695b      	ldr	r3, [r3, #20]
 80113e6:	68ba      	ldr	r2, [r7, #8]
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d3c6      	bcc.n	801137a <remove_chain+0x4a>
 80113ec:	e000      	b.n	80113f0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80113ee:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80113f0:	2300      	movs	r3, #0
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	3720      	adds	r7, #32
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bd80      	pop	{r7, pc}

080113fa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80113fa:	b580      	push	{r7, lr}
 80113fc:	b088      	sub	sp, #32
 80113fe:	af00      	add	r7, sp, #0
 8011400:	6078      	str	r0, [r7, #4]
 8011402:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d10d      	bne.n	801142c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011410:	693b      	ldr	r3, [r7, #16]
 8011412:	68db      	ldr	r3, [r3, #12]
 8011414:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011416:	69bb      	ldr	r3, [r7, #24]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d004      	beq.n	8011426 <create_chain+0x2c>
 801141c:	693b      	ldr	r3, [r7, #16]
 801141e:	695b      	ldr	r3, [r3, #20]
 8011420:	69ba      	ldr	r2, [r7, #24]
 8011422:	429a      	cmp	r2, r3
 8011424:	d31b      	bcc.n	801145e <create_chain+0x64>
 8011426:	2301      	movs	r3, #1
 8011428:	61bb      	str	r3, [r7, #24]
 801142a:	e018      	b.n	801145e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801142c:	6839      	ldr	r1, [r7, #0]
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	f7ff fded 	bl	801100e <get_fat>
 8011434:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	2b01      	cmp	r3, #1
 801143a:	d801      	bhi.n	8011440 <create_chain+0x46>
 801143c:	2301      	movs	r3, #1
 801143e:	e070      	b.n	8011522 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011446:	d101      	bne.n	801144c <create_chain+0x52>
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	e06a      	b.n	8011522 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801144c:	693b      	ldr	r3, [r7, #16]
 801144e:	695b      	ldr	r3, [r3, #20]
 8011450:	68fa      	ldr	r2, [r7, #12]
 8011452:	429a      	cmp	r2, r3
 8011454:	d201      	bcs.n	801145a <create_chain+0x60>
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	e063      	b.n	8011522 <create_chain+0x128>
		scl = clst;
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801145e:	69bb      	ldr	r3, [r7, #24]
 8011460:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011462:	69fb      	ldr	r3, [r7, #28]
 8011464:	3301      	adds	r3, #1
 8011466:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	695b      	ldr	r3, [r3, #20]
 801146c:	69fa      	ldr	r2, [r7, #28]
 801146e:	429a      	cmp	r2, r3
 8011470:	d307      	bcc.n	8011482 <create_chain+0x88>
				ncl = 2;
 8011472:	2302      	movs	r3, #2
 8011474:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011476:	69fa      	ldr	r2, [r7, #28]
 8011478:	69bb      	ldr	r3, [r7, #24]
 801147a:	429a      	cmp	r2, r3
 801147c:	d901      	bls.n	8011482 <create_chain+0x88>
 801147e:	2300      	movs	r3, #0
 8011480:	e04f      	b.n	8011522 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011482:	69f9      	ldr	r1, [r7, #28]
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f7ff fdc2 	bl	801100e <get_fat>
 801148a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d00e      	beq.n	80114b0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	2b01      	cmp	r3, #1
 8011496:	d003      	beq.n	80114a0 <create_chain+0xa6>
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801149e:	d101      	bne.n	80114a4 <create_chain+0xaa>
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	e03e      	b.n	8011522 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80114a4:	69fa      	ldr	r2, [r7, #28]
 80114a6:	69bb      	ldr	r3, [r7, #24]
 80114a8:	429a      	cmp	r2, r3
 80114aa:	d1da      	bne.n	8011462 <create_chain+0x68>
 80114ac:	2300      	movs	r3, #0
 80114ae:	e038      	b.n	8011522 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80114b0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80114b2:	f04f 32ff 	mov.w	r2, #4294967295
 80114b6:	69f9      	ldr	r1, [r7, #28]
 80114b8:	6938      	ldr	r0, [r7, #16]
 80114ba:	f7ff fe4f 	bl	801115c <put_fat>
 80114be:	4603      	mov	r3, r0
 80114c0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80114c2:	7dfb      	ldrb	r3, [r7, #23]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d109      	bne.n	80114dc <create_chain+0xe2>
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d006      	beq.n	80114dc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80114ce:	69fa      	ldr	r2, [r7, #28]
 80114d0:	6839      	ldr	r1, [r7, #0]
 80114d2:	6938      	ldr	r0, [r7, #16]
 80114d4:	f7ff fe42 	bl	801115c <put_fat>
 80114d8:	4603      	mov	r3, r0
 80114da:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80114dc:	7dfb      	ldrb	r3, [r7, #23]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d116      	bne.n	8011510 <create_chain+0x116>
		fs->last_clst = ncl;
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	69fa      	ldr	r2, [r7, #28]
 80114e6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80114e8:	693b      	ldr	r3, [r7, #16]
 80114ea:	691a      	ldr	r2, [r3, #16]
 80114ec:	693b      	ldr	r3, [r7, #16]
 80114ee:	695b      	ldr	r3, [r3, #20]
 80114f0:	3b02      	subs	r3, #2
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d804      	bhi.n	8011500 <create_chain+0x106>
 80114f6:	693b      	ldr	r3, [r7, #16]
 80114f8:	691b      	ldr	r3, [r3, #16]
 80114fa:	1e5a      	subs	r2, r3, #1
 80114fc:	693b      	ldr	r3, [r7, #16]
 80114fe:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	791b      	ldrb	r3, [r3, #4]
 8011504:	f043 0301 	orr.w	r3, r3, #1
 8011508:	b2da      	uxtb	r2, r3
 801150a:	693b      	ldr	r3, [r7, #16]
 801150c:	711a      	strb	r2, [r3, #4]
 801150e:	e007      	b.n	8011520 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011510:	7dfb      	ldrb	r3, [r7, #23]
 8011512:	2b01      	cmp	r3, #1
 8011514:	d102      	bne.n	801151c <create_chain+0x122>
 8011516:	f04f 33ff 	mov.w	r3, #4294967295
 801151a:	e000      	b.n	801151e <create_chain+0x124>
 801151c:	2301      	movs	r3, #1
 801151e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011520:	69fb      	ldr	r3, [r7, #28]
}
 8011522:	4618      	mov	r0, r3
 8011524:	3720      	adds	r7, #32
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}

0801152a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801152a:	b480      	push	{r7}
 801152c:	b087      	sub	sp, #28
 801152e:	af00      	add	r7, sp, #0
 8011530:	6078      	str	r0, [r7, #4]
 8011532:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801153e:	3304      	adds	r3, #4
 8011540:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	0a5b      	lsrs	r3, r3, #9
 8011546:	68fa      	ldr	r2, [r7, #12]
 8011548:	8952      	ldrh	r2, [r2, #10]
 801154a:	fbb3 f3f2 	udiv	r3, r3, r2
 801154e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	1d1a      	adds	r2, r3, #4
 8011554:	613a      	str	r2, [r7, #16]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d101      	bne.n	8011564 <clmt_clust+0x3a>
 8011560:	2300      	movs	r3, #0
 8011562:	e010      	b.n	8011586 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8011564:	697a      	ldr	r2, [r7, #20]
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	429a      	cmp	r2, r3
 801156a:	d307      	bcc.n	801157c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801156c:	697a      	ldr	r2, [r7, #20]
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	1ad3      	subs	r3, r2, r3
 8011572:	617b      	str	r3, [r7, #20]
 8011574:	693b      	ldr	r3, [r7, #16]
 8011576:	3304      	adds	r3, #4
 8011578:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801157a:	e7e9      	b.n	8011550 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801157c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801157e:	693b      	ldr	r3, [r7, #16]
 8011580:	681a      	ldr	r2, [r3, #0]
 8011582:	697b      	ldr	r3, [r7, #20]
 8011584:	4413      	add	r3, r2
}
 8011586:	4618      	mov	r0, r3
 8011588:	371c      	adds	r7, #28
 801158a:	46bd      	mov	sp, r7
 801158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011590:	4770      	bx	lr

08011592 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011592:	b580      	push	{r7, lr}
 8011594:	b086      	sub	sp, #24
 8011596:	af00      	add	r7, sp, #0
 8011598:	6078      	str	r0, [r7, #4]
 801159a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80115a8:	d204      	bcs.n	80115b4 <dir_sdi+0x22>
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	f003 031f 	and.w	r3, r3, #31
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d001      	beq.n	80115b8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80115b4:	2302      	movs	r3, #2
 80115b6:	e063      	b.n	8011680 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	683a      	ldr	r2, [r7, #0]
 80115bc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	689b      	ldr	r3, [r3, #8]
 80115c2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80115c4:	697b      	ldr	r3, [r7, #20]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d106      	bne.n	80115d8 <dir_sdi+0x46>
 80115ca:	693b      	ldr	r3, [r7, #16]
 80115cc:	781b      	ldrb	r3, [r3, #0]
 80115ce:	2b02      	cmp	r3, #2
 80115d0:	d902      	bls.n	80115d8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115d6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80115d8:	697b      	ldr	r3, [r7, #20]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d10c      	bne.n	80115f8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	095b      	lsrs	r3, r3, #5
 80115e2:	693a      	ldr	r2, [r7, #16]
 80115e4:	8912      	ldrh	r2, [r2, #8]
 80115e6:	4293      	cmp	r3, r2
 80115e8:	d301      	bcc.n	80115ee <dir_sdi+0x5c>
 80115ea:	2302      	movs	r3, #2
 80115ec:	e048      	b.n	8011680 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80115ee:	693b      	ldr	r3, [r7, #16]
 80115f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	61da      	str	r2, [r3, #28]
 80115f6:	e029      	b.n	801164c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80115f8:	693b      	ldr	r3, [r7, #16]
 80115fa:	895b      	ldrh	r3, [r3, #10]
 80115fc:	025b      	lsls	r3, r3, #9
 80115fe:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011600:	e019      	b.n	8011636 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	6979      	ldr	r1, [r7, #20]
 8011606:	4618      	mov	r0, r3
 8011608:	f7ff fd01 	bl	801100e <get_fat>
 801160c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011614:	d101      	bne.n	801161a <dir_sdi+0x88>
 8011616:	2301      	movs	r3, #1
 8011618:	e032      	b.n	8011680 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	2b01      	cmp	r3, #1
 801161e:	d904      	bls.n	801162a <dir_sdi+0x98>
 8011620:	693b      	ldr	r3, [r7, #16]
 8011622:	695b      	ldr	r3, [r3, #20]
 8011624:	697a      	ldr	r2, [r7, #20]
 8011626:	429a      	cmp	r2, r3
 8011628:	d301      	bcc.n	801162e <dir_sdi+0x9c>
 801162a:	2302      	movs	r3, #2
 801162c:	e028      	b.n	8011680 <dir_sdi+0xee>
			ofs -= csz;
 801162e:	683a      	ldr	r2, [r7, #0]
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	1ad3      	subs	r3, r2, r3
 8011634:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011636:	683a      	ldr	r2, [r7, #0]
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	429a      	cmp	r2, r3
 801163c:	d2e1      	bcs.n	8011602 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801163e:	6979      	ldr	r1, [r7, #20]
 8011640:	6938      	ldr	r0, [r7, #16]
 8011642:	f7ff fcc5 	bl	8010fd0 <clust2sect>
 8011646:	4602      	mov	r2, r0
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	697a      	ldr	r2, [r7, #20]
 8011650:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	69db      	ldr	r3, [r3, #28]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d101      	bne.n	801165e <dir_sdi+0xcc>
 801165a:	2302      	movs	r3, #2
 801165c:	e010      	b.n	8011680 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	69da      	ldr	r2, [r3, #28]
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	0a5b      	lsrs	r3, r3, #9
 8011666:	441a      	add	r2, r3
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801166c:	693b      	ldr	r3, [r7, #16]
 801166e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011678:	441a      	add	r2, r3
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801167e:	2300      	movs	r3, #0
}
 8011680:	4618      	mov	r0, r3
 8011682:	3718      	adds	r7, #24
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}

08011688 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b086      	sub	sp, #24
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
 8011690:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	695b      	ldr	r3, [r3, #20]
 801169c:	3320      	adds	r3, #32
 801169e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	69db      	ldr	r3, [r3, #28]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d003      	beq.n	80116b0 <dir_next+0x28>
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80116ae:	d301      	bcc.n	80116b4 <dir_next+0x2c>
 80116b0:	2304      	movs	r3, #4
 80116b2:	e0aa      	b.n	801180a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80116b4:	68bb      	ldr	r3, [r7, #8]
 80116b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	f040 8098 	bne.w	80117f0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	69db      	ldr	r3, [r3, #28]
 80116c4:	1c5a      	adds	r2, r3, #1
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	699b      	ldr	r3, [r3, #24]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d10b      	bne.n	80116ea <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80116d2:	68bb      	ldr	r3, [r7, #8]
 80116d4:	095b      	lsrs	r3, r3, #5
 80116d6:	68fa      	ldr	r2, [r7, #12]
 80116d8:	8912      	ldrh	r2, [r2, #8]
 80116da:	4293      	cmp	r3, r2
 80116dc:	f0c0 8088 	bcc.w	80117f0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2200      	movs	r2, #0
 80116e4:	61da      	str	r2, [r3, #28]
 80116e6:	2304      	movs	r3, #4
 80116e8:	e08f      	b.n	801180a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	0a5b      	lsrs	r3, r3, #9
 80116ee:	68fa      	ldr	r2, [r7, #12]
 80116f0:	8952      	ldrh	r2, [r2, #10]
 80116f2:	3a01      	subs	r2, #1
 80116f4:	4013      	ands	r3, r2
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d17a      	bne.n	80117f0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80116fa:	687a      	ldr	r2, [r7, #4]
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	699b      	ldr	r3, [r3, #24]
 8011700:	4619      	mov	r1, r3
 8011702:	4610      	mov	r0, r2
 8011704:	f7ff fc83 	bl	801100e <get_fat>
 8011708:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801170a:	697b      	ldr	r3, [r7, #20]
 801170c:	2b01      	cmp	r3, #1
 801170e:	d801      	bhi.n	8011714 <dir_next+0x8c>
 8011710:	2302      	movs	r3, #2
 8011712:	e07a      	b.n	801180a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011714:	697b      	ldr	r3, [r7, #20]
 8011716:	f1b3 3fff 	cmp.w	r3, #4294967295
 801171a:	d101      	bne.n	8011720 <dir_next+0x98>
 801171c:	2301      	movs	r3, #1
 801171e:	e074      	b.n	801180a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	695b      	ldr	r3, [r3, #20]
 8011724:	697a      	ldr	r2, [r7, #20]
 8011726:	429a      	cmp	r2, r3
 8011728:	d358      	bcc.n	80117dc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d104      	bne.n	801173a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2200      	movs	r2, #0
 8011734:	61da      	str	r2, [r3, #28]
 8011736:	2304      	movs	r3, #4
 8011738:	e067      	b.n	801180a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801173a:	687a      	ldr	r2, [r7, #4]
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	699b      	ldr	r3, [r3, #24]
 8011740:	4619      	mov	r1, r3
 8011742:	4610      	mov	r0, r2
 8011744:	f7ff fe59 	bl	80113fa <create_chain>
 8011748:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d101      	bne.n	8011754 <dir_next+0xcc>
 8011750:	2307      	movs	r3, #7
 8011752:	e05a      	b.n	801180a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011754:	697b      	ldr	r3, [r7, #20]
 8011756:	2b01      	cmp	r3, #1
 8011758:	d101      	bne.n	801175e <dir_next+0xd6>
 801175a:	2302      	movs	r3, #2
 801175c:	e055      	b.n	801180a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011764:	d101      	bne.n	801176a <dir_next+0xe2>
 8011766:	2301      	movs	r3, #1
 8011768:	e04f      	b.n	801180a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801176a:	68f8      	ldr	r0, [r7, #12]
 801176c:	f7ff fb50 	bl	8010e10 <sync_window>
 8011770:	4603      	mov	r3, r0
 8011772:	2b00      	cmp	r3, #0
 8011774:	d001      	beq.n	801177a <dir_next+0xf2>
 8011776:	2301      	movs	r3, #1
 8011778:	e047      	b.n	801180a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	3330      	adds	r3, #48	@ 0x30
 801177e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011782:	2100      	movs	r1, #0
 8011784:	4618      	mov	r0, r3
 8011786:	f7ff f97a 	bl	8010a7e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801178a:	2300      	movs	r3, #0
 801178c:	613b      	str	r3, [r7, #16]
 801178e:	6979      	ldr	r1, [r7, #20]
 8011790:	68f8      	ldr	r0, [r7, #12]
 8011792:	f7ff fc1d 	bl	8010fd0 <clust2sect>
 8011796:	4602      	mov	r2, r0
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801179c:	e012      	b.n	80117c4 <dir_next+0x13c>
						fs->wflag = 1;
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	2201      	movs	r2, #1
 80117a2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80117a4:	68f8      	ldr	r0, [r7, #12]
 80117a6:	f7ff fb33 	bl	8010e10 <sync_window>
 80117aa:	4603      	mov	r3, r0
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d001      	beq.n	80117b4 <dir_next+0x12c>
 80117b0:	2301      	movs	r3, #1
 80117b2:	e02a      	b.n	801180a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	3301      	adds	r3, #1
 80117b8:	613b      	str	r3, [r7, #16]
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117be:	1c5a      	adds	r2, r3, #1
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	895b      	ldrh	r3, [r3, #10]
 80117c8:	461a      	mov	r2, r3
 80117ca:	693b      	ldr	r3, [r7, #16]
 80117cc:	4293      	cmp	r3, r2
 80117ce:	d3e6      	bcc.n	801179e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80117d4:	693b      	ldr	r3, [r7, #16]
 80117d6:	1ad2      	subs	r2, r2, r3
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	697a      	ldr	r2, [r7, #20]
 80117e0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80117e2:	6979      	ldr	r1, [r7, #20]
 80117e4:	68f8      	ldr	r0, [r7, #12]
 80117e6:	f7ff fbf3 	bl	8010fd0 <clust2sect>
 80117ea:	4602      	mov	r2, r0
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	68ba      	ldr	r2, [r7, #8]
 80117f4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80117fc:	68bb      	ldr	r3, [r7, #8]
 80117fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011802:	441a      	add	r2, r3
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011808:	2300      	movs	r3, #0
}
 801180a:	4618      	mov	r0, r3
 801180c:	3718      	adds	r7, #24
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}

08011812 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011812:	b580      	push	{r7, lr}
 8011814:	b086      	sub	sp, #24
 8011816:	af00      	add	r7, sp, #0
 8011818:	6078      	str	r0, [r7, #4]
 801181a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011822:	2100      	movs	r1, #0
 8011824:	6878      	ldr	r0, [r7, #4]
 8011826:	f7ff feb4 	bl	8011592 <dir_sdi>
 801182a:	4603      	mov	r3, r0
 801182c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801182e:	7dfb      	ldrb	r3, [r7, #23]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d12b      	bne.n	801188c <dir_alloc+0x7a>
		n = 0;
 8011834:	2300      	movs	r3, #0
 8011836:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	69db      	ldr	r3, [r3, #28]
 801183c:	4619      	mov	r1, r3
 801183e:	68f8      	ldr	r0, [r7, #12]
 8011840:	f7ff fb2a 	bl	8010e98 <move_window>
 8011844:	4603      	mov	r3, r0
 8011846:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011848:	7dfb      	ldrb	r3, [r7, #23]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d11d      	bne.n	801188a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6a1b      	ldr	r3, [r3, #32]
 8011852:	781b      	ldrb	r3, [r3, #0]
 8011854:	2be5      	cmp	r3, #229	@ 0xe5
 8011856:	d004      	beq.n	8011862 <dir_alloc+0x50>
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6a1b      	ldr	r3, [r3, #32]
 801185c:	781b      	ldrb	r3, [r3, #0]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d107      	bne.n	8011872 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011862:	693b      	ldr	r3, [r7, #16]
 8011864:	3301      	adds	r3, #1
 8011866:	613b      	str	r3, [r7, #16]
 8011868:	693a      	ldr	r2, [r7, #16]
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	429a      	cmp	r2, r3
 801186e:	d102      	bne.n	8011876 <dir_alloc+0x64>
 8011870:	e00c      	b.n	801188c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011872:	2300      	movs	r3, #0
 8011874:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011876:	2101      	movs	r1, #1
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f7ff ff05 	bl	8011688 <dir_next>
 801187e:	4603      	mov	r3, r0
 8011880:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011882:	7dfb      	ldrb	r3, [r7, #23]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d0d7      	beq.n	8011838 <dir_alloc+0x26>
 8011888:	e000      	b.n	801188c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801188a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801188c:	7dfb      	ldrb	r3, [r7, #23]
 801188e:	2b04      	cmp	r3, #4
 8011890:	d101      	bne.n	8011896 <dir_alloc+0x84>
 8011892:	2307      	movs	r3, #7
 8011894:	75fb      	strb	r3, [r7, #23]
	return res;
 8011896:	7dfb      	ldrb	r3, [r7, #23]
}
 8011898:	4618      	mov	r0, r3
 801189a:	3718      	adds	r7, #24
 801189c:	46bd      	mov	sp, r7
 801189e:	bd80      	pop	{r7, pc}

080118a0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b084      	sub	sp, #16
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
 80118a8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	331a      	adds	r3, #26
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7ff f842 	bl	8010938 <ld_word>
 80118b4:	4603      	mov	r3, r0
 80118b6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	781b      	ldrb	r3, [r3, #0]
 80118bc:	2b03      	cmp	r3, #3
 80118be:	d109      	bne.n	80118d4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80118c0:	683b      	ldr	r3, [r7, #0]
 80118c2:	3314      	adds	r3, #20
 80118c4:	4618      	mov	r0, r3
 80118c6:	f7ff f837 	bl	8010938 <ld_word>
 80118ca:	4603      	mov	r3, r0
 80118cc:	041b      	lsls	r3, r3, #16
 80118ce:	68fa      	ldr	r2, [r7, #12]
 80118d0:	4313      	orrs	r3, r2
 80118d2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80118d4:	68fb      	ldr	r3, [r7, #12]
}
 80118d6:	4618      	mov	r0, r3
 80118d8:	3710      	adds	r7, #16
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}

080118de <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80118de:	b580      	push	{r7, lr}
 80118e0:	b084      	sub	sp, #16
 80118e2:	af00      	add	r7, sp, #0
 80118e4:	60f8      	str	r0, [r7, #12]
 80118e6:	60b9      	str	r1, [r7, #8]
 80118e8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80118ea:	68bb      	ldr	r3, [r7, #8]
 80118ec:	331a      	adds	r3, #26
 80118ee:	687a      	ldr	r2, [r7, #4]
 80118f0:	b292      	uxth	r2, r2
 80118f2:	4611      	mov	r1, r2
 80118f4:	4618      	mov	r0, r3
 80118f6:	f7ff f85a 	bl	80109ae <st_word>
	if (fs->fs_type == FS_FAT32) {
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	781b      	ldrb	r3, [r3, #0]
 80118fe:	2b03      	cmp	r3, #3
 8011900:	d109      	bne.n	8011916 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	f103 0214 	add.w	r2, r3, #20
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	0c1b      	lsrs	r3, r3, #16
 801190c:	b29b      	uxth	r3, r3
 801190e:	4619      	mov	r1, r3
 8011910:	4610      	mov	r0, r2
 8011912:	f7ff f84c 	bl	80109ae <st_word>
	}
}
 8011916:	bf00      	nop
 8011918:	3710      	adds	r7, #16
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}

0801191e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801191e:	b580      	push	{r7, lr}
 8011920:	b086      	sub	sp, #24
 8011922:	af00      	add	r7, sp, #0
 8011924:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801192c:	2100      	movs	r1, #0
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f7ff fe2f 	bl	8011592 <dir_sdi>
 8011934:	4603      	mov	r3, r0
 8011936:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011938:	7dfb      	ldrb	r3, [r7, #23]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d001      	beq.n	8011942 <dir_find+0x24>
 801193e:	7dfb      	ldrb	r3, [r7, #23]
 8011940:	e03e      	b.n	80119c0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	69db      	ldr	r3, [r3, #28]
 8011946:	4619      	mov	r1, r3
 8011948:	6938      	ldr	r0, [r7, #16]
 801194a:	f7ff faa5 	bl	8010e98 <move_window>
 801194e:	4603      	mov	r3, r0
 8011950:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011952:	7dfb      	ldrb	r3, [r7, #23]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d12f      	bne.n	80119b8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6a1b      	ldr	r3, [r3, #32]
 801195c:	781b      	ldrb	r3, [r3, #0]
 801195e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011960:	7bfb      	ldrb	r3, [r7, #15]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d102      	bne.n	801196c <dir_find+0x4e>
 8011966:	2304      	movs	r3, #4
 8011968:	75fb      	strb	r3, [r7, #23]
 801196a:	e028      	b.n	80119be <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6a1b      	ldr	r3, [r3, #32]
 8011970:	330b      	adds	r3, #11
 8011972:	781b      	ldrb	r3, [r3, #0]
 8011974:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011978:	b2da      	uxtb	r2, r3
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	6a1b      	ldr	r3, [r3, #32]
 8011982:	330b      	adds	r3, #11
 8011984:	781b      	ldrb	r3, [r3, #0]
 8011986:	f003 0308 	and.w	r3, r3, #8
 801198a:	2b00      	cmp	r3, #0
 801198c:	d10a      	bne.n	80119a4 <dir_find+0x86>
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6a18      	ldr	r0, [r3, #32]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	3324      	adds	r3, #36	@ 0x24
 8011996:	220b      	movs	r2, #11
 8011998:	4619      	mov	r1, r3
 801199a:	f7ff f88b 	bl	8010ab4 <mem_cmp>
 801199e:	4603      	mov	r3, r0
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d00b      	beq.n	80119bc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80119a4:	2100      	movs	r1, #0
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f7ff fe6e 	bl	8011688 <dir_next>
 80119ac:	4603      	mov	r3, r0
 80119ae:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80119b0:	7dfb      	ldrb	r3, [r7, #23]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d0c5      	beq.n	8011942 <dir_find+0x24>
 80119b6:	e002      	b.n	80119be <dir_find+0xa0>
		if (res != FR_OK) break;
 80119b8:	bf00      	nop
 80119ba:	e000      	b.n	80119be <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80119bc:	bf00      	nop

	return res;
 80119be:	7dfb      	ldrb	r3, [r7, #23]
}
 80119c0:	4618      	mov	r0, r3
 80119c2:	3718      	adds	r7, #24
 80119c4:	46bd      	mov	sp, r7
 80119c6:	bd80      	pop	{r7, pc}

080119c8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b084      	sub	sp, #16
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80119d6:	2101      	movs	r1, #1
 80119d8:	6878      	ldr	r0, [r7, #4]
 80119da:	f7ff ff1a 	bl	8011812 <dir_alloc>
 80119de:	4603      	mov	r3, r0
 80119e0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80119e2:	7bfb      	ldrb	r3, [r7, #15]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d11c      	bne.n	8011a22 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	69db      	ldr	r3, [r3, #28]
 80119ec:	4619      	mov	r1, r3
 80119ee:	68b8      	ldr	r0, [r7, #8]
 80119f0:	f7ff fa52 	bl	8010e98 <move_window>
 80119f4:	4603      	mov	r3, r0
 80119f6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80119f8:	7bfb      	ldrb	r3, [r7, #15]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d111      	bne.n	8011a22 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6a1b      	ldr	r3, [r3, #32]
 8011a02:	2220      	movs	r2, #32
 8011a04:	2100      	movs	r1, #0
 8011a06:	4618      	mov	r0, r3
 8011a08:	f7ff f839 	bl	8010a7e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	6a18      	ldr	r0, [r3, #32]
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	3324      	adds	r3, #36	@ 0x24
 8011a14:	220b      	movs	r2, #11
 8011a16:	4619      	mov	r1, r3
 8011a18:	f7ff f810 	bl	8010a3c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011a1c:	68bb      	ldr	r3, [r7, #8]
 8011a1e:	2201      	movs	r2, #1
 8011a20:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a24:	4618      	mov	r0, r3
 8011a26:	3710      	adds	r7, #16
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}

08011a2c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b088      	sub	sp, #32
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
 8011a34:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	60fb      	str	r3, [r7, #12]
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	3324      	adds	r3, #36	@ 0x24
 8011a40:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011a42:	220b      	movs	r2, #11
 8011a44:	2120      	movs	r1, #32
 8011a46:	68b8      	ldr	r0, [r7, #8]
 8011a48:	f7ff f819 	bl	8010a7e <mem_set>
	si = i = 0; ni = 8;
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	613b      	str	r3, [r7, #16]
 8011a50:	693b      	ldr	r3, [r7, #16]
 8011a52:	61fb      	str	r3, [r7, #28]
 8011a54:	2308      	movs	r3, #8
 8011a56:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011a58:	69fb      	ldr	r3, [r7, #28]
 8011a5a:	1c5a      	adds	r2, r3, #1
 8011a5c:	61fa      	str	r2, [r7, #28]
 8011a5e:	68fa      	ldr	r2, [r7, #12]
 8011a60:	4413      	add	r3, r2
 8011a62:	781b      	ldrb	r3, [r3, #0]
 8011a64:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011a66:	7efb      	ldrb	r3, [r7, #27]
 8011a68:	2b20      	cmp	r3, #32
 8011a6a:	d94e      	bls.n	8011b0a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011a6c:	7efb      	ldrb	r3, [r7, #27]
 8011a6e:	2b2f      	cmp	r3, #47	@ 0x2f
 8011a70:	d006      	beq.n	8011a80 <create_name+0x54>
 8011a72:	7efb      	ldrb	r3, [r7, #27]
 8011a74:	2b5c      	cmp	r3, #92	@ 0x5c
 8011a76:	d110      	bne.n	8011a9a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011a78:	e002      	b.n	8011a80 <create_name+0x54>
 8011a7a:	69fb      	ldr	r3, [r7, #28]
 8011a7c:	3301      	adds	r3, #1
 8011a7e:	61fb      	str	r3, [r7, #28]
 8011a80:	68fa      	ldr	r2, [r7, #12]
 8011a82:	69fb      	ldr	r3, [r7, #28]
 8011a84:	4413      	add	r3, r2
 8011a86:	781b      	ldrb	r3, [r3, #0]
 8011a88:	2b2f      	cmp	r3, #47	@ 0x2f
 8011a8a:	d0f6      	beq.n	8011a7a <create_name+0x4e>
 8011a8c:	68fa      	ldr	r2, [r7, #12]
 8011a8e:	69fb      	ldr	r3, [r7, #28]
 8011a90:	4413      	add	r3, r2
 8011a92:	781b      	ldrb	r3, [r3, #0]
 8011a94:	2b5c      	cmp	r3, #92	@ 0x5c
 8011a96:	d0f0      	beq.n	8011a7a <create_name+0x4e>
			break;
 8011a98:	e038      	b.n	8011b0c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011a9a:	7efb      	ldrb	r3, [r7, #27]
 8011a9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8011a9e:	d003      	beq.n	8011aa8 <create_name+0x7c>
 8011aa0:	693a      	ldr	r2, [r7, #16]
 8011aa2:	697b      	ldr	r3, [r7, #20]
 8011aa4:	429a      	cmp	r2, r3
 8011aa6:	d30c      	bcc.n	8011ac2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011aa8:	697b      	ldr	r3, [r7, #20]
 8011aaa:	2b0b      	cmp	r3, #11
 8011aac:	d002      	beq.n	8011ab4 <create_name+0x88>
 8011aae:	7efb      	ldrb	r3, [r7, #27]
 8011ab0:	2b2e      	cmp	r3, #46	@ 0x2e
 8011ab2:	d001      	beq.n	8011ab8 <create_name+0x8c>
 8011ab4:	2306      	movs	r3, #6
 8011ab6:	e044      	b.n	8011b42 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011ab8:	2308      	movs	r3, #8
 8011aba:	613b      	str	r3, [r7, #16]
 8011abc:	230b      	movs	r3, #11
 8011abe:	617b      	str	r3, [r7, #20]
			continue;
 8011ac0:	e022      	b.n	8011b08 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011ac2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	da04      	bge.n	8011ad4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011aca:	7efb      	ldrb	r3, [r7, #27]
 8011acc:	3b80      	subs	r3, #128	@ 0x80
 8011ace:	4a1f      	ldr	r2, [pc, #124]	@ (8011b4c <create_name+0x120>)
 8011ad0:	5cd3      	ldrb	r3, [r2, r3]
 8011ad2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011ad4:	7efb      	ldrb	r3, [r7, #27]
 8011ad6:	4619      	mov	r1, r3
 8011ad8:	481d      	ldr	r0, [pc, #116]	@ (8011b50 <create_name+0x124>)
 8011ada:	f7ff f812 	bl	8010b02 <chk_chr>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d001      	beq.n	8011ae8 <create_name+0xbc>
 8011ae4:	2306      	movs	r3, #6
 8011ae6:	e02c      	b.n	8011b42 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011ae8:	7efb      	ldrb	r3, [r7, #27]
 8011aea:	2b60      	cmp	r3, #96	@ 0x60
 8011aec:	d905      	bls.n	8011afa <create_name+0xce>
 8011aee:	7efb      	ldrb	r3, [r7, #27]
 8011af0:	2b7a      	cmp	r3, #122	@ 0x7a
 8011af2:	d802      	bhi.n	8011afa <create_name+0xce>
 8011af4:	7efb      	ldrb	r3, [r7, #27]
 8011af6:	3b20      	subs	r3, #32
 8011af8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8011afa:	693b      	ldr	r3, [r7, #16]
 8011afc:	1c5a      	adds	r2, r3, #1
 8011afe:	613a      	str	r2, [r7, #16]
 8011b00:	68ba      	ldr	r2, [r7, #8]
 8011b02:	4413      	add	r3, r2
 8011b04:	7efa      	ldrb	r2, [r7, #27]
 8011b06:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011b08:	e7a6      	b.n	8011a58 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011b0a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011b0c:	68fa      	ldr	r2, [r7, #12]
 8011b0e:	69fb      	ldr	r3, [r7, #28]
 8011b10:	441a      	add	r2, r3
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d101      	bne.n	8011b20 <create_name+0xf4>
 8011b1c:	2306      	movs	r3, #6
 8011b1e:	e010      	b.n	8011b42 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011b20:	68bb      	ldr	r3, [r7, #8]
 8011b22:	781b      	ldrb	r3, [r3, #0]
 8011b24:	2be5      	cmp	r3, #229	@ 0xe5
 8011b26:	d102      	bne.n	8011b2e <create_name+0x102>
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	2205      	movs	r2, #5
 8011b2c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011b2e:	7efb      	ldrb	r3, [r7, #27]
 8011b30:	2b20      	cmp	r3, #32
 8011b32:	d801      	bhi.n	8011b38 <create_name+0x10c>
 8011b34:	2204      	movs	r2, #4
 8011b36:	e000      	b.n	8011b3a <create_name+0x10e>
 8011b38:	2200      	movs	r2, #0
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	330b      	adds	r3, #11
 8011b3e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011b40:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	3720      	adds	r7, #32
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}
 8011b4a:	bf00      	nop
 8011b4c:	08014828 	.word	0x08014828
 8011b50:	08014724 	.word	0x08014724

08011b54 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b086      	sub	sp, #24
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
 8011b5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011b62:	693b      	ldr	r3, [r7, #16]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011b68:	e002      	b.n	8011b70 <follow_path+0x1c>
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	3301      	adds	r3, #1
 8011b6e:	603b      	str	r3, [r7, #0]
 8011b70:	683b      	ldr	r3, [r7, #0]
 8011b72:	781b      	ldrb	r3, [r3, #0]
 8011b74:	2b2f      	cmp	r3, #47	@ 0x2f
 8011b76:	d0f8      	beq.n	8011b6a <follow_path+0x16>
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	781b      	ldrb	r3, [r3, #0]
 8011b7c:	2b5c      	cmp	r3, #92	@ 0x5c
 8011b7e:	d0f4      	beq.n	8011b6a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011b80:	693b      	ldr	r3, [r7, #16]
 8011b82:	2200      	movs	r2, #0
 8011b84:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	781b      	ldrb	r3, [r3, #0]
 8011b8a:	2b1f      	cmp	r3, #31
 8011b8c:	d80a      	bhi.n	8011ba4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	2280      	movs	r2, #128	@ 0x80
 8011b92:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8011b96:	2100      	movs	r1, #0
 8011b98:	6878      	ldr	r0, [r7, #4]
 8011b9a:	f7ff fcfa 	bl	8011592 <dir_sdi>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	75fb      	strb	r3, [r7, #23]
 8011ba2:	e043      	b.n	8011c2c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011ba4:	463b      	mov	r3, r7
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f7ff ff3f 	bl	8011a2c <create_name>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011bb2:	7dfb      	ldrb	r3, [r7, #23]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d134      	bne.n	8011c22 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f7ff feb0 	bl	801191e <dir_find>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011bc8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011bca:	7dfb      	ldrb	r3, [r7, #23]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d00a      	beq.n	8011be6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011bd0:	7dfb      	ldrb	r3, [r7, #23]
 8011bd2:	2b04      	cmp	r3, #4
 8011bd4:	d127      	bne.n	8011c26 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011bd6:	7afb      	ldrb	r3, [r7, #11]
 8011bd8:	f003 0304 	and.w	r3, r3, #4
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d122      	bne.n	8011c26 <follow_path+0xd2>
 8011be0:	2305      	movs	r3, #5
 8011be2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011be4:	e01f      	b.n	8011c26 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011be6:	7afb      	ldrb	r3, [r7, #11]
 8011be8:	f003 0304 	and.w	r3, r3, #4
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d11c      	bne.n	8011c2a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011bf0:	693b      	ldr	r3, [r7, #16]
 8011bf2:	799b      	ldrb	r3, [r3, #6]
 8011bf4:	f003 0310 	and.w	r3, r3, #16
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d102      	bne.n	8011c02 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011bfc:	2305      	movs	r3, #5
 8011bfe:	75fb      	strb	r3, [r7, #23]
 8011c00:	e014      	b.n	8011c2c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	695b      	ldr	r3, [r3, #20]
 8011c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c10:	4413      	add	r3, r2
 8011c12:	4619      	mov	r1, r3
 8011c14:	68f8      	ldr	r0, [r7, #12]
 8011c16:	f7ff fe43 	bl	80118a0 <ld_clust>
 8011c1a:	4602      	mov	r2, r0
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011c20:	e7c0      	b.n	8011ba4 <follow_path+0x50>
			if (res != FR_OK) break;
 8011c22:	bf00      	nop
 8011c24:	e002      	b.n	8011c2c <follow_path+0xd8>
				break;
 8011c26:	bf00      	nop
 8011c28:	e000      	b.n	8011c2c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011c2a:	bf00      	nop
			}
		}
	}

	return res;
 8011c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c2e:	4618      	mov	r0, r3
 8011c30:	3718      	adds	r7, #24
 8011c32:	46bd      	mov	sp, r7
 8011c34:	bd80      	pop	{r7, pc}

08011c36 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011c36:	b480      	push	{r7}
 8011c38:	b087      	sub	sp, #28
 8011c3a:	af00      	add	r7, sp, #0
 8011c3c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8011c42:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d031      	beq.n	8011cb0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	617b      	str	r3, [r7, #20]
 8011c52:	e002      	b.n	8011c5a <get_ldnumber+0x24>
 8011c54:	697b      	ldr	r3, [r7, #20]
 8011c56:	3301      	adds	r3, #1
 8011c58:	617b      	str	r3, [r7, #20]
 8011c5a:	697b      	ldr	r3, [r7, #20]
 8011c5c:	781b      	ldrb	r3, [r3, #0]
 8011c5e:	2b20      	cmp	r3, #32
 8011c60:	d903      	bls.n	8011c6a <get_ldnumber+0x34>
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	781b      	ldrb	r3, [r3, #0]
 8011c66:	2b3a      	cmp	r3, #58	@ 0x3a
 8011c68:	d1f4      	bne.n	8011c54 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	781b      	ldrb	r3, [r3, #0]
 8011c6e:	2b3a      	cmp	r3, #58	@ 0x3a
 8011c70:	d11c      	bne.n	8011cac <get_ldnumber+0x76>
			tp = *path;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	1c5a      	adds	r2, r3, #1
 8011c7c:	60fa      	str	r2, [r7, #12]
 8011c7e:	781b      	ldrb	r3, [r3, #0]
 8011c80:	3b30      	subs	r3, #48	@ 0x30
 8011c82:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011c84:	68bb      	ldr	r3, [r7, #8]
 8011c86:	2b09      	cmp	r3, #9
 8011c88:	d80e      	bhi.n	8011ca8 <get_ldnumber+0x72>
 8011c8a:	68fa      	ldr	r2, [r7, #12]
 8011c8c:	697b      	ldr	r3, [r7, #20]
 8011c8e:	429a      	cmp	r2, r3
 8011c90:	d10a      	bne.n	8011ca8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011c92:	68bb      	ldr	r3, [r7, #8]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d107      	bne.n	8011ca8 <get_ldnumber+0x72>
					vol = (int)i;
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011c9c:	697b      	ldr	r3, [r7, #20]
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	617b      	str	r3, [r7, #20]
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	697a      	ldr	r2, [r7, #20]
 8011ca6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011ca8:	693b      	ldr	r3, [r7, #16]
 8011caa:	e002      	b.n	8011cb2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011cac:	2300      	movs	r3, #0
 8011cae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011cb0:	693b      	ldr	r3, [r7, #16]
}
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	371c      	adds	r7, #28
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbc:	4770      	bx	lr
	...

08011cc0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b082      	sub	sp, #8
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
 8011cc8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	2200      	movs	r2, #0
 8011cce:	70da      	strb	r2, [r3, #3]
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8011cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011cd8:	6839      	ldr	r1, [r7, #0]
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f7ff f8dc 	bl	8010e98 <move_window>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d001      	beq.n	8011cea <check_fs+0x2a>
 8011ce6:	2304      	movs	r3, #4
 8011ce8:	e038      	b.n	8011d5c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	3330      	adds	r3, #48	@ 0x30
 8011cee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f7fe fe20 	bl	8010938 <ld_word>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011d00:	429a      	cmp	r2, r3
 8011d02:	d001      	beq.n	8011d08 <check_fs+0x48>
 8011d04:	2303      	movs	r3, #3
 8011d06:	e029      	b.n	8011d5c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011d0e:	2be9      	cmp	r3, #233	@ 0xe9
 8011d10:	d009      	beq.n	8011d26 <check_fs+0x66>
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011d18:	2beb      	cmp	r3, #235	@ 0xeb
 8011d1a:	d11e      	bne.n	8011d5a <check_fs+0x9a>
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8011d22:	2b90      	cmp	r3, #144	@ 0x90
 8011d24:	d119      	bne.n	8011d5a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	3330      	adds	r3, #48	@ 0x30
 8011d2a:	3336      	adds	r3, #54	@ 0x36
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f7fe fe1b 	bl	8010968 <ld_dword>
 8011d32:	4603      	mov	r3, r0
 8011d34:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8011d38:	4a0a      	ldr	r2, [pc, #40]	@ (8011d64 <check_fs+0xa4>)
 8011d3a:	4293      	cmp	r3, r2
 8011d3c:	d101      	bne.n	8011d42 <check_fs+0x82>
 8011d3e:	2300      	movs	r3, #0
 8011d40:	e00c      	b.n	8011d5c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	3330      	adds	r3, #48	@ 0x30
 8011d46:	3352      	adds	r3, #82	@ 0x52
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f7fe fe0d 	bl	8010968 <ld_dword>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	4a05      	ldr	r2, [pc, #20]	@ (8011d68 <check_fs+0xa8>)
 8011d52:	4293      	cmp	r3, r2
 8011d54:	d101      	bne.n	8011d5a <check_fs+0x9a>
 8011d56:	2300      	movs	r3, #0
 8011d58:	e000      	b.n	8011d5c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011d5a:	2302      	movs	r3, #2
}
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	3708      	adds	r7, #8
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}
 8011d64:	00544146 	.word	0x00544146
 8011d68:	33544146 	.word	0x33544146

08011d6c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b096      	sub	sp, #88	@ 0x58
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	60f8      	str	r0, [r7, #12]
 8011d74:	60b9      	str	r1, [r7, #8]
 8011d76:	4613      	mov	r3, r2
 8011d78:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011d80:	68f8      	ldr	r0, [r7, #12]
 8011d82:	f7ff ff58 	bl	8011c36 <get_ldnumber>
 8011d86:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	da01      	bge.n	8011d92 <find_volume+0x26>
 8011d8e:	230b      	movs	r3, #11
 8011d90:	e22d      	b.n	80121ee <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011d92:	4aa1      	ldr	r2, [pc, #644]	@ (8012018 <find_volume+0x2ac>)
 8011d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d101      	bne.n	8011da6 <find_volume+0x3a>
 8011da2:	230c      	movs	r3, #12
 8011da4:	e223      	b.n	80121ee <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011daa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011dac:	79fb      	ldrb	r3, [r7, #7]
 8011dae:	f023 0301 	bic.w	r3, r3, #1
 8011db2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011db6:	781b      	ldrb	r3, [r3, #0]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d01a      	beq.n	8011df2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dbe:	785b      	ldrb	r3, [r3, #1]
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7fe fd19 	bl	80107f8 <disk_status>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011dcc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011dd0:	f003 0301 	and.w	r3, r3, #1
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d10c      	bne.n	8011df2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011dd8:	79fb      	ldrb	r3, [r7, #7]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d007      	beq.n	8011dee <find_volume+0x82>
 8011dde:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011de2:	f003 0304 	and.w	r3, r3, #4
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d001      	beq.n	8011dee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011dea:	230a      	movs	r3, #10
 8011dec:	e1ff      	b.n	80121ee <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8011dee:	2300      	movs	r3, #0
 8011df0:	e1fd      	b.n	80121ee <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011df4:	2200      	movs	r2, #0
 8011df6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011df8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011dfa:	b2da      	uxtb	r2, r3
 8011dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dfe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e02:	785b      	ldrb	r3, [r3, #1]
 8011e04:	4618      	mov	r0, r3
 8011e06:	f7fe fd11 	bl	801082c <disk_initialize>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011e10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011e14:	f003 0301 	and.w	r3, r3, #1
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d001      	beq.n	8011e20 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011e1c:	2303      	movs	r3, #3
 8011e1e:	e1e6      	b.n	80121ee <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011e20:	79fb      	ldrb	r3, [r7, #7]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d007      	beq.n	8011e36 <find_volume+0xca>
 8011e26:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011e2a:	f003 0304 	and.w	r3, r3, #4
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d001      	beq.n	8011e36 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011e32:	230a      	movs	r3, #10
 8011e34:	e1db      	b.n	80121ee <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011e36:	2300      	movs	r3, #0
 8011e38:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011e3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011e3c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011e3e:	f7ff ff3f 	bl	8011cc0 <check_fs>
 8011e42:	4603      	mov	r3, r0
 8011e44:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011e48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011e4c:	2b02      	cmp	r3, #2
 8011e4e:	d149      	bne.n	8011ee4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011e50:	2300      	movs	r3, #0
 8011e52:	643b      	str	r3, [r7, #64]	@ 0x40
 8011e54:	e01e      	b.n	8011e94 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e58:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011e5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011e5e:	011b      	lsls	r3, r3, #4
 8011e60:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8011e64:	4413      	add	r3, r2
 8011e66:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e6a:	3304      	adds	r3, #4
 8011e6c:	781b      	ldrb	r3, [r3, #0]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d006      	beq.n	8011e80 <find_volume+0x114>
 8011e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e74:	3308      	adds	r3, #8
 8011e76:	4618      	mov	r0, r3
 8011e78:	f7fe fd76 	bl	8010968 <ld_dword>
 8011e7c:	4602      	mov	r2, r0
 8011e7e:	e000      	b.n	8011e82 <find_volume+0x116>
 8011e80:	2200      	movs	r2, #0
 8011e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011e84:	009b      	lsls	r3, r3, #2
 8011e86:	3358      	adds	r3, #88	@ 0x58
 8011e88:	443b      	add	r3, r7
 8011e8a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011e90:	3301      	adds	r3, #1
 8011e92:	643b      	str	r3, [r7, #64]	@ 0x40
 8011e94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011e96:	2b03      	cmp	r3, #3
 8011e98:	d9dd      	bls.n	8011e56 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8011e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d002      	beq.n	8011eaa <find_volume+0x13e>
 8011ea4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ea6:	3b01      	subs	r3, #1
 8011ea8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011eaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011eac:	009b      	lsls	r3, r3, #2
 8011eae:	3358      	adds	r3, #88	@ 0x58
 8011eb0:	443b      	add	r3, r7
 8011eb2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011eb6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011eb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d005      	beq.n	8011eca <find_volume+0x15e>
 8011ebe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011ec0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011ec2:	f7ff fefd 	bl	8011cc0 <check_fs>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	e000      	b.n	8011ecc <find_volume+0x160>
 8011eca:	2303      	movs	r3, #3
 8011ecc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011ed0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011ed4:	2b01      	cmp	r3, #1
 8011ed6:	d905      	bls.n	8011ee4 <find_volume+0x178>
 8011ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011eda:	3301      	adds	r3, #1
 8011edc:	643b      	str	r3, [r7, #64]	@ 0x40
 8011ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ee0:	2b03      	cmp	r3, #3
 8011ee2:	d9e2      	bls.n	8011eaa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011ee4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011ee8:	2b04      	cmp	r3, #4
 8011eea:	d101      	bne.n	8011ef0 <find_volume+0x184>
 8011eec:	2301      	movs	r3, #1
 8011eee:	e17e      	b.n	80121ee <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011ef0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011ef4:	2b01      	cmp	r3, #1
 8011ef6:	d901      	bls.n	8011efc <find_volume+0x190>
 8011ef8:	230d      	movs	r3, #13
 8011efa:	e178      	b.n	80121ee <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011efe:	3330      	adds	r3, #48	@ 0x30
 8011f00:	330b      	adds	r3, #11
 8011f02:	4618      	mov	r0, r3
 8011f04:	f7fe fd18 	bl	8010938 <ld_word>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011f0e:	d001      	beq.n	8011f14 <find_volume+0x1a8>
 8011f10:	230d      	movs	r3, #13
 8011f12:	e16c      	b.n	80121ee <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f16:	3330      	adds	r3, #48	@ 0x30
 8011f18:	3316      	adds	r3, #22
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7fe fd0c 	bl	8010938 <ld_word>
 8011f20:	4603      	mov	r3, r0
 8011f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011f24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d106      	bne.n	8011f38 <find_volume+0x1cc>
 8011f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f2c:	3330      	adds	r3, #48	@ 0x30
 8011f2e:	3324      	adds	r3, #36	@ 0x24
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7fe fd19 	bl	8010968 <ld_dword>
 8011f36:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8011f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011f3c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f40:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8011f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f46:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f4a:	789b      	ldrb	r3, [r3, #2]
 8011f4c:	2b01      	cmp	r3, #1
 8011f4e:	d005      	beq.n	8011f5c <find_volume+0x1f0>
 8011f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f52:	789b      	ldrb	r3, [r3, #2]
 8011f54:	2b02      	cmp	r3, #2
 8011f56:	d001      	beq.n	8011f5c <find_volume+0x1f0>
 8011f58:	230d      	movs	r3, #13
 8011f5a:	e148      	b.n	80121ee <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f5e:	789b      	ldrb	r3, [r3, #2]
 8011f60:	461a      	mov	r2, r3
 8011f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f64:	fb02 f303 	mul.w	r3, r2, r3
 8011f68:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011f70:	461a      	mov	r2, r3
 8011f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f74:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f78:	895b      	ldrh	r3, [r3, #10]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d008      	beq.n	8011f90 <find_volume+0x224>
 8011f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f80:	895b      	ldrh	r3, [r3, #10]
 8011f82:	461a      	mov	r2, r3
 8011f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f86:	895b      	ldrh	r3, [r3, #10]
 8011f88:	3b01      	subs	r3, #1
 8011f8a:	4013      	ands	r3, r2
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d001      	beq.n	8011f94 <find_volume+0x228>
 8011f90:	230d      	movs	r3, #13
 8011f92:	e12c      	b.n	80121ee <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f96:	3330      	adds	r3, #48	@ 0x30
 8011f98:	3311      	adds	r3, #17
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f7fe fccc 	bl	8010938 <ld_word>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	461a      	mov	r2, r3
 8011fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fa6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011faa:	891b      	ldrh	r3, [r3, #8]
 8011fac:	f003 030f 	and.w	r3, r3, #15
 8011fb0:	b29b      	uxth	r3, r3
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d001      	beq.n	8011fba <find_volume+0x24e>
 8011fb6:	230d      	movs	r3, #13
 8011fb8:	e119      	b.n	80121ee <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fbc:	3330      	adds	r3, #48	@ 0x30
 8011fbe:	3313      	adds	r3, #19
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f7fe fcb9 	bl	8010938 <ld_word>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d106      	bne.n	8011fde <find_volume+0x272>
 8011fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fd2:	3330      	adds	r3, #48	@ 0x30
 8011fd4:	3320      	adds	r3, #32
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f7fe fcc6 	bl	8010968 <ld_dword>
 8011fdc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fe0:	3330      	adds	r3, #48	@ 0x30
 8011fe2:	330e      	adds	r3, #14
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f7fe fca7 	bl	8010938 <ld_word>
 8011fea:	4603      	mov	r3, r0
 8011fec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011fee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d101      	bne.n	8011ff8 <find_volume+0x28c>
 8011ff4:	230d      	movs	r3, #13
 8011ff6:	e0fa      	b.n	80121ee <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011ff8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ffc:	4413      	add	r3, r2
 8011ffe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012000:	8912      	ldrh	r2, [r2, #8]
 8012002:	0912      	lsrs	r2, r2, #4
 8012004:	b292      	uxth	r2, r2
 8012006:	4413      	add	r3, r2
 8012008:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801200a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801200c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801200e:	429a      	cmp	r2, r3
 8012010:	d204      	bcs.n	801201c <find_volume+0x2b0>
 8012012:	230d      	movs	r3, #13
 8012014:	e0eb      	b.n	80121ee <find_volume+0x482>
 8012016:	bf00      	nop
 8012018:	24000b88 	.word	0x24000b88
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801201c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801201e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012020:	1ad3      	subs	r3, r2, r3
 8012022:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012024:	8952      	ldrh	r2, [r2, #10]
 8012026:	fbb3 f3f2 	udiv	r3, r3, r2
 801202a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801202e:	2b00      	cmp	r3, #0
 8012030:	d101      	bne.n	8012036 <find_volume+0x2ca>
 8012032:	230d      	movs	r3, #13
 8012034:	e0db      	b.n	80121ee <find_volume+0x482>
		fmt = FS_FAT32;
 8012036:	2303      	movs	r3, #3
 8012038:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801203c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801203e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8012042:	4293      	cmp	r3, r2
 8012044:	d802      	bhi.n	801204c <find_volume+0x2e0>
 8012046:	2302      	movs	r3, #2
 8012048:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801204e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8012052:	4293      	cmp	r3, r2
 8012054:	d802      	bhi.n	801205c <find_volume+0x2f0>
 8012056:	2301      	movs	r3, #1
 8012058:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801205c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801205e:	1c9a      	adds	r2, r3, #2
 8012060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012062:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8012064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012066:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012068:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801206a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801206c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801206e:	441a      	add	r2, r3
 8012070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012072:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8012074:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012078:	441a      	add	r2, r3
 801207a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801207c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 801207e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012082:	2b03      	cmp	r3, #3
 8012084:	d11e      	bne.n	80120c4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012088:	3330      	adds	r3, #48	@ 0x30
 801208a:	332a      	adds	r3, #42	@ 0x2a
 801208c:	4618      	mov	r0, r3
 801208e:	f7fe fc53 	bl	8010938 <ld_word>
 8012092:	4603      	mov	r3, r0
 8012094:	2b00      	cmp	r3, #0
 8012096:	d001      	beq.n	801209c <find_volume+0x330>
 8012098:	230d      	movs	r3, #13
 801209a:	e0a8      	b.n	80121ee <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801209c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801209e:	891b      	ldrh	r3, [r3, #8]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d001      	beq.n	80120a8 <find_volume+0x33c>
 80120a4:	230d      	movs	r3, #13
 80120a6:	e0a2      	b.n	80121ee <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80120a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120aa:	3330      	adds	r3, #48	@ 0x30
 80120ac:	332c      	adds	r3, #44	@ 0x2c
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7fe fc5a 	bl	8010968 <ld_dword>
 80120b4:	4602      	mov	r2, r0
 80120b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120b8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80120ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120bc:	695b      	ldr	r3, [r3, #20]
 80120be:	009b      	lsls	r3, r3, #2
 80120c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80120c2:	e01f      	b.n	8012104 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80120c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120c6:	891b      	ldrh	r3, [r3, #8]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d101      	bne.n	80120d0 <find_volume+0x364>
 80120cc:	230d      	movs	r3, #13
 80120ce:	e08e      	b.n	80121ee <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80120d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120d2:	6a1a      	ldr	r2, [r3, #32]
 80120d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120d6:	441a      	add	r2, r3
 80120d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120da:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80120dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80120e0:	2b02      	cmp	r3, #2
 80120e2:	d103      	bne.n	80120ec <find_volume+0x380>
 80120e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120e6:	695b      	ldr	r3, [r3, #20]
 80120e8:	005b      	lsls	r3, r3, #1
 80120ea:	e00a      	b.n	8012102 <find_volume+0x396>
 80120ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120ee:	695a      	ldr	r2, [r3, #20]
 80120f0:	4613      	mov	r3, r2
 80120f2:	005b      	lsls	r3, r3, #1
 80120f4:	4413      	add	r3, r2
 80120f6:	085a      	lsrs	r2, r3, #1
 80120f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120fa:	695b      	ldr	r3, [r3, #20]
 80120fc:	f003 0301 	and.w	r3, r3, #1
 8012100:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012102:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012106:	699a      	ldr	r2, [r3, #24]
 8012108:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801210a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801210e:	0a5b      	lsrs	r3, r3, #9
 8012110:	429a      	cmp	r2, r3
 8012112:	d201      	bcs.n	8012118 <find_volume+0x3ac>
 8012114:	230d      	movs	r3, #13
 8012116:	e06a      	b.n	80121ee <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801211a:	f04f 32ff 	mov.w	r2, #4294967295
 801211e:	611a      	str	r2, [r3, #16]
 8012120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012122:	691a      	ldr	r2, [r3, #16]
 8012124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012126:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8012128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801212a:	2280      	movs	r2, #128	@ 0x80
 801212c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801212e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012132:	2b03      	cmp	r3, #3
 8012134:	d149      	bne.n	80121ca <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012138:	3330      	adds	r3, #48	@ 0x30
 801213a:	3330      	adds	r3, #48	@ 0x30
 801213c:	4618      	mov	r0, r3
 801213e:	f7fe fbfb 	bl	8010938 <ld_word>
 8012142:	4603      	mov	r3, r0
 8012144:	2b01      	cmp	r3, #1
 8012146:	d140      	bne.n	80121ca <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801214a:	3301      	adds	r3, #1
 801214c:	4619      	mov	r1, r3
 801214e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012150:	f7fe fea2 	bl	8010e98 <move_window>
 8012154:	4603      	mov	r3, r0
 8012156:	2b00      	cmp	r3, #0
 8012158:	d137      	bne.n	80121ca <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801215a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801215c:	2200      	movs	r2, #0
 801215e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012162:	3330      	adds	r3, #48	@ 0x30
 8012164:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012168:	4618      	mov	r0, r3
 801216a:	f7fe fbe5 	bl	8010938 <ld_word>
 801216e:	4603      	mov	r3, r0
 8012170:	461a      	mov	r2, r3
 8012172:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012176:	429a      	cmp	r2, r3
 8012178:	d127      	bne.n	80121ca <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801217a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801217c:	3330      	adds	r3, #48	@ 0x30
 801217e:	4618      	mov	r0, r3
 8012180:	f7fe fbf2 	bl	8010968 <ld_dword>
 8012184:	4603      	mov	r3, r0
 8012186:	4a1c      	ldr	r2, [pc, #112]	@ (80121f8 <find_volume+0x48c>)
 8012188:	4293      	cmp	r3, r2
 801218a:	d11e      	bne.n	80121ca <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801218c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801218e:	3330      	adds	r3, #48	@ 0x30
 8012190:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012194:	4618      	mov	r0, r3
 8012196:	f7fe fbe7 	bl	8010968 <ld_dword>
 801219a:	4603      	mov	r3, r0
 801219c:	4a17      	ldr	r2, [pc, #92]	@ (80121fc <find_volume+0x490>)
 801219e:	4293      	cmp	r3, r2
 80121a0:	d113      	bne.n	80121ca <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80121a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121a4:	3330      	adds	r3, #48	@ 0x30
 80121a6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80121aa:	4618      	mov	r0, r3
 80121ac:	f7fe fbdc 	bl	8010968 <ld_dword>
 80121b0:	4602      	mov	r2, r0
 80121b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121b4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80121b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121b8:	3330      	adds	r3, #48	@ 0x30
 80121ba:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80121be:	4618      	mov	r0, r3
 80121c0:	f7fe fbd2 	bl	8010968 <ld_dword>
 80121c4:	4602      	mov	r2, r0
 80121c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121c8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80121ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121cc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80121d0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80121d2:	4b0b      	ldr	r3, [pc, #44]	@ (8012200 <find_volume+0x494>)
 80121d4:	881b      	ldrh	r3, [r3, #0]
 80121d6:	3301      	adds	r3, #1
 80121d8:	b29a      	uxth	r2, r3
 80121da:	4b09      	ldr	r3, [pc, #36]	@ (8012200 <find_volume+0x494>)
 80121dc:	801a      	strh	r2, [r3, #0]
 80121de:	4b08      	ldr	r3, [pc, #32]	@ (8012200 <find_volume+0x494>)
 80121e0:	881a      	ldrh	r2, [r3, #0]
 80121e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121e4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80121e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80121e8:	f7fe fdee 	bl	8010dc8 <clear_lock>
#endif
	return FR_OK;
 80121ec:	2300      	movs	r3, #0
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	3758      	adds	r7, #88	@ 0x58
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}
 80121f6:	bf00      	nop
 80121f8:	41615252 	.word	0x41615252
 80121fc:	61417272 	.word	0x61417272
 8012200:	24000b8c 	.word	0x24000b8c

08012204 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b084      	sub	sp, #16
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
 801220c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801220e:	2309      	movs	r3, #9
 8012210:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d01c      	beq.n	8012252 <validate+0x4e>
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d018      	beq.n	8012252 <validate+0x4e>
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	781b      	ldrb	r3, [r3, #0]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d013      	beq.n	8012252 <validate+0x4e>
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	889a      	ldrh	r2, [r3, #4]
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	88db      	ldrh	r3, [r3, #6]
 8012234:	429a      	cmp	r2, r3
 8012236:	d10c      	bne.n	8012252 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	785b      	ldrb	r3, [r3, #1]
 801223e:	4618      	mov	r0, r3
 8012240:	f7fe fada 	bl	80107f8 <disk_status>
 8012244:	4603      	mov	r3, r0
 8012246:	f003 0301 	and.w	r3, r3, #1
 801224a:	2b00      	cmp	r3, #0
 801224c:	d101      	bne.n	8012252 <validate+0x4e>
			res = FR_OK;
 801224e:	2300      	movs	r3, #0
 8012250:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012252:	7bfb      	ldrb	r3, [r7, #15]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d102      	bne.n	801225e <validate+0x5a>
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	e000      	b.n	8012260 <validate+0x5c>
 801225e:	2300      	movs	r3, #0
 8012260:	683a      	ldr	r2, [r7, #0]
 8012262:	6013      	str	r3, [r2, #0]
	return res;
 8012264:	7bfb      	ldrb	r3, [r7, #15]
}
 8012266:	4618      	mov	r0, r3
 8012268:	3710      	adds	r7, #16
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
	...

08012270 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b088      	sub	sp, #32
 8012274:	af00      	add	r7, sp, #0
 8012276:	60f8      	str	r0, [r7, #12]
 8012278:	60b9      	str	r1, [r7, #8]
 801227a:	4613      	mov	r3, r2
 801227c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012282:	f107 0310 	add.w	r3, r7, #16
 8012286:	4618      	mov	r0, r3
 8012288:	f7ff fcd5 	bl	8011c36 <get_ldnumber>
 801228c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801228e:	69fb      	ldr	r3, [r7, #28]
 8012290:	2b00      	cmp	r3, #0
 8012292:	da01      	bge.n	8012298 <f_mount+0x28>
 8012294:	230b      	movs	r3, #11
 8012296:	e02b      	b.n	80122f0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012298:	4a17      	ldr	r2, [pc, #92]	@ (80122f8 <f_mount+0x88>)
 801229a:	69fb      	ldr	r3, [r7, #28]
 801229c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80122a2:	69bb      	ldr	r3, [r7, #24]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d005      	beq.n	80122b4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80122a8:	69b8      	ldr	r0, [r7, #24]
 80122aa:	f7fe fd8d 	bl	8010dc8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80122ae:	69bb      	ldr	r3, [r7, #24]
 80122b0:	2200      	movs	r2, #0
 80122b2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d002      	beq.n	80122c0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	2200      	movs	r2, #0
 80122be:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80122c0:	68fa      	ldr	r2, [r7, #12]
 80122c2:	490d      	ldr	r1, [pc, #52]	@ (80122f8 <f_mount+0x88>)
 80122c4:	69fb      	ldr	r3, [r7, #28]
 80122c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d002      	beq.n	80122d6 <f_mount+0x66>
 80122d0:	79fb      	ldrb	r3, [r7, #7]
 80122d2:	2b01      	cmp	r3, #1
 80122d4:	d001      	beq.n	80122da <f_mount+0x6a>
 80122d6:	2300      	movs	r3, #0
 80122d8:	e00a      	b.n	80122f0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80122da:	f107 010c 	add.w	r1, r7, #12
 80122de:	f107 0308 	add.w	r3, r7, #8
 80122e2:	2200      	movs	r2, #0
 80122e4:	4618      	mov	r0, r3
 80122e6:	f7ff fd41 	bl	8011d6c <find_volume>
 80122ea:	4603      	mov	r3, r0
 80122ec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80122ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	3720      	adds	r7, #32
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}
 80122f8:	24000b88 	.word	0x24000b88

080122fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b098      	sub	sp, #96	@ 0x60
 8012300:	af00      	add	r7, sp, #0
 8012302:	60f8      	str	r0, [r7, #12]
 8012304:	60b9      	str	r1, [r7, #8]
 8012306:	4613      	mov	r3, r2
 8012308:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d101      	bne.n	8012314 <f_open+0x18>
 8012310:	2309      	movs	r3, #9
 8012312:	e1a9      	b.n	8012668 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012314:	79fb      	ldrb	r3, [r7, #7]
 8012316:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801231a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801231c:	79fa      	ldrb	r2, [r7, #7]
 801231e:	f107 0110 	add.w	r1, r7, #16
 8012322:	f107 0308 	add.w	r3, r7, #8
 8012326:	4618      	mov	r0, r3
 8012328:	f7ff fd20 	bl	8011d6c <find_volume>
 801232c:	4603      	mov	r3, r0
 801232e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8012332:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012336:	2b00      	cmp	r3, #0
 8012338:	f040 818d 	bne.w	8012656 <f_open+0x35a>
		dj.obj.fs = fs;
 801233c:	693b      	ldr	r3, [r7, #16]
 801233e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012340:	68ba      	ldr	r2, [r7, #8]
 8012342:	f107 0314 	add.w	r3, r7, #20
 8012346:	4611      	mov	r1, r2
 8012348:	4618      	mov	r0, r3
 801234a:	f7ff fc03 	bl	8011b54 <follow_path>
 801234e:	4603      	mov	r3, r0
 8012350:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012354:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012358:	2b00      	cmp	r3, #0
 801235a:	d118      	bne.n	801238e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801235c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012360:	b25b      	sxtb	r3, r3
 8012362:	2b00      	cmp	r3, #0
 8012364:	da03      	bge.n	801236e <f_open+0x72>
				res = FR_INVALID_NAME;
 8012366:	2306      	movs	r3, #6
 8012368:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801236c:	e00f      	b.n	801238e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801236e:	79fb      	ldrb	r3, [r7, #7]
 8012370:	2b01      	cmp	r3, #1
 8012372:	bf8c      	ite	hi
 8012374:	2301      	movhi	r3, #1
 8012376:	2300      	movls	r3, #0
 8012378:	b2db      	uxtb	r3, r3
 801237a:	461a      	mov	r2, r3
 801237c:	f107 0314 	add.w	r3, r7, #20
 8012380:	4611      	mov	r1, r2
 8012382:	4618      	mov	r0, r3
 8012384:	f7fe fbd8 	bl	8010b38 <chk_lock>
 8012388:	4603      	mov	r3, r0
 801238a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801238e:	79fb      	ldrb	r3, [r7, #7]
 8012390:	f003 031c 	and.w	r3, r3, #28
 8012394:	2b00      	cmp	r3, #0
 8012396:	d07f      	beq.n	8012498 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8012398:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801239c:	2b00      	cmp	r3, #0
 801239e:	d017      	beq.n	80123d0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80123a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80123a4:	2b04      	cmp	r3, #4
 80123a6:	d10e      	bne.n	80123c6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80123a8:	f7fe fc22 	bl	8010bf0 <enq_lock>
 80123ac:	4603      	mov	r3, r0
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d006      	beq.n	80123c0 <f_open+0xc4>
 80123b2:	f107 0314 	add.w	r3, r7, #20
 80123b6:	4618      	mov	r0, r3
 80123b8:	f7ff fb06 	bl	80119c8 <dir_register>
 80123bc:	4603      	mov	r3, r0
 80123be:	e000      	b.n	80123c2 <f_open+0xc6>
 80123c0:	2312      	movs	r3, #18
 80123c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80123c6:	79fb      	ldrb	r3, [r7, #7]
 80123c8:	f043 0308 	orr.w	r3, r3, #8
 80123cc:	71fb      	strb	r3, [r7, #7]
 80123ce:	e010      	b.n	80123f2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80123d0:	7ebb      	ldrb	r3, [r7, #26]
 80123d2:	f003 0311 	and.w	r3, r3, #17
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d003      	beq.n	80123e2 <f_open+0xe6>
					res = FR_DENIED;
 80123da:	2307      	movs	r3, #7
 80123dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80123e0:	e007      	b.n	80123f2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80123e2:	79fb      	ldrb	r3, [r7, #7]
 80123e4:	f003 0304 	and.w	r3, r3, #4
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d002      	beq.n	80123f2 <f_open+0xf6>
 80123ec:	2308      	movs	r3, #8
 80123ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80123f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d168      	bne.n	80124cc <f_open+0x1d0>
 80123fa:	79fb      	ldrb	r3, [r7, #7]
 80123fc:	f003 0308 	and.w	r3, r3, #8
 8012400:	2b00      	cmp	r3, #0
 8012402:	d063      	beq.n	80124cc <f_open+0x1d0>
				dw = GET_FATTIME();
 8012404:	f7fd fea8 	bl	8010158 <get_fattime>
 8012408:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801240a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801240c:	330e      	adds	r3, #14
 801240e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012410:	4618      	mov	r0, r3
 8012412:	f7fe fae7 	bl	80109e4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012418:	3316      	adds	r3, #22
 801241a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801241c:	4618      	mov	r0, r3
 801241e:	f7fe fae1 	bl	80109e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012424:	330b      	adds	r3, #11
 8012426:	2220      	movs	r2, #32
 8012428:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801242a:	693b      	ldr	r3, [r7, #16]
 801242c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801242e:	4611      	mov	r1, r2
 8012430:	4618      	mov	r0, r3
 8012432:	f7ff fa35 	bl	80118a0 <ld_clust>
 8012436:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012438:	693b      	ldr	r3, [r7, #16]
 801243a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801243c:	2200      	movs	r2, #0
 801243e:	4618      	mov	r0, r3
 8012440:	f7ff fa4d 	bl	80118de <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012446:	331c      	adds	r3, #28
 8012448:	2100      	movs	r1, #0
 801244a:	4618      	mov	r0, r3
 801244c:	f7fe faca 	bl	80109e4 <st_dword>
					fs->wflag = 1;
 8012450:	693b      	ldr	r3, [r7, #16]
 8012452:	2201      	movs	r2, #1
 8012454:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012458:	2b00      	cmp	r3, #0
 801245a:	d037      	beq.n	80124cc <f_open+0x1d0>
						dw = fs->winsect;
 801245c:	693b      	ldr	r3, [r7, #16]
 801245e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012460:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012462:	f107 0314 	add.w	r3, r7, #20
 8012466:	2200      	movs	r2, #0
 8012468:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801246a:	4618      	mov	r0, r3
 801246c:	f7fe ff60 	bl	8011330 <remove_chain>
 8012470:	4603      	mov	r3, r0
 8012472:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8012476:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801247a:	2b00      	cmp	r3, #0
 801247c:	d126      	bne.n	80124cc <f_open+0x1d0>
							res = move_window(fs, dw);
 801247e:	693b      	ldr	r3, [r7, #16]
 8012480:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012482:	4618      	mov	r0, r3
 8012484:	f7fe fd08 	bl	8010e98 <move_window>
 8012488:	4603      	mov	r3, r0
 801248a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801248e:	693b      	ldr	r3, [r7, #16]
 8012490:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012492:	3a01      	subs	r2, #1
 8012494:	60da      	str	r2, [r3, #12]
 8012496:	e019      	b.n	80124cc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012498:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801249c:	2b00      	cmp	r3, #0
 801249e:	d115      	bne.n	80124cc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80124a0:	7ebb      	ldrb	r3, [r7, #26]
 80124a2:	f003 0310 	and.w	r3, r3, #16
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d003      	beq.n	80124b2 <f_open+0x1b6>
					res = FR_NO_FILE;
 80124aa:	2304      	movs	r3, #4
 80124ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80124b0:	e00c      	b.n	80124cc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80124b2:	79fb      	ldrb	r3, [r7, #7]
 80124b4:	f003 0302 	and.w	r3, r3, #2
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d007      	beq.n	80124cc <f_open+0x1d0>
 80124bc:	7ebb      	ldrb	r3, [r7, #26]
 80124be:	f003 0301 	and.w	r3, r3, #1
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d002      	beq.n	80124cc <f_open+0x1d0>
						res = FR_DENIED;
 80124c6:	2307      	movs	r3, #7
 80124c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80124cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d126      	bne.n	8012522 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80124d4:	79fb      	ldrb	r3, [r7, #7]
 80124d6:	f003 0308 	and.w	r3, r3, #8
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d003      	beq.n	80124e6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80124de:	79fb      	ldrb	r3, [r7, #7]
 80124e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124e4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80124e6:	693b      	ldr	r3, [r7, #16]
 80124e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80124ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80124f4:	79fb      	ldrb	r3, [r7, #7]
 80124f6:	2b01      	cmp	r3, #1
 80124f8:	bf8c      	ite	hi
 80124fa:	2301      	movhi	r3, #1
 80124fc:	2300      	movls	r3, #0
 80124fe:	b2db      	uxtb	r3, r3
 8012500:	461a      	mov	r2, r3
 8012502:	f107 0314 	add.w	r3, r7, #20
 8012506:	4611      	mov	r1, r2
 8012508:	4618      	mov	r0, r3
 801250a:	f7fe fb93 	bl	8010c34 <inc_lock>
 801250e:	4602      	mov	r2, r0
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	691b      	ldr	r3, [r3, #16]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d102      	bne.n	8012522 <f_open+0x226>
 801251c:	2302      	movs	r3, #2
 801251e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012522:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012526:	2b00      	cmp	r3, #0
 8012528:	f040 8095 	bne.w	8012656 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801252c:	693b      	ldr	r3, [r7, #16]
 801252e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012530:	4611      	mov	r1, r2
 8012532:	4618      	mov	r0, r3
 8012534:	f7ff f9b4 	bl	80118a0 <ld_clust>
 8012538:	4602      	mov	r2, r0
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801253e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012540:	331c      	adds	r3, #28
 8012542:	4618      	mov	r0, r3
 8012544:	f7fe fa10 	bl	8010968 <ld_dword>
 8012548:	4602      	mov	r2, r0
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	2200      	movs	r2, #0
 8012552:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012554:	693a      	ldr	r2, [r7, #16]
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801255a:	693b      	ldr	r3, [r7, #16]
 801255c:	88da      	ldrh	r2, [r3, #6]
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	79fa      	ldrb	r2, [r7, #7]
 8012566:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	2200      	movs	r2, #0
 801256c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	2200      	movs	r2, #0
 8012572:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	2200      	movs	r2, #0
 8012578:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	3330      	adds	r3, #48	@ 0x30
 801257e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012582:	2100      	movs	r1, #0
 8012584:	4618      	mov	r0, r3
 8012586:	f7fe fa7a 	bl	8010a7e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801258a:	79fb      	ldrb	r3, [r7, #7]
 801258c:	f003 0320 	and.w	r3, r3, #32
 8012590:	2b00      	cmp	r3, #0
 8012592:	d060      	beq.n	8012656 <f_open+0x35a>
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	68db      	ldr	r3, [r3, #12]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d05c      	beq.n	8012656 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	68da      	ldr	r2, [r3, #12]
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80125a4:	693b      	ldr	r3, [r7, #16]
 80125a6:	895b      	ldrh	r3, [r3, #10]
 80125a8:	025b      	lsls	r3, r3, #9
 80125aa:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	689b      	ldr	r3, [r3, #8]
 80125b0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	68db      	ldr	r3, [r3, #12]
 80125b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80125b8:	e016      	b.n	80125e8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80125be:	4618      	mov	r0, r3
 80125c0:	f7fe fd25 	bl	801100e <get_fat>
 80125c4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80125c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80125c8:	2b01      	cmp	r3, #1
 80125ca:	d802      	bhi.n	80125d2 <f_open+0x2d6>
 80125cc:	2302      	movs	r3, #2
 80125ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80125d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80125d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125d8:	d102      	bne.n	80125e0 <f_open+0x2e4>
 80125da:	2301      	movs	r3, #1
 80125dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80125e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80125e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80125e4:	1ad3      	subs	r3, r2, r3
 80125e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80125e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d103      	bne.n	80125f8 <f_open+0x2fc>
 80125f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80125f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80125f4:	429a      	cmp	r2, r3
 80125f6:	d8e0      	bhi.n	80125ba <f_open+0x2be>
				}
				fp->clust = clst;
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80125fc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80125fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012602:	2b00      	cmp	r3, #0
 8012604:	d127      	bne.n	8012656 <f_open+0x35a>
 8012606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801260c:	2b00      	cmp	r3, #0
 801260e:	d022      	beq.n	8012656 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012610:	693b      	ldr	r3, [r7, #16]
 8012612:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012614:	4618      	mov	r0, r3
 8012616:	f7fe fcdb 	bl	8010fd0 <clust2sect>
 801261a:	6478      	str	r0, [r7, #68]	@ 0x44
 801261c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801261e:	2b00      	cmp	r3, #0
 8012620:	d103      	bne.n	801262a <f_open+0x32e>
						res = FR_INT_ERR;
 8012622:	2302      	movs	r3, #2
 8012624:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012628:	e015      	b.n	8012656 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801262a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801262c:	0a5a      	lsrs	r2, r3, #9
 801262e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012630:	441a      	add	r2, r3
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012636:	693b      	ldr	r3, [r7, #16]
 8012638:	7858      	ldrb	r0, [r3, #1]
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	6a1a      	ldr	r2, [r3, #32]
 8012644:	2301      	movs	r3, #1
 8012646:	f7fe f919 	bl	801087c <disk_read>
 801264a:	4603      	mov	r3, r0
 801264c:	2b00      	cmp	r3, #0
 801264e:	d002      	beq.n	8012656 <f_open+0x35a>
 8012650:	2301      	movs	r3, #1
 8012652:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012656:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801265a:	2b00      	cmp	r3, #0
 801265c:	d002      	beq.n	8012664 <f_open+0x368>
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	2200      	movs	r2, #0
 8012662:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012664:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8012668:	4618      	mov	r0, r3
 801266a:	3760      	adds	r7, #96	@ 0x60
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}

08012670 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b08e      	sub	sp, #56	@ 0x38
 8012674:	af00      	add	r7, sp, #0
 8012676:	60f8      	str	r0, [r7, #12]
 8012678:	60b9      	str	r1, [r7, #8]
 801267a:	607a      	str	r2, [r7, #4]
 801267c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801267e:	68bb      	ldr	r3, [r7, #8]
 8012680:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8012682:	683b      	ldr	r3, [r7, #0]
 8012684:	2200      	movs	r2, #0
 8012686:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	f107 0214 	add.w	r2, r7, #20
 801268e:	4611      	mov	r1, r2
 8012690:	4618      	mov	r0, r3
 8012692:	f7ff fdb7 	bl	8012204 <validate>
 8012696:	4603      	mov	r3, r0
 8012698:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801269c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d107      	bne.n	80126b4 <f_read+0x44>
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	7d5b      	ldrb	r3, [r3, #21]
 80126a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80126ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d002      	beq.n	80126ba <f_read+0x4a>
 80126b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80126b8:	e115      	b.n	80128e6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	7d1b      	ldrb	r3, [r3, #20]
 80126be:	f003 0301 	and.w	r3, r3, #1
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d101      	bne.n	80126ca <f_read+0x5a>
 80126c6:	2307      	movs	r3, #7
 80126c8:	e10d      	b.n	80128e6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	68da      	ldr	r2, [r3, #12]
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	699b      	ldr	r3, [r3, #24]
 80126d2:	1ad3      	subs	r3, r2, r3
 80126d4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80126d6:	687a      	ldr	r2, [r7, #4]
 80126d8:	6a3b      	ldr	r3, [r7, #32]
 80126da:	429a      	cmp	r2, r3
 80126dc:	f240 80fe 	bls.w	80128dc <f_read+0x26c>
 80126e0:	6a3b      	ldr	r3, [r7, #32]
 80126e2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80126e4:	e0fa      	b.n	80128dc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	699b      	ldr	r3, [r3, #24]
 80126ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	f040 80c6 	bne.w	8012880 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	699b      	ldr	r3, [r3, #24]
 80126f8:	0a5b      	lsrs	r3, r3, #9
 80126fa:	697a      	ldr	r2, [r7, #20]
 80126fc:	8952      	ldrh	r2, [r2, #10]
 80126fe:	3a01      	subs	r2, #1
 8012700:	4013      	ands	r3, r2
 8012702:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012704:	69fb      	ldr	r3, [r7, #28]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d12f      	bne.n	801276a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	699b      	ldr	r3, [r3, #24]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d103      	bne.n	801271a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	689b      	ldr	r3, [r3, #8]
 8012716:	633b      	str	r3, [r7, #48]	@ 0x30
 8012718:	e013      	b.n	8012742 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801271e:	2b00      	cmp	r3, #0
 8012720:	d007      	beq.n	8012732 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	699b      	ldr	r3, [r3, #24]
 8012726:	4619      	mov	r1, r3
 8012728:	68f8      	ldr	r0, [r7, #12]
 801272a:	f7fe fefe 	bl	801152a <clmt_clust>
 801272e:	6338      	str	r0, [r7, #48]	@ 0x30
 8012730:	e007      	b.n	8012742 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012732:	68fa      	ldr	r2, [r7, #12]
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	69db      	ldr	r3, [r3, #28]
 8012738:	4619      	mov	r1, r3
 801273a:	4610      	mov	r0, r2
 801273c:	f7fe fc67 	bl	801100e <get_fat>
 8012740:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012744:	2b01      	cmp	r3, #1
 8012746:	d804      	bhi.n	8012752 <f_read+0xe2>
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	2202      	movs	r2, #2
 801274c:	755a      	strb	r2, [r3, #21]
 801274e:	2302      	movs	r3, #2
 8012750:	e0c9      	b.n	80128e6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012758:	d104      	bne.n	8012764 <f_read+0xf4>
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	2201      	movs	r2, #1
 801275e:	755a      	strb	r2, [r3, #21]
 8012760:	2301      	movs	r3, #1
 8012762:	e0c0      	b.n	80128e6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012768:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801276a:	697a      	ldr	r2, [r7, #20]
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	69db      	ldr	r3, [r3, #28]
 8012770:	4619      	mov	r1, r3
 8012772:	4610      	mov	r0, r2
 8012774:	f7fe fc2c 	bl	8010fd0 <clust2sect>
 8012778:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801277a:	69bb      	ldr	r3, [r7, #24]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d104      	bne.n	801278a <f_read+0x11a>
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	2202      	movs	r2, #2
 8012784:	755a      	strb	r2, [r3, #21]
 8012786:	2302      	movs	r3, #2
 8012788:	e0ad      	b.n	80128e6 <f_read+0x276>
			sect += csect;
 801278a:	69ba      	ldr	r2, [r7, #24]
 801278c:	69fb      	ldr	r3, [r7, #28]
 801278e:	4413      	add	r3, r2
 8012790:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	0a5b      	lsrs	r3, r3, #9
 8012796:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801279a:	2b00      	cmp	r3, #0
 801279c:	d039      	beq.n	8012812 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801279e:	69fa      	ldr	r2, [r7, #28]
 80127a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127a2:	4413      	add	r3, r2
 80127a4:	697a      	ldr	r2, [r7, #20]
 80127a6:	8952      	ldrh	r2, [r2, #10]
 80127a8:	4293      	cmp	r3, r2
 80127aa:	d905      	bls.n	80127b8 <f_read+0x148>
					cc = fs->csize - csect;
 80127ac:	697b      	ldr	r3, [r7, #20]
 80127ae:	895b      	ldrh	r3, [r3, #10]
 80127b0:	461a      	mov	r2, r3
 80127b2:	69fb      	ldr	r3, [r7, #28]
 80127b4:	1ad3      	subs	r3, r2, r3
 80127b6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80127b8:	697b      	ldr	r3, [r7, #20]
 80127ba:	7858      	ldrb	r0, [r3, #1]
 80127bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127be:	69ba      	ldr	r2, [r7, #24]
 80127c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80127c2:	f7fe f85b 	bl	801087c <disk_read>
 80127c6:	4603      	mov	r3, r0
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d004      	beq.n	80127d6 <f_read+0x166>
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	2201      	movs	r2, #1
 80127d0:	755a      	strb	r2, [r3, #21]
 80127d2:	2301      	movs	r3, #1
 80127d4:	e087      	b.n	80128e6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	7d1b      	ldrb	r3, [r3, #20]
 80127da:	b25b      	sxtb	r3, r3
 80127dc:	2b00      	cmp	r3, #0
 80127de:	da14      	bge.n	801280a <f_read+0x19a>
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	6a1a      	ldr	r2, [r3, #32]
 80127e4:	69bb      	ldr	r3, [r7, #24]
 80127e6:	1ad3      	subs	r3, r2, r3
 80127e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d90d      	bls.n	801280a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	6a1a      	ldr	r2, [r3, #32]
 80127f2:	69bb      	ldr	r3, [r7, #24]
 80127f4:	1ad3      	subs	r3, r2, r3
 80127f6:	025b      	lsls	r3, r3, #9
 80127f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127fa:	18d0      	adds	r0, r2, r3
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	3330      	adds	r3, #48	@ 0x30
 8012800:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012804:	4619      	mov	r1, r3
 8012806:	f7fe f919 	bl	8010a3c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801280a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801280c:	025b      	lsls	r3, r3, #9
 801280e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8012810:	e050      	b.n	80128b4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	6a1b      	ldr	r3, [r3, #32]
 8012816:	69ba      	ldr	r2, [r7, #24]
 8012818:	429a      	cmp	r2, r3
 801281a:	d02e      	beq.n	801287a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	7d1b      	ldrb	r3, [r3, #20]
 8012820:	b25b      	sxtb	r3, r3
 8012822:	2b00      	cmp	r3, #0
 8012824:	da18      	bge.n	8012858 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012826:	697b      	ldr	r3, [r7, #20]
 8012828:	7858      	ldrb	r0, [r3, #1]
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	6a1a      	ldr	r2, [r3, #32]
 8012834:	2301      	movs	r3, #1
 8012836:	f7fe f841 	bl	80108bc <disk_write>
 801283a:	4603      	mov	r3, r0
 801283c:	2b00      	cmp	r3, #0
 801283e:	d004      	beq.n	801284a <f_read+0x1da>
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	2201      	movs	r2, #1
 8012844:	755a      	strb	r2, [r3, #21]
 8012846:	2301      	movs	r3, #1
 8012848:	e04d      	b.n	80128e6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	7d1b      	ldrb	r3, [r3, #20]
 801284e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012852:	b2da      	uxtb	r2, r3
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	7858      	ldrb	r0, [r3, #1]
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012862:	2301      	movs	r3, #1
 8012864:	69ba      	ldr	r2, [r7, #24]
 8012866:	f7fe f809 	bl	801087c <disk_read>
 801286a:	4603      	mov	r3, r0
 801286c:	2b00      	cmp	r3, #0
 801286e:	d004      	beq.n	801287a <f_read+0x20a>
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	2201      	movs	r2, #1
 8012874:	755a      	strb	r2, [r3, #21]
 8012876:	2301      	movs	r3, #1
 8012878:	e035      	b.n	80128e6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	69ba      	ldr	r2, [r7, #24]
 801287e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	699b      	ldr	r3, [r3, #24]
 8012884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012888:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801288c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801288e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	429a      	cmp	r2, r3
 8012894:	d901      	bls.n	801289a <f_read+0x22a>
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	699b      	ldr	r3, [r3, #24]
 80128a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128a8:	4413      	add	r3, r2
 80128aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80128ac:	4619      	mov	r1, r3
 80128ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80128b0:	f7fe f8c4 	bl	8010a3c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80128b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80128b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128b8:	4413      	add	r3, r2
 80128ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	699a      	ldr	r2, [r3, #24]
 80128c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128c2:	441a      	add	r2, r3
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	619a      	str	r2, [r3, #24]
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	681a      	ldr	r2, [r3, #0]
 80128cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128ce:	441a      	add	r2, r3
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	601a      	str	r2, [r3, #0]
 80128d4:	687a      	ldr	r2, [r7, #4]
 80128d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128d8:	1ad3      	subs	r3, r2, r3
 80128da:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	f47f af01 	bne.w	80126e6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80128e4:	2300      	movs	r3, #0
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	3738      	adds	r7, #56	@ 0x38
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}

080128ee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80128ee:	b580      	push	{r7, lr}
 80128f0:	b086      	sub	sp, #24
 80128f2:	af00      	add	r7, sp, #0
 80128f4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	f107 0208 	add.w	r2, r7, #8
 80128fc:	4611      	mov	r1, r2
 80128fe:	4618      	mov	r0, r3
 8012900:	f7ff fc80 	bl	8012204 <validate>
 8012904:	4603      	mov	r3, r0
 8012906:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012908:	7dfb      	ldrb	r3, [r7, #23]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d168      	bne.n	80129e0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	7d1b      	ldrb	r3, [r3, #20]
 8012912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012916:	2b00      	cmp	r3, #0
 8012918:	d062      	beq.n	80129e0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	7d1b      	ldrb	r3, [r3, #20]
 801291e:	b25b      	sxtb	r3, r3
 8012920:	2b00      	cmp	r3, #0
 8012922:	da15      	bge.n	8012950 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	7858      	ldrb	r0, [r3, #1]
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	6a1a      	ldr	r2, [r3, #32]
 8012932:	2301      	movs	r3, #1
 8012934:	f7fd ffc2 	bl	80108bc <disk_write>
 8012938:	4603      	mov	r3, r0
 801293a:	2b00      	cmp	r3, #0
 801293c:	d001      	beq.n	8012942 <f_sync+0x54>
 801293e:	2301      	movs	r3, #1
 8012940:	e04f      	b.n	80129e2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	7d1b      	ldrb	r3, [r3, #20]
 8012946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801294a:	b2da      	uxtb	r2, r3
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012950:	f7fd fc02 	bl	8010158 <get_fattime>
 8012954:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012956:	68ba      	ldr	r2, [r7, #8]
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801295c:	4619      	mov	r1, r3
 801295e:	4610      	mov	r0, r2
 8012960:	f7fe fa9a 	bl	8010e98 <move_window>
 8012964:	4603      	mov	r3, r0
 8012966:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012968:	7dfb      	ldrb	r3, [r7, #23]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d138      	bne.n	80129e0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012972:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	330b      	adds	r3, #11
 8012978:	781a      	ldrb	r2, [r3, #0]
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	330b      	adds	r3, #11
 801297e:	f042 0220 	orr.w	r2, r2, #32
 8012982:	b2d2      	uxtb	r2, r2
 8012984:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6818      	ldr	r0, [r3, #0]
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	689b      	ldr	r3, [r3, #8]
 801298e:	461a      	mov	r2, r3
 8012990:	68f9      	ldr	r1, [r7, #12]
 8012992:	f7fe ffa4 	bl	80118de <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	f103 021c 	add.w	r2, r3, #28
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	68db      	ldr	r3, [r3, #12]
 80129a0:	4619      	mov	r1, r3
 80129a2:	4610      	mov	r0, r2
 80129a4:	f7fe f81e 	bl	80109e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	3316      	adds	r3, #22
 80129ac:	6939      	ldr	r1, [r7, #16]
 80129ae:	4618      	mov	r0, r3
 80129b0:	f7fe f818 	bl	80109e4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	3312      	adds	r3, #18
 80129b8:	2100      	movs	r1, #0
 80129ba:	4618      	mov	r0, r3
 80129bc:	f7fd fff7 	bl	80109ae <st_word>
					fs->wflag = 1;
 80129c0:	68bb      	ldr	r3, [r7, #8]
 80129c2:	2201      	movs	r2, #1
 80129c4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	4618      	mov	r0, r3
 80129ca:	f7fe fa93 	bl	8010ef4 <sync_fs>
 80129ce:	4603      	mov	r3, r0
 80129d0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	7d1b      	ldrb	r3, [r3, #20]
 80129d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80129da:	b2da      	uxtb	r2, r3
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80129e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80129e2:	4618      	mov	r0, r3
 80129e4:	3718      	adds	r7, #24
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}

080129ea <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80129ea:	b580      	push	{r7, lr}
 80129ec:	b084      	sub	sp, #16
 80129ee:	af00      	add	r7, sp, #0
 80129f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80129f2:	6878      	ldr	r0, [r7, #4]
 80129f4:	f7ff ff7b 	bl	80128ee <f_sync>
 80129f8:	4603      	mov	r3, r0
 80129fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80129fc:	7bfb      	ldrb	r3, [r7, #15]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d118      	bne.n	8012a34 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	f107 0208 	add.w	r2, r7, #8
 8012a08:	4611      	mov	r1, r2
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f7ff fbfa 	bl	8012204 <validate>
 8012a10:	4603      	mov	r3, r0
 8012a12:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012a14:	7bfb      	ldrb	r3, [r7, #15]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d10c      	bne.n	8012a34 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	691b      	ldr	r3, [r3, #16]
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f7fe f996 	bl	8010d50 <dec_lock>
 8012a24:	4603      	mov	r3, r0
 8012a26:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012a28:	7bfb      	ldrb	r3, [r7, #15]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d102      	bne.n	8012a34 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	2200      	movs	r2, #0
 8012a32:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	3710      	adds	r7, #16
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}
	...

08012a40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012a40:	b480      	push	{r7}
 8012a42:	b087      	sub	sp, #28
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	60f8      	str	r0, [r7, #12]
 8012a48:	60b9      	str	r1, [r7, #8]
 8012a4a:	4613      	mov	r3, r2
 8012a4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012a4e:	2301      	movs	r3, #1
 8012a50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012a52:	2300      	movs	r3, #0
 8012a54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012a56:	4b1f      	ldr	r3, [pc, #124]	@ (8012ad4 <FATFS_LinkDriverEx+0x94>)
 8012a58:	7a5b      	ldrb	r3, [r3, #9]
 8012a5a:	b2db      	uxtb	r3, r3
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d131      	bne.n	8012ac4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012a60:	4b1c      	ldr	r3, [pc, #112]	@ (8012ad4 <FATFS_LinkDriverEx+0x94>)
 8012a62:	7a5b      	ldrb	r3, [r3, #9]
 8012a64:	b2db      	uxtb	r3, r3
 8012a66:	461a      	mov	r2, r3
 8012a68:	4b1a      	ldr	r3, [pc, #104]	@ (8012ad4 <FATFS_LinkDriverEx+0x94>)
 8012a6a:	2100      	movs	r1, #0
 8012a6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012a6e:	4b19      	ldr	r3, [pc, #100]	@ (8012ad4 <FATFS_LinkDriverEx+0x94>)
 8012a70:	7a5b      	ldrb	r3, [r3, #9]
 8012a72:	b2db      	uxtb	r3, r3
 8012a74:	4a17      	ldr	r2, [pc, #92]	@ (8012ad4 <FATFS_LinkDriverEx+0x94>)
 8012a76:	009b      	lsls	r3, r3, #2
 8012a78:	4413      	add	r3, r2
 8012a7a:	68fa      	ldr	r2, [r7, #12]
 8012a7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012a7e:	4b15      	ldr	r3, [pc, #84]	@ (8012ad4 <FATFS_LinkDriverEx+0x94>)
 8012a80:	7a5b      	ldrb	r3, [r3, #9]
 8012a82:	b2db      	uxtb	r3, r3
 8012a84:	461a      	mov	r2, r3
 8012a86:	4b13      	ldr	r3, [pc, #76]	@ (8012ad4 <FATFS_LinkDriverEx+0x94>)
 8012a88:	4413      	add	r3, r2
 8012a8a:	79fa      	ldrb	r2, [r7, #7]
 8012a8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012a8e:	4b11      	ldr	r3, [pc, #68]	@ (8012ad4 <FATFS_LinkDriverEx+0x94>)
 8012a90:	7a5b      	ldrb	r3, [r3, #9]
 8012a92:	b2db      	uxtb	r3, r3
 8012a94:	1c5a      	adds	r2, r3, #1
 8012a96:	b2d1      	uxtb	r1, r2
 8012a98:	4a0e      	ldr	r2, [pc, #56]	@ (8012ad4 <FATFS_LinkDriverEx+0x94>)
 8012a9a:	7251      	strb	r1, [r2, #9]
 8012a9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012a9e:	7dbb      	ldrb	r3, [r7, #22]
 8012aa0:	3330      	adds	r3, #48	@ 0x30
 8012aa2:	b2da      	uxtb	r2, r3
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	3301      	adds	r3, #1
 8012aac:	223a      	movs	r2, #58	@ 0x3a
 8012aae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	3302      	adds	r3, #2
 8012ab4:	222f      	movs	r2, #47	@ 0x2f
 8012ab6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012ab8:	68bb      	ldr	r3, [r7, #8]
 8012aba:	3303      	adds	r3, #3
 8012abc:	2200      	movs	r2, #0
 8012abe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	371c      	adds	r7, #28
 8012aca:	46bd      	mov	sp, r7
 8012acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad0:	4770      	bx	lr
 8012ad2:	bf00      	nop
 8012ad4:	24000bb0 	.word	0x24000bb0

08012ad8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b082      	sub	sp, #8
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
 8012ae0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	6839      	ldr	r1, [r7, #0]
 8012ae6:	6878      	ldr	r0, [r7, #4]
 8012ae8:	f7ff ffaa 	bl	8012a40 <FATFS_LinkDriverEx>
 8012aec:	4603      	mov	r3, r0
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3708      	adds	r7, #8
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}

08012af6 <_ZdlPvj>:
 8012af6:	f000 b9da 	b.w	8012eae <_ZdlPv>

08012afa <_ZdlPvjSt11align_val_t>:
 8012afa:	4611      	mov	r1, r2
 8012afc:	f000 b9d9 	b.w	8012eb2 <_ZdlPvSt11align_val_t>

08012b00 <__cxa_guard_acquire>:
 8012b00:	6802      	ldr	r2, [r0, #0]
 8012b02:	07d2      	lsls	r2, r2, #31
 8012b04:	4603      	mov	r3, r0
 8012b06:	d405      	bmi.n	8012b14 <__cxa_guard_acquire+0x14>
 8012b08:	7842      	ldrb	r2, [r0, #1]
 8012b0a:	b102      	cbz	r2, 8012b0e <__cxa_guard_acquire+0xe>
 8012b0c:	deff      	udf	#255	@ 0xff
 8012b0e:	2001      	movs	r0, #1
 8012b10:	7058      	strb	r0, [r3, #1]
 8012b12:	4770      	bx	lr
 8012b14:	2000      	movs	r0, #0
 8012b16:	4770      	bx	lr

08012b18 <__cxa_guard_release>:
 8012b18:	2301      	movs	r3, #1
 8012b1a:	6003      	str	r3, [r0, #0]
 8012b1c:	4770      	bx	lr

08012b1e <_Znwj>:
 8012b1e:	2801      	cmp	r0, #1
 8012b20:	bf38      	it	cc
 8012b22:	2001      	movcc	r0, #1
 8012b24:	b510      	push	{r4, lr}
 8012b26:	4604      	mov	r4, r0
 8012b28:	4620      	mov	r0, r4
 8012b2a:	f000 f9d5 	bl	8012ed8 <malloc>
 8012b2e:	b100      	cbz	r0, 8012b32 <_Znwj+0x14>
 8012b30:	bd10      	pop	{r4, pc}
 8012b32:	f000 f9c1 	bl	8012eb8 <_ZSt15get_new_handlerv>
 8012b36:	b908      	cbnz	r0, 8012b3c <_Znwj+0x1e>
 8012b38:	f000 f9c6 	bl	8012ec8 <abort>
 8012b3c:	4780      	blx	r0
 8012b3e:	e7f3      	b.n	8012b28 <_Znwj+0xa>

08012b40 <_ZnwjSt11align_val_t>:
 8012b40:	b538      	push	{r3, r4, r5, lr}
 8012b42:	4604      	mov	r4, r0
 8012b44:	4608      	mov	r0, r1
 8012b46:	460d      	mov	r5, r1
 8012b48:	f7ed fe06 	bl	8000758 <__popcountsi2>
 8012b4c:	2801      	cmp	r0, #1
 8012b4e:	d001      	beq.n	8012b54 <_ZnwjSt11align_val_t+0x14>
 8012b50:	f000 f9ba 	bl	8012ec8 <abort>
 8012b54:	2c01      	cmp	r4, #1
 8012b56:	bf38      	it	cc
 8012b58:	2401      	movcc	r4, #1
 8012b5a:	4621      	mov	r1, r4
 8012b5c:	4628      	mov	r0, r5
 8012b5e:	f000 fa79 	bl	8013054 <memalign>
 8012b62:	b100      	cbz	r0, 8012b66 <_ZnwjSt11align_val_t+0x26>
 8012b64:	bd38      	pop	{r3, r4, r5, pc}
 8012b66:	f000 f9a7 	bl	8012eb8 <_ZSt15get_new_handlerv>
 8012b6a:	2800      	cmp	r0, #0
 8012b6c:	d0f0      	beq.n	8012b50 <_ZnwjSt11align_val_t+0x10>
 8012b6e:	4780      	blx	r0
 8012b70:	e7f3      	b.n	8012b5a <_ZnwjSt11align_val_t+0x1a>

08012b72 <_ZNSaIcEC1Ev>:
 8012b72:	4770      	bx	lr

08012b74 <_ZNSaIcED1Ev>:
 8012b74:	4770      	bx	lr

08012b76 <_ZSt17__throw_bad_allocv>:
 8012b76:	b508      	push	{r3, lr}
 8012b78:	f000 f9a6 	bl	8012ec8 <abort>

08012b7c <_ZSt19__throw_logic_errorPKc>:
 8012b7c:	b508      	push	{r3, lr}
 8012b7e:	f000 f9a3 	bl	8012ec8 <abort>

08012b82 <_ZSt20__throw_length_errorPKc>:
 8012b82:	b508      	push	{r3, lr}
 8012b84:	f000 f9a0 	bl	8012ec8 <abort>

08012b88 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8012b88:	b10a      	cbz	r2, 8012b8e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8012b8a:	f000 bdb4 	b.w	80136f6 <memcpy>
 8012b8e:	4770      	bx	lr

08012b90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8012b90:	6001      	str	r1, [r0, #0]
 8012b92:	4770      	bx	lr

08012b94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8012b94:	6800      	ldr	r0, [r0, #0]
 8012b96:	4770      	bx	lr

08012b98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8012b98:	3008      	adds	r0, #8
 8012b9a:	4770      	bx	lr

08012b9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8012b9c:	6081      	str	r1, [r0, #8]
 8012b9e:	4770      	bx	lr

08012ba0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8012ba0:	6803      	ldr	r3, [r0, #0]
 8012ba2:	6041      	str	r1, [r0, #4]
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	545a      	strb	r2, [r3, r1]
 8012ba8:	4770      	bx	lr

08012baa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8012baa:	f850 3b08 	ldr.w	r3, [r0], #8
 8012bae:	1a1b      	subs	r3, r3, r0
 8012bb0:	4258      	negs	r0, r3
 8012bb2:	4158      	adcs	r0, r3
 8012bb4:	4770      	bx	lr
	...

08012bb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8012bb8:	b508      	push	{r3, lr}
 8012bba:	680b      	ldr	r3, [r1, #0]
 8012bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012bc0:	d302      	bcc.n	8012bc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8012bc2:	480d      	ldr	r0, [pc, #52]	@ (8012bf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8012bc4:	f7ff ffdd 	bl	8012b82 <_ZSt20__throw_length_errorPKc>
 8012bc8:	4293      	cmp	r3, r2
 8012bca:	d90b      	bls.n	8012be4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8012bcc:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8012bd0:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8012bd4:	d206      	bcs.n	8012be4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8012bd6:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8012bda:	bf2a      	itet	cs
 8012bdc:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8012be0:	6008      	strcc	r0, [r1, #0]
 8012be2:	600b      	strcs	r3, [r1, #0]
 8012be4:	6808      	ldr	r0, [r1, #0]
 8012be6:	3001      	adds	r0, #1
 8012be8:	d501      	bpl.n	8012bee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8012bea:	f7ff ffc4 	bl	8012b76 <_ZSt17__throw_bad_allocv>
 8012bee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012bf2:	f7ff bf94 	b.w	8012b1e <_Znwj>
 8012bf6:	bf00      	nop
 8012bf8:	080148a8 	.word	0x080148a8

08012bfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8012bfc:	b510      	push	{r4, lr}
 8012bfe:	4604      	mov	r4, r0
 8012c00:	f7ff ffd3 	bl	8012baa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8012c04:	b920      	cbnz	r0, 8012c10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8012c06:	6820      	ldr	r0, [r4, #0]
 8012c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c0c:	f000 b94f 	b.w	8012eae <_ZdlPv>
 8012c10:	bd10      	pop	{r4, pc}

08012c12 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8012c12:	6840      	ldr	r0, [r0, #4]
 8012c14:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8012c18:	3901      	subs	r1, #1
 8012c1a:	1a09      	subs	r1, r1, r0
 8012c1c:	4291      	cmp	r1, r2
 8012c1e:	b508      	push	{r3, lr}
 8012c20:	d202      	bcs.n	8012c28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8012c22:	4618      	mov	r0, r3
 8012c24:	f7ff ffad 	bl	8012b82 <_ZSt20__throw_length_errorPKc>
 8012c28:	bd08      	pop	{r3, pc}

08012c2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8012c2a:	2a01      	cmp	r2, #1
 8012c2c:	b410      	push	{r4}
 8012c2e:	d104      	bne.n	8012c3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8012c30:	780a      	ldrb	r2, [r1, #0]
 8012c32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c36:	7002      	strb	r2, [r0, #0]
 8012c38:	4770      	bx	lr
 8012c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c3e:	f7ff bfa3 	b.w	8012b88 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08012c42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8012c42:	2a01      	cmp	r2, #1
 8012c44:	b430      	push	{r4, r5}
 8012c46:	d103      	bne.n	8012c50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8012c48:	780b      	ldrb	r3, [r1, #0]
 8012c4a:	7003      	strb	r3, [r0, #0]
 8012c4c:	bc30      	pop	{r4, r5}
 8012c4e:	4770      	bx	lr
 8012c50:	2a00      	cmp	r2, #0
 8012c52:	d0fb      	beq.n	8012c4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8012c54:	bc30      	pop	{r4, r5}
 8012c56:	f000 bc65 	b.w	8013524 <memmove>

08012c5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8012c5a:	460b      	mov	r3, r1
 8012c5c:	2b01      	cmp	r3, #1
 8012c5e:	b410      	push	{r4}
 8012c60:	4611      	mov	r1, r2
 8012c62:	4604      	mov	r4, r0
 8012c64:	d103      	bne.n	8012c6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8012c66:	7022      	strb	r2, [r4, #0]
 8012c68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c6c:	4770      	bx	lr
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d0fa      	beq.n	8012c68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8012c72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c76:	461a      	mov	r2, r3
 8012c78:	f000 bc6e 	b.w	8013558 <memset>

08012c7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8012c7c:	b508      	push	{r3, lr}
 8012c7e:	1a52      	subs	r2, r2, r1
 8012c80:	f7ff ffd3 	bl	8012c2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012c84:	bd08      	pop	{r3, pc}

08012c86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8012c86:	b508      	push	{r3, lr}
 8012c88:	1a52      	subs	r2, r2, r1
 8012c8a:	f7ff ffce 	bl	8012c2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012c8e:	bd08      	pop	{r3, pc}

08012c90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8012c90:	f100 0208 	add.w	r2, r0, #8
 8012c94:	6002      	str	r2, [r0, #0]
 8012c96:	2200      	movs	r2, #0
 8012c98:	6042      	str	r2, [r0, #4]
 8012c9a:	7202      	strb	r2, [r0, #8]
 8012c9c:	4770      	bx	lr

08012c9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8012c9e:	b510      	push	{r4, lr}
 8012ca0:	4604      	mov	r4, r0
 8012ca2:	f7ff ffab 	bl	8012bfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8012ca6:	4620      	mov	r0, r4
 8012ca8:	bd10      	pop	{r4, pc}

08012caa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8012caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cac:	460c      	mov	r4, r1
 8012cae:	4605      	mov	r5, r0
 8012cb0:	f7ff ff7b 	bl	8012baa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8012cb4:	4606      	mov	r6, r0
 8012cb6:	4620      	mov	r0, r4
 8012cb8:	f7ff ff77 	bl	8012baa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8012cbc:	b190      	cbz	r0, 8012ce4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 8012cbe:	42a5      	cmp	r5, r4
 8012cc0:	d00a      	beq.n	8012cd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8012cc2:	6862      	ldr	r2, [r4, #4]
 8012cc4:	b11a      	cbz	r2, 8012cce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 8012cc6:	6821      	ldr	r1, [r4, #0]
 8012cc8:	6828      	ldr	r0, [r5, #0]
 8012cca:	f7ff ffae 	bl	8012c2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012cce:	6863      	ldr	r3, [r4, #4]
 8012cd0:	682a      	ldr	r2, [r5, #0]
 8012cd2:	606b      	str	r3, [r5, #4]
 8012cd4:	2100      	movs	r1, #0
 8012cd6:	54d1      	strb	r1, [r2, r3]
 8012cd8:	6822      	ldr	r2, [r4, #0]
 8012cda:	2300      	movs	r3, #0
 8012cdc:	6063      	str	r3, [r4, #4]
 8012cde:	7013      	strb	r3, [r2, #0]
 8012ce0:	4628      	mov	r0, r5
 8012ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ce4:	b90e      	cbnz	r6, 8012cea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8012ce6:	6828      	ldr	r0, [r5, #0]
 8012ce8:	68af      	ldr	r7, [r5, #8]
 8012cea:	6823      	ldr	r3, [r4, #0]
 8012cec:	602b      	str	r3, [r5, #0]
 8012cee:	6863      	ldr	r3, [r4, #4]
 8012cf0:	606b      	str	r3, [r5, #4]
 8012cf2:	68a3      	ldr	r3, [r4, #8]
 8012cf4:	60ab      	str	r3, [r5, #8]
 8012cf6:	b110      	cbz	r0, 8012cfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 8012cf8:	6020      	str	r0, [r4, #0]
 8012cfa:	60a7      	str	r7, [r4, #8]
 8012cfc:	e7ec      	b.n	8012cd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8012cfe:	f104 0308 	add.w	r3, r4, #8
 8012d02:	6023      	str	r3, [r4, #0]
 8012d04:	e7e8      	b.n	8012cd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

08012d06 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8012d06:	b510      	push	{r4, lr}
 8012d08:	4604      	mov	r4, r0
 8012d0a:	f7ff ff4e 	bl	8012baa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8012d0e:	b908      	cbnz	r0, 8012d14 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8012d10:	68a0      	ldr	r0, [r4, #8]
 8012d12:	bd10      	pop	{r4, pc}
 8012d14:	200f      	movs	r0, #15
 8012d16:	e7fc      	b.n	8012d12 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

08012d18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8012d18:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012d1c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8012d1e:	461f      	mov	r7, r3
 8012d20:	6843      	ldr	r3, [r0, #4]
 8012d22:	eb01 0802 	add.w	r8, r1, r2
 8012d26:	1ab2      	subs	r2, r6, r2
 8012d28:	441a      	add	r2, r3
 8012d2a:	4604      	mov	r4, r0
 8012d2c:	460d      	mov	r5, r1
 8012d2e:	eba3 0908 	sub.w	r9, r3, r8
 8012d32:	9201      	str	r2, [sp, #4]
 8012d34:	f7ff ffe7 	bl	8012d06 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8012d38:	a901      	add	r1, sp, #4
 8012d3a:	4602      	mov	r2, r0
 8012d3c:	4620      	mov	r0, r4
 8012d3e:	f7ff ff3b 	bl	8012bb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8012d42:	4682      	mov	sl, r0
 8012d44:	b11d      	cbz	r5, 8012d4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8012d46:	6821      	ldr	r1, [r4, #0]
 8012d48:	462a      	mov	r2, r5
 8012d4a:	f7ff ff6e 	bl	8012c2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012d4e:	b137      	cbz	r7, 8012d5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8012d50:	b12e      	cbz	r6, 8012d5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8012d52:	4632      	mov	r2, r6
 8012d54:	4639      	mov	r1, r7
 8012d56:	eb0a 0005 	add.w	r0, sl, r5
 8012d5a:	f7ff ff66 	bl	8012c2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012d5e:	f1b9 0f00 	cmp.w	r9, #0
 8012d62:	d007      	beq.n	8012d74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8012d64:	6821      	ldr	r1, [r4, #0]
 8012d66:	4435      	add	r5, r6
 8012d68:	464a      	mov	r2, r9
 8012d6a:	4441      	add	r1, r8
 8012d6c:	eb0a 0005 	add.w	r0, sl, r5
 8012d70:	f7ff ff5b 	bl	8012c2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012d74:	4620      	mov	r0, r4
 8012d76:	f7ff ff41 	bl	8012bfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8012d7a:	9b01      	ldr	r3, [sp, #4]
 8012d7c:	f8c4 a000 	str.w	sl, [r4]
 8012d80:	60a3      	str	r3, [r4, #8]
 8012d82:	b002      	add	sp, #8
 8012d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012d88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 8012d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012d8a:	4604      	mov	r4, r0
 8012d8c:	9101      	str	r1, [sp, #4]
 8012d8e:	f7ff ffba 	bl	8012d06 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8012d92:	9b01      	ldr	r3, [sp, #4]
 8012d94:	4283      	cmp	r3, r0
 8012d96:	4602      	mov	r2, r0
 8012d98:	d90f      	bls.n	8012dba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 8012d9a:	a901      	add	r1, sp, #4
 8012d9c:	4620      	mov	r0, r4
 8012d9e:	f7ff ff0b 	bl	8012bb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8012da2:	6862      	ldr	r2, [r4, #4]
 8012da4:	6821      	ldr	r1, [r4, #0]
 8012da6:	3201      	adds	r2, #1
 8012da8:	4605      	mov	r5, r0
 8012daa:	f7ff ff3e 	bl	8012c2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012dae:	4620      	mov	r0, r4
 8012db0:	f7ff ff24 	bl	8012bfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8012db4:	9b01      	ldr	r3, [sp, #4]
 8012db6:	6025      	str	r5, [r4, #0]
 8012db8:	60a3      	str	r3, [r4, #8]
 8012dba:	b003      	add	sp, #12
 8012dbc:	bd30      	pop	{r4, r5, pc}

08012dbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8012dbe:	6800      	ldr	r0, [r0, #0]
 8012dc0:	4408      	add	r0, r1
 8012dc2:	4770      	bx	lr

08012dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8012dc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012dc8:	4616      	mov	r6, r2
 8012dca:	461d      	mov	r5, r3
 8012dcc:	4604      	mov	r4, r0
 8012dce:	4b1b      	ldr	r3, [pc, #108]	@ (8012e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 8012dd0:	462a      	mov	r2, r5
 8012dd2:	460f      	mov	r7, r1
 8012dd4:	4631      	mov	r1, r6
 8012dd6:	f7ff ff1c 	bl	8012c12 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8012dda:	4620      	mov	r0, r4
 8012ddc:	f7ff ff93 	bl	8012d06 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8012de0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012de4:	eba5 0806 	sub.w	r8, r5, r6
 8012de8:	44c8      	add	r8, r9
 8012dea:	4540      	cmp	r0, r8
 8012dec:	d31d      	bcc.n	8012e2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 8012dee:	19f3      	adds	r3, r6, r7
 8012df0:	ebb9 0203 	subs.w	r2, r9, r3
 8012df4:	d007      	beq.n	8012e06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8012df6:	42ae      	cmp	r6, r5
 8012df8:	d005      	beq.n	8012e06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8012dfa:	6820      	ldr	r0, [r4, #0]
 8012dfc:	4438      	add	r0, r7
 8012dfe:	1981      	adds	r1, r0, r6
 8012e00:	4428      	add	r0, r5
 8012e02:	f7ff ff1e 	bl	8012c42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8012e06:	b135      	cbz	r5, 8012e16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 8012e08:	6820      	ldr	r0, [r4, #0]
 8012e0a:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 8012e0e:	4629      	mov	r1, r5
 8012e10:	4438      	add	r0, r7
 8012e12:	f7ff ff22 	bl	8012c5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8012e16:	6823      	ldr	r3, [r4, #0]
 8012e18:	f8c4 8004 	str.w	r8, [r4, #4]
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	4620      	mov	r0, r4
 8012e20:	f803 2008 	strb.w	r2, [r3, r8]
 8012e24:	b003      	add	sp, #12
 8012e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e2a:	9500      	str	r5, [sp, #0]
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	4632      	mov	r2, r6
 8012e30:	4639      	mov	r1, r7
 8012e32:	4620      	mov	r0, r4
 8012e34:	f7ff ff70 	bl	8012d18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8012e38:	e7e5      	b.n	8012e06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8012e3a:	bf00      	nop
 8012e3c:	080148c0 	.word	0x080148c0

08012e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 8012e40:	b507      	push	{r0, r1, r2, lr}
 8012e42:	9200      	str	r2, [sp, #0]
 8012e44:	460b      	mov	r3, r1
 8012e46:	2200      	movs	r2, #0
 8012e48:	6841      	ldr	r1, [r0, #4]
 8012e4a:	f7ff ffbb 	bl	8012dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 8012e4e:	b003      	add	sp, #12
 8012e50:	f85d fb04 	ldr.w	pc, [sp], #4

08012e54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8012e54:	6800      	ldr	r0, [r0, #0]
 8012e56:	4770      	bx	lr

08012e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8012e58:	6001      	str	r1, [r0, #0]
 8012e5a:	4770      	bx	lr

08012e5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8012e5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012e5e:	1a53      	subs	r3, r2, r1
 8012e60:	2b0f      	cmp	r3, #15
 8012e62:	4604      	mov	r4, r0
 8012e64:	460d      	mov	r5, r1
 8012e66:	4616      	mov	r6, r2
 8012e68:	9301      	str	r3, [sp, #4]
 8012e6a:	d906      	bls.n	8012e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	a901      	add	r1, sp, #4
 8012e70:	f7ff fea2 	bl	8012bb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8012e74:	9b01      	ldr	r3, [sp, #4]
 8012e76:	6020      	str	r0, [r4, #0]
 8012e78:	60a3      	str	r3, [r4, #8]
 8012e7a:	4632      	mov	r2, r6
 8012e7c:	4629      	mov	r1, r5
 8012e7e:	6820      	ldr	r0, [r4, #0]
 8012e80:	f7ff fefc 	bl	8012c7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8012e84:	9b01      	ldr	r3, [sp, #4]
 8012e86:	6822      	ldr	r2, [r4, #0]
 8012e88:	6063      	str	r3, [r4, #4]
 8012e8a:	2100      	movs	r1, #0
 8012e8c:	54d1      	strb	r1, [r2, r3]
 8012e8e:	b002      	add	sp, #8
 8012e90:	bd70      	pop	{r4, r5, r6, pc}

08012e92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8012e92:	f100 0208 	add.w	r2, r0, #8
 8012e96:	b510      	push	{r4, lr}
 8012e98:	6002      	str	r2, [r0, #0]
 8012e9a:	e9d1 1200 	ldrd	r1, r2, [r1]
 8012e9e:	4604      	mov	r4, r0
 8012ea0:	f04f 0300 	mov.w	r3, #0
 8012ea4:	440a      	add	r2, r1
 8012ea6:	f7ff ffd9 	bl	8012e5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8012eaa:	4620      	mov	r0, r4
 8012eac:	bd10      	pop	{r4, pc}

08012eae <_ZdlPv>:
 8012eae:	f000 b81b 	b.w	8012ee8 <free>

08012eb2 <_ZdlPvSt11align_val_t>:
 8012eb2:	f000 b819 	b.w	8012ee8 <free>
	...

08012eb8 <_ZSt15get_new_handlerv>:
 8012eb8:	4b02      	ldr	r3, [pc, #8]	@ (8012ec4 <_ZSt15get_new_handlerv+0xc>)
 8012eba:	6818      	ldr	r0, [r3, #0]
 8012ebc:	f3bf 8f5b 	dmb	ish
 8012ec0:	4770      	bx	lr
 8012ec2:	bf00      	nop
 8012ec4:	24000bbc 	.word	0x24000bbc

08012ec8 <abort>:
 8012ec8:	b508      	push	{r3, lr}
 8012eca:	2006      	movs	r0, #6
 8012ecc:	f000 fb74 	bl	80135b8 <raise>
 8012ed0:	2001      	movs	r0, #1
 8012ed2:	f7f1 ff15 	bl	8004d00 <_exit>
	...

08012ed8 <malloc>:
 8012ed8:	4b02      	ldr	r3, [pc, #8]	@ (8012ee4 <malloc+0xc>)
 8012eda:	4601      	mov	r1, r0
 8012edc:	6818      	ldr	r0, [r3, #0]
 8012ede:	f000 b82d 	b.w	8012f3c <_malloc_r>
 8012ee2:	bf00      	nop
 8012ee4:	2400006c 	.word	0x2400006c

08012ee8 <free>:
 8012ee8:	4b02      	ldr	r3, [pc, #8]	@ (8012ef4 <free+0xc>)
 8012eea:	4601      	mov	r1, r0
 8012eec:	6818      	ldr	r0, [r3, #0]
 8012eee:	f000 bc11 	b.w	8013714 <_free_r>
 8012ef2:	bf00      	nop
 8012ef4:	2400006c 	.word	0x2400006c

08012ef8 <sbrk_aligned>:
 8012ef8:	b570      	push	{r4, r5, r6, lr}
 8012efa:	4e0f      	ldr	r6, [pc, #60]	@ (8012f38 <sbrk_aligned+0x40>)
 8012efc:	460c      	mov	r4, r1
 8012efe:	6831      	ldr	r1, [r6, #0]
 8012f00:	4605      	mov	r5, r0
 8012f02:	b911      	cbnz	r1, 8012f0a <sbrk_aligned+0x12>
 8012f04:	f000 fba8 	bl	8013658 <_sbrk_r>
 8012f08:	6030      	str	r0, [r6, #0]
 8012f0a:	4621      	mov	r1, r4
 8012f0c:	4628      	mov	r0, r5
 8012f0e:	f000 fba3 	bl	8013658 <_sbrk_r>
 8012f12:	1c43      	adds	r3, r0, #1
 8012f14:	d103      	bne.n	8012f1e <sbrk_aligned+0x26>
 8012f16:	f04f 34ff 	mov.w	r4, #4294967295
 8012f1a:	4620      	mov	r0, r4
 8012f1c:	bd70      	pop	{r4, r5, r6, pc}
 8012f1e:	1cc4      	adds	r4, r0, #3
 8012f20:	f024 0403 	bic.w	r4, r4, #3
 8012f24:	42a0      	cmp	r0, r4
 8012f26:	d0f8      	beq.n	8012f1a <sbrk_aligned+0x22>
 8012f28:	1a21      	subs	r1, r4, r0
 8012f2a:	4628      	mov	r0, r5
 8012f2c:	f000 fb94 	bl	8013658 <_sbrk_r>
 8012f30:	3001      	adds	r0, #1
 8012f32:	d1f2      	bne.n	8012f1a <sbrk_aligned+0x22>
 8012f34:	e7ef      	b.n	8012f16 <sbrk_aligned+0x1e>
 8012f36:	bf00      	nop
 8012f38:	24000bc0 	.word	0x24000bc0

08012f3c <_malloc_r>:
 8012f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f40:	1ccd      	adds	r5, r1, #3
 8012f42:	f025 0503 	bic.w	r5, r5, #3
 8012f46:	3508      	adds	r5, #8
 8012f48:	2d0c      	cmp	r5, #12
 8012f4a:	bf38      	it	cc
 8012f4c:	250c      	movcc	r5, #12
 8012f4e:	2d00      	cmp	r5, #0
 8012f50:	4606      	mov	r6, r0
 8012f52:	db01      	blt.n	8012f58 <_malloc_r+0x1c>
 8012f54:	42a9      	cmp	r1, r5
 8012f56:	d904      	bls.n	8012f62 <_malloc_r+0x26>
 8012f58:	230c      	movs	r3, #12
 8012f5a:	6033      	str	r3, [r6, #0]
 8012f5c:	2000      	movs	r0, #0
 8012f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013038 <_malloc_r+0xfc>
 8012f66:	f000 f869 	bl	801303c <__malloc_lock>
 8012f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8012f6e:	461c      	mov	r4, r3
 8012f70:	bb44      	cbnz	r4, 8012fc4 <_malloc_r+0x88>
 8012f72:	4629      	mov	r1, r5
 8012f74:	4630      	mov	r0, r6
 8012f76:	f7ff ffbf 	bl	8012ef8 <sbrk_aligned>
 8012f7a:	1c43      	adds	r3, r0, #1
 8012f7c:	4604      	mov	r4, r0
 8012f7e:	d158      	bne.n	8013032 <_malloc_r+0xf6>
 8012f80:	f8d8 4000 	ldr.w	r4, [r8]
 8012f84:	4627      	mov	r7, r4
 8012f86:	2f00      	cmp	r7, #0
 8012f88:	d143      	bne.n	8013012 <_malloc_r+0xd6>
 8012f8a:	2c00      	cmp	r4, #0
 8012f8c:	d04b      	beq.n	8013026 <_malloc_r+0xea>
 8012f8e:	6823      	ldr	r3, [r4, #0]
 8012f90:	4639      	mov	r1, r7
 8012f92:	4630      	mov	r0, r6
 8012f94:	eb04 0903 	add.w	r9, r4, r3
 8012f98:	f000 fb5e 	bl	8013658 <_sbrk_r>
 8012f9c:	4581      	cmp	r9, r0
 8012f9e:	d142      	bne.n	8013026 <_malloc_r+0xea>
 8012fa0:	6821      	ldr	r1, [r4, #0]
 8012fa2:	1a6d      	subs	r5, r5, r1
 8012fa4:	4629      	mov	r1, r5
 8012fa6:	4630      	mov	r0, r6
 8012fa8:	f7ff ffa6 	bl	8012ef8 <sbrk_aligned>
 8012fac:	3001      	adds	r0, #1
 8012fae:	d03a      	beq.n	8013026 <_malloc_r+0xea>
 8012fb0:	6823      	ldr	r3, [r4, #0]
 8012fb2:	442b      	add	r3, r5
 8012fb4:	6023      	str	r3, [r4, #0]
 8012fb6:	f8d8 3000 	ldr.w	r3, [r8]
 8012fba:	685a      	ldr	r2, [r3, #4]
 8012fbc:	bb62      	cbnz	r2, 8013018 <_malloc_r+0xdc>
 8012fbe:	f8c8 7000 	str.w	r7, [r8]
 8012fc2:	e00f      	b.n	8012fe4 <_malloc_r+0xa8>
 8012fc4:	6822      	ldr	r2, [r4, #0]
 8012fc6:	1b52      	subs	r2, r2, r5
 8012fc8:	d420      	bmi.n	801300c <_malloc_r+0xd0>
 8012fca:	2a0b      	cmp	r2, #11
 8012fcc:	d917      	bls.n	8012ffe <_malloc_r+0xc2>
 8012fce:	1961      	adds	r1, r4, r5
 8012fd0:	42a3      	cmp	r3, r4
 8012fd2:	6025      	str	r5, [r4, #0]
 8012fd4:	bf18      	it	ne
 8012fd6:	6059      	strne	r1, [r3, #4]
 8012fd8:	6863      	ldr	r3, [r4, #4]
 8012fda:	bf08      	it	eq
 8012fdc:	f8c8 1000 	streq.w	r1, [r8]
 8012fe0:	5162      	str	r2, [r4, r5]
 8012fe2:	604b      	str	r3, [r1, #4]
 8012fe4:	4630      	mov	r0, r6
 8012fe6:	f000 f82f 	bl	8013048 <__malloc_unlock>
 8012fea:	f104 000b 	add.w	r0, r4, #11
 8012fee:	1d23      	adds	r3, r4, #4
 8012ff0:	f020 0007 	bic.w	r0, r0, #7
 8012ff4:	1ac2      	subs	r2, r0, r3
 8012ff6:	bf1c      	itt	ne
 8012ff8:	1a1b      	subne	r3, r3, r0
 8012ffa:	50a3      	strne	r3, [r4, r2]
 8012ffc:	e7af      	b.n	8012f5e <_malloc_r+0x22>
 8012ffe:	6862      	ldr	r2, [r4, #4]
 8013000:	42a3      	cmp	r3, r4
 8013002:	bf0c      	ite	eq
 8013004:	f8c8 2000 	streq.w	r2, [r8]
 8013008:	605a      	strne	r2, [r3, #4]
 801300a:	e7eb      	b.n	8012fe4 <_malloc_r+0xa8>
 801300c:	4623      	mov	r3, r4
 801300e:	6864      	ldr	r4, [r4, #4]
 8013010:	e7ae      	b.n	8012f70 <_malloc_r+0x34>
 8013012:	463c      	mov	r4, r7
 8013014:	687f      	ldr	r7, [r7, #4]
 8013016:	e7b6      	b.n	8012f86 <_malloc_r+0x4a>
 8013018:	461a      	mov	r2, r3
 801301a:	685b      	ldr	r3, [r3, #4]
 801301c:	42a3      	cmp	r3, r4
 801301e:	d1fb      	bne.n	8013018 <_malloc_r+0xdc>
 8013020:	2300      	movs	r3, #0
 8013022:	6053      	str	r3, [r2, #4]
 8013024:	e7de      	b.n	8012fe4 <_malloc_r+0xa8>
 8013026:	230c      	movs	r3, #12
 8013028:	6033      	str	r3, [r6, #0]
 801302a:	4630      	mov	r0, r6
 801302c:	f000 f80c 	bl	8013048 <__malloc_unlock>
 8013030:	e794      	b.n	8012f5c <_malloc_r+0x20>
 8013032:	6005      	str	r5, [r0, #0]
 8013034:	e7d6      	b.n	8012fe4 <_malloc_r+0xa8>
 8013036:	bf00      	nop
 8013038:	24000bc4 	.word	0x24000bc4

0801303c <__malloc_lock>:
 801303c:	4801      	ldr	r0, [pc, #4]	@ (8013044 <__malloc_lock+0x8>)
 801303e:	f000 bb58 	b.w	80136f2 <__retarget_lock_acquire_recursive>
 8013042:	bf00      	nop
 8013044:	24000d08 	.word	0x24000d08

08013048 <__malloc_unlock>:
 8013048:	4801      	ldr	r0, [pc, #4]	@ (8013050 <__malloc_unlock+0x8>)
 801304a:	f000 bb53 	b.w	80136f4 <__retarget_lock_release_recursive>
 801304e:	bf00      	nop
 8013050:	24000d08 	.word	0x24000d08

08013054 <memalign>:
 8013054:	4b02      	ldr	r3, [pc, #8]	@ (8013060 <memalign+0xc>)
 8013056:	460a      	mov	r2, r1
 8013058:	4601      	mov	r1, r0
 801305a:	6818      	ldr	r0, [r3, #0]
 801305c:	f000 b802 	b.w	8013064 <_memalign_r>
 8013060:	2400006c 	.word	0x2400006c

08013064 <_memalign_r>:
 8013064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013066:	1e4b      	subs	r3, r1, #1
 8013068:	420b      	tst	r3, r1
 801306a:	4606      	mov	r6, r0
 801306c:	460d      	mov	r5, r1
 801306e:	d106      	bne.n	801307e <_memalign_r+0x1a>
 8013070:	2908      	cmp	r1, #8
 8013072:	bf38      	it	cc
 8013074:	2508      	movcc	r5, #8
 8013076:	1d53      	adds	r3, r2, #5
 8013078:	d904      	bls.n	8013084 <_memalign_r+0x20>
 801307a:	230c      	movs	r3, #12
 801307c:	6033      	str	r3, [r6, #0]
 801307e:	2500      	movs	r5, #0
 8013080:	4628      	mov	r0, r5
 8013082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013084:	2a04      	cmp	r2, #4
 8013086:	bf38      	it	cc
 8013088:	2204      	movcc	r2, #4
 801308a:	1cd4      	adds	r4, r2, #3
 801308c:	f024 0403 	bic.w	r4, r4, #3
 8013090:	f1c5 0307 	rsb	r3, r5, #7
 8013094:	42a3      	cmp	r3, r4
 8013096:	d3f0      	bcc.n	801307a <_memalign_r+0x16>
 8013098:	f1a5 0108 	sub.w	r1, r5, #8
 801309c:	4421      	add	r1, r4
 801309e:	f7ff ff4d 	bl	8012f3c <_malloc_r>
 80130a2:	2800      	cmp	r0, #0
 80130a4:	d0eb      	beq.n	801307e <_memalign_r+0x1a>
 80130a6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80130aa:	1f03      	subs	r3, r0, #4
 80130ac:	2a00      	cmp	r2, #0
 80130ae:	bfb8      	it	lt
 80130b0:	189b      	addlt	r3, r3, r2
 80130b2:	1cea      	adds	r2, r5, #3
 80130b4:	441a      	add	r2, r3
 80130b6:	426d      	negs	r5, r5
 80130b8:	4015      	ands	r5, r2
 80130ba:	1d19      	adds	r1, r3, #4
 80130bc:	1a6a      	subs	r2, r5, r1
 80130be:	d00b      	beq.n	80130d8 <_memalign_r+0x74>
 80130c0:	2a0b      	cmp	r2, #11
 80130c2:	eb03 0702 	add.w	r7, r3, r2
 80130c6:	d918      	bls.n	80130fa <_memalign_r+0x96>
 80130c8:	6818      	ldr	r0, [r3, #0]
 80130ca:	1a80      	subs	r0, r0, r2
 80130cc:	5098      	str	r0, [r3, r2]
 80130ce:	601a      	str	r2, [r3, #0]
 80130d0:	4630      	mov	r0, r6
 80130d2:	f000 fb1f 	bl	8013714 <_free_r>
 80130d6:	463b      	mov	r3, r7
 80130d8:	681a      	ldr	r2, [r3, #0]
 80130da:	f104 010c 	add.w	r1, r4, #12
 80130de:	1898      	adds	r0, r3, r2
 80130e0:	4429      	add	r1, r5
 80130e2:	4288      	cmp	r0, r1
 80130e4:	d9cc      	bls.n	8013080 <_memalign_r+0x1c>
 80130e6:	1929      	adds	r1, r5, r4
 80130e8:	1ac8      	subs	r0, r1, r3
 80130ea:	1a12      	subs	r2, r2, r0
 80130ec:	6018      	str	r0, [r3, #0]
 80130ee:	3104      	adds	r1, #4
 80130f0:	512a      	str	r2, [r5, r4]
 80130f2:	4630      	mov	r0, r6
 80130f4:	f000 fb0e 	bl	8013714 <_free_r>
 80130f8:	e7c2      	b.n	8013080 <_memalign_r+0x1c>
 80130fa:	4251      	negs	r1, r2
 80130fc:	5099      	str	r1, [r3, r2]
 80130fe:	e7eb      	b.n	80130d8 <_memalign_r+0x74>

08013100 <std>:
 8013100:	2300      	movs	r3, #0
 8013102:	b510      	push	{r4, lr}
 8013104:	4604      	mov	r4, r0
 8013106:	e9c0 3300 	strd	r3, r3, [r0]
 801310a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801310e:	6083      	str	r3, [r0, #8]
 8013110:	8181      	strh	r1, [r0, #12]
 8013112:	6643      	str	r3, [r0, #100]	@ 0x64
 8013114:	81c2      	strh	r2, [r0, #14]
 8013116:	6183      	str	r3, [r0, #24]
 8013118:	4619      	mov	r1, r3
 801311a:	2208      	movs	r2, #8
 801311c:	305c      	adds	r0, #92	@ 0x5c
 801311e:	f000 fa1b 	bl	8013558 <memset>
 8013122:	4b0d      	ldr	r3, [pc, #52]	@ (8013158 <std+0x58>)
 8013124:	6263      	str	r3, [r4, #36]	@ 0x24
 8013126:	4b0d      	ldr	r3, [pc, #52]	@ (801315c <std+0x5c>)
 8013128:	62a3      	str	r3, [r4, #40]	@ 0x28
 801312a:	4b0d      	ldr	r3, [pc, #52]	@ (8013160 <std+0x60>)
 801312c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801312e:	4b0d      	ldr	r3, [pc, #52]	@ (8013164 <std+0x64>)
 8013130:	6323      	str	r3, [r4, #48]	@ 0x30
 8013132:	4b0d      	ldr	r3, [pc, #52]	@ (8013168 <std+0x68>)
 8013134:	6224      	str	r4, [r4, #32]
 8013136:	429c      	cmp	r4, r3
 8013138:	d006      	beq.n	8013148 <std+0x48>
 801313a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801313e:	4294      	cmp	r4, r2
 8013140:	d002      	beq.n	8013148 <std+0x48>
 8013142:	33d0      	adds	r3, #208	@ 0xd0
 8013144:	429c      	cmp	r4, r3
 8013146:	d105      	bne.n	8013154 <std+0x54>
 8013148:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801314c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013150:	f000 bace 	b.w	80136f0 <__retarget_lock_init_recursive>
 8013154:	bd10      	pop	{r4, pc}
 8013156:	bf00      	nop
 8013158:	08013375 	.word	0x08013375
 801315c:	08013397 	.word	0x08013397
 8013160:	080133cf 	.word	0x080133cf
 8013164:	080133f3 	.word	0x080133f3
 8013168:	24000bc8 	.word	0x24000bc8

0801316c <stdio_exit_handler>:
 801316c:	4a02      	ldr	r2, [pc, #8]	@ (8013178 <stdio_exit_handler+0xc>)
 801316e:	4903      	ldr	r1, [pc, #12]	@ (801317c <stdio_exit_handler+0x10>)
 8013170:	4803      	ldr	r0, [pc, #12]	@ (8013180 <stdio_exit_handler+0x14>)
 8013172:	f000 b869 	b.w	8013248 <_fwalk_sglue>
 8013176:	bf00      	nop
 8013178:	24000060 	.word	0x24000060
 801317c:	08013e51 	.word	0x08013e51
 8013180:	24000070 	.word	0x24000070

08013184 <cleanup_stdio>:
 8013184:	6841      	ldr	r1, [r0, #4]
 8013186:	4b0c      	ldr	r3, [pc, #48]	@ (80131b8 <cleanup_stdio+0x34>)
 8013188:	4299      	cmp	r1, r3
 801318a:	b510      	push	{r4, lr}
 801318c:	4604      	mov	r4, r0
 801318e:	d001      	beq.n	8013194 <cleanup_stdio+0x10>
 8013190:	f000 fe5e 	bl	8013e50 <_fflush_r>
 8013194:	68a1      	ldr	r1, [r4, #8]
 8013196:	4b09      	ldr	r3, [pc, #36]	@ (80131bc <cleanup_stdio+0x38>)
 8013198:	4299      	cmp	r1, r3
 801319a:	d002      	beq.n	80131a2 <cleanup_stdio+0x1e>
 801319c:	4620      	mov	r0, r4
 801319e:	f000 fe57 	bl	8013e50 <_fflush_r>
 80131a2:	68e1      	ldr	r1, [r4, #12]
 80131a4:	4b06      	ldr	r3, [pc, #24]	@ (80131c0 <cleanup_stdio+0x3c>)
 80131a6:	4299      	cmp	r1, r3
 80131a8:	d004      	beq.n	80131b4 <cleanup_stdio+0x30>
 80131aa:	4620      	mov	r0, r4
 80131ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131b0:	f000 be4e 	b.w	8013e50 <_fflush_r>
 80131b4:	bd10      	pop	{r4, pc}
 80131b6:	bf00      	nop
 80131b8:	24000bc8 	.word	0x24000bc8
 80131bc:	24000c30 	.word	0x24000c30
 80131c0:	24000c98 	.word	0x24000c98

080131c4 <global_stdio_init.part.0>:
 80131c4:	b510      	push	{r4, lr}
 80131c6:	4b0b      	ldr	r3, [pc, #44]	@ (80131f4 <global_stdio_init.part.0+0x30>)
 80131c8:	4c0b      	ldr	r4, [pc, #44]	@ (80131f8 <global_stdio_init.part.0+0x34>)
 80131ca:	4a0c      	ldr	r2, [pc, #48]	@ (80131fc <global_stdio_init.part.0+0x38>)
 80131cc:	601a      	str	r2, [r3, #0]
 80131ce:	4620      	mov	r0, r4
 80131d0:	2200      	movs	r2, #0
 80131d2:	2104      	movs	r1, #4
 80131d4:	f7ff ff94 	bl	8013100 <std>
 80131d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80131dc:	2201      	movs	r2, #1
 80131de:	2109      	movs	r1, #9
 80131e0:	f7ff ff8e 	bl	8013100 <std>
 80131e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80131e8:	2202      	movs	r2, #2
 80131ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131ee:	2112      	movs	r1, #18
 80131f0:	f7ff bf86 	b.w	8013100 <std>
 80131f4:	24000d00 	.word	0x24000d00
 80131f8:	24000bc8 	.word	0x24000bc8
 80131fc:	0801316d 	.word	0x0801316d

08013200 <__sfp_lock_acquire>:
 8013200:	4801      	ldr	r0, [pc, #4]	@ (8013208 <__sfp_lock_acquire+0x8>)
 8013202:	f000 ba76 	b.w	80136f2 <__retarget_lock_acquire_recursive>
 8013206:	bf00      	nop
 8013208:	24000d09 	.word	0x24000d09

0801320c <__sfp_lock_release>:
 801320c:	4801      	ldr	r0, [pc, #4]	@ (8013214 <__sfp_lock_release+0x8>)
 801320e:	f000 ba71 	b.w	80136f4 <__retarget_lock_release_recursive>
 8013212:	bf00      	nop
 8013214:	24000d09 	.word	0x24000d09

08013218 <__sinit>:
 8013218:	b510      	push	{r4, lr}
 801321a:	4604      	mov	r4, r0
 801321c:	f7ff fff0 	bl	8013200 <__sfp_lock_acquire>
 8013220:	6a23      	ldr	r3, [r4, #32]
 8013222:	b11b      	cbz	r3, 801322c <__sinit+0x14>
 8013224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013228:	f7ff bff0 	b.w	801320c <__sfp_lock_release>
 801322c:	4b04      	ldr	r3, [pc, #16]	@ (8013240 <__sinit+0x28>)
 801322e:	6223      	str	r3, [r4, #32]
 8013230:	4b04      	ldr	r3, [pc, #16]	@ (8013244 <__sinit+0x2c>)
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d1f5      	bne.n	8013224 <__sinit+0xc>
 8013238:	f7ff ffc4 	bl	80131c4 <global_stdio_init.part.0>
 801323c:	e7f2      	b.n	8013224 <__sinit+0xc>
 801323e:	bf00      	nop
 8013240:	08013185 	.word	0x08013185
 8013244:	24000d00 	.word	0x24000d00

08013248 <_fwalk_sglue>:
 8013248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801324c:	4607      	mov	r7, r0
 801324e:	4688      	mov	r8, r1
 8013250:	4614      	mov	r4, r2
 8013252:	2600      	movs	r6, #0
 8013254:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013258:	f1b9 0901 	subs.w	r9, r9, #1
 801325c:	d505      	bpl.n	801326a <_fwalk_sglue+0x22>
 801325e:	6824      	ldr	r4, [r4, #0]
 8013260:	2c00      	cmp	r4, #0
 8013262:	d1f7      	bne.n	8013254 <_fwalk_sglue+0xc>
 8013264:	4630      	mov	r0, r6
 8013266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801326a:	89ab      	ldrh	r3, [r5, #12]
 801326c:	2b01      	cmp	r3, #1
 801326e:	d907      	bls.n	8013280 <_fwalk_sglue+0x38>
 8013270:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013274:	3301      	adds	r3, #1
 8013276:	d003      	beq.n	8013280 <_fwalk_sglue+0x38>
 8013278:	4629      	mov	r1, r5
 801327a:	4638      	mov	r0, r7
 801327c:	47c0      	blx	r8
 801327e:	4306      	orrs	r6, r0
 8013280:	3568      	adds	r5, #104	@ 0x68
 8013282:	e7e9      	b.n	8013258 <_fwalk_sglue+0x10>

08013284 <iprintf>:
 8013284:	b40f      	push	{r0, r1, r2, r3}
 8013286:	b507      	push	{r0, r1, r2, lr}
 8013288:	4906      	ldr	r1, [pc, #24]	@ (80132a4 <iprintf+0x20>)
 801328a:	ab04      	add	r3, sp, #16
 801328c:	6808      	ldr	r0, [r1, #0]
 801328e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013292:	6881      	ldr	r1, [r0, #8]
 8013294:	9301      	str	r3, [sp, #4]
 8013296:	f000 fab1 	bl	80137fc <_vfiprintf_r>
 801329a:	b003      	add	sp, #12
 801329c:	f85d eb04 	ldr.w	lr, [sp], #4
 80132a0:	b004      	add	sp, #16
 80132a2:	4770      	bx	lr
 80132a4:	2400006c 	.word	0x2400006c

080132a8 <putchar>:
 80132a8:	4b02      	ldr	r3, [pc, #8]	@ (80132b4 <putchar+0xc>)
 80132aa:	4601      	mov	r1, r0
 80132ac:	6818      	ldr	r0, [r3, #0]
 80132ae:	6882      	ldr	r2, [r0, #8]
 80132b0:	f000 be58 	b.w	8013f64 <_putc_r>
 80132b4:	2400006c 	.word	0x2400006c

080132b8 <_puts_r>:
 80132b8:	6a03      	ldr	r3, [r0, #32]
 80132ba:	b570      	push	{r4, r5, r6, lr}
 80132bc:	6884      	ldr	r4, [r0, #8]
 80132be:	4605      	mov	r5, r0
 80132c0:	460e      	mov	r6, r1
 80132c2:	b90b      	cbnz	r3, 80132c8 <_puts_r+0x10>
 80132c4:	f7ff ffa8 	bl	8013218 <__sinit>
 80132c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80132ca:	07db      	lsls	r3, r3, #31
 80132cc:	d405      	bmi.n	80132da <_puts_r+0x22>
 80132ce:	89a3      	ldrh	r3, [r4, #12]
 80132d0:	0598      	lsls	r0, r3, #22
 80132d2:	d402      	bmi.n	80132da <_puts_r+0x22>
 80132d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80132d6:	f000 fa0c 	bl	80136f2 <__retarget_lock_acquire_recursive>
 80132da:	89a3      	ldrh	r3, [r4, #12]
 80132dc:	0719      	lsls	r1, r3, #28
 80132de:	d502      	bpl.n	80132e6 <_puts_r+0x2e>
 80132e0:	6923      	ldr	r3, [r4, #16]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d135      	bne.n	8013352 <_puts_r+0x9a>
 80132e6:	4621      	mov	r1, r4
 80132e8:	4628      	mov	r0, r5
 80132ea:	f000 f8c5 	bl	8013478 <__swsetup_r>
 80132ee:	b380      	cbz	r0, 8013352 <_puts_r+0x9a>
 80132f0:	f04f 35ff 	mov.w	r5, #4294967295
 80132f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80132f6:	07da      	lsls	r2, r3, #31
 80132f8:	d405      	bmi.n	8013306 <_puts_r+0x4e>
 80132fa:	89a3      	ldrh	r3, [r4, #12]
 80132fc:	059b      	lsls	r3, r3, #22
 80132fe:	d402      	bmi.n	8013306 <_puts_r+0x4e>
 8013300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013302:	f000 f9f7 	bl	80136f4 <__retarget_lock_release_recursive>
 8013306:	4628      	mov	r0, r5
 8013308:	bd70      	pop	{r4, r5, r6, pc}
 801330a:	2b00      	cmp	r3, #0
 801330c:	da04      	bge.n	8013318 <_puts_r+0x60>
 801330e:	69a2      	ldr	r2, [r4, #24]
 8013310:	429a      	cmp	r2, r3
 8013312:	dc17      	bgt.n	8013344 <_puts_r+0x8c>
 8013314:	290a      	cmp	r1, #10
 8013316:	d015      	beq.n	8013344 <_puts_r+0x8c>
 8013318:	6823      	ldr	r3, [r4, #0]
 801331a:	1c5a      	adds	r2, r3, #1
 801331c:	6022      	str	r2, [r4, #0]
 801331e:	7019      	strb	r1, [r3, #0]
 8013320:	68a3      	ldr	r3, [r4, #8]
 8013322:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013326:	3b01      	subs	r3, #1
 8013328:	60a3      	str	r3, [r4, #8]
 801332a:	2900      	cmp	r1, #0
 801332c:	d1ed      	bne.n	801330a <_puts_r+0x52>
 801332e:	2b00      	cmp	r3, #0
 8013330:	da11      	bge.n	8013356 <_puts_r+0x9e>
 8013332:	4622      	mov	r2, r4
 8013334:	210a      	movs	r1, #10
 8013336:	4628      	mov	r0, r5
 8013338:	f000 f85f 	bl	80133fa <__swbuf_r>
 801333c:	3001      	adds	r0, #1
 801333e:	d0d7      	beq.n	80132f0 <_puts_r+0x38>
 8013340:	250a      	movs	r5, #10
 8013342:	e7d7      	b.n	80132f4 <_puts_r+0x3c>
 8013344:	4622      	mov	r2, r4
 8013346:	4628      	mov	r0, r5
 8013348:	f000 f857 	bl	80133fa <__swbuf_r>
 801334c:	3001      	adds	r0, #1
 801334e:	d1e7      	bne.n	8013320 <_puts_r+0x68>
 8013350:	e7ce      	b.n	80132f0 <_puts_r+0x38>
 8013352:	3e01      	subs	r6, #1
 8013354:	e7e4      	b.n	8013320 <_puts_r+0x68>
 8013356:	6823      	ldr	r3, [r4, #0]
 8013358:	1c5a      	adds	r2, r3, #1
 801335a:	6022      	str	r2, [r4, #0]
 801335c:	220a      	movs	r2, #10
 801335e:	701a      	strb	r2, [r3, #0]
 8013360:	e7ee      	b.n	8013340 <_puts_r+0x88>
	...

08013364 <puts>:
 8013364:	4b02      	ldr	r3, [pc, #8]	@ (8013370 <puts+0xc>)
 8013366:	4601      	mov	r1, r0
 8013368:	6818      	ldr	r0, [r3, #0]
 801336a:	f7ff bfa5 	b.w	80132b8 <_puts_r>
 801336e:	bf00      	nop
 8013370:	2400006c 	.word	0x2400006c

08013374 <__sread>:
 8013374:	b510      	push	{r4, lr}
 8013376:	460c      	mov	r4, r1
 8013378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801337c:	f000 f946 	bl	801360c <_read_r>
 8013380:	2800      	cmp	r0, #0
 8013382:	bfab      	itete	ge
 8013384:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013386:	89a3      	ldrhlt	r3, [r4, #12]
 8013388:	181b      	addge	r3, r3, r0
 801338a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801338e:	bfac      	ite	ge
 8013390:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013392:	81a3      	strhlt	r3, [r4, #12]
 8013394:	bd10      	pop	{r4, pc}

08013396 <__swrite>:
 8013396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801339a:	461f      	mov	r7, r3
 801339c:	898b      	ldrh	r3, [r1, #12]
 801339e:	05db      	lsls	r3, r3, #23
 80133a0:	4605      	mov	r5, r0
 80133a2:	460c      	mov	r4, r1
 80133a4:	4616      	mov	r6, r2
 80133a6:	d505      	bpl.n	80133b4 <__swrite+0x1e>
 80133a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133ac:	2302      	movs	r3, #2
 80133ae:	2200      	movs	r2, #0
 80133b0:	f000 f91a 	bl	80135e8 <_lseek_r>
 80133b4:	89a3      	ldrh	r3, [r4, #12]
 80133b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80133ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80133be:	81a3      	strh	r3, [r4, #12]
 80133c0:	4632      	mov	r2, r6
 80133c2:	463b      	mov	r3, r7
 80133c4:	4628      	mov	r0, r5
 80133c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133ca:	f000 b955 	b.w	8013678 <_write_r>

080133ce <__sseek>:
 80133ce:	b510      	push	{r4, lr}
 80133d0:	460c      	mov	r4, r1
 80133d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133d6:	f000 f907 	bl	80135e8 <_lseek_r>
 80133da:	1c43      	adds	r3, r0, #1
 80133dc:	89a3      	ldrh	r3, [r4, #12]
 80133de:	bf15      	itete	ne
 80133e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80133e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80133e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80133ea:	81a3      	strheq	r3, [r4, #12]
 80133ec:	bf18      	it	ne
 80133ee:	81a3      	strhne	r3, [r4, #12]
 80133f0:	bd10      	pop	{r4, pc}

080133f2 <__sclose>:
 80133f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133f6:	f000 b8e7 	b.w	80135c8 <_close_r>

080133fa <__swbuf_r>:
 80133fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133fc:	460e      	mov	r6, r1
 80133fe:	4614      	mov	r4, r2
 8013400:	4605      	mov	r5, r0
 8013402:	b118      	cbz	r0, 801340c <__swbuf_r+0x12>
 8013404:	6a03      	ldr	r3, [r0, #32]
 8013406:	b90b      	cbnz	r3, 801340c <__swbuf_r+0x12>
 8013408:	f7ff ff06 	bl	8013218 <__sinit>
 801340c:	69a3      	ldr	r3, [r4, #24]
 801340e:	60a3      	str	r3, [r4, #8]
 8013410:	89a3      	ldrh	r3, [r4, #12]
 8013412:	071a      	lsls	r2, r3, #28
 8013414:	d501      	bpl.n	801341a <__swbuf_r+0x20>
 8013416:	6923      	ldr	r3, [r4, #16]
 8013418:	b943      	cbnz	r3, 801342c <__swbuf_r+0x32>
 801341a:	4621      	mov	r1, r4
 801341c:	4628      	mov	r0, r5
 801341e:	f000 f82b 	bl	8013478 <__swsetup_r>
 8013422:	b118      	cbz	r0, 801342c <__swbuf_r+0x32>
 8013424:	f04f 37ff 	mov.w	r7, #4294967295
 8013428:	4638      	mov	r0, r7
 801342a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801342c:	6823      	ldr	r3, [r4, #0]
 801342e:	6922      	ldr	r2, [r4, #16]
 8013430:	1a98      	subs	r0, r3, r2
 8013432:	6963      	ldr	r3, [r4, #20]
 8013434:	b2f6      	uxtb	r6, r6
 8013436:	4283      	cmp	r3, r0
 8013438:	4637      	mov	r7, r6
 801343a:	dc05      	bgt.n	8013448 <__swbuf_r+0x4e>
 801343c:	4621      	mov	r1, r4
 801343e:	4628      	mov	r0, r5
 8013440:	f000 fd06 	bl	8013e50 <_fflush_r>
 8013444:	2800      	cmp	r0, #0
 8013446:	d1ed      	bne.n	8013424 <__swbuf_r+0x2a>
 8013448:	68a3      	ldr	r3, [r4, #8]
 801344a:	3b01      	subs	r3, #1
 801344c:	60a3      	str	r3, [r4, #8]
 801344e:	6823      	ldr	r3, [r4, #0]
 8013450:	1c5a      	adds	r2, r3, #1
 8013452:	6022      	str	r2, [r4, #0]
 8013454:	701e      	strb	r6, [r3, #0]
 8013456:	6962      	ldr	r2, [r4, #20]
 8013458:	1c43      	adds	r3, r0, #1
 801345a:	429a      	cmp	r2, r3
 801345c:	d004      	beq.n	8013468 <__swbuf_r+0x6e>
 801345e:	89a3      	ldrh	r3, [r4, #12]
 8013460:	07db      	lsls	r3, r3, #31
 8013462:	d5e1      	bpl.n	8013428 <__swbuf_r+0x2e>
 8013464:	2e0a      	cmp	r6, #10
 8013466:	d1df      	bne.n	8013428 <__swbuf_r+0x2e>
 8013468:	4621      	mov	r1, r4
 801346a:	4628      	mov	r0, r5
 801346c:	f000 fcf0 	bl	8013e50 <_fflush_r>
 8013470:	2800      	cmp	r0, #0
 8013472:	d0d9      	beq.n	8013428 <__swbuf_r+0x2e>
 8013474:	e7d6      	b.n	8013424 <__swbuf_r+0x2a>
	...

08013478 <__swsetup_r>:
 8013478:	b538      	push	{r3, r4, r5, lr}
 801347a:	4b29      	ldr	r3, [pc, #164]	@ (8013520 <__swsetup_r+0xa8>)
 801347c:	4605      	mov	r5, r0
 801347e:	6818      	ldr	r0, [r3, #0]
 8013480:	460c      	mov	r4, r1
 8013482:	b118      	cbz	r0, 801348c <__swsetup_r+0x14>
 8013484:	6a03      	ldr	r3, [r0, #32]
 8013486:	b90b      	cbnz	r3, 801348c <__swsetup_r+0x14>
 8013488:	f7ff fec6 	bl	8013218 <__sinit>
 801348c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013490:	0719      	lsls	r1, r3, #28
 8013492:	d422      	bmi.n	80134da <__swsetup_r+0x62>
 8013494:	06da      	lsls	r2, r3, #27
 8013496:	d407      	bmi.n	80134a8 <__swsetup_r+0x30>
 8013498:	2209      	movs	r2, #9
 801349a:	602a      	str	r2, [r5, #0]
 801349c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80134a0:	81a3      	strh	r3, [r4, #12]
 80134a2:	f04f 30ff 	mov.w	r0, #4294967295
 80134a6:	e033      	b.n	8013510 <__swsetup_r+0x98>
 80134a8:	0758      	lsls	r0, r3, #29
 80134aa:	d512      	bpl.n	80134d2 <__swsetup_r+0x5a>
 80134ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80134ae:	b141      	cbz	r1, 80134c2 <__swsetup_r+0x4a>
 80134b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80134b4:	4299      	cmp	r1, r3
 80134b6:	d002      	beq.n	80134be <__swsetup_r+0x46>
 80134b8:	4628      	mov	r0, r5
 80134ba:	f000 f92b 	bl	8013714 <_free_r>
 80134be:	2300      	movs	r3, #0
 80134c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80134c2:	89a3      	ldrh	r3, [r4, #12]
 80134c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80134c8:	81a3      	strh	r3, [r4, #12]
 80134ca:	2300      	movs	r3, #0
 80134cc:	6063      	str	r3, [r4, #4]
 80134ce:	6923      	ldr	r3, [r4, #16]
 80134d0:	6023      	str	r3, [r4, #0]
 80134d2:	89a3      	ldrh	r3, [r4, #12]
 80134d4:	f043 0308 	orr.w	r3, r3, #8
 80134d8:	81a3      	strh	r3, [r4, #12]
 80134da:	6923      	ldr	r3, [r4, #16]
 80134dc:	b94b      	cbnz	r3, 80134f2 <__swsetup_r+0x7a>
 80134de:	89a3      	ldrh	r3, [r4, #12]
 80134e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80134e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80134e8:	d003      	beq.n	80134f2 <__swsetup_r+0x7a>
 80134ea:	4621      	mov	r1, r4
 80134ec:	4628      	mov	r0, r5
 80134ee:	f000 fcfd 	bl	8013eec <__smakebuf_r>
 80134f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134f6:	f013 0201 	ands.w	r2, r3, #1
 80134fa:	d00a      	beq.n	8013512 <__swsetup_r+0x9a>
 80134fc:	2200      	movs	r2, #0
 80134fe:	60a2      	str	r2, [r4, #8]
 8013500:	6962      	ldr	r2, [r4, #20]
 8013502:	4252      	negs	r2, r2
 8013504:	61a2      	str	r2, [r4, #24]
 8013506:	6922      	ldr	r2, [r4, #16]
 8013508:	b942      	cbnz	r2, 801351c <__swsetup_r+0xa4>
 801350a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801350e:	d1c5      	bne.n	801349c <__swsetup_r+0x24>
 8013510:	bd38      	pop	{r3, r4, r5, pc}
 8013512:	0799      	lsls	r1, r3, #30
 8013514:	bf58      	it	pl
 8013516:	6962      	ldrpl	r2, [r4, #20]
 8013518:	60a2      	str	r2, [r4, #8]
 801351a:	e7f4      	b.n	8013506 <__swsetup_r+0x8e>
 801351c:	2000      	movs	r0, #0
 801351e:	e7f7      	b.n	8013510 <__swsetup_r+0x98>
 8013520:	2400006c 	.word	0x2400006c

08013524 <memmove>:
 8013524:	4288      	cmp	r0, r1
 8013526:	b510      	push	{r4, lr}
 8013528:	eb01 0402 	add.w	r4, r1, r2
 801352c:	d902      	bls.n	8013534 <memmove+0x10>
 801352e:	4284      	cmp	r4, r0
 8013530:	4623      	mov	r3, r4
 8013532:	d807      	bhi.n	8013544 <memmove+0x20>
 8013534:	1e43      	subs	r3, r0, #1
 8013536:	42a1      	cmp	r1, r4
 8013538:	d008      	beq.n	801354c <memmove+0x28>
 801353a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801353e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013542:	e7f8      	b.n	8013536 <memmove+0x12>
 8013544:	4402      	add	r2, r0
 8013546:	4601      	mov	r1, r0
 8013548:	428a      	cmp	r2, r1
 801354a:	d100      	bne.n	801354e <memmove+0x2a>
 801354c:	bd10      	pop	{r4, pc}
 801354e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013556:	e7f7      	b.n	8013548 <memmove+0x24>

08013558 <memset>:
 8013558:	4402      	add	r2, r0
 801355a:	4603      	mov	r3, r0
 801355c:	4293      	cmp	r3, r2
 801355e:	d100      	bne.n	8013562 <memset+0xa>
 8013560:	4770      	bx	lr
 8013562:	f803 1b01 	strb.w	r1, [r3], #1
 8013566:	e7f9      	b.n	801355c <memset+0x4>

08013568 <_raise_r>:
 8013568:	291f      	cmp	r1, #31
 801356a:	b538      	push	{r3, r4, r5, lr}
 801356c:	4605      	mov	r5, r0
 801356e:	460c      	mov	r4, r1
 8013570:	d904      	bls.n	801357c <_raise_r+0x14>
 8013572:	2316      	movs	r3, #22
 8013574:	6003      	str	r3, [r0, #0]
 8013576:	f04f 30ff 	mov.w	r0, #4294967295
 801357a:	bd38      	pop	{r3, r4, r5, pc}
 801357c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801357e:	b112      	cbz	r2, 8013586 <_raise_r+0x1e>
 8013580:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013584:	b94b      	cbnz	r3, 801359a <_raise_r+0x32>
 8013586:	4628      	mov	r0, r5
 8013588:	f000 f864 	bl	8013654 <_getpid_r>
 801358c:	4622      	mov	r2, r4
 801358e:	4601      	mov	r1, r0
 8013590:	4628      	mov	r0, r5
 8013592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013596:	f000 b84b 	b.w	8013630 <_kill_r>
 801359a:	2b01      	cmp	r3, #1
 801359c:	d00a      	beq.n	80135b4 <_raise_r+0x4c>
 801359e:	1c59      	adds	r1, r3, #1
 80135a0:	d103      	bne.n	80135aa <_raise_r+0x42>
 80135a2:	2316      	movs	r3, #22
 80135a4:	6003      	str	r3, [r0, #0]
 80135a6:	2001      	movs	r0, #1
 80135a8:	e7e7      	b.n	801357a <_raise_r+0x12>
 80135aa:	2100      	movs	r1, #0
 80135ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80135b0:	4620      	mov	r0, r4
 80135b2:	4798      	blx	r3
 80135b4:	2000      	movs	r0, #0
 80135b6:	e7e0      	b.n	801357a <_raise_r+0x12>

080135b8 <raise>:
 80135b8:	4b02      	ldr	r3, [pc, #8]	@ (80135c4 <raise+0xc>)
 80135ba:	4601      	mov	r1, r0
 80135bc:	6818      	ldr	r0, [r3, #0]
 80135be:	f7ff bfd3 	b.w	8013568 <_raise_r>
 80135c2:	bf00      	nop
 80135c4:	2400006c 	.word	0x2400006c

080135c8 <_close_r>:
 80135c8:	b538      	push	{r3, r4, r5, lr}
 80135ca:	4d06      	ldr	r5, [pc, #24]	@ (80135e4 <_close_r+0x1c>)
 80135cc:	2300      	movs	r3, #0
 80135ce:	4604      	mov	r4, r0
 80135d0:	4608      	mov	r0, r1
 80135d2:	602b      	str	r3, [r5, #0]
 80135d4:	f7f1 fbd8 	bl	8004d88 <_close>
 80135d8:	1c43      	adds	r3, r0, #1
 80135da:	d102      	bne.n	80135e2 <_close_r+0x1a>
 80135dc:	682b      	ldr	r3, [r5, #0]
 80135de:	b103      	cbz	r3, 80135e2 <_close_r+0x1a>
 80135e0:	6023      	str	r3, [r4, #0]
 80135e2:	bd38      	pop	{r3, r4, r5, pc}
 80135e4:	24000d04 	.word	0x24000d04

080135e8 <_lseek_r>:
 80135e8:	b538      	push	{r3, r4, r5, lr}
 80135ea:	4d07      	ldr	r5, [pc, #28]	@ (8013608 <_lseek_r+0x20>)
 80135ec:	4604      	mov	r4, r0
 80135ee:	4608      	mov	r0, r1
 80135f0:	4611      	mov	r1, r2
 80135f2:	2200      	movs	r2, #0
 80135f4:	602a      	str	r2, [r5, #0]
 80135f6:	461a      	mov	r2, r3
 80135f8:	f7f1 fbed 	bl	8004dd6 <_lseek>
 80135fc:	1c43      	adds	r3, r0, #1
 80135fe:	d102      	bne.n	8013606 <_lseek_r+0x1e>
 8013600:	682b      	ldr	r3, [r5, #0]
 8013602:	b103      	cbz	r3, 8013606 <_lseek_r+0x1e>
 8013604:	6023      	str	r3, [r4, #0]
 8013606:	bd38      	pop	{r3, r4, r5, pc}
 8013608:	24000d04 	.word	0x24000d04

0801360c <_read_r>:
 801360c:	b538      	push	{r3, r4, r5, lr}
 801360e:	4d07      	ldr	r5, [pc, #28]	@ (801362c <_read_r+0x20>)
 8013610:	4604      	mov	r4, r0
 8013612:	4608      	mov	r0, r1
 8013614:	4611      	mov	r1, r2
 8013616:	2200      	movs	r2, #0
 8013618:	602a      	str	r2, [r5, #0]
 801361a:	461a      	mov	r2, r3
 801361c:	f7f1 fb7b 	bl	8004d16 <_read>
 8013620:	1c43      	adds	r3, r0, #1
 8013622:	d102      	bne.n	801362a <_read_r+0x1e>
 8013624:	682b      	ldr	r3, [r5, #0]
 8013626:	b103      	cbz	r3, 801362a <_read_r+0x1e>
 8013628:	6023      	str	r3, [r4, #0]
 801362a:	bd38      	pop	{r3, r4, r5, pc}
 801362c:	24000d04 	.word	0x24000d04

08013630 <_kill_r>:
 8013630:	b538      	push	{r3, r4, r5, lr}
 8013632:	4d07      	ldr	r5, [pc, #28]	@ (8013650 <_kill_r+0x20>)
 8013634:	2300      	movs	r3, #0
 8013636:	4604      	mov	r4, r0
 8013638:	4608      	mov	r0, r1
 801363a:	4611      	mov	r1, r2
 801363c:	602b      	str	r3, [r5, #0]
 801363e:	f7f1 fb4f 	bl	8004ce0 <_kill>
 8013642:	1c43      	adds	r3, r0, #1
 8013644:	d102      	bne.n	801364c <_kill_r+0x1c>
 8013646:	682b      	ldr	r3, [r5, #0]
 8013648:	b103      	cbz	r3, 801364c <_kill_r+0x1c>
 801364a:	6023      	str	r3, [r4, #0]
 801364c:	bd38      	pop	{r3, r4, r5, pc}
 801364e:	bf00      	nop
 8013650:	24000d04 	.word	0x24000d04

08013654 <_getpid_r>:
 8013654:	f7f1 bb3c 	b.w	8004cd0 <_getpid>

08013658 <_sbrk_r>:
 8013658:	b538      	push	{r3, r4, r5, lr}
 801365a:	4d06      	ldr	r5, [pc, #24]	@ (8013674 <_sbrk_r+0x1c>)
 801365c:	2300      	movs	r3, #0
 801365e:	4604      	mov	r4, r0
 8013660:	4608      	mov	r0, r1
 8013662:	602b      	str	r3, [r5, #0]
 8013664:	f7f1 fbc4 	bl	8004df0 <_sbrk>
 8013668:	1c43      	adds	r3, r0, #1
 801366a:	d102      	bne.n	8013672 <_sbrk_r+0x1a>
 801366c:	682b      	ldr	r3, [r5, #0]
 801366e:	b103      	cbz	r3, 8013672 <_sbrk_r+0x1a>
 8013670:	6023      	str	r3, [r4, #0]
 8013672:	bd38      	pop	{r3, r4, r5, pc}
 8013674:	24000d04 	.word	0x24000d04

08013678 <_write_r>:
 8013678:	b538      	push	{r3, r4, r5, lr}
 801367a:	4d07      	ldr	r5, [pc, #28]	@ (8013698 <_write_r+0x20>)
 801367c:	4604      	mov	r4, r0
 801367e:	4608      	mov	r0, r1
 8013680:	4611      	mov	r1, r2
 8013682:	2200      	movs	r2, #0
 8013684:	602a      	str	r2, [r5, #0]
 8013686:	461a      	mov	r2, r3
 8013688:	f7f1 fb62 	bl	8004d50 <_write>
 801368c:	1c43      	adds	r3, r0, #1
 801368e:	d102      	bne.n	8013696 <_write_r+0x1e>
 8013690:	682b      	ldr	r3, [r5, #0]
 8013692:	b103      	cbz	r3, 8013696 <_write_r+0x1e>
 8013694:	6023      	str	r3, [r4, #0]
 8013696:	bd38      	pop	{r3, r4, r5, pc}
 8013698:	24000d04 	.word	0x24000d04

0801369c <__errno>:
 801369c:	4b01      	ldr	r3, [pc, #4]	@ (80136a4 <__errno+0x8>)
 801369e:	6818      	ldr	r0, [r3, #0]
 80136a0:	4770      	bx	lr
 80136a2:	bf00      	nop
 80136a4:	2400006c 	.word	0x2400006c

080136a8 <__libc_init_array>:
 80136a8:	b570      	push	{r4, r5, r6, lr}
 80136aa:	4d0d      	ldr	r5, [pc, #52]	@ (80136e0 <__libc_init_array+0x38>)
 80136ac:	4c0d      	ldr	r4, [pc, #52]	@ (80136e4 <__libc_init_array+0x3c>)
 80136ae:	1b64      	subs	r4, r4, r5
 80136b0:	10a4      	asrs	r4, r4, #2
 80136b2:	2600      	movs	r6, #0
 80136b4:	42a6      	cmp	r6, r4
 80136b6:	d109      	bne.n	80136cc <__libc_init_array+0x24>
 80136b8:	4d0b      	ldr	r5, [pc, #44]	@ (80136e8 <__libc_init_array+0x40>)
 80136ba:	4c0c      	ldr	r4, [pc, #48]	@ (80136ec <__libc_init_array+0x44>)
 80136bc:	f000 fca8 	bl	8014010 <_init>
 80136c0:	1b64      	subs	r4, r4, r5
 80136c2:	10a4      	asrs	r4, r4, #2
 80136c4:	2600      	movs	r6, #0
 80136c6:	42a6      	cmp	r6, r4
 80136c8:	d105      	bne.n	80136d6 <__libc_init_array+0x2e>
 80136ca:	bd70      	pop	{r4, r5, r6, pc}
 80136cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80136d0:	4798      	blx	r3
 80136d2:	3601      	adds	r6, #1
 80136d4:	e7ee      	b.n	80136b4 <__libc_init_array+0xc>
 80136d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80136da:	4798      	blx	r3
 80136dc:	3601      	adds	r6, #1
 80136de:	e7f2      	b.n	80136c6 <__libc_init_array+0x1e>
 80136e0:	08014918 	.word	0x08014918
 80136e4:	08014918 	.word	0x08014918
 80136e8:	08014918 	.word	0x08014918
 80136ec:	08014920 	.word	0x08014920

080136f0 <__retarget_lock_init_recursive>:
 80136f0:	4770      	bx	lr

080136f2 <__retarget_lock_acquire_recursive>:
 80136f2:	4770      	bx	lr

080136f4 <__retarget_lock_release_recursive>:
 80136f4:	4770      	bx	lr

080136f6 <memcpy>:
 80136f6:	440a      	add	r2, r1
 80136f8:	4291      	cmp	r1, r2
 80136fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80136fe:	d100      	bne.n	8013702 <memcpy+0xc>
 8013700:	4770      	bx	lr
 8013702:	b510      	push	{r4, lr}
 8013704:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013708:	f803 4f01 	strb.w	r4, [r3, #1]!
 801370c:	4291      	cmp	r1, r2
 801370e:	d1f9      	bne.n	8013704 <memcpy+0xe>
 8013710:	bd10      	pop	{r4, pc}
	...

08013714 <_free_r>:
 8013714:	b538      	push	{r3, r4, r5, lr}
 8013716:	4605      	mov	r5, r0
 8013718:	2900      	cmp	r1, #0
 801371a:	d041      	beq.n	80137a0 <_free_r+0x8c>
 801371c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013720:	1f0c      	subs	r4, r1, #4
 8013722:	2b00      	cmp	r3, #0
 8013724:	bfb8      	it	lt
 8013726:	18e4      	addlt	r4, r4, r3
 8013728:	f7ff fc88 	bl	801303c <__malloc_lock>
 801372c:	4a1d      	ldr	r2, [pc, #116]	@ (80137a4 <_free_r+0x90>)
 801372e:	6813      	ldr	r3, [r2, #0]
 8013730:	b933      	cbnz	r3, 8013740 <_free_r+0x2c>
 8013732:	6063      	str	r3, [r4, #4]
 8013734:	6014      	str	r4, [r2, #0]
 8013736:	4628      	mov	r0, r5
 8013738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801373c:	f7ff bc84 	b.w	8013048 <__malloc_unlock>
 8013740:	42a3      	cmp	r3, r4
 8013742:	d908      	bls.n	8013756 <_free_r+0x42>
 8013744:	6820      	ldr	r0, [r4, #0]
 8013746:	1821      	adds	r1, r4, r0
 8013748:	428b      	cmp	r3, r1
 801374a:	bf01      	itttt	eq
 801374c:	6819      	ldreq	r1, [r3, #0]
 801374e:	685b      	ldreq	r3, [r3, #4]
 8013750:	1809      	addeq	r1, r1, r0
 8013752:	6021      	streq	r1, [r4, #0]
 8013754:	e7ed      	b.n	8013732 <_free_r+0x1e>
 8013756:	461a      	mov	r2, r3
 8013758:	685b      	ldr	r3, [r3, #4]
 801375a:	b10b      	cbz	r3, 8013760 <_free_r+0x4c>
 801375c:	42a3      	cmp	r3, r4
 801375e:	d9fa      	bls.n	8013756 <_free_r+0x42>
 8013760:	6811      	ldr	r1, [r2, #0]
 8013762:	1850      	adds	r0, r2, r1
 8013764:	42a0      	cmp	r0, r4
 8013766:	d10b      	bne.n	8013780 <_free_r+0x6c>
 8013768:	6820      	ldr	r0, [r4, #0]
 801376a:	4401      	add	r1, r0
 801376c:	1850      	adds	r0, r2, r1
 801376e:	4283      	cmp	r3, r0
 8013770:	6011      	str	r1, [r2, #0]
 8013772:	d1e0      	bne.n	8013736 <_free_r+0x22>
 8013774:	6818      	ldr	r0, [r3, #0]
 8013776:	685b      	ldr	r3, [r3, #4]
 8013778:	6053      	str	r3, [r2, #4]
 801377a:	4408      	add	r0, r1
 801377c:	6010      	str	r0, [r2, #0]
 801377e:	e7da      	b.n	8013736 <_free_r+0x22>
 8013780:	d902      	bls.n	8013788 <_free_r+0x74>
 8013782:	230c      	movs	r3, #12
 8013784:	602b      	str	r3, [r5, #0]
 8013786:	e7d6      	b.n	8013736 <_free_r+0x22>
 8013788:	6820      	ldr	r0, [r4, #0]
 801378a:	1821      	adds	r1, r4, r0
 801378c:	428b      	cmp	r3, r1
 801378e:	bf04      	itt	eq
 8013790:	6819      	ldreq	r1, [r3, #0]
 8013792:	685b      	ldreq	r3, [r3, #4]
 8013794:	6063      	str	r3, [r4, #4]
 8013796:	bf04      	itt	eq
 8013798:	1809      	addeq	r1, r1, r0
 801379a:	6021      	streq	r1, [r4, #0]
 801379c:	6054      	str	r4, [r2, #4]
 801379e:	e7ca      	b.n	8013736 <_free_r+0x22>
 80137a0:	bd38      	pop	{r3, r4, r5, pc}
 80137a2:	bf00      	nop
 80137a4:	24000bc4 	.word	0x24000bc4

080137a8 <__sfputc_r>:
 80137a8:	6893      	ldr	r3, [r2, #8]
 80137aa:	3b01      	subs	r3, #1
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	b410      	push	{r4}
 80137b0:	6093      	str	r3, [r2, #8]
 80137b2:	da08      	bge.n	80137c6 <__sfputc_r+0x1e>
 80137b4:	6994      	ldr	r4, [r2, #24]
 80137b6:	42a3      	cmp	r3, r4
 80137b8:	db01      	blt.n	80137be <__sfputc_r+0x16>
 80137ba:	290a      	cmp	r1, #10
 80137bc:	d103      	bne.n	80137c6 <__sfputc_r+0x1e>
 80137be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137c2:	f7ff be1a 	b.w	80133fa <__swbuf_r>
 80137c6:	6813      	ldr	r3, [r2, #0]
 80137c8:	1c58      	adds	r0, r3, #1
 80137ca:	6010      	str	r0, [r2, #0]
 80137cc:	7019      	strb	r1, [r3, #0]
 80137ce:	4608      	mov	r0, r1
 80137d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137d4:	4770      	bx	lr

080137d6 <__sfputs_r>:
 80137d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137d8:	4606      	mov	r6, r0
 80137da:	460f      	mov	r7, r1
 80137dc:	4614      	mov	r4, r2
 80137de:	18d5      	adds	r5, r2, r3
 80137e0:	42ac      	cmp	r4, r5
 80137e2:	d101      	bne.n	80137e8 <__sfputs_r+0x12>
 80137e4:	2000      	movs	r0, #0
 80137e6:	e007      	b.n	80137f8 <__sfputs_r+0x22>
 80137e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137ec:	463a      	mov	r2, r7
 80137ee:	4630      	mov	r0, r6
 80137f0:	f7ff ffda 	bl	80137a8 <__sfputc_r>
 80137f4:	1c43      	adds	r3, r0, #1
 80137f6:	d1f3      	bne.n	80137e0 <__sfputs_r+0xa>
 80137f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080137fc <_vfiprintf_r>:
 80137fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013800:	460d      	mov	r5, r1
 8013802:	b09d      	sub	sp, #116	@ 0x74
 8013804:	4614      	mov	r4, r2
 8013806:	4698      	mov	r8, r3
 8013808:	4606      	mov	r6, r0
 801380a:	b118      	cbz	r0, 8013814 <_vfiprintf_r+0x18>
 801380c:	6a03      	ldr	r3, [r0, #32]
 801380e:	b90b      	cbnz	r3, 8013814 <_vfiprintf_r+0x18>
 8013810:	f7ff fd02 	bl	8013218 <__sinit>
 8013814:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013816:	07d9      	lsls	r1, r3, #31
 8013818:	d405      	bmi.n	8013826 <_vfiprintf_r+0x2a>
 801381a:	89ab      	ldrh	r3, [r5, #12]
 801381c:	059a      	lsls	r2, r3, #22
 801381e:	d402      	bmi.n	8013826 <_vfiprintf_r+0x2a>
 8013820:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013822:	f7ff ff66 	bl	80136f2 <__retarget_lock_acquire_recursive>
 8013826:	89ab      	ldrh	r3, [r5, #12]
 8013828:	071b      	lsls	r3, r3, #28
 801382a:	d501      	bpl.n	8013830 <_vfiprintf_r+0x34>
 801382c:	692b      	ldr	r3, [r5, #16]
 801382e:	b99b      	cbnz	r3, 8013858 <_vfiprintf_r+0x5c>
 8013830:	4629      	mov	r1, r5
 8013832:	4630      	mov	r0, r6
 8013834:	f7ff fe20 	bl	8013478 <__swsetup_r>
 8013838:	b170      	cbz	r0, 8013858 <_vfiprintf_r+0x5c>
 801383a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801383c:	07dc      	lsls	r4, r3, #31
 801383e:	d504      	bpl.n	801384a <_vfiprintf_r+0x4e>
 8013840:	f04f 30ff 	mov.w	r0, #4294967295
 8013844:	b01d      	add	sp, #116	@ 0x74
 8013846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801384a:	89ab      	ldrh	r3, [r5, #12]
 801384c:	0598      	lsls	r0, r3, #22
 801384e:	d4f7      	bmi.n	8013840 <_vfiprintf_r+0x44>
 8013850:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013852:	f7ff ff4f 	bl	80136f4 <__retarget_lock_release_recursive>
 8013856:	e7f3      	b.n	8013840 <_vfiprintf_r+0x44>
 8013858:	2300      	movs	r3, #0
 801385a:	9309      	str	r3, [sp, #36]	@ 0x24
 801385c:	2320      	movs	r3, #32
 801385e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013862:	f8cd 800c 	str.w	r8, [sp, #12]
 8013866:	2330      	movs	r3, #48	@ 0x30
 8013868:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013a18 <_vfiprintf_r+0x21c>
 801386c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013870:	f04f 0901 	mov.w	r9, #1
 8013874:	4623      	mov	r3, r4
 8013876:	469a      	mov	sl, r3
 8013878:	f813 2b01 	ldrb.w	r2, [r3], #1
 801387c:	b10a      	cbz	r2, 8013882 <_vfiprintf_r+0x86>
 801387e:	2a25      	cmp	r2, #37	@ 0x25
 8013880:	d1f9      	bne.n	8013876 <_vfiprintf_r+0x7a>
 8013882:	ebba 0b04 	subs.w	fp, sl, r4
 8013886:	d00b      	beq.n	80138a0 <_vfiprintf_r+0xa4>
 8013888:	465b      	mov	r3, fp
 801388a:	4622      	mov	r2, r4
 801388c:	4629      	mov	r1, r5
 801388e:	4630      	mov	r0, r6
 8013890:	f7ff ffa1 	bl	80137d6 <__sfputs_r>
 8013894:	3001      	adds	r0, #1
 8013896:	f000 80a7 	beq.w	80139e8 <_vfiprintf_r+0x1ec>
 801389a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801389c:	445a      	add	r2, fp
 801389e:	9209      	str	r2, [sp, #36]	@ 0x24
 80138a0:	f89a 3000 	ldrb.w	r3, [sl]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	f000 809f 	beq.w	80139e8 <_vfiprintf_r+0x1ec>
 80138aa:	2300      	movs	r3, #0
 80138ac:	f04f 32ff 	mov.w	r2, #4294967295
 80138b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80138b4:	f10a 0a01 	add.w	sl, sl, #1
 80138b8:	9304      	str	r3, [sp, #16]
 80138ba:	9307      	str	r3, [sp, #28]
 80138bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80138c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80138c2:	4654      	mov	r4, sl
 80138c4:	2205      	movs	r2, #5
 80138c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138ca:	4853      	ldr	r0, [pc, #332]	@ (8013a18 <_vfiprintf_r+0x21c>)
 80138cc:	f7ec fd18 	bl	8000300 <memchr>
 80138d0:	9a04      	ldr	r2, [sp, #16]
 80138d2:	b9d8      	cbnz	r0, 801390c <_vfiprintf_r+0x110>
 80138d4:	06d1      	lsls	r1, r2, #27
 80138d6:	bf44      	itt	mi
 80138d8:	2320      	movmi	r3, #32
 80138da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80138de:	0713      	lsls	r3, r2, #28
 80138e0:	bf44      	itt	mi
 80138e2:	232b      	movmi	r3, #43	@ 0x2b
 80138e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80138e8:	f89a 3000 	ldrb.w	r3, [sl]
 80138ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80138ee:	d015      	beq.n	801391c <_vfiprintf_r+0x120>
 80138f0:	9a07      	ldr	r2, [sp, #28]
 80138f2:	4654      	mov	r4, sl
 80138f4:	2000      	movs	r0, #0
 80138f6:	f04f 0c0a 	mov.w	ip, #10
 80138fa:	4621      	mov	r1, r4
 80138fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013900:	3b30      	subs	r3, #48	@ 0x30
 8013902:	2b09      	cmp	r3, #9
 8013904:	d94b      	bls.n	801399e <_vfiprintf_r+0x1a2>
 8013906:	b1b0      	cbz	r0, 8013936 <_vfiprintf_r+0x13a>
 8013908:	9207      	str	r2, [sp, #28]
 801390a:	e014      	b.n	8013936 <_vfiprintf_r+0x13a>
 801390c:	eba0 0308 	sub.w	r3, r0, r8
 8013910:	fa09 f303 	lsl.w	r3, r9, r3
 8013914:	4313      	orrs	r3, r2
 8013916:	9304      	str	r3, [sp, #16]
 8013918:	46a2      	mov	sl, r4
 801391a:	e7d2      	b.n	80138c2 <_vfiprintf_r+0xc6>
 801391c:	9b03      	ldr	r3, [sp, #12]
 801391e:	1d19      	adds	r1, r3, #4
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	9103      	str	r1, [sp, #12]
 8013924:	2b00      	cmp	r3, #0
 8013926:	bfbb      	ittet	lt
 8013928:	425b      	neglt	r3, r3
 801392a:	f042 0202 	orrlt.w	r2, r2, #2
 801392e:	9307      	strge	r3, [sp, #28]
 8013930:	9307      	strlt	r3, [sp, #28]
 8013932:	bfb8      	it	lt
 8013934:	9204      	strlt	r2, [sp, #16]
 8013936:	7823      	ldrb	r3, [r4, #0]
 8013938:	2b2e      	cmp	r3, #46	@ 0x2e
 801393a:	d10a      	bne.n	8013952 <_vfiprintf_r+0x156>
 801393c:	7863      	ldrb	r3, [r4, #1]
 801393e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013940:	d132      	bne.n	80139a8 <_vfiprintf_r+0x1ac>
 8013942:	9b03      	ldr	r3, [sp, #12]
 8013944:	1d1a      	adds	r2, r3, #4
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	9203      	str	r2, [sp, #12]
 801394a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801394e:	3402      	adds	r4, #2
 8013950:	9305      	str	r3, [sp, #20]
 8013952:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013a28 <_vfiprintf_r+0x22c>
 8013956:	7821      	ldrb	r1, [r4, #0]
 8013958:	2203      	movs	r2, #3
 801395a:	4650      	mov	r0, sl
 801395c:	f7ec fcd0 	bl	8000300 <memchr>
 8013960:	b138      	cbz	r0, 8013972 <_vfiprintf_r+0x176>
 8013962:	9b04      	ldr	r3, [sp, #16]
 8013964:	eba0 000a 	sub.w	r0, r0, sl
 8013968:	2240      	movs	r2, #64	@ 0x40
 801396a:	4082      	lsls	r2, r0
 801396c:	4313      	orrs	r3, r2
 801396e:	3401      	adds	r4, #1
 8013970:	9304      	str	r3, [sp, #16]
 8013972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013976:	4829      	ldr	r0, [pc, #164]	@ (8013a1c <_vfiprintf_r+0x220>)
 8013978:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801397c:	2206      	movs	r2, #6
 801397e:	f7ec fcbf 	bl	8000300 <memchr>
 8013982:	2800      	cmp	r0, #0
 8013984:	d03f      	beq.n	8013a06 <_vfiprintf_r+0x20a>
 8013986:	4b26      	ldr	r3, [pc, #152]	@ (8013a20 <_vfiprintf_r+0x224>)
 8013988:	bb1b      	cbnz	r3, 80139d2 <_vfiprintf_r+0x1d6>
 801398a:	9b03      	ldr	r3, [sp, #12]
 801398c:	3307      	adds	r3, #7
 801398e:	f023 0307 	bic.w	r3, r3, #7
 8013992:	3308      	adds	r3, #8
 8013994:	9303      	str	r3, [sp, #12]
 8013996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013998:	443b      	add	r3, r7
 801399a:	9309      	str	r3, [sp, #36]	@ 0x24
 801399c:	e76a      	b.n	8013874 <_vfiprintf_r+0x78>
 801399e:	fb0c 3202 	mla	r2, ip, r2, r3
 80139a2:	460c      	mov	r4, r1
 80139a4:	2001      	movs	r0, #1
 80139a6:	e7a8      	b.n	80138fa <_vfiprintf_r+0xfe>
 80139a8:	2300      	movs	r3, #0
 80139aa:	3401      	adds	r4, #1
 80139ac:	9305      	str	r3, [sp, #20]
 80139ae:	4619      	mov	r1, r3
 80139b0:	f04f 0c0a 	mov.w	ip, #10
 80139b4:	4620      	mov	r0, r4
 80139b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80139ba:	3a30      	subs	r2, #48	@ 0x30
 80139bc:	2a09      	cmp	r2, #9
 80139be:	d903      	bls.n	80139c8 <_vfiprintf_r+0x1cc>
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d0c6      	beq.n	8013952 <_vfiprintf_r+0x156>
 80139c4:	9105      	str	r1, [sp, #20]
 80139c6:	e7c4      	b.n	8013952 <_vfiprintf_r+0x156>
 80139c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80139cc:	4604      	mov	r4, r0
 80139ce:	2301      	movs	r3, #1
 80139d0:	e7f0      	b.n	80139b4 <_vfiprintf_r+0x1b8>
 80139d2:	ab03      	add	r3, sp, #12
 80139d4:	9300      	str	r3, [sp, #0]
 80139d6:	462a      	mov	r2, r5
 80139d8:	4b12      	ldr	r3, [pc, #72]	@ (8013a24 <_vfiprintf_r+0x228>)
 80139da:	a904      	add	r1, sp, #16
 80139dc:	4630      	mov	r0, r6
 80139de:	f3af 8000 	nop.w
 80139e2:	4607      	mov	r7, r0
 80139e4:	1c78      	adds	r0, r7, #1
 80139e6:	d1d6      	bne.n	8013996 <_vfiprintf_r+0x19a>
 80139e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80139ea:	07d9      	lsls	r1, r3, #31
 80139ec:	d405      	bmi.n	80139fa <_vfiprintf_r+0x1fe>
 80139ee:	89ab      	ldrh	r3, [r5, #12]
 80139f0:	059a      	lsls	r2, r3, #22
 80139f2:	d402      	bmi.n	80139fa <_vfiprintf_r+0x1fe>
 80139f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80139f6:	f7ff fe7d 	bl	80136f4 <__retarget_lock_release_recursive>
 80139fa:	89ab      	ldrh	r3, [r5, #12]
 80139fc:	065b      	lsls	r3, r3, #25
 80139fe:	f53f af1f 	bmi.w	8013840 <_vfiprintf_r+0x44>
 8013a02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a04:	e71e      	b.n	8013844 <_vfiprintf_r+0x48>
 8013a06:	ab03      	add	r3, sp, #12
 8013a08:	9300      	str	r3, [sp, #0]
 8013a0a:	462a      	mov	r2, r5
 8013a0c:	4b05      	ldr	r3, [pc, #20]	@ (8013a24 <_vfiprintf_r+0x228>)
 8013a0e:	a904      	add	r1, sp, #16
 8013a10:	4630      	mov	r0, r6
 8013a12:	f000 f879 	bl	8013b08 <_printf_i>
 8013a16:	e7e4      	b.n	80139e2 <_vfiprintf_r+0x1e6>
 8013a18:	080148dd 	.word	0x080148dd
 8013a1c:	080148e7 	.word	0x080148e7
 8013a20:	00000000 	.word	0x00000000
 8013a24:	080137d7 	.word	0x080137d7
 8013a28:	080148e3 	.word	0x080148e3

08013a2c <_printf_common>:
 8013a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a30:	4616      	mov	r6, r2
 8013a32:	4698      	mov	r8, r3
 8013a34:	688a      	ldr	r2, [r1, #8]
 8013a36:	690b      	ldr	r3, [r1, #16]
 8013a38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013a3c:	4293      	cmp	r3, r2
 8013a3e:	bfb8      	it	lt
 8013a40:	4613      	movlt	r3, r2
 8013a42:	6033      	str	r3, [r6, #0]
 8013a44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013a48:	4607      	mov	r7, r0
 8013a4a:	460c      	mov	r4, r1
 8013a4c:	b10a      	cbz	r2, 8013a52 <_printf_common+0x26>
 8013a4e:	3301      	adds	r3, #1
 8013a50:	6033      	str	r3, [r6, #0]
 8013a52:	6823      	ldr	r3, [r4, #0]
 8013a54:	0699      	lsls	r1, r3, #26
 8013a56:	bf42      	ittt	mi
 8013a58:	6833      	ldrmi	r3, [r6, #0]
 8013a5a:	3302      	addmi	r3, #2
 8013a5c:	6033      	strmi	r3, [r6, #0]
 8013a5e:	6825      	ldr	r5, [r4, #0]
 8013a60:	f015 0506 	ands.w	r5, r5, #6
 8013a64:	d106      	bne.n	8013a74 <_printf_common+0x48>
 8013a66:	f104 0a19 	add.w	sl, r4, #25
 8013a6a:	68e3      	ldr	r3, [r4, #12]
 8013a6c:	6832      	ldr	r2, [r6, #0]
 8013a6e:	1a9b      	subs	r3, r3, r2
 8013a70:	42ab      	cmp	r3, r5
 8013a72:	dc26      	bgt.n	8013ac2 <_printf_common+0x96>
 8013a74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013a78:	6822      	ldr	r2, [r4, #0]
 8013a7a:	3b00      	subs	r3, #0
 8013a7c:	bf18      	it	ne
 8013a7e:	2301      	movne	r3, #1
 8013a80:	0692      	lsls	r2, r2, #26
 8013a82:	d42b      	bmi.n	8013adc <_printf_common+0xb0>
 8013a84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013a88:	4641      	mov	r1, r8
 8013a8a:	4638      	mov	r0, r7
 8013a8c:	47c8      	blx	r9
 8013a8e:	3001      	adds	r0, #1
 8013a90:	d01e      	beq.n	8013ad0 <_printf_common+0xa4>
 8013a92:	6823      	ldr	r3, [r4, #0]
 8013a94:	6922      	ldr	r2, [r4, #16]
 8013a96:	f003 0306 	and.w	r3, r3, #6
 8013a9a:	2b04      	cmp	r3, #4
 8013a9c:	bf02      	ittt	eq
 8013a9e:	68e5      	ldreq	r5, [r4, #12]
 8013aa0:	6833      	ldreq	r3, [r6, #0]
 8013aa2:	1aed      	subeq	r5, r5, r3
 8013aa4:	68a3      	ldr	r3, [r4, #8]
 8013aa6:	bf0c      	ite	eq
 8013aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013aac:	2500      	movne	r5, #0
 8013aae:	4293      	cmp	r3, r2
 8013ab0:	bfc4      	itt	gt
 8013ab2:	1a9b      	subgt	r3, r3, r2
 8013ab4:	18ed      	addgt	r5, r5, r3
 8013ab6:	2600      	movs	r6, #0
 8013ab8:	341a      	adds	r4, #26
 8013aba:	42b5      	cmp	r5, r6
 8013abc:	d11a      	bne.n	8013af4 <_printf_common+0xc8>
 8013abe:	2000      	movs	r0, #0
 8013ac0:	e008      	b.n	8013ad4 <_printf_common+0xa8>
 8013ac2:	2301      	movs	r3, #1
 8013ac4:	4652      	mov	r2, sl
 8013ac6:	4641      	mov	r1, r8
 8013ac8:	4638      	mov	r0, r7
 8013aca:	47c8      	blx	r9
 8013acc:	3001      	adds	r0, #1
 8013ace:	d103      	bne.n	8013ad8 <_printf_common+0xac>
 8013ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ad8:	3501      	adds	r5, #1
 8013ada:	e7c6      	b.n	8013a6a <_printf_common+0x3e>
 8013adc:	18e1      	adds	r1, r4, r3
 8013ade:	1c5a      	adds	r2, r3, #1
 8013ae0:	2030      	movs	r0, #48	@ 0x30
 8013ae2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013ae6:	4422      	add	r2, r4
 8013ae8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013aec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013af0:	3302      	adds	r3, #2
 8013af2:	e7c7      	b.n	8013a84 <_printf_common+0x58>
 8013af4:	2301      	movs	r3, #1
 8013af6:	4622      	mov	r2, r4
 8013af8:	4641      	mov	r1, r8
 8013afa:	4638      	mov	r0, r7
 8013afc:	47c8      	blx	r9
 8013afe:	3001      	adds	r0, #1
 8013b00:	d0e6      	beq.n	8013ad0 <_printf_common+0xa4>
 8013b02:	3601      	adds	r6, #1
 8013b04:	e7d9      	b.n	8013aba <_printf_common+0x8e>
	...

08013b08 <_printf_i>:
 8013b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013b0c:	7e0f      	ldrb	r7, [r1, #24]
 8013b0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013b10:	2f78      	cmp	r7, #120	@ 0x78
 8013b12:	4691      	mov	r9, r2
 8013b14:	4680      	mov	r8, r0
 8013b16:	460c      	mov	r4, r1
 8013b18:	469a      	mov	sl, r3
 8013b1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013b1e:	d807      	bhi.n	8013b30 <_printf_i+0x28>
 8013b20:	2f62      	cmp	r7, #98	@ 0x62
 8013b22:	d80a      	bhi.n	8013b3a <_printf_i+0x32>
 8013b24:	2f00      	cmp	r7, #0
 8013b26:	f000 80d2 	beq.w	8013cce <_printf_i+0x1c6>
 8013b2a:	2f58      	cmp	r7, #88	@ 0x58
 8013b2c:	f000 80b9 	beq.w	8013ca2 <_printf_i+0x19a>
 8013b30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013b34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013b38:	e03a      	b.n	8013bb0 <_printf_i+0xa8>
 8013b3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013b3e:	2b15      	cmp	r3, #21
 8013b40:	d8f6      	bhi.n	8013b30 <_printf_i+0x28>
 8013b42:	a101      	add	r1, pc, #4	@ (adr r1, 8013b48 <_printf_i+0x40>)
 8013b44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013b48:	08013ba1 	.word	0x08013ba1
 8013b4c:	08013bb5 	.word	0x08013bb5
 8013b50:	08013b31 	.word	0x08013b31
 8013b54:	08013b31 	.word	0x08013b31
 8013b58:	08013b31 	.word	0x08013b31
 8013b5c:	08013b31 	.word	0x08013b31
 8013b60:	08013bb5 	.word	0x08013bb5
 8013b64:	08013b31 	.word	0x08013b31
 8013b68:	08013b31 	.word	0x08013b31
 8013b6c:	08013b31 	.word	0x08013b31
 8013b70:	08013b31 	.word	0x08013b31
 8013b74:	08013cb5 	.word	0x08013cb5
 8013b78:	08013bdf 	.word	0x08013bdf
 8013b7c:	08013c6f 	.word	0x08013c6f
 8013b80:	08013b31 	.word	0x08013b31
 8013b84:	08013b31 	.word	0x08013b31
 8013b88:	08013cd7 	.word	0x08013cd7
 8013b8c:	08013b31 	.word	0x08013b31
 8013b90:	08013bdf 	.word	0x08013bdf
 8013b94:	08013b31 	.word	0x08013b31
 8013b98:	08013b31 	.word	0x08013b31
 8013b9c:	08013c77 	.word	0x08013c77
 8013ba0:	6833      	ldr	r3, [r6, #0]
 8013ba2:	1d1a      	adds	r2, r3, #4
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	6032      	str	r2, [r6, #0]
 8013ba8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013bac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013bb0:	2301      	movs	r3, #1
 8013bb2:	e09d      	b.n	8013cf0 <_printf_i+0x1e8>
 8013bb4:	6833      	ldr	r3, [r6, #0]
 8013bb6:	6820      	ldr	r0, [r4, #0]
 8013bb8:	1d19      	adds	r1, r3, #4
 8013bba:	6031      	str	r1, [r6, #0]
 8013bbc:	0606      	lsls	r6, r0, #24
 8013bbe:	d501      	bpl.n	8013bc4 <_printf_i+0xbc>
 8013bc0:	681d      	ldr	r5, [r3, #0]
 8013bc2:	e003      	b.n	8013bcc <_printf_i+0xc4>
 8013bc4:	0645      	lsls	r5, r0, #25
 8013bc6:	d5fb      	bpl.n	8013bc0 <_printf_i+0xb8>
 8013bc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013bcc:	2d00      	cmp	r5, #0
 8013bce:	da03      	bge.n	8013bd8 <_printf_i+0xd0>
 8013bd0:	232d      	movs	r3, #45	@ 0x2d
 8013bd2:	426d      	negs	r5, r5
 8013bd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013bd8:	4859      	ldr	r0, [pc, #356]	@ (8013d40 <_printf_i+0x238>)
 8013bda:	230a      	movs	r3, #10
 8013bdc:	e011      	b.n	8013c02 <_printf_i+0xfa>
 8013bde:	6821      	ldr	r1, [r4, #0]
 8013be0:	6833      	ldr	r3, [r6, #0]
 8013be2:	0608      	lsls	r0, r1, #24
 8013be4:	f853 5b04 	ldr.w	r5, [r3], #4
 8013be8:	d402      	bmi.n	8013bf0 <_printf_i+0xe8>
 8013bea:	0649      	lsls	r1, r1, #25
 8013bec:	bf48      	it	mi
 8013bee:	b2ad      	uxthmi	r5, r5
 8013bf0:	2f6f      	cmp	r7, #111	@ 0x6f
 8013bf2:	4853      	ldr	r0, [pc, #332]	@ (8013d40 <_printf_i+0x238>)
 8013bf4:	6033      	str	r3, [r6, #0]
 8013bf6:	bf14      	ite	ne
 8013bf8:	230a      	movne	r3, #10
 8013bfa:	2308      	moveq	r3, #8
 8013bfc:	2100      	movs	r1, #0
 8013bfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013c02:	6866      	ldr	r6, [r4, #4]
 8013c04:	60a6      	str	r6, [r4, #8]
 8013c06:	2e00      	cmp	r6, #0
 8013c08:	bfa2      	ittt	ge
 8013c0a:	6821      	ldrge	r1, [r4, #0]
 8013c0c:	f021 0104 	bicge.w	r1, r1, #4
 8013c10:	6021      	strge	r1, [r4, #0]
 8013c12:	b90d      	cbnz	r5, 8013c18 <_printf_i+0x110>
 8013c14:	2e00      	cmp	r6, #0
 8013c16:	d04b      	beq.n	8013cb0 <_printf_i+0x1a8>
 8013c18:	4616      	mov	r6, r2
 8013c1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8013c1e:	fb03 5711 	mls	r7, r3, r1, r5
 8013c22:	5dc7      	ldrb	r7, [r0, r7]
 8013c24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013c28:	462f      	mov	r7, r5
 8013c2a:	42bb      	cmp	r3, r7
 8013c2c:	460d      	mov	r5, r1
 8013c2e:	d9f4      	bls.n	8013c1a <_printf_i+0x112>
 8013c30:	2b08      	cmp	r3, #8
 8013c32:	d10b      	bne.n	8013c4c <_printf_i+0x144>
 8013c34:	6823      	ldr	r3, [r4, #0]
 8013c36:	07df      	lsls	r7, r3, #31
 8013c38:	d508      	bpl.n	8013c4c <_printf_i+0x144>
 8013c3a:	6923      	ldr	r3, [r4, #16]
 8013c3c:	6861      	ldr	r1, [r4, #4]
 8013c3e:	4299      	cmp	r1, r3
 8013c40:	bfde      	ittt	le
 8013c42:	2330      	movle	r3, #48	@ 0x30
 8013c44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013c48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013c4c:	1b92      	subs	r2, r2, r6
 8013c4e:	6122      	str	r2, [r4, #16]
 8013c50:	f8cd a000 	str.w	sl, [sp]
 8013c54:	464b      	mov	r3, r9
 8013c56:	aa03      	add	r2, sp, #12
 8013c58:	4621      	mov	r1, r4
 8013c5a:	4640      	mov	r0, r8
 8013c5c:	f7ff fee6 	bl	8013a2c <_printf_common>
 8013c60:	3001      	adds	r0, #1
 8013c62:	d14a      	bne.n	8013cfa <_printf_i+0x1f2>
 8013c64:	f04f 30ff 	mov.w	r0, #4294967295
 8013c68:	b004      	add	sp, #16
 8013c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c6e:	6823      	ldr	r3, [r4, #0]
 8013c70:	f043 0320 	orr.w	r3, r3, #32
 8013c74:	6023      	str	r3, [r4, #0]
 8013c76:	4833      	ldr	r0, [pc, #204]	@ (8013d44 <_printf_i+0x23c>)
 8013c78:	2778      	movs	r7, #120	@ 0x78
 8013c7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013c7e:	6823      	ldr	r3, [r4, #0]
 8013c80:	6831      	ldr	r1, [r6, #0]
 8013c82:	061f      	lsls	r7, r3, #24
 8013c84:	f851 5b04 	ldr.w	r5, [r1], #4
 8013c88:	d402      	bmi.n	8013c90 <_printf_i+0x188>
 8013c8a:	065f      	lsls	r7, r3, #25
 8013c8c:	bf48      	it	mi
 8013c8e:	b2ad      	uxthmi	r5, r5
 8013c90:	6031      	str	r1, [r6, #0]
 8013c92:	07d9      	lsls	r1, r3, #31
 8013c94:	bf44      	itt	mi
 8013c96:	f043 0320 	orrmi.w	r3, r3, #32
 8013c9a:	6023      	strmi	r3, [r4, #0]
 8013c9c:	b11d      	cbz	r5, 8013ca6 <_printf_i+0x19e>
 8013c9e:	2310      	movs	r3, #16
 8013ca0:	e7ac      	b.n	8013bfc <_printf_i+0xf4>
 8013ca2:	4827      	ldr	r0, [pc, #156]	@ (8013d40 <_printf_i+0x238>)
 8013ca4:	e7e9      	b.n	8013c7a <_printf_i+0x172>
 8013ca6:	6823      	ldr	r3, [r4, #0]
 8013ca8:	f023 0320 	bic.w	r3, r3, #32
 8013cac:	6023      	str	r3, [r4, #0]
 8013cae:	e7f6      	b.n	8013c9e <_printf_i+0x196>
 8013cb0:	4616      	mov	r6, r2
 8013cb2:	e7bd      	b.n	8013c30 <_printf_i+0x128>
 8013cb4:	6833      	ldr	r3, [r6, #0]
 8013cb6:	6825      	ldr	r5, [r4, #0]
 8013cb8:	6961      	ldr	r1, [r4, #20]
 8013cba:	1d18      	adds	r0, r3, #4
 8013cbc:	6030      	str	r0, [r6, #0]
 8013cbe:	062e      	lsls	r6, r5, #24
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	d501      	bpl.n	8013cc8 <_printf_i+0x1c0>
 8013cc4:	6019      	str	r1, [r3, #0]
 8013cc6:	e002      	b.n	8013cce <_printf_i+0x1c6>
 8013cc8:	0668      	lsls	r0, r5, #25
 8013cca:	d5fb      	bpl.n	8013cc4 <_printf_i+0x1bc>
 8013ccc:	8019      	strh	r1, [r3, #0]
 8013cce:	2300      	movs	r3, #0
 8013cd0:	6123      	str	r3, [r4, #16]
 8013cd2:	4616      	mov	r6, r2
 8013cd4:	e7bc      	b.n	8013c50 <_printf_i+0x148>
 8013cd6:	6833      	ldr	r3, [r6, #0]
 8013cd8:	1d1a      	adds	r2, r3, #4
 8013cda:	6032      	str	r2, [r6, #0]
 8013cdc:	681e      	ldr	r6, [r3, #0]
 8013cde:	6862      	ldr	r2, [r4, #4]
 8013ce0:	2100      	movs	r1, #0
 8013ce2:	4630      	mov	r0, r6
 8013ce4:	f7ec fb0c 	bl	8000300 <memchr>
 8013ce8:	b108      	cbz	r0, 8013cee <_printf_i+0x1e6>
 8013cea:	1b80      	subs	r0, r0, r6
 8013cec:	6060      	str	r0, [r4, #4]
 8013cee:	6863      	ldr	r3, [r4, #4]
 8013cf0:	6123      	str	r3, [r4, #16]
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013cf8:	e7aa      	b.n	8013c50 <_printf_i+0x148>
 8013cfa:	6923      	ldr	r3, [r4, #16]
 8013cfc:	4632      	mov	r2, r6
 8013cfe:	4649      	mov	r1, r9
 8013d00:	4640      	mov	r0, r8
 8013d02:	47d0      	blx	sl
 8013d04:	3001      	adds	r0, #1
 8013d06:	d0ad      	beq.n	8013c64 <_printf_i+0x15c>
 8013d08:	6823      	ldr	r3, [r4, #0]
 8013d0a:	079b      	lsls	r3, r3, #30
 8013d0c:	d413      	bmi.n	8013d36 <_printf_i+0x22e>
 8013d0e:	68e0      	ldr	r0, [r4, #12]
 8013d10:	9b03      	ldr	r3, [sp, #12]
 8013d12:	4298      	cmp	r0, r3
 8013d14:	bfb8      	it	lt
 8013d16:	4618      	movlt	r0, r3
 8013d18:	e7a6      	b.n	8013c68 <_printf_i+0x160>
 8013d1a:	2301      	movs	r3, #1
 8013d1c:	4632      	mov	r2, r6
 8013d1e:	4649      	mov	r1, r9
 8013d20:	4640      	mov	r0, r8
 8013d22:	47d0      	blx	sl
 8013d24:	3001      	adds	r0, #1
 8013d26:	d09d      	beq.n	8013c64 <_printf_i+0x15c>
 8013d28:	3501      	adds	r5, #1
 8013d2a:	68e3      	ldr	r3, [r4, #12]
 8013d2c:	9903      	ldr	r1, [sp, #12]
 8013d2e:	1a5b      	subs	r3, r3, r1
 8013d30:	42ab      	cmp	r3, r5
 8013d32:	dcf2      	bgt.n	8013d1a <_printf_i+0x212>
 8013d34:	e7eb      	b.n	8013d0e <_printf_i+0x206>
 8013d36:	2500      	movs	r5, #0
 8013d38:	f104 0619 	add.w	r6, r4, #25
 8013d3c:	e7f5      	b.n	8013d2a <_printf_i+0x222>
 8013d3e:	bf00      	nop
 8013d40:	080148ee 	.word	0x080148ee
 8013d44:	080148ff 	.word	0x080148ff

08013d48 <__sflush_r>:
 8013d48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d50:	0716      	lsls	r6, r2, #28
 8013d52:	4605      	mov	r5, r0
 8013d54:	460c      	mov	r4, r1
 8013d56:	d454      	bmi.n	8013e02 <__sflush_r+0xba>
 8013d58:	684b      	ldr	r3, [r1, #4]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	dc02      	bgt.n	8013d64 <__sflush_r+0x1c>
 8013d5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	dd48      	ble.n	8013df6 <__sflush_r+0xae>
 8013d64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013d66:	2e00      	cmp	r6, #0
 8013d68:	d045      	beq.n	8013df6 <__sflush_r+0xae>
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013d70:	682f      	ldr	r7, [r5, #0]
 8013d72:	6a21      	ldr	r1, [r4, #32]
 8013d74:	602b      	str	r3, [r5, #0]
 8013d76:	d030      	beq.n	8013dda <__sflush_r+0x92>
 8013d78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013d7a:	89a3      	ldrh	r3, [r4, #12]
 8013d7c:	0759      	lsls	r1, r3, #29
 8013d7e:	d505      	bpl.n	8013d8c <__sflush_r+0x44>
 8013d80:	6863      	ldr	r3, [r4, #4]
 8013d82:	1ad2      	subs	r2, r2, r3
 8013d84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013d86:	b10b      	cbz	r3, 8013d8c <__sflush_r+0x44>
 8013d88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013d8a:	1ad2      	subs	r2, r2, r3
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013d90:	6a21      	ldr	r1, [r4, #32]
 8013d92:	4628      	mov	r0, r5
 8013d94:	47b0      	blx	r6
 8013d96:	1c43      	adds	r3, r0, #1
 8013d98:	89a3      	ldrh	r3, [r4, #12]
 8013d9a:	d106      	bne.n	8013daa <__sflush_r+0x62>
 8013d9c:	6829      	ldr	r1, [r5, #0]
 8013d9e:	291d      	cmp	r1, #29
 8013da0:	d82b      	bhi.n	8013dfa <__sflush_r+0xb2>
 8013da2:	4a2a      	ldr	r2, [pc, #168]	@ (8013e4c <__sflush_r+0x104>)
 8013da4:	410a      	asrs	r2, r1
 8013da6:	07d6      	lsls	r6, r2, #31
 8013da8:	d427      	bmi.n	8013dfa <__sflush_r+0xb2>
 8013daa:	2200      	movs	r2, #0
 8013dac:	6062      	str	r2, [r4, #4]
 8013dae:	04d9      	lsls	r1, r3, #19
 8013db0:	6922      	ldr	r2, [r4, #16]
 8013db2:	6022      	str	r2, [r4, #0]
 8013db4:	d504      	bpl.n	8013dc0 <__sflush_r+0x78>
 8013db6:	1c42      	adds	r2, r0, #1
 8013db8:	d101      	bne.n	8013dbe <__sflush_r+0x76>
 8013dba:	682b      	ldr	r3, [r5, #0]
 8013dbc:	b903      	cbnz	r3, 8013dc0 <__sflush_r+0x78>
 8013dbe:	6560      	str	r0, [r4, #84]	@ 0x54
 8013dc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013dc2:	602f      	str	r7, [r5, #0]
 8013dc4:	b1b9      	cbz	r1, 8013df6 <__sflush_r+0xae>
 8013dc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013dca:	4299      	cmp	r1, r3
 8013dcc:	d002      	beq.n	8013dd4 <__sflush_r+0x8c>
 8013dce:	4628      	mov	r0, r5
 8013dd0:	f7ff fca0 	bl	8013714 <_free_r>
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8013dd8:	e00d      	b.n	8013df6 <__sflush_r+0xae>
 8013dda:	2301      	movs	r3, #1
 8013ddc:	4628      	mov	r0, r5
 8013dde:	47b0      	blx	r6
 8013de0:	4602      	mov	r2, r0
 8013de2:	1c50      	adds	r0, r2, #1
 8013de4:	d1c9      	bne.n	8013d7a <__sflush_r+0x32>
 8013de6:	682b      	ldr	r3, [r5, #0]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d0c6      	beq.n	8013d7a <__sflush_r+0x32>
 8013dec:	2b1d      	cmp	r3, #29
 8013dee:	d001      	beq.n	8013df4 <__sflush_r+0xac>
 8013df0:	2b16      	cmp	r3, #22
 8013df2:	d11e      	bne.n	8013e32 <__sflush_r+0xea>
 8013df4:	602f      	str	r7, [r5, #0]
 8013df6:	2000      	movs	r0, #0
 8013df8:	e022      	b.n	8013e40 <__sflush_r+0xf8>
 8013dfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013dfe:	b21b      	sxth	r3, r3
 8013e00:	e01b      	b.n	8013e3a <__sflush_r+0xf2>
 8013e02:	690f      	ldr	r7, [r1, #16]
 8013e04:	2f00      	cmp	r7, #0
 8013e06:	d0f6      	beq.n	8013df6 <__sflush_r+0xae>
 8013e08:	0793      	lsls	r3, r2, #30
 8013e0a:	680e      	ldr	r6, [r1, #0]
 8013e0c:	bf08      	it	eq
 8013e0e:	694b      	ldreq	r3, [r1, #20]
 8013e10:	600f      	str	r7, [r1, #0]
 8013e12:	bf18      	it	ne
 8013e14:	2300      	movne	r3, #0
 8013e16:	eba6 0807 	sub.w	r8, r6, r7
 8013e1a:	608b      	str	r3, [r1, #8]
 8013e1c:	f1b8 0f00 	cmp.w	r8, #0
 8013e20:	dde9      	ble.n	8013df6 <__sflush_r+0xae>
 8013e22:	6a21      	ldr	r1, [r4, #32]
 8013e24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013e26:	4643      	mov	r3, r8
 8013e28:	463a      	mov	r2, r7
 8013e2a:	4628      	mov	r0, r5
 8013e2c:	47b0      	blx	r6
 8013e2e:	2800      	cmp	r0, #0
 8013e30:	dc08      	bgt.n	8013e44 <__sflush_r+0xfc>
 8013e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e3a:	81a3      	strh	r3, [r4, #12]
 8013e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8013e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e44:	4407      	add	r7, r0
 8013e46:	eba8 0800 	sub.w	r8, r8, r0
 8013e4a:	e7e7      	b.n	8013e1c <__sflush_r+0xd4>
 8013e4c:	dfbffffe 	.word	0xdfbffffe

08013e50 <_fflush_r>:
 8013e50:	b538      	push	{r3, r4, r5, lr}
 8013e52:	690b      	ldr	r3, [r1, #16]
 8013e54:	4605      	mov	r5, r0
 8013e56:	460c      	mov	r4, r1
 8013e58:	b913      	cbnz	r3, 8013e60 <_fflush_r+0x10>
 8013e5a:	2500      	movs	r5, #0
 8013e5c:	4628      	mov	r0, r5
 8013e5e:	bd38      	pop	{r3, r4, r5, pc}
 8013e60:	b118      	cbz	r0, 8013e6a <_fflush_r+0x1a>
 8013e62:	6a03      	ldr	r3, [r0, #32]
 8013e64:	b90b      	cbnz	r3, 8013e6a <_fflush_r+0x1a>
 8013e66:	f7ff f9d7 	bl	8013218 <__sinit>
 8013e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d0f3      	beq.n	8013e5a <_fflush_r+0xa>
 8013e72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013e74:	07d0      	lsls	r0, r2, #31
 8013e76:	d404      	bmi.n	8013e82 <_fflush_r+0x32>
 8013e78:	0599      	lsls	r1, r3, #22
 8013e7a:	d402      	bmi.n	8013e82 <_fflush_r+0x32>
 8013e7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e7e:	f7ff fc38 	bl	80136f2 <__retarget_lock_acquire_recursive>
 8013e82:	4628      	mov	r0, r5
 8013e84:	4621      	mov	r1, r4
 8013e86:	f7ff ff5f 	bl	8013d48 <__sflush_r>
 8013e8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013e8c:	07da      	lsls	r2, r3, #31
 8013e8e:	4605      	mov	r5, r0
 8013e90:	d4e4      	bmi.n	8013e5c <_fflush_r+0xc>
 8013e92:	89a3      	ldrh	r3, [r4, #12]
 8013e94:	059b      	lsls	r3, r3, #22
 8013e96:	d4e1      	bmi.n	8013e5c <_fflush_r+0xc>
 8013e98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e9a:	f7ff fc2b 	bl	80136f4 <__retarget_lock_release_recursive>
 8013e9e:	e7dd      	b.n	8013e5c <_fflush_r+0xc>

08013ea0 <__swhatbuf_r>:
 8013ea0:	b570      	push	{r4, r5, r6, lr}
 8013ea2:	460c      	mov	r4, r1
 8013ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ea8:	2900      	cmp	r1, #0
 8013eaa:	b096      	sub	sp, #88	@ 0x58
 8013eac:	4615      	mov	r5, r2
 8013eae:	461e      	mov	r6, r3
 8013eb0:	da0d      	bge.n	8013ece <__swhatbuf_r+0x2e>
 8013eb2:	89a3      	ldrh	r3, [r4, #12]
 8013eb4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013eb8:	f04f 0100 	mov.w	r1, #0
 8013ebc:	bf14      	ite	ne
 8013ebe:	2340      	movne	r3, #64	@ 0x40
 8013ec0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013ec4:	2000      	movs	r0, #0
 8013ec6:	6031      	str	r1, [r6, #0]
 8013ec8:	602b      	str	r3, [r5, #0]
 8013eca:	b016      	add	sp, #88	@ 0x58
 8013ecc:	bd70      	pop	{r4, r5, r6, pc}
 8013ece:	466a      	mov	r2, sp
 8013ed0:	f000 f87c 	bl	8013fcc <_fstat_r>
 8013ed4:	2800      	cmp	r0, #0
 8013ed6:	dbec      	blt.n	8013eb2 <__swhatbuf_r+0x12>
 8013ed8:	9901      	ldr	r1, [sp, #4]
 8013eda:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013ede:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013ee2:	4259      	negs	r1, r3
 8013ee4:	4159      	adcs	r1, r3
 8013ee6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013eea:	e7eb      	b.n	8013ec4 <__swhatbuf_r+0x24>

08013eec <__smakebuf_r>:
 8013eec:	898b      	ldrh	r3, [r1, #12]
 8013eee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013ef0:	079d      	lsls	r5, r3, #30
 8013ef2:	4606      	mov	r6, r0
 8013ef4:	460c      	mov	r4, r1
 8013ef6:	d507      	bpl.n	8013f08 <__smakebuf_r+0x1c>
 8013ef8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013efc:	6023      	str	r3, [r4, #0]
 8013efe:	6123      	str	r3, [r4, #16]
 8013f00:	2301      	movs	r3, #1
 8013f02:	6163      	str	r3, [r4, #20]
 8013f04:	b003      	add	sp, #12
 8013f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f08:	ab01      	add	r3, sp, #4
 8013f0a:	466a      	mov	r2, sp
 8013f0c:	f7ff ffc8 	bl	8013ea0 <__swhatbuf_r>
 8013f10:	9f00      	ldr	r7, [sp, #0]
 8013f12:	4605      	mov	r5, r0
 8013f14:	4639      	mov	r1, r7
 8013f16:	4630      	mov	r0, r6
 8013f18:	f7ff f810 	bl	8012f3c <_malloc_r>
 8013f1c:	b948      	cbnz	r0, 8013f32 <__smakebuf_r+0x46>
 8013f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f22:	059a      	lsls	r2, r3, #22
 8013f24:	d4ee      	bmi.n	8013f04 <__smakebuf_r+0x18>
 8013f26:	f023 0303 	bic.w	r3, r3, #3
 8013f2a:	f043 0302 	orr.w	r3, r3, #2
 8013f2e:	81a3      	strh	r3, [r4, #12]
 8013f30:	e7e2      	b.n	8013ef8 <__smakebuf_r+0xc>
 8013f32:	89a3      	ldrh	r3, [r4, #12]
 8013f34:	6020      	str	r0, [r4, #0]
 8013f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013f3a:	81a3      	strh	r3, [r4, #12]
 8013f3c:	9b01      	ldr	r3, [sp, #4]
 8013f3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013f42:	b15b      	cbz	r3, 8013f5c <__smakebuf_r+0x70>
 8013f44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f48:	4630      	mov	r0, r6
 8013f4a:	f000 f851 	bl	8013ff0 <_isatty_r>
 8013f4e:	b128      	cbz	r0, 8013f5c <__smakebuf_r+0x70>
 8013f50:	89a3      	ldrh	r3, [r4, #12]
 8013f52:	f023 0303 	bic.w	r3, r3, #3
 8013f56:	f043 0301 	orr.w	r3, r3, #1
 8013f5a:	81a3      	strh	r3, [r4, #12]
 8013f5c:	89a3      	ldrh	r3, [r4, #12]
 8013f5e:	431d      	orrs	r5, r3
 8013f60:	81a5      	strh	r5, [r4, #12]
 8013f62:	e7cf      	b.n	8013f04 <__smakebuf_r+0x18>

08013f64 <_putc_r>:
 8013f64:	b570      	push	{r4, r5, r6, lr}
 8013f66:	460d      	mov	r5, r1
 8013f68:	4614      	mov	r4, r2
 8013f6a:	4606      	mov	r6, r0
 8013f6c:	b118      	cbz	r0, 8013f76 <_putc_r+0x12>
 8013f6e:	6a03      	ldr	r3, [r0, #32]
 8013f70:	b90b      	cbnz	r3, 8013f76 <_putc_r+0x12>
 8013f72:	f7ff f951 	bl	8013218 <__sinit>
 8013f76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013f78:	07d8      	lsls	r0, r3, #31
 8013f7a:	d405      	bmi.n	8013f88 <_putc_r+0x24>
 8013f7c:	89a3      	ldrh	r3, [r4, #12]
 8013f7e:	0599      	lsls	r1, r3, #22
 8013f80:	d402      	bmi.n	8013f88 <_putc_r+0x24>
 8013f82:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013f84:	f7ff fbb5 	bl	80136f2 <__retarget_lock_acquire_recursive>
 8013f88:	68a3      	ldr	r3, [r4, #8]
 8013f8a:	3b01      	subs	r3, #1
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	60a3      	str	r3, [r4, #8]
 8013f90:	da05      	bge.n	8013f9e <_putc_r+0x3a>
 8013f92:	69a2      	ldr	r2, [r4, #24]
 8013f94:	4293      	cmp	r3, r2
 8013f96:	db12      	blt.n	8013fbe <_putc_r+0x5a>
 8013f98:	b2eb      	uxtb	r3, r5
 8013f9a:	2b0a      	cmp	r3, #10
 8013f9c:	d00f      	beq.n	8013fbe <_putc_r+0x5a>
 8013f9e:	6823      	ldr	r3, [r4, #0]
 8013fa0:	1c5a      	adds	r2, r3, #1
 8013fa2:	6022      	str	r2, [r4, #0]
 8013fa4:	701d      	strb	r5, [r3, #0]
 8013fa6:	b2ed      	uxtb	r5, r5
 8013fa8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013faa:	07da      	lsls	r2, r3, #31
 8013fac:	d405      	bmi.n	8013fba <_putc_r+0x56>
 8013fae:	89a3      	ldrh	r3, [r4, #12]
 8013fb0:	059b      	lsls	r3, r3, #22
 8013fb2:	d402      	bmi.n	8013fba <_putc_r+0x56>
 8013fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013fb6:	f7ff fb9d 	bl	80136f4 <__retarget_lock_release_recursive>
 8013fba:	4628      	mov	r0, r5
 8013fbc:	bd70      	pop	{r4, r5, r6, pc}
 8013fbe:	4629      	mov	r1, r5
 8013fc0:	4622      	mov	r2, r4
 8013fc2:	4630      	mov	r0, r6
 8013fc4:	f7ff fa19 	bl	80133fa <__swbuf_r>
 8013fc8:	4605      	mov	r5, r0
 8013fca:	e7ed      	b.n	8013fa8 <_putc_r+0x44>

08013fcc <_fstat_r>:
 8013fcc:	b538      	push	{r3, r4, r5, lr}
 8013fce:	4d07      	ldr	r5, [pc, #28]	@ (8013fec <_fstat_r+0x20>)
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	4604      	mov	r4, r0
 8013fd4:	4608      	mov	r0, r1
 8013fd6:	4611      	mov	r1, r2
 8013fd8:	602b      	str	r3, [r5, #0]
 8013fda:	f7f0 fee1 	bl	8004da0 <_fstat>
 8013fde:	1c43      	adds	r3, r0, #1
 8013fe0:	d102      	bne.n	8013fe8 <_fstat_r+0x1c>
 8013fe2:	682b      	ldr	r3, [r5, #0]
 8013fe4:	b103      	cbz	r3, 8013fe8 <_fstat_r+0x1c>
 8013fe6:	6023      	str	r3, [r4, #0]
 8013fe8:	bd38      	pop	{r3, r4, r5, pc}
 8013fea:	bf00      	nop
 8013fec:	24000d04 	.word	0x24000d04

08013ff0 <_isatty_r>:
 8013ff0:	b538      	push	{r3, r4, r5, lr}
 8013ff2:	4d06      	ldr	r5, [pc, #24]	@ (801400c <_isatty_r+0x1c>)
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	4604      	mov	r4, r0
 8013ff8:	4608      	mov	r0, r1
 8013ffa:	602b      	str	r3, [r5, #0]
 8013ffc:	f7f0 fee0 	bl	8004dc0 <_isatty>
 8014000:	1c43      	adds	r3, r0, #1
 8014002:	d102      	bne.n	801400a <_isatty_r+0x1a>
 8014004:	682b      	ldr	r3, [r5, #0]
 8014006:	b103      	cbz	r3, 801400a <_isatty_r+0x1a>
 8014008:	6023      	str	r3, [r4, #0]
 801400a:	bd38      	pop	{r3, r4, r5, pc}
 801400c:	24000d04 	.word	0x24000d04

08014010 <_init>:
 8014010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014012:	bf00      	nop
 8014014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014016:	bc08      	pop	{r3}
 8014018:	469e      	mov	lr, r3
 801401a:	4770      	bx	lr

0801401c <_fini>:
 801401c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801401e:	bf00      	nop
 8014020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014022:	bc08      	pop	{r3}
 8014024:	469e      	mov	lr, r3
 8014026:	4770      	bx	lr
