
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b0c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a0  08012dac  08012dac  00013dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801354c  0801354c  0001454c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08013554  08013554  00014554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0801355c  0801355c  0001455c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c4  24000000  08013564  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000ccc  240000e0  08013628  000150e0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24000dac  08013628  00015dac  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000150c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000403a7  00000000  00000000  000150f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000064b3  00000000  00000000  00055499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ce8  00000000  00000000  0005b950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001633  00000000  00000000  0005d638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000b0b9  00000000  00000000  0005ec6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a948  00000000  00000000  00069d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017e794  00000000  00000000  0009466c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00212e00  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000998c  00000000  00000000  00212e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  0021c7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000e0 	.word	0x240000e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012d94 	.word	0x08012d94

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000e4 	.word	0x240000e4
 80002dc:	08012d94 	.word	0x08012d94

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b96a 	b.w	8000a04 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f806 	bl	8000748 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__udivmoddi4>:
 8000748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800074c:	9d08      	ldr	r5, [sp, #32]
 800074e:	460c      	mov	r4, r1
 8000750:	2b00      	cmp	r3, #0
 8000752:	d14e      	bne.n	80007f2 <__udivmoddi4+0xaa>
 8000754:	4694      	mov	ip, r2
 8000756:	458c      	cmp	ip, r1
 8000758:	4686      	mov	lr, r0
 800075a:	fab2 f282 	clz	r2, r2
 800075e:	d962      	bls.n	8000826 <__udivmoddi4+0xde>
 8000760:	b14a      	cbz	r2, 8000776 <__udivmoddi4+0x2e>
 8000762:	f1c2 0320 	rsb	r3, r2, #32
 8000766:	4091      	lsls	r1, r2
 8000768:	fa20 f303 	lsr.w	r3, r0, r3
 800076c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000770:	4319      	orrs	r1, r3
 8000772:	fa00 fe02 	lsl.w	lr, r0, r2
 8000776:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800077a:	fa1f f68c 	uxth.w	r6, ip
 800077e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000782:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000786:	fb07 1114 	mls	r1, r7, r4, r1
 800078a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800078e:	fb04 f106 	mul.w	r1, r4, r6
 8000792:	4299      	cmp	r1, r3
 8000794:	d90a      	bls.n	80007ac <__udivmoddi4+0x64>
 8000796:	eb1c 0303 	adds.w	r3, ip, r3
 800079a:	f104 30ff 	add.w	r0, r4, #4294967295
 800079e:	f080 8112 	bcs.w	80009c6 <__udivmoddi4+0x27e>
 80007a2:	4299      	cmp	r1, r3
 80007a4:	f240 810f 	bls.w	80009c6 <__udivmoddi4+0x27e>
 80007a8:	3c02      	subs	r4, #2
 80007aa:	4463      	add	r3, ip
 80007ac:	1a59      	subs	r1, r3, r1
 80007ae:	fa1f f38e 	uxth.w	r3, lr
 80007b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007b6:	fb07 1110 	mls	r1, r7, r0, r1
 80007ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007be:	fb00 f606 	mul.w	r6, r0, r6
 80007c2:	429e      	cmp	r6, r3
 80007c4:	d90a      	bls.n	80007dc <__udivmoddi4+0x94>
 80007c6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80007ce:	f080 80fc 	bcs.w	80009ca <__udivmoddi4+0x282>
 80007d2:	429e      	cmp	r6, r3
 80007d4:	f240 80f9 	bls.w	80009ca <__udivmoddi4+0x282>
 80007d8:	4463      	add	r3, ip
 80007da:	3802      	subs	r0, #2
 80007dc:	1b9b      	subs	r3, r3, r6
 80007de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007e2:	2100      	movs	r1, #0
 80007e4:	b11d      	cbz	r5, 80007ee <__udivmoddi4+0xa6>
 80007e6:	40d3      	lsrs	r3, r2
 80007e8:	2200      	movs	r2, #0
 80007ea:	e9c5 3200 	strd	r3, r2, [r5]
 80007ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f2:	428b      	cmp	r3, r1
 80007f4:	d905      	bls.n	8000802 <__udivmoddi4+0xba>
 80007f6:	b10d      	cbz	r5, 80007fc <__udivmoddi4+0xb4>
 80007f8:	e9c5 0100 	strd	r0, r1, [r5]
 80007fc:	2100      	movs	r1, #0
 80007fe:	4608      	mov	r0, r1
 8000800:	e7f5      	b.n	80007ee <__udivmoddi4+0xa6>
 8000802:	fab3 f183 	clz	r1, r3
 8000806:	2900      	cmp	r1, #0
 8000808:	d146      	bne.n	8000898 <__udivmoddi4+0x150>
 800080a:	42a3      	cmp	r3, r4
 800080c:	d302      	bcc.n	8000814 <__udivmoddi4+0xcc>
 800080e:	4290      	cmp	r0, r2
 8000810:	f0c0 80f0 	bcc.w	80009f4 <__udivmoddi4+0x2ac>
 8000814:	1a86      	subs	r6, r0, r2
 8000816:	eb64 0303 	sbc.w	r3, r4, r3
 800081a:	2001      	movs	r0, #1
 800081c:	2d00      	cmp	r5, #0
 800081e:	d0e6      	beq.n	80007ee <__udivmoddi4+0xa6>
 8000820:	e9c5 6300 	strd	r6, r3, [r5]
 8000824:	e7e3      	b.n	80007ee <__udivmoddi4+0xa6>
 8000826:	2a00      	cmp	r2, #0
 8000828:	f040 8090 	bne.w	800094c <__udivmoddi4+0x204>
 800082c:	eba1 040c 	sub.w	r4, r1, ip
 8000830:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000834:	fa1f f78c 	uxth.w	r7, ip
 8000838:	2101      	movs	r1, #1
 800083a:	fbb4 f6f8 	udiv	r6, r4, r8
 800083e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000842:	fb08 4416 	mls	r4, r8, r6, r4
 8000846:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800084a:	fb07 f006 	mul.w	r0, r7, r6
 800084e:	4298      	cmp	r0, r3
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0x11c>
 8000852:	eb1c 0303 	adds.w	r3, ip, r3
 8000856:	f106 34ff 	add.w	r4, r6, #4294967295
 800085a:	d202      	bcs.n	8000862 <__udivmoddi4+0x11a>
 800085c:	4298      	cmp	r0, r3
 800085e:	f200 80cd 	bhi.w	80009fc <__udivmoddi4+0x2b4>
 8000862:	4626      	mov	r6, r4
 8000864:	1a1c      	subs	r4, r3, r0
 8000866:	fa1f f38e 	uxth.w	r3, lr
 800086a:	fbb4 f0f8 	udiv	r0, r4, r8
 800086e:	fb08 4410 	mls	r4, r8, r0, r4
 8000872:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000876:	fb00 f707 	mul.w	r7, r0, r7
 800087a:	429f      	cmp	r7, r3
 800087c:	d908      	bls.n	8000890 <__udivmoddi4+0x148>
 800087e:	eb1c 0303 	adds.w	r3, ip, r3
 8000882:	f100 34ff 	add.w	r4, r0, #4294967295
 8000886:	d202      	bcs.n	800088e <__udivmoddi4+0x146>
 8000888:	429f      	cmp	r7, r3
 800088a:	f200 80b0 	bhi.w	80009ee <__udivmoddi4+0x2a6>
 800088e:	4620      	mov	r0, r4
 8000890:	1bdb      	subs	r3, r3, r7
 8000892:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000896:	e7a5      	b.n	80007e4 <__udivmoddi4+0x9c>
 8000898:	f1c1 0620 	rsb	r6, r1, #32
 800089c:	408b      	lsls	r3, r1
 800089e:	fa22 f706 	lsr.w	r7, r2, r6
 80008a2:	431f      	orrs	r7, r3
 80008a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80008a8:	fa04 f301 	lsl.w	r3, r4, r1
 80008ac:	ea43 030c 	orr.w	r3, r3, ip
 80008b0:	40f4      	lsrs	r4, r6
 80008b2:	fa00 f801 	lsl.w	r8, r0, r1
 80008b6:	0c38      	lsrs	r0, r7, #16
 80008b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008bc:	fbb4 fef0 	udiv	lr, r4, r0
 80008c0:	fa1f fc87 	uxth.w	ip, r7
 80008c4:	fb00 441e 	mls	r4, r0, lr, r4
 80008c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008cc:	fb0e f90c 	mul.w	r9, lr, ip
 80008d0:	45a1      	cmp	r9, r4
 80008d2:	fa02 f201 	lsl.w	r2, r2, r1
 80008d6:	d90a      	bls.n	80008ee <__udivmoddi4+0x1a6>
 80008d8:	193c      	adds	r4, r7, r4
 80008da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008de:	f080 8084 	bcs.w	80009ea <__udivmoddi4+0x2a2>
 80008e2:	45a1      	cmp	r9, r4
 80008e4:	f240 8081 	bls.w	80009ea <__udivmoddi4+0x2a2>
 80008e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008ec:	443c      	add	r4, r7
 80008ee:	eba4 0409 	sub.w	r4, r4, r9
 80008f2:	fa1f f983 	uxth.w	r9, r3
 80008f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008fa:	fb00 4413 	mls	r4, r0, r3, r4
 80008fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000902:	fb03 fc0c 	mul.w	ip, r3, ip
 8000906:	45a4      	cmp	ip, r4
 8000908:	d907      	bls.n	800091a <__udivmoddi4+0x1d2>
 800090a:	193c      	adds	r4, r7, r4
 800090c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000910:	d267      	bcs.n	80009e2 <__udivmoddi4+0x29a>
 8000912:	45a4      	cmp	ip, r4
 8000914:	d965      	bls.n	80009e2 <__udivmoddi4+0x29a>
 8000916:	3b02      	subs	r3, #2
 8000918:	443c      	add	r4, r7
 800091a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800091e:	fba0 9302 	umull	r9, r3, r0, r2
 8000922:	eba4 040c 	sub.w	r4, r4, ip
 8000926:	429c      	cmp	r4, r3
 8000928:	46ce      	mov	lr, r9
 800092a:	469c      	mov	ip, r3
 800092c:	d351      	bcc.n	80009d2 <__udivmoddi4+0x28a>
 800092e:	d04e      	beq.n	80009ce <__udivmoddi4+0x286>
 8000930:	b155      	cbz	r5, 8000948 <__udivmoddi4+0x200>
 8000932:	ebb8 030e 	subs.w	r3, r8, lr
 8000936:	eb64 040c 	sbc.w	r4, r4, ip
 800093a:	fa04 f606 	lsl.w	r6, r4, r6
 800093e:	40cb      	lsrs	r3, r1
 8000940:	431e      	orrs	r6, r3
 8000942:	40cc      	lsrs	r4, r1
 8000944:	e9c5 6400 	strd	r6, r4, [r5]
 8000948:	2100      	movs	r1, #0
 800094a:	e750      	b.n	80007ee <__udivmoddi4+0xa6>
 800094c:	f1c2 0320 	rsb	r3, r2, #32
 8000950:	fa20 f103 	lsr.w	r1, r0, r3
 8000954:	fa0c fc02 	lsl.w	ip, ip, r2
 8000958:	fa24 f303 	lsr.w	r3, r4, r3
 800095c:	4094      	lsls	r4, r2
 800095e:	430c      	orrs	r4, r1
 8000960:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000964:	fa00 fe02 	lsl.w	lr, r0, r2
 8000968:	fa1f f78c 	uxth.w	r7, ip
 800096c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000970:	fb08 3110 	mls	r1, r8, r0, r3
 8000974:	0c23      	lsrs	r3, r4, #16
 8000976:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800097a:	fb00 f107 	mul.w	r1, r0, r7
 800097e:	4299      	cmp	r1, r3
 8000980:	d908      	bls.n	8000994 <__udivmoddi4+0x24c>
 8000982:	eb1c 0303 	adds.w	r3, ip, r3
 8000986:	f100 36ff 	add.w	r6, r0, #4294967295
 800098a:	d22c      	bcs.n	80009e6 <__udivmoddi4+0x29e>
 800098c:	4299      	cmp	r1, r3
 800098e:	d92a      	bls.n	80009e6 <__udivmoddi4+0x29e>
 8000990:	3802      	subs	r0, #2
 8000992:	4463      	add	r3, ip
 8000994:	1a5b      	subs	r3, r3, r1
 8000996:	b2a4      	uxth	r4, r4
 8000998:	fbb3 f1f8 	udiv	r1, r3, r8
 800099c:	fb08 3311 	mls	r3, r8, r1, r3
 80009a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009a4:	fb01 f307 	mul.w	r3, r1, r7
 80009a8:	42a3      	cmp	r3, r4
 80009aa:	d908      	bls.n	80009be <__udivmoddi4+0x276>
 80009ac:	eb1c 0404 	adds.w	r4, ip, r4
 80009b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80009b4:	d213      	bcs.n	80009de <__udivmoddi4+0x296>
 80009b6:	42a3      	cmp	r3, r4
 80009b8:	d911      	bls.n	80009de <__udivmoddi4+0x296>
 80009ba:	3902      	subs	r1, #2
 80009bc:	4464      	add	r4, ip
 80009be:	1ae4      	subs	r4, r4, r3
 80009c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009c4:	e739      	b.n	800083a <__udivmoddi4+0xf2>
 80009c6:	4604      	mov	r4, r0
 80009c8:	e6f0      	b.n	80007ac <__udivmoddi4+0x64>
 80009ca:	4608      	mov	r0, r1
 80009cc:	e706      	b.n	80007dc <__udivmoddi4+0x94>
 80009ce:	45c8      	cmp	r8, r9
 80009d0:	d2ae      	bcs.n	8000930 <__udivmoddi4+0x1e8>
 80009d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009da:	3801      	subs	r0, #1
 80009dc:	e7a8      	b.n	8000930 <__udivmoddi4+0x1e8>
 80009de:	4631      	mov	r1, r6
 80009e0:	e7ed      	b.n	80009be <__udivmoddi4+0x276>
 80009e2:	4603      	mov	r3, r0
 80009e4:	e799      	b.n	800091a <__udivmoddi4+0x1d2>
 80009e6:	4630      	mov	r0, r6
 80009e8:	e7d4      	b.n	8000994 <__udivmoddi4+0x24c>
 80009ea:	46d6      	mov	lr, sl
 80009ec:	e77f      	b.n	80008ee <__udivmoddi4+0x1a6>
 80009ee:	4463      	add	r3, ip
 80009f0:	3802      	subs	r0, #2
 80009f2:	e74d      	b.n	8000890 <__udivmoddi4+0x148>
 80009f4:	4606      	mov	r6, r0
 80009f6:	4623      	mov	r3, r4
 80009f8:	4608      	mov	r0, r1
 80009fa:	e70f      	b.n	800081c <__udivmoddi4+0xd4>
 80009fc:	3e02      	subs	r6, #2
 80009fe:	4463      	add	r3, ip
 8000a00:	e730      	b.n	8000864 <__udivmoddi4+0x11c>
 8000a02:	bf00      	nop

08000a04 <__aeabi_idiv0>:
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	4a04      	ldr	r2, [pc, #16]	@ (8000a24 <_ZN9InterruptC1Ev+0x1c>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	080133ac 	.word	0x080133ac

08000a28 <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <_ZN9Interrupt8RegisterEiPS_+0x24>)
 8000a36:	f011 fae7 	bl	8012008 <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 8000a3a:	4905      	ldr	r1, [pc, #20]	@ (8000a50 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	683a      	ldr	r2, [r7, #0]
 8000a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	08012dac 	.word	0x08012dac
 8000a50:	240000fc 	.word	0x240000fc

08000a54 <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 8000a58:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000a5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000a5c:	4b03      	ldr	r3, [pc, #12]	@ (8000a6c <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4610      	mov	r0, r2
 8000a66:	4798      	blx	r3
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	240000fc 	.word	0x240000fc

08000a70 <_ZN9Interrupt12TIM2_WrapperEv>:

void Interrupt::TIM2_Wrapper(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM2_IRQn]->ISR_Handler();
 8000a74:	4b04      	ldr	r3, [pc, #16]	@ (8000a88 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8000a76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000a78:	4b03      	ldr	r3, [pc, #12]	@ (8000a88 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8000a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4610      	mov	r0, r2
 8000a82:	4798      	blx	r3
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	240000fc 	.word	0x240000fc

08000a8c <_ZN9Interrupt12TIM3_WrapperEv>:

void Interrupt::TIM3_Wrapper(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM3_IRQn]->ISR_Handler();
 8000a90:	4b04      	ldr	r3, [pc, #16]	@ (8000aa4 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8000a92:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8000a94:	4b03      	ldr	r3, [pc, #12]	@ (8000aa4 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8000a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4610      	mov	r0, r2
 8000a9e:	4798      	blx	r3
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	240000fc 	.word	0x240000fc

08000aa8 <_ZN9Interrupt12TIM4_WrapperEv>:

void Interrupt::TIM4_Wrapper(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM4_IRQn]->ISR_Handler();
 8000aac:	4b04      	ldr	r3, [pc, #16]	@ (8000ac0 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8000aae:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8000ab0:	4b03      	ldr	r3, [pc, #12]	@ (8000ac0 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8000ab2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4610      	mov	r0, r2
 8000aba:	4798      	blx	r3
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	240000fc 	.word	0x240000fc

08000ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ad0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db0a      	blt.n	8000aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	490c      	ldr	r1, [pc, #48]	@ (8000b10 <__NVIC_SetPriority+0x4c>)
 8000ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aec:	e00a      	b.n	8000b04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4908      	ldr	r1, [pc, #32]	@ (8000b14 <__NVIC_SetPriority+0x50>)
 8000af4:	88fb      	ldrh	r3, [r7, #6]
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	3b04      	subs	r3, #4
 8000afc:	0112      	lsls	r2, r2, #4
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	761a      	strb	r2, [r3, #24]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000e100 	.word	0xe000e100
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <_ZNK19ArduinoJson6101_11014CollectionData4headEv>:
  VariantData *get(size_t index) const;

  template <typename TAdaptedString>
  VariantData *get(TAdaptedString key) const;

  VariantSlot *head() const {
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
    return _head;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
  }
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>:
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(&_content);
 8000b38:	687b      	ldr	r3, [r7, #4]
  }
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>:

  const VariantData* data() const {
    return reinterpret_cast<const VariantData*>(&_content);
  }

  VariantSlot* next() {
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
    return _next ? this + _next : 0;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d006      	beq.n	8000b66 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv+0x20>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b5e:	011b      	lsls	r3, r3, #4
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	4413      	add	r3, r2
 8000b64:	e000      	b.n	8000b68 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv+0x22>
 8000b66:	2300      	movs	r3, #0
  }
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>:

  void setNext(VariantSlot* slot) {
    _next = VariantSlotDiff(slot ? slot - this : 0);
  }

  void setNextNotNull(VariantSlot* slot) {
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	111b      	asrs	r3, r3, #4
 8000b86:	b21a      	sxth	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	815a      	strh	r2, [r3, #10]
  }
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>:

  void setOwnedKey(not_null<const char*> k) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
    _flags |= KEY_IS_OWNED;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	7a1b      	ldrb	r3, [r3, #8]
 8000ba6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	721a      	strb	r2, [r3, #8]
    _key = k.get();
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f001 fc4a 	bl	800244c <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60da      	str	r2, [r3, #12]
  }
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_ZNK19ArduinoJson6101_11011VariantSlot3keyEv>:
  void setLinkedKey(not_null<const char*> k) {
    _flags &= VALUE_MASK;
    _key = k.get();
  }

  const char* key() const {
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
    return _key;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	68db      	ldr	r3, [r3, #12]
  }
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>:

  bool ownsKey() const {
    return (_flags & KEY_IS_OWNED) != 0;
  }

  void clear() {
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
    _next = 0;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	815a      	strh	r2, [r3, #10]
    _flags = 0;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	721a      	strb	r2, [r3, #8]
    _key = 0;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  }
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <_ZN19ArduinoJson6101_11010addPaddingEj>:
  const size_t mask = sizeof(void *) - 1;
  size_t addr = reinterpret_cast<size_t>(ptr);
  return (addr & mask) == 0;
}

inline size_t addPadding(size_t bytes) {
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  const size_t mask = sizeof(void *) - 1;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	60fb      	str	r3, [r7, #12]
  return (bytes + mask) & ~mask;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3303      	adds	r3, #3
 8000c14:	f023 0303 	bic.w	r3, r3, #3
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>:
//               ^              ^
//             _left          _right

class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
      : _begin(buf),
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	601a      	str	r2, [r3, #0]
        _left(buf),
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	68ba      	ldr	r2, [r7, #8]
 8000c3a:	605a      	str	r2, [r3, #4]
        _right(buf ? buf + capa : 0),
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x26>
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4413      	add	r3, r2
 8000c48:	e000      	b.n	8000c4c <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x28>
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	6093      	str	r3, [r2, #8]
        _end(buf ? buf + capa : 0) {
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3a>
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	e000      	b.n	8000c60 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3c>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	60d3      	str	r3, [r2, #12]
    ARDUINOJSON_ASSERT(isAligned(_begin));
    ARDUINOJSON_ASSERT(isAligned(_right));
    ARDUINOJSON_ASSERT(isAligned(_end));
  }
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4618      	mov	r0, r3
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>:

  void* buffer() {
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
    return _begin;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
  }
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>:

  size_t size() const {
    return size_t(_left - _begin + _end - _right);
  }

  VariantSlot* allocVariant() {
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
    return allocRight<VariantSlot>();
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f001 fbe6 	bl	8002464 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>
 8000c98:	4603      	mov	r3, r0
  }
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>:
    _left += n;
    checkInvariants();
    return s;
  }

  StringSlot allocExpandableString() {
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
    StringSlot s;
    s.value = _left;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	601a      	str	r2, [r3, #0]
    s.size = size_t(_right - _left);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	605a      	str	r2, [r3, #4]
    _left = _right;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000ccc:	6838      	ldr	r0, [r7, #0]
 8000cce:	f000 f864 	bl	8000d9a <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
    return s;
 8000cd2:	bf00      	nop
  }
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>:

  void freezeString(StringSlot& s, size_t newSize) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
    _left -= (s.size - newSize);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	441a      	add	r2, r3
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	605a      	str	r2, [r3, #4]
    s.size = newSize;
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f000 f84a 	bl	8000d9a <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
  }
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>:

  void clear() {
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
    _left = _begin;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	605a      	str	r2, [r3, #4]
    _right = _end;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68da      	ldr	r2, [r3, #12]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	609a      	str	r2, [r3, #8]
  }
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>:

  bool canAlloc(size_t bytes) const {
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	6039      	str	r1, [r7, #0]
    return _left + bytes <= _right;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	441a      	add	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	bf94      	ite	ls
 8000d4c:	2301      	movls	r3, #1
 8000d4e:	2300      	movhi	r3, #0
 8000d50:	b2db      	uxtb	r3, r3
  }
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>:
  template <typename T>
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	6039      	str	r1, [r7, #0]
    if (!canAlloc(bytes)) return 0;
 8000d68:	6839      	ldr	r1, [r7, #0]
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffe1 	bl	8000d32 <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>
 8000d70:	4603      	mov	r3, r0
 8000d72:	f083 0301 	eor.w	r3, r3, #1
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x22>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e008      	b.n	8000d92 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x34>
    _right -= bytes;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	425b      	negs	r3, r3
 8000d88:	441a      	add	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
    return _right;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
  }
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>:
 private:
  StringSlot* allocStringSlot() {
    return allocRight<StringSlot>();
  }

  void checkInvariants() {
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_begin <= _left);
    ARDUINOJSON_ASSERT(_left <= _right);
    ARDUINOJSON_ASSERT(_right <= _end);
    ARDUINOJSON_ASSERT(isAligned(_right));
  }
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_ZN19ArduinoJson6101_11021ConstRamStringAdapterC1EPKc>:

namespace ARDUINOJSON_NAMESPACE {

class ConstRamStringAdapter {
 public:
  ConstRamStringAdapter(const char* str = 0) : _str(str) {}
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	6039      	str	r1, [r7, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc>:

  bool equals(const char* expected) const {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
    const char* actual = _str;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	60fb      	str	r3, [r7, #12]
    if (!actual || !expected) return actual == expected;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d002      	beq.n	8000de8 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x1c>
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d107      	bne.n	8000df8 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x2c>
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	bf0c      	ite	eq
 8000df0:	2301      	moveq	r3, #1
 8000df2:	2300      	movne	r3, #0
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	e009      	b.n	8000e0c <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x40>
    return strcmp(actual, expected) == 0;
 8000df8:	6839      	ldr	r1, [r7, #0]
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f7ff fa70 	bl	80002e0 <strcmp>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	bf0c      	ite	eq
 8000e06:	2301      	moveq	r3, #1
 8000e08:	2300      	movne	r3, #0
 8000e0a:	b2db      	uxtb	r3, r3
  }
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <_ZN19ArduinoJson6101_11011adaptStringEPKc>:

 protected:
  const char* _str;
};

inline ConstRamStringAdapter adaptString(const char* str) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  return ConstRamStringAdapter(str);
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	6879      	ldr	r1, [r7, #4]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ffc3 	bl	8000dae <_ZN19ArduinoJson6101_11021ConstRamStringAdapterC1EPKc>
 8000e28:	68fb      	ldr	r3, [r7, #12]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <_ZN19ArduinoJson6101_11011VariantData7asArrayEv>:

  const char *asString() const;

  bool asBoolean() const;

  CollectionData *asArray() {
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
    return isArray() ? &_content.asCollection : 0;
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f000 f81b 	bl	8000e76 <_ZNK19ArduinoJson6101_11011VariantData7isArrayEv>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <_ZN19ArduinoJson6101_11011VariantData7asArrayEv+0x18>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	e000      	b.n	8000e4c <_ZN19ArduinoJson6101_11011VariantData7asArrayEv+0x1a>
 8000e4a:	2300      	movs	r3, #0
  }
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_ZN19ArduinoJson6101_11011VariantData8asObjectEv>:

  const CollectionData *asArray() const {
    return const_cast<VariantData *>(this)->asArray();
  }

  CollectionData *asObject() {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
    return isObject() ? &_content.asCollection : 0;
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f000 f81d 	bl	8000e9c <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <_ZN19ArduinoJson6101_11011VariantData8asObjectEv+0x18>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	e000      	b.n	8000e6e <_ZN19ArduinoJson6101_11011VariantData8asObjectEv+0x1a>
 8000e6c:	2300      	movs	r3, #0
  }
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <_ZNK19ArduinoJson6101_11011VariantData7isArrayEv>:
      default:
        return true;
    }
  }

  bool isArray() const {
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
    return (_flags & VALUE_IS_ARRAY) != 0;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	7a1b      	ldrb	r3, [r3, #8]
 8000e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	bf14      	ite	ne
 8000e8a:	2301      	movne	r3, #1
 8000e8c:	2300      	moveq	r3, #0
 8000e8e:	b2db      	uxtb	r3, r3
  }
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>:

  bool isString() const {
    return type() == VALUE_IS_LINKED_STRING || type() == VALUE_IS_OWNED_STRING;
  }

  bool isObject() const {
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    return (_flags & VALUE_IS_OBJECT) != 0;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	7a1b      	ldrb	r3, [r3, #8]
 8000ea8:	f003 0320 	and.w	r3, r3, #32
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	bf14      	ite	ne
 8000eb0:	2301      	movne	r3, #1
 8000eb2:	2300      	moveq	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
  }
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>:
  template <typename TAdaptedString>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
 8000ec2:	b5b0      	push	{r4, r5, r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	70fb      	strb	r3, [r7, #3]
    setType(VALUE_IS_BOOLEAN);
 8000ece:	2105      	movs	r1, #5
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 f895 	bl	8001000 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = static_cast<UInt>(value);
 8000ed6:	78fb      	ldrb	r3, [r7, #3]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	461c      	mov	r4, r3
 8000edc:	4615      	mov	r5, r2
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	e9c3 4500 	strd	r4, r5, [r3]
  }
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bdb0      	pop	{r4, r5, r7, pc}

08000eec <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>:

  void setFloat(Float value) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	ed87 0b00 	vstr	d0, [r7]
    setType(VALUE_IS_FLOAT);
 8000ef8:	2108      	movs	r1, #8
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f000 f880 	bl	8001000 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asFloat = value;
 8000f00:	68f9      	ldr	r1, [r7, #12]
 8000f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f06:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>:
    } else {
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_POSITIVE_INTEGER);
 8000f1e:	2106      	movs	r1, #6
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f000 f86d 	bl	8001000 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8000f26:	68f9      	ldr	r1, [r7, #12]
 8000f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f2c:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>:

  void setNegativeInteger(UInt value) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_NEGATIVE_INTEGER);
 8000f44:	2107      	movs	r1, #7
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	f000 f85a 	bl	8001000 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8000f4c:	68f9      	ldr	r1, [r7, #12]
 8000f4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f52:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_ZN19ArduinoJson6101_11011VariantData7setNullEv>:
    } else {
      setType(VALUE_IS_NULL);
    }
  }

  void setNull() {
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_NULL);
 8000f66:	2100      	movs	r1, #0
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f000 f849 	bl	8001000 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
  }
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>:

  void setOwnedString(not_null<const char *> s) {
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
    setType(VALUE_IS_OWNED_STRING);
 8000f80:	2104      	movs	r1, #4
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 f83c 	bl	8001000 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asString = s.get();
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 fa5e 	bl	800244c <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8000f90:	4602      	mov	r2, r0
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	601a      	str	r2, [r3, #0]
  }
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>:
  void setUnsignedInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
    _content.asInteger = static_cast<UInt>(value);
  }

  CollectionData &toArray() {
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_ARRAY);
 8000fa6:	2140      	movs	r1, #64	@ 0x40
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f829 	bl	8001000 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 f957 	bl	8001264 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 8000fb6:	687b      	ldr	r3, [r7, #4]
  }
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>:

  CollectionData &toObject() {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_OBJECT);
 8000fc8:	2120      	movs	r1, #32
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f818 	bl	8001000 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f946 	bl	8001264 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 8000fd8:	687b      	ldr	r3, [r7, #4]
  }
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>:
    if (var) return var;
    return _content.asCollection.add(key, pool);
  }

 private:
  uint8_t type() const {
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
    return _flags & VALUE_MASK;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7a1b      	ldrb	r3, [r3, #8]
 8000fee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ff2:	b2db      	uxtb	r3, r3
  }
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>:

  void setType(uint8_t t) {
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    _flags &= KEY_IS_OWNED;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7a1b      	ldrb	r3, [r3, #8]
 8001010:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001014:	b2da      	uxtb	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	721a      	strb	r2, [r3, #8]
    _flags |= t;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7a1a      	ldrb	r2, [r3, #8]
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	4313      	orrs	r3, r2
 8001022:	b2da      	uxtb	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	721a      	strb	r2, [r3, #8]
  }
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>:
    var = var->next();
  }
  return n;
}

inline VariantData* slotData(VariantSlot* slot) {
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<VariantData*>(slot);
 800103c:	687b      	ldr	r3, [r7, #4]
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE>:

inline const CollectionData *variantAsObject(const VariantData *var) {
  return var != 0 ? var->asObject() : 0;
}

inline CollectionData *variantAsObject(VariantData *var) {
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  return var != 0 ? var->asObject() : 0;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d004      	beq.n	8001062 <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE+0x18>
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff fefb 	bl	8000e54 <_ZN19ArduinoJson6101_11011VariantData8asObjectEv>
 800105e:	4603      	mov	r3, r0
 8001060:	e000      	b.n	8001064 <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE+0x1a>
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>:
  VariantRef _variant;
};

class ArrayIterator {
 public:
  ArrayIterator() : _slot(0) {}
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <_ZN19ArduinoJson6101_11013ArrayIteratorC1EPNS_10MemoryPoolEPNS_11VariantSlotE>:
  explicit ArrayIterator(MemoryPool *pool, VariantSlot *slot)
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
      : _pool(pool), _slot(slot) {}
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4618      	mov	r0, r3
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <_ZNK19ArduinoJson6101_11013ArrayIteratordeEv>:

  VariantRef operator*() const {
 80010ae:	b590      	push	{r4, r7, lr}
 80010b0:	b085      	sub	sp, #20
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	6039      	str	r1, [r7, #0]
    return VariantRef(_pool, _slot->data());
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681c      	ldr	r4, [r3, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fd35 	bl	8000b30 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 80010c6:	4603      	mov	r3, r0
 80010c8:	60fc      	str	r4, [r7, #12]
 80010ca:	60bb      	str	r3, [r7, #8]
  friend class VariantConstRef;

 public:
  // Intenal use only
  FORCE_INLINE VariantRef(MemoryPool *pool, VariantData *data)
      : base_type(data), _pool(pool) {}
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 f9e3 	bl	800249c <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	bf00      	nop
  }
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd90      	pop	{r4, r7, pc}

080010e6 <_ZNK19ArduinoJson6101_11013ArrayIteratorneERKS0_>:

  bool operator==(const ArrayIterator &other) const {
    return _slot == other._slot;
  }

  bool operator!=(const ArrayIterator &other) const {
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
    return _slot != other._slot;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	bf14      	ite	ne
 80010fc:	2301      	movne	r3, #1
 80010fe:	2300      	moveq	r3, #0
 8001100:	b2db      	uxtb	r3, r3
  }
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_ZN19ArduinoJson6101_11013ArrayIteratorppEv>:

  ArrayIterator &operator++() {
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
    _slot = _slot->next();
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fd13 	bl	8000b46 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>
 8001120:	4602      	mov	r2, r0
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	605a      	str	r2, [r3, #4]
    return *this;
 8001126:	687b      	ldr	r3, [r7, #4]
  }
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>:
  template <typename T>
  typename VariantConstAs<T>::type as() const {
    return getVariant().template as<T>();
  }

  void clear() {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
    _pool.clear();
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fde7 	bl	8000d0e <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>
    _data.setNull();
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3310      	adds	r3, #16
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff0a 	bl	8000f5e <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>:
    clear();
    return getVariant().template to<T>();
  }

  // for internal use only
  MemoryPool& memoryPool() {
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
    return _pool;
 800115a:	687b      	ldr	r3, [r7, #4]
  }
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>:

  VariantData& data() {
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    return _data;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3310      	adds	r3, #16
  }
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>:
      const TString& key) {
    _data.remove(adaptString(key));
  }

 protected:
  JsonDocument(MemoryPool pool) : _pool(pool) {
 8001180:	b084      	sub	sp, #16
 8001182:	b590      	push	{r4, r7, lr}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	f107 001c 	add.w	r0, r7, #28
 800118e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	461c      	mov	r4, r3
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800119c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    _data.setNull();
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3310      	adds	r3, #16
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff feda 	bl	8000f5e <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80011b6:	b004      	add	sp, #16
 80011b8:	4770      	bx	lr

080011ba <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>:
#include <stdlib.h>  // malloc, free

namespace ARDUINOJSON_NAMESPACE {

struct DefaultAllocator {
  void* allocate(size_t n) {
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
    return malloc(n);
 80011c4:	6838      	ldr	r0, [r7, #0]
 80011c6:	f010 fd9f 	bl	8011d08 <malloc>
 80011ca:	4603      	mov	r3, r0
  }
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>:

  void deallocate(void* p) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
    free(p);
 80011de:	6838      	ldr	r0, [r7, #0]
 80011e0:	f010 fd9a 	bl	8011d18 <free>
  }
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>:
#include "../Variant/VariantData.hpp"
#include "CollectionData.hpp"

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = pool->allocVariant();
 80011f6:	6838      	ldr	r0, [r7, #0]
 80011f8:	f7ff fd47 	bl	8000c8a <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>
 80011fc:	60f8      	str	r0, [r7, #12]
  if (!slot) return 0;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x1c>
 8001204:	2300      	movs	r3, #0
 8001206:	e017      	b.n	8001238 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x4c>

  if (_tail) {
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d009      	beq.n	8001224 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x38>
    _tail->setNextNotNull(slot);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	68f9      	ldr	r1, [r7, #12]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fcac 	bl	8000b74 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>
    _tail = slot;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	e005      	b.n	8001230 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x44>
  } else {
    _head = slot;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	601a      	str	r2, [r3, #0]
    _tail = slot;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	605a      	str	r2, [r3, #4]
  }

  slot->clear();
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f7ff fcd4 	bl	8000bde <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>
  return slot;
 8001236:	68fb      	ldr	r3, [r7, #12]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>:

inline VariantData* CollectionData::add(MemoryPool* pool) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  return slotData(addSlot(pool));
 800124a:	6839      	ldr	r1, [r7, #0]
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ffcd 	bl	80011ec <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 8001252:	4603      	mov	r3, r0
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff feed 	bl	8001034 <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>
 800125a:	4603      	mov	r3, r0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>:
  VariantSlot* slot = addSlot(pool);
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  _head = 0;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
  _tail = 0;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	605a      	str	r2, [r3, #4]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <_ZN19ArduinoJson6101_1107isdigitEc>:

#pragma once

namespace ARDUINOJSON_NAMESPACE {

inline bool isdigit(char c) {
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b2f      	cmp	r3, #47	@ 0x2f
 8001292:	d904      	bls.n	800129e <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	2b39      	cmp	r3, #57	@ 0x39
 8001298:	d801      	bhi.n	800129e <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <_ZN19ArduinoJson6101_1107isdigitEc+0x1c>
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <_ZNK19ArduinoJson6101_11011VariantData8asStringEv>:
    default:
      return 0;
  }
}

inline const char *VariantData::asString() const {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  switch (type()) {
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff fe94 	bl	8000fe2 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>
 80012ba:	4603      	mov	r3, r0
 80012bc:	3b03      	subs	r3, #3
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d802      	bhi.n	80012c8 <_ZNK19ArduinoJson6101_11011VariantData8asStringEv+0x1c>
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return _content.asString;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	e000      	b.n	80012ca <_ZNK19ArduinoJson6101_11011VariantData8asStringEv+0x1e>
    default:
      return 0;
 80012c8:	2300      	movs	r3, #0
  }
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>:

namespace ARDUINOJSON_NAMESPACE {

class StringBuilder {
 public:
  explicit StringBuilder(MemoryPool* parent) : _parent(parent), _size(0) {
 80012d2:	b590      	push	{r4, r7, lr}
 80012d4:	b085      	sub	sp, #20
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]
    _slot = _parent->allocExpandableString();
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	68fc      	ldr	r4, [r7, #12]
 80012ee:	463b      	mov	r3, r7
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fcd5 	bl	8000ca2 <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>
 80012f8:	f104 0308 	add.w	r3, r4, #8
 80012fc:	463a      	mov	r2, r7
 80012fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001302:	e883 0003 	stmia.w	r3, {r0, r1}
  }
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}

08001310 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>:

  void append(const char* s, size_t n) {
    while (n-- > 0) append(*s++);
  }

  void append(char c) {
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	70fb      	strb	r3, [r7, #3]
    if (!_slot.value) return;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d014      	beq.n	800134e <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x3e>

    if (_size >= _slot.size) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	429a      	cmp	r2, r3
 800132e:	d303      	bcc.n	8001338 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x28>
      _slot.value = 0;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
      return;
 8001336:	e00b      	b.n	8001350 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>
    }

    _slot.value[_size++] = c;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	1c58      	adds	r0, r3, #1
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	6048      	str	r0, [r1, #4]
 8001346:	4413      	add	r3, r2
 8001348:	78fa      	ldrb	r2, [r7, #3]
 800134a:	701a      	strb	r2, [r3, #0]
 800134c:	e000      	b.n	8001350 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>
    if (!_slot.value) return;
 800134e:	bf00      	nop
  }
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>:

  char* complete() {
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
    append('\0');
 8001362:	2100      	movs	r1, #0
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ffd3 	bl	8001310 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    if (_slot.value) {
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d009      	beq.n	8001386 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv+0x2c>
      _parent->freezeString(_slot, _size);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6818      	ldr	r0, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f103 0108 	add.w	r1, r3, #8
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	461a      	mov	r2, r3
 8001382:	f7ff fcab 	bl	8000cdc <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>
    }
    return _slot.value;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
  }
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>:

class StringCopier {
 public:
  typedef ARDUINOJSON_NAMESPACE::StringBuilder StringBuilder;

  StringCopier(MemoryPool* pool) : _pool(pool) {}
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>:

  StringBuilder startString() {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
    return StringBuilder(_pool);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4619      	mov	r1, r3
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff86 	bl	80012d2 <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>
  }
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>:

class UnsafeCharPointerReader {
  const char* _ptr;

 public:
  explicit UnsafeCharPointerReader(const char* ptr)
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
      : _ptr(ptr ? ptr : reinterpret_cast<const char*>("")) {}
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x14>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	e000      	b.n	80013e6 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x16>
 80013e4:	4b04      	ldr	r3, [pc, #16]	@ (80013f8 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x28>)
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	08012de0 	.word	0x08012de0

080013fc <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>:

  char read() {
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    return static_cast<char>(*_ptr++);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	1c59      	adds	r1, r3, #1
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6011      	str	r1, [r2, #0]
 800140e:	781b      	ldrb	r3, [r3, #0]
  }
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>:

  bool ended() const {
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
    // we cannot know, that's why it's unsafe
    return false;
 8001424:	2300      	movs	r3, #0
  }
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <_ZNK19ArduinoJson6101_11020DeserializationError14safeBoolHelperEv>:
namespace ARDUINOJSON_NAMESPACE {

class DeserializationError {
  // safe bool idiom
  typedef void (DeserializationError::*bool_type)() const;
  void safeBoolHelper() const {}
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>:
    NotSupported,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : _code(c) {}
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	460b      	mov	r3, r1
 8001450:	70fb      	strb	r3, [r7, #3]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	78fa      	ldrb	r2, [r7, #3]
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>:
  friend bool operator!=(Code lhs, const DeserializationError& rhs) {
    return lhs != rhs._code;
  }

  // Behaves like a bool
  operator bool_type() const {
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
    return _code != Ok ? &DeserializationError::safeBoolHelper : 0;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d106      	bne.n	8001488 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x20>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	e005      	b.n	8001494 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x2c>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a05      	ldr	r2, [pc, #20]	@ (80014a0 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x38>)
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	605a      	str	r2, [r3, #4]
  }
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	08001433 	.word	0x08001433

080014a4 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>:
  friend bool operator!=(const DeserializationError& err, bool value) {
    return static_cast<bool>(err) != value;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
    return _code;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	781b      	ldrb	r3, [r3, #0]
  }
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>:

  const char* c_str() const {
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
    switch (_code) {
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b05      	cmp	r3, #5
 80014ca:	d81b      	bhi.n	8001504 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x48>
 80014cc:	a201      	add	r2, pc, #4	@ (adr r2, 80014d4 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x18>)
 80014ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d2:	bf00      	nop
 80014d4:	080014ed 	.word	0x080014ed
 80014d8:	080014fd 	.word	0x080014fd
 80014dc:	080014f9 	.word	0x080014f9
 80014e0:	080014f5 	.word	0x080014f5
 80014e4:	08001501 	.word	0x08001501
 80014e8:	080014f1 	.word	0x080014f1
      case Ok:
        return "Ok";
 80014ec:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x58>)
 80014ee:	e00a      	b.n	8001506 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case TooDeep:
        return "TooDeep";
 80014f0:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x5c>)
 80014f2:	e008      	b.n	8001506 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NoMemory:
        return "NoMemory";
 80014f4:	4b09      	ldr	r3, [pc, #36]	@ (800151c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x60>)
 80014f6:	e006      	b.n	8001506 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case InvalidInput:
        return "InvalidInput";
 80014f8:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x64>)
 80014fa:	e004      	b.n	8001506 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case IncompleteInput:
        return "IncompleteInput";
 80014fc:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x68>)
 80014fe:	e002      	b.n	8001506 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NotSupported:
        return "NotSupported";
 8001500:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x6c>)
 8001502:	e000      	b.n	8001506 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      default:
        return "???";
 8001504:	4b09      	ldr	r3, [pc, #36]	@ (800152c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x70>)
    }
  }
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	08012de4 	.word	0x08012de4
 8001518:	08012de8 	.word	0x08012de8
 800151c:	08012df0 	.word	0x08012df0
 8001520:	08012dfc 	.word	0x08012dfc
 8001524:	08012e0c 	.word	0x08012e0c
 8001528:	08012e1c 	.word	0x08012e1c
 800152c:	08012e2c 	.word	0x08012e2c

08001530 <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>:
#include "../Configuration.hpp"

namespace ARDUINOJSON_NAMESPACE {

struct NestingLimit {
  NestingLimit() : value(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2232      	movs	r2, #50	@ 0x32
 800153c:	701a      	strb	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
    const char *p = escapeTable(true);
 8001556:	2001      	movs	r0, #1
 8001558:	f000 f818 	bl	800158c <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>
 800155c:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0') return c;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x1e>
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	e00c      	b.n	8001584 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c) return p[1];
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	79fa      	ldrb	r2, [r7, #7]
 8001570:	429a      	cmp	r2, r3
 8001572:	d103      	bne.n	800157c <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x30>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3301      	adds	r3, #1
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	e003      	b.n	8001584 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3302      	adds	r3, #2
 8001580:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0') return c;
 8001582:	e7ec      	b.n	800155e <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x12>
    }
  }
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>:

 private:
  static const char *escapeTable(bool excludeIdenticals) {
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
    return &"\"\"\\\\b\bf\fn\nr\rt\t"[excludeIdenticals ? 4 : 0];
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x14>
 800159c:	2304      	movs	r3, #4
 800159e:	e000      	b.n	80015a2 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x16>
 80015a0:	2300      	movs	r3, #0
 80015a2:	4a04      	ldr	r2, [pc, #16]	@ (80015b4 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x28>)
 80015a4:	4413      	add	r3, r2
  }
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	08012e30 	.word	0x08012e30

080015b8 <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
		// Chip select pin is PC_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 80015bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015c4:	f003 0310 	and.w	r3, r3, #16
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	bf14      	ite	ne
 80015cc:	2301      	movne	r3, #1
 80015ce:	2300      	moveq	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d006      	beq.n	80015e4 <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80015d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015da:	2210      	movs	r2, #16
 80015dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 80015e0:	f7ff fa38 	bl	8000a54 <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <TIM2_IRQHandler>:


	void TIM2_IRQHandler()
	{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	  if(TIM2->SR & TIM_SR_UIF) // if UIF flag is set
 80015ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	bf14      	ite	ne
 80015fa:	2301      	movne	r3, #1
 80015fc:	2300      	moveq	r3, #0
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d009      	beq.n	8001618 <TIM2_IRQHandler+0x30>
	  {
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 8001604:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	6113      	str	r3, [r2, #16]

		Interrupt::TIM2_Wrapper();
 8001614:	f7ff fa2c 	bl	8000a70 <_ZN9Interrupt12TIM2_WrapperEv>
	  }
	}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <TIM3_IRQHandler>:


	void TIM3_IRQHandler()
	{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	  if(TIM3->SR & TIM_SR_UIF) // if UIF flag is set
 8001620:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <TIM3_IRQHandler+0x30>)
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf14      	ite	ne
 800162c:	2301      	movne	r3, #1
 800162e:	2300      	moveq	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d007      	beq.n	8001646 <TIM3_IRQHandler+0x2a>
	  {
		TIM3->SR &= ~TIM_SR_UIF; // clear UIF flag
 8001636:	4b05      	ldr	r3, [pc, #20]	@ (800164c <TIM3_IRQHandler+0x30>)
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	4a04      	ldr	r2, [pc, #16]	@ (800164c <TIM3_IRQHandler+0x30>)
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	6113      	str	r3, [r2, #16]

		Interrupt::TIM3_Wrapper();
 8001642:	f7ff fa23 	bl	8000a8c <_ZN9Interrupt12TIM3_WrapperEv>
	  }
	}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40000400 	.word	0x40000400

08001650 <TIM4_IRQHandler>:

	void TIM4_IRQHandler()
	{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	  if(TIM4->SR & TIM_SR_UIF) // if UIF flag is set
 8001654:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <TIM4_IRQHandler+0x30>)
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf14      	ite	ne
 8001660:	2301      	movne	r3, #1
 8001662:	2300      	moveq	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d007      	beq.n	800167a <TIM4_IRQHandler+0x2a>
	  {
		TIM4->SR &= ~TIM_SR_UIF; // clear UIF flag
 800166a:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <TIM4_IRQHandler+0x30>)
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	4a04      	ldr	r2, [pc, #16]	@ (8001680 <TIM4_IRQHandler+0x30>)
 8001670:	f023 0301 	bic.w	r3, r3, #1
 8001674:	6113      	str	r3, [r2, #16]

		Interrupt::TIM4_Wrapper();
 8001676:	f7ff fa17 	bl	8000aa8 <_ZN9Interrupt12TIM4_WrapperEv>
	  }
	}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40000800 	.word	0x40000800

08001684 <_Z13createThreadsv>:
#include "extern.h"


void createThreads(void)
{
 8001684:	b598      	push	{r3, r4, r7, lr}
 8001686:	af00      	add	r7, sp, #0
    baseThread = new pruThread(TIM2, TIM2_IRQn, base_freq);
 8001688:	2030      	movs	r0, #48	@ 0x30
 800168a:	f010 f997 	bl	80119bc <_Znwj>
 800168e:	4603      	mov	r3, r0
 8001690:	461c      	mov	r4, r3
 8001692:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <_Z13createThreadsv+0x78>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	221c      	movs	r2, #28
 8001698:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800169c:	4620      	mov	r0, r4
 800169e:	f003 fc51 	bl	8004f44 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 80016a2:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <_Z13createThreadsv+0x7c>)
 80016a4:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM2_IRQn, 2);
 80016a6:	2102      	movs	r1, #2
 80016a8:	201c      	movs	r0, #28
 80016aa:	f7ff fa0b 	bl	8000ac4 <__NVIC_SetPriority>

    servoThread = new pruThread(TIM3, TIM3_IRQn , servo_freq);
 80016ae:	2030      	movs	r0, #48	@ 0x30
 80016b0:	f010 f984 	bl	80119bc <_Znwj>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461c      	mov	r4, r3
 80016b8:	4b12      	ldr	r3, [pc, #72]	@ (8001704 <_Z13createThreadsv+0x80>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	221d      	movs	r2, #29
 80016be:	4912      	ldr	r1, [pc, #72]	@ (8001708 <_Z13createThreadsv+0x84>)
 80016c0:	4620      	mov	r0, r4
 80016c2:	f003 fc3f 	bl	8004f44 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 80016c6:	4b11      	ldr	r3, [pc, #68]	@ (800170c <_Z13createThreadsv+0x88>)
 80016c8:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM3_IRQn , 3);
 80016ca:	2103      	movs	r1, #3
 80016cc:	201d      	movs	r0, #29
 80016ce:	f7ff f9f9 	bl	8000ac4 <__NVIC_SetPriority>

    commsThread = new pruThread(TIM4, TIM4_IRQn, PRU_COMMSFREQ);
 80016d2:	2030      	movs	r0, #48	@ 0x30
 80016d4:	f010 f972 	bl	80119bc <_Znwj>
 80016d8:	4603      	mov	r3, r0
 80016da:	461c      	mov	r4, r3
 80016dc:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 80016e0:	221e      	movs	r2, #30
 80016e2:	490b      	ldr	r1, [pc, #44]	@ (8001710 <_Z13createThreadsv+0x8c>)
 80016e4:	4620      	mov	r0, r4
 80016e6:	f003 fc2d 	bl	8004f44 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 80016ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <_Z13createThreadsv+0x90>)
 80016ec:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM4_IRQn, 4);
 80016ee:	2104      	movs	r1, #4
 80016f0:	201e      	movs	r0, #30
 80016f2:	f7ff f9e7 	bl	8000ac4 <__NVIC_SetPriority>
}
 80016f6:	bf00      	nop
 80016f8:	bd98      	pop	{r3, r4, r7, pc}
 80016fa:	bf00      	nop
 80016fc:	24000000 	.word	0x24000000
 8001700:	24000358 	.word	0x24000358
 8001704:	24000004 	.word	0x24000004
 8001708:	40000400 	.word	0x40000400
 800170c:	24000354 	.word	0x24000354
 8001710:	40000800 	.word	0x40000800
 8001714:	2400035c 	.word	0x2400035c

08001718 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001720:	1d39      	adds	r1, r7, #4
 8001722:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001726:	2201      	movs	r2, #1
 8001728:	4803      	ldr	r0, [pc, #12]	@ (8001738 <__io_putchar+0x20>)
 800172a:	f00b fd70 	bl	800d20e <HAL_UART_Transmit>
	  return ch;
 800172e:	687b      	ldr	r3, [r7, #4]
	}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	240004b0 	.word	0x240004b0

0800173c <_Z14readJsonConfigv>:
}



void readJsonConfig()
{
 800173c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001740:	b08d      	sub	sp, #52	@ 0x34
 8001742:	af00      	add	r7, sp, #0
	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 8001744:	4854      	ldr	r0, [pc, #336]	@ (8001898 <_Z14readJsonConfigv+0x15c>)
 8001746:	f010 fccf 	bl	80120e8 <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 800174a:	4854      	ldr	r0, [pc, #336]	@ (800189c <_Z14readJsonConfigv+0x160>)
 800174c:	f010 fccc 	bl	80120e8 <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8001750:	2200      	movs	r2, #0
 8001752:	4953      	ldr	r1, [pc, #332]	@ (80018a0 <_Z14readJsonConfigv+0x164>)
 8001754:	4853      	ldr	r0, [pc, #332]	@ (80018a4 <_Z14readJsonConfigv+0x168>)
 8001756:	f00f fcdd 	bl	8011114 <f_mount>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf14      	ite	ne
 8001760:	2301      	movne	r3, #1
 8001762:	2300      	moveq	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d005      	beq.n	8001776 <_Z14readJsonConfigv+0x3a>
	{
    	printf("	Failed to mount SD card\n\r");
 800176a:	484f      	ldr	r0, [pc, #316]	@ (80018a8 <_Z14readJsonConfigv+0x16c>)
 800176c:	f010 fc4c 	bl	8012008 <iprintf>
    	Error_Handler();
 8001770:	f000 fe60 	bl	8002434 <Error_Handler>
			}

			f_close(&SDFile);
		}
    }
}
 8001774:	e08a      	b.n	800188c <_Z14readJsonConfigv+0x150>
		if(f_open(&SDFile, "config.txt", FA_READ) != FR_OK)
 8001776:	2201      	movs	r2, #1
 8001778:	494c      	ldr	r1, [pc, #304]	@ (80018ac <_Z14readJsonConfigv+0x170>)
 800177a:	484d      	ldr	r0, [pc, #308]	@ (80018b0 <_Z14readJsonConfigv+0x174>)
 800177c:	f00f fd10 	bl	80111a0 <f_open>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	bf14      	ite	ne
 8001786:	2301      	movne	r3, #1
 8001788:	2300      	moveq	r3, #0
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <_Z14readJsonConfigv+0x60>
			printf("	Failed to open JSON config file\n");
 8001790:	4848      	ldr	r0, [pc, #288]	@ (80018b4 <_Z14readJsonConfigv+0x178>)
 8001792:	f010 fca9 	bl	80120e8 <puts>
			Error_Handler();
 8001796:	f000 fe4d 	bl	8002434 <Error_Handler>
}
 800179a:	e077      	b.n	800188c <_Z14readJsonConfigv+0x150>
		}
 800179c:	466b      	mov	r3, sp
 800179e:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 80017a0:	4b43      	ldr	r3, [pc, #268]	@ (80018b0 <_Z14readJsonConfigv+0x174>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	62bb      	str	r3, [r7, #40]	@ 0x28
			printf("	JSON config file lenght = %2ld\n", length);
 80017a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017a8:	4843      	ldr	r0, [pc, #268]	@ (80018b8 <_Z14readJsonConfigv+0x17c>)
 80017aa:	f010 fc2d 	bl	8012008 <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 80017ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017b0:	1e4b      	subs	r3, r1, #1
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b4:	460a      	mov	r2, r1
 80017b6:	2300      	movs	r3, #0
 80017b8:	4690      	mov	r8, r2
 80017ba:	4699      	mov	r9, r3
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017d0:	460a      	mov	r2, r1
 80017d2:	2300      	movs	r3, #0
 80017d4:	4614      	mov	r4, r2
 80017d6:	461d      	mov	r5, r3
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	00eb      	lsls	r3, r5, #3
 80017e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017e6:	00e2      	lsls	r2, r4, #3
 80017e8:	460b      	mov	r3, r1
 80017ea:	3318      	adds	r3, #24
 80017ec:	3307      	adds	r3, #7
 80017ee:	08db      	lsrs	r3, r3, #3
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	ebad 0d03 	sub.w	sp, sp, r3
 80017f6:	466b      	mov	r3, sp
 80017f8:	331f      	adds	r3, #31
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	015b      	lsls	r3, r3, #5
 80017fe:	623b      	str	r3, [r7, #32]
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 8001800:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	6a39      	ldr	r1, [r7, #32]
 8001806:	482a      	ldr	r0, [pc, #168]	@ (80018b0 <_Z14readJsonConfigv+0x174>)
 8001808:	f00f fe84 	bl	8011514 <f_read>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	bf14      	ite	ne
 8001812:	2301      	movne	r3, #1
 8001814:	2300      	moveq	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <_Z14readJsonConfigv+0xe8>
				printf("	JSON config file read FAILURE\n");
 800181c:	4827      	ldr	r0, [pc, #156]	@ (80018bc <_Z14readJsonConfigv+0x180>)
 800181e:	f010 fc63 	bl	80120e8 <puts>
 8001822:	e02f      	b.n	8001884 <_Z14readJsonConfigv+0x148>
				printf("	JSON config file read SUCCESS!\n");
 8001824:	4826      	ldr	r0, [pc, #152]	@ (80018c0 <_Z14readJsonConfigv+0x184>)
 8001826:	f010 fc5f 	bl	80120e8 <puts>
				strJson.reserve(length + 1);
 800182a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800182c:	3301      	adds	r3, #1
 800182e:	4619      	mov	r1, r3
 8001830:	4824      	ldr	r0, [pc, #144]	@ (80018c4 <_Z14readJsonConfigv+0x188>)
 8001832:	f010 f9c8 	bl	8011bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800183a:	e017      	b.n	800186c <_Z14readJsonConfigv+0x130>
			    	strJson = strJson + rtext[i];
 800183c:	6a3a      	ldr	r2, [r7, #32]
 800183e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001840:	4413      	add	r3, r2
 8001842:	781a      	ldrb	r2, [r3, #0]
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	491e      	ldr	r1, [pc, #120]	@ (80018c4 <_Z14readJsonConfigv+0x188>)
 800184a:	4618      	mov	r0, r3
 800184c:	f000 fe8c 	bl	8002568 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 8001850:	f107 0308 	add.w	r3, r7, #8
 8001854:	4619      	mov	r1, r3
 8001856:	481b      	ldr	r0, [pc, #108]	@ (80018c4 <_Z14readJsonConfigv+0x188>)
 8001858:	f010 f946 	bl	8011ae8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800185c:	f107 0308 	add.w	r3, r7, #8
 8001860:	4618      	mov	r0, r3
 8001862:	f010 f93b 	bl	8011adc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 8001866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001868:	3301      	adds	r3, #1
 800186a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800186c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800186e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001870:	429a      	cmp	r2, r3
 8001872:	dbe3      	blt.n	800183c <_Z14readJsonConfigv+0x100>
			    printf("\n%s\n", strJson.c_str());
 8001874:	4813      	ldr	r0, [pc, #76]	@ (80018c4 <_Z14readJsonConfigv+0x188>)
 8001876:	f010 fa09 	bl	8011c8c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800187a:	4603      	mov	r3, r0
 800187c:	4619      	mov	r1, r3
 800187e:	4812      	ldr	r0, [pc, #72]	@ (80018c8 <_Z14readJsonConfigv+0x18c>)
 8001880:	f010 fbc2 	bl	8012008 <iprintf>
			f_close(&SDFile);
 8001884:	480a      	ldr	r0, [pc, #40]	@ (80018b0 <_Z14readJsonConfigv+0x174>)
 8001886:	f010 f802 	bl	801188e <f_close>
 800188a:	46b5      	mov	sp, r6
}
 800188c:	bf00      	nop
 800188e:	3734      	adds	r7, #52	@ 0x34
 8001890:	46bd      	mov	sp, r7
 8001892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001896:	bf00      	nop
 8001898:	08012e40 	.word	0x08012e40
 800189c:	08012e64 	.word	0x08012e64
 80018a0:	240005a0 	.word	0x240005a0
 80018a4:	240005a4 	.word	0x240005a4
 80018a8:	08012e84 	.word	0x08012e84
 80018ac:	08012ea0 	.word	0x08012ea0
 80018b0:	240007d4 	.word	0x240007d4
 80018b4:	08012eac 	.word	0x08012eac
 80018b8:	08012ed0 	.word	0x08012ed0
 80018bc:	08012ef4 	.word	0x08012ef4
 80018c0:	08012f14 	.word	0x08012f14
 80018c4:	240003e0 	.word	0x240003e0
 80018c8:	08012f34 	.word	0x08012f34

080018cc <_Z5setupv>:

void setup()
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
    printf("\n2. Setting up SPI DMA and threads\n");
 80018d0:	4807      	ldr	r0, [pc, #28]	@ (80018f0 <_Z5setupv+0x24>)
 80018d2:	f010 fc09 	bl	80120e8 <puts>

     // initialise the Remora comms
    comms->init();
 80018d6:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <_Z5setupv+0x28>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 f834 	bl	8004948 <_ZN11RemoraComms4initEv>
    comms->start();
 80018e0:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <_Z5setupv+0x28>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f003 f987 	bl	8004bf8 <_ZN11RemoraComms5startEv>
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	08012f3c 	.word	0x08012f3c
 80018f4:	24000430 	.word	0x24000430

080018f8 <_Z15deserialiseJSONv>:


void deserialiseJSON()
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
    printf("\n3. Parsing json configuration file\n");
 80018fe:	4826      	ldr	r0, [pc, #152]	@ (8001998 <_Z15deserialiseJSONv+0xa0>)
 8001900:	f010 fbf2 	bl	80120e8 <puts>

    const char *json = strJson.c_str();
 8001904:	4825      	ldr	r0, [pc, #148]	@ (800199c <_Z15deserialiseJSONv+0xa4>)
 8001906:	f010 f9c1 	bl	8011c8c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800190a:	60f8      	str	r0, [r7, #12]

    // parse the json configuration file
    DeserializationError error = deserializeJson(doc, json);
 800190c:	f107 0308 	add.w	r3, r7, #8
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fe0d 	bl	8001530 <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>
 8001916:	7a3a      	ldrb	r2, [r7, #8]
 8001918:	68f9      	ldr	r1, [r7, #12]
 800191a:	4821      	ldr	r0, [pc, #132]	@ (80019a0 <_Z15deserialiseJSONv+0xa8>)
 800191c:	f000 fe3a 	bl	8002594 <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>
 8001920:	4603      	mov	r3, r0
 8001922:	713b      	strb	r3, [r7, #4]

    printf("	Config deserialisation - ");
 8001924:	481f      	ldr	r0, [pc, #124]	@ (80019a4 <_Z15deserialiseJSONv+0xac>)
 8001926:	f010 fb6f 	bl	8012008 <iprintf>

    switch (error.code())
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fdb9 	bl	80014a4 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>
 8001932:	4603      	mov	r3, r0
 8001934:	2b03      	cmp	r3, #3
 8001936:	d011      	beq.n	800195c <_Z15deserialiseJSONv+0x64>
 8001938:	2b03      	cmp	r3, #3
 800193a:	dc16      	bgt.n	800196a <_Z15deserialiseJSONv+0x72>
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <_Z15deserialiseJSONv+0x4e>
 8001940:	2b02      	cmp	r3, #2
 8001942:	d004      	beq.n	800194e <_Z15deserialiseJSONv+0x56>
 8001944:	e011      	b.n	800196a <_Z15deserialiseJSONv+0x72>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 8001946:	4818      	ldr	r0, [pc, #96]	@ (80019a8 <_Z15deserialiseJSONv+0xb0>)
 8001948:	f010 fbce 	bl	80120e8 <puts>
            break;
 800194c:	e01f      	b.n	800198e <_Z15deserialiseJSONv+0x96>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 800194e:	4817      	ldr	r0, [pc, #92]	@ (80019ac <_Z15deserialiseJSONv+0xb4>)
 8001950:	f010 fbca 	bl	80120e8 <puts>
            configError = true;
 8001954:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <_Z15deserialiseJSONv+0xb8>)
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
            break;
 800195a:	e018      	b.n	800198e <_Z15deserialiseJSONv+0x96>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 800195c:	4815      	ldr	r0, [pc, #84]	@ (80019b4 <_Z15deserialiseJSONv+0xbc>)
 800195e:	f010 fbc3 	bl	80120e8 <puts>
            configError = true;
 8001962:	4b13      	ldr	r3, [pc, #76]	@ (80019b0 <_Z15deserialiseJSONv+0xb8>)
 8001964:	2201      	movs	r2, #1
 8001966:	701a      	strb	r2, [r3, #0]
            break;
 8001968:	e011      	b.n	800198e <_Z15deserialiseJSONv+0x96>
        default:
            printf("Deserialization failed: ");
 800196a:	4813      	ldr	r0, [pc, #76]	@ (80019b8 <_Z15deserialiseJSONv+0xc0>)
 800196c:	f010 fb4c 	bl	8012008 <iprintf>
            printf(error.c_str());
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fda2 	bl	80014bc <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>
 8001978:	4603      	mov	r3, r0
 800197a:	4618      	mov	r0, r3
 800197c:	f010 fb44 	bl	8012008 <iprintf>
            printf("\n");
 8001980:	200a      	movs	r0, #10
 8001982:	f010 fb53 	bl	801202c <putchar>
            configError = true;
 8001986:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <_Z15deserialiseJSONv+0xb8>)
 8001988:	2201      	movs	r2, #1
 800198a:	701a      	strb	r2, [r3, #0]
            break;
 800198c:	bf00      	nop
    }
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	08012f60 	.word	0x08012f60
 800199c:	240003e0 	.word	0x240003e0
 80019a0:	24000400 	.word	0x24000400
 80019a4:	08012f84 	.word	0x08012f84
 80019a8:	08012fa0 	.word	0x08012fa0
 80019ac:	08012fbc 	.word	0x08012fbc
 80019b0:	24000352 	.word	0x24000352
 80019b4:	08012fcc 	.word	0x08012fcc
 80019b8:	08012fe0 	.word	0x08012fe0

080019bc <_Z13configThreadsv>:

void configThreads()
{
 80019bc:	b5b0      	push	{r4, r5, r7, lr}
 80019be:	b0bc      	sub	sp, #240	@ 0xf0
 80019c0:	af00      	add	r7, sp, #0
    if (configError) return;
 80019c2:	4bcb      	ldr	r3, [pc, #812]	@ (8001cf0 <_Z13configThreadsv+0x334>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f040 818d 	bne.w	8001ce6 <_Z13configThreadsv+0x32a>

    printf("\n4. Configuring threads\n");
 80019cc:	48c9      	ldr	r0, [pc, #804]	@ (8001cf4 <_Z13configThreadsv+0x338>)
 80019ce:	f010 fb8b 	bl	80120e8 <puts>
 80019d2:	4bc9      	ldr	r3, [pc, #804]	@ (8001cf8 <_Z13configThreadsv+0x33c>)
 80019d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80019d8:	4bc8      	ldr	r3, [pc, #800]	@ (8001cfc <_Z13configThreadsv+0x340>)
 80019da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80019de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80019e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
                    public Visitable {
  typedef MemberProxy<TObject, TStringRef> this_type;

 public:
  FORCE_INLINE MemberProxy(TObject variant, TStringRef key)
      : _object(variant), _key(key) {}
 80019e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019ea:	623b      	str	r3, [r7, #32]
 80019ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
    return MemberProxy<JsonDocument&, TChar*>(*this, key);
 80019f2:	bf00      	nop
template <typename TImpl>
class VariantCasts {
 public:
  template <typename T>
  FORCE_INLINE operator T() const {
    return impl()->template as<T>();
 80019f4:	f107 0320 	add.w	r3, r7, #32
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 fe64 	bl	80026c6 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRNS_12JsonDocumentEPKcEEE4implEv>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    return getOrAddUpstreamMember().getOrAddMember(key);
  }

 private:
  FORCE_INLINE VariantRef getUpstreamMember() const {
    return _object.getMember(_key);
 8001a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001a1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
 8001a20:	f8d7 40dc 	ldr.w	r4, [r7, #220]	@ 0xdc
 8001a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001a28:	f103 0510 	add.w	r5, r3, #16
 8001a2c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8001a30:	f7ff f9f0 	bl	8000e14 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4619      	mov	r1, r3
 8001a38:	4628      	mov	r0, r5
 8001a3a:	f001 fcac 	bl	8003396 <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f8c7 40d4 	str.w	r4, [r7, #212]	@ 0xd4
 8001a44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001a48:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a4c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 fd23 	bl	800249c <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001a56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
}

template <typename T>
inline typename enable_if<is_same<T, ArrayRef>::value, T>::type VariantRef::as()
    const {
  return ArrayRef(_pool, _data != 0 ? _data->asArray() : 0);
 8001a60:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8001a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <_Z13configThreadsv+0xb8>
 8001a68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff f9e1 	bl	8000e32 <_ZN19ArduinoJson6101_11011VariantData7asArrayEv>
 8001a70:	4603      	mov	r3, r0
 8001a72:	e000      	b.n	8001a76 <_Z13configThreadsv+0xba>
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 40cc 	str.w	r4, [r7, #204]	@ 0xcc
 8001a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 public:
  typedef ArrayIterator iterator;

  FORCE_INLINE ArrayRef() : base_type(0), _pool(0) {}
  FORCE_INLINE ArrayRef(MemoryPool* pool, CollectionData* data)
      : base_type(data), _pool(pool) {}
 8001a7e:	f107 0318 	add.w	r3, r7, #24
 8001a82:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 fd17 	bl	80024ba <_ZN19ArduinoJson6101_11012ArrayRefBaseINS_14CollectionDataEEC1EPS1_>
 8001a8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
  VariantRef addElement() const {
    return VariantRef(_pool, arrayAdd(_data, _pool));
  }

  FORCE_INLINE iterator begin() const {
    if (!_data) return iterator();
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d105      	bne.n	8001aaa <_Z13configThreadsv+0xee>
 8001a9e:	f107 0310 	add.w	r3, r7, #16
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fae2 	bl	800106c <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>
 8001aa8:	e00b      	b.n	8001ac2 <_Z13configThreadsv+0x106>
    return iterator(_pool, _data->head());
 8001aaa:	69fc      	ldr	r4, [r7, #28]
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff f832 	bl	8000b18 <_ZNK19ArduinoJson6101_11014CollectionData4headEv>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f107 0310 	add.w	r3, r7, #16
 8001aba:	4621      	mov	r1, r4
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fae3 	bl	8001088 <_ZN19ArduinoJson6101_11013ArrayIteratorC1EPNS_10MemoryPoolEPNS_11VariantSlotE>

    JsonArray Threads = doc["Threads"];

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it)
 8001ac2:	e0fe      	b.n	8001cc2 <_Z13configThreadsv+0x306>
    {
        thread = *it;
 8001ac4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ac8:	f107 0210 	add.w	r2, r7, #16
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff faed 	bl	80010ae <_ZNK19ArduinoJson6101_11013ArrayIteratordeEv>
 8001ad4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 fdff 	bl	80026dc <_ZNK19ArduinoJson6101_11012VariantCastsINS_10VariantRefEE4implEv>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
}

template <typename T>
inline typename enable_if<is_same<T, ObjectRef>::value, T>::type
VariantRef::as() const {
  return ObjectRef(_pool, variantAsObject(_data));
 8001ae2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ae4:	685c      	ldr	r4, [r3, #4]
 8001ae6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff faad 	bl	800104a <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE>
 8001af0:	4603      	mov	r3, r0
 8001af2:	667c      	str	r4, [r7, #100]	@ 0x64
 8001af4:	663b      	str	r3, [r7, #96]	@ 0x60
 public:
  typedef ObjectIterator iterator;

  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
  FORCE_INLINE ObjectRef(MemoryPool* buf, CollectionData* data)
      : base_type(data), _pool(buf) {}
 8001af6:	f107 0308 	add.w	r3, r7, #8
 8001afa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 fceb 	bl	80024d8 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 8001b02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	bf00      	nop
 8001b08:	bf00      	nop
 8001b0a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d00 <_Z13configThreadsv+0x344>)
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b16:	e882 0003 	stmia.w	r2, {r0, r1}
 8001b1a:	4b7a      	ldr	r3, [pc, #488]	@ (8001d04 <_Z13configThreadsv+0x348>)
 8001b1c:	677b      	str	r3, [r7, #116]	@ 0x74
template <typename TObject>
template <typename TString>
inline typename enable_if<IsString<TString *>::value,
                          MemberProxy<const TObject &, TString *> >::type
    ObjectShortcuts<TObject>::operator[](TString *key) const {
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001b1e:	4878      	ldr	r0, [pc, #480]	@ (8001d00 <_Z13configThreadsv+0x344>)
 8001b20:	f000 fde7 	bl	80026f2 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8001b24:	4603      	mov	r3, r0
 8001b26:	673b      	str	r3, [r7, #112]	@ 0x70
 8001b28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
      : _object(variant), _key(key) {}
 8001b2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b32:	637b      	str	r3, [r7, #52]	@ 0x34
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001b34:	bf00      	nop
 8001b36:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 fde4 	bl	8002708 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001b46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    return _object.getMember(_key);
 8001b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001b5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  // getMember(char*) const
  // getMember(const char*) const
  // getMember(const __FlashStringHelper*) const
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) const {
    return get_impl(adaptString(key));
 8001b62:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001b66:	f7ff f955 	bl	8000e14 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001b74:	607a      	str	r2, [r7, #4]
  }

 private:
  template <typename TAdaptedString>
  FORCE_INLINE VariantRef get_impl(TAdaptedString key) const {
    return VariantRef(_pool, objectGet(_data, key));
 8001b76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b7a:	685c      	ldr	r4, [r3, #4]
 8001b7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f001 ffa5 	bl	8003ad4 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	67fc      	str	r4, [r7, #124]	@ 0x7c
 8001b8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001b90:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001b94:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 fc80 	bl	800249c <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001b9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001b9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ba0:	bf00      	nop
    return get_impl(adaptString(key));
 8001ba2:	bf00      	nop
 8001ba4:	bf00      	nop
  FORCE_INLINE typename enable_if<!is_same<T, ArrayRef>::value &&
                                      !is_same<T, ObjectRef>::value &&
                                      !is_same<T, VariantRef>::value,
                                  typename VariantAs<T>::type>::type
  as() const {
    return variantAs<T>(_data);
 8001ba6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f001 fa83 	bl	80030b4 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8001bb2:	bf00      	nop
 8001bb4:	bf00      	nop

        const char* configor = thread["Thread"];
 8001bb6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001bba:	4b53      	ldr	r3, [pc, #332]	@ (8001d08 <_Z13configThreadsv+0x34c>)
 8001bbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001bc0:	484f      	ldr	r0, [pc, #316]	@ (8001d00 <_Z13configThreadsv+0x344>)
 8001bc2:	f000 fd96 	bl	80026f2 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001bd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      : _object(variant), _key(key) {}
 8001bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bda:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001be0:	bf00      	nop
 8001be2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fd8e 	bl	8002708 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001bf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    return _object.getMember(_key);
 8001bfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8001c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001c0e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001c12:	f7ff f8ff 	bl	8000e14 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8001c16:	4602      	mov	r2, r0
 8001c18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001c20:	603a      	str	r2, [r7, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8001c22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c26:	685c      	ldr	r4, [r3, #4]
 8001c28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6839      	ldr	r1, [r7, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f001 ff4f 	bl	8003ad4 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f8c7 40a4 	str.w	r4, [r7, #164]	@ 0xa4
 8001c3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      : base_type(data), _pool(pool) {}
 8001c40:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001c44:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 fc27 	bl	800249c <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001c4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001c52:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c54:	bf00      	nop
    return get_impl(adaptString(key));
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
    return variantAs<T>(_data);
 8001c5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f001 fa3a 	bl	80030d6 <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>
 8001c62:	4603      	mov	r3, r0
 8001c64:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8001c66:	bf00      	nop
 8001c68:	bf00      	nop
        uint32_t    freq = thread["Frequency"];
 8001c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

        if (!strcmp(configor,"Base"))
 8001c6e:	4927      	ldr	r1, [pc, #156]	@ (8001d0c <_Z13configThreadsv+0x350>)
 8001c70:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8001c74:	f7fe fb34 	bl	80002e0 <strcmp>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10a      	bne.n	8001c94 <_Z13configThreadsv+0x2d8>
        {
            base_freq = freq;
 8001c7e:	4a24      	ldr	r2, [pc, #144]	@ (8001d10 <_Z13configThreadsv+0x354>)
 8001c80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001c84:	6013      	str	r3, [r2, #0]
            printf("	Setting BASE thread frequency to %lu\n", base_freq);
 8001c86:	4b22      	ldr	r3, [pc, #136]	@ (8001d10 <_Z13configThreadsv+0x354>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4821      	ldr	r0, [pc, #132]	@ (8001d14 <_Z13configThreadsv+0x358>)
 8001c8e:	f010 f9bb 	bl	8012008 <iprintf>
 8001c92:	e011      	b.n	8001cb8 <_Z13configThreadsv+0x2fc>
        }
        else if (!strcmp(configor,"Servo"))
 8001c94:	4920      	ldr	r1, [pc, #128]	@ (8001d18 <_Z13configThreadsv+0x35c>)
 8001c96:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8001c9a:	f7fe fb21 	bl	80002e0 <strcmp>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d109      	bne.n	8001cb8 <_Z13configThreadsv+0x2fc>
        {
            servo_freq = freq;
 8001ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d1c <_Z13configThreadsv+0x360>)
 8001ca6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001caa:	6013      	str	r3, [r2, #0]
            printf("	Setting SERVO thread frequency to %lu\n", servo_freq);
 8001cac:	4b1b      	ldr	r3, [pc, #108]	@ (8001d1c <_Z13configThreadsv+0x360>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	481b      	ldr	r0, [pc, #108]	@ (8001d20 <_Z13configThreadsv+0x364>)
 8001cb4:	f010 f9a8 	bl	8012008 <iprintf>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it)
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fa26 	bl	800110e <_ZN19ArduinoJson6101_11013ArrayIteratorppEv>
  }

  FORCE_INLINE iterator end() const {
    return iterator();
 8001cc2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff f9d0 	bl	800106c <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>
 8001ccc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fa05 	bl	80010e6 <_ZNK19ArduinoJson6101_11013ArrayIteratorneERKS0_>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f47f aef0 	bne.w	8001ac4 <_Z13configThreadsv+0x108>
 8001ce4:	e000      	b.n	8001ce8 <_Z13configThreadsv+0x32c>
    if (configError) return;
 8001ce6:	bf00      	nop
        }
    }
}
 8001ce8:	37f0      	adds	r7, #240	@ 0xf0
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bdb0      	pop	{r4, r5, r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	24000352 	.word	0x24000352
 8001cf4:	08012ffc 	.word	0x08012ffc
 8001cf8:	08013014 	.word	0x08013014
 8001cfc:	24000400 	.word	0x24000400
 8001d00:	24000420 	.word	0x24000420
 8001d04:	0801301c 	.word	0x0801301c
 8001d08:	08013024 	.word	0x08013024
 8001d0c:	08013030 	.word	0x08013030
 8001d10:	24000000 	.word	0x24000000
 8001d14:	08013038 	.word	0x08013038
 8001d18:	08013060 	.word	0x08013060
 8001d1c:	24000004 	.word	0x24000004
 8001d20:	08013068 	.word	0x08013068

08001d24 <main>:


int main(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	@ 0x28
 8001d28:	af02      	add	r7, sp, #8
	MPU_Config();
 8001d2a:	f000 fb57 	bl	80023dc <_ZL10MPU_Configv>
	SCB->VTOR = 0x08000000;
 8001d2e:	4ba0      	ldr	r3, [pc, #640]	@ (8001fb0 <main+0x28c>)
 8001d30:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d34:	609a      	str	r2, [r3, #8]
	HAL_Init();
 8001d36:	f003 fbab 	bl	8005490 <HAL_Init>
	SystemClock_Config();
 8001d3a:	f000 f965 	bl	8002008 <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 8001d3e:	f000 fa2d 	bl	800219c <_Z24PeriphCommonClock_Configv>
	//SCB_EnableICache();
	//SCB_EnableDCache();

	/* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001d42:	4b9c      	ldr	r3, [pc, #624]	@ (8001fb4 <main+0x290>)
 8001d44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d48:	4a9a      	ldr	r2, [pc, #616]	@ (8001fb4 <main+0x290>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001d52:	4b98      	ldr	r3, [pc, #608]	@ (8001fb4 <main+0x290>)
 8001d54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]

	MX_GPIO_Init(); // used for SD card detect
 8001d60:	f000 fae0 	bl	8002324 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 8001d64:	f000 fa7e 	bl	8002264 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();		// uncomment #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 in sd_diskio.c
 8001d68:	f000 fa50 	bl	800220c <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 8001d6c:	f00d f934 	bl	800efd8 <MX_FATFS_Init>


	enum State currentState;
	enum State prevState;

    comms->setStatus(false);
 8001d70:	4b91      	ldr	r3, [pc, #580]	@ (8001fb8 <main+0x294>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 f86f 	bl	8004e5a <_ZN11RemoraComms9setStatusEb>
    comms->setError(false);
 8001d7c:	4b8e      	ldr	r3, [pc, #568]	@ (8001fb8 <main+0x294>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f003 f886 	bl	8004e94 <_ZN11RemoraComms8setErrorEb>
	currentState = ST_SETUP;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	77fb      	strb	r3, [r7, #31]
	prevState = ST_RESET;
 8001d8c:	2305      	movs	r3, #5
 8001d8e:	77bb      	strb	r3, [r7, #30]

	printf("\nRemora version %d.%d.%d for %s starting\n\n", MAJOR_VERSION, MINOR_VERSION, PATCH, BOARD);
 8001d90:	4b8a      	ldr	r3, [pc, #552]	@ (8001fbc <main+0x298>)
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	2300      	movs	r3, #0
 8001d96:	2201      	movs	r2, #1
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4889      	ldr	r0, [pc, #548]	@ (8001fc0 <main+0x29c>)
 8001d9c:	f010 f934 	bl	8012008 <iprintf>

	while (1)
	{
		switch(currentState){
 8001da0:	7ffb      	ldrb	r3, [r7, #31]
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d8fc      	bhi.n	8001da0 <main+0x7c>
 8001da6:	a201      	add	r2, pc, #4	@ (adr r2, 8001dac <main+0x88>)
 8001da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dac:	08001dc9 	.word	0x08001dc9
 8001db0:	08001df5 	.word	0x08001df5
 8001db4:	08001e41 	.word	0x08001e41
 8001db8:	08001e6b 	.word	0x08001e6b
 8001dbc:	08001ef7 	.word	0x08001ef7
 8001dc0:	08001f0f 	.word	0x08001f0f
 8001dc4:	08001fa1 	.word	0x08001fa1
			          case ST_SETUP:
			              // do setup tasks
			              if (currentState != prevState)
 8001dc8:	7ffa      	ldrb	r2, [r7, #31]
 8001dca:	7fbb      	ldrb	r3, [r7, #30]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d002      	beq.n	8001dd6 <main+0xb2>
			              {
			                  printf("\n## Entering SETUP state\n\n");
 8001dd0:	487c      	ldr	r0, [pc, #496]	@ (8001fc4 <main+0x2a0>)
 8001dd2:	f010 f989 	bl	80120e8 <puts>
			              }
			              prevState = currentState;
 8001dd6:	7ffb      	ldrb	r3, [r7, #31]
 8001dd8:	77bb      	strb	r3, [r7, #30]

			              readJsonConfig();
 8001dda:	f7ff fcaf 	bl	800173c <_Z14readJsonConfigv>
			              setup();
 8001dde:	f7ff fd75 	bl	80018cc <_Z5setupv>
			              deserialiseJSON();
 8001de2:	f7ff fd89 	bl	80018f8 <_Z15deserialiseJSONv>
			              configThreads();
 8001de6:	f7ff fde9 	bl	80019bc <_Z13configThreadsv>
			              createThreads();
 8001dea:	f7ff fc4b 	bl	8001684 <_Z13createThreadsv>
			              //debugThreadHigh();
			              //loadModules();
			              //debugThreadLow();

			              currentState = ST_START;
 8001dee:	2301      	movs	r3, #1
 8001df0:	77fb      	strb	r3, [r7, #31]
			              break;
 8001df2:	e0dc      	b.n	8001fae <main+0x28a>

			          case ST_START:
			              // do start tasks
			              if (currentState != prevState)
 8001df4:	7ffa      	ldrb	r2, [r7, #31]
 8001df6:	7fbb      	ldrb	r3, [r7, #30]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d002      	beq.n	8001e02 <main+0xde>
			              {
			                  printf("\n## Entering START state\n");
 8001dfc:	4872      	ldr	r0, [pc, #456]	@ (8001fc8 <main+0x2a4>)
 8001dfe:	f010 f973 	bl	80120e8 <puts>
			              }
			              prevState = currentState;
 8001e02:	7ffb      	ldrb	r3, [r7, #31]
 8001e04:	77bb      	strb	r3, [r7, #30]

			              if (!threadsRunning)
 8001e06:	4b71      	ldr	r3, [pc, #452]	@ (8001fcc <main+0x2a8>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	f083 0301 	eor.w	r3, r3, #1
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d012      	beq.n	8001e3a <main+0x116>
			              {
			                  // Start the threads
			                  printf("\nStarting the BASE thread\n");
 8001e14:	486e      	ldr	r0, [pc, #440]	@ (8001fd0 <main+0x2ac>)
 8001e16:	f010 f967 	bl	80120e8 <puts>
			                  baseThread->startThread();
 8001e1a:	4b6e      	ldr	r3, [pc, #440]	@ (8001fd4 <main+0x2b0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f003 f8be 	bl	8004fa0 <_ZN9pruThread11startThreadEv>

			                  printf("\nStarting the SERVO thread\n");
 8001e24:	486c      	ldr	r0, [pc, #432]	@ (8001fd8 <main+0x2b4>)
 8001e26:	f010 f95f 	bl	80120e8 <puts>
			                  servoThread->startThread();
 8001e2a:	4b6c      	ldr	r3, [pc, #432]	@ (8001fdc <main+0x2b8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 f8b6 	bl	8004fa0 <_ZN9pruThread11startThreadEv>

			                  threadsRunning = true;
 8001e34:	4b65      	ldr	r3, [pc, #404]	@ (8001fcc <main+0x2a8>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
			              }

			              currentState = ST_IDLE;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	77fb      	strb	r3, [r7, #31]

			              break;
 8001e3e:	e0b6      	b.n	8001fae <main+0x28a>


			          case ST_IDLE:
			              // do something when idle
			              if (currentState != prevState)
 8001e40:	7ffa      	ldrb	r2, [r7, #31]
 8001e42:	7fbb      	ldrb	r3, [r7, #30]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d002      	beq.n	8001e4e <main+0x12a>
			              {
			                  printf("\n## Entering IDLE state\n");
 8001e48:	4865      	ldr	r0, [pc, #404]	@ (8001fe0 <main+0x2bc>)
 8001e4a:	f010 f94d 	bl	80120e8 <puts>
			              }
			              prevState = currentState;
 8001e4e:	7ffb      	ldrb	r3, [r7, #31]
 8001e50:	77bb      	strb	r3, [r7, #30]

			              //wait for data before changing to running state
			              if (comms->getStatus())
 8001e52:	4b59      	ldr	r3, [pc, #356]	@ (8001fb8 <main+0x294>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f002 fff2 	bl	8004e40 <_ZN11RemoraComms9getStatusEv>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 80a1 	beq.w	8001fa6 <main+0x282>
			              {
			                  currentState = ST_RUNNING;
 8001e64:	2303      	movs	r3, #3
 8001e66:	77fb      	strb	r3, [r7, #31]
			              }

			              break;
 8001e68:	e09d      	b.n	8001fa6 <main+0x282>

			          case ST_RUNNING:
			              // do running tasks
			              if (currentState != prevState)
 8001e6a:	7ffa      	ldrb	r2, [r7, #31]
 8001e6c:	7fbb      	ldrb	r3, [r7, #30]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d002      	beq.n	8001e78 <main+0x154>
			              {
			                  printf("\n## Entering RUNNING state\n");
 8001e72:	485c      	ldr	r0, [pc, #368]	@ (8001fe4 <main+0x2c0>)
 8001e74:	f010 f938 	bl	80120e8 <puts>
			              }
			              prevState = currentState;
 8001e78:	7ffb      	ldrb	r3, [r7, #31]
 8001e7a:	77bb      	strb	r3, [r7, #30]


			              // check to see if there there has been SPI errors
			              if (comms->getError())
 8001e7c:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb8 <main+0x294>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f002 fffa 	bl	8004e7a <_ZN11RemoraComms8getErrorEv>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <main+0x17a>
			              {
			                  printf("Communication data error\n");
 8001e8c:	4856      	ldr	r0, [pc, #344]	@ (8001fe8 <main+0x2c4>)
 8001e8e:	f010 f92b 	bl	80120e8 <puts>
			                  comms->setError(false);
 8001e92:	4b49      	ldr	r3, [pc, #292]	@ (8001fb8 <main+0x294>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f002 fffb 	bl	8004e94 <_ZN11RemoraComms8setErrorEb>
			              }

			              if (comms->getStatus())
 8001e9e:	4b46      	ldr	r3, [pc, #280]	@ (8001fb8 <main+0x294>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f002 ffcc 	bl	8004e40 <_ZN11RemoraComms9getStatusEv>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d009      	beq.n	8001ec2 <main+0x19e>
			              {
			                  // SPI data received by DMA
			                  resetCnt = 0;
 8001eae:	4b4f      	ldr	r3, [pc, #316]	@ (8001fec <main+0x2c8>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
			                  comms->setStatus(false);
 8001eb4:	4b40      	ldr	r3, [pc, #256]	@ (8001fb8 <main+0x294>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f002 ffcd 	bl	8004e5a <_ZN11RemoraComms9setStatusEb>
 8001ec0:	e005      	b.n	8001ece <main+0x1aa>
			              }
			              else
			              {
			                  // no data received by DMA
			                  resetCnt++;
 8001ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8001fec <main+0x2c8>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4b48      	ldr	r3, [pc, #288]	@ (8001fec <main+0x2c8>)
 8001ecc:	701a      	strb	r2, [r3, #0]
			              }

			              if (resetCnt > SPI_ERR_MAX)
 8001ece:	4b47      	ldr	r3, [pc, #284]	@ (8001fec <main+0x2c8>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b05      	cmp	r3, #5
 8001ed4:	d907      	bls.n	8001ee6 <main+0x1c2>
			              {
			                  // reset threshold reached, reset the PRU
			                  printf("   Communication data error limit reached, resetting\n");
 8001ed6:	4846      	ldr	r0, [pc, #280]	@ (8001ff0 <main+0x2cc>)
 8001ed8:	f010 f906 	bl	80120e8 <puts>
			                  resetCnt = 0;
 8001edc:	4b43      	ldr	r3, [pc, #268]	@ (8001fec <main+0x2c8>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
			                  currentState = ST_RESET;
 8001ee2:	2305      	movs	r3, #5
 8001ee4:	77fb      	strb	r3, [r7, #31]
			              }

			              if (PRUreset)
 8001ee6:	4b43      	ldr	r3, [pc, #268]	@ (8001ff4 <main+0x2d0>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d05c      	beq.n	8001faa <main+0x286>
			              {
			                  currentState = ST_WDRESET;
 8001ef0:	2306      	movs	r3, #6
 8001ef2:	77fb      	strb	r3, [r7, #31]
			              }

			              break;
 8001ef4:	e059      	b.n	8001faa <main+0x286>

			          case ST_STOP:
			              // do stop tasks
			              if (currentState != prevState)
 8001ef6:	7ffa      	ldrb	r2, [r7, #31]
 8001ef8:	7fbb      	ldrb	r3, [r7, #30]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d002      	beq.n	8001f04 <main+0x1e0>
			              {
			                  printf("\n## Entering STOP state\n");
 8001efe:	483e      	ldr	r0, [pc, #248]	@ (8001ff8 <main+0x2d4>)
 8001f00:	f010 f8f2 	bl	80120e8 <puts>
			              }
			              prevState = currentState;
 8001f04:	7ffb      	ldrb	r3, [r7, #31]
 8001f06:	77bb      	strb	r3, [r7, #30]


			              currentState = ST_STOP;
 8001f08:	2304      	movs	r3, #4
 8001f0a:	77fb      	strb	r3, [r7, #31]
			              break;
 8001f0c:	e04f      	b.n	8001fae <main+0x28a>

			          case ST_RESET:
			              // do reset tasks
			              if (currentState != prevState)
 8001f0e:	7ffa      	ldrb	r2, [r7, #31]
 8001f10:	7fbb      	ldrb	r3, [r7, #30]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d002      	beq.n	8001f1c <main+0x1f8>
			              {
			                  printf("\n## Entering RESET state\n");
 8001f16:	4839      	ldr	r0, [pc, #228]	@ (8001ffc <main+0x2d8>)
 8001f18:	f010 f8e6 	bl	80120e8 <puts>
			              }
			              prevState = currentState;
 8001f1c:	7ffb      	ldrb	r3, [r7, #31]
 8001f1e:	77bb      	strb	r3, [r7, #30]

			              // set all of the rxData buffer to 0
			              // rxData.rxBuffer is volatile so need to do this the long way. memset cannot be used for volatile
			              printf("   Resetting rxBuffer\n");
 8001f20:	4837      	ldr	r0, [pc, #220]	@ (8002000 <main+0x2dc>)
 8001f22:	f010 f8e1 	bl	80120e8 <puts>
			              {
			            	  SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)rxData.rxBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8001f26:	4b37      	ldr	r3, [pc, #220]	@ (8002004 <main+0x2e0>)
 8001f28:	f023 031f 	bic.w	r3, r3, #31
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	2340      	movs	r3, #64	@ 0x40
 8001f30:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	dd1d      	ble.n	8001f74 <main+0x250>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f003 021f 	and.w	r2, r3, #31
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4413      	add	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f48:	f3bf 8f4f 	dsb	sy
}
 8001f4c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001f4e:	4a18      	ldr	r2, [pc, #96]	@ (8001fb0 <main+0x28c>)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	3320      	adds	r3, #32
 8001f5a:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3b20      	subs	r3, #32
 8001f60:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	dcf2      	bgt.n	8001f4e <main+0x22a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001f68:	f3bf 8f4f 	dsb	sy
}
 8001f6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f6e:	f3bf 8f6f 	isb	sy
}
 8001f72:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001f74:	bf00      	nop
			                  int n = sizeof(rxData.rxBuffer);
 8001f76:	2340      	movs	r3, #64	@ 0x40
 8001f78:	61bb      	str	r3, [r7, #24]
			                  while(n-- > 0)
 8001f7a:	e004      	b.n	8001f86 <main+0x262>
			                  {
			                      rxData.rxBuffer[n] = 0;
 8001f7c:	4a21      	ldr	r2, [pc, #132]	@ (8002004 <main+0x2e0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4413      	add	r3, r2
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
			                  while(n-- > 0)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	1e5a      	subs	r2, r3, #1
 8001f8a:	61ba      	str	r2, [r7, #24]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bfcc      	ite	gt
 8001f90:	2301      	movgt	r3, #1
 8001f92:	2300      	movle	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <main+0x258>
			                  }
			              }

			              currentState = ST_IDLE;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	77fb      	strb	r3, [r7, #31]
			              break;
 8001f9e:	e006      	b.n	8001fae <main+0x28a>

			          case ST_WDRESET:
			        	  // force a reset
			        	  HAL_NVIC_SystemReset();
 8001fa0:	f003 fc51 	bl	8005846 <HAL_NVIC_SystemReset>
			              break;
 8001fa4:	e003      	b.n	8001fae <main+0x28a>
			              break;
 8001fa6:	bf00      	nop
 8001fa8:	e6fa      	b.n	8001da0 <main+0x7c>
			              break;
 8001faa:	bf00      	nop
 8001fac:	e6f8      	b.n	8001da0 <main+0x7c>
			  }

	}
 8001fae:	e6f7      	b.n	8001da0 <main+0x7c>
 8001fb0:	e000ed00 	.word	0xe000ed00
 8001fb4:	58024400 	.word	0x58024400
 8001fb8:	24000430 	.word	0x24000430
 8001fbc:	080130bc 	.word	0x080130bc
 8001fc0:	08013090 	.word	0x08013090
 8001fc4:	080130c8 	.word	0x080130c8
 8001fc8:	080130e4 	.word	0x080130e4
 8001fcc:	24000353 	.word	0x24000353
 8001fd0:	08013100 	.word	0x08013100
 8001fd4:	24000358 	.word	0x24000358
 8001fd8:	0801311c 	.word	0x0801311c
 8001fdc:	24000354 	.word	0x24000354
 8001fe0:	08013138 	.word	0x08013138
 8001fe4:	08013150 	.word	0x08013150
 8001fe8:	0801316c 	.word	0x0801316c
 8001fec:	24000350 	.word	0x24000350
 8001ff0:	08013188 	.word	0x08013188
 8001ff4:	24000351 	.word	0x24000351
 8001ff8:	080131c0 	.word	0x080131c0
 8001ffc:	080131d8 	.word	0x080131d8
 8002000:	080131f4 	.word	0x080131f4
 8002004:	24000360 	.word	0x24000360

08002008 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b09e      	sub	sp, #120	@ 0x78
 800200c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800200e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002012:	224c      	movs	r2, #76	@ 0x4c
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f010 f960 	bl	80122dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	2220      	movs	r2, #32
 8002022:	2100      	movs	r1, #0
 8002024:	4618      	mov	r0, r3
 8002026:	f010 f959 	bl	80122dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800202a:	2002      	movs	r0, #2
 800202c:	f005 fb1c 	bl	8007668 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002030:	2300      	movs	r3, #0
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	4b56      	ldr	r3, [pc, #344]	@ (8002190 <_Z18SystemClock_Configv+0x188>)
 8002036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002038:	4a55      	ldr	r2, [pc, #340]	@ (8002190 <_Z18SystemClock_Configv+0x188>)
 800203a:	f023 0301 	bic.w	r3, r3, #1
 800203e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002040:	4b53      	ldr	r3, [pc, #332]	@ (8002190 <_Z18SystemClock_Configv+0x188>)
 8002042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	4b52      	ldr	r3, [pc, #328]	@ (8002194 <_Z18SystemClock_Configv+0x18c>)
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	4a51      	ldr	r2, [pc, #324]	@ (8002194 <_Z18SystemClock_Configv+0x18c>)
 8002050:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002054:	6193      	str	r3, [r2, #24]
 8002056:	4b4f      	ldr	r3, [pc, #316]	@ (8002194 <_Z18SystemClock_Configv+0x18c>)
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002062:	bf00      	nop
 8002064:	4b4b      	ldr	r3, [pc, #300]	@ (8002194 <_Z18SystemClock_Configv+0x18c>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800206c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002070:	bf14      	ite	ne
 8002072:	2301      	movne	r3, #1
 8002074:	2300      	moveq	r3, #0
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f3      	bne.n	8002064 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207c:	4b46      	ldr	r3, [pc, #280]	@ (8002198 <_Z18SystemClock_Configv+0x190>)
 800207e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002082:	4a45      	ldr	r2, [pc, #276]	@ (8002198 <_Z18SystemClock_Configv+0x190>)
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800208c:	4b42      	ldr	r3, [pc, #264]	@ (8002198 <_Z18SystemClock_Configv+0x190>)
 800208e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800209a:	2300      	movs	r3, #0
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	4b3d      	ldr	r3, [pc, #244]	@ (8002194 <_Z18SystemClock_Configv+0x18c>)
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	4a3c      	ldr	r2, [pc, #240]	@ (8002194 <_Z18SystemClock_Configv+0x18c>)
 80020a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020a8:	6193      	str	r3, [r2, #24]
 80020aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002194 <_Z18SystemClock_Configv+0x18c>)
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	4b36      	ldr	r3, [pc, #216]	@ (8002190 <_Z18SystemClock_Configv+0x188>)
 80020b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b8:	4a35      	ldr	r2, [pc, #212]	@ (8002190 <_Z18SystemClock_Configv+0x188>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80020c0:	4b33      	ldr	r3, [pc, #204]	@ (8002190 <_Z18SystemClock_Configv+0x188>)
 80020c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80020cc:	bf00      	nop
 80020ce:	4b31      	ldr	r3, [pc, #196]	@ (8002194 <_Z18SystemClock_Configv+0x18c>)
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020da:	bf14      	ite	ne
 80020dc:	2301      	movne	r3, #1
 80020de:	2300      	moveq	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f3      	bne.n	80020ce <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80020e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002198 <_Z18SystemClock_Configv+0x190>)
 80020e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ea:	f023 0303 	bic.w	r3, r3, #3
 80020ee:	4a2a      	ldr	r2, [pc, #168]	@ (8002198 <_Z18SystemClock_Configv+0x190>)
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020f6:	2301      	movs	r3, #1
 80020f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002100:	2302      	movs	r3, #2
 8002102:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002104:	2302      	movs	r3, #2
 8002106:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002108:	2305      	movs	r3, #5
 800210a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800210c:	23c0      	movs	r3, #192	@ 0xc0
 800210e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002110:	2302      	movs	r3, #2
 8002112:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002114:	2304      	movs	r3, #4
 8002116:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002118:	2302      	movs	r3, #2
 800211a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800211c:	2308      	movs	r3, #8
 800211e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002120:	2300      	movs	r3, #0
 8002122:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002128:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800212c:	4618      	mov	r0, r3
 800212e:	f005 fad5 	bl	80076dc <HAL_RCC_OscConfig>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	bf14      	ite	ne
 8002138:	2301      	movne	r3, #1
 800213a:	2300      	moveq	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 8002142:	f000 f977 	bl	8002434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002146:	233f      	movs	r3, #63	@ 0x3f
 8002148:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800214a:	2303      	movs	r3, #3
 800214c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002152:	2308      	movs	r3, #8
 8002154:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002156:	2340      	movs	r3, #64	@ 0x40
 8002158:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800215a:	2340      	movs	r3, #64	@ 0x40
 800215c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800215e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002164:	2340      	movs	r3, #64	@ 0x40
 8002166:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002168:	f107 030c 	add.w	r3, r7, #12
 800216c:	2104      	movs	r1, #4
 800216e:	4618      	mov	r0, r3
 8002170:	f005 ff0e 	bl	8007f90 <HAL_RCC_ClockConfig>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	bf14      	ite	ne
 800217a:	2301      	movne	r3, #1
 800217c:	2300      	moveq	r3, #0
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 8002184:	f000 f956 	bl	8002434 <Error_Handler>
  }
}
 8002188:	bf00      	nop
 800218a:	3778      	adds	r7, #120	@ 0x78
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	58000400 	.word	0x58000400
 8002194:	58024800 	.word	0x58024800
 8002198:	58024400 	.word	0x58024400

0800219c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b0b0      	sub	sp, #192	@ 0xc0
 80021a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021a2:	463b      	mov	r3, r7
 80021a4:	22c0      	movs	r2, #192	@ 0xc0
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f010 f897 	bl	80122dc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 80021ae:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80021ba:	2302      	movs	r3, #2
 80021bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80021be:	230c      	movs	r3, #12
 80021c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80021c2:	2301      	movs	r3, #1
 80021c4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 80021c6:	230a      	movs	r3, #10
 80021c8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80021ca:	2302      	movs	r3, #2
 80021cc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80021ce:	23c0      	movs	r3, #192	@ 0xc0
 80021d0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80021d2:	2320      	movs	r3, #32
 80021d4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80021da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021de:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80021e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021e4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e6:	463b      	mov	r3, r7
 80021e8:	4618      	mov	r0, r3
 80021ea:	f006 fa5d 	bl	80086a8 <HAL_RCCEx_PeriphCLKConfig>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	bf14      	ite	ne
 80021f4:	2301      	movne	r3, #1
 80021f6:	2300      	moveq	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 80021fe:	f000 f919 	bl	8002434 <Error_Handler>
  }
}
 8002202:	bf00      	nop
 8002204:	37c0      	adds	r7, #192	@ 0xc0
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002210:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002212:	4a12      	ldr	r2, [pc, #72]	@ (800225c <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 8002214:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002216:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002218:	2200      	movs	r2, #0
 800221a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 800221c:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800221e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002222:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002224:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002226:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800222a:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800222c:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800222e:	2200      	movs	r2, #0
 8002230:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002234:	2208      	movs	r2, #8
 8002236:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8002238:	4807      	ldr	r0, [pc, #28]	@ (8002258 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800223a:	f008 ff33 	bl	800b0a4 <HAL_SD_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf14      	ite	ne
 8002244:	2301      	movne	r3, #1
 8002246:	2300      	moveq	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 800224e:	4804      	ldr	r0, [pc, #16]	@ (8002260 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 8002250:	f00f ff4a 	bl	80120e8 <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	24000434 	.word	0x24000434
 800225c:	52007000 	.word	0x52007000
 8002260:	0801320c 	.word	0x0801320c

08002264 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002268:	4b2c      	ldr	r3, [pc, #176]	@ (800231c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800226a:	4a2d      	ldr	r2, [pc, #180]	@ (8002320 <_ZL19MX_USART1_UART_Initv+0xbc>)
 800226c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = PC_BAUD;
 800226e:	4b2b      	ldr	r3, [pc, #172]	@ (800231c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002270:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002274:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002276:	4b29      	ldr	r3, [pc, #164]	@ (800231c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800227c:	4b27      	ldr	r3, [pc, #156]	@ (800231c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002282:	4b26      	ldr	r3, [pc, #152]	@ (800231c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002288:	4b24      	ldr	r3, [pc, #144]	@ (800231c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800228a:	220c      	movs	r2, #12
 800228c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228e:	4b23      	ldr	r3, [pc, #140]	@ (800231c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002294:	4b21      	ldr	r3, [pc, #132]	@ (800231c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002296:	2200      	movs	r2, #0
 8002298:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800229a:	4b20      	ldr	r3, [pc, #128]	@ (800231c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800229c:	2200      	movs	r2, #0
 800229e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022a0:	4b1e      	ldr	r3, [pc, #120]	@ (800231c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022a6:	4b1d      	ldr	r3, [pc, #116]	@ (800231c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022ac:	481b      	ldr	r0, [pc, #108]	@ (800231c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80022ae:	f00a ff5e 	bl	800d16e <HAL_UART_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80022c2:	f000 f8b7 	bl	8002434 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022c6:	2100      	movs	r1, #0
 80022c8:	4814      	ldr	r0, [pc, #80]	@ (800231c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80022ca:	f00b fff0 	bl	800e2ae <HAL_UARTEx_SetTxFifoThreshold>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bf14      	ite	ne
 80022d4:	2301      	movne	r3, #1
 80022d6:	2300      	moveq	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 80022de:	f000 f8a9 	bl	8002434 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022e2:	2100      	movs	r1, #0
 80022e4:	480d      	ldr	r0, [pc, #52]	@ (800231c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80022e6:	f00c f820 	bl	800e32a <HAL_UARTEx_SetRxFifoThreshold>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf14      	ite	ne
 80022f0:	2301      	movne	r3, #1
 80022f2:	2300      	moveq	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 80022fa:	f000 f89b 	bl	8002434 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80022fe:	4807      	ldr	r0, [pc, #28]	@ (800231c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002300:	f00b ff9c 	bl	800e23c <HAL_UARTEx_DisableFifoMode>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	bf14      	ite	ne
 800230a:	2301      	movne	r3, #1
 800230c:	2300      	moveq	r3, #0
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8002314:	f000 f88e 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}
 800231c:	240004b0 	.word	0x240004b0
 8002320:	40011000 	.word	0x40011000

08002324 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	@ 0x28
 8002328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232a:	f107 0314 	add.w	r3, r7, #20
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
 8002338:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800233a:	4b26      	ldr	r3, [pc, #152]	@ (80023d4 <_ZL12MX_GPIO_Initv+0xb0>)
 800233c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002340:	4a24      	ldr	r2, [pc, #144]	@ (80023d4 <_ZL12MX_GPIO_Initv+0xb0>)
 8002342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002346:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800234a:	4b22      	ldr	r3, [pc, #136]	@ (80023d4 <_ZL12MX_GPIO_Initv+0xb0>)
 800234c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002358:	4b1e      	ldr	r3, [pc, #120]	@ (80023d4 <_ZL12MX_GPIO_Initv+0xb0>)
 800235a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800235e:	4a1d      	ldr	r2, [pc, #116]	@ (80023d4 <_ZL12MX_GPIO_Initv+0xb0>)
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002368:	4b1a      	ldr	r3, [pc, #104]	@ (80023d4 <_ZL12MX_GPIO_Initv+0xb0>)
 800236a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002376:	4b17      	ldr	r3, [pc, #92]	@ (80023d4 <_ZL12MX_GPIO_Initv+0xb0>)
 8002378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800237c:	4a15      	ldr	r2, [pc, #84]	@ (80023d4 <_ZL12MX_GPIO_Initv+0xb0>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002386:	4b13      	ldr	r3, [pc, #76]	@ (80023d4 <_ZL12MX_GPIO_Initv+0xb0>)
 8002388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002394:	4b0f      	ldr	r3, [pc, #60]	@ (80023d4 <_ZL12MX_GPIO_Initv+0xb0>)
 8002396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800239a:	4a0e      	ldr	r2, [pc, #56]	@ (80023d4 <_ZL12MX_GPIO_Initv+0xb0>)
 800239c:	f043 0308 	orr.w	r3, r3, #8
 80023a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023a4:	4b0b      	ldr	r3, [pc, #44]	@ (80023d4 <_ZL12MX_GPIO_Initv+0xb0>)
 80023a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023b2:	2310      	movs	r3, #16
 80023b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023be:	f107 0314 	add.w	r3, r7, #20
 80023c2:	4619      	mov	r1, r3
 80023c4:	4804      	ldr	r0, [pc, #16]	@ (80023d8 <_ZL12MX_GPIO_Initv+0xb4>)
 80023c6:	f004 ff9f 	bl	8007308 <HAL_GPIO_Init>

}
 80023ca:	bf00      	nop
 80023cc:	3728      	adds	r7, #40	@ 0x28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	58024400 	.word	0x58024400
 80023d8:	58020800 	.word	0x58020800

080023dc <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80023e2:	463b      	mov	r3, r7
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80023ee:	f003 fa3b 	bl	8005868 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80023f2:	2301      	movs	r3, #1
 80023f4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80023fe:	231f      	movs	r3, #31
 8002400:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002402:	2387      	movs	r3, #135	@ 0x87
 8002404:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002406:	2300      	movs	r3, #0
 8002408:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800240a:	2300      	movs	r3, #0
 800240c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800240e:	2301      	movs	r3, #1
 8002410:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002412:	2301      	movs	r3, #1
 8002414:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800241e:	463b      	mov	r3, r7
 8002420:	4618      	mov	r0, r3
 8002422:	f003 fa59 	bl	80058d8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002426:	2004      	movs	r0, #4
 8002428:	f003 fa36 	bl	8005898 <HAL_MPU_Enable>

}
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 8002438:	4803      	ldr	r0, [pc, #12]	@ (8002448 <Error_Handler+0x14>)
 800243a:	f00f fde5 	bl	8012008 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 800243e:	b672      	cpsid	i
}
 8002440:	bf00      	nop

  __disable_irq();
  while (1)
 8002442:	bf00      	nop
 8002444:	e7fd      	b.n	8002442 <Error_Handler+0xe>
 8002446:	bf00      	nop
 8002448:	0801321c 	.word	0x0801321c

0800244c <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>:
 public:
  explicit not_null(T ptr) : _ptr(ptr) {
    ARDUINOJSON_ASSERT(ptr != NULL);
  }

  T get() const {
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_ptr != NULL);
    return _ptr;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
  }
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>:
  T* allocRight() {
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
 800246c:	2110      	movs	r1, #16
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe fc75 	bl	8000d5e <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>
 8002474:	4603      	mov	r3, r0
  }
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>:
 private:
  T _ptr;
};

template <typename T>
not_null<T> make_not_null(T ptr) {
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  ARDUINOJSON_ASSERT(ptr != NULL);
  return not_null<T>(ptr);
 8002486:	f107 030c 	add.w	r3, r7, #12
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4618      	mov	r0, r3
 800248e:	f000 f891 	bl	80025b4 <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>
 8002492:	68fb      	ldr	r3, [r7, #12]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>:
  VariantRefBase(TData *data) : _data(data) {}
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <_ZN19ArduinoJson6101_11012ArrayRefBaseINS_14CollectionDataEEC1EPS1_>:
  ArrayRefBase(TData* data) : _data(data) {}
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>:
  ObjectRefBase(TData* data) : _data(data) {}
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>:
  }
  return 0;
}

template <typename TAdaptedString>
inline VariantData* CollectionData::get(TAdaptedString key) const {
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = getSlot(key);
 8002500:	6839      	ldr	r1, [r7, #0]
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f865 	bl	80025d2 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_>
 8002508:	60f8      	str	r0, [r7, #12]
  return slot ? slot->data() : 0;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d004      	beq.n	800251a <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_+0x24>
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f7fe fb0d 	bl	8000b30 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 8002516:	4603      	mov	r3, r0
 8002518:	e000      	b.n	800251c <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_+0x26>
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>:
};

template <typename TAllocator>
class BasicJsonDocument : AllocatorOwner<TAllocator>, public JsonDocument {
 public:
  explicit BasicJsonDocument(size_t capa, TAllocator allocator = TAllocator())
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b08b      	sub	sp, #44	@ 0x2c
 8002528:	af02      	add	r7, sp, #8
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	713a      	strb	r2, [r7, #4]
      : AllocatorOwner<TAllocator>(allocator), JsonDocument(allocPool(capa)) {}
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4621      	mov	r1, r4
 8002534:	4618      	mov	r0, r3
 8002536:	f000 f888 	bl	800264a <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f103 0408 	add.w	r4, r3, #8
 8002540:	f107 0310 	add.w	r3, r7, #16
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	68f9      	ldr	r1, [r7, #12]
 8002548:	4618      	mov	r0, r3
 800254a:	f000 f865 	bl	8002618 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	f107 0310 	add.w	r3, r7, #16
 8002556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002558:	4620      	mov	r0, r4
 800255a:	f7fe fe11 	bl	8001180 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4618      	mov	r0, r3
 8002562:	3724      	adds	r7, #36	@ 0x24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd90      	pop	{r4, r7, pc}

08002568 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
   *  @return  New string with @a __lhs followed by @a __rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	4613      	mov	r3, r2
 8002574:	71fb      	strb	r3, [r7, #7]
    {
      typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
      typedef typename __string_type::size_type		__size_type;
      __string_type __str(__lhs);
 8002576:	68b9      	ldr	r1, [r7, #8]
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f00f fba4 	bl	8011cc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	461a      	mov	r2, r3
 8002582:	2101      	movs	r1, #1
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f00f fb77 	bl	8011c78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 800258a:	bf00      	nop
    }
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>:
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
}

template <typename TInput>
DeserializationError deserializeJson(
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	713a      	strb	r2, [r7, #4]
    JsonDocument &doc, TInput *input,
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
 80025a0:	793a      	ldrb	r2, [r7, #4]
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 f85c 	bl	8002662 <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>
 80025aa:	4603      	mov	r3, r0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>:
  explicit not_null(T ptr) : _ptr(ptr) {
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	601a      	str	r2, [r3, #0]
  }
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_>:
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b084      	sub	sp, #16
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = _head;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60fb      	str	r3, [r7, #12]
  while (slot) {
 80025e2:	e00f      	b.n	8002604 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x32>
    if (key.equals(slot->key())) break;
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f7fe faee 	bl	8000bc6 <_ZNK19ArduinoJson6101_11011VariantSlot3keyEv>
 80025ea:	4602      	mov	r2, r0
 80025ec:	463b      	mov	r3, r7
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fbeb 	bl	8000dcc <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d107      	bne.n	800260c <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x3a>
    slot = slot->next();
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7fe faa2 	bl	8000b46 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>
 8002602:	60f8      	str	r0, [r7, #12]
  while (slot) {
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1ec      	bne.n	80025e4 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x12>
 800260a:	e000      	b.n	800260e <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x3c>
    if (key.equals(slot->key())) break;
 800260c:	bf00      	nop
  return slot;
 800260e:	68fb      	ldr	r3, [r7, #12]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>:
    set(src);
    return *this;
  }

 private:
  MemoryPool allocPool(size_t requiredSize) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
    size_t capa = addPadding(requiredSize);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7fe faed 	bl	8000c04 <_ZN19ArduinoJson6101_11010addPaddingEj>
 800262a:	6178      	str	r0, [r7, #20]
    return MemoryPool(reinterpret_cast<char*>(this->allocate(capa)), capa);
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	6979      	ldr	r1, [r7, #20]
 8002630:	4618      	mov	r0, r3
 8002632:	f000 f874 	bl	800271e <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>
 8002636:	4603      	mov	r3, r0
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	4619      	mov	r1, r3
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f7fe faf1 	bl	8000c24 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>
  }
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>:
  AllocatorOwner(TAllocator allocator) : _allocator(allocator) {}
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	7039      	strb	r1, [r7, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>:
//
// deserialize(JsonDocument&, char*);
// deserialize(JsonDocument&, const char*);
// deserialize(JsonDocument&, const __FlashStringHelper*);
template <template <typename, typename> class TDeserializer, typename TChar>
DeserializationError deserialize(JsonDocument &doc, TChar *input,
 8002662:	b5b0      	push	{r4, r5, r7, lr}
 8002664:	b08a      	sub	sp, #40	@ 0x28
 8002666:	af02      	add	r7, sp, #8
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	713a      	strb	r2, [r7, #4]
                                 NestingLimit nestingLimit) {
  doc.clear();
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f7fe fd5e 	bl	8001130 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>
  return makeDeserializer<TDeserializer>(
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f7fe fd6c 	bl	8001152 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 800267a:	4604      	mov	r4, r0
 800267c:	68b8      	ldr	r0, [r7, #8]
 800267e:	f000 f85d 	bl	800273c <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>
 8002682:	4605      	mov	r5, r0
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f7fe fd64 	bl	8001152 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 800268a:	4603      	mov	r3, r0
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f863 	bl	800275a <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>
 8002694:	4602      	mov	r2, r0
 8002696:	793b      	ldrb	r3, [r7, #4]
 8002698:	f107 0010 	add.w	r0, r7, #16
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	4613      	mov	r3, r2
 80026a0:	462a      	mov	r2, r5
 80026a2:	4621      	mov	r1, r4
 80026a4:	f000 f868 	bl	8002778 <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), nestingLimit.value)
      .parse(doc.data());
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f7fe fd5d 	bl	8001168 <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>
 80026ae:	4602      	mov	r2, r0
 80026b0:	f107 0310 	add.w	r3, r7, #16
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f871 	bl	800279e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 80026bc:	4603      	mov	r3, r0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3720      	adds	r7, #32
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bdb0      	pop	{r4, r5, r7, pc}

080026c6 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRNS_12JsonDocumentEPKcEEE4implEv>:
  }

 private:
  const TImpl *impl() const {
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 80026ce:	687b      	ldr	r3, [r7, #4]
  }
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <_ZNK19ArduinoJson6101_11012VariantCastsINS_10VariantRefEE4implEv>:
  const TImpl *impl() const {
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 80026e4:	687b      	ldr	r3, [r7, #4]
  }
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>:
  // createNestedObject(const __FlashStringHelper*) const
  template <typename TChar>
  ObjectRef createNestedObject(TChar *key) const;

 private:
  const TObject *impl() const {
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
    return static_cast<const TObject *>(this);
 80026fa:	687b      	ldr	r3, [r7, #4]
  }
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>:
  const TImpl *impl() const {
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 8002710:	687b      	ldr	r3, [r7, #4]
  }
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>:
  void* allocate(size_t n) {
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
    return _allocator.allocate(n);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6839      	ldr	r1, [r7, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7fe fd44 	bl	80011ba <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>
 8002732:	4603      	mov	r3, r0
  }
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>:
    return _ptr == _end;
  }
};

template <typename TChar>
inline UnsafeCharPointerReader makeReader(TChar* input) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  return UnsafeCharPointerReader(reinterpret_cast<const char*>(input));
 8002744:	f107 030c 	add.w	r3, r7, #12
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe fe40 	bl	80013d0 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>
 8002750:	68fb      	ldr	r3, [r7, #12]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>:
                                                       TInput& input) {
  return StringStorage<TInput>::create(pool, input);
}

template <typename TChar>
typename StringStorage<TChar*>::type makeStringStorage(MemoryPool& pool,
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
                                                       TChar* input) {
  return StringStorage<TChar*>::create(pool, input);
 8002764:	463b      	mov	r3, r7
 8002766:	4619      	mov	r1, r3
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f863 	bl	8002834 <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>
 800276e:	4603      	mov	r3, r0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>:
TDeserializer<TReader, TWriter> makeDeserializer(MemoryPool &pool,
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
  return TDeserializer<TReader, TWriter>(pool, reader, writer, nestingLimit);
 8002786:	7e3b      	ldrb	r3, [r7, #24]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f85f 	bl	8002854 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>
}
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>:
  DeserializationError parse(VariantData &variant) {
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	6039      	str	r1, [r7, #0]
    DeserializationError err = skipSpacesAndComments();
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f871 	bl	8002890 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80027ae:	4603      	mov	r3, r0
 80027b0:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 80027b2:	f107 0310 	add.w	r3, r7, #16
 80027b6:	f107 020c 	add.w	r2, r7, #12
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fe53 	bl	8001468 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d106      	bne.n	80027d6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x3a>
 80027d6:	2300      	movs	r3, #0
 80027d8:	f083 0301 	eor.w	r3, r3, #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x48>
 80027e2:	7b3b      	ldrb	r3, [r7, #12]
 80027e4:	e022      	b.n	800282c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
    switch (current()) {
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f932 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b5b      	cmp	r3, #91	@ 0x5b
 80027f0:	d002      	beq.n	80027f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x5a>
 80027f2:	2b7b      	cmp	r3, #123	@ 0x7b
 80027f4:	d00a      	beq.n	800280c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x6e>
 80027f6:	e013      	b.n	8002820 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x82>
        return parseArray(variant.toArray());
 80027f8:	6838      	ldr	r0, [r7, #0]
 80027fa:	f7fe fbd0 	bl	8000f9e <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>
 80027fe:	4603      	mov	r3, r0
 8002800:	4619      	mov	r1, r3
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f94d 	bl	8002aa2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>
 8002808:	4603      	mov	r3, r0
 800280a:	e00f      	b.n	800282c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseObject(variant.toObject());
 800280c:	6838      	ldr	r0, [r7, #0]
 800280e:	f7fe fbd7 	bl	8000fc0 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>
 8002812:	4603      	mov	r3, r0
 8002814:	4619      	mov	r1, r3
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fa6a 	bl	8002cf0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>
 800281c:	4603      	mov	r3, r0
 800281e:	e005      	b.n	800282c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseValue(variant);
 8002820:	6839      	ldr	r1, [r7, #0]
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fc27 	bl	8003076 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>
 8002828:	4603      	mov	r3, r0
 800282a:	bf00      	nop
  }
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>:
  static type create(MemoryPool& pool, TInput&) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
    return type(&pool);
 800283e:	f107 030c 	add.w	r3, r7, #12
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fda4 	bl	8001392 <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>
 800284a:	68fb      	ldr	r3, [r7, #12]
  }
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>:
  JsonDeserializer(MemoryPool &pool, TReader reader,
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
      : _pool(&pool),
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	601a      	str	r2, [r3, #0]
        _reader(reader),
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	605a      	str	r2, [r3, #4]
        _stringStorage(stringStorage),
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	609a      	str	r2, [r3, #8]
        _nestingLimit(nestingLimit),
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	7e3a      	ldrb	r2, [r7, #24]
 8002878:	731a      	strb	r2, [r3, #12]
        _loaded(false) {}
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	739a      	strb	r2, [r3, #14]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4618      	mov	r0, r3
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>:
  DeserializationError skipSpacesAndComments() {
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
      switch (current()) {
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f8d9 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80028a2:	f200 80c7 	bhi.w	8002a34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a4>
 80028a6:	a201      	add	r2, pc, #4	@ (adr r2, 80028ac <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1c>)
 80028a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ac:	0800296d 	.word	0x0800296d
 80028b0:	08002a35 	.word	0x08002a35
 80028b4:	08002a35 	.word	0x08002a35
 80028b8:	08002a35 	.word	0x08002a35
 80028bc:	08002a35 	.word	0x08002a35
 80028c0:	08002a35 	.word	0x08002a35
 80028c4:	08002a35 	.word	0x08002a35
 80028c8:	08002a35 	.word	0x08002a35
 80028cc:	08002a35 	.word	0x08002a35
 80028d0:	0800297d 	.word	0x0800297d
 80028d4:	0800297d 	.word	0x0800297d
 80028d8:	08002a35 	.word	0x08002a35
 80028dc:	08002a35 	.word	0x08002a35
 80028e0:	0800297d 	.word	0x0800297d
 80028e4:	08002a35 	.word	0x08002a35
 80028e8:	08002a35 	.word	0x08002a35
 80028ec:	08002a35 	.word	0x08002a35
 80028f0:	08002a35 	.word	0x08002a35
 80028f4:	08002a35 	.word	0x08002a35
 80028f8:	08002a35 	.word	0x08002a35
 80028fc:	08002a35 	.word	0x08002a35
 8002900:	08002a35 	.word	0x08002a35
 8002904:	08002a35 	.word	0x08002a35
 8002908:	08002a35 	.word	0x08002a35
 800290c:	08002a35 	.word	0x08002a35
 8002910:	08002a35 	.word	0x08002a35
 8002914:	08002a35 	.word	0x08002a35
 8002918:	08002a35 	.word	0x08002a35
 800291c:	08002a35 	.word	0x08002a35
 8002920:	08002a35 	.word	0x08002a35
 8002924:	08002a35 	.word	0x08002a35
 8002928:	08002a35 	.word	0x08002a35
 800292c:	0800297d 	.word	0x0800297d
 8002930:	08002a35 	.word	0x08002a35
 8002934:	08002a35 	.word	0x08002a35
 8002938:	08002a35 	.word	0x08002a35
 800293c:	08002a35 	.word	0x08002a35
 8002940:	08002a35 	.word	0x08002a35
 8002944:	08002a35 	.word	0x08002a35
 8002948:	08002a35 	.word	0x08002a35
 800294c:	08002a35 	.word	0x08002a35
 8002950:	08002a35 	.word	0x08002a35
 8002954:	08002a35 	.word	0x08002a35
 8002958:	08002a35 	.word	0x08002a35
 800295c:	08002a35 	.word	0x08002a35
 8002960:	08002a35 	.word	0x08002a35
 8002964:	08002a35 	.word	0x08002a35
 8002968:	08002985 	.word	0x08002985
          return DeserializationError::IncompleteInput;
 800296c:	f107 030c 	add.w	r3, r7, #12
 8002970:	2101      	movs	r1, #1
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe fd67 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002978:	7b3b      	ldrb	r3, [r7, #12]
 800297a:	e064      	b.n	8002a46 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          move();
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 fbbb 	bl	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          continue;
 8002982:	e05f      	b.n	8002a44 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          move();  // skip '/'
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 fbb7 	bl	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          switch (current()) {
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f860 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002990:	4603      	mov	r3, r0
 8002992:	2b2a      	cmp	r3, #42	@ 0x2a
 8002994:	d002      	beq.n	800299c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x10c>
 8002996:	2b2f      	cmp	r3, #47	@ 0x2f
 8002998:	d02a      	beq.n	80029f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
 800299a:	e042      	b.n	8002a22 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x192>
              move();  // skip '*'
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fbab 	bl	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              bool wasStar = false;
 80029a2:	2300      	movs	r3, #0
 80029a4:	77fb      	strb	r3, [r7, #31]
                char c = current();
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f852 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80029ac:	4603      	mov	r3, r0
 80029ae:	777b      	strb	r3, [r7, #29]
                if (c == '\0') return DeserializationError::IncompleteInput;
 80029b0:	7f7b      	ldrb	r3, [r7, #29]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d107      	bne.n	80029c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x136>
 80029b6:	f107 0310 	add.w	r3, r7, #16
 80029ba:	2101      	movs	r1, #1
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe fd42 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80029c2:	7c3b      	ldrb	r3, [r7, #16]
 80029c4:	e03f      	b.n	8002a46 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '/' && wasStar) {
 80029c6:	7f7b      	ldrb	r3, [r7, #29]
 80029c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80029ca:	d107      	bne.n	80029dc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
 80029cc:	7ffb      	ldrb	r3, [r7, #31]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d004      	beq.n	80029dc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
                  move();
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fb90 	bl	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                  break;
 80029d8:	bf00      	nop
              break;
 80029da:	e02a      	b.n	8002a32 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
                wasStar = c == '*';
 80029dc:	7f7b      	ldrb	r3, [r7, #29]
 80029de:	2b2a      	cmp	r3, #42	@ 0x2a
 80029e0:	bf0c      	ite	eq
 80029e2:	2301      	moveq	r3, #1
 80029e4:	2300      	movne	r3, #0
 80029e6:	77fb      	strb	r3, [r7, #31]
                move();
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fb85 	bl	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              for (;;) {
 80029ee:	e7da      	b.n	80029a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x116>
                move();
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 fb81 	bl	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                char c = current();
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f82a 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80029fc:	4603      	mov	r3, r0
 80029fe:	77bb      	strb	r3, [r7, #30]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8002a00:	7fbb      	ldrb	r3, [r7, #30]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d107      	bne.n	8002a16 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x186>
 8002a06:	f107 0314 	add.w	r3, r7, #20
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe fd1a 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002a12:	7d3b      	ldrb	r3, [r7, #20]
 8002a14:	e017      	b.n	8002a46 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '\n') break;
 8002a16:	7fbb      	ldrb	r3, [r7, #30]
 8002a18:	2b0a      	cmp	r3, #10
 8002a1a:	d000      	beq.n	8002a1e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x18e>
              for (;;) {
 8002a1c:	e7e8      	b.n	80029f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
                if (c == '\n') break;
 8002a1e:	bf00      	nop
              break;
 8002a20:	e007      	b.n	8002a32 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
              return DeserializationError::InvalidInput;
 8002a22:	f107 0318 	add.w	r3, r7, #24
 8002a26:	2102      	movs	r1, #2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe fd0c 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002a2e:	7e3b      	ldrb	r3, [r7, #24]
 8002a30:	e009      	b.n	8002a46 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          break;
 8002a32:	e007      	b.n	8002a44 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          return DeserializationError::Ok;
 8002a34:	f107 031c 	add.w	r3, r7, #28
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe fd03 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002a40:	7f3b      	ldrb	r3, [r7, #28]
 8002a42:	e000      	b.n	8002a46 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
    for (;;) {
 8002a44:	e728      	b.n	8002898 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x8>
  }
 8002a46:	4618      	mov	r0, r3
 8002a48:	3720      	adds	r7, #32
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop

08002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>:
  char current() {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
    if (!_loaded) {
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	7b9b      	ldrb	r3, [r3, #14]
 8002a5c:	f083 0301 	eor.w	r3, r3, #1
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d017      	beq.n	8002a96 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x46>
      if (_reader.ended())
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fcd6 	bl	800141c <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x2e>
        _current = 0;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	735a      	strb	r2, [r3, #13]
 8002a7c:	e008      	b.n	8002a90 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x40>
        _current = _reader.read();
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3304      	adds	r3, #4
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe fcba 	bl	80013fc <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	735a      	strb	r2, [r3, #13]
      _loaded = true;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	739a      	strb	r2, [r3, #14]
    return _current;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	7b5b      	ldrb	r3, [r3, #13]
  }
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>:
  DeserializationError parseArray(CollectionData &array) {
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b098      	sub	sp, #96	@ 0x60
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	7b1b      	ldrb	r3, [r3, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d107      	bne.n	8002ac4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22>
 8002ab4:	f107 0310 	add.w	r3, r7, #16
 8002ab8:	2105      	movs	r1, #5
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fcc3 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002ac0:	7c3b      	ldrb	r3, [r7, #16]
 8002ac2:	e111      	b.n	8002ce8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ac8:	235b      	movs	r3, #91	@ 0x5b
 8002aca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (current() != charToSkip) return false;
 8002ace:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002ad0:	f7ff ffbe 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002adc:	4293      	cmp	r3, r2
 8002ade:	bf14      	ite	ne
 8002ae0:	2301      	movne	r3, #1
 8002ae2:	2300      	moveq	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x4c>
 8002aea:	2300      	movs	r3, #0
 8002aec:	e003      	b.n	8002af6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x54>
    move();
 8002aee:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002af0:	f000 fb02 	bl	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002af4:	2301      	movs	r3, #1
    if (!eat('[')) return DeserializationError::InvalidInput;
 8002af6:	f083 0301 	eor.w	r3, r3, #1
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x6e>
 8002b00:	f107 0314 	add.w	r3, r7, #20
 8002b04:	2102      	movs	r1, #2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe fc9d 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002b0c:	7d3b      	ldrb	r3, [r7, #20]
 8002b0e:	e0eb      	b.n	8002ce8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
    DeserializationError err = skipSpacesAndComments();
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff febd 	bl	8002890 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002b16:	4603      	mov	r3, r0
 8002b18:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8002b1a:	f107 0318 	add.w	r3, r7, #24
 8002b1e:	f107 020c 	add.w	r2, r7, #12
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fe fc9f 	bl	8001468 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d106      	bne.n	8002b3e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9e>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f083 0301 	eor.w	r3, r3, #1
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xac>
 8002b4a:	7b3b      	ldrb	r3, [r7, #12]
 8002b4c:	e0cc      	b.n	8002ce8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b52:	235d      	movs	r3, #93	@ 0x5d
 8002b54:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (current() != charToSkip) return false;
 8002b58:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002b5a:	f7ff ff79 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	461a      	mov	r2, r3
 8002b62:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002b66:	4293      	cmp	r3, r2
 8002b68:	bf14      	ite	ne
 8002b6a:	2301      	movne	r3, #1
 8002b6c:	2300      	moveq	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xd6>
 8002b74:	2300      	movs	r3, #0
 8002b76:	e003      	b.n	8002b80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xde>
    move();
 8002b78:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002b7a:	f000 fabd 	bl	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002b7e:	2301      	movs	r3, #1
    if (eat(']')) return DeserializationError::Ok;
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 8002b84:	f107 0320 	add.w	r3, r7, #32
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe fc5b 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002b90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b94:	e0a8      	b.n	8002ce8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      VariantData *value = array.add(_pool);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	6838      	ldr	r0, [r7, #0]
 8002b9e:	f7fe fb4f 	bl	8001240 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>
 8002ba2:	65f8      	str	r0, [r7, #92]	@ 0x5c
      if (!value) return DeserializationError::NoMemory;
 8002ba4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d108      	bne.n	8002bbc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x11a>
 8002baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bae:	2103      	movs	r1, #3
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe fc48 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002bb6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002bba:	e095      	b.n	8002ce8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      _nestingLimit--;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	7b1b      	ldrb	r3, [r3, #12]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	731a      	strb	r2, [r3, #12]
      err = parse(*value);
 8002bc8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff fde7 	bl	800279e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	7b1b      	ldrb	r3, [r3, #12]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 8002be0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002be4:	f107 020c 	add.w	r2, r7, #12
 8002be8:	4611      	mov	r1, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe fc3c 	bl	8001468 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 8002bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x164>
 8002c04:	2300      	movs	r3, #0
 8002c06:	f083 0301 	eor.w	r3, r3, #1
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x172>
 8002c10:	7b3b      	ldrb	r3, [r7, #12]
 8002c12:	e069      	b.n	8002ce8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      err = skipSpacesAndComments();
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff fe3b 	bl	8002890 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8002c1e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c22:	f107 020c 	add.w	r2, r7, #12
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fe fc1d 	bl	8001468 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d106      	bne.n	8002c42 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 8002c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a2>
 8002c42:	2300      	movs	r3, #0
 8002c44:	f083 0301 	eor.w	r3, r3, #1
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1b0>
 8002c4e:	7b3b      	ldrb	r3, [r7, #12]
 8002c50:	e04a      	b.n	8002ce8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c56:	235d      	movs	r3, #93	@ 0x5d
 8002c58:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (current() != charToSkip) return false;
 8002c5c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002c5e:	f7ff fef7 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002c62:	4603      	mov	r3, r0
 8002c64:	461a      	mov	r2, r3
 8002c66:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	bf14      	ite	ne
 8002c6e:	2301      	movne	r3, #1
 8002c70:	2300      	moveq	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1da>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e003      	b.n	8002c84 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1e2>
    move();
 8002c7c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002c7e:	f000 fa3b 	bl	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002c82:	2301      	movs	r3, #1
      if (eat(']')) return DeserializationError::Ok;
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d008      	beq.n	8002c9a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1f8>
 8002c88:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fbd9 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002c94:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002c98:	e026      	b.n	8002ce8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c9e:	232c      	movs	r3, #44	@ 0x2c
 8002ca0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (current() != charToSkip) return false;
 8002ca4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002ca6:	f7ff fed3 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002caa:	4603      	mov	r3, r0
 8002cac:	461a      	mov	r2, r3
 8002cae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	bf14      	ite	ne
 8002cb6:	2301      	movne	r3, #1
 8002cb8:	2300      	moveq	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x222>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e003      	b.n	8002ccc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22a>
    move();
 8002cc4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002cc6:	f000 fa17 	bl	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002cca:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 8002ccc:	f083 0301 	eor.w	r3, r3, #1
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f43f af5f 	beq.w	8002b96 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 8002cd8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002cdc:	2102      	movs	r1, #2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fbb1 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002ce4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
  }
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3760      	adds	r7, #96	@ 0x60
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>:
  DeserializationError parseObject(CollectionData &object) {
 8002cf0:	b590      	push	{r4, r7, lr}
 8002cf2:	b0a3      	sub	sp, #140	@ 0x8c
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7b1b      	ldrb	r3, [r3, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d107      	bne.n	8002d12 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x22>
 8002d02:	f107 0310 	add.w	r3, r7, #16
 8002d06:	2105      	movs	r1, #5
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fe fb9c 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002d0e:	7c3b      	ldrb	r3, [r7, #16]
 8002d10:	e1ad      	b.n	800306e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d18:	237b      	movs	r3, #123	@ 0x7b
 8002d1a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (current() != charToSkip) return false;
 8002d1e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002d22:	f7ff fe95 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002d26:	4603      	mov	r3, r0
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	bf14      	ite	ne
 8002d32:	2301      	movne	r3, #1
 8002d34:	2300      	moveq	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x50>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e004      	b.n	8002d4a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x5a>
    move();
 8002d40:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002d44:	f000 f9d8 	bl	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002d48:	2301      	movs	r3, #1
    if (!eat('{')) return DeserializationError::InvalidInput;
 8002d4a:	f083 0301 	eor.w	r3, r3, #1
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d007      	beq.n	8002d64 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x74>
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	2102      	movs	r1, #2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe fb73 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002d60:	7d3b      	ldrb	r3, [r7, #20]
 8002d62:	e184      	b.n	800306e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
    DeserializationError err = skipSpacesAndComments();
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff fd93 	bl	8002890 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8002d6e:	f107 0318 	add.w	r3, r7, #24
 8002d72:	f107 020c 	add.w	r2, r7, #12
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe fb75 	bl	8001468 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d106      	bne.n	8002d92 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa4>
 8002d92:	2300      	movs	r3, #0
 8002d94:	f083 0301 	eor.w	r3, r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xb2>
 8002d9e:	7b3b      	ldrb	r3, [r7, #12]
 8002da0:	e165      	b.n	800306e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002da6:	237d      	movs	r3, #125	@ 0x7d
 8002da8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (current() != charToSkip) return false;
 8002dac:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002dae:	f7ff fe4f 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002db2:	4603      	mov	r3, r0
 8002db4:	461a      	mov	r2, r3
 8002db6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	bf14      	ite	ne
 8002dbe:	2301      	movne	r3, #1
 8002dc0:	2300      	moveq	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xdc>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e003      	b.n	8002dd4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xe4>
    move();
 8002dcc:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002dce:	f000 f993 	bl	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002dd2:	2301      	movs	r3, #1
    if (eat('}')) return DeserializationError::Ok;
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 8002dd8:	f107 0320 	add.w	r3, r7, #32
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe fb31 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002de4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002de8:	e141      	b.n	800306e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      VariantSlot *slot = object.addSlot(_pool);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4619      	mov	r1, r3
 8002df0:	6838      	ldr	r0, [r7, #0]
 8002df2:	f7fe f9fb 	bl	80011ec <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 8002df6:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
      if (!slot) return DeserializationError::NoMemory;
 8002dfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d108      	bne.n	8002e14 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x124>
 8002e02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e06:	2103      	movs	r1, #3
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe fb1c 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002e0e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002e12:	e12c      	b.n	800306e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = parseKey(key);
 8002e14:	f107 0308 	add.w	r3, r7, #8
 8002e18:	4619      	mov	r1, r3
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f979 	bl	8003112 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>
 8002e20:	4603      	mov	r3, r0
 8002e22:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8002e24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e28:	f107 020c 	add.w	r2, r7, #12
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fb1a 	bl	8001468 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 8002e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x15a>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f083 0301 	eor.w	r3, r3, #1
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x168>
 8002e54:	7b3b      	ldrb	r3, [r7, #12]
 8002e56:	e10a      	b.n	800306e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      slot->setOwnedKey(make_not_null(key));
 8002e58:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fb0d 	bl	800247e <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4619      	mov	r1, r3
 8002e68:	4620      	mov	r0, r4
 8002e6a:	f7fd fe95 	bl	8000b98 <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>
      err = skipSpacesAndComments();
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff fd0e 	bl	8002890 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002e74:	4603      	mov	r3, r0
 8002e76:	733b      	strb	r3, [r7, #12]
      if (err) return err;  // Colon
 8002e78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e7c:	f107 020c 	add.w	r2, r7, #12
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe faf0 	bl	8001468 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 8002e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ae>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f083 0301 	eor.w	r3, r3, #1
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1bc>
 8002ea8:	7b3b      	ldrb	r3, [r7, #12]
 8002eaa:	e0e0      	b.n	800306e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	673b      	str	r3, [r7, #112]	@ 0x70
 8002eb0:	233a      	movs	r3, #58	@ 0x3a
 8002eb2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (current() != charToSkip) return false;
 8002eb6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002eb8:	f7ff fdca 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	bf14      	ite	ne
 8002ec8:	2301      	movne	r3, #1
 8002eca:	2300      	moveq	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1e6>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e003      	b.n	8002ede <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ee>
    move();
 8002ed6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002ed8:	f000 f90e 	bl	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002edc:	2301      	movs	r3, #1
      if (!eat(':')) return DeserializationError::InvalidInput;
 8002ede:	f083 0301 	eor.w	r3, r3, #1
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x20a>
 8002ee8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002eec:	2102      	movs	r1, #2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe faa9 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002ef4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002ef8:	e0b9      	b.n	800306e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      _nestingLimit--;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	7b1b      	ldrb	r3, [r3, #12]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	731a      	strb	r2, [r3, #12]
      err = parse(*slot->data());
 8002f06:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002f0a:	f7fd fe11 	bl	8000b30 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4619      	mov	r1, r3
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff fc43 	bl	800279e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	7b1b      	ldrb	r3, [r3, #12]
 8002f20:	3301      	adds	r3, #1
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 8002f28:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002f2c:	f107 020c 	add.w	r2, r7, #12
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe fa98 	bl	8001468 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 8002f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25e>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f083 0301 	eor.w	r3, r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x26c>
 8002f58:	7b3b      	ldrb	r3, [r7, #12]
 8002f5a:	e088      	b.n	800306e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff fc97 	bl	8002890 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002f62:	4603      	mov	r3, r0
 8002f64:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8002f66:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002f6a:	f107 020c 	add.w	r2, r7, #12
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fe fa79 	bl	8001468 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002f76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d106      	bne.n	8002f8a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 8002f7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29c>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f083 0301 	eor.w	r3, r3, #1
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2aa>
 8002f96:	7b3b      	ldrb	r3, [r7, #12]
 8002f98:	e069      	b.n	800306e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f9e:	237d      	movs	r3, #125	@ 0x7d
 8002fa0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (current() != charToSkip) return false;
 8002fa4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002fa6:	f7ff fd53 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002faa:	4603      	mov	r3, r0
 8002fac:	461a      	mov	r2, r3
 8002fae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	bf14      	ite	ne
 8002fb6:	2301      	movne	r3, #1
 8002fb8:	2300      	moveq	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2d4>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	e003      	b.n	8002fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2dc>
    move();
 8002fc4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002fc6:	f000 f897 	bl	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002fca:	2301      	movs	r3, #1
      if (eat('}')) return DeserializationError::Ok;
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2f2>
 8002fd0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fa35 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002fdc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002fe0:	e045      	b.n	800306e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fe6:	232c      	movs	r3, #44	@ 0x2c
 8002fe8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (current() != charToSkip) return false;
 8002fec:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002fee:	f7ff fd2f 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	bf14      	ite	ne
 8002ffe:	2301      	movne	r3, #1
 8003000:	2300      	moveq	r3, #0
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x31c>
 8003008:	2300      	movs	r3, #0
 800300a:	e003      	b.n	8003014 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x324>
    move();
 800300c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800300e:	f000 f873 	bl	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003012:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 8003014:	f083 0301 	eor.w	r3, r3, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x340>
 800301e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003022:	2102      	movs	r1, #2
 8003024:	4618      	mov	r0, r3
 8003026:	f7fe fa0e 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800302a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800302e:	e01e      	b.n	800306e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff fc2d 	bl	8002890 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8003036:	4603      	mov	r3, r0
 8003038:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 800303a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800303e:	f107 020c 	add.w	r2, r7, #12
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe fa0f 	bl	8001468 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800304a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800304c:	2b00      	cmp	r3, #0
 800304e:	d106      	bne.n	800305e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 8003050:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x370>
 800305e:	2300      	movs	r3, #0
 8003060:	f083 0301 	eor.w	r3, r3, #1
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	f43f aebf 	beq.w	8002dea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 800306c:	7b3b      	ldrb	r3, [r7, #12]
  }
 800306e:	4618      	mov	r0, r3
 8003070:	378c      	adds	r7, #140	@ 0x8c
 8003072:	46bd      	mov	sp, r7
 8003074:	bd90      	pop	{r4, r7, pc}

08003076 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>:
  DeserializationError parseValue(VariantData &variant) {
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff fce5 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003086:	4603      	mov	r3, r0
 8003088:	4618      	mov	r0, r3
 800308a:	f000 f861 	bl	8003150 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x2a>
      return parseStringValue(variant);
 8003094:	6839      	ldr	r1, [r7, #0]
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f86e 	bl	8003178 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>
 800309c:	4603      	mov	r3, r0
 800309e:	e005      	b.n	80030ac <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x36>
      return parseNumericValue(variant);
 80030a0:	6839      	ldr	r1, [r7, #0]
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f8a3 	bl	80031ee <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>
 80030a8:	4603      	mov	r3, r0
 80030aa:	bf00      	nop
  }
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>:

template <typename T>
inline typename enable_if<is_same<T, const char*>::value ||
                              is_same<T, char*>::value,
                          const char*>::type
variantAs(const VariantData* _data) {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  return _data != 0 ? _data->asString() : 0;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d004      	beq.n	80030cc <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE+0x18>
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fe f8f2 	bl	80012ac <_ZNK19ArduinoJson6101_11011VariantData8asStringEv>
 80030c8:	4603      	mov	r3, r0
 80030ca:	e000      	b.n	80030ce <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE+0x1a>
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>:
inline typename enable_if<is_integral<T>::value, T>::type variantAs(
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  return _data != 0 ? _data->asIntegral<T>() : T(0);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d004      	beq.n	80030ee <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x18>
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f96d 	bl	80033c4 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v>
 80030ea:	4603      	mov	r3, r0
 80030ec:	e000      	b.n	80030f0 <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x1a>
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>:
  void move() {
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
    _loaded = false;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	739a      	strb	r2, [r3, #14]
  }
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>:
  DeserializationError parseKey(const char *&key) {
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff fc97 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003122:	4603      	mov	r3, r0
 8003124:	4618      	mov	r0, r3
 8003126:	f000 f813 	bl	8003150 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x2a>
      return parseQuotedString(key);
 8003130:	6839      	ldr	r1, [r7, #0]
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f988 	bl	8003448 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 8003138:	4603      	mov	r3, r0
 800313a:	e005      	b.n	8003148 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x36>
      return parseNonQuotedString(key);
 800313c:	6839      	ldr	r1, [r7, #0]
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fa1a 	bl	8003578 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>
 8003144:	4603      	mov	r3, r0
 8003146:	bf00      	nop
  }
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	2b27      	cmp	r3, #39	@ 0x27
 800315e:	d002      	beq.n	8003166 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x16>
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	2b22      	cmp	r3, #34	@ 0x22
 8003164:	d101      	bne.n	800316a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1a>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1c>
 800316a:	2300      	movs	r3, #0
  }
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>:
  DeserializationError parseStringValue(VariantData &variant) {
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
    DeserializationError err = parseQuotedString(value);
 8003182:	f107 0310 	add.w	r3, r7, #16
 8003186:	4619      	mov	r1, r3
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f95d 	bl	8003448 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 800318e:	4603      	mov	r3, r0
 8003190:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8003192:	f107 0314 	add.w	r3, r7, #20
 8003196:	f107 020c 	add.w	r2, r7, #12
 800319a:	4611      	mov	r1, r2
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe f963 	bl	8001468 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d106      	bne.n	80031b6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x40>
 80031b6:	2300      	movs	r3, #0
 80031b8:	f083 0301 	eor.w	r3, r3, #1
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x4e>
 80031c2:	7b3b      	ldrb	r3, [r7, #12]
 80031c4:	e00f      	b.n	80031e6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x6e>
    variant.setOwnedString(make_not_null(value));
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff f958 	bl	800247e <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4619      	mov	r1, r3
 80031d2:	6838      	ldr	r0, [r7, #0]
 80031d4:	f7fd fecf 	bl	8000f76 <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>
    return DeserializationError::Ok;
 80031d8:	f107 031c 	add.w	r3, r7, #28
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fe f931 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80031e4:	7f3b      	ldrb	r3, [r7, #28]
  }
 80031e6:	4618      	mov	r0, r3
 80031e8:	3720      	adds	r7, #32
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>:
  DeserializationError parseNumericValue(VariantData &result) {
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b0a0      	sub	sp, #128	@ 0x80
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    char c = current();
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff fc26 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003204:	4603      	mov	r3, r0
 8003206:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 800320a:	e013      	b.n	8003234 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x46>
      move();
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff ff73 	bl	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      buffer[n++] = c;
 8003212:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	f887 207f 	strb.w	r2, [r7, #127]	@ 0x7f
 800321c:	3380      	adds	r3, #128	@ 0x80
 800321e:	443b      	add	r3, r7
 8003220:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8003224:	f803 2c5c 	strb.w	r2, [r3, #-92]
      c = current();
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff fc11 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800322e:	4603      	mov	r3, r0
 8003230:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 8003234:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fa08 	bl	800364e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 8003244:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003248:	2b3e      	cmp	r3, #62	@ 0x3e
 800324a:	d801      	bhi.n	8003250 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x64>
 8003250:	2300      	movs	r3, #0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1da      	bne.n	800320c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1e>
    buffer[n] = 0;
 8003256:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800325a:	3380      	adds	r3, #128	@ 0x80
 800325c:	443b      	add	r3, r7
 800325e:	2200      	movs	r2, #0
 8003260:	f803 2c5c 	strb.w	r2, [r3, #-92]
    c = buffer[0];
 8003264:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003268:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    if (c == 't') {  // true
 800326c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8003270:	2b74      	cmp	r3, #116	@ 0x74
 8003272:	d114      	bne.n	800329e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xb0>
      result.setBoolean(true);
 8003274:	2101      	movs	r1, #1
 8003276:	6838      	ldr	r0, [r7, #0]
 8003278:	f7fd fe23 	bl	8000ec2 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 4 ? DeserializationError::Ok
 800327c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003280:	2b04      	cmp	r3, #4
 8003282:	bf14      	ite	ne
 8003284:	2301      	movne	r3, #1
 8003286:	2300      	moveq	r3, #0
 8003288:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 800328a:	461a      	mov	r2, r3
 800328c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe f8d7 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003298:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800329c:	e077      	b.n	800338e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'f') {  // false
 800329e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80032a2:	2b66      	cmp	r3, #102	@ 0x66
 80032a4:	d114      	bne.n	80032d0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xe2>
      result.setBoolean(false);
 80032a6:	2100      	movs	r1, #0
 80032a8:	6838      	ldr	r0, [r7, #0]
 80032aa:	f7fd fe0a 	bl	8000ec2 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 5 ? DeserializationError::Ok
 80032ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80032b2:	2b05      	cmp	r3, #5
 80032b4:	bf14      	ite	ne
 80032b6:	2301      	movne	r3, #1
 80032b8:	2300      	moveq	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 80032bc:	461a      	mov	r2, r3
 80032be:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80032c2:	4611      	mov	r1, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fe f8be 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80032ca:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80032ce:	e05e      	b.n	800338e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'n') {  // null
 80032d0:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80032d4:	2b6e      	cmp	r3, #110	@ 0x6e
 80032d6:	d110      	bne.n	80032fa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x10c>
      return n == 4 ? DeserializationError::Ok
 80032d8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80032dc:	2b04      	cmp	r3, #4
 80032de:	bf14      	ite	ne
 80032e0:	2301      	movne	r3, #1
 80032e2:	2300      	moveq	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 80032e6:	461a      	mov	r2, r3
 80032e8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80032ec:	4611      	mov	r1, r2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe f8a9 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80032f4:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80032f8:	e049      	b.n	800338e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    ParsedNumber<Float, UInt> num = parseNumber<Float, UInt>(buffer);
 80032fa:	f107 0308 	add.w	r3, r7, #8
 80032fe:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f000 f9d3 	bl	80036b0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
    switch (num.type()) {
 800330a:	f107 0308 	add.w	r3, r7, #8
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fbd4 	bl	8003abc <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>
 8003314:	4603      	mov	r3, r0
 8003316:	2b08      	cmp	r3, #8
 8003318:	d021      	beq.n	800335e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x170>
 800331a:	2b08      	cmp	r3, #8
 800331c:	dc2f      	bgt.n	800337e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
 800331e:	2b06      	cmp	r3, #6
 8003320:	d00f      	beq.n	8003342 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x154>
 8003322:	2b07      	cmp	r3, #7
 8003324:	d12b      	bne.n	800337e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
        result.setNegativeInteger(num.uintValue);
 8003326:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800332a:	6838      	ldr	r0, [r7, #0]
 800332c:	f7fd fe04 	bl	8000f38 <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>
        return DeserializationError::Ok;
 8003330:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003334:	2100      	movs	r1, #0
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe f885 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800333c:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8003340:	e025      	b.n	800338e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setPositiveInteger(num.uintValue);
 8003342:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003346:	6838      	ldr	r0, [r7, #0]
 8003348:	f7fd fde3 	bl	8000f12 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>
        return DeserializationError::Ok;
 800334c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003350:	2100      	movs	r1, #0
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe f877 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003358:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800335c:	e017      	b.n	800338e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setFloat(num.floatValue);
 800335e:	ed97 7b04 	vldr	d7, [r7, #16]
 8003362:	eeb0 0b47 	vmov.f64	d0, d7
 8003366:	6838      	ldr	r0, [r7, #0]
 8003368:	f7fd fdc0 	bl	8000eec <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>
        return DeserializationError::Ok;
 800336c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003370:	2100      	movs	r1, #0
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe f867 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003378:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800337c:	e007      	b.n	800338e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    return DeserializationError::InvalidInput;
 800337e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003382:	2102      	movs	r1, #2
 8003384:	4618      	mov	r0, r3
 8003386:	f7fe f85e 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800338a:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
  }
 800338e:	4618      	mov	r0, r3
 8003390:	3780      	adds	r7, #128	@ 0x80
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>:
  VariantData *getMember(TAdaptedString key) const {
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	6039      	str	r1, [r7, #0]
    return isObject() ? _content.asCollection.get(key) : 0;
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7fd fd7b 	bl	8000e9c <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d006      	beq.n	80033ba <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_+0x24>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6839      	ldr	r1, [r7, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff f8a0 	bl	80024f6 <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>
 80033b6:	4603      	mov	r3, r0
 80033b8:	e000      	b.n	80033bc <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_+0x26>
 80033ba:	2300      	movs	r3, #0
  }
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v>:
inline T VariantData::asIntegral() const {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  switch (type()) {
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7fd fe08 	bl	8000fe2 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>
 80033d2:	4603      	mov	r3, r0
 80033d4:	3b03      	subs	r3, #3
 80033d6:	2b05      	cmp	r3, #5
 80033d8:	d830      	bhi.n	800343c <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x78>
 80033da:	a201      	add	r2, pc, #4	@ (adr r2, 80033e0 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x1c>)
 80033dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e0:	0800341d 	.word	0x0800341d
 80033e4:	0800341d 	.word	0x0800341d
 80033e8:	080033f9 	.word	0x080033f9
 80033ec:	080033f9 	.word	0x080033f9
 80033f0:	0800340b 	.word	0x0800340b
 80033f4:	0800342b 	.word	0x0800342b
      return convertPositiveInteger<T>(_content.asInteger);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fe:	4610      	mov	r0, r2
 8003400:	4619      	mov	r1, r3
 8003402:	f000 fb7c 	bl	8003afe <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>
 8003406:	4603      	mov	r3, r0
 8003408:	e019      	b.n	800343e <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return convertNegativeInteger<T>(_content.asInteger);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003410:	4610      	mov	r0, r2
 8003412:	4619      	mov	r1, r3
 8003414:	f000 fb86 	bl	8003b24 <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>
 8003418:	4603      	mov	r3, r0
 800341a:	e010      	b.n	800343e <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return parseInteger<T>(_content.asString);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fb93 	bl	8003b4c <_ZN19ArduinoJson6101_11012parseIntegerImEET_PKc>
 8003426:	4603      	mov	r3, r0
 8003428:	e009      	b.n	800343e <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return convertFloat<T>(_content.asFloat);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	ed93 7b00 	vldr	d7, [r3]
 8003430:	eeb0 0b47 	vmov.f64	d0, d7
 8003434:	f000 fb9e 	bl	8003b74 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>
 8003438:	4603      	mov	r3, r0
 800343a:	e000      	b.n	800343e <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return 0;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop

08003448 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>:
  DeserializationError parseQuotedString(const char *&result) {
 8003448:	b580      	push	{r7, lr}
 800344a:	b08c      	sub	sp, #48	@ 0x30
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f103 0208 	add.w	r2, r3, #8
 8003458:	f107 0308 	add.w	r3, r7, #8
 800345c:	4611      	mov	r1, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd ffa6 	bl	80013b0 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    const char stopChar = current();
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff faf3 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800346a:	4603      	mov	r3, r0
 800346c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    move();
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff fe41 	bl	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      char c = current();
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff faea 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800347c:	4603      	mov	r3, r0
 800347e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      move();
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff fe38 	bl	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      if (c == stopChar) break;
 8003488:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800348c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003490:	429a      	cmp	r2, r3
 8003492:	d04f      	beq.n	8003534 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xec>
      if (c == '\0') return DeserializationError::IncompleteInput;
 8003494:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003498:	2b00      	cmp	r3, #0
 800349a:	d107      	bne.n	80034ac <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x64>
 800349c:	f107 0318 	add.w	r3, r7, #24
 80034a0:	2101      	movs	r1, #1
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd ffcf 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80034a8:	7e3b      	ldrb	r3, [r7, #24]
 80034aa:	e061      	b.n	8003570 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
      if (c == '\\') {
 80034ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034b0:	2b5c      	cmp	r3, #92	@ 0x5c
 80034b2:	d136      	bne.n	8003522 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xda>
        c = current();
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff facb 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::IncompleteInput;
 80034c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d107      	bne.n	80034d8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x90>
 80034c8:	f107 031c 	add.w	r3, r7, #28
 80034cc:	2101      	movs	r1, #1
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fd ffb9 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80034d4:	7f3b      	ldrb	r3, [r7, #28]
 80034d6:	e04b      	b.n	8003570 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        if (c == 'u') {
 80034d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034dc:	2b75      	cmp	r3, #117	@ 0x75
 80034de:	d108      	bne.n	80034f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xaa>
          return DeserializationError::NotSupported;
 80034e0:	f107 0320 	add.w	r3, r7, #32
 80034e4:	2104      	movs	r1, #4
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fd ffad 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80034ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034f0:	e03e      	b.n	8003570 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        c = EscapeSequence::unescapeChar(c);
 80034f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe f828 	bl	800154c <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::InvalidInput;
 8003502:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003506:	2b00      	cmp	r3, #0
 8003508:	d108      	bne.n	800351c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xd4>
 800350a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800350e:	2102      	movs	r1, #2
 8003510:	4618      	mov	r0, r3
 8003512:	f7fd ff98 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003516:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800351a:	e029      	b.n	8003570 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        move();
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff fdeb 	bl	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      builder.append(c);
 8003522:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003526:	f107 0308 	add.w	r3, r7, #8
 800352a:	4611      	mov	r1, r2
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd feef 	bl	8001310 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    for (;;) {
 8003532:	e7a0      	b.n	8003476 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x2e>
      if (c == stopChar) break;
 8003534:	bf00      	nop
    result = builder.complete();
 8003536:	f107 0308 	add.w	r3, r7, #8
 800353a:	4618      	mov	r0, r3
 800353c:	f7fd ff0d 	bl	800135a <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 8003540:	4602      	mov	r2, r0
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d108      	bne.n	8003560 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x118>
 800354e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003552:	2103      	movs	r1, #3
 8003554:	4618      	mov	r0, r3
 8003556:	f7fd ff76 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800355a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800355e:	e007      	b.n	8003570 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
    return DeserializationError::Ok;
 8003560:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003564:	2100      	movs	r1, #0
 8003566:	4618      	mov	r0, r3
 8003568:	f7fd ff6d 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800356c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
  }
 8003570:	4618      	mov	r0, r3
 8003572:	3730      	adds	r7, #48	@ 0x30
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>:
  DeserializationError parseNonQuotedString(const char *&result) {
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	@ 0x28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f103 0208 	add.w	r2, r3, #8
 8003588:	f107 0308 	add.w	r3, r7, #8
 800358c:	4611      	mov	r1, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f7fd ff0e 	bl	80013b0 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    char c = current();
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff fa5b 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800359a:	4603      	mov	r3, r0
 800359c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (c == '\0') return DeserializationError::IncompleteInput;
 80035a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d107      	bne.n	80035b8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x40>
 80035a8:	f107 0318 	add.w	r3, r7, #24
 80035ac:	2101      	movs	r1, #1
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fd ff49 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80035b4:	7e3b      	ldrb	r3, [r7, #24]
 80035b6:	e046      	b.n	8003646 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    if (canBeInNonQuotedString(c)) {  // no quotes
 80035b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 f846 	bl	800364e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d019      	beq.n	80035fc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x84>
        move();
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff fd95 	bl	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
        builder.append(c);
 80035ce:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80035d2:	f107 0308 	add.w	r3, r7, #8
 80035d6:	4611      	mov	r1, r2
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fd fe99 	bl	8001310 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
        c = current();
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff fa36 	bl	8002a50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      } while (canBeInNonQuotedString(c));
 80035ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 f82d 	bl	800364e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1e6      	bne.n	80035c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x50>
 80035fa:	e007      	b.n	800360c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x94>
      return DeserializationError::InvalidInput;
 80035fc:	f107 031c 	add.w	r3, r7, #28
 8003600:	2102      	movs	r1, #2
 8003602:	4618      	mov	r0, r3
 8003604:	f7fd ff1f 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003608:	7f3b      	ldrb	r3, [r7, #28]
 800360a:	e01c      	b.n	8003646 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    result = builder.complete();
 800360c:	f107 0308 	add.w	r3, r7, #8
 8003610:	4618      	mov	r0, r3
 8003612:	f7fd fea2 	bl	800135a <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 8003616:	4602      	mov	r2, r0
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d108      	bne.n	8003636 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xbe>
 8003624:	f107 0320 	add.w	r3, r7, #32
 8003628:	2103      	movs	r1, #3
 800362a:	4618      	mov	r0, r3
 800362c:	f7fd ff0b 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003630:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003634:	e007      	b.n	8003646 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    return DeserializationError::Ok;
 8003636:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f7fd ff02 	bl	8001446 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003642:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
  }
 8003646:	4618      	mov	r0, r3
 8003648:	3728      	adds	r7, #40	@ 0x28
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	4603      	mov	r3, r0
 8003656:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	2239      	movs	r2, #57	@ 0x39
 800365c:	2130      	movs	r1, #48	@ 0x30
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fab3 	bl	8003bca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8003664:	4603      	mov	r3, r0
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8003666:	2b00      	cmp	r3, #0
 8003668:	d11a      	bne.n	80036a0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	227a      	movs	r2, #122	@ 0x7a
 800366e:	215f      	movs	r1, #95	@ 0x5f
 8003670:	4618      	mov	r0, r3
 8003672:	f000 faaa 	bl	8003bca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d111      	bne.n	80036a0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	225a      	movs	r2, #90	@ 0x5a
 8003680:	2141      	movs	r1, #65	@ 0x41
 8003682:	4618      	mov	r0, r3
 8003684:	f000 faa1 	bl	8003bca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8003688:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800368a:	2b00      	cmp	r3, #0
 800368c:	d108      	bne.n	80036a0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	2b2b      	cmp	r3, #43	@ 0x2b
 8003692:	d005      	beq.n	80036a0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	2b2d      	cmp	r3, #45	@ 0x2d
 8003698:	d002      	beq.n	80036a0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	2b2e      	cmp	r3, #46	@ 0x2e
 800369e:	d101      	bne.n	80036a4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x56>
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x58>
 80036a4:	2300      	movs	r3, #0
  }
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>:

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
 80036b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b4:	b0a2      	sub	sp, #136	@ 0x88
 80036b6:	af02      	add	r7, sp, #8
 80036b8:	6478      	str	r0, [r7, #68]	@ 0x44
 80036ba:	6439      	str	r1, [r7, #64]	@ 0x40
  typedef typename traits::exponent_type exponent_t;
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 80036bc:	2300      	movs	r3, #0
 80036be:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (*s) {
 80036c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b2b      	cmp	r3, #43	@ 0x2b
 80036c8:	d008      	beq.n	80036dc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2c>
 80036ca:	2b2d      	cmp	r3, #45	@ 0x2d
 80036cc:	d10a      	bne.n	80036e4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '-':
      is_negative = true;
 80036ce:	2301      	movs	r3, #1
 80036d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 80036d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036d6:	3301      	adds	r3, #1
 80036d8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80036da:	e003      	b.n	80036e4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '+':
      s++;
 80036dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036de:	3301      	adds	r3, #1
 80036e0:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80036e2:	bf00      	nop
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
 80036e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b6e      	cmp	r3, #110	@ 0x6e
 80036ea:	d003      	beq.n	80036f4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x44>
 80036ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b4e      	cmp	r3, #78	@ 0x4e
 80036f2:	d109      	bne.n	8003708 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x58>
 80036f4:	f000 fa84 	bl	8003c00 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>
 80036f8:	eeb0 7b40 	vmov.f64	d7, d0
 80036fc:	eeb0 0b47 	vmov.f64	d0, d7
 8003700:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003702:	f000 fa8b 	bl	8003c1c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8003706:	e1d4      	b.n	8003ab2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (*s == 'i' || *s == 'I')
 8003708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b69      	cmp	r3, #105	@ 0x69
 800370e:	d003      	beq.n	8003718 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x68>
 8003710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b49      	cmp	r3, #73	@ 0x49
 8003716:	d114      	bne.n	8003742 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x92>
    return is_negative ? -traits::inf() : traits::inf();
 8003718:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800371c:	2b00      	cmp	r3, #0
 800371e:	d006      	beq.n	800372e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x7e>
 8003720:	f000 fa92 	bl	8003c48 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8003724:	eeb0 7b40 	vmov.f64	d7, d0
 8003728:	eeb1 7b47 	vneg.f64	d7, d7
 800372c:	e003      	b.n	8003736 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x86>
 800372e:	f000 fa8b 	bl	8003c48 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8003732:	eeb0 7b40 	vmov.f64	d7, d0
 8003736:	eeb0 0b47 	vmov.f64	d0, d7
 800373a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800373c:	f000 fa6e 	bl	8003c1c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8003740:	e1b7      	b.n	8003ab2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (!isdigit(*s) && *s != '.') return return_type();
 8003742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7fd fd9c 	bl	8001284 <_ZN19ArduinoJson6101_1107isdigitEc>
 800374c:	4603      	mov	r3, r0
 800374e:	f083 0301 	eor.w	r3, r3, #1
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8003758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b2e      	cmp	r3, #46	@ 0x2e
 800375e:	d001      	beq.n	8003764 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb6>
 8003764:	2300      	movs	r3, #0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xc2>
 800376a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800376c:	f000 fa7a 	bl	8003c64 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8003770:	e19f      	b.n	8003ab2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  mantissa_t mantissa = 0;
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  exponent_t exponent_offset = 0;
 800377e:	2300      	movs	r3, #0
 8003780:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  const mantissa_t maxUint = TUInt(-1);
 8003784:	f04f 32ff 	mov.w	r2, #4294967295
 8003788:	f04f 33ff 	mov.w	r3, #4294967295
 800378c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

  while (isdigit(*s)) {
 8003790:	e054      	b.n	800383c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x18c>
    uint8_t digit = uint8_t(*s - '0');
 8003792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	3b30      	subs	r3, #48	@ 0x30
 8003798:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (mantissa > maxUint / 10) break;
 800379c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80037a0:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 80037a4:	49b2      	ldr	r1, [pc, #712]	@ (8003a70 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c0>)
 80037a6:	418b      	sbcs	r3, r1
 80037a8:	d251      	bcs.n	800384e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x19e>
    mantissa *= 10;
 80037aa:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80037ae:	4622      	mov	r2, r4
 80037b0:	462b      	mov	r3, r5
 80037b2:	f04f 0000 	mov.w	r0, #0
 80037b6:	f04f 0100 	mov.w	r1, #0
 80037ba:	0099      	lsls	r1, r3, #2
 80037bc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80037c0:	0090      	lsls	r0, r2, #2
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	eb12 0804 	adds.w	r8, r2, r4
 80037ca:	eb43 0905 	adc.w	r9, r3, r5
 80037ce:	eb18 0308 	adds.w	r3, r8, r8
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	eb49 0309 	adc.w	r3, r9, r9
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80037de:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
    if (mantissa > maxUint - digit) break;
 80037e2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80037e6:	2200      	movs	r2, #0
 80037e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037ec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80037f0:	460b      	mov	r3, r1
 80037f2:	43db      	mvns	r3, r3
 80037f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80037f6:	4613      	mov	r3, r2
 80037f8:	43db      	mvns	r3, r3
 80037fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80037fc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003800:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003804:	4621      	mov	r1, r4
 8003806:	4291      	cmp	r1, r2
 8003808:	4629      	mov	r1, r5
 800380a:	eb71 0303 	sbcs.w	r3, r1, r3
 800380e:	d320      	bcc.n	8003852 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a2>
    mantissa += digit;
 8003810:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003814:	2200      	movs	r2, #0
 8003816:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003818:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800381a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800381e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8003822:	4621      	mov	r1, r4
 8003824:	1851      	adds	r1, r2, r1
 8003826:	6139      	str	r1, [r7, #16]
 8003828:	4629      	mov	r1, r5
 800382a:	414b      	adcs	r3, r1
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003832:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    s++;
 8003836:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003838:	3301      	adds	r3, #1
 800383a:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 800383c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7fd fd1f 	bl	8001284 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1a2      	bne.n	8003792 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xe2>
 800384c:	e002      	b.n	8003854 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint / 10) break;
 800384e:	bf00      	nop
 8003850:	e000      	b.n	8003854 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint - digit) break;
 8003852:	bf00      	nop
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);
 8003854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d11b      	bne.n	8003894 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1e4>
 800385c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003866:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003868:	f000 fa18 	bl	8003c9c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>
 800386c:	e121      	b.n	8003ab2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 800386e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003872:	f04f 020a 	mov.w	r2, #10
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	f7fc ff4d 	bl	8000718 <__aeabi_uldivmod>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    exponent_offset++;
 8003886:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800388a:	b29b      	uxth	r3, r3
 800388c:	3301      	adds	r3, #1
 800388e:	b29b      	uxth	r3, r3
 8003890:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  while (mantissa > traits::mantissa_max) {
 8003894:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003898:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800389c:	d2e7      	bcs.n	800386e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1be>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 800389e:	e009      	b.n	80038b4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x204>
    exponent_offset++;
 80038a0:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3301      	adds	r3, #1
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    s++;
 80038ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038b0:	3301      	adds	r3, #1
 80038b2:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 80038b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fd fce3 	bl	8001284 <_ZN19ArduinoJson6101_1107isdigitEc>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1ed      	bne.n	80038a0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f0>
  }

  if (*s == '.') {
 80038c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80038ca:	d14c      	bne.n	8003966 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2b6>
    s++;
 80038cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038ce:	3301      	adds	r3, #1
 80038d0:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 80038d2:	e040      	b.n	8003956 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a6>
      if (mantissa < traits::mantissa_max / 10) {
 80038d4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80038d8:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 80038dc:	4965      	ldr	r1, [pc, #404]	@ (8003a74 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c4>)
 80038de:	418b      	sbcs	r3, r1
 80038e0:	d236      	bcs.n	8003950 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a0>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 80038e2:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80038e6:	4622      	mov	r2, r4
 80038e8:	462b      	mov	r3, r5
 80038ea:	f04f 0000 	mov.w	r0, #0
 80038ee:	f04f 0100 	mov.w	r1, #0
 80038f2:	0099      	lsls	r1, r3, #2
 80038f4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80038f8:	0090      	lsls	r0, r2, #2
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	eb12 0a04 	adds.w	sl, r2, r4
 8003902:	eb43 0b05 	adc.w	fp, r3, r5
 8003906:	eb1a 030a 	adds.w	r3, sl, sl
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	eb4b 030b 	adc.w	r3, fp, fp
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003916:	4652      	mov	r2, sl
 8003918:	465b      	mov	r3, fp
 800391a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800391c:	7809      	ldrb	r1, [r1, #0]
 800391e:	3930      	subs	r1, #48	@ 0x30
 8003920:	b2c9      	uxtb	r1, r1
 8003922:	b2c9      	uxtb	r1, r1
 8003924:	2000      	movs	r0, #0
 8003926:	6239      	str	r1, [r7, #32]
 8003928:	6278      	str	r0, [r7, #36]	@ 0x24
 800392a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800392e:	4621      	mov	r1, r4
 8003930:	1851      	adds	r1, r2, r1
 8003932:	6039      	str	r1, [r7, #0]
 8003934:	4629      	mov	r1, r5
 8003936:	414b      	adcs	r3, r1
 8003938:	607b      	str	r3, [r7, #4]
 800393a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800393e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
        exponent_offset--;
 8003942:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29b      	uxth	r3, r3
 800394c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      }
      s++;
 8003950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003952:	3301      	adds	r3, #1
 8003954:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8003956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7fd fc92 	bl	8001284 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1b6      	bne.n	80038d4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x224>
    }
  }

  int exponent = 0;
 8003966:	2300      	movs	r3, #0
 8003968:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (*s == 'e' || *s == 'E') {
 800396a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b65      	cmp	r3, #101	@ 0x65
 8003970:	d003      	beq.n	800397a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ca>
 8003972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b45      	cmp	r3, #69	@ 0x45
 8003978:	d164      	bne.n	8003a44 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
    s++;
 800397a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800397c:	3301      	adds	r3, #1
 800397e:	643b      	str	r3, [r7, #64]	@ 0x40
    bool negative_exponent = false;
 8003980:	2300      	movs	r3, #0
 8003982:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (*s == '-') {
 8003986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b2d      	cmp	r3, #45	@ 0x2d
 800398c:	d106      	bne.n	800399c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ec>
      negative_exponent = true;
 800398e:	2301      	movs	r3, #1
 8003990:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      s++;
 8003994:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003996:	3301      	adds	r3, #1
 8003998:	643b      	str	r3, [r7, #64]	@ 0x40
 800399a:	e044      	b.n	8003a26 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
    } else if (*s == '+') {
 800399c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b2b      	cmp	r3, #43	@ 0x2b
 80039a2:	d140      	bne.n	8003a26 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      s++;
 80039a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039a6:	3301      	adds	r3, #1
 80039a8:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    while (isdigit(*s)) {
 80039aa:	e03c      	b.n	8003a26 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      exponent = exponent * 10 + (*s - '0');
 80039ac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	461a      	mov	r2, r3
 80039b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	3b30      	subs	r3, #48	@ 0x30
 80039be:	4413      	add	r3, r2
 80039c0:	66bb      	str	r3, [r7, #104]	@ 0x68
      if (exponent + exponent_offset > traits::exponent_max) {
 80039c2:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	@ 0x6e
 80039c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039c8:	4413      	add	r3, r2
 80039ca:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80039ce:	dd27      	ble.n	8003a20 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x370>
        if (negative_exponent)
 80039d0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00e      	beq.n	80039f6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x346>
          return is_negative ? -0.0f : 0.0f;
 80039d8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x336>
 80039e0:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8003a60 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b0>
 80039e4:	e001      	b.n	80039ea <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x33a>
 80039e6:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8003a68 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b8>
 80039ea:	eeb0 0b47 	vmov.f64	d0, d7
 80039ee:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80039f0:	f000 f914 	bl	8003c1c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 80039f4:	e05d      	b.n	8003ab2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
        else
          return is_negative ? -traits::inf() : traits::inf();
 80039f6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d006      	beq.n	8003a0c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x35c>
 80039fe:	f000 f923 	bl	8003c48 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8003a02:	eeb0 7b40 	vmov.f64	d7, d0
 8003a06:	eeb1 7b47 	vneg.f64	d7, d7
 8003a0a:	e003      	b.n	8003a14 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x364>
 8003a0c:	f000 f91c 	bl	8003c48 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8003a10:	eeb0 7b40 	vmov.f64	d7, d0
 8003a14:	eeb0 0b47 	vmov.f64	d0, d7
 8003a18:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003a1a:	f000 f8ff 	bl	8003c1c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8003a1e:	e048      	b.n	8003ab2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
      }
      s++;
 8003a20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a22:	3301      	adds	r3, #1
 8003a24:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8003a26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fd fc2a 	bl	8001284 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1ba      	bne.n	80039ac <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2fc>
    }
    if (negative_exponent) exponent = -exponent;
 8003a36:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
 8003a3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a40:	425b      	negs	r3, r3
 8003a42:	66bb      	str	r3, [r7, #104]	@ 0x68
  }
  exponent += exponent_offset;
 8003a44:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8003a48:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003a4a:	4413      	add	r3, r2
 8003a4c:	66bb      	str	r3, [r7, #104]	@ 0x68

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();
 8003a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d010      	beq.n	8003a78 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c8>
 8003a56:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003a58:	f000 f904 	bl	8003c64 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8003a5c:	e029      	b.n	8003ab2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
 8003a5e:	bf00      	nop
 8003a60:	00000000 	.word	0x00000000
 8003a64:	80000000 	.word	0x80000000
	...
 8003a70:	19999999 	.word	0x19999999
 8003a74:	00019999 	.word	0x00019999

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);
 8003a78:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003a7c:	f7fc fe16 	bl	80006ac <__aeabi_ul2d>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003a86:	ec43 2b10 	vmov	d0, r2, r3
 8003a8a:	f000 f928 	bl	8003cde <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>
 8003a8e:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48

  return is_negative ? -result : result;
 8003a92:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f4>
 8003a9a:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8003a9e:	eeb1 7b47 	vneg.f64	d7, d7
 8003aa2:	e001      	b.n	8003aa8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f8>
 8003aa4:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8003aa8:	eeb0 0b47 	vmov.f64	d0, d7
 8003aac:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003aae:	f000 f8b5 	bl	8003c1c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
}
 8003ab2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003ab4:	3780      	adds	r7, #128	@ 0x80
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003abc <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>:
  uint8_t type() const {
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
    return _type;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	7c1b      	ldrb	r3, [r3, #16]
  }
 8003ac8:	4618      	mov	r0, r3
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>:
  if (!lhs || !rhs) return false;
  return lhs->equalsObject(*rhs);
}

template <typename TAdaptedString>
inline VariantData *objectGet(const CollectionData *obj, TAdaptedString key) {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  if (!obj) return 0;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_+0x14>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e006      	b.n	8003af6 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_+0x22>
  return obj->get(key);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6839      	ldr	r1, [r7, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fe fd02 	bl	80024f6 <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>
 8003af2:	4603      	mov	r3, r0
 8003af4:	bf00      	nop
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>:
canStoreNegativeInteger(TIn) {
  return false;
}

template <typename TOut, typename TIn>
TOut convertPositiveInteger(TIn value) {
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	e9c7 0100 	strd	r0, r1, [r7]
  return canStorePositiveInteger<TOut>(value) ? TOut(value) : 0;
 8003b08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b0c:	f000 f937 	bl	8003d7e <_ZN19ArduinoJson6101_11023canStorePositiveIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuelestS3_stT0_EbE4typeES5_>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_+0x1c>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	e000      	b.n	8003b1c <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_+0x1e>
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>:

template <typename TOut, typename TIn>
TOut convertNegativeInteger(TIn value) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	e9c7 0100 	strd	r0, r1, [r7]
  return canStoreNegativeInteger<TOut>(value) ? TOut(~value + 1) : 0;
 8003b2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b32:	f000 f93c 	bl	8003dae <_ZN19ArduinoJson6101_11023canStoreNegativeIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueEbE4typeET0_>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_+0x1e>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	425b      	negs	r3, r3
 8003b40:	e000      	b.n	8003b44 <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_+0x20>
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <_ZN19ArduinoJson6101_11012parseIntegerImEET_PKc>:
#include "convertNumber.hpp"
#include "parseNumber.hpp"

namespace ARDUINOJSON_NAMESPACE {
template <typename T>
T parseInteger(const char *s) {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  // try to reuse the same parameters as JsonDeserializer
  typedef typename choose_largest<UInt, typename make_unsigned<T>::type>::type
      TUInt;
  return parseNumber<Float, TUInt>(s).template as<T>();
 8003b54:	f107 0308 	add.w	r3, r7, #8
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff fda8 	bl	80036b0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
 8003b60:	f107 0308 	add.w	r3, r7, #8
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 f92e 	bl	8003dc6 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v>
 8003b6a:	4603      	mov	r3, r0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3720      	adds	r7, #32
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>:
    TIn value) {
  return TOut(value);
}

template <typename TOut, typename TIn>
typename enable_if<!is_floating_point<TOut>::value, TOut>::type convertFloat(
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	ed87 0b00 	vstr	d0, [r7]
    TIn value) {
  return value >= numeric_limits<TOut>::lowest() &&
 8003b7e:	f000 f950 	bl	8003e22 <_ZN19ArduinoJson6101_11014numeric_limitsImvE6lowestEv>
 8003b82:	ee07 0a90 	vmov	s15, r0
 8003b86:	eeb8 7b67 	vcvt.f64.u32	d7, s15
                 value <= numeric_limits<TOut>::highest()
             ? TOut(value)
 8003b8a:	ed97 6b00 	vldr	d6, [r7]
 8003b8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b96:	db13      	blt.n	8003bc0 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x4c>
                 value <= numeric_limits<TOut>::highest()
 8003b98:	f000 f94b 	bl	8003e32 <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>
 8003b9c:	ee07 0a90 	vmov	s15, r0
 8003ba0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8003ba4:	ed97 6b00 	vldr	d6, [r7]
 8003ba8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb0:	d806      	bhi.n	8003bc0 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x4c>
             ? TOut(value)
 8003bb2:	ed97 7b00 	vldr	d7, [r7]
 8003bb6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003bba:	ee17 3a90 	vmov	r3, s15
 8003bbe:	e000      	b.n	8003bc2 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x4e>
 8003bc0:	2300      	movs	r3, #0
             : 0;
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	71fb      	strb	r3, [r7, #7]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	71bb      	strb	r3, [r7, #6]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 8003bdc:	79ba      	ldrb	r2, [r7, #6]
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d805      	bhi.n	8003bf0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8003be4:	79fa      	ldrb	r2, [r7, #7]
 8003be6:	797b      	ldrb	r3, [r7, #5]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d801      	bhi.n	8003bf0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x28>
 8003bf0:	2300      	movs	r3, #0
  }
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>:
        forge(0x0AFE07B2, 0x7DD78B14)   // 1e-255
    };
    return factors[index];
  }

  static T nan() {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
    return forge(0x7ff80000, 0x00000000);
 8003c04:	2100      	movs	r1, #0
 8003c06:	4804      	ldr	r0, [pc, #16]	@ (8003c18 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv+0x18>)
 8003c08:	f000 f91c 	bl	8003e44 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003c0c:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8003c10:	eeb0 0b47 	vmov.f64	d0, d7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	7ff80000 	.word	0x7ff80000

08003c1c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>:
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	ed87 0b00 	vstr	d0, [r7]
 8003c28:	68f9      	ldr	r1, [r7, #12]
 8003c2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c2e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2208      	movs	r2, #8
 8003c36:	741a      	strb	r2, [r3, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
	...

08003c48 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>:

  static T inf() {
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
    return forge(0x7ff00000, 0x00000000);
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4804      	ldr	r0, [pc, #16]	@ (8003c60 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv+0x18>)
 8003c50:	f000 f8f8 	bl	8003e44 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003c54:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8003c58:	eeb0 0b47 	vmov.f64	d0, d7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	7ff00000 	.word	0x7ff00000

08003c64 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>:
  ParsedNumber() : uintValue(0), floatValue(0), _type(VALUE_IS_NULL) {}
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	e9c1 2300 	strd	r2, r3, [r1]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	741a      	strb	r2, [r3, #16]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>:
  ParsedNumber(TUInt value, bool is_negative)
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	e9c7 2300 	strd	r2, r3, [r7]
      : uintValue(value),
 8003ca8:	68f9      	ldr	r1, [r7, #12]
 8003caa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cae:	e9c1 2300 	strd	r2, r3, [r1]
        floatValue(TFloat(value)),
 8003cb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003cb6:	f7fc fcf9 	bl	80006ac <__aeabi_ul2d>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	68f9      	ldr	r1, [r7, #12]
 8003cc0:	e9c1 2302 	strd	r2, r3, [r1, #8]
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
 8003cc4:	7e3b      	ldrb	r3, [r7, #24]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x32>
 8003cca:	2207      	movs	r2, #7
 8003ccc:	e000      	b.n	8003cd0 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x34>
 8003cce:	2206      	movs	r2, #6
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	741a      	strb	r2, [r3, #16]
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>:
  static T make_float(T m, TExponent e) {
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	ed87 0b02 	vstr	d0, [r7, #8]
 8003ce8:	6078      	str	r0, [r7, #4]
    if (e > 0) {
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	dd1d      	ble.n	8003d2c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x4e>
      for (uint8_t index = 0; e != 0; index++) {
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	75fb      	strb	r3, [r7, #23]
 8003cf4:	e016      	b.n	8003d24 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x46>
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00b      	beq.n	8003d18 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x3a>
 8003d00:	7dfb      	ldrb	r3, [r7, #23]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 f8c2 	bl	8003e8c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
 8003d08:	eeb0 6b40 	vmov.f64	d6, d0
 8003d0c:	ed97 7b02 	vldr	d7, [r7, #8]
 8003d10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003d14:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	105b      	asrs	r3, r3, #1
 8003d1c:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
 8003d20:	3301      	adds	r3, #1
 8003d22:	75fb      	strb	r3, [r7, #23]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1e5      	bne.n	8003cf6 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x18>
 8003d2a:	e01f      	b.n	8003d6c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x8e>
      e = TExponent(-e);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	425b      	negs	r3, r3
 8003d30:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8003d32:	2300      	movs	r3, #0
 8003d34:	75bb      	strb	r3, [r7, #22]
 8003d36:	e016      	b.n	8003d66 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x88>
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00b      	beq.n	8003d5a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x7c>
 8003d42:	7dbb      	ldrb	r3, [r7, #22]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 f905 	bl	8003f54 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>
 8003d4a:	eeb0 6b40 	vmov.f64	d6, d0
 8003d4e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003d52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003d56:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	105b      	asrs	r3, r3, #1
 8003d5e:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8003d60:	7dbb      	ldrb	r3, [r7, #22]
 8003d62:	3301      	adds	r3, #1
 8003d64:	75bb      	strb	r3, [r7, #22]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e5      	bne.n	8003d38 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x5a>
    return m;
 8003d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d70:	ec43 2b17 	vmov	d7, r2, r3
  }
 8003d74:	eeb0 0b47 	vmov.f64	d0, d7
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <_ZN19ArduinoJson6101_11023canStorePositiveIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuelestS3_stT0_EbE4typeES5_>:
canStorePositiveInteger(TIn value) {
 8003d7e:	b5b0      	push	{r4, r5, r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8003d88:	f000 f853 	bl	8003e32 <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2200      	movs	r2, #0
 8003d90:	461c      	mov	r4, r3
 8003d92:	4615      	mov	r5, r2
 8003d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d98:	4294      	cmp	r4, r2
 8003d9a:	eb75 0303 	sbcs.w	r3, r5, r3
 8003d9e:	bf2c      	ite	cs
 8003da0:	2301      	movcs	r3, #1
 8003da2:	2300      	movcc	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bdb0      	pop	{r4, r5, r7, pc}

08003dae <_ZN19ArduinoJson6101_11023canStoreNegativeIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueEbE4typeET0_>:
canStoreNegativeInteger(TIn) {
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	e9c7 0100 	strd	r0, r1, [r7]
  return false;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v>:
  T as() const {
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
    switch (_type) {
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	7c1b      	ldrb	r3, [r3, #16]
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d017      	beq.n	8003e06 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x40>
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	dc1e      	bgt.n	8003e18 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x52>
 8003dda:	2b06      	cmp	r3, #6
 8003ddc:	d00a      	beq.n	8003df4 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x2e>
 8003dde:	2b07      	cmp	r3, #7
 8003de0:	d11a      	bne.n	8003e18 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x52>
        return convertNegativeInteger<T>(uintValue);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	4610      	mov	r0, r2
 8003dea:	4619      	mov	r1, r3
 8003dec:	f7ff fe9a 	bl	8003b24 <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>
 8003df0:	4603      	mov	r3, r0
 8003df2:	e012      	b.n	8003e1a <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return convertPositiveInteger<T>(uintValue);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f7ff fe7e 	bl	8003afe <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>
 8003e02:	4603      	mov	r3, r0
 8003e04:	e009      	b.n	8003e1a <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return convertFloat<T>(floatValue);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	ed93 7b02 	vldr	d7, [r3, #8]
 8003e0c:	eeb0 0b47 	vmov.f64	d0, d7
 8003e10:	f7ff feb0 	bl	8003b74 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>
 8003e14:	4603      	mov	r3, r0
 8003e16:	e000      	b.n	8003e1a <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return 0;
 8003e18:	2300      	movs	r3, #0
  }
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <_ZN19ArduinoJson6101_11014numeric_limitsImvE6lowestEv>:
template <typename T, typename Enable = void>
struct numeric_limits;

template <typename T>
struct numeric_limits<T, typename enable_if<is_unsigned<T>::value>::type> {
  static T lowest() {
 8003e22:	b480      	push	{r7}
 8003e24:	af00      	add	r7, sp, #0
    return 0;
 8003e26:	2300      	movs	r3, #0
  }
 8003e28:	4618      	mov	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>:
  static T highest() {
 8003e32:	b480      	push	{r7}
 8003e34:	af00      	add	r7, sp, #0
    return T(-1);
 8003e36:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>:
  }

  // constructs a double floating point values from its binary representation
  // we use this function to workaround platforms with single precision literals
  // (for example, when -fsingle-precision-constant is passed to GCC)
  static T forge(uint32_t msb, uint32_t lsb) {
 8003e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
    return alias_cast<T>((uint64_t(msb) << 32) | lsb);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	469a      	mov	sl, r3
 8003e56:	4693      	mov	fp, r2
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	4653      	mov	r3, sl
 8003e62:	2200      	movs	r2, #0
 8003e64:	6839      	ldr	r1, [r7, #0]
 8003e66:	2000      	movs	r0, #0
 8003e68:	460c      	mov	r4, r1
 8003e6a:	4605      	mov	r5, r0
 8003e6c:	ea42 0804 	orr.w	r8, r2, r4
 8003e70:	ea43 0905 	orr.w	r9, r3, r5
 8003e74:	4640      	mov	r0, r8
 8003e76:	4649      	mov	r1, r9
 8003e78:	f000 f912 	bl	80040a0 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>
 8003e7c:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8003e80:	eeb0 0b47 	vmov.f64	d0, d7
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e8c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>:
  static T positiveBinaryPowerOfTen(int index) {
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 8003e94:	4b25      	ldr	r3, [pc, #148]	@ (8003f2c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f3bf 8f5b 	dmb	ish
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2301      	moveq	r3, #1
 8003ea6:	2300      	movne	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d031      	beq.n	8003f12 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
 8003eae:	481f      	ldr	r0, [pc, #124]	@ (8003f2c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 8003eb0:	f00d fd75 	bl	801199e <__cxa_guard_acquire>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	bf14      	ite	ne
 8003eba:	2301      	movne	r3, #1
 8003ebc:	2300      	moveq	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d026      	beq.n	8003f12 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
 8003ec4:	491a      	ldr	r1, [pc, #104]	@ (8003f30 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa4>)
 8003ec6:	481b      	ldr	r0, [pc, #108]	@ (8003f34 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa8>)
 8003ec8:	f7ff ffbc 	bl	8003e44 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003ecc:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003ed0:	4b19      	ldr	r3, [pc, #100]	@ (8003f38 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8003ed2:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
 8003ed6:	4919      	ldr	r1, [pc, #100]	@ (8003f3c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb0>)
 8003ed8:	4819      	ldr	r0, [pc, #100]	@ (8003f40 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb4>)
 8003eda:	f7ff ffb3 	bl	8003e44 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003ede:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003ee2:	4b15      	ldr	r3, [pc, #84]	@ (8003f38 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8003ee4:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x5A827748, 0xF9301D32),  // 1e128
 8003ee8:	4916      	ldr	r1, [pc, #88]	@ (8003f44 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb8>)
 8003eea:	4817      	ldr	r0, [pc, #92]	@ (8003f48 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xbc>)
 8003eec:	f7ff ffaa 	bl	8003e44 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003ef0:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003ef4:	4b10      	ldr	r3, [pc, #64]	@ (8003f38 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8003ef6:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
 8003efa:	4914      	ldr	r1, [pc, #80]	@ (8003f4c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc0>)
 8003efc:	4814      	ldr	r0, [pc, #80]	@ (8003f50 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc4>)
 8003efe:	f7ff ffa1 	bl	8003e44 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003f02:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003f06:	4b0c      	ldr	r3, [pc, #48]	@ (8003f38 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8003f08:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 8003f0c:	4807      	ldr	r0, [pc, #28]	@ (8003f2c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 8003f0e:	f00d fd52 	bl	80119b6 <__cxa_guard_release>
    return factors[index];
 8003f12:	4a09      	ldr	r2, [pc, #36]	@ (8003f38 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1e:	ec43 2b17 	vmov	d7, r2, r3
  }
 8003f22:	eeb0 0b47 	vmov.f64	d0, d7
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	24000544 	.word	0x24000544
 8003f30:	b5056e17 	.word	0xb5056e17
 8003f34:	4693b8b5 	.word	0x4693b8b5
 8003f38:	24000010 	.word	0x24000010
 8003f3c:	e93ff9f5 	.word	0xe93ff9f5
 8003f40:	4d384f03 	.word	0x4d384f03
 8003f44:	f9301d32 	.word	0xf9301d32
 8003f48:	5a827748 	.word	0x5a827748
 8003f4c:	7f73bf3c 	.word	0x7f73bf3c
 8003f50:	75154fdd 	.word	0x75154fdd

08003f54 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>:
  static T negativeBinaryPowerOfTen(int index) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 8003f5c:	4b3c      	ldr	r3, [pc, #240]	@ (8004050 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f3bf 8f5b 	dmb	ish
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	bf0c      	ite	eq
 8003f6c:	2301      	moveq	r3, #1
 8003f6e:	2300      	movne	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d05e      	beq.n	8004034 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
 8003f76:	4836      	ldr	r0, [pc, #216]	@ (8004050 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 8003f78:	f00d fd11 	bl	801199e <__cxa_guard_acquire>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	bf14      	ite	ne
 8003f82:	2301      	movne	r3, #1
 8003f84:	2300      	moveq	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d053      	beq.n	8004034 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
        forge(0x3FB99999, 0x9999999A),  // 1e-1
 8003f8c:	4931      	ldr	r1, [pc, #196]	@ (8004054 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x100>)
 8003f8e:	4832      	ldr	r0, [pc, #200]	@ (8004058 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 8003f90:	f7ff ff58 	bl	8003e44 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003f94:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003f98:	4b30      	ldr	r3, [pc, #192]	@ (800405c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003f9a:	ed83 7b00 	vstr	d7, [r3]
        forge(0x3F847AE1, 0x47AE147B),  // 1e-2
 8003f9e:	4930      	ldr	r1, [pc, #192]	@ (8004060 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x10c>)
 8003fa0:	4830      	ldr	r0, [pc, #192]	@ (8004064 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x110>)
 8003fa2:	f7ff ff4f 	bl	8003e44 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003fa6:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003faa:	4b2c      	ldr	r3, [pc, #176]	@ (800405c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003fac:	ed83 7b02 	vstr	d7, [r3, #8]
        forge(0x3F1A36E2, 0xEB1C432D),  // 1e-4
 8003fb0:	492d      	ldr	r1, [pc, #180]	@ (8004068 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x114>)
 8003fb2:	482e      	ldr	r0, [pc, #184]	@ (800406c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x118>)
 8003fb4:	f7ff ff46 	bl	8003e44 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003fb8:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003fbc:	4b27      	ldr	r3, [pc, #156]	@ (800405c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003fbe:	ed83 7b04 	vstr	d7, [r3, #16]
        forge(0x3E45798E, 0xE2308C3A),  // 1e-8
 8003fc2:	492b      	ldr	r1, [pc, #172]	@ (8004070 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x11c>)
 8003fc4:	482b      	ldr	r0, [pc, #172]	@ (8004074 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x120>)
 8003fc6:	f7ff ff3d 	bl	8003e44 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003fca:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003fce:	4b23      	ldr	r3, [pc, #140]	@ (800405c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003fd0:	ed83 7b06 	vstr	d7, [r3, #24]
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
 8003fd4:	4928      	ldr	r1, [pc, #160]	@ (8004078 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x124>)
 8003fd6:	4829      	ldr	r0, [pc, #164]	@ (800407c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x128>)
 8003fd8:	f7ff ff34 	bl	8003e44 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003fdc:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800405c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003fe2:	ed83 7b08 	vstr	d7, [r3, #32]
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
 8003fe6:	4926      	ldr	r1, [pc, #152]	@ (8004080 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x12c>)
 8003fe8:	4826      	ldr	r0, [pc, #152]	@ (8004084 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 8003fea:	f7ff ff2b 	bl	8003e44 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003fee:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800405c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003ff4:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
 8003ff8:	4923      	ldr	r1, [pc, #140]	@ (8004088 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x134>)
 8003ffa:	4824      	ldr	r0, [pc, #144]	@ (800408c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x138>)
 8003ffc:	f7ff ff22 	bl	8003e44 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004000:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004004:	4b15      	ldr	r3, [pc, #84]	@ (800405c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004006:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
 800400a:	4921      	ldr	r1, [pc, #132]	@ (8004090 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x13c>)
 800400c:	4821      	ldr	r0, [pc, #132]	@ (8004094 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x140>)
 800400e:	f7ff ff19 	bl	8003e44 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004012:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004016:	4b11      	ldr	r3, [pc, #68]	@ (800405c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004018:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
 800401c:	491e      	ldr	r1, [pc, #120]	@ (8004098 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x144>)
 800401e:	481f      	ldr	r0, [pc, #124]	@ (800409c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x148>)
 8004020:	f7ff ff10 	bl	8003e44 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004024:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004028:	4b0c      	ldr	r3, [pc, #48]	@ (800405c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800402a:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 800402e:	4808      	ldr	r0, [pc, #32]	@ (8004050 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 8004030:	f00d fcc1 	bl	80119b6 <__cxa_guard_release>
    return factors[index];
 8004034:	4a09      	ldr	r2, [pc, #36]	@ (800405c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	4413      	add	r3, r2
 800403c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004040:	ec43 2b17 	vmov	d7, r2, r3
  }
 8004044:	eeb0 0b47 	vmov.f64	d0, d7
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	24000590 	.word	0x24000590
 8004054:	9999999a 	.word	0x9999999a
 8004058:	3fb99999 	.word	0x3fb99999
 800405c:	24000548 	.word	0x24000548
 8004060:	47ae147b 	.word	0x47ae147b
 8004064:	3f847ae1 	.word	0x3f847ae1
 8004068:	eb1c432d 	.word	0xeb1c432d
 800406c:	3f1a36e2 	.word	0x3f1a36e2
 8004070:	e2308c3a 	.word	0xe2308c3a
 8004074:	3e45798e 	.word	0x3e45798e
 8004078:	97d889bc 	.word	0x97d889bc
 800407c:	3c9cd2b2 	.word	0x3c9cd2b2
 8004080:	d5a8a733 	.word	0xd5a8a733
 8004084:	3949f623 	.word	0x3949f623
 8004088:	44f4a73d 	.word	0x44f4a73d
 800408c:	32a50ffd 	.word	0x32a50ffd
 8004090:	cf8c979d 	.word	0xcf8c979d
 8004094:	255bba08 	.word	0x255bba08
 8004098:	64ac6f43 	.word	0x64ac6f43
 800409c:	0ac80628 	.word	0x0ac80628

080040a0 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	e9c7 0100 	strd	r0, r1, [r7]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 80040aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 80040b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80040ba:	eeb0 0b47 	vmov.f64	d0, d7
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80040c8:	b590      	push	{r4, r7, lr}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d12d      	bne.n	8004134 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040de:	4293      	cmp	r3, r2
 80040e0:	d128      	bne.n	8004134 <_Z41__static_initialization_and_destruction_0ii+0x6c>
std::string strJson;
 80040e2:	481d      	ldr	r0, [pc, #116]	@ (8004158 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80040e4:	f00d fcf3 	bl	8011ace <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 80040e8:	4622      	mov	r2, r4
 80040ea:	f242 7110 	movw	r1, #10000	@ 0x2710
 80040ee:	481b      	ldr	r0, [pc, #108]	@ (800415c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80040f0:	f7fe fa18 	bl	8002524 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>
  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
 80040f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004160 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80040f6:	2100      	movs	r1, #0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe f9ed 	bl	80024d8 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 80040fe:	4b18      	ldr	r3, [pc, #96]	@ (8004160 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004100:	2200      	movs	r2, #0
 8004102:	605a      	str	r2, [r3, #4]
 8004104:	4b17      	ldr	r3, [pc, #92]	@ (8004164 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f7fe f9e5 	bl	80024d8 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 800410e:	4b15      	ldr	r3, [pc, #84]	@ (8004164 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004110:	2200      	movs	r2, #0
 8004112:	605a      	str	r2, [r3, #4]
RemoraComms* comms = new RemoraComms(ptrRxData, ptrTxData, SPI1);
 8004114:	f44f 7020 	mov.w	r0, #640	@ 0x280
 8004118:	f00d fc50 	bl	80119bc <_Znwj>
 800411c:	4603      	mov	r3, r0
 800411e:	461c      	mov	r4, r3
 8004120:	4b11      	ldr	r3, [pc, #68]	@ (8004168 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004122:	6819      	ldr	r1, [r3, #0]
 8004124:	4b11      	ldr	r3, [pc, #68]	@ (800416c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	4b11      	ldr	r3, [pc, #68]	@ (8004170 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800412a:	4620      	mov	r0, r4
 800412c:	f000 fbe6 	bl	80048fc <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>
 8004130:	4b10      	ldr	r3, [pc, #64]	@ (8004174 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8004132:	601c      	str	r4, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10a      	bne.n	8004150 <_Z41__static_initialization_and_destruction_0ii+0x88>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004140:	4293      	cmp	r3, r2
 8004142:	d105      	bne.n	8004150 <_Z41__static_initialization_and_destruction_0ii+0x88>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 8004144:	4805      	ldr	r0, [pc, #20]	@ (800415c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004146:	f000 f817 	bl	8004178 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>
std::string strJson;
 800414a:	4803      	ldr	r0, [pc, #12]	@ (8004158 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800414c:	f00d fcc6 	bl	8011adc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	bd90      	pop	{r4, r7, pc}
 8004158:	240003e0 	.word	0x240003e0
 800415c:	240003f8 	.word	0x240003f8
 8004160:	24000420 	.word	0x24000420
 8004164:	24000428 	.word	0x24000428
 8004168:	24000008 	.word	0x24000008
 800416c:	2400000c 	.word	0x2400000c
 8004170:	40013000 	.word	0x40013000
 8004174:	24000430 	.word	0x24000430

08004178 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>:
  ~BasicJsonDocument() {
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
    freePool();
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f805 	bl	8004190 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>
  }
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>:
    if (requiredSize <= capacity()) return;
    freePool();
    replacePool(allocPool(addPadding(requiredSize)));
  }

  void freePool() {
 8004190:	b590      	push	{r4, r7, lr}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
    this->deallocate(memoryPool().buffer());
 8004198:	687c      	ldr	r4, [r7, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3308      	adds	r3, #8
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fc ffd7 	bl	8001152 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 80041a4:	4603      	mov	r3, r0
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fc fd63 	bl	8000c72 <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>
 80041ac:	4603      	mov	r3, r0
 80041ae:	4619      	mov	r1, r3
 80041b0:	4620      	mov	r0, r4
 80041b2:	f000 f804 	bl	80041be <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>
  }
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd90      	pop	{r4, r7, pc}

080041be <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>:
  void deallocate(void* p) {
 80041be:	b580      	push	{r7, lr}
 80041c0:	b082      	sub	sp, #8
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	6039      	str	r1, [r7, #0]
    _allocator.deallocate(p);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6839      	ldr	r1, [r7, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fd f801 	bl	80011d4 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>
  }
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 80041da:	b580      	push	{r7, lr}
 80041dc:	af00      	add	r7, sp, #0
 80041de:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80041e2:	2001      	movs	r0, #1
 80041e4:	f7ff ff70 	bl	80040c8 <_Z41__static_initialization_and_destruction_0ii>
 80041e8:	bd80      	pop	{r7, pc}

080041ea <_GLOBAL__sub_D_EXTI4_IRQHandler>:
 80041ea:	b580      	push	{r7, lr}
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80041f2:	2000      	movs	r0, #0
 80041f4:	f7ff ff68 	bl	80040c8 <_Z41__static_initialization_and_destruction_0ii>
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004202:	4b0a      	ldr	r3, [pc, #40]	@ (800422c <HAL_MspInit+0x30>)
 8004204:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004208:	4a08      	ldr	r2, [pc, #32]	@ (800422c <HAL_MspInit+0x30>)
 800420a:	f043 0302 	orr.w	r3, r3, #2
 800420e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004212:	4b06      	ldr	r3, [pc, #24]	@ (800422c <HAL_MspInit+0x30>)
 8004214:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	607b      	str	r3, [r7, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	58024400 	.word	0x58024400

08004230 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b0bc      	sub	sp, #240	@ 0xf0
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004238:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	609a      	str	r2, [r3, #8]
 8004244:	60da      	str	r2, [r3, #12]
 8004246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004248:	f107 0318 	add.w	r3, r7, #24
 800424c:	22c0      	movs	r2, #192	@ 0xc0
 800424e:	2100      	movs	r1, #0
 8004250:	4618      	mov	r0, r3
 8004252:	f00e f843 	bl	80122dc <memset>
  if(hsd->Instance==SDMMC1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a3c      	ldr	r2, [pc, #240]	@ (800434c <HAL_SD_MspInit+0x11c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d171      	bne.n	8004344 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8004260:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800426c:	2300      	movs	r3, #0
 800426e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004270:	f107 0318 	add.w	r3, r7, #24
 8004274:	4618      	mov	r0, r3
 8004276:	f004 fa17 	bl	80086a8 <HAL_RCCEx_PeriphCLKConfig>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8004280:	f7fe f8d8 	bl	8002434 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004284:	4b32      	ldr	r3, [pc, #200]	@ (8004350 <HAL_SD_MspInit+0x120>)
 8004286:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800428a:	4a31      	ldr	r2, [pc, #196]	@ (8004350 <HAL_SD_MspInit+0x120>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004290:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8004294:	4b2e      	ldr	r3, [pc, #184]	@ (8004350 <HAL_SD_MspInit+0x120>)
 8004296:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800429a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042a2:	4b2b      	ldr	r3, [pc, #172]	@ (8004350 <HAL_SD_MspInit+0x120>)
 80042a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042a8:	4a29      	ldr	r2, [pc, #164]	@ (8004350 <HAL_SD_MspInit+0x120>)
 80042aa:	f043 0304 	orr.w	r3, r3, #4
 80042ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80042b2:	4b27      	ldr	r3, [pc, #156]	@ (8004350 <HAL_SD_MspInit+0x120>)
 80042b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	613b      	str	r3, [r7, #16]
 80042be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80042c0:	4b23      	ldr	r3, [pc, #140]	@ (8004350 <HAL_SD_MspInit+0x120>)
 80042c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042c6:	4a22      	ldr	r2, [pc, #136]	@ (8004350 <HAL_SD_MspInit+0x120>)
 80042c8:	f043 0308 	orr.w	r3, r3, #8
 80042cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80042d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004350 <HAL_SD_MspInit+0x120>)
 80042d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80042de:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80042e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e6:	2302      	movs	r3, #2
 80042e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042f2:	2303      	movs	r3, #3
 80042f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80042f8:	230c      	movs	r3, #12
 80042fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042fe:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004302:	4619      	mov	r1, r3
 8004304:	4813      	ldr	r0, [pc, #76]	@ (8004354 <HAL_SD_MspInit+0x124>)
 8004306:	f002 ffff 	bl	8007308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800430a:	2304      	movs	r3, #4
 800430c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004310:	2302      	movs	r3, #2
 8004312:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004316:	2300      	movs	r3, #0
 8004318:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800431c:	2303      	movs	r3, #3
 800431e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8004322:	230c      	movs	r3, #12
 8004324:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004328:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800432c:	4619      	mov	r1, r3
 800432e:	480a      	ldr	r0, [pc, #40]	@ (8004358 <HAL_SD_MspInit+0x128>)
 8004330:	f002 ffea 	bl	8007308 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8004334:	2200      	movs	r2, #0
 8004336:	2100      	movs	r1, #0
 8004338:	2031      	movs	r0, #49	@ 0x31
 800433a:	f001 fa5c 	bl	80057f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800433e:	2031      	movs	r0, #49	@ 0x31
 8004340:	f001 fa73 	bl	800582a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8004344:	bf00      	nop
 8004346:	37f0      	adds	r7, #240	@ 0xf0
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	52007000 	.word	0x52007000
 8004350:	58024400 	.word	0x58024400
 8004354:	58020800 	.word	0x58020800
 8004358:	58020c00 	.word	0x58020c00

0800435c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b0ba      	sub	sp, #232	@ 0xe8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004364:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	609a      	str	r2, [r3, #8]
 8004370:	60da      	str	r2, [r3, #12]
 8004372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004374:	f107 0310 	add.w	r3, r7, #16
 8004378:	22c0      	movs	r2, #192	@ 0xc0
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f00d ffad 	bl	80122dc <memset>
  if(huart->Instance==USART1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a27      	ldr	r2, [pc, #156]	@ (8004424 <HAL_UART_MspInit+0xc8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d146      	bne.n	800441a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800438c:	f04f 0201 	mov.w	r2, #1
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8004398:	2300      	movs	r3, #0
 800439a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800439e:	f107 0310 	add.w	r3, r7, #16
 80043a2:	4618      	mov	r0, r3
 80043a4:	f004 f980 	bl	80086a8 <HAL_RCCEx_PeriphCLKConfig>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80043ae:	f7fe f841 	bl	8002434 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004428 <HAL_UART_MspInit+0xcc>)
 80043b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004428 <HAL_UART_MspInit+0xcc>)
 80043ba:	f043 0310 	orr.w	r3, r3, #16
 80043be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80043c2:	4b19      	ldr	r3, [pc, #100]	@ (8004428 <HAL_UART_MspInit+0xcc>)
 80043c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d0:	4b15      	ldr	r3, [pc, #84]	@ (8004428 <HAL_UART_MspInit+0xcc>)
 80043d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043d6:	4a14      	ldr	r2, [pc, #80]	@ (8004428 <HAL_UART_MspInit+0xcc>)
 80043d8:	f043 0301 	orr.w	r3, r3, #1
 80043dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80043e0:	4b11      	ldr	r3, [pc, #68]	@ (8004428 <HAL_UART_MspInit+0xcc>)
 80043e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80043ee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80043f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f6:	2302      	movs	r3, #2
 80043f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004402:	2300      	movs	r3, #0
 8004404:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004408:	2307      	movs	r3, #7
 800440a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800440e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004412:	4619      	mov	r1, r3
 8004414:	4805      	ldr	r0, [pc, #20]	@ (800442c <HAL_UART_MspInit+0xd0>)
 8004416:	f002 ff77 	bl	8007308 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800441a:	bf00      	nop
 800441c:	37e8      	adds	r7, #232	@ 0xe8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40011000 	.word	0x40011000
 8004428:	58024400 	.word	0x58024400
 800442c:	58020000 	.word	0x58020000

08004430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004434:	bf00      	nop
 8004436:	e7fd      	b.n	8004434 <NMI_Handler+0x4>

08004438 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800443c:	bf00      	nop
 800443e:	e7fd      	b.n	800443c <HardFault_Handler+0x4>

08004440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004444:	bf00      	nop
 8004446:	e7fd      	b.n	8004444 <MemManage_Handler+0x4>

08004448 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800444c:	bf00      	nop
 800444e:	e7fd      	b.n	800444c <BusFault_Handler+0x4>

08004450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004454:	bf00      	nop
 8004456:	e7fd      	b.n	8004454 <UsageFault_Handler+0x4>

08004458 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800445c:	bf00      	nop
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004466:	b480      	push	{r7}
 8004468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800446a:	bf00      	nop
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004478:	bf00      	nop
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004486:	f001 f875 	bl	8005574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800448a:	bf00      	nop
 800448c:	bd80      	pop	{r7, pc}

0800448e <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800448e:	b480      	push	{r7}
 8004490:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_spi1_tx);
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004492:	bf00      	nop
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_spi1_rx);
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80044a0:	bf00      	nop
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80044aa:	b480      	push	{r7}
 80044ac:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_IRQn 0 */
  //HAL_SPI_IRQHandler(&hspi1);
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80044ae:	bf00      	nop
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80044bc:	4802      	ldr	r0, [pc, #8]	@ (80044c8 <SDMMC1_IRQHandler+0x10>)
 80044be:	f007 f861 	bl	800b584 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80044c2:	bf00      	nop
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	24000434 	.word	0x24000434

080044cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
	return 1;
 80044d0:	2301      	movs	r3, #1
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <_kill>:

int _kill(int pid, int sig)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80044e6:	f00d ff9b 	bl	8012420 <__errno>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2216      	movs	r2, #22
 80044ee:	601a      	str	r2, [r3, #0]
	return -1;
 80044f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <_exit>:

void _exit (int status)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004504:	f04f 31ff 	mov.w	r1, #4294967295
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff ffe7 	bl	80044dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800450e:	bf00      	nop
 8004510:	e7fd      	b.n	800450e <_exit+0x12>

08004512 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b086      	sub	sp, #24
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	e00a      	b.n	800453a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004524:	f3af 8000 	nop.w
 8004528:	4601      	mov	r1, r0
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	1c5a      	adds	r2, r3, #1
 800452e:	60ba      	str	r2, [r7, #8]
 8004530:	b2ca      	uxtb	r2, r1
 8004532:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	3301      	adds	r3, #1
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	429a      	cmp	r2, r3
 8004540:	dbf0      	blt.n	8004524 <_read+0x12>
	}

return len;
 8004542:	687b      	ldr	r3, [r7, #4]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	e009      	b.n	8004572 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	60ba      	str	r2, [r7, #8]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7fd f8d6 	bl	8001718 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	3301      	adds	r3, #1
 8004570:	617b      	str	r3, [r7, #20]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	429a      	cmp	r2, r3
 8004578:	dbf1      	blt.n	800455e <_write+0x12>
	}
	return len;
 800457a:	687b      	ldr	r3, [r7, #4]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <_close>:

int _close(int file)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
	return -1;
 800458c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045ac:	605a      	str	r2, [r3, #4]
	return 0;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <_isatty>:

int _isatty(int file)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
	return 1;
 80045c4:	2301      	movs	r3, #1
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b085      	sub	sp, #20
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	607a      	str	r2, [r7, #4]
	return 0;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045f4:	4a14      	ldr	r2, [pc, #80]	@ (8004648 <_sbrk+0x5c>)
 80045f6:	4b15      	ldr	r3, [pc, #84]	@ (800464c <_sbrk+0x60>)
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004600:	4b13      	ldr	r3, [pc, #76]	@ (8004650 <_sbrk+0x64>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d102      	bne.n	800460e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004608:	4b11      	ldr	r3, [pc, #68]	@ (8004650 <_sbrk+0x64>)
 800460a:	4a12      	ldr	r2, [pc, #72]	@ (8004654 <_sbrk+0x68>)
 800460c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800460e:	4b10      	ldr	r3, [pc, #64]	@ (8004650 <_sbrk+0x64>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4413      	add	r3, r2
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	429a      	cmp	r2, r3
 800461a:	d207      	bcs.n	800462c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800461c:	f00d ff00 	bl	8012420 <__errno>
 8004620:	4603      	mov	r3, r0
 8004622:	220c      	movs	r2, #12
 8004624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004626:	f04f 33ff 	mov.w	r3, #4294967295
 800462a:	e009      	b.n	8004640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800462c:	4b08      	ldr	r3, [pc, #32]	@ (8004650 <_sbrk+0x64>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004632:	4b07      	ldr	r3, [pc, #28]	@ (8004650 <_sbrk+0x64>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4413      	add	r3, r2
 800463a:	4a05      	ldr	r2, [pc, #20]	@ (8004650 <_sbrk+0x64>)
 800463c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800463e:	68fb      	ldr	r3, [r7, #12]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	24080000 	.word	0x24080000
 800464c:	00000400 	.word	0x00000400
 8004650:	24000594 	.word	0x24000594
 8004654:	24000db0 	.word	0x24000db0

08004658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800465c:	4b37      	ldr	r3, [pc, #220]	@ (800473c <SystemInit+0xe4>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004662:	4a36      	ldr	r2, [pc, #216]	@ (800473c <SystemInit+0xe4>)
 8004664:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004668:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800466c:	4b34      	ldr	r3, [pc, #208]	@ (8004740 <SystemInit+0xe8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	2b06      	cmp	r3, #6
 8004676:	d807      	bhi.n	8004688 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004678:	4b31      	ldr	r3, [pc, #196]	@ (8004740 <SystemInit+0xe8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f023 030f 	bic.w	r3, r3, #15
 8004680:	4a2f      	ldr	r2, [pc, #188]	@ (8004740 <SystemInit+0xe8>)
 8004682:	f043 0307 	orr.w	r3, r3, #7
 8004686:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004688:	4b2e      	ldr	r3, [pc, #184]	@ (8004744 <SystemInit+0xec>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a2d      	ldr	r2, [pc, #180]	@ (8004744 <SystemInit+0xec>)
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004694:	4b2b      	ldr	r3, [pc, #172]	@ (8004744 <SystemInit+0xec>)
 8004696:	2200      	movs	r2, #0
 8004698:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800469a:	4b2a      	ldr	r3, [pc, #168]	@ (8004744 <SystemInit+0xec>)
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	4929      	ldr	r1, [pc, #164]	@ (8004744 <SystemInit+0xec>)
 80046a0:	4b29      	ldr	r3, [pc, #164]	@ (8004748 <SystemInit+0xf0>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80046a6:	4b26      	ldr	r3, [pc, #152]	@ (8004740 <SystemInit+0xe8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d007      	beq.n	80046c2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80046b2:	4b23      	ldr	r3, [pc, #140]	@ (8004740 <SystemInit+0xe8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 030f 	bic.w	r3, r3, #15
 80046ba:	4a21      	ldr	r2, [pc, #132]	@ (8004740 <SystemInit+0xe8>)
 80046bc:	f043 0307 	orr.w	r3, r3, #7
 80046c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80046c2:	4b20      	ldr	r3, [pc, #128]	@ (8004744 <SystemInit+0xec>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80046c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004744 <SystemInit+0xec>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80046ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004744 <SystemInit+0xec>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80046d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004744 <SystemInit+0xec>)
 80046d6:	4a1d      	ldr	r2, [pc, #116]	@ (800474c <SystemInit+0xf4>)
 80046d8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80046da:	4b1a      	ldr	r3, [pc, #104]	@ (8004744 <SystemInit+0xec>)
 80046dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004750 <SystemInit+0xf8>)
 80046de:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80046e0:	4b18      	ldr	r3, [pc, #96]	@ (8004744 <SystemInit+0xec>)
 80046e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004754 <SystemInit+0xfc>)
 80046e4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80046e6:	4b17      	ldr	r3, [pc, #92]	@ (8004744 <SystemInit+0xec>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80046ec:	4b15      	ldr	r3, [pc, #84]	@ (8004744 <SystemInit+0xec>)
 80046ee:	4a19      	ldr	r2, [pc, #100]	@ (8004754 <SystemInit+0xfc>)
 80046f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80046f2:	4b14      	ldr	r3, [pc, #80]	@ (8004744 <SystemInit+0xec>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80046f8:	4b12      	ldr	r3, [pc, #72]	@ (8004744 <SystemInit+0xec>)
 80046fa:	4a16      	ldr	r2, [pc, #88]	@ (8004754 <SystemInit+0xfc>)
 80046fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80046fe:	4b11      	ldr	r3, [pc, #68]	@ (8004744 <SystemInit+0xec>)
 8004700:	2200      	movs	r2, #0
 8004702:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004704:	4b0f      	ldr	r3, [pc, #60]	@ (8004744 <SystemInit+0xec>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a0e      	ldr	r2, [pc, #56]	@ (8004744 <SystemInit+0xec>)
 800470a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800470e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004710:	4b0c      	ldr	r3, [pc, #48]	@ (8004744 <SystemInit+0xec>)
 8004712:	2200      	movs	r2, #0
 8004714:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004716:	4b10      	ldr	r3, [pc, #64]	@ (8004758 <SystemInit+0x100>)
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4b10      	ldr	r3, [pc, #64]	@ (800475c <SystemInit+0x104>)
 800471c:	4013      	ands	r3, r2
 800471e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004722:	d202      	bcs.n	800472a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004724:	4b0e      	ldr	r3, [pc, #56]	@ (8004760 <SystemInit+0x108>)
 8004726:	2201      	movs	r2, #1
 8004728:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800472a:	4b0e      	ldr	r3, [pc, #56]	@ (8004764 <SystemInit+0x10c>)
 800472c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004730:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004732:	bf00      	nop
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	e000ed00 	.word	0xe000ed00
 8004740:	52002000 	.word	0x52002000
 8004744:	58024400 	.word	0x58024400
 8004748:	eaf6ed7f 	.word	0xeaf6ed7f
 800474c:	02020200 	.word	0x02020200
 8004750:	01ff0000 	.word	0x01ff0000
 8004754:	01010280 	.word	0x01010280
 8004758:	5c001000 	.word	0x5c001000
 800475c:	ffff0000 	.word	0xffff0000
 8004760:	51008108 	.word	0x51008108
 8004764:	52004000 	.word	0x52004000

08004768 <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	4a08      	ldr	r2, [pc, #32]	@ (8004794 <_ZN6ModuleC1Ev+0x2c>)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	601a      	str	r2, [r3, #0]
{
	this->counter = 0;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 8004782:	4805      	ldr	r0, [pc, #20]	@ (8004798 <_ZN6ModuleC1Ev+0x30>)
 8004784:	f00d fcb0 	bl	80120e8 <puts>
}
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	080133c8 	.word	0x080133c8
 8004798:	08013224 	.word	0x08013224

0800479c <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	4a04      	ldr	r2, [pc, #16]	@ (80047b8 <_ZN6ModuleD1Ev+0x1c>)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4618      	mov	r0, r3
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	080133c8 	.word	0x080133c8

080047bc <_ZN6ModuleD0Ev>:
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7ff ffe9 	bl	800479c <_ZN6ModuleD1Ev>
 80047ca:	2114      	movs	r1, #20
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f00d f8e4 	bl	801199a <_ZdlPvj>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4618      	mov	r0, r3
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
	++this->counter;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691a      	ldr	r2, [r3, #16]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	db08      	blt.n	800480c <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3310      	adds	r3, #16
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	4798      	blx	r3
		this->counter = 0;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	611a      	str	r2, [r3, #16]
	}

	this->update();
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3308      	adds	r3, #8
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	4798      	blx	r3
}
 8004818:	bf00      	nop
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <_ZN6Module13runModulePostEv>:


void Module::runModulePost()
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	this->updatePost();
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	330c      	adds	r3, #12
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	4798      	blx	r3
}
 8004834:	bf00      	nop
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <_ZN6Module6updateEv>:

void Module::update(){}
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <_ZN6Module9configureEv>:
void Module::configure(){}
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <_ZN6Module15handleInterruptEv>:
void Module::handleInterrupt(){}
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <_ZN15ModuleInterruptC1EiP6Module>:
#include "../interrupt/interrupt.h"
#include "moduleInterrupt.h"
#include "module.h"


ModuleInterrupt::ModuleInterrupt(int interruptNumber, Module* owner)
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fc f8aa 	bl	8000a08 <_ZN9InterruptC1Ev>
 80048b4:	4a07      	ldr	r2, [pc, #28]	@ (80048d4 <_ZN15ModuleInterruptC1EiP6Module+0x34>)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4619      	mov	r1, r3
 80048c4:	68b8      	ldr	r0, [r7, #8]
 80048c6:	f7fc f8af 	bl	8000a28 <_ZN9Interrupt8RegisterEiPS_>
}
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	080133ec 	.word	0x080133ec

080048d8 <_ZN15ModuleInterrupt11ISR_HandlerEv>:


void ModuleInterrupt::ISR_Handler(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->handleInterrupt();
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3318      	adds	r3, #24
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4610      	mov	r0, r2
 80048f0:	4798      	blx	r3
}
 80048f2:	bf00      	nop
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>:
#include "../remoraComms/RemoraComms.h"
#include <cstdio>

RemoraComms::RemoraComms(volatile rxData_t* ptrRxData, volatile txData_t* ptrTxData, SPI_TypeDef* spiType) :
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
    ptrRxData(ptrRxData),
    ptrTxData(ptrTxData),
    spiType(spiType)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4618      	mov	r0, r3
 800490e:	f7ff ff2b 	bl	8004768 <_ZN6ModuleC1Ev>
 8004912:	4a0c      	ldr	r2, [pc, #48]	@ (8004944 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x48>)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	601a      	str	r2, [r3, #0]
    ptrRxData(ptrRxData),
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	615a      	str	r2, [r3, #20]
    ptrTxData(ptrTxData),
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	619a      	str	r2, [r3, #24]
    spiType(spiType)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	61da      	str	r2, [r3, #28]
{
    this->spiHandle.Instance = this->spiType;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	69da      	ldr	r2, [r3, #28]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	629a      	str	r2, [r3, #40]	@ 0x28
    this->irq = EXTI4_IRQn;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	220a      	movs	r2, #10
 8004936:	849a      	strh	r2, [r3, #36]	@ 0x24

    // the constructor is called before any DMA and cache setup
    // don't do stuff here
}
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	080133f8 	.word	0x080133f8

08004948 <_ZN11RemoraComms4initEv>:


void RemoraComms::init()
{
 8004948:	b590      	push	{r4, r7, lr}
 800494a:	b08b      	sub	sp, #44	@ 0x2c
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004950:	f107 0314 	add.w	r3, r7, #20
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	605a      	str	r2, [r3, #4]
 800495a:	609a      	str	r2, [r3, #8]
 800495c:	60da      	str	r2, [r3, #12]
 800495e:	611a      	str	r2, [r3, #16]

    if(this->spiHandle.Instance == SPI1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004964:	4a9c      	ldr	r2, [pc, #624]	@ (8004bd8 <_ZN11RemoraComms4initEv+0x290>)
 8004966:	4293      	cmp	r3, r2
 8004968:	f040 8132 	bne.w	8004bd0 <_ZN11RemoraComms4initEv+0x288>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 800496c:	4b9b      	ldr	r3, [pc, #620]	@ (8004bdc <_ZN11RemoraComms4initEv+0x294>)
 800496e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004972:	4a9a      	ldr	r2, [pc, #616]	@ (8004bdc <_ZN11RemoraComms4initEv+0x294>)
 8004974:	f043 0304 	orr.w	r3, r3, #4
 8004978:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800497c:	4b97      	ldr	r3, [pc, #604]	@ (8004bdc <_ZN11RemoraComms4initEv+0x294>)
 800497e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 800498a:	2310      	movs	r3, #16
 800498c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800498e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004992:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004994:	2300      	movs	r3, #0
 8004996:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004998:	f107 0314 	add.w	r3, r7, #20
 800499c:	4619      	mov	r1, r3
 800499e:	4890      	ldr	r0, [pc, #576]	@ (8004be0 <_ZN11RemoraComms4initEv+0x298>)
 80049a0:	f002 fcb2 	bl	8007308 <HAL_GPIO_Init>

        interruptPtr = new ModuleInterrupt(this->irq, this);
 80049a4:	2008      	movs	r0, #8
 80049a6:	f00d f809 	bl	80119bc <_Znwj>
 80049aa:	4603      	mov	r3, r0
 80049ac:	461c      	mov	r4, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80049b4:	4619      	mov	r1, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	461a      	mov	r2, r3
 80049ba:	4620      	mov	r0, r4
 80049bc:	f7ff ff70 	bl	80048a0 <_ZN15ModuleInterruptC1EiP6Module>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	621c      	str	r4, [r3, #32]
    	HAL_NVIC_SetPriority(this->irq, 5, 0);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80049ca:	2200      	movs	r2, #0
 80049cc:	2105      	movs	r1, #5
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 ff11 	bl	80057f6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(this->irq);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 ff25 	bl	800582a <HAL_NVIC_EnableIRQ>


        printf("	Initialising SPI1 slave\n");
 80049e0:	4880      	ldr	r0, [pc, #512]	@ (8004be4 <_ZN11RemoraComms4initEv+0x29c>)
 80049e2:	f00d fb81 	bl	80120e8 <puts>

        this->spiHandle.Init.Mode           		= SPI_MODE_SLAVE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	62da      	str	r2, [r3, #44]	@ 0x2c
        this->spiHandle.Init.Direction      		= SPI_DIRECTION_2LINES;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	631a      	str	r2, [r3, #48]	@ 0x30
        this->spiHandle.Init.DataSize       		= SPI_DATASIZE_8BIT;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2207      	movs	r2, #7
 80049f6:	635a      	str	r2, [r3, #52]	@ 0x34
        this->spiHandle.Init.CLKPolarity    		= SPI_POLARITY_LOW;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	639a      	str	r2, [r3, #56]	@ 0x38
        this->spiHandle.Init.CLKPhase       		= SPI_PHASE_1EDGE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	63da      	str	r2, [r3, #60]	@ 0x3c
        this->spiHandle.Init.NSS            		= SPI_NSS_HARD_INPUT;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	641a      	str	r2, [r3, #64]	@ 0x40
        this->spiHandle.Init.FirstBit       		= SPI_FIRSTBIT_MSB;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	649a      	str	r2, [r3, #72]	@ 0x48
        this->spiHandle.Init.TIMode         		= SPI_TIMODE_DISABLE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	64da      	str	r2, [r3, #76]	@ 0x4c
        this->spiHandle.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	651a      	str	r2, [r3, #80]	@ 0x50
        this->spiHandle.Init.CRCPolynomial  		= 0x0;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	655a      	str	r2, [r3, #84]	@ 0x54
        this->spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	65da      	str	r2, [r3, #92]	@ 0x5c
        this->spiHandle.Init.NSSPolarity 			= SPI_NSS_POLARITY_LOW;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	661a      	str	r2, [r3, #96]	@ 0x60
        this->spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	665a      	str	r2, [r3, #100]	@ 0x64
        this->spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	669a      	str	r2, [r3, #104]	@ 0x68
        this->spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	66da      	str	r2, [r3, #108]	@ 0x6c
        this->spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	671a      	str	r2, [r3, #112]	@ 0x70
        this->spiHandle.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	675a      	str	r2, [r3, #116]	@ 0x74
        this->spiHandle.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	679a      	str	r2, [r3, #120]	@ 0x78
        this->spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	67da      	str	r2, [r3, #124]	@ 0x7c
        this->spiHandle.Init.IOSwap 				= SPI_IO_SWAP_DISABLE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        HAL_SPI_Init(&this->spiHandle);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3328      	adds	r3, #40	@ 0x28
 8004a64:	4618      	mov	r0, r3
 8004a66:	f007 ff81 	bl	800c96c <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 8004a6a:	4b5c      	ldr	r3, [pc, #368]	@ (8004bdc <_ZN11RemoraComms4initEv+0x294>)
 8004a6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a70:	4a5a      	ldr	r2, [pc, #360]	@ (8004bdc <_ZN11RemoraComms4initEv+0x294>)
 8004a72:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a7a:	4b58      	ldr	r3, [pc, #352]	@ (8004bdc <_ZN11RemoraComms4initEv+0x294>)
 8004a7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]

		printf("	Initialising GPIO for SPI\n");
 8004a88:	4857      	ldr	r0, [pc, #348]	@ (8004be8 <_ZN11RemoraComms4initEv+0x2a0>)
 8004a8a:	f00d fb2d 	bl	80120e8 <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a8e:	4b53      	ldr	r3, [pc, #332]	@ (8004bdc <_ZN11RemoraComms4initEv+0x294>)
 8004a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a94:	4a51      	ldr	r2, [pc, #324]	@ (8004bdc <_ZN11RemoraComms4initEv+0x294>)
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a9e:	4b4f      	ldr	r3, [pc, #316]	@ (8004bdc <_ZN11RemoraComms4initEv+0x294>)
 8004aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 8004aac:	f107 0314 	add.w	r3, r7, #20
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	605a      	str	r2, [r3, #4]
 8004ab6:	609a      	str	r2, [r3, #8]
 8004ab8:	60da      	str	r2, [r3, #12]
 8004aba:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004abc:	23f0      	movs	r3, #240	@ 0xf0
 8004abe:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004acc:	2305      	movs	r3, #5
 8004ace:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ad0:	f107 0314 	add.w	r3, r7, #20
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4842      	ldr	r0, [pc, #264]	@ (8004be0 <_ZN11RemoraComms4initEv+0x298>)
 8004ad8:	f002 fc16 	bl	8007308 <HAL_GPIO_Init>

        printf("	Initialising DMA for SPI\n");
 8004adc:	4843      	ldr	r0, [pc, #268]	@ (8004bec <_ZN11RemoraComms4initEv+0x2a4>)
 8004ade:	f00d fb03 	bl	80120e8 <puts>

        this->hdma_spi_rx.Instance 					= DMA1_Stream1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a42      	ldr	r2, [pc, #264]	@ (8004bf0 <_ZN11RemoraComms4initEv+0x2a8>)
 8004ae6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        this->hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2225      	movs	r2, #37	@ 0x25
 8004aee:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
        this->hdma_spi_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        this->hdma_spi_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
        this->hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b08:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
        this->hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
        this->hdma_spi_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        this->hdma_spi_rx.Init.Mode 				= DMA_CIRCULAR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b22:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
        this->hdma_spi_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        this->hdma_spi_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        HAL_DMA_Init(&this->hdma_spi_rx);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 ff0b 	bl	8005958 <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmarx, this->hdma_spi_rx);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

        this->hdma_spi_tx.Instance 					= DMA1_Stream0;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a25      	ldr	r2, [pc, #148]	@ (8004bf4 <_ZN11RemoraComms4initEv+0x2ac>)
 8004b5e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        this->hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2226      	movs	r2, #38	@ 0x26
 8004b66:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        this->hdma_spi_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2240      	movs	r2, #64	@ 0x40
 8004b6e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        this->hdma_spi_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        this->hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b80:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        this->hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        this->hdma_spi_tx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        this->hdma_spi_tx.Init.Mode 				= DMA_CIRCULAR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b9a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        this->hdma_spi_tx.Init.Priority 			= DMA_PRIORITY_LOW;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
        this->hdma_spi_tx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

        HAL_DMA_Init(&this->hdma_spi_tx);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	33b0      	adds	r3, #176	@ 0xb0
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fed0 	bl	8005958 <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmatx, this->hdma_spi_tx);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    }
}
 8004bd0:	bf00      	nop
 8004bd2:	372c      	adds	r7, #44	@ 0x2c
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd90      	pop	{r4, r7, pc}
 8004bd8:	40013000 	.word	0x40013000
 8004bdc:	58024400 	.word	0x58024400
 8004be0:	58020000 	.word	0x58020000
 8004be4:	0801327c 	.word	0x0801327c
 8004be8:	08013298 	.word	0x08013298
 8004bec:	080132b4 	.word	0x080132b4
 8004bf0:	40020028 	.word	0x40020028
 8004bf4:	40020010 	.word	0x40020010

08004bf8 <_ZN11RemoraComms5startEv>:

void RemoraComms::start()
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08a      	sub	sp, #40	@ 0x28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
    this->ptrTxData->header = PRU_DATA;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	4a32      	ldr	r2, [pc, #200]	@ (8004cd0 <_ZN11RemoraComms5startEv+0xd8>)
 8004c06:	601a      	str	r2, [r3, #0]
    SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)this->ptrTxData->txBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	f023 031f 	bic.w	r3, r3, #31
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	2340      	movs	r3, #64	@ 0x40
 8004c14:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	dd1d      	ble.n	8004c58 <_ZN11RemoraComms5startEv+0x60>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f003 021f 	and.w	r2, r3, #31
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	4413      	add	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c2c:	f3bf 8f4f 	dsb	sy
}
 8004c30:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004c32:	4a28      	ldr	r2, [pc, #160]	@ (8004cd4 <_ZN11RemoraComms5startEv+0xdc>)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	3320      	adds	r3, #32
 8004c3e:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	3b20      	subs	r3, #32
 8004c44:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	dcf2      	bgt.n	8004c32 <_ZN11RemoraComms5startEv+0x3a>
  __ASM volatile ("dsb 0xF":::"memory");
 8004c4c:	f3bf 8f4f 	dsb	sy
}
 8004c50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004c52:	f3bf 8f6f 	isb	sy
}
 8004c56:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8004c58:	bf00      	nop
    SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)this->spiRxBuffer.rxBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8004c60:	f023 031f 	bic.w	r3, r3, #31
 8004c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c66:	2340      	movs	r3, #64	@ 0x40
 8004c68:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	dd1d      	ble.n	8004cac <_ZN11RemoraComms5startEv+0xb4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c72:	f003 021f 	and.w	r2, r3, #31
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	4413      	add	r3, r2
 8004c7a:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c80:	f3bf 8f4f 	dsb	sy
}
 8004c84:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004c86:	4a13      	ldr	r2, [pc, #76]	@ (8004cd4 <_ZN11RemoraComms5startEv+0xdc>)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	3320      	adds	r3, #32
 8004c92:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	3b20      	subs	r3, #32
 8004c98:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	dcf2      	bgt.n	8004c86 <_ZN11RemoraComms5startEv+0x8e>
  __ASM volatile ("dsb 0xF":::"memory");
 8004ca0:	f3bf 8f4f 	dsb	sy
}
 8004ca4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004ca6:	f3bf 8f6f 	isb	sy
}
 8004caa:	bf00      	nop
}
 8004cac:	bf00      	nop
    HAL_SPI_TransmitReceive_DMA(&this->spiHandle, (uint8_t *)this->ptrTxData->txBuffer, (uint8_t *)this->spiRxBuffer.rxBuffer, SPI_BUFF_SIZE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f503 7208 	add.w	r2, r3, #544	@ 0x220
 8004cc0:	2340      	movs	r3, #64	@ 0x40
 8004cc2:	f007 ff81 	bl	800cbc8 <HAL_SPI_TransmitReceive_DMA>
}
 8004cc6:	bf00      	nop
 8004cc8:	3728      	adds	r7, #40	@ 0x28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	64617461 	.word	0x64617461
 8004cd4:	e000ed00 	.word	0xe000ed00

08004cd8 <_ZN11RemoraComms15handleInterruptEv>:


void RemoraComms::handleInterrupt()
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08c      	sub	sp, #48	@ 0x30
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
    SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)this->ptrTxData->txBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	f023 031f 	bic.w	r3, r3, #31
 8004ce8:	61bb      	str	r3, [r7, #24]
 8004cea:	2340      	movs	r3, #64	@ 0x40
 8004cec:	617b      	str	r3, [r7, #20]
    if ( dsize > 0 ) { 
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	dd1d      	ble.n	8004d30 <_ZN11RemoraComms15handleInterruptEv+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	f003 021f 	and.w	r2, r3, #31
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d04:	f3bf 8f4f 	dsb	sy
}
 8004d08:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004d0a:	4a4a      	ldr	r2, [pc, #296]	@ (8004e34 <_ZN11RemoraComms15handleInterruptEv+0x15c>)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3320      	adds	r3, #32
 8004d16:	60fb      	str	r3, [r7, #12]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	3b20      	subs	r3, #32
 8004d1c:	613b      	str	r3, [r7, #16]
      } while ( op_size > 0 );
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	dcf2      	bgt.n	8004d0a <_ZN11RemoraComms15handleInterruptEv+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8004d24:	f3bf 8f4f 	dsb	sy
}
 8004d28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d2a:	f3bf 8f6f 	isb	sy
}
 8004d2e:	bf00      	nop
}
 8004d30:	bf00      	nop
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)this->spiRxBuffer.rxBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8004d38:	f023 031f 	bic.w	r3, r3, #31
 8004d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d3e:	2340      	movs	r3, #64	@ 0x40
 8004d40:	627b      	str	r3, [r7, #36]	@ 0x24
    if ( dsize > 0 ) { 
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	dd1d      	ble.n	8004d84 <_ZN11RemoraComms15handleInterruptEv+0xac>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4a:	f003 021f 	and.w	r2, r3, #31
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	4413      	add	r3, r2
 8004d52:	623b      	str	r3, [r7, #32]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8004d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d58:	f3bf 8f4f 	dsb	sy
}
 8004d5c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004d5e:	4a35      	ldr	r2, [pc, #212]	@ (8004e34 <_ZN11RemoraComms15handleInterruptEv+0x15c>)
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	3320      	adds	r3, #32
 8004d6a:	61fb      	str	r3, [r7, #28]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	3b20      	subs	r3, #32
 8004d70:	623b      	str	r3, [r7, #32]
      } while ( op_size > 0 );
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	dcf2      	bgt.n	8004d5e <_ZN11RemoraComms15handleInterruptEv+0x86>
  __ASM volatile ("dsb 0xF":::"memory");
 8004d78:	f3bf 8f4f 	dsb	sy
}
 8004d7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d7e:	f3bf 8f6f 	isb	sy
}
 8004d82:	bf00      	nop
}
 8004d84:	bf00      	nop

	switch (this->spiRxBuffer.header)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8004d8c:	4a2a      	ldr	r2, [pc, #168]	@ (8004e38 <_ZN11RemoraComms15handleInterruptEv+0x160>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d003      	beq.n	8004d9a <_ZN11RemoraComms15handleInterruptEv+0xc2>
 8004d92:	4a2a      	ldr	r2, [pc, #168]	@ (8004e3c <_ZN11RemoraComms15handleInterruptEv+0x164>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d009      	beq.n	8004dac <_ZN11RemoraComms15handleInterruptEv+0xd4>
 8004d98:	e02a      	b.n	8004df0 <_ZN11RemoraComms15handleInterruptEv+0x118>
	{
	  case PRU_READ:
		this->SPIdata = true;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
		this->rejectCnt = 0;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
		// READ so do nothing with the received data
		break;
 8004daa:	e032      	b.n	8004e12 <_ZN11RemoraComms15handleInterruptEv+0x13a>

	  case PRU_WRITE:
		this->SPIdata = true;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
		this->rejectCnt = 0;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  __ASM volatile ("cpsid i" : : : "memory");
 8004dbc:	b672      	cpsid	i
}
 8004dbe:	bf00      	nop

		// ensure an atomic access to the rxBuffer
		// disable thread interrupts
		__disable_irq();
		for (int i = 0; i < SPI_BUFF_SIZE; i++)
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dc4:	e00e      	b.n	8004de4 <_ZN11RemoraComms15handleInterruptEv+0x10c>
		{
			this->ptrRxData->rxBuffer[i] = this->spiRxBuffer.rxBuffer[i];
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695a      	ldr	r2, [r3, #20]
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dce:	440b      	add	r3, r1
 8004dd0:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8004dd4:	7819      	ldrb	r1, [r3, #0]
 8004dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd8:	4413      	add	r3, r2
 8004dda:	460a      	mov	r2, r1
 8004ddc:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < SPI_BUFF_SIZE; i++)
 8004dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de0:	3301      	adds	r3, #1
 8004de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de6:	2b3f      	cmp	r3, #63	@ 0x3f
 8004de8:	dded      	ble.n	8004dc6 <_ZN11RemoraComms15handleInterruptEv+0xee>
  __ASM volatile ("cpsie i" : : : "memory");
 8004dea:	b662      	cpsie	i
}
 8004dec:	bf00      	nop
		}
		// re-enable thread interrupts
		__enable_irq();
		break;
 8004dee:	e010      	b.n	8004e12 <_ZN11RemoraComms15handleInterruptEv+0x13a>

	  default:
		this->rejectCnt++;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8004df6:	3301      	adds	r3, #1
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
		if (this->rejectCnt > 5)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8004e06:	2b05      	cmp	r3, #5
 8004e08:	d903      	bls.n	8004e12 <_ZN11RemoraComms15handleInterruptEv+0x13a>
		{
			this->SPIdataError = true;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
		}
		// reset SPI somehow
	}

    HAL_SPI_TransmitReceive_DMA(&this->spiHandle, (uint8_t *)this->ptrTxData->txBuffer, (uint8_t *)this->spiRxBuffer.rxBuffer, SPI_BUFF_SIZE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f503 7208 	add.w	r2, r3, #544	@ 0x220
 8004e24:	2340      	movs	r3, #64	@ 0x40
 8004e26:	f007 fecf 	bl	800cbc8 <HAL_SPI_TransmitReceive_DMA>
}
 8004e2a:	bf00      	nop
 8004e2c:	3730      	adds	r7, #48	@ 0x30
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	e000ed00 	.word	0xe000ed00
 8004e38:	72656164 	.word	0x72656164
 8004e3c:	77726974 	.word	0x77726974

08004e40 <_ZN11RemoraComms9getStatusEv>:

bool RemoraComms::getStatus(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
    return this->SPIdata;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <_ZN11RemoraComms9setStatusEb>:

void RemoraComms::setStatus(bool status)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	460b      	mov	r3, r1
 8004e64:	70fb      	strb	r3, [r7, #3]
    this->SPIdata = status;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	78fa      	ldrb	r2, [r7, #3]
 8004e6a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <_ZN11RemoraComms8getErrorEv>:

bool RemoraComms::getError(void)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
    return this->SPIdataError;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <_ZN11RemoraComms8setErrorEb>:

void RemoraComms::setError(bool error)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	70fb      	strb	r3, [r7, #3]
    this->SPIdataError = error;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	78fa      	ldrb	r2, [r7, #3]
 8004ea4:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <_ZN11RemoraComms6updateEv>:

void RemoraComms::update()
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
	// unused for RemoraComms
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <_ZN11RemoraCommsD1Ev>:
#include "remora.h"
#include "../../modules/module.h"
#include "../../modules/moduleinterrupt.h"


class RemoraComms : public Module
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	4a05      	ldr	r2, [pc, #20]	@ (8004ee8 <_ZN11RemoraCommsD1Ev+0x20>)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fc5f 	bl	800479c <_ZN6ModuleD1Ev>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	080133f8 	.word	0x080133f8

08004eec <_ZN11RemoraCommsD0Ev>:
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff ffe7 	bl	8004ec8 <_ZN11RemoraCommsD1Ev>
 8004efa:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f00c fd4b 	bl	801199a <_ZdlPvj>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4618      	mov	r0, r3
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <_ZNSt12_Vector_baseIP6ModuleSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 f8bd 	bl	8005098 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE12_Vector_implC1Ev>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff ffeb 	bl	8004f0e <_ZNSt12_Vector_baseIP6ModuleSaIS1_EEC1Ev>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>:


using namespace std;

// Thread constructor
pruThread::pruThread(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency) :
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	4613      	mov	r3, r2
 8004f52:	80fb      	strh	r3, [r7, #6]
	timer(timer),
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	605a      	str	r2, [r3, #4]
	irq(irq),
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	88fa      	ldrh	r2, [r7, #6]
 8004f5e:	811a      	strh	r2, [r3, #8]
	frequency(frequency)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	60da      	str	r2, [r3, #12]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3314      	adds	r3, #20
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff ffdc 	bl	8004f28 <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3320      	adds	r3, #32
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7ff ffd7 	bl	8004f28 <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	332c      	adds	r3, #44	@ 0x2c
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 f89a 	bl	80050b8 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1Ev>
{
	printf("	Creating thread %lu\n", this->frequency);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4804      	ldr	r0, [pc, #16]	@ (8004f9c <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem+0x58>)
 8004f8c:	f00d f83c 	bl	8012008 <iprintf>
}
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	080132d0 	.word	0x080132d0

08004fa0 <_ZN9pruThread11startThreadEv>:

void pruThread::startThread(void)
{
 8004fa0:	b590      	push	{r4, r7, lr}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af02      	add	r7, sp, #8
 8004fa6:	6078      	str	r0, [r7, #4]
	TimerPtr = new pruTimer(this->timer, this->irq, this->frequency, this);
 8004fa8:	2014      	movs	r0, #20
 8004faa:	f00c fd07 	bl	80119bc <_Znwj>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	461c      	mov	r4, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6859      	ldr	r1, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68d8      	ldr	r0, [r3, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	f000 f93e 	bl	8005248 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	601c      	str	r4, [r3, #0]
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd90      	pop	{r4, r7, pc}

08004fd8 <_ZN9pruThread3runEv>:
	this->hasThreadPost = true;
}


void pruThread::run(void)
{
 8004fd8:	b590      	push	{r4, r7, lr}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
	// iterate over the Thread pointer vector to run all instances of Module::runModule()
	for (iter = vThread.begin(); iter != vThread.end(); ++iter) (*iter)->runModule();
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3314      	adds	r3, #20
 8004fe4:	687c      	ldr	r4, [r7, #4]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 f874 	bl	80050d4 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 8004fec:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8004fee:	e00e      	b.n	800500e <_ZN9pruThread3runEv+0x36>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	332c      	adds	r3, #44	@ 0x2c
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 f8b6 	bl	8005166 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff fbec 	bl	80047dc <_ZN6Module9runModuleEv>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	332c      	adds	r3, #44	@ 0x2c
 8005008:	4618      	mov	r0, r3
 800500a:	f000 f89c 	bl	8005146 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3314      	adds	r3, #20
 8005018:	4618      	mov	r0, r3
 800501a:	f000 f86b 	bl	80050f4 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 800501e:	4603      	mov	r3, r0
 8005020:	60bb      	str	r3, [r7, #8]
 8005022:	f107 0308 	add.w	r3, r7, #8
 8005026:	4619      	mov	r1, r3
 8005028:	4620      	mov	r0, r4
 800502a:	f000 f874 	bl	8005116 <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1dd      	bne.n	8004ff0 <_ZN9pruThread3runEv+0x18>

	// iterate over the second vector that contains module pointers to run after (post) the main vector
	if (hasThreadPost)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	7c1b      	ldrb	r3, [r3, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d029      	beq.n	8005090 <_ZN9pruThread3runEv+0xb8>
	{
		for (iter = vThreadPost.begin(); iter != vThreadPost.end(); ++iter) (*iter)->runModulePost();
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3320      	adds	r3, #32
 8005040:	687c      	ldr	r4, [r7, #4]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 f846 	bl	80050d4 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 8005048:	62e0      	str	r0, [r4, #44]	@ 0x2c
 800504a:	e00e      	b.n	800506a <_ZN9pruThread3runEv+0x92>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	332c      	adds	r3, #44	@ 0x2c
 8005050:	4618      	mov	r0, r3
 8005052:	f000 f888 	bl	8005166 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>
 8005056:	4603      	mov	r3, r0
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff fbe0 	bl	8004820 <_ZN6Module13runModulePostEv>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	332c      	adds	r3, #44	@ 0x2c
 8005064:	4618      	mov	r0, r3
 8005066:	f000 f86e 	bl	8005146 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3320      	adds	r3, #32
 8005074:	4618      	mov	r0, r3
 8005076:	f000 f83d 	bl	80050f4 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 800507a:	4603      	mov	r3, r0
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	f107 030c 	add.w	r3, r7, #12
 8005082:	4619      	mov	r1, r3
 8005084:	4620      	mov	r0, r4
 8005086:	f000 f846 	bl	8005116 <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1dd      	bne.n	800504c <_ZN9pruThread3runEv+0x74>
	}
}
 8005090:	bf00      	nop
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	bd90      	pop	{r4, r7, pc}

08005098 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f86c 	bl	800517e <_ZNSaIP6ModuleEC1Ev>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 f874 	bl	8005196 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1Ev>:

#if __cplusplus > 201703L && __cpp_lib_concepts
      using iterator_concept = std::__detail::__iter_concept<_Iterator>;
#endif

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
      : _M_current(_Iterator()) { }
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4618      	mov	r0, r3
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	f107 030c 	add.w	r3, r7, #12
 80050e2:	4611      	mov	r1, r2
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 f86a 	bl	80051be <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	1d1a      	adds	r2, r3, #4
 8005100:	f107 030c 	add.w	r3, r7, #12
 8005104:	4611      	mov	r1, r2
 8005106:	4618      	mov	r0, r3
 8005108:	f000 f859 	bl	80051be <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005116:	b590      	push	{r4, r7, lr}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f85c 	bl	80051de <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8005126:	4603      	mov	r3, r0
 8005128:	681c      	ldr	r4, [r3, #0]
 800512a:	6838      	ldr	r0, [r7, #0]
 800512c:	f000 f857 	bl	80051de <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8005130:	4603      	mov	r3, r0
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	429c      	cmp	r4, r3
 8005136:	bf14      	ite	ne
 8005138:	2301      	movne	r3, #1
 800513a:	2300      	moveq	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	4618      	mov	r0, r3
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	bd90      	pop	{r4, r7, pc}

08005146 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	1d1a      	adds	r2, r3, #4
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	601a      	str	r2, [r3, #0]
	return *this;
 8005158:	687b      	ldr	r3, [r7, #4]
      }
 800515a:	4618      	mov	r0, r3
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <_ZNSaIP6ModuleEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f834 	bl	80051f4 <_ZNSt15__new_allocatorIP6ModuleEC1Ev>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4618      	mov	r0, r3
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	605a      	str	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	609a      	str	r2, [r3, #8]
	{ }
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4618      	mov	r0, r3
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4618      	mov	r0, r3
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4618      	mov	r0, r3
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <_ZNSt15__new_allocatorIP6ModuleEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4618      	mov	r0, r3
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
	...

0800520c <__NVIC_EnableIRQ>:
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800521a:	2b00      	cmp	r3, #0
 800521c:	db0b      	blt.n	8005236 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	f003 021f 	and.w	r2, r3, #31
 8005224:	4907      	ldr	r1, [pc, #28]	@ (8005244 <__NVIC_EnableIRQ+0x38>)
 8005226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800522a:	095b      	lsrs	r3, r3, #5
 800522c:	2001      	movs	r0, #1
 800522e:	fa00 f202 	lsl.w	r2, r0, r2
 8005232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	e000e100 	.word	0xe000e100

08005248 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency, pruThread* ownerPtr):
 8005248:	b590      	push	{r4, r7, lr}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	4613      	mov	r3, r2
 8005256:	80fb      	strh	r3, [r7, #6]
	timer(timer),
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	605a      	str	r2, [r3, #4]
	irq(irq),
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	88fa      	ldrh	r2, [r7, #6]
 8005262:	811a      	strh	r2, [r3, #8]
	frequency(frequency),
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	60da      	str	r2, [r3, #12]
	timerOwnerPtr(ownerPtr)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a3a      	ldr	r2, [r7, #32]
 800526e:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(this->irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 8005270:	2008      	movs	r0, #8
 8005272:	f00c fba3 	bl	80119bc <_Znwj>
 8005276:	4603      	mov	r3, r0
 8005278:	461c      	mov	r4, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4619      	mov	r1, r3
 8005284:	4620      	mov	r0, r4
 8005286:	f000 f8af 	bl	80053e8 <_ZN14TimerInterruptC1EiP8pruTimer>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	601c      	str	r4, [r3, #0]

	this->startTimer();
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 f812 	bl	80052b8 <_ZN8pruTimer10startTimerEv>
}
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	bd90      	pop	{r4, r7, pc}

0800529e <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
	//Do something here
	this->timerOwnerPtr->run();
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff fe94 	bl	8004fd8 <_ZN9pruThread3runEv>
}
 80052b0:	bf00      	nop
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (this->timer == TIM2)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c8:	d115      	bne.n	80052f6 <_ZN8pruTimer10startTimerEv+0x3e>
    {
        printf("	power on Timer 2\n\r");
 80052ca:	483f      	ldr	r0, [pc, #252]	@ (80053c8 <_ZN8pruTimer10startTimerEv+0x110>)
 80052cc:	f00c fe9c 	bl	8012008 <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 80052d0:	4b3e      	ldr	r3, [pc, #248]	@ (80053cc <_ZN8pruTimer10startTimerEv+0x114>)
 80052d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052d6:	4a3d      	ldr	r2, [pc, #244]	@ (80053cc <_ZN8pruTimer10startTimerEv+0x114>)
 80052d8:	f043 0301 	orr.w	r3, r3, #1
 80052dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80052e0:	4b3a      	ldr	r3, [pc, #232]	@ (80053cc <_ZN8pruTimer10startTimerEv+0x114>)
 80052e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	613b      	str	r3, [r7, #16]
 80052ec:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB2CLK;
 80052ee:	4b38      	ldr	r3, [pc, #224]	@ (80053d0 <_ZN8pruTimer10startTimerEv+0x118>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	e036      	b.n	8005364 <_ZN8pruTimer10startTimerEv+0xac>
    }
    else if (this->timer == TIM3)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	4a36      	ldr	r2, [pc, #216]	@ (80053d4 <_ZN8pruTimer10startTimerEv+0x11c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d116      	bne.n	800532e <_ZN8pruTimer10startTimerEv+0x76>
    {
        printf("	power on Timer 3\n\r");
 8005300:	4835      	ldr	r0, [pc, #212]	@ (80053d8 <_ZN8pruTimer10startTimerEv+0x120>)
 8005302:	f00c fe81 	bl	8012008 <iprintf>
        __HAL_RCC_TIM3_CLK_ENABLE();
 8005306:	4b31      	ldr	r3, [pc, #196]	@ (80053cc <_ZN8pruTimer10startTimerEv+0x114>)
 8005308:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800530c:	4a2f      	ldr	r2, [pc, #188]	@ (80053cc <_ZN8pruTimer10startTimerEv+0x114>)
 800530e:	f043 0302 	orr.w	r3, r3, #2
 8005312:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005316:	4b2d      	ldr	r3, [pc, #180]	@ (80053cc <_ZN8pruTimer10startTimerEv+0x114>)
 8005318:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 8005324:	4b2a      	ldr	r3, [pc, #168]	@ (80053d0 <_ZN8pruTimer10startTimerEv+0x118>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	085b      	lsrs	r3, r3, #1
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	e01a      	b.n	8005364 <_ZN8pruTimer10startTimerEv+0xac>
    }
    else if (this->timer == TIM4)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	4a2a      	ldr	r2, [pc, #168]	@ (80053dc <_ZN8pruTimer10startTimerEv+0x124>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d115      	bne.n	8005364 <_ZN8pruTimer10startTimerEv+0xac>
    {
        printf("	power on Timer 4\n\r");
 8005338:	4829      	ldr	r0, [pc, #164]	@ (80053e0 <_ZN8pruTimer10startTimerEv+0x128>)
 800533a:	f00c fe65 	bl	8012008 <iprintf>
        __HAL_RCC_TIM4_CLK_ENABLE();
 800533e:	4b23      	ldr	r3, [pc, #140]	@ (80053cc <_ZN8pruTimer10startTimerEv+0x114>)
 8005340:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005344:	4a21      	ldr	r2, [pc, #132]	@ (80053cc <_ZN8pruTimer10startTimerEv+0x114>)
 8005346:	f043 0304 	orr.w	r3, r3, #4
 800534a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800534e:	4b1f      	ldr	r3, [pc, #124]	@ (80053cc <_ZN8pruTimer10startTimerEv+0x114>)
 8005350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	68bb      	ldr	r3, [r7, #8]
        TIM_CLK = APB1CLK;
 800535c:	4b1c      	ldr	r3, [pc, #112]	@ (80053d0 <_ZN8pruTimer10startTimerEv+0x118>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	085b      	lsrs	r3, r3, #1
 8005362:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    this->timer->CR2 &= 0;                                            // UG used as trigg output
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	605a      	str	r2, [r3, #4]
    this->timer->PSC = TIM_PSC-1;                                     // prescaler
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	629a      	str	r2, [r3, #40]	@ 0x28
    this->timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period           
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	fbb2 f2f3 	udiv	r2, r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	3a01      	subs	r2, #1
 800538a:	62da      	str	r2, [r3, #44]	@ 0x2c
    this->timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	615a      	str	r2, [r3, #20]
    this->timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	60da      	str	r2, [r3, #12]

    this->timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(this->irq);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff ff2a 	bl	800520c <__NVIC_EnableIRQ>

    printf("	timer started\n");
 80053b8:	480a      	ldr	r0, [pc, #40]	@ (80053e4 <_ZN8pruTimer10startTimerEv+0x12c>)
 80053ba:	f00c fe95 	bl	80120e8 <puts>
}
 80053be:	bf00      	nop
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	08013304 	.word	0x08013304
 80053cc:	58024400 	.word	0x58024400
 80053d0:	24000058 	.word	0x24000058
 80053d4:	40000400 	.word	0x40000400
 80053d8:	08013318 	.word	0x08013318
 80053dc:	40000800 	.word	0x40000800
 80053e0:	0801332c 	.word	0x0801332c
 80053e4:	08013340 	.word	0x08013340

080053e8 <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fb fb06 	bl	8000a08 <_ZN9InterruptC1Ev>
 80053fc:	4a07      	ldr	r2, [pc, #28]	@ (800541c <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4619      	mov	r1, r3
 800540c:	68b8      	ldr	r0, [r7, #8]
 800540e:	f7fb fb0b 	bl	8000a28 <_ZN9Interrupt8RegisterEiPS_>
}
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	0801341c 	.word	0x0801341c

08005420 <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff ff36 	bl	800529e <_ZN8pruTimer9timerTickEv>
}
 8005432:	bf00      	nop
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800543c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005474 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005440:	f7ff f90a 	bl	8004658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005444:	480c      	ldr	r0, [pc, #48]	@ (8005478 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005446:	490d      	ldr	r1, [pc, #52]	@ (800547c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005448:	4a0d      	ldr	r2, [pc, #52]	@ (8005480 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800544a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800544c:	e002      	b.n	8005454 <LoopCopyDataInit>

0800544e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800544e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005452:	3304      	adds	r3, #4

08005454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005458:	d3f9      	bcc.n	800544e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800545a:	4a0a      	ldr	r2, [pc, #40]	@ (8005484 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800545c:	4c0a      	ldr	r4, [pc, #40]	@ (8005488 <LoopFillZerobss+0x22>)
  movs r3, #0
 800545e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005460:	e001      	b.n	8005466 <LoopFillZerobss>

08005462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005464:	3204      	adds	r2, #4

08005466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005468:	d3fb      	bcc.n	8005462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800546a:	f00c ffdf 	bl	801242c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800546e:	f7fc fc59 	bl	8001d24 <main>
  bx  lr
 8005472:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005474:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005478:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800547c:	240000c4 	.word	0x240000c4
  ldr r2, =_sidata
 8005480:	08013564 	.word	0x08013564
  ldr r2, =_sbss
 8005484:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 8005488:	24000dac 	.word	0x24000dac

0800548c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800548c:	e7fe      	b.n	800548c <ADC3_IRQHandler>
	...

08005490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005496:	2003      	movs	r0, #3
 8005498:	f000 f9a2 	bl	80057e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800549c:	f002 ff2e 	bl	80082fc <HAL_RCC_GetSysClockFreq>
 80054a0:	4602      	mov	r2, r0
 80054a2:	4b15      	ldr	r3, [pc, #84]	@ (80054f8 <HAL_Init+0x68>)
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	0a1b      	lsrs	r3, r3, #8
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	4913      	ldr	r1, [pc, #76]	@ (80054fc <HAL_Init+0x6c>)
 80054ae:	5ccb      	ldrb	r3, [r1, r3]
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	fa22 f303 	lsr.w	r3, r2, r3
 80054b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80054ba:	4b0f      	ldr	r3, [pc, #60]	@ (80054f8 <HAL_Init+0x68>)
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f003 030f 	and.w	r3, r3, #15
 80054c2:	4a0e      	ldr	r2, [pc, #56]	@ (80054fc <HAL_Init+0x6c>)
 80054c4:	5cd3      	ldrb	r3, [r2, r3]
 80054c6:	f003 031f 	and.w	r3, r3, #31
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	fa22 f303 	lsr.w	r3, r2, r3
 80054d0:	4a0b      	ldr	r2, [pc, #44]	@ (8005500 <HAL_Init+0x70>)
 80054d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80054d4:	4a0b      	ldr	r2, [pc, #44]	@ (8005504 <HAL_Init+0x74>)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80054da:	200f      	movs	r0, #15
 80054dc:	f000 f814 	bl	8005508 <HAL_InitTick>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e002      	b.n	80054f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80054ea:	f7fe fe87 	bl	80041fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	58024400 	.word	0x58024400
 80054fc:	080133b0 	.word	0x080133b0
 8005500:	2400005c 	.word	0x2400005c
 8005504:	24000058 	.word	0x24000058

08005508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005510:	4b15      	ldr	r3, [pc, #84]	@ (8005568 <HAL_InitTick+0x60>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e021      	b.n	8005560 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800551c:	4b13      	ldr	r3, [pc, #76]	@ (800556c <HAL_InitTick+0x64>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	4b11      	ldr	r3, [pc, #68]	@ (8005568 <HAL_InitTick+0x60>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	4619      	mov	r1, r3
 8005526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800552a:	fbb3 f3f1 	udiv	r3, r3, r1
 800552e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005532:	4618      	mov	r0, r3
 8005534:	f000 f98b 	bl	800584e <HAL_SYSTICK_Config>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e00e      	b.n	8005560 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b0f      	cmp	r3, #15
 8005546:	d80a      	bhi.n	800555e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005548:	2200      	movs	r2, #0
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	f04f 30ff 	mov.w	r0, #4294967295
 8005550:	f000 f951 	bl	80057f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005554:	4a06      	ldr	r2, [pc, #24]	@ (8005570 <HAL_InitTick+0x68>)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	e000      	b.n	8005560 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
}
 8005560:	4618      	mov	r0, r3
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	24000064 	.word	0x24000064
 800556c:	24000058 	.word	0x24000058
 8005570:	24000060 	.word	0x24000060

08005574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005578:	4b06      	ldr	r3, [pc, #24]	@ (8005594 <HAL_IncTick+0x20>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	461a      	mov	r2, r3
 800557e:	4b06      	ldr	r3, [pc, #24]	@ (8005598 <HAL_IncTick+0x24>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4413      	add	r3, r2
 8005584:	4a04      	ldr	r2, [pc, #16]	@ (8005598 <HAL_IncTick+0x24>)
 8005586:	6013      	str	r3, [r2, #0]
}
 8005588:	bf00      	nop
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	24000064 	.word	0x24000064
 8005598:	24000598 	.word	0x24000598

0800559c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  return uwTick;
 80055a0:	4b03      	ldr	r3, [pc, #12]	@ (80055b0 <HAL_GetTick+0x14>)
 80055a2:	681b      	ldr	r3, [r3, #0]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	24000598 	.word	0x24000598

080055b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055bc:	f7ff ffee 	bl	800559c <HAL_GetTick>
 80055c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055cc:	d005      	beq.n	80055da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055ce:	4b0a      	ldr	r3, [pc, #40]	@ (80055f8 <HAL_Delay+0x44>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80055da:	bf00      	nop
 80055dc:	f7ff ffde 	bl	800559c <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d8f7      	bhi.n	80055dc <HAL_Delay+0x28>
  {
  }
}
 80055ec:	bf00      	nop
 80055ee:	bf00      	nop
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	24000064 	.word	0x24000064

080055fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005600:	4b03      	ldr	r3, [pc, #12]	@ (8005610 <HAL_GetREVID+0x14>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	0c1b      	lsrs	r3, r3, #16
}
 8005606:	4618      	mov	r0, r3
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	5c001000 	.word	0x5c001000

08005614 <__NVIC_SetPriorityGrouping>:
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005624:	4b0b      	ldr	r3, [pc, #44]	@ (8005654 <__NVIC_SetPriorityGrouping+0x40>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005630:	4013      	ands	r3, r2
 8005632:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800563c:	4b06      	ldr	r3, [pc, #24]	@ (8005658 <__NVIC_SetPriorityGrouping+0x44>)
 800563e:	4313      	orrs	r3, r2
 8005640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005642:	4a04      	ldr	r2, [pc, #16]	@ (8005654 <__NVIC_SetPriorityGrouping+0x40>)
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	60d3      	str	r3, [r2, #12]
}
 8005648:	bf00      	nop
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	e000ed00 	.word	0xe000ed00
 8005658:	05fa0000 	.word	0x05fa0000

0800565c <__NVIC_GetPriorityGrouping>:
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005660:	4b04      	ldr	r3, [pc, #16]	@ (8005674 <__NVIC_GetPriorityGrouping+0x18>)
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	0a1b      	lsrs	r3, r3, #8
 8005666:	f003 0307 	and.w	r3, r3, #7
}
 800566a:	4618      	mov	r0, r3
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	e000ed00 	.word	0xe000ed00

08005678 <__NVIC_EnableIRQ>:
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	4603      	mov	r3, r0
 8005680:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005686:	2b00      	cmp	r3, #0
 8005688:	db0b      	blt.n	80056a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800568a:	88fb      	ldrh	r3, [r7, #6]
 800568c:	f003 021f 	and.w	r2, r3, #31
 8005690:	4907      	ldr	r1, [pc, #28]	@ (80056b0 <__NVIC_EnableIRQ+0x38>)
 8005692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005696:	095b      	lsrs	r3, r3, #5
 8005698:	2001      	movs	r0, #1
 800569a:	fa00 f202 	lsl.w	r2, r0, r2
 800569e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	e000e100 	.word	0xe000e100

080056b4 <__NVIC_SetPriority>:
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	4603      	mov	r3, r0
 80056bc:	6039      	str	r1, [r7, #0]
 80056be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80056c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	db0a      	blt.n	80056de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	490c      	ldr	r1, [pc, #48]	@ (8005700 <__NVIC_SetPriority+0x4c>)
 80056ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056d2:	0112      	lsls	r2, r2, #4
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	440b      	add	r3, r1
 80056d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80056dc:	e00a      	b.n	80056f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	4908      	ldr	r1, [pc, #32]	@ (8005704 <__NVIC_SetPriority+0x50>)
 80056e4:	88fb      	ldrh	r3, [r7, #6]
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	3b04      	subs	r3, #4
 80056ec:	0112      	lsls	r2, r2, #4
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	440b      	add	r3, r1
 80056f2:	761a      	strb	r2, [r3, #24]
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	e000e100 	.word	0xe000e100
 8005704:	e000ed00 	.word	0xe000ed00

08005708 <NVIC_EncodePriority>:
{
 8005708:	b480      	push	{r7}
 800570a:	b089      	sub	sp, #36	@ 0x24
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f1c3 0307 	rsb	r3, r3, #7
 8005722:	2b04      	cmp	r3, #4
 8005724:	bf28      	it	cs
 8005726:	2304      	movcs	r3, #4
 8005728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	3304      	adds	r3, #4
 800572e:	2b06      	cmp	r3, #6
 8005730:	d902      	bls.n	8005738 <NVIC_EncodePriority+0x30>
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	3b03      	subs	r3, #3
 8005736:	e000      	b.n	800573a <NVIC_EncodePriority+0x32>
 8005738:	2300      	movs	r3, #0
 800573a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800573c:	f04f 32ff 	mov.w	r2, #4294967295
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	fa02 f303 	lsl.w	r3, r2, r3
 8005746:	43da      	mvns	r2, r3
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	401a      	ands	r2, r3
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005750:	f04f 31ff 	mov.w	r1, #4294967295
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	fa01 f303 	lsl.w	r3, r1, r3
 800575a:	43d9      	mvns	r1, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005760:	4313      	orrs	r3, r2
}
 8005762:	4618      	mov	r0, r3
 8005764:	3724      	adds	r7, #36	@ 0x24
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
	...

08005770 <__NVIC_SystemReset>:
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005774:	f3bf 8f4f 	dsb	sy
}
 8005778:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800577a:	4b06      	ldr	r3, [pc, #24]	@ (8005794 <__NVIC_SystemReset+0x24>)
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005782:	4904      	ldr	r1, [pc, #16]	@ (8005794 <__NVIC_SystemReset+0x24>)
 8005784:	4b04      	ldr	r3, [pc, #16]	@ (8005798 <__NVIC_SystemReset+0x28>)
 8005786:	4313      	orrs	r3, r2
 8005788:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800578a:	f3bf 8f4f 	dsb	sy
}
 800578e:	bf00      	nop
    __NOP();
 8005790:	bf00      	nop
 8005792:	e7fd      	b.n	8005790 <__NVIC_SystemReset+0x20>
 8005794:	e000ed00 	.word	0xe000ed00
 8005798:	05fa0004 	.word	0x05fa0004

0800579c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057ac:	d301      	bcc.n	80057b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057ae:	2301      	movs	r3, #1
 80057b0:	e00f      	b.n	80057d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057b2:	4a0a      	ldr	r2, [pc, #40]	@ (80057dc <SysTick_Config+0x40>)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057ba:	210f      	movs	r1, #15
 80057bc:	f04f 30ff 	mov.w	r0, #4294967295
 80057c0:	f7ff ff78 	bl	80056b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057c4:	4b05      	ldr	r3, [pc, #20]	@ (80057dc <SysTick_Config+0x40>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057ca:	4b04      	ldr	r3, [pc, #16]	@ (80057dc <SysTick_Config+0x40>)
 80057cc:	2207      	movs	r2, #7
 80057ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	e000e010 	.word	0xe000e010

080057e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff ff13 	bl	8005614 <__NVIC_SetPriorityGrouping>
}
 80057ee:	bf00      	nop
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b086      	sub	sp, #24
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	4603      	mov	r3, r0
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
 8005802:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005804:	f7ff ff2a 	bl	800565c <__NVIC_GetPriorityGrouping>
 8005808:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	6978      	ldr	r0, [r7, #20]
 8005810:	f7ff ff7a 	bl	8005708 <NVIC_EncodePriority>
 8005814:	4602      	mov	r2, r0
 8005816:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800581a:	4611      	mov	r1, r2
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff ff49 	bl	80056b4 <__NVIC_SetPriority>
}
 8005822:	bf00      	nop
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	4603      	mov	r3, r0
 8005832:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005834:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff ff1d 	bl	8005678 <__NVIC_EnableIRQ>
}
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800584a:	f7ff ff91 	bl	8005770 <__NVIC_SystemReset>

0800584e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b082      	sub	sp, #8
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff ffa0 	bl	800579c <SysTick_Config>
 800585c:	4603      	mov	r3, r0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800586c:	f3bf 8f5f 	dmb	sy
}
 8005870:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005872:	4b07      	ldr	r3, [pc, #28]	@ (8005890 <HAL_MPU_Disable+0x28>)
 8005874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005876:	4a06      	ldr	r2, [pc, #24]	@ (8005890 <HAL_MPU_Disable+0x28>)
 8005878:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800587c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800587e:	4b05      	ldr	r3, [pc, #20]	@ (8005894 <HAL_MPU_Disable+0x2c>)
 8005880:	2200      	movs	r2, #0
 8005882:	605a      	str	r2, [r3, #4]
}
 8005884:	bf00      	nop
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	e000ed00 	.word	0xe000ed00
 8005894:	e000ed90 	.word	0xe000ed90

08005898 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80058a0:	4a0b      	ldr	r2, [pc, #44]	@ (80058d0 <HAL_MPU_Enable+0x38>)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f043 0301 	orr.w	r3, r3, #1
 80058a8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80058aa:	4b0a      	ldr	r3, [pc, #40]	@ (80058d4 <HAL_MPU_Enable+0x3c>)
 80058ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ae:	4a09      	ldr	r2, [pc, #36]	@ (80058d4 <HAL_MPU_Enable+0x3c>)
 80058b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058b4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80058b6:	f3bf 8f4f 	dsb	sy
}
 80058ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80058bc:	f3bf 8f6f 	isb	sy
}
 80058c0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80058c2:	bf00      	nop
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	e000ed90 	.word	0xe000ed90
 80058d4:	e000ed00 	.word	0xe000ed00

080058d8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	785a      	ldrb	r2, [r3, #1]
 80058e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005954 <HAL_MPU_ConfigRegion+0x7c>)
 80058e6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80058e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005954 <HAL_MPU_ConfigRegion+0x7c>)
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	4a19      	ldr	r2, [pc, #100]	@ (8005954 <HAL_MPU_ConfigRegion+0x7c>)
 80058ee:	f023 0301 	bic.w	r3, r3, #1
 80058f2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80058f4:	4a17      	ldr	r2, [pc, #92]	@ (8005954 <HAL_MPU_ConfigRegion+0x7c>)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	7b1b      	ldrb	r3, [r3, #12]
 8005900:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	7adb      	ldrb	r3, [r3, #11]
 8005906:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005908:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	7a9b      	ldrb	r3, [r3, #10]
 800590e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005910:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	7b5b      	ldrb	r3, [r3, #13]
 8005916:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005918:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	7b9b      	ldrb	r3, [r3, #14]
 800591e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005920:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	7bdb      	ldrb	r3, [r3, #15]
 8005926:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005928:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	7a5b      	ldrb	r3, [r3, #9]
 800592e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005930:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	7a1b      	ldrb	r3, [r3, #8]
 8005936:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005938:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	7812      	ldrb	r2, [r2, #0]
 800593e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005940:	4a04      	ldr	r2, [pc, #16]	@ (8005954 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005942:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005944:	6113      	str	r3, [r2, #16]
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	e000ed90 	.word	0xe000ed90

08005958 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005960:	f7ff fe1c 	bl	800559c <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e316      	b.n	8005f9e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a66      	ldr	r2, [pc, #408]	@ (8005b10 <HAL_DMA_Init+0x1b8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d04a      	beq.n	8005a10 <HAL_DMA_Init+0xb8>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a65      	ldr	r2, [pc, #404]	@ (8005b14 <HAL_DMA_Init+0x1bc>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d045      	beq.n	8005a10 <HAL_DMA_Init+0xb8>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a63      	ldr	r2, [pc, #396]	@ (8005b18 <HAL_DMA_Init+0x1c0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d040      	beq.n	8005a10 <HAL_DMA_Init+0xb8>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a62      	ldr	r2, [pc, #392]	@ (8005b1c <HAL_DMA_Init+0x1c4>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d03b      	beq.n	8005a10 <HAL_DMA_Init+0xb8>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a60      	ldr	r2, [pc, #384]	@ (8005b20 <HAL_DMA_Init+0x1c8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d036      	beq.n	8005a10 <HAL_DMA_Init+0xb8>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a5f      	ldr	r2, [pc, #380]	@ (8005b24 <HAL_DMA_Init+0x1cc>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d031      	beq.n	8005a10 <HAL_DMA_Init+0xb8>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a5d      	ldr	r2, [pc, #372]	@ (8005b28 <HAL_DMA_Init+0x1d0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d02c      	beq.n	8005a10 <HAL_DMA_Init+0xb8>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a5c      	ldr	r2, [pc, #368]	@ (8005b2c <HAL_DMA_Init+0x1d4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d027      	beq.n	8005a10 <HAL_DMA_Init+0xb8>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a5a      	ldr	r2, [pc, #360]	@ (8005b30 <HAL_DMA_Init+0x1d8>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d022      	beq.n	8005a10 <HAL_DMA_Init+0xb8>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a59      	ldr	r2, [pc, #356]	@ (8005b34 <HAL_DMA_Init+0x1dc>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d01d      	beq.n	8005a10 <HAL_DMA_Init+0xb8>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a57      	ldr	r2, [pc, #348]	@ (8005b38 <HAL_DMA_Init+0x1e0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d018      	beq.n	8005a10 <HAL_DMA_Init+0xb8>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a56      	ldr	r2, [pc, #344]	@ (8005b3c <HAL_DMA_Init+0x1e4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d013      	beq.n	8005a10 <HAL_DMA_Init+0xb8>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a54      	ldr	r2, [pc, #336]	@ (8005b40 <HAL_DMA_Init+0x1e8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00e      	beq.n	8005a10 <HAL_DMA_Init+0xb8>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a53      	ldr	r2, [pc, #332]	@ (8005b44 <HAL_DMA_Init+0x1ec>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d009      	beq.n	8005a10 <HAL_DMA_Init+0xb8>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a51      	ldr	r2, [pc, #324]	@ (8005b48 <HAL_DMA_Init+0x1f0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d004      	beq.n	8005a10 <HAL_DMA_Init+0xb8>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a50      	ldr	r2, [pc, #320]	@ (8005b4c <HAL_DMA_Init+0x1f4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d101      	bne.n	8005a14 <HAL_DMA_Init+0xbc>
 8005a10:	2301      	movs	r3, #1
 8005a12:	e000      	b.n	8005a16 <HAL_DMA_Init+0xbe>
 8005a14:	2300      	movs	r3, #0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 813b 	beq.w	8005c92 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a37      	ldr	r2, [pc, #220]	@ (8005b10 <HAL_DMA_Init+0x1b8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d04a      	beq.n	8005acc <HAL_DMA_Init+0x174>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a36      	ldr	r2, [pc, #216]	@ (8005b14 <HAL_DMA_Init+0x1bc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d045      	beq.n	8005acc <HAL_DMA_Init+0x174>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a34      	ldr	r2, [pc, #208]	@ (8005b18 <HAL_DMA_Init+0x1c0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d040      	beq.n	8005acc <HAL_DMA_Init+0x174>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a33      	ldr	r2, [pc, #204]	@ (8005b1c <HAL_DMA_Init+0x1c4>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d03b      	beq.n	8005acc <HAL_DMA_Init+0x174>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a31      	ldr	r2, [pc, #196]	@ (8005b20 <HAL_DMA_Init+0x1c8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d036      	beq.n	8005acc <HAL_DMA_Init+0x174>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a30      	ldr	r2, [pc, #192]	@ (8005b24 <HAL_DMA_Init+0x1cc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d031      	beq.n	8005acc <HAL_DMA_Init+0x174>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a2e      	ldr	r2, [pc, #184]	@ (8005b28 <HAL_DMA_Init+0x1d0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d02c      	beq.n	8005acc <HAL_DMA_Init+0x174>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a2d      	ldr	r2, [pc, #180]	@ (8005b2c <HAL_DMA_Init+0x1d4>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d027      	beq.n	8005acc <HAL_DMA_Init+0x174>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a2b      	ldr	r2, [pc, #172]	@ (8005b30 <HAL_DMA_Init+0x1d8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d022      	beq.n	8005acc <HAL_DMA_Init+0x174>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8005b34 <HAL_DMA_Init+0x1dc>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d01d      	beq.n	8005acc <HAL_DMA_Init+0x174>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a28      	ldr	r2, [pc, #160]	@ (8005b38 <HAL_DMA_Init+0x1e0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d018      	beq.n	8005acc <HAL_DMA_Init+0x174>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a27      	ldr	r2, [pc, #156]	@ (8005b3c <HAL_DMA_Init+0x1e4>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d013      	beq.n	8005acc <HAL_DMA_Init+0x174>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a25      	ldr	r2, [pc, #148]	@ (8005b40 <HAL_DMA_Init+0x1e8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00e      	beq.n	8005acc <HAL_DMA_Init+0x174>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a24      	ldr	r2, [pc, #144]	@ (8005b44 <HAL_DMA_Init+0x1ec>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d009      	beq.n	8005acc <HAL_DMA_Init+0x174>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a22      	ldr	r2, [pc, #136]	@ (8005b48 <HAL_DMA_Init+0x1f0>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d004      	beq.n	8005acc <HAL_DMA_Init+0x174>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a21      	ldr	r2, [pc, #132]	@ (8005b4c <HAL_DMA_Init+0x1f4>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d108      	bne.n	8005ade <HAL_DMA_Init+0x186>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0201 	bic.w	r2, r2, #1
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	e007      	b.n	8005aee <HAL_DMA_Init+0x196>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0201 	bic.w	r2, r2, #1
 8005aec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005aee:	e02f      	b.n	8005b50 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005af0:	f7ff fd54 	bl	800559c <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b05      	cmp	r3, #5
 8005afc:	d928      	bls.n	8005b50 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2203      	movs	r2, #3
 8005b08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e246      	b.n	8005f9e <HAL_DMA_Init+0x646>
 8005b10:	40020010 	.word	0x40020010
 8005b14:	40020028 	.word	0x40020028
 8005b18:	40020040 	.word	0x40020040
 8005b1c:	40020058 	.word	0x40020058
 8005b20:	40020070 	.word	0x40020070
 8005b24:	40020088 	.word	0x40020088
 8005b28:	400200a0 	.word	0x400200a0
 8005b2c:	400200b8 	.word	0x400200b8
 8005b30:	40020410 	.word	0x40020410
 8005b34:	40020428 	.word	0x40020428
 8005b38:	40020440 	.word	0x40020440
 8005b3c:	40020458 	.word	0x40020458
 8005b40:	40020470 	.word	0x40020470
 8005b44:	40020488 	.word	0x40020488
 8005b48:	400204a0 	.word	0x400204a0
 8005b4c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1c8      	bne.n	8005af0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	4b83      	ldr	r3, [pc, #524]	@ (8005d78 <HAL_DMA_Init+0x420>)
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005b76:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b82:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b8e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d107      	bne.n	8005bb4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bac:	4313      	orrs	r3, r2
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005bb4:	4b71      	ldr	r3, [pc, #452]	@ (8005d7c <HAL_DMA_Init+0x424>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	4b71      	ldr	r3, [pc, #452]	@ (8005d80 <HAL_DMA_Init+0x428>)
 8005bba:	4013      	ands	r3, r2
 8005bbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bc0:	d328      	bcc.n	8005c14 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b28      	cmp	r3, #40	@ 0x28
 8005bc8:	d903      	bls.n	8005bd2 <HAL_DMA_Init+0x27a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bd0:	d917      	bls.n	8005c02 <HAL_DMA_Init+0x2aa>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2b3e      	cmp	r3, #62	@ 0x3e
 8005bd8:	d903      	bls.n	8005be2 <HAL_DMA_Init+0x28a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b42      	cmp	r3, #66	@ 0x42
 8005be0:	d90f      	bls.n	8005c02 <HAL_DMA_Init+0x2aa>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	2b46      	cmp	r3, #70	@ 0x46
 8005be8:	d903      	bls.n	8005bf2 <HAL_DMA_Init+0x29a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	2b48      	cmp	r3, #72	@ 0x48
 8005bf0:	d907      	bls.n	8005c02 <HAL_DMA_Init+0x2aa>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b4e      	cmp	r3, #78	@ 0x4e
 8005bf8:	d905      	bls.n	8005c06 <HAL_DMA_Init+0x2ae>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b52      	cmp	r3, #82	@ 0x52
 8005c00:	d801      	bhi.n	8005c06 <HAL_DMA_Init+0x2ae>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e000      	b.n	8005c08 <HAL_DMA_Init+0x2b0>
 8005c06:	2300      	movs	r3, #0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c12:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f023 0307 	bic.w	r3, r3, #7
 8005c2a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d117      	bne.n	8005c6e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00e      	beq.n	8005c6e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f001 f9cf 	bl	8006ff4 <DMA_CheckFifoParam>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d008      	beq.n	8005c6e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2240      	movs	r2, #64	@ 0x40
 8005c60:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e197      	b.n	8005f9e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f001 f90a 	bl	8006e90 <DMA_CalcBaseAndBitshift>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c84:	f003 031f 	and.w	r3, r3, #31
 8005c88:	223f      	movs	r2, #63	@ 0x3f
 8005c8a:	409a      	lsls	r2, r3
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	609a      	str	r2, [r3, #8]
 8005c90:	e0cd      	b.n	8005e2e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a3b      	ldr	r2, [pc, #236]	@ (8005d84 <HAL_DMA_Init+0x42c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d022      	beq.n	8005ce2 <HAL_DMA_Init+0x38a>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a39      	ldr	r2, [pc, #228]	@ (8005d88 <HAL_DMA_Init+0x430>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d01d      	beq.n	8005ce2 <HAL_DMA_Init+0x38a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a38      	ldr	r2, [pc, #224]	@ (8005d8c <HAL_DMA_Init+0x434>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d018      	beq.n	8005ce2 <HAL_DMA_Init+0x38a>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a36      	ldr	r2, [pc, #216]	@ (8005d90 <HAL_DMA_Init+0x438>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d013      	beq.n	8005ce2 <HAL_DMA_Init+0x38a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a35      	ldr	r2, [pc, #212]	@ (8005d94 <HAL_DMA_Init+0x43c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d00e      	beq.n	8005ce2 <HAL_DMA_Init+0x38a>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a33      	ldr	r2, [pc, #204]	@ (8005d98 <HAL_DMA_Init+0x440>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d009      	beq.n	8005ce2 <HAL_DMA_Init+0x38a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a32      	ldr	r2, [pc, #200]	@ (8005d9c <HAL_DMA_Init+0x444>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d004      	beq.n	8005ce2 <HAL_DMA_Init+0x38a>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a30      	ldr	r2, [pc, #192]	@ (8005da0 <HAL_DMA_Init+0x448>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d101      	bne.n	8005ce6 <HAL_DMA_Init+0x38e>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e000      	b.n	8005ce8 <HAL_DMA_Init+0x390>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 8097 	beq.w	8005e1c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a24      	ldr	r2, [pc, #144]	@ (8005d84 <HAL_DMA_Init+0x42c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d021      	beq.n	8005d3c <HAL_DMA_Init+0x3e4>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a22      	ldr	r2, [pc, #136]	@ (8005d88 <HAL_DMA_Init+0x430>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d01c      	beq.n	8005d3c <HAL_DMA_Init+0x3e4>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a21      	ldr	r2, [pc, #132]	@ (8005d8c <HAL_DMA_Init+0x434>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d017      	beq.n	8005d3c <HAL_DMA_Init+0x3e4>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a1f      	ldr	r2, [pc, #124]	@ (8005d90 <HAL_DMA_Init+0x438>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d012      	beq.n	8005d3c <HAL_DMA_Init+0x3e4>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8005d94 <HAL_DMA_Init+0x43c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00d      	beq.n	8005d3c <HAL_DMA_Init+0x3e4>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a1c      	ldr	r2, [pc, #112]	@ (8005d98 <HAL_DMA_Init+0x440>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d008      	beq.n	8005d3c <HAL_DMA_Init+0x3e4>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a1b      	ldr	r2, [pc, #108]	@ (8005d9c <HAL_DMA_Init+0x444>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d003      	beq.n	8005d3c <HAL_DMA_Init+0x3e4>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a19      	ldr	r2, [pc, #100]	@ (8005da0 <HAL_DMA_Init+0x448>)
 8005d3a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4b13      	ldr	r3, [pc, #76]	@ (8005da4 <HAL_DMA_Init+0x44c>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2b40      	cmp	r3, #64	@ 0x40
 8005d62:	d021      	beq.n	8005da8 <HAL_DMA_Init+0x450>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	2b80      	cmp	r3, #128	@ 0x80
 8005d6a:	d102      	bne.n	8005d72 <HAL_DMA_Init+0x41a>
 8005d6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005d70:	e01b      	b.n	8005daa <HAL_DMA_Init+0x452>
 8005d72:	2300      	movs	r3, #0
 8005d74:	e019      	b.n	8005daa <HAL_DMA_Init+0x452>
 8005d76:	bf00      	nop
 8005d78:	fe10803f 	.word	0xfe10803f
 8005d7c:	5c001000 	.word	0x5c001000
 8005d80:	ffff0000 	.word	0xffff0000
 8005d84:	58025408 	.word	0x58025408
 8005d88:	5802541c 	.word	0x5802541c
 8005d8c:	58025430 	.word	0x58025430
 8005d90:	58025444 	.word	0x58025444
 8005d94:	58025458 	.word	0x58025458
 8005d98:	5802546c 	.word	0x5802546c
 8005d9c:	58025480 	.word	0x58025480
 8005da0:	58025494 	.word	0x58025494
 8005da4:	fffe000f 	.word	0xfffe000f
 8005da8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	68d2      	ldr	r2, [r2, #12]
 8005dae:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005db0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005db8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005dc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005dc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005dd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005dd8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	461a      	mov	r2, r3
 8005dee:	4b6e      	ldr	r3, [pc, #440]	@ (8005fa8 <HAL_DMA_Init+0x650>)
 8005df0:	4413      	add	r3, r2
 8005df2:	4a6e      	ldr	r2, [pc, #440]	@ (8005fac <HAL_DMA_Init+0x654>)
 8005df4:	fba2 2303 	umull	r2, r3, r2, r3
 8005df8:	091b      	lsrs	r3, r3, #4
 8005dfa:	009a      	lsls	r2, r3, #2
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f001 f845 	bl	8006e90 <DMA_CalcBaseAndBitshift>
 8005e06:	4603      	mov	r3, r0
 8005e08:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e0e:	f003 031f 	and.w	r3, r3, #31
 8005e12:	2201      	movs	r2, #1
 8005e14:	409a      	lsls	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	e008      	b.n	8005e2e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2240      	movs	r2, #64	@ 0x40
 8005e20:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2203      	movs	r2, #3
 8005e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e0b7      	b.n	8005f9e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a5f      	ldr	r2, [pc, #380]	@ (8005fb0 <HAL_DMA_Init+0x658>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d072      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a5d      	ldr	r2, [pc, #372]	@ (8005fb4 <HAL_DMA_Init+0x65c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d06d      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a5c      	ldr	r2, [pc, #368]	@ (8005fb8 <HAL_DMA_Init+0x660>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d068      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a5a      	ldr	r2, [pc, #360]	@ (8005fbc <HAL_DMA_Init+0x664>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d063      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a59      	ldr	r2, [pc, #356]	@ (8005fc0 <HAL_DMA_Init+0x668>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d05e      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a57      	ldr	r2, [pc, #348]	@ (8005fc4 <HAL_DMA_Init+0x66c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d059      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a56      	ldr	r2, [pc, #344]	@ (8005fc8 <HAL_DMA_Init+0x670>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d054      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a54      	ldr	r2, [pc, #336]	@ (8005fcc <HAL_DMA_Init+0x674>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d04f      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a53      	ldr	r2, [pc, #332]	@ (8005fd0 <HAL_DMA_Init+0x678>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d04a      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a51      	ldr	r2, [pc, #324]	@ (8005fd4 <HAL_DMA_Init+0x67c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d045      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a50      	ldr	r2, [pc, #320]	@ (8005fd8 <HAL_DMA_Init+0x680>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d040      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a4e      	ldr	r2, [pc, #312]	@ (8005fdc <HAL_DMA_Init+0x684>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d03b      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a4d      	ldr	r2, [pc, #308]	@ (8005fe0 <HAL_DMA_Init+0x688>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d036      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a4b      	ldr	r2, [pc, #300]	@ (8005fe4 <HAL_DMA_Init+0x68c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d031      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a4a      	ldr	r2, [pc, #296]	@ (8005fe8 <HAL_DMA_Init+0x690>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d02c      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a48      	ldr	r2, [pc, #288]	@ (8005fec <HAL_DMA_Init+0x694>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d027      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a47      	ldr	r2, [pc, #284]	@ (8005ff0 <HAL_DMA_Init+0x698>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d022      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a45      	ldr	r2, [pc, #276]	@ (8005ff4 <HAL_DMA_Init+0x69c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d01d      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a44      	ldr	r2, [pc, #272]	@ (8005ff8 <HAL_DMA_Init+0x6a0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d018      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a42      	ldr	r2, [pc, #264]	@ (8005ffc <HAL_DMA_Init+0x6a4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d013      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a41      	ldr	r2, [pc, #260]	@ (8006000 <HAL_DMA_Init+0x6a8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00e      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a3f      	ldr	r2, [pc, #252]	@ (8006004 <HAL_DMA_Init+0x6ac>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d009      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a3e      	ldr	r2, [pc, #248]	@ (8006008 <HAL_DMA_Init+0x6b0>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d004      	beq.n	8005f1e <HAL_DMA_Init+0x5c6>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a3c      	ldr	r2, [pc, #240]	@ (800600c <HAL_DMA_Init+0x6b4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d101      	bne.n	8005f22 <HAL_DMA_Init+0x5ca>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <HAL_DMA_Init+0x5cc>
 8005f22:	2300      	movs	r3, #0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d032      	beq.n	8005f8e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f001 f8df 	bl	80070ec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	2b80      	cmp	r3, #128	@ 0x80
 8005f34:	d102      	bne.n	8005f3c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f44:	b2d2      	uxtb	r2, r2
 8005f46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005f50:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d010      	beq.n	8005f7c <HAL_DMA_Init+0x624>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2b08      	cmp	r3, #8
 8005f60:	d80c      	bhi.n	8005f7c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f001 f95c 	bl	8007220 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005f78:	605a      	str	r2, [r3, #4]
 8005f7a:	e008      	b.n	8005f8e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	a7fdabf8 	.word	0xa7fdabf8
 8005fac:	cccccccd 	.word	0xcccccccd
 8005fb0:	40020010 	.word	0x40020010
 8005fb4:	40020028 	.word	0x40020028
 8005fb8:	40020040 	.word	0x40020040
 8005fbc:	40020058 	.word	0x40020058
 8005fc0:	40020070 	.word	0x40020070
 8005fc4:	40020088 	.word	0x40020088
 8005fc8:	400200a0 	.word	0x400200a0
 8005fcc:	400200b8 	.word	0x400200b8
 8005fd0:	40020410 	.word	0x40020410
 8005fd4:	40020428 	.word	0x40020428
 8005fd8:	40020440 	.word	0x40020440
 8005fdc:	40020458 	.word	0x40020458
 8005fe0:	40020470 	.word	0x40020470
 8005fe4:	40020488 	.word	0x40020488
 8005fe8:	400204a0 	.word	0x400204a0
 8005fec:	400204b8 	.word	0x400204b8
 8005ff0:	58025408 	.word	0x58025408
 8005ff4:	5802541c 	.word	0x5802541c
 8005ff8:	58025430 	.word	0x58025430
 8005ffc:	58025444 	.word	0x58025444
 8006000:	58025458 	.word	0x58025458
 8006004:	5802546c 	.word	0x5802546c
 8006008:	58025480 	.word	0x58025480
 800600c:	58025494 	.word	0x58025494

08006010 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
 800601c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e226      	b.n	800647a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <HAL_DMA_Start_IT+0x2a>
 8006036:	2302      	movs	r3, #2
 8006038:	e21f      	b.n	800647a <HAL_DMA_Start_IT+0x46a>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b01      	cmp	r3, #1
 800604c:	f040 820a 	bne.w	8006464 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a68      	ldr	r2, [pc, #416]	@ (8006204 <HAL_DMA_Start_IT+0x1f4>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d04a      	beq.n	80060fe <HAL_DMA_Start_IT+0xee>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a66      	ldr	r2, [pc, #408]	@ (8006208 <HAL_DMA_Start_IT+0x1f8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d045      	beq.n	80060fe <HAL_DMA_Start_IT+0xee>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a65      	ldr	r2, [pc, #404]	@ (800620c <HAL_DMA_Start_IT+0x1fc>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d040      	beq.n	80060fe <HAL_DMA_Start_IT+0xee>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a63      	ldr	r2, [pc, #396]	@ (8006210 <HAL_DMA_Start_IT+0x200>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d03b      	beq.n	80060fe <HAL_DMA_Start_IT+0xee>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a62      	ldr	r2, [pc, #392]	@ (8006214 <HAL_DMA_Start_IT+0x204>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d036      	beq.n	80060fe <HAL_DMA_Start_IT+0xee>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a60      	ldr	r2, [pc, #384]	@ (8006218 <HAL_DMA_Start_IT+0x208>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d031      	beq.n	80060fe <HAL_DMA_Start_IT+0xee>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a5f      	ldr	r2, [pc, #380]	@ (800621c <HAL_DMA_Start_IT+0x20c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d02c      	beq.n	80060fe <HAL_DMA_Start_IT+0xee>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a5d      	ldr	r2, [pc, #372]	@ (8006220 <HAL_DMA_Start_IT+0x210>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d027      	beq.n	80060fe <HAL_DMA_Start_IT+0xee>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a5c      	ldr	r2, [pc, #368]	@ (8006224 <HAL_DMA_Start_IT+0x214>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d022      	beq.n	80060fe <HAL_DMA_Start_IT+0xee>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a5a      	ldr	r2, [pc, #360]	@ (8006228 <HAL_DMA_Start_IT+0x218>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d01d      	beq.n	80060fe <HAL_DMA_Start_IT+0xee>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a59      	ldr	r2, [pc, #356]	@ (800622c <HAL_DMA_Start_IT+0x21c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d018      	beq.n	80060fe <HAL_DMA_Start_IT+0xee>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a57      	ldr	r2, [pc, #348]	@ (8006230 <HAL_DMA_Start_IT+0x220>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d013      	beq.n	80060fe <HAL_DMA_Start_IT+0xee>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a56      	ldr	r2, [pc, #344]	@ (8006234 <HAL_DMA_Start_IT+0x224>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00e      	beq.n	80060fe <HAL_DMA_Start_IT+0xee>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a54      	ldr	r2, [pc, #336]	@ (8006238 <HAL_DMA_Start_IT+0x228>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d009      	beq.n	80060fe <HAL_DMA_Start_IT+0xee>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a53      	ldr	r2, [pc, #332]	@ (800623c <HAL_DMA_Start_IT+0x22c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d004      	beq.n	80060fe <HAL_DMA_Start_IT+0xee>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a51      	ldr	r2, [pc, #324]	@ (8006240 <HAL_DMA_Start_IT+0x230>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d108      	bne.n	8006110 <HAL_DMA_Start_IT+0x100>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0201 	bic.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	e007      	b.n	8006120 <HAL_DMA_Start_IT+0x110>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0201 	bic.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	68b9      	ldr	r1, [r7, #8]
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 fd06 	bl	8006b38 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a34      	ldr	r2, [pc, #208]	@ (8006204 <HAL_DMA_Start_IT+0x1f4>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d04a      	beq.n	80061cc <HAL_DMA_Start_IT+0x1bc>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a33      	ldr	r2, [pc, #204]	@ (8006208 <HAL_DMA_Start_IT+0x1f8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d045      	beq.n	80061cc <HAL_DMA_Start_IT+0x1bc>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a31      	ldr	r2, [pc, #196]	@ (800620c <HAL_DMA_Start_IT+0x1fc>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d040      	beq.n	80061cc <HAL_DMA_Start_IT+0x1bc>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a30      	ldr	r2, [pc, #192]	@ (8006210 <HAL_DMA_Start_IT+0x200>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d03b      	beq.n	80061cc <HAL_DMA_Start_IT+0x1bc>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a2e      	ldr	r2, [pc, #184]	@ (8006214 <HAL_DMA_Start_IT+0x204>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d036      	beq.n	80061cc <HAL_DMA_Start_IT+0x1bc>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a2d      	ldr	r2, [pc, #180]	@ (8006218 <HAL_DMA_Start_IT+0x208>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d031      	beq.n	80061cc <HAL_DMA_Start_IT+0x1bc>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a2b      	ldr	r2, [pc, #172]	@ (800621c <HAL_DMA_Start_IT+0x20c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d02c      	beq.n	80061cc <HAL_DMA_Start_IT+0x1bc>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a2a      	ldr	r2, [pc, #168]	@ (8006220 <HAL_DMA_Start_IT+0x210>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d027      	beq.n	80061cc <HAL_DMA_Start_IT+0x1bc>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a28      	ldr	r2, [pc, #160]	@ (8006224 <HAL_DMA_Start_IT+0x214>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d022      	beq.n	80061cc <HAL_DMA_Start_IT+0x1bc>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a27      	ldr	r2, [pc, #156]	@ (8006228 <HAL_DMA_Start_IT+0x218>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d01d      	beq.n	80061cc <HAL_DMA_Start_IT+0x1bc>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a25      	ldr	r2, [pc, #148]	@ (800622c <HAL_DMA_Start_IT+0x21c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d018      	beq.n	80061cc <HAL_DMA_Start_IT+0x1bc>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a24      	ldr	r2, [pc, #144]	@ (8006230 <HAL_DMA_Start_IT+0x220>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d013      	beq.n	80061cc <HAL_DMA_Start_IT+0x1bc>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a22      	ldr	r2, [pc, #136]	@ (8006234 <HAL_DMA_Start_IT+0x224>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d00e      	beq.n	80061cc <HAL_DMA_Start_IT+0x1bc>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a21      	ldr	r2, [pc, #132]	@ (8006238 <HAL_DMA_Start_IT+0x228>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d009      	beq.n	80061cc <HAL_DMA_Start_IT+0x1bc>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a1f      	ldr	r2, [pc, #124]	@ (800623c <HAL_DMA_Start_IT+0x22c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d004      	beq.n	80061cc <HAL_DMA_Start_IT+0x1bc>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a1e      	ldr	r2, [pc, #120]	@ (8006240 <HAL_DMA_Start_IT+0x230>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d101      	bne.n	80061d0 <HAL_DMA_Start_IT+0x1c0>
 80061cc:	2301      	movs	r3, #1
 80061ce:	e000      	b.n	80061d2 <HAL_DMA_Start_IT+0x1c2>
 80061d0:	2300      	movs	r3, #0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d036      	beq.n	8006244 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f023 021e 	bic.w	r2, r3, #30
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0216 	orr.w	r2, r2, #22
 80061e8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d03e      	beq.n	8006270 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f042 0208 	orr.w	r2, r2, #8
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	e035      	b.n	8006270 <HAL_DMA_Start_IT+0x260>
 8006204:	40020010 	.word	0x40020010
 8006208:	40020028 	.word	0x40020028
 800620c:	40020040 	.word	0x40020040
 8006210:	40020058 	.word	0x40020058
 8006214:	40020070 	.word	0x40020070
 8006218:	40020088 	.word	0x40020088
 800621c:	400200a0 	.word	0x400200a0
 8006220:	400200b8 	.word	0x400200b8
 8006224:	40020410 	.word	0x40020410
 8006228:	40020428 	.word	0x40020428
 800622c:	40020440 	.word	0x40020440
 8006230:	40020458 	.word	0x40020458
 8006234:	40020470 	.word	0x40020470
 8006238:	40020488 	.word	0x40020488
 800623c:	400204a0 	.word	0x400204a0
 8006240:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f023 020e 	bic.w	r2, r3, #14
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 020a 	orr.w	r2, r2, #10
 8006256:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625c:	2b00      	cmp	r3, #0
 800625e:	d007      	beq.n	8006270 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0204 	orr.w	r2, r2, #4
 800626e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a83      	ldr	r2, [pc, #524]	@ (8006484 <HAL_DMA_Start_IT+0x474>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d072      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a82      	ldr	r2, [pc, #520]	@ (8006488 <HAL_DMA_Start_IT+0x478>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d06d      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a80      	ldr	r2, [pc, #512]	@ (800648c <HAL_DMA_Start_IT+0x47c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d068      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a7f      	ldr	r2, [pc, #508]	@ (8006490 <HAL_DMA_Start_IT+0x480>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d063      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a7d      	ldr	r2, [pc, #500]	@ (8006494 <HAL_DMA_Start_IT+0x484>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d05e      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a7c      	ldr	r2, [pc, #496]	@ (8006498 <HAL_DMA_Start_IT+0x488>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d059      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a7a      	ldr	r2, [pc, #488]	@ (800649c <HAL_DMA_Start_IT+0x48c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d054      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a79      	ldr	r2, [pc, #484]	@ (80064a0 <HAL_DMA_Start_IT+0x490>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d04f      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a77      	ldr	r2, [pc, #476]	@ (80064a4 <HAL_DMA_Start_IT+0x494>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d04a      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a76      	ldr	r2, [pc, #472]	@ (80064a8 <HAL_DMA_Start_IT+0x498>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d045      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a74      	ldr	r2, [pc, #464]	@ (80064ac <HAL_DMA_Start_IT+0x49c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d040      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a73      	ldr	r2, [pc, #460]	@ (80064b0 <HAL_DMA_Start_IT+0x4a0>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d03b      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a71      	ldr	r2, [pc, #452]	@ (80064b4 <HAL_DMA_Start_IT+0x4a4>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d036      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a70      	ldr	r2, [pc, #448]	@ (80064b8 <HAL_DMA_Start_IT+0x4a8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d031      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a6e      	ldr	r2, [pc, #440]	@ (80064bc <HAL_DMA_Start_IT+0x4ac>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d02c      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a6d      	ldr	r2, [pc, #436]	@ (80064c0 <HAL_DMA_Start_IT+0x4b0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d027      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a6b      	ldr	r2, [pc, #428]	@ (80064c4 <HAL_DMA_Start_IT+0x4b4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d022      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a6a      	ldr	r2, [pc, #424]	@ (80064c8 <HAL_DMA_Start_IT+0x4b8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d01d      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a68      	ldr	r2, [pc, #416]	@ (80064cc <HAL_DMA_Start_IT+0x4bc>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d018      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a67      	ldr	r2, [pc, #412]	@ (80064d0 <HAL_DMA_Start_IT+0x4c0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d013      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a65      	ldr	r2, [pc, #404]	@ (80064d4 <HAL_DMA_Start_IT+0x4c4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d00e      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a64      	ldr	r2, [pc, #400]	@ (80064d8 <HAL_DMA_Start_IT+0x4c8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d009      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a62      	ldr	r2, [pc, #392]	@ (80064dc <HAL_DMA_Start_IT+0x4cc>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d004      	beq.n	8006360 <HAL_DMA_Start_IT+0x350>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a61      	ldr	r2, [pc, #388]	@ (80064e0 <HAL_DMA_Start_IT+0x4d0>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d101      	bne.n	8006364 <HAL_DMA_Start_IT+0x354>
 8006360:	2301      	movs	r3, #1
 8006362:	e000      	b.n	8006366 <HAL_DMA_Start_IT+0x356>
 8006364:	2300      	movs	r3, #0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d01a      	beq.n	80063a0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d007      	beq.n	8006388 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006382:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006386:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800638c:	2b00      	cmp	r3, #0
 800638e:	d007      	beq.n	80063a0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800639a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800639e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a37      	ldr	r2, [pc, #220]	@ (8006484 <HAL_DMA_Start_IT+0x474>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d04a      	beq.n	8006440 <HAL_DMA_Start_IT+0x430>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a36      	ldr	r2, [pc, #216]	@ (8006488 <HAL_DMA_Start_IT+0x478>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d045      	beq.n	8006440 <HAL_DMA_Start_IT+0x430>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a34      	ldr	r2, [pc, #208]	@ (800648c <HAL_DMA_Start_IT+0x47c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d040      	beq.n	8006440 <HAL_DMA_Start_IT+0x430>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a33      	ldr	r2, [pc, #204]	@ (8006490 <HAL_DMA_Start_IT+0x480>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d03b      	beq.n	8006440 <HAL_DMA_Start_IT+0x430>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a31      	ldr	r2, [pc, #196]	@ (8006494 <HAL_DMA_Start_IT+0x484>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d036      	beq.n	8006440 <HAL_DMA_Start_IT+0x430>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a30      	ldr	r2, [pc, #192]	@ (8006498 <HAL_DMA_Start_IT+0x488>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d031      	beq.n	8006440 <HAL_DMA_Start_IT+0x430>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a2e      	ldr	r2, [pc, #184]	@ (800649c <HAL_DMA_Start_IT+0x48c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d02c      	beq.n	8006440 <HAL_DMA_Start_IT+0x430>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a2d      	ldr	r2, [pc, #180]	@ (80064a0 <HAL_DMA_Start_IT+0x490>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d027      	beq.n	8006440 <HAL_DMA_Start_IT+0x430>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a2b      	ldr	r2, [pc, #172]	@ (80064a4 <HAL_DMA_Start_IT+0x494>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d022      	beq.n	8006440 <HAL_DMA_Start_IT+0x430>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a2a      	ldr	r2, [pc, #168]	@ (80064a8 <HAL_DMA_Start_IT+0x498>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d01d      	beq.n	8006440 <HAL_DMA_Start_IT+0x430>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a28      	ldr	r2, [pc, #160]	@ (80064ac <HAL_DMA_Start_IT+0x49c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d018      	beq.n	8006440 <HAL_DMA_Start_IT+0x430>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a27      	ldr	r2, [pc, #156]	@ (80064b0 <HAL_DMA_Start_IT+0x4a0>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d013      	beq.n	8006440 <HAL_DMA_Start_IT+0x430>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a25      	ldr	r2, [pc, #148]	@ (80064b4 <HAL_DMA_Start_IT+0x4a4>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00e      	beq.n	8006440 <HAL_DMA_Start_IT+0x430>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a24      	ldr	r2, [pc, #144]	@ (80064b8 <HAL_DMA_Start_IT+0x4a8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d009      	beq.n	8006440 <HAL_DMA_Start_IT+0x430>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a22      	ldr	r2, [pc, #136]	@ (80064bc <HAL_DMA_Start_IT+0x4ac>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d004      	beq.n	8006440 <HAL_DMA_Start_IT+0x430>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a21      	ldr	r2, [pc, #132]	@ (80064c0 <HAL_DMA_Start_IT+0x4b0>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d108      	bne.n	8006452 <HAL_DMA_Start_IT+0x442>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0201 	orr.w	r2, r2, #1
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	e012      	b.n	8006478 <HAL_DMA_Start_IT+0x468>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f042 0201 	orr.w	r2, r2, #1
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	e009      	b.n	8006478 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800646a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006478:	7dfb      	ldrb	r3, [r7, #23]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	40020010 	.word	0x40020010
 8006488:	40020028 	.word	0x40020028
 800648c:	40020040 	.word	0x40020040
 8006490:	40020058 	.word	0x40020058
 8006494:	40020070 	.word	0x40020070
 8006498:	40020088 	.word	0x40020088
 800649c:	400200a0 	.word	0x400200a0
 80064a0:	400200b8 	.word	0x400200b8
 80064a4:	40020410 	.word	0x40020410
 80064a8:	40020428 	.word	0x40020428
 80064ac:	40020440 	.word	0x40020440
 80064b0:	40020458 	.word	0x40020458
 80064b4:	40020470 	.word	0x40020470
 80064b8:	40020488 	.word	0x40020488
 80064bc:	400204a0 	.word	0x400204a0
 80064c0:	400204b8 	.word	0x400204b8
 80064c4:	58025408 	.word	0x58025408
 80064c8:	5802541c 	.word	0x5802541c
 80064cc:	58025430 	.word	0x58025430
 80064d0:	58025444 	.word	0x58025444
 80064d4:	58025458 	.word	0x58025458
 80064d8:	5802546c 	.word	0x5802546c
 80064dc:	58025480 	.word	0x58025480
 80064e0:	58025494 	.word	0x58025494

080064e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80064ec:	f7ff f856 	bl	800559c <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e2dc      	b.n	8006ab6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d008      	beq.n	800651a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2280      	movs	r2, #128	@ 0x80
 800650c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e2cd      	b.n	8006ab6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a76      	ldr	r2, [pc, #472]	@ (80066f8 <HAL_DMA_Abort+0x214>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d04a      	beq.n	80065ba <HAL_DMA_Abort+0xd6>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a74      	ldr	r2, [pc, #464]	@ (80066fc <HAL_DMA_Abort+0x218>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d045      	beq.n	80065ba <HAL_DMA_Abort+0xd6>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a73      	ldr	r2, [pc, #460]	@ (8006700 <HAL_DMA_Abort+0x21c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d040      	beq.n	80065ba <HAL_DMA_Abort+0xd6>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a71      	ldr	r2, [pc, #452]	@ (8006704 <HAL_DMA_Abort+0x220>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d03b      	beq.n	80065ba <HAL_DMA_Abort+0xd6>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a70      	ldr	r2, [pc, #448]	@ (8006708 <HAL_DMA_Abort+0x224>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d036      	beq.n	80065ba <HAL_DMA_Abort+0xd6>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a6e      	ldr	r2, [pc, #440]	@ (800670c <HAL_DMA_Abort+0x228>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d031      	beq.n	80065ba <HAL_DMA_Abort+0xd6>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a6d      	ldr	r2, [pc, #436]	@ (8006710 <HAL_DMA_Abort+0x22c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d02c      	beq.n	80065ba <HAL_DMA_Abort+0xd6>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a6b      	ldr	r2, [pc, #428]	@ (8006714 <HAL_DMA_Abort+0x230>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d027      	beq.n	80065ba <HAL_DMA_Abort+0xd6>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a6a      	ldr	r2, [pc, #424]	@ (8006718 <HAL_DMA_Abort+0x234>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d022      	beq.n	80065ba <HAL_DMA_Abort+0xd6>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a68      	ldr	r2, [pc, #416]	@ (800671c <HAL_DMA_Abort+0x238>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01d      	beq.n	80065ba <HAL_DMA_Abort+0xd6>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a67      	ldr	r2, [pc, #412]	@ (8006720 <HAL_DMA_Abort+0x23c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d018      	beq.n	80065ba <HAL_DMA_Abort+0xd6>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a65      	ldr	r2, [pc, #404]	@ (8006724 <HAL_DMA_Abort+0x240>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d013      	beq.n	80065ba <HAL_DMA_Abort+0xd6>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a64      	ldr	r2, [pc, #400]	@ (8006728 <HAL_DMA_Abort+0x244>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00e      	beq.n	80065ba <HAL_DMA_Abort+0xd6>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a62      	ldr	r2, [pc, #392]	@ (800672c <HAL_DMA_Abort+0x248>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d009      	beq.n	80065ba <HAL_DMA_Abort+0xd6>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a61      	ldr	r2, [pc, #388]	@ (8006730 <HAL_DMA_Abort+0x24c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d004      	beq.n	80065ba <HAL_DMA_Abort+0xd6>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a5f      	ldr	r2, [pc, #380]	@ (8006734 <HAL_DMA_Abort+0x250>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d101      	bne.n	80065be <HAL_DMA_Abort+0xda>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e000      	b.n	80065c0 <HAL_DMA_Abort+0xdc>
 80065be:	2300      	movs	r3, #0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d013      	beq.n	80065ec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 021e 	bic.w	r2, r2, #30
 80065d2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	695a      	ldr	r2, [r3, #20]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065e2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	e00a      	b.n	8006602 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 020e 	bic.w	r2, r2, #14
 80065fa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a3c      	ldr	r2, [pc, #240]	@ (80066f8 <HAL_DMA_Abort+0x214>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d072      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a3a      	ldr	r2, [pc, #232]	@ (80066fc <HAL_DMA_Abort+0x218>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d06d      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a39      	ldr	r2, [pc, #228]	@ (8006700 <HAL_DMA_Abort+0x21c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d068      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a37      	ldr	r2, [pc, #220]	@ (8006704 <HAL_DMA_Abort+0x220>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d063      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a36      	ldr	r2, [pc, #216]	@ (8006708 <HAL_DMA_Abort+0x224>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d05e      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a34      	ldr	r2, [pc, #208]	@ (800670c <HAL_DMA_Abort+0x228>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d059      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a33      	ldr	r2, [pc, #204]	@ (8006710 <HAL_DMA_Abort+0x22c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d054      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a31      	ldr	r2, [pc, #196]	@ (8006714 <HAL_DMA_Abort+0x230>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d04f      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a30      	ldr	r2, [pc, #192]	@ (8006718 <HAL_DMA_Abort+0x234>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d04a      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a2e      	ldr	r2, [pc, #184]	@ (800671c <HAL_DMA_Abort+0x238>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d045      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a2d      	ldr	r2, [pc, #180]	@ (8006720 <HAL_DMA_Abort+0x23c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d040      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a2b      	ldr	r2, [pc, #172]	@ (8006724 <HAL_DMA_Abort+0x240>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d03b      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a2a      	ldr	r2, [pc, #168]	@ (8006728 <HAL_DMA_Abort+0x244>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d036      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a28      	ldr	r2, [pc, #160]	@ (800672c <HAL_DMA_Abort+0x248>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d031      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a27      	ldr	r2, [pc, #156]	@ (8006730 <HAL_DMA_Abort+0x24c>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d02c      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a25      	ldr	r2, [pc, #148]	@ (8006734 <HAL_DMA_Abort+0x250>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d027      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a24      	ldr	r2, [pc, #144]	@ (8006738 <HAL_DMA_Abort+0x254>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d022      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a22      	ldr	r2, [pc, #136]	@ (800673c <HAL_DMA_Abort+0x258>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d01d      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a21      	ldr	r2, [pc, #132]	@ (8006740 <HAL_DMA_Abort+0x25c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d018      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006744 <HAL_DMA_Abort+0x260>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d013      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006748 <HAL_DMA_Abort+0x264>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00e      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a1c      	ldr	r2, [pc, #112]	@ (800674c <HAL_DMA_Abort+0x268>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d009      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006750 <HAL_DMA_Abort+0x26c>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d004      	beq.n	80066f2 <HAL_DMA_Abort+0x20e>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a19      	ldr	r2, [pc, #100]	@ (8006754 <HAL_DMA_Abort+0x270>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d132      	bne.n	8006758 <HAL_DMA_Abort+0x274>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e031      	b.n	800675a <HAL_DMA_Abort+0x276>
 80066f6:	bf00      	nop
 80066f8:	40020010 	.word	0x40020010
 80066fc:	40020028 	.word	0x40020028
 8006700:	40020040 	.word	0x40020040
 8006704:	40020058 	.word	0x40020058
 8006708:	40020070 	.word	0x40020070
 800670c:	40020088 	.word	0x40020088
 8006710:	400200a0 	.word	0x400200a0
 8006714:	400200b8 	.word	0x400200b8
 8006718:	40020410 	.word	0x40020410
 800671c:	40020428 	.word	0x40020428
 8006720:	40020440 	.word	0x40020440
 8006724:	40020458 	.word	0x40020458
 8006728:	40020470 	.word	0x40020470
 800672c:	40020488 	.word	0x40020488
 8006730:	400204a0 	.word	0x400204a0
 8006734:	400204b8 	.word	0x400204b8
 8006738:	58025408 	.word	0x58025408
 800673c:	5802541c 	.word	0x5802541c
 8006740:	58025430 	.word	0x58025430
 8006744:	58025444 	.word	0x58025444
 8006748:	58025458 	.word	0x58025458
 800674c:	5802546c 	.word	0x5802546c
 8006750:	58025480 	.word	0x58025480
 8006754:	58025494 	.word	0x58025494
 8006758:	2300      	movs	r3, #0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d007      	beq.n	800676e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006768:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800676c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a6d      	ldr	r2, [pc, #436]	@ (8006928 <HAL_DMA_Abort+0x444>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d04a      	beq.n	800680e <HAL_DMA_Abort+0x32a>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a6b      	ldr	r2, [pc, #428]	@ (800692c <HAL_DMA_Abort+0x448>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d045      	beq.n	800680e <HAL_DMA_Abort+0x32a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a6a      	ldr	r2, [pc, #424]	@ (8006930 <HAL_DMA_Abort+0x44c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d040      	beq.n	800680e <HAL_DMA_Abort+0x32a>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a68      	ldr	r2, [pc, #416]	@ (8006934 <HAL_DMA_Abort+0x450>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d03b      	beq.n	800680e <HAL_DMA_Abort+0x32a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a67      	ldr	r2, [pc, #412]	@ (8006938 <HAL_DMA_Abort+0x454>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d036      	beq.n	800680e <HAL_DMA_Abort+0x32a>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a65      	ldr	r2, [pc, #404]	@ (800693c <HAL_DMA_Abort+0x458>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d031      	beq.n	800680e <HAL_DMA_Abort+0x32a>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a64      	ldr	r2, [pc, #400]	@ (8006940 <HAL_DMA_Abort+0x45c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d02c      	beq.n	800680e <HAL_DMA_Abort+0x32a>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a62      	ldr	r2, [pc, #392]	@ (8006944 <HAL_DMA_Abort+0x460>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d027      	beq.n	800680e <HAL_DMA_Abort+0x32a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a61      	ldr	r2, [pc, #388]	@ (8006948 <HAL_DMA_Abort+0x464>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d022      	beq.n	800680e <HAL_DMA_Abort+0x32a>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a5f      	ldr	r2, [pc, #380]	@ (800694c <HAL_DMA_Abort+0x468>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d01d      	beq.n	800680e <HAL_DMA_Abort+0x32a>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a5e      	ldr	r2, [pc, #376]	@ (8006950 <HAL_DMA_Abort+0x46c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d018      	beq.n	800680e <HAL_DMA_Abort+0x32a>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a5c      	ldr	r2, [pc, #368]	@ (8006954 <HAL_DMA_Abort+0x470>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d013      	beq.n	800680e <HAL_DMA_Abort+0x32a>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a5b      	ldr	r2, [pc, #364]	@ (8006958 <HAL_DMA_Abort+0x474>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00e      	beq.n	800680e <HAL_DMA_Abort+0x32a>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a59      	ldr	r2, [pc, #356]	@ (800695c <HAL_DMA_Abort+0x478>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d009      	beq.n	800680e <HAL_DMA_Abort+0x32a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a58      	ldr	r2, [pc, #352]	@ (8006960 <HAL_DMA_Abort+0x47c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d004      	beq.n	800680e <HAL_DMA_Abort+0x32a>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a56      	ldr	r2, [pc, #344]	@ (8006964 <HAL_DMA_Abort+0x480>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d108      	bne.n	8006820 <HAL_DMA_Abort+0x33c>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0201 	bic.w	r2, r2, #1
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	e007      	b.n	8006830 <HAL_DMA_Abort+0x34c>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0201 	bic.w	r2, r2, #1
 800682e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006830:	e013      	b.n	800685a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006832:	f7fe feb3 	bl	800559c <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b05      	cmp	r3, #5
 800683e:	d90c      	bls.n	800685a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2220      	movs	r2, #32
 8006844:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2203      	movs	r2, #3
 800684a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e12d      	b.n	8006ab6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1e5      	bne.n	8006832 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a2f      	ldr	r2, [pc, #188]	@ (8006928 <HAL_DMA_Abort+0x444>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d04a      	beq.n	8006906 <HAL_DMA_Abort+0x422>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a2d      	ldr	r2, [pc, #180]	@ (800692c <HAL_DMA_Abort+0x448>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d045      	beq.n	8006906 <HAL_DMA_Abort+0x422>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a2c      	ldr	r2, [pc, #176]	@ (8006930 <HAL_DMA_Abort+0x44c>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d040      	beq.n	8006906 <HAL_DMA_Abort+0x422>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a2a      	ldr	r2, [pc, #168]	@ (8006934 <HAL_DMA_Abort+0x450>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d03b      	beq.n	8006906 <HAL_DMA_Abort+0x422>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a29      	ldr	r2, [pc, #164]	@ (8006938 <HAL_DMA_Abort+0x454>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d036      	beq.n	8006906 <HAL_DMA_Abort+0x422>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a27      	ldr	r2, [pc, #156]	@ (800693c <HAL_DMA_Abort+0x458>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d031      	beq.n	8006906 <HAL_DMA_Abort+0x422>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a26      	ldr	r2, [pc, #152]	@ (8006940 <HAL_DMA_Abort+0x45c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d02c      	beq.n	8006906 <HAL_DMA_Abort+0x422>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a24      	ldr	r2, [pc, #144]	@ (8006944 <HAL_DMA_Abort+0x460>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d027      	beq.n	8006906 <HAL_DMA_Abort+0x422>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a23      	ldr	r2, [pc, #140]	@ (8006948 <HAL_DMA_Abort+0x464>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d022      	beq.n	8006906 <HAL_DMA_Abort+0x422>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a21      	ldr	r2, [pc, #132]	@ (800694c <HAL_DMA_Abort+0x468>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d01d      	beq.n	8006906 <HAL_DMA_Abort+0x422>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a20      	ldr	r2, [pc, #128]	@ (8006950 <HAL_DMA_Abort+0x46c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d018      	beq.n	8006906 <HAL_DMA_Abort+0x422>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a1e      	ldr	r2, [pc, #120]	@ (8006954 <HAL_DMA_Abort+0x470>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d013      	beq.n	8006906 <HAL_DMA_Abort+0x422>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a1d      	ldr	r2, [pc, #116]	@ (8006958 <HAL_DMA_Abort+0x474>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d00e      	beq.n	8006906 <HAL_DMA_Abort+0x422>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a1b      	ldr	r2, [pc, #108]	@ (800695c <HAL_DMA_Abort+0x478>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d009      	beq.n	8006906 <HAL_DMA_Abort+0x422>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a1a      	ldr	r2, [pc, #104]	@ (8006960 <HAL_DMA_Abort+0x47c>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d004      	beq.n	8006906 <HAL_DMA_Abort+0x422>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a18      	ldr	r2, [pc, #96]	@ (8006964 <HAL_DMA_Abort+0x480>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d101      	bne.n	800690a <HAL_DMA_Abort+0x426>
 8006906:	2301      	movs	r3, #1
 8006908:	e000      	b.n	800690c <HAL_DMA_Abort+0x428>
 800690a:	2300      	movs	r3, #0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d02b      	beq.n	8006968 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006914:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800691a:	f003 031f 	and.w	r3, r3, #31
 800691e:	223f      	movs	r2, #63	@ 0x3f
 8006920:	409a      	lsls	r2, r3
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	609a      	str	r2, [r3, #8]
 8006926:	e02a      	b.n	800697e <HAL_DMA_Abort+0x49a>
 8006928:	40020010 	.word	0x40020010
 800692c:	40020028 	.word	0x40020028
 8006930:	40020040 	.word	0x40020040
 8006934:	40020058 	.word	0x40020058
 8006938:	40020070 	.word	0x40020070
 800693c:	40020088 	.word	0x40020088
 8006940:	400200a0 	.word	0x400200a0
 8006944:	400200b8 	.word	0x400200b8
 8006948:	40020410 	.word	0x40020410
 800694c:	40020428 	.word	0x40020428
 8006950:	40020440 	.word	0x40020440
 8006954:	40020458 	.word	0x40020458
 8006958:	40020470 	.word	0x40020470
 800695c:	40020488 	.word	0x40020488
 8006960:	400204a0 	.word	0x400204a0
 8006964:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800696c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006972:	f003 031f 	and.w	r3, r3, #31
 8006976:	2201      	movs	r2, #1
 8006978:	409a      	lsls	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a4f      	ldr	r2, [pc, #316]	@ (8006ac0 <HAL_DMA_Abort+0x5dc>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d072      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a4d      	ldr	r2, [pc, #308]	@ (8006ac4 <HAL_DMA_Abort+0x5e0>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d06d      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a4c      	ldr	r2, [pc, #304]	@ (8006ac8 <HAL_DMA_Abort+0x5e4>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d068      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a4a      	ldr	r2, [pc, #296]	@ (8006acc <HAL_DMA_Abort+0x5e8>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d063      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a49      	ldr	r2, [pc, #292]	@ (8006ad0 <HAL_DMA_Abort+0x5ec>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d05e      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a47      	ldr	r2, [pc, #284]	@ (8006ad4 <HAL_DMA_Abort+0x5f0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d059      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a46      	ldr	r2, [pc, #280]	@ (8006ad8 <HAL_DMA_Abort+0x5f4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d054      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a44      	ldr	r2, [pc, #272]	@ (8006adc <HAL_DMA_Abort+0x5f8>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d04f      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a43      	ldr	r2, [pc, #268]	@ (8006ae0 <HAL_DMA_Abort+0x5fc>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d04a      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a41      	ldr	r2, [pc, #260]	@ (8006ae4 <HAL_DMA_Abort+0x600>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d045      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a40      	ldr	r2, [pc, #256]	@ (8006ae8 <HAL_DMA_Abort+0x604>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d040      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a3e      	ldr	r2, [pc, #248]	@ (8006aec <HAL_DMA_Abort+0x608>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d03b      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a3d      	ldr	r2, [pc, #244]	@ (8006af0 <HAL_DMA_Abort+0x60c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d036      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a3b      	ldr	r2, [pc, #236]	@ (8006af4 <HAL_DMA_Abort+0x610>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d031      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a3a      	ldr	r2, [pc, #232]	@ (8006af8 <HAL_DMA_Abort+0x614>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d02c      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a38      	ldr	r2, [pc, #224]	@ (8006afc <HAL_DMA_Abort+0x618>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d027      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a37      	ldr	r2, [pc, #220]	@ (8006b00 <HAL_DMA_Abort+0x61c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d022      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a35      	ldr	r2, [pc, #212]	@ (8006b04 <HAL_DMA_Abort+0x620>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d01d      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a34      	ldr	r2, [pc, #208]	@ (8006b08 <HAL_DMA_Abort+0x624>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d018      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a32      	ldr	r2, [pc, #200]	@ (8006b0c <HAL_DMA_Abort+0x628>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d013      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a31      	ldr	r2, [pc, #196]	@ (8006b10 <HAL_DMA_Abort+0x62c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00e      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a2f      	ldr	r2, [pc, #188]	@ (8006b14 <HAL_DMA_Abort+0x630>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d009      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a2e      	ldr	r2, [pc, #184]	@ (8006b18 <HAL_DMA_Abort+0x634>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d004      	beq.n	8006a6e <HAL_DMA_Abort+0x58a>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a2c      	ldr	r2, [pc, #176]	@ (8006b1c <HAL_DMA_Abort+0x638>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d101      	bne.n	8006a72 <HAL_DMA_Abort+0x58e>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e000      	b.n	8006a74 <HAL_DMA_Abort+0x590>
 8006a72:	2300      	movs	r3, #0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d015      	beq.n	8006aa4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006a80:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00c      	beq.n	8006aa4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a98:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006aa2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3718      	adds	r7, #24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	40020010 	.word	0x40020010
 8006ac4:	40020028 	.word	0x40020028
 8006ac8:	40020040 	.word	0x40020040
 8006acc:	40020058 	.word	0x40020058
 8006ad0:	40020070 	.word	0x40020070
 8006ad4:	40020088 	.word	0x40020088
 8006ad8:	400200a0 	.word	0x400200a0
 8006adc:	400200b8 	.word	0x400200b8
 8006ae0:	40020410 	.word	0x40020410
 8006ae4:	40020428 	.word	0x40020428
 8006ae8:	40020440 	.word	0x40020440
 8006aec:	40020458 	.word	0x40020458
 8006af0:	40020470 	.word	0x40020470
 8006af4:	40020488 	.word	0x40020488
 8006af8:	400204a0 	.word	0x400204a0
 8006afc:	400204b8 	.word	0x400204b8
 8006b00:	58025408 	.word	0x58025408
 8006b04:	5802541c 	.word	0x5802541c
 8006b08:	58025430 	.word	0x58025430
 8006b0c:	58025444 	.word	0x58025444
 8006b10:	58025458 	.word	0x58025458
 8006b14:	5802546c 	.word	0x5802546c
 8006b18:	58025480 	.word	0x58025480
 8006b1c:	58025494 	.word	0x58025494

08006b20 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
 8006b44:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b4a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b50:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a7f      	ldr	r2, [pc, #508]	@ (8006d54 <DMA_SetConfig+0x21c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d072      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a7d      	ldr	r2, [pc, #500]	@ (8006d58 <DMA_SetConfig+0x220>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d06d      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a7c      	ldr	r2, [pc, #496]	@ (8006d5c <DMA_SetConfig+0x224>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d068      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a7a      	ldr	r2, [pc, #488]	@ (8006d60 <DMA_SetConfig+0x228>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d063      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a79      	ldr	r2, [pc, #484]	@ (8006d64 <DMA_SetConfig+0x22c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d05e      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a77      	ldr	r2, [pc, #476]	@ (8006d68 <DMA_SetConfig+0x230>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d059      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a76      	ldr	r2, [pc, #472]	@ (8006d6c <DMA_SetConfig+0x234>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d054      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a74      	ldr	r2, [pc, #464]	@ (8006d70 <DMA_SetConfig+0x238>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d04f      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a73      	ldr	r2, [pc, #460]	@ (8006d74 <DMA_SetConfig+0x23c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d04a      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a71      	ldr	r2, [pc, #452]	@ (8006d78 <DMA_SetConfig+0x240>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d045      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a70      	ldr	r2, [pc, #448]	@ (8006d7c <DMA_SetConfig+0x244>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d040      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a6e      	ldr	r2, [pc, #440]	@ (8006d80 <DMA_SetConfig+0x248>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d03b      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a6d      	ldr	r2, [pc, #436]	@ (8006d84 <DMA_SetConfig+0x24c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d036      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a6b      	ldr	r2, [pc, #428]	@ (8006d88 <DMA_SetConfig+0x250>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d031      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a6a      	ldr	r2, [pc, #424]	@ (8006d8c <DMA_SetConfig+0x254>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d02c      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a68      	ldr	r2, [pc, #416]	@ (8006d90 <DMA_SetConfig+0x258>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d027      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a67      	ldr	r2, [pc, #412]	@ (8006d94 <DMA_SetConfig+0x25c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d022      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a65      	ldr	r2, [pc, #404]	@ (8006d98 <DMA_SetConfig+0x260>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d01d      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a64      	ldr	r2, [pc, #400]	@ (8006d9c <DMA_SetConfig+0x264>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d018      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a62      	ldr	r2, [pc, #392]	@ (8006da0 <DMA_SetConfig+0x268>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d013      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a61      	ldr	r2, [pc, #388]	@ (8006da4 <DMA_SetConfig+0x26c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d00e      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a5f      	ldr	r2, [pc, #380]	@ (8006da8 <DMA_SetConfig+0x270>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d009      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a5e      	ldr	r2, [pc, #376]	@ (8006dac <DMA_SetConfig+0x274>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d004      	beq.n	8006c42 <DMA_SetConfig+0x10a>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a5c      	ldr	r2, [pc, #368]	@ (8006db0 <DMA_SetConfig+0x278>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d101      	bne.n	8006c46 <DMA_SetConfig+0x10e>
 8006c42:	2301      	movs	r3, #1
 8006c44:	e000      	b.n	8006c48 <DMA_SetConfig+0x110>
 8006c46:	2300      	movs	r3, #0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00d      	beq.n	8006c68 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006c54:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d004      	beq.n	8006c68 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006c66:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a39      	ldr	r2, [pc, #228]	@ (8006d54 <DMA_SetConfig+0x21c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d04a      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a38      	ldr	r2, [pc, #224]	@ (8006d58 <DMA_SetConfig+0x220>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d045      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a36      	ldr	r2, [pc, #216]	@ (8006d5c <DMA_SetConfig+0x224>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d040      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a35      	ldr	r2, [pc, #212]	@ (8006d60 <DMA_SetConfig+0x228>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d03b      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a33      	ldr	r2, [pc, #204]	@ (8006d64 <DMA_SetConfig+0x22c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d036      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a32      	ldr	r2, [pc, #200]	@ (8006d68 <DMA_SetConfig+0x230>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d031      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a30      	ldr	r2, [pc, #192]	@ (8006d6c <DMA_SetConfig+0x234>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d02c      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a2f      	ldr	r2, [pc, #188]	@ (8006d70 <DMA_SetConfig+0x238>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d027      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a2d      	ldr	r2, [pc, #180]	@ (8006d74 <DMA_SetConfig+0x23c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d022      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a2c      	ldr	r2, [pc, #176]	@ (8006d78 <DMA_SetConfig+0x240>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d01d      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a2a      	ldr	r2, [pc, #168]	@ (8006d7c <DMA_SetConfig+0x244>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d018      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a29      	ldr	r2, [pc, #164]	@ (8006d80 <DMA_SetConfig+0x248>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d013      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a27      	ldr	r2, [pc, #156]	@ (8006d84 <DMA_SetConfig+0x24c>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d00e      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a26      	ldr	r2, [pc, #152]	@ (8006d88 <DMA_SetConfig+0x250>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d009      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a24      	ldr	r2, [pc, #144]	@ (8006d8c <DMA_SetConfig+0x254>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d004      	beq.n	8006d08 <DMA_SetConfig+0x1d0>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a23      	ldr	r2, [pc, #140]	@ (8006d90 <DMA_SetConfig+0x258>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d101      	bne.n	8006d0c <DMA_SetConfig+0x1d4>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e000      	b.n	8006d0e <DMA_SetConfig+0x1d6>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d059      	beq.n	8006dc6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d16:	f003 031f 	and.w	r3, r3, #31
 8006d1a:	223f      	movs	r2, #63	@ 0x3f
 8006d1c:	409a      	lsls	r2, r3
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006d30:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	2b40      	cmp	r3, #64	@ 0x40
 8006d40:	d138      	bne.n	8006db4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d52:	e086      	b.n	8006e62 <DMA_SetConfig+0x32a>
 8006d54:	40020010 	.word	0x40020010
 8006d58:	40020028 	.word	0x40020028
 8006d5c:	40020040 	.word	0x40020040
 8006d60:	40020058 	.word	0x40020058
 8006d64:	40020070 	.word	0x40020070
 8006d68:	40020088 	.word	0x40020088
 8006d6c:	400200a0 	.word	0x400200a0
 8006d70:	400200b8 	.word	0x400200b8
 8006d74:	40020410 	.word	0x40020410
 8006d78:	40020428 	.word	0x40020428
 8006d7c:	40020440 	.word	0x40020440
 8006d80:	40020458 	.word	0x40020458
 8006d84:	40020470 	.word	0x40020470
 8006d88:	40020488 	.word	0x40020488
 8006d8c:	400204a0 	.word	0x400204a0
 8006d90:	400204b8 	.word	0x400204b8
 8006d94:	58025408 	.word	0x58025408
 8006d98:	5802541c 	.word	0x5802541c
 8006d9c:	58025430 	.word	0x58025430
 8006da0:	58025444 	.word	0x58025444
 8006da4:	58025458 	.word	0x58025458
 8006da8:	5802546c 	.word	0x5802546c
 8006dac:	58025480 	.word	0x58025480
 8006db0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	60da      	str	r2, [r3, #12]
}
 8006dc4:	e04d      	b.n	8006e62 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a29      	ldr	r2, [pc, #164]	@ (8006e70 <DMA_SetConfig+0x338>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d022      	beq.n	8006e16 <DMA_SetConfig+0x2de>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a27      	ldr	r2, [pc, #156]	@ (8006e74 <DMA_SetConfig+0x33c>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d01d      	beq.n	8006e16 <DMA_SetConfig+0x2de>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a26      	ldr	r2, [pc, #152]	@ (8006e78 <DMA_SetConfig+0x340>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d018      	beq.n	8006e16 <DMA_SetConfig+0x2de>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a24      	ldr	r2, [pc, #144]	@ (8006e7c <DMA_SetConfig+0x344>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d013      	beq.n	8006e16 <DMA_SetConfig+0x2de>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a23      	ldr	r2, [pc, #140]	@ (8006e80 <DMA_SetConfig+0x348>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d00e      	beq.n	8006e16 <DMA_SetConfig+0x2de>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a21      	ldr	r2, [pc, #132]	@ (8006e84 <DMA_SetConfig+0x34c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d009      	beq.n	8006e16 <DMA_SetConfig+0x2de>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a20      	ldr	r2, [pc, #128]	@ (8006e88 <DMA_SetConfig+0x350>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d004      	beq.n	8006e16 <DMA_SetConfig+0x2de>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a1e      	ldr	r2, [pc, #120]	@ (8006e8c <DMA_SetConfig+0x354>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d101      	bne.n	8006e1a <DMA_SetConfig+0x2e2>
 8006e16:	2301      	movs	r3, #1
 8006e18:	e000      	b.n	8006e1c <DMA_SetConfig+0x2e4>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d020      	beq.n	8006e62 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e24:	f003 031f 	and.w	r3, r3, #31
 8006e28:	2201      	movs	r2, #1
 8006e2a:	409a      	lsls	r2, r3
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	2b40      	cmp	r3, #64	@ 0x40
 8006e3e:	d108      	bne.n	8006e52 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	60da      	str	r2, [r3, #12]
}
 8006e50:	e007      	b.n	8006e62 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	60da      	str	r2, [r3, #12]
}
 8006e62:	bf00      	nop
 8006e64:	371c      	adds	r7, #28
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	58025408 	.word	0x58025408
 8006e74:	5802541c 	.word	0x5802541c
 8006e78:	58025430 	.word	0x58025430
 8006e7c:	58025444 	.word	0x58025444
 8006e80:	58025458 	.word	0x58025458
 8006e84:	5802546c 	.word	0x5802546c
 8006e88:	58025480 	.word	0x58025480
 8006e8c:	58025494 	.word	0x58025494

08006e90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a42      	ldr	r2, [pc, #264]	@ (8006fa8 <DMA_CalcBaseAndBitshift+0x118>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d04a      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a41      	ldr	r2, [pc, #260]	@ (8006fac <DMA_CalcBaseAndBitshift+0x11c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d045      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a3f      	ldr	r2, [pc, #252]	@ (8006fb0 <DMA_CalcBaseAndBitshift+0x120>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d040      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a3e      	ldr	r2, [pc, #248]	@ (8006fb4 <DMA_CalcBaseAndBitshift+0x124>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d03b      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a3c      	ldr	r2, [pc, #240]	@ (8006fb8 <DMA_CalcBaseAndBitshift+0x128>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d036      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a3b      	ldr	r2, [pc, #236]	@ (8006fbc <DMA_CalcBaseAndBitshift+0x12c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d031      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a39      	ldr	r2, [pc, #228]	@ (8006fc0 <DMA_CalcBaseAndBitshift+0x130>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d02c      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a38      	ldr	r2, [pc, #224]	@ (8006fc4 <DMA_CalcBaseAndBitshift+0x134>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d027      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a36      	ldr	r2, [pc, #216]	@ (8006fc8 <DMA_CalcBaseAndBitshift+0x138>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d022      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a35      	ldr	r2, [pc, #212]	@ (8006fcc <DMA_CalcBaseAndBitshift+0x13c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d01d      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a33      	ldr	r2, [pc, #204]	@ (8006fd0 <DMA_CalcBaseAndBitshift+0x140>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d018      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a32      	ldr	r2, [pc, #200]	@ (8006fd4 <DMA_CalcBaseAndBitshift+0x144>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d013      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a30      	ldr	r2, [pc, #192]	@ (8006fd8 <DMA_CalcBaseAndBitshift+0x148>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d00e      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8006fdc <DMA_CalcBaseAndBitshift+0x14c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d009      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a2d      	ldr	r2, [pc, #180]	@ (8006fe0 <DMA_CalcBaseAndBitshift+0x150>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d004      	beq.n	8006f38 <DMA_CalcBaseAndBitshift+0xa8>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a2c      	ldr	r2, [pc, #176]	@ (8006fe4 <DMA_CalcBaseAndBitshift+0x154>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d101      	bne.n	8006f3c <DMA_CalcBaseAndBitshift+0xac>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e000      	b.n	8006f3e <DMA_CalcBaseAndBitshift+0xae>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d024      	beq.n	8006f8c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	3b10      	subs	r3, #16
 8006f4a:	4a27      	ldr	r2, [pc, #156]	@ (8006fe8 <DMA_CalcBaseAndBitshift+0x158>)
 8006f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f50:	091b      	lsrs	r3, r3, #4
 8006f52:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f003 0307 	and.w	r3, r3, #7
 8006f5a:	4a24      	ldr	r2, [pc, #144]	@ (8006fec <DMA_CalcBaseAndBitshift+0x15c>)
 8006f5c:	5cd3      	ldrb	r3, [r2, r3]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d908      	bls.n	8006f7c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	4b1f      	ldr	r3, [pc, #124]	@ (8006ff0 <DMA_CalcBaseAndBitshift+0x160>)
 8006f72:	4013      	ands	r3, r2
 8006f74:	1d1a      	adds	r2, r3, #4
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	659a      	str	r2, [r3, #88]	@ 0x58
 8006f7a:	e00d      	b.n	8006f98 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	461a      	mov	r2, r3
 8006f82:	4b1b      	ldr	r3, [pc, #108]	@ (8006ff0 <DMA_CalcBaseAndBitshift+0x160>)
 8006f84:	4013      	ands	r3, r2
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f8a:	e005      	b.n	8006f98 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	40020010 	.word	0x40020010
 8006fac:	40020028 	.word	0x40020028
 8006fb0:	40020040 	.word	0x40020040
 8006fb4:	40020058 	.word	0x40020058
 8006fb8:	40020070 	.word	0x40020070
 8006fbc:	40020088 	.word	0x40020088
 8006fc0:	400200a0 	.word	0x400200a0
 8006fc4:	400200b8 	.word	0x400200b8
 8006fc8:	40020410 	.word	0x40020410
 8006fcc:	40020428 	.word	0x40020428
 8006fd0:	40020440 	.word	0x40020440
 8006fd4:	40020458 	.word	0x40020458
 8006fd8:	40020470 	.word	0x40020470
 8006fdc:	40020488 	.word	0x40020488
 8006fe0:	400204a0 	.word	0x400204a0
 8006fe4:	400204b8 	.word	0x400204b8
 8006fe8:	aaaaaaab 	.word	0xaaaaaaab
 8006fec:	08013420 	.word	0x08013420
 8006ff0:	fffffc00 	.word	0xfffffc00

08006ff4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d120      	bne.n	800704a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700c:	2b03      	cmp	r3, #3
 800700e:	d858      	bhi.n	80070c2 <DMA_CheckFifoParam+0xce>
 8007010:	a201      	add	r2, pc, #4	@ (adr r2, 8007018 <DMA_CheckFifoParam+0x24>)
 8007012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007016:	bf00      	nop
 8007018:	08007029 	.word	0x08007029
 800701c:	0800703b 	.word	0x0800703b
 8007020:	08007029 	.word	0x08007029
 8007024:	080070c3 	.word	0x080070c3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d048      	beq.n	80070c6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007038:	e045      	b.n	80070c6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007042:	d142      	bne.n	80070ca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007048:	e03f      	b.n	80070ca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007052:	d123      	bne.n	800709c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007058:	2b03      	cmp	r3, #3
 800705a:	d838      	bhi.n	80070ce <DMA_CheckFifoParam+0xda>
 800705c:	a201      	add	r2, pc, #4	@ (adr r2, 8007064 <DMA_CheckFifoParam+0x70>)
 800705e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007062:	bf00      	nop
 8007064:	08007075 	.word	0x08007075
 8007068:	0800707b 	.word	0x0800707b
 800706c:	08007075 	.word	0x08007075
 8007070:	0800708d 	.word	0x0800708d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	73fb      	strb	r3, [r7, #15]
        break;
 8007078:	e030      	b.n	80070dc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d025      	beq.n	80070d2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800708a:	e022      	b.n	80070d2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007090:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007094:	d11f      	bne.n	80070d6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800709a:	e01c      	b.n	80070d6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d902      	bls.n	80070aa <DMA_CheckFifoParam+0xb6>
 80070a4:	2b03      	cmp	r3, #3
 80070a6:	d003      	beq.n	80070b0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80070a8:	e018      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	73fb      	strb	r3, [r7, #15]
        break;
 80070ae:	e015      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00e      	beq.n	80070da <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	73fb      	strb	r3, [r7, #15]
    break;
 80070c0:	e00b      	b.n	80070da <DMA_CheckFifoParam+0xe6>
        break;
 80070c2:	bf00      	nop
 80070c4:	e00a      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
        break;
 80070c6:	bf00      	nop
 80070c8:	e008      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
        break;
 80070ca:	bf00      	nop
 80070cc:	e006      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
        break;
 80070ce:	bf00      	nop
 80070d0:	e004      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
        break;
 80070d2:	bf00      	nop
 80070d4:	e002      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
        break;
 80070d6:	bf00      	nop
 80070d8:	e000      	b.n	80070dc <DMA_CheckFifoParam+0xe8>
    break;
 80070da:	bf00      	nop
    }
  }

  return status;
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop

080070ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a38      	ldr	r2, [pc, #224]	@ (80071e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d022      	beq.n	800714a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a36      	ldr	r2, [pc, #216]	@ (80071e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d01d      	beq.n	800714a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a35      	ldr	r2, [pc, #212]	@ (80071e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d018      	beq.n	800714a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a33      	ldr	r2, [pc, #204]	@ (80071ec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d013      	beq.n	800714a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a32      	ldr	r2, [pc, #200]	@ (80071f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00e      	beq.n	800714a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a30      	ldr	r2, [pc, #192]	@ (80071f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d009      	beq.n	800714a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a2f      	ldr	r2, [pc, #188]	@ (80071f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d004      	beq.n	800714a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a2d      	ldr	r2, [pc, #180]	@ (80071fc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d101      	bne.n	800714e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800714a:	2301      	movs	r3, #1
 800714c:	e000      	b.n	8007150 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800714e:	2300      	movs	r3, #0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d01a      	beq.n	800718a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	b2db      	uxtb	r3, r3
 800715a:	3b08      	subs	r3, #8
 800715c:	4a28      	ldr	r2, [pc, #160]	@ (8007200 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800715e:	fba2 2303 	umull	r2, r3, r2, r3
 8007162:	091b      	lsrs	r3, r3, #4
 8007164:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	4b26      	ldr	r3, [pc, #152]	@ (8007204 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800716a:	4413      	add	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	461a      	mov	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a24      	ldr	r2, [pc, #144]	@ (8007208 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007178:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	2201      	movs	r2, #1
 8007182:	409a      	lsls	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007188:	e024      	b.n	80071d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	b2db      	uxtb	r3, r3
 8007190:	3b10      	subs	r3, #16
 8007192:	4a1e      	ldr	r2, [pc, #120]	@ (800720c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007194:	fba2 2303 	umull	r2, r3, r2, r3
 8007198:	091b      	lsrs	r3, r3, #4
 800719a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	4a1c      	ldr	r2, [pc, #112]	@ (8007210 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d806      	bhi.n	80071b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4a1b      	ldr	r2, [pc, #108]	@ (8007214 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d902      	bls.n	80071b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	3308      	adds	r3, #8
 80071b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	4b18      	ldr	r3, [pc, #96]	@ (8007218 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80071b6:	4413      	add	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	461a      	mov	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a16      	ldr	r2, [pc, #88]	@ (800721c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80071c4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f003 031f 	and.w	r3, r3, #31
 80071cc:	2201      	movs	r2, #1
 80071ce:	409a      	lsls	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80071d4:	bf00      	nop
 80071d6:	3714      	adds	r7, #20
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	58025408 	.word	0x58025408
 80071e4:	5802541c 	.word	0x5802541c
 80071e8:	58025430 	.word	0x58025430
 80071ec:	58025444 	.word	0x58025444
 80071f0:	58025458 	.word	0x58025458
 80071f4:	5802546c 	.word	0x5802546c
 80071f8:	58025480 	.word	0x58025480
 80071fc:	58025494 	.word	0x58025494
 8007200:	cccccccd 	.word	0xcccccccd
 8007204:	16009600 	.word	0x16009600
 8007208:	58025880 	.word	0x58025880
 800720c:	aaaaaaab 	.word	0xaaaaaaab
 8007210:	400204b8 	.word	0x400204b8
 8007214:	4002040f 	.word	0x4002040f
 8007218:	10008200 	.word	0x10008200
 800721c:	40020880 	.word	0x40020880

08007220 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	b2db      	uxtb	r3, r3
 800722e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d04a      	beq.n	80072cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2b08      	cmp	r3, #8
 800723a:	d847      	bhi.n	80072cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a25      	ldr	r2, [pc, #148]	@ (80072d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d022      	beq.n	800728c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a24      	ldr	r2, [pc, #144]	@ (80072dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d01d      	beq.n	800728c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a22      	ldr	r2, [pc, #136]	@ (80072e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d018      	beq.n	800728c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a21      	ldr	r2, [pc, #132]	@ (80072e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d013      	beq.n	800728c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a1f      	ldr	r2, [pc, #124]	@ (80072e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d00e      	beq.n	800728c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a1e      	ldr	r2, [pc, #120]	@ (80072ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d009      	beq.n	800728c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a1c      	ldr	r2, [pc, #112]	@ (80072f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d004      	beq.n	800728c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a1b      	ldr	r2, [pc, #108]	@ (80072f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d101      	bne.n	8007290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800728c:	2301      	movs	r3, #1
 800728e:	e000      	b.n	8007292 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007290:	2300      	movs	r3, #0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00a      	beq.n	80072ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4b17      	ldr	r3, [pc, #92]	@ (80072f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800729a:	4413      	add	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	461a      	mov	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a15      	ldr	r2, [pc, #84]	@ (80072fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80072a8:	671a      	str	r2, [r3, #112]	@ 0x70
 80072aa:	e009      	b.n	80072c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	4b14      	ldr	r3, [pc, #80]	@ (8007300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80072b0:	4413      	add	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	461a      	mov	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a11      	ldr	r2, [pc, #68]	@ (8007304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80072be:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	2201      	movs	r2, #1
 80072c6:	409a      	lsls	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80072cc:	bf00      	nop
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	58025408 	.word	0x58025408
 80072dc:	5802541c 	.word	0x5802541c
 80072e0:	58025430 	.word	0x58025430
 80072e4:	58025444 	.word	0x58025444
 80072e8:	58025458 	.word	0x58025458
 80072ec:	5802546c 	.word	0x5802546c
 80072f0:	58025480 	.word	0x58025480
 80072f4:	58025494 	.word	0x58025494
 80072f8:	1600963f 	.word	0x1600963f
 80072fc:	58025940 	.word	0x58025940
 8007300:	1000823f 	.word	0x1000823f
 8007304:	40020940 	.word	0x40020940

08007308 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007308:	b480      	push	{r7}
 800730a:	b089      	sub	sp, #36	@ 0x24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007312:	2300      	movs	r3, #0
 8007314:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007316:	4b89      	ldr	r3, [pc, #548]	@ (800753c <HAL_GPIO_Init+0x234>)
 8007318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800731a:	e194      	b.n	8007646 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	2101      	movs	r1, #1
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	fa01 f303 	lsl.w	r3, r1, r3
 8007328:	4013      	ands	r3, r2
 800732a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 8186 	beq.w	8007640 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f003 0303 	and.w	r3, r3, #3
 800733c:	2b01      	cmp	r3, #1
 800733e:	d005      	beq.n	800734c <HAL_GPIO_Init+0x44>
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f003 0303 	and.w	r3, r3, #3
 8007348:	2b02      	cmp	r3, #2
 800734a:	d130      	bne.n	80073ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	2203      	movs	r2, #3
 8007358:	fa02 f303 	lsl.w	r3, r2, r3
 800735c:	43db      	mvns	r3, r3
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	4013      	ands	r3, r2
 8007362:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	68da      	ldr	r2, [r3, #12]
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	fa02 f303 	lsl.w	r3, r2, r3
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	4313      	orrs	r3, r2
 8007374:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007382:	2201      	movs	r2, #1
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	fa02 f303 	lsl.w	r3, r2, r3
 800738a:	43db      	mvns	r3, r3
 800738c:	69ba      	ldr	r2, [r7, #24]
 800738e:	4013      	ands	r3, r2
 8007390:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	091b      	lsrs	r3, r3, #4
 8007398:	f003 0201 	and.w	r2, r3, #1
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	fa02 f303 	lsl.w	r3, r2, r3
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	69ba      	ldr	r2, [r7, #24]
 80073ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	d017      	beq.n	80073ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	005b      	lsls	r3, r3, #1
 80073c4:	2203      	movs	r2, #3
 80073c6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ca:	43db      	mvns	r3, r3
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	4013      	ands	r3, r2
 80073d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	689a      	ldr	r2, [r3, #8]
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	005b      	lsls	r3, r3, #1
 80073da:	fa02 f303 	lsl.w	r3, r2, r3
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f003 0303 	and.w	r3, r3, #3
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d123      	bne.n	800743e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	08da      	lsrs	r2, r3, #3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3208      	adds	r2, #8
 80073fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	f003 0307 	and.w	r3, r3, #7
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	220f      	movs	r2, #15
 800740e:	fa02 f303 	lsl.w	r3, r2, r3
 8007412:	43db      	mvns	r3, r3
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	4013      	ands	r3, r2
 8007418:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	691a      	ldr	r2, [r3, #16]
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	f003 0307 	and.w	r3, r3, #7
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	fa02 f303 	lsl.w	r3, r2, r3
 800742a:	69ba      	ldr	r2, [r7, #24]
 800742c:	4313      	orrs	r3, r2
 800742e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	08da      	lsrs	r2, r3, #3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	3208      	adds	r2, #8
 8007438:	69b9      	ldr	r1, [r7, #24]
 800743a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	2203      	movs	r2, #3
 800744a:	fa02 f303 	lsl.w	r3, r2, r3
 800744e:	43db      	mvns	r3, r3
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	4013      	ands	r3, r2
 8007454:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f003 0203 	and.w	r2, r3, #3
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	fa02 f303 	lsl.w	r3, r2, r3
 8007466:	69ba      	ldr	r2, [r7, #24]
 8007468:	4313      	orrs	r3, r2
 800746a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 80e0 	beq.w	8007640 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007480:	4b2f      	ldr	r3, [pc, #188]	@ (8007540 <HAL_GPIO_Init+0x238>)
 8007482:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007486:	4a2e      	ldr	r2, [pc, #184]	@ (8007540 <HAL_GPIO_Init+0x238>)
 8007488:	f043 0302 	orr.w	r3, r3, #2
 800748c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007490:	4b2b      	ldr	r3, [pc, #172]	@ (8007540 <HAL_GPIO_Init+0x238>)
 8007492:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800749e:	4a29      	ldr	r2, [pc, #164]	@ (8007544 <HAL_GPIO_Init+0x23c>)
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	089b      	lsrs	r3, r3, #2
 80074a4:	3302      	adds	r3, #2
 80074a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	220f      	movs	r2, #15
 80074b6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ba:	43db      	mvns	r3, r3
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	4013      	ands	r3, r2
 80074c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a20      	ldr	r2, [pc, #128]	@ (8007548 <HAL_GPIO_Init+0x240>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d052      	beq.n	8007570 <HAL_GPIO_Init+0x268>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a1f      	ldr	r2, [pc, #124]	@ (800754c <HAL_GPIO_Init+0x244>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d031      	beq.n	8007536 <HAL_GPIO_Init+0x22e>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a1e      	ldr	r2, [pc, #120]	@ (8007550 <HAL_GPIO_Init+0x248>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d02b      	beq.n	8007532 <HAL_GPIO_Init+0x22a>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007554 <HAL_GPIO_Init+0x24c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d025      	beq.n	800752e <HAL_GPIO_Init+0x226>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a1c      	ldr	r2, [pc, #112]	@ (8007558 <HAL_GPIO_Init+0x250>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d01f      	beq.n	800752a <HAL_GPIO_Init+0x222>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a1b      	ldr	r2, [pc, #108]	@ (800755c <HAL_GPIO_Init+0x254>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d019      	beq.n	8007526 <HAL_GPIO_Init+0x21e>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a1a      	ldr	r2, [pc, #104]	@ (8007560 <HAL_GPIO_Init+0x258>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d013      	beq.n	8007522 <HAL_GPIO_Init+0x21a>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a19      	ldr	r2, [pc, #100]	@ (8007564 <HAL_GPIO_Init+0x25c>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d00d      	beq.n	800751e <HAL_GPIO_Init+0x216>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a18      	ldr	r2, [pc, #96]	@ (8007568 <HAL_GPIO_Init+0x260>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d007      	beq.n	800751a <HAL_GPIO_Init+0x212>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a17      	ldr	r2, [pc, #92]	@ (800756c <HAL_GPIO_Init+0x264>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d101      	bne.n	8007516 <HAL_GPIO_Init+0x20e>
 8007512:	2309      	movs	r3, #9
 8007514:	e02d      	b.n	8007572 <HAL_GPIO_Init+0x26a>
 8007516:	230a      	movs	r3, #10
 8007518:	e02b      	b.n	8007572 <HAL_GPIO_Init+0x26a>
 800751a:	2308      	movs	r3, #8
 800751c:	e029      	b.n	8007572 <HAL_GPIO_Init+0x26a>
 800751e:	2307      	movs	r3, #7
 8007520:	e027      	b.n	8007572 <HAL_GPIO_Init+0x26a>
 8007522:	2306      	movs	r3, #6
 8007524:	e025      	b.n	8007572 <HAL_GPIO_Init+0x26a>
 8007526:	2305      	movs	r3, #5
 8007528:	e023      	b.n	8007572 <HAL_GPIO_Init+0x26a>
 800752a:	2304      	movs	r3, #4
 800752c:	e021      	b.n	8007572 <HAL_GPIO_Init+0x26a>
 800752e:	2303      	movs	r3, #3
 8007530:	e01f      	b.n	8007572 <HAL_GPIO_Init+0x26a>
 8007532:	2302      	movs	r3, #2
 8007534:	e01d      	b.n	8007572 <HAL_GPIO_Init+0x26a>
 8007536:	2301      	movs	r3, #1
 8007538:	e01b      	b.n	8007572 <HAL_GPIO_Init+0x26a>
 800753a:	bf00      	nop
 800753c:	58000080 	.word	0x58000080
 8007540:	58024400 	.word	0x58024400
 8007544:	58000400 	.word	0x58000400
 8007548:	58020000 	.word	0x58020000
 800754c:	58020400 	.word	0x58020400
 8007550:	58020800 	.word	0x58020800
 8007554:	58020c00 	.word	0x58020c00
 8007558:	58021000 	.word	0x58021000
 800755c:	58021400 	.word	0x58021400
 8007560:	58021800 	.word	0x58021800
 8007564:	58021c00 	.word	0x58021c00
 8007568:	58022000 	.word	0x58022000
 800756c:	58022400 	.word	0x58022400
 8007570:	2300      	movs	r3, #0
 8007572:	69fa      	ldr	r2, [r7, #28]
 8007574:	f002 0203 	and.w	r2, r2, #3
 8007578:	0092      	lsls	r2, r2, #2
 800757a:	4093      	lsls	r3, r2
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	4313      	orrs	r3, r2
 8007580:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007582:	4938      	ldr	r1, [pc, #224]	@ (8007664 <HAL_GPIO_Init+0x35c>)
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	089b      	lsrs	r3, r3, #2
 8007588:	3302      	adds	r3, #2
 800758a:	69ba      	ldr	r2, [r7, #24]
 800758c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	43db      	mvns	r3, r3
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	4013      	ands	r3, r2
 80075a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80075ae:	69ba      	ldr	r2, [r7, #24]
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80075b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80075be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	43db      	mvns	r3, r3
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	4013      	ands	r3, r2
 80075ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80075e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	43db      	mvns	r3, r3
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	4013      	ands	r3, r2
 80075fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	69ba      	ldr	r2, [r7, #24]
 8007614:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	43db      	mvns	r3, r3
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	4013      	ands	r3, r2
 8007624:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	4313      	orrs	r3, r2
 8007638:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	3301      	adds	r3, #1
 8007644:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	fa22 f303 	lsr.w	r3, r2, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	f47f ae63 	bne.w	800731c <HAL_GPIO_Init+0x14>
  }
}
 8007656:	bf00      	nop
 8007658:	bf00      	nop
 800765a:	3724      	adds	r7, #36	@ 0x24
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	58000400 	.word	0x58000400

08007668 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007670:	4b19      	ldr	r3, [pc, #100]	@ (80076d8 <HAL_PWREx_ConfigSupply+0x70>)
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f003 0304 	and.w	r3, r3, #4
 8007678:	2b04      	cmp	r3, #4
 800767a:	d00a      	beq.n	8007692 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800767c:	4b16      	ldr	r3, [pc, #88]	@ (80076d8 <HAL_PWREx_ConfigSupply+0x70>)
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	f003 0307 	and.w	r3, r3, #7
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	429a      	cmp	r2, r3
 8007688:	d001      	beq.n	800768e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e01f      	b.n	80076ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	e01d      	b.n	80076ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007692:	4b11      	ldr	r3, [pc, #68]	@ (80076d8 <HAL_PWREx_ConfigSupply+0x70>)
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f023 0207 	bic.w	r2, r3, #7
 800769a:	490f      	ldr	r1, [pc, #60]	@ (80076d8 <HAL_PWREx_ConfigSupply+0x70>)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4313      	orrs	r3, r2
 80076a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80076a2:	f7fd ff7b 	bl	800559c <HAL_GetTick>
 80076a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80076a8:	e009      	b.n	80076be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80076aa:	f7fd ff77 	bl	800559c <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80076b8:	d901      	bls.n	80076be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e007      	b.n	80076ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80076be:	4b06      	ldr	r3, [pc, #24]	@ (80076d8 <HAL_PWREx_ConfigSupply+0x70>)
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076ca:	d1ee      	bne.n	80076aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	58024800 	.word	0x58024800

080076dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08c      	sub	sp, #48	@ 0x30
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d102      	bne.n	80076f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	f000 bc48 	b.w	8007f80 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 8088 	beq.w	800780e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076fe:	4b99      	ldr	r3, [pc, #612]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007706:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007708:	4b96      	ldr	r3, [pc, #600]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 800770a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800770c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800770e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007710:	2b10      	cmp	r3, #16
 8007712:	d007      	beq.n	8007724 <HAL_RCC_OscConfig+0x48>
 8007714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007716:	2b18      	cmp	r3, #24
 8007718:	d111      	bne.n	800773e <HAL_RCC_OscConfig+0x62>
 800771a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800771c:	f003 0303 	and.w	r3, r3, #3
 8007720:	2b02      	cmp	r3, #2
 8007722:	d10c      	bne.n	800773e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007724:	4b8f      	ldr	r3, [pc, #572]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d06d      	beq.n	800780c <HAL_RCC_OscConfig+0x130>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d169      	bne.n	800780c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	f000 bc21 	b.w	8007f80 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007746:	d106      	bne.n	8007756 <HAL_RCC_OscConfig+0x7a>
 8007748:	4b86      	ldr	r3, [pc, #536]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a85      	ldr	r2, [pc, #532]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 800774e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007752:	6013      	str	r3, [r2, #0]
 8007754:	e02e      	b.n	80077b4 <HAL_RCC_OscConfig+0xd8>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10c      	bne.n	8007778 <HAL_RCC_OscConfig+0x9c>
 800775e:	4b81      	ldr	r3, [pc, #516]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a80      	ldr	r2, [pc, #512]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 8007764:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	4b7e      	ldr	r3, [pc, #504]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a7d      	ldr	r2, [pc, #500]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 8007770:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	e01d      	b.n	80077b4 <HAL_RCC_OscConfig+0xd8>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007780:	d10c      	bne.n	800779c <HAL_RCC_OscConfig+0xc0>
 8007782:	4b78      	ldr	r3, [pc, #480]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a77      	ldr	r2, [pc, #476]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 8007788:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800778c:	6013      	str	r3, [r2, #0]
 800778e:	4b75      	ldr	r3, [pc, #468]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a74      	ldr	r2, [pc, #464]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 8007794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007798:	6013      	str	r3, [r2, #0]
 800779a:	e00b      	b.n	80077b4 <HAL_RCC_OscConfig+0xd8>
 800779c:	4b71      	ldr	r3, [pc, #452]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a70      	ldr	r2, [pc, #448]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 80077a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	4b6e      	ldr	r3, [pc, #440]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a6d      	ldr	r2, [pc, #436]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 80077ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80077b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d013      	beq.n	80077e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077bc:	f7fd feee 	bl	800559c <HAL_GetTick>
 80077c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077c2:	e008      	b.n	80077d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077c4:	f7fd feea 	bl	800559c <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	2b64      	cmp	r3, #100	@ 0x64
 80077d0:	d901      	bls.n	80077d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e3d4      	b.n	8007f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077d6:	4b63      	ldr	r3, [pc, #396]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d0f0      	beq.n	80077c4 <HAL_RCC_OscConfig+0xe8>
 80077e2:	e014      	b.n	800780e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e4:	f7fd feda 	bl	800559c <HAL_GetTick>
 80077e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80077ea:	e008      	b.n	80077fe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077ec:	f7fd fed6 	bl	800559c <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	2b64      	cmp	r3, #100	@ 0x64
 80077f8:	d901      	bls.n	80077fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e3c0      	b.n	8007f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80077fe:	4b59      	ldr	r3, [pc, #356]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1f0      	bne.n	80077ec <HAL_RCC_OscConfig+0x110>
 800780a:	e000      	b.n	800780e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800780c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 80ca 	beq.w	80079b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800781c:	4b51      	ldr	r3, [pc, #324]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007824:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007826:	4b4f      	ldr	r3, [pc, #316]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 8007828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800782a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d007      	beq.n	8007842 <HAL_RCC_OscConfig+0x166>
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	2b18      	cmp	r3, #24
 8007836:	d156      	bne.n	80078e6 <HAL_RCC_OscConfig+0x20a>
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	f003 0303 	and.w	r3, r3, #3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d151      	bne.n	80078e6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007842:	4b48      	ldr	r3, [pc, #288]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0304 	and.w	r3, r3, #4
 800784a:	2b00      	cmp	r3, #0
 800784c:	d005      	beq.n	800785a <HAL_RCC_OscConfig+0x17e>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e392      	b.n	8007f80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800785a:	4b42      	ldr	r3, [pc, #264]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f023 0219 	bic.w	r2, r3, #25
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	493f      	ldr	r1, [pc, #252]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 8007868:	4313      	orrs	r3, r2
 800786a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800786c:	f7fd fe96 	bl	800559c <HAL_GetTick>
 8007870:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007872:	e008      	b.n	8007886 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007874:	f7fd fe92 	bl	800559c <HAL_GetTick>
 8007878:	4602      	mov	r2, r0
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	2b02      	cmp	r3, #2
 8007880:	d901      	bls.n	8007886 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e37c      	b.n	8007f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007886:	4b37      	ldr	r3, [pc, #220]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0304 	and.w	r3, r3, #4
 800788e:	2b00      	cmp	r3, #0
 8007890:	d0f0      	beq.n	8007874 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007892:	f7fd feb3 	bl	80055fc <HAL_GetREVID>
 8007896:	4603      	mov	r3, r0
 8007898:	f241 0203 	movw	r2, #4099	@ 0x1003
 800789c:	4293      	cmp	r3, r2
 800789e:	d817      	bhi.n	80078d0 <HAL_RCC_OscConfig+0x1f4>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	2b40      	cmp	r3, #64	@ 0x40
 80078a6:	d108      	bne.n	80078ba <HAL_RCC_OscConfig+0x1de>
 80078a8:	4b2e      	ldr	r3, [pc, #184]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80078b0:	4a2c      	ldr	r2, [pc, #176]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 80078b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078b6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078b8:	e07a      	b.n	80079b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078ba:	4b2a      	ldr	r3, [pc, #168]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	031b      	lsls	r3, r3, #12
 80078c8:	4926      	ldr	r1, [pc, #152]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078ce:	e06f      	b.n	80079b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078d0:	4b24      	ldr	r3, [pc, #144]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	061b      	lsls	r3, r3, #24
 80078de:	4921      	ldr	r1, [pc, #132]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 80078e0:	4313      	orrs	r3, r2
 80078e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078e4:	e064      	b.n	80079b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d047      	beq.n	800797e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80078ee:	4b1d      	ldr	r3, [pc, #116]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f023 0219 	bic.w	r2, r3, #25
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	491a      	ldr	r1, [pc, #104]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007900:	f7fd fe4c 	bl	800559c <HAL_GetTick>
 8007904:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007906:	e008      	b.n	800791a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007908:	f7fd fe48 	bl	800559c <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	2b02      	cmp	r3, #2
 8007914:	d901      	bls.n	800791a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e332      	b.n	8007f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800791a:	4b12      	ldr	r3, [pc, #72]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0304 	and.w	r3, r3, #4
 8007922:	2b00      	cmp	r3, #0
 8007924:	d0f0      	beq.n	8007908 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007926:	f7fd fe69 	bl	80055fc <HAL_GetREVID>
 800792a:	4603      	mov	r3, r0
 800792c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007930:	4293      	cmp	r3, r2
 8007932:	d819      	bhi.n	8007968 <HAL_RCC_OscConfig+0x28c>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	2b40      	cmp	r3, #64	@ 0x40
 800793a:	d108      	bne.n	800794e <HAL_RCC_OscConfig+0x272>
 800793c:	4b09      	ldr	r3, [pc, #36]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007944:	4a07      	ldr	r2, [pc, #28]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 8007946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800794a:	6053      	str	r3, [r2, #4]
 800794c:	e030      	b.n	80079b0 <HAL_RCC_OscConfig+0x2d4>
 800794e:	4b05      	ldr	r3, [pc, #20]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	031b      	lsls	r3, r3, #12
 800795c:	4901      	ldr	r1, [pc, #4]	@ (8007964 <HAL_RCC_OscConfig+0x288>)
 800795e:	4313      	orrs	r3, r2
 8007960:	604b      	str	r3, [r1, #4]
 8007962:	e025      	b.n	80079b0 <HAL_RCC_OscConfig+0x2d4>
 8007964:	58024400 	.word	0x58024400
 8007968:	4b9a      	ldr	r3, [pc, #616]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	061b      	lsls	r3, r3, #24
 8007976:	4997      	ldr	r1, [pc, #604]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007978:	4313      	orrs	r3, r2
 800797a:	604b      	str	r3, [r1, #4]
 800797c:	e018      	b.n	80079b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800797e:	4b95      	ldr	r3, [pc, #596]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a94      	ldr	r2, [pc, #592]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007984:	f023 0301 	bic.w	r3, r3, #1
 8007988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800798a:	f7fd fe07 	bl	800559c <HAL_GetTick>
 800798e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007990:	e008      	b.n	80079a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007992:	f7fd fe03 	bl	800559c <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d901      	bls.n	80079a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e2ed      	b.n	8007f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80079a4:	4b8b      	ldr	r3, [pc, #556]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0304 	and.w	r3, r3, #4
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1f0      	bne.n	8007992 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0310 	and.w	r3, r3, #16
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 80a9 	beq.w	8007b10 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079be:	4b85      	ldr	r3, [pc, #532]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80079c8:	4b82      	ldr	r3, [pc, #520]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 80079ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	2b08      	cmp	r3, #8
 80079d2:	d007      	beq.n	80079e4 <HAL_RCC_OscConfig+0x308>
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	2b18      	cmp	r3, #24
 80079d8:	d13a      	bne.n	8007a50 <HAL_RCC_OscConfig+0x374>
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f003 0303 	and.w	r3, r3, #3
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d135      	bne.n	8007a50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079e4:	4b7b      	ldr	r3, [pc, #492]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d005      	beq.n	80079fc <HAL_RCC_OscConfig+0x320>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	69db      	ldr	r3, [r3, #28]
 80079f4:	2b80      	cmp	r3, #128	@ 0x80
 80079f6:	d001      	beq.n	80079fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e2c1      	b.n	8007f80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80079fc:	f7fd fdfe 	bl	80055fc <HAL_GetREVID>
 8007a00:	4603      	mov	r3, r0
 8007a02:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d817      	bhi.n	8007a3a <HAL_RCC_OscConfig+0x35e>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	2b20      	cmp	r3, #32
 8007a10:	d108      	bne.n	8007a24 <HAL_RCC_OscConfig+0x348>
 8007a12:	4b70      	ldr	r3, [pc, #448]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007a1a:	4a6e      	ldr	r2, [pc, #440]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007a1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a20:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a22:	e075      	b.n	8007b10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a24:	4b6b      	ldr	r3, [pc, #428]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	069b      	lsls	r3, r3, #26
 8007a32:	4968      	ldr	r1, [pc, #416]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007a34:	4313      	orrs	r3, r2
 8007a36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a38:	e06a      	b.n	8007b10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a3a:	4b66      	ldr	r3, [pc, #408]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	061b      	lsls	r3, r3, #24
 8007a48:	4962      	ldr	r1, [pc, #392]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a4e:	e05f      	b.n	8007b10 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	69db      	ldr	r3, [r3, #28]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d042      	beq.n	8007ade <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007a58:	4b5e      	ldr	r3, [pc, #376]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a5d      	ldr	r2, [pc, #372]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a64:	f7fd fd9a 	bl	800559c <HAL_GetTick>
 8007a68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a6a:	e008      	b.n	8007a7e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007a6c:	f7fd fd96 	bl	800559c <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d901      	bls.n	8007a7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e280      	b.n	8007f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a7e:	4b55      	ldr	r3, [pc, #340]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d0f0      	beq.n	8007a6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a8a:	f7fd fdb7 	bl	80055fc <HAL_GetREVID>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d817      	bhi.n	8007ac8 <HAL_RCC_OscConfig+0x3ec>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a1b      	ldr	r3, [r3, #32]
 8007a9c:	2b20      	cmp	r3, #32
 8007a9e:	d108      	bne.n	8007ab2 <HAL_RCC_OscConfig+0x3d6>
 8007aa0:	4b4c      	ldr	r3, [pc, #304]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007aa8:	4a4a      	ldr	r2, [pc, #296]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007aaa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007aae:	6053      	str	r3, [r2, #4]
 8007ab0:	e02e      	b.n	8007b10 <HAL_RCC_OscConfig+0x434>
 8007ab2:	4b48      	ldr	r3, [pc, #288]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	069b      	lsls	r3, r3, #26
 8007ac0:	4944      	ldr	r1, [pc, #272]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	604b      	str	r3, [r1, #4]
 8007ac6:	e023      	b.n	8007b10 <HAL_RCC_OscConfig+0x434>
 8007ac8:	4b42      	ldr	r3, [pc, #264]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	061b      	lsls	r3, r3, #24
 8007ad6:	493f      	ldr	r1, [pc, #252]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	60cb      	str	r3, [r1, #12]
 8007adc:	e018      	b.n	8007b10 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007ade:	4b3d      	ldr	r3, [pc, #244]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a3c      	ldr	r2, [pc, #240]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007ae4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aea:	f7fd fd57 	bl	800559c <HAL_GetTick>
 8007aee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007af0:	e008      	b.n	8007b04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007af2:	f7fd fd53 	bl	800559c <HAL_GetTick>
 8007af6:	4602      	mov	r2, r0
 8007af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d901      	bls.n	8007b04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e23d      	b.n	8007f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b04:	4b33      	ldr	r3, [pc, #204]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1f0      	bne.n	8007af2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0308 	and.w	r3, r3, #8
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d036      	beq.n	8007b8a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	695b      	ldr	r3, [r3, #20]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d019      	beq.n	8007b58 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b24:	4b2b      	ldr	r3, [pc, #172]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007b26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b28:	4a2a      	ldr	r2, [pc, #168]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007b2a:	f043 0301 	orr.w	r3, r3, #1
 8007b2e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b30:	f7fd fd34 	bl	800559c <HAL_GetTick>
 8007b34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b36:	e008      	b.n	8007b4a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b38:	f7fd fd30 	bl	800559c <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d901      	bls.n	8007b4a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e21a      	b.n	8007f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b4a:	4b22      	ldr	r3, [pc, #136]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b4e:	f003 0302 	and.w	r3, r3, #2
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0f0      	beq.n	8007b38 <HAL_RCC_OscConfig+0x45c>
 8007b56:	e018      	b.n	8007b8a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b58:	4b1e      	ldr	r3, [pc, #120]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007b5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007b5e:	f023 0301 	bic.w	r3, r3, #1
 8007b62:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b64:	f7fd fd1a 	bl	800559c <HAL_GetTick>
 8007b68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b6a:	e008      	b.n	8007b7e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b6c:	f7fd fd16 	bl	800559c <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d901      	bls.n	8007b7e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e200      	b.n	8007f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b7e:	4b15      	ldr	r3, [pc, #84]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b82:	f003 0302 	and.w	r3, r3, #2
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1f0      	bne.n	8007b6c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0320 	and.w	r3, r3, #32
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d039      	beq.n	8007c0a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d01c      	beq.n	8007bd8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007ba4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007ba8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007baa:	f7fd fcf7 	bl	800559c <HAL_GetTick>
 8007bae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007bb0:	e008      	b.n	8007bc4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007bb2:	f7fd fcf3 	bl	800559c <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d901      	bls.n	8007bc4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e1dd      	b.n	8007f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007bc4:	4b03      	ldr	r3, [pc, #12]	@ (8007bd4 <HAL_RCC_OscConfig+0x4f8>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d0f0      	beq.n	8007bb2 <HAL_RCC_OscConfig+0x4d6>
 8007bd0:	e01b      	b.n	8007c0a <HAL_RCC_OscConfig+0x52e>
 8007bd2:	bf00      	nop
 8007bd4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007bd8:	4b9b      	ldr	r3, [pc, #620]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a9a      	ldr	r2, [pc, #616]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007bde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007be2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007be4:	f7fd fcda 	bl	800559c <HAL_GetTick>
 8007be8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007bea:	e008      	b.n	8007bfe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007bec:	f7fd fcd6 	bl	800559c <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d901      	bls.n	8007bfe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e1c0      	b.n	8007f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007bfe:	4b92      	ldr	r3, [pc, #584]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1f0      	bne.n	8007bec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0304 	and.w	r3, r3, #4
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 8081 	beq.w	8007d1a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007c18:	4b8c      	ldr	r3, [pc, #560]	@ (8007e4c <HAL_RCC_OscConfig+0x770>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a8b      	ldr	r2, [pc, #556]	@ (8007e4c <HAL_RCC_OscConfig+0x770>)
 8007c1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c24:	f7fd fcba 	bl	800559c <HAL_GetTick>
 8007c28:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c2a:	e008      	b.n	8007c3e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c2c:	f7fd fcb6 	bl	800559c <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	2b64      	cmp	r3, #100	@ 0x64
 8007c38:	d901      	bls.n	8007c3e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e1a0      	b.n	8007f80 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c3e:	4b83      	ldr	r3, [pc, #524]	@ (8007e4c <HAL_RCC_OscConfig+0x770>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d0f0      	beq.n	8007c2c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d106      	bne.n	8007c60 <HAL_RCC_OscConfig+0x584>
 8007c52:	4b7d      	ldr	r3, [pc, #500]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c56:	4a7c      	ldr	r2, [pc, #496]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007c58:	f043 0301 	orr.w	r3, r3, #1
 8007c5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c5e:	e02d      	b.n	8007cbc <HAL_RCC_OscConfig+0x5e0>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10c      	bne.n	8007c82 <HAL_RCC_OscConfig+0x5a6>
 8007c68:	4b77      	ldr	r3, [pc, #476]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c6c:	4a76      	ldr	r2, [pc, #472]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007c6e:	f023 0301 	bic.w	r3, r3, #1
 8007c72:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c74:	4b74      	ldr	r3, [pc, #464]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c78:	4a73      	ldr	r2, [pc, #460]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007c7a:	f023 0304 	bic.w	r3, r3, #4
 8007c7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c80:	e01c      	b.n	8007cbc <HAL_RCC_OscConfig+0x5e0>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	2b05      	cmp	r3, #5
 8007c88:	d10c      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x5c8>
 8007c8a:	4b6f      	ldr	r3, [pc, #444]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c8e:	4a6e      	ldr	r2, [pc, #440]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007c90:	f043 0304 	orr.w	r3, r3, #4
 8007c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c96:	4b6c      	ldr	r3, [pc, #432]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c9a:	4a6b      	ldr	r2, [pc, #428]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007c9c:	f043 0301 	orr.w	r3, r3, #1
 8007ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ca2:	e00b      	b.n	8007cbc <HAL_RCC_OscConfig+0x5e0>
 8007ca4:	4b68      	ldr	r3, [pc, #416]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ca8:	4a67      	ldr	r2, [pc, #412]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007caa:	f023 0301 	bic.w	r3, r3, #1
 8007cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cb0:	4b65      	ldr	r3, [pc, #404]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cb4:	4a64      	ldr	r2, [pc, #400]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007cb6:	f023 0304 	bic.w	r3, r3, #4
 8007cba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d015      	beq.n	8007cf0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cc4:	f7fd fc6a 	bl	800559c <HAL_GetTick>
 8007cc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cca:	e00a      	b.n	8007ce2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ccc:	f7fd fc66 	bl	800559c <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d901      	bls.n	8007ce2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e14e      	b.n	8007f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ce2:	4b59      	ldr	r3, [pc, #356]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ce6:	f003 0302 	and.w	r3, r3, #2
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d0ee      	beq.n	8007ccc <HAL_RCC_OscConfig+0x5f0>
 8007cee:	e014      	b.n	8007d1a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cf0:	f7fd fc54 	bl	800559c <HAL_GetTick>
 8007cf4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007cf6:	e00a      	b.n	8007d0e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cf8:	f7fd fc50 	bl	800559c <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d901      	bls.n	8007d0e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e138      	b.n	8007f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d0e:	4b4e      	ldr	r3, [pc, #312]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d12:	f003 0302 	and.w	r3, r3, #2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1ee      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f000 812d 	beq.w	8007f7e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007d24:	4b48      	ldr	r3, [pc, #288]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d2c:	2b18      	cmp	r3, #24
 8007d2e:	f000 80bd 	beq.w	8007eac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	f040 809e 	bne.w	8007e78 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d3c:	4b42      	ldr	r3, [pc, #264]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a41      	ldr	r2, [pc, #260]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007d42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d48:	f7fd fc28 	bl	800559c <HAL_GetTick>
 8007d4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d4e:	e008      	b.n	8007d62 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d50:	f7fd fc24 	bl	800559c <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d901      	bls.n	8007d62 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e10e      	b.n	8007f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d62:	4b39      	ldr	r3, [pc, #228]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1f0      	bne.n	8007d50 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d6e:	4b36      	ldr	r3, [pc, #216]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007d70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d72:	4b37      	ldr	r3, [pc, #220]	@ (8007e50 <HAL_RCC_OscConfig+0x774>)
 8007d74:	4013      	ands	r3, r2
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007d7e:	0112      	lsls	r2, r2, #4
 8007d80:	430a      	orrs	r2, r1
 8007d82:	4931      	ldr	r1, [pc, #196]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	628b      	str	r3, [r1, #40]	@ 0x28
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d96:	3b01      	subs	r3, #1
 8007d98:	025b      	lsls	r3, r3, #9
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	431a      	orrs	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da2:	3b01      	subs	r3, #1
 8007da4:	041b      	lsls	r3, r3, #16
 8007da6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007daa:	431a      	orrs	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db0:	3b01      	subs	r3, #1
 8007db2:	061b      	lsls	r3, r3, #24
 8007db4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007db8:	4923      	ldr	r1, [pc, #140]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007dbe:	4b22      	ldr	r3, [pc, #136]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc2:	4a21      	ldr	r2, [pc, #132]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007dc4:	f023 0301 	bic.w	r3, r3, #1
 8007dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007dca:	4b1f      	ldr	r3, [pc, #124]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007dcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dce:	4b21      	ldr	r3, [pc, #132]	@ (8007e54 <HAL_RCC_OscConfig+0x778>)
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007dd6:	00d2      	lsls	r2, r2, #3
 8007dd8:	491b      	ldr	r1, [pc, #108]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007dde:	4b1a      	ldr	r3, [pc, #104]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de2:	f023 020c 	bic.w	r2, r3, #12
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dea:	4917      	ldr	r1, [pc, #92]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007df0:	4b15      	ldr	r3, [pc, #84]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df4:	f023 0202 	bic.w	r2, r3, #2
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dfc:	4912      	ldr	r1, [pc, #72]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007e02:	4b11      	ldr	r3, [pc, #68]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e06:	4a10      	ldr	r2, [pc, #64]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e12:	4a0d      	ldr	r2, [pc, #52]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007e20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007e26:	4b08      	ldr	r3, [pc, #32]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e2a:	4a07      	ldr	r2, [pc, #28]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007e2c:	f043 0301 	orr.w	r3, r3, #1
 8007e30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e32:	4b05      	ldr	r3, [pc, #20]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a04      	ldr	r2, [pc, #16]	@ (8007e48 <HAL_RCC_OscConfig+0x76c>)
 8007e38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e3e:	f7fd fbad 	bl	800559c <HAL_GetTick>
 8007e42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e44:	e011      	b.n	8007e6a <HAL_RCC_OscConfig+0x78e>
 8007e46:	bf00      	nop
 8007e48:	58024400 	.word	0x58024400
 8007e4c:	58024800 	.word	0x58024800
 8007e50:	fffffc0c 	.word	0xfffffc0c
 8007e54:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e58:	f7fd fba0 	bl	800559c <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d901      	bls.n	8007e6a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e08a      	b.n	8007f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e6a:	4b47      	ldr	r3, [pc, #284]	@ (8007f88 <HAL_RCC_OscConfig+0x8ac>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d0f0      	beq.n	8007e58 <HAL_RCC_OscConfig+0x77c>
 8007e76:	e082      	b.n	8007f7e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e78:	4b43      	ldr	r3, [pc, #268]	@ (8007f88 <HAL_RCC_OscConfig+0x8ac>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a42      	ldr	r2, [pc, #264]	@ (8007f88 <HAL_RCC_OscConfig+0x8ac>)
 8007e7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e84:	f7fd fb8a 	bl	800559c <HAL_GetTick>
 8007e88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e8a:	e008      	b.n	8007e9e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e8c:	f7fd fb86 	bl	800559c <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d901      	bls.n	8007e9e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e070      	b.n	8007f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e9e:	4b3a      	ldr	r3, [pc, #232]	@ (8007f88 <HAL_RCC_OscConfig+0x8ac>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1f0      	bne.n	8007e8c <HAL_RCC_OscConfig+0x7b0>
 8007eaa:	e068      	b.n	8007f7e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007eac:	4b36      	ldr	r3, [pc, #216]	@ (8007f88 <HAL_RCC_OscConfig+0x8ac>)
 8007eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007eb2:	4b35      	ldr	r3, [pc, #212]	@ (8007f88 <HAL_RCC_OscConfig+0x8ac>)
 8007eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d031      	beq.n	8007f24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	f003 0203 	and.w	r2, r3, #3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d12a      	bne.n	8007f24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	091b      	lsrs	r3, r3, #4
 8007ed2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d122      	bne.n	8007f24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ee8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d11a      	bne.n	8007f24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	0a5b      	lsrs	r3, r3, #9
 8007ef2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007efa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d111      	bne.n	8007f24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	0c1b      	lsrs	r3, r3, #16
 8007f04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d108      	bne.n	8007f24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	0e1b      	lsrs	r3, r3, #24
 8007f16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d001      	beq.n	8007f28 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e02b      	b.n	8007f80 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007f28:	4b17      	ldr	r3, [pc, #92]	@ (8007f88 <HAL_RCC_OscConfig+0x8ac>)
 8007f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f2c:	08db      	lsrs	r3, r3, #3
 8007f2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f32:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d01f      	beq.n	8007f7e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007f3e:	4b12      	ldr	r3, [pc, #72]	@ (8007f88 <HAL_RCC_OscConfig+0x8ac>)
 8007f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f42:	4a11      	ldr	r2, [pc, #68]	@ (8007f88 <HAL_RCC_OscConfig+0x8ac>)
 8007f44:	f023 0301 	bic.w	r3, r3, #1
 8007f48:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007f4a:	f7fd fb27 	bl	800559c <HAL_GetTick>
 8007f4e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007f50:	bf00      	nop
 8007f52:	f7fd fb23 	bl	800559c <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d0f9      	beq.n	8007f52 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8007f88 <HAL_RCC_OscConfig+0x8ac>)
 8007f60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f62:	4b0a      	ldr	r3, [pc, #40]	@ (8007f8c <HAL_RCC_OscConfig+0x8b0>)
 8007f64:	4013      	ands	r3, r2
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007f6a:	00d2      	lsls	r2, r2, #3
 8007f6c:	4906      	ldr	r1, [pc, #24]	@ (8007f88 <HAL_RCC_OscConfig+0x8ac>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007f72:	4b05      	ldr	r3, [pc, #20]	@ (8007f88 <HAL_RCC_OscConfig+0x8ac>)
 8007f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f76:	4a04      	ldr	r2, [pc, #16]	@ (8007f88 <HAL_RCC_OscConfig+0x8ac>)
 8007f78:	f043 0301 	orr.w	r3, r3, #1
 8007f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3730      	adds	r7, #48	@ 0x30
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	58024400 	.word	0x58024400
 8007f8c:	ffff0007 	.word	0xffff0007

08007f90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e19c      	b.n	80082de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fa4:	4b8a      	ldr	r3, [pc, #552]	@ (80081d0 <HAL_RCC_ClockConfig+0x240>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 030f 	and.w	r3, r3, #15
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d910      	bls.n	8007fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fb2:	4b87      	ldr	r3, [pc, #540]	@ (80081d0 <HAL_RCC_ClockConfig+0x240>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f023 020f 	bic.w	r2, r3, #15
 8007fba:	4985      	ldr	r1, [pc, #532]	@ (80081d0 <HAL_RCC_ClockConfig+0x240>)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fc2:	4b83      	ldr	r3, [pc, #524]	@ (80081d0 <HAL_RCC_ClockConfig+0x240>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 030f 	and.w	r3, r3, #15
 8007fca:	683a      	ldr	r2, [r7, #0]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d001      	beq.n	8007fd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e184      	b.n	80082de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0304 	and.w	r3, r3, #4
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d010      	beq.n	8008002 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	691a      	ldr	r2, [r3, #16]
 8007fe4:	4b7b      	ldr	r3, [pc, #492]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d908      	bls.n	8008002 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ff0:	4b78      	ldr	r3, [pc, #480]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	4975      	ldr	r1, [pc, #468]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0308 	and.w	r3, r3, #8
 800800a:	2b00      	cmp	r3, #0
 800800c:	d010      	beq.n	8008030 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	695a      	ldr	r2, [r3, #20]
 8008012:	4b70      	ldr	r3, [pc, #448]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800801a:	429a      	cmp	r2, r3
 800801c:	d908      	bls.n	8008030 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800801e:	4b6d      	ldr	r3, [pc, #436]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 8008020:	69db      	ldr	r3, [r3, #28]
 8008022:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	496a      	ldr	r1, [pc, #424]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 800802c:	4313      	orrs	r3, r2
 800802e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0310 	and.w	r3, r3, #16
 8008038:	2b00      	cmp	r3, #0
 800803a:	d010      	beq.n	800805e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	699a      	ldr	r2, [r3, #24]
 8008040:	4b64      	ldr	r3, [pc, #400]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 8008042:	69db      	ldr	r3, [r3, #28]
 8008044:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008048:	429a      	cmp	r2, r3
 800804a:	d908      	bls.n	800805e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800804c:	4b61      	ldr	r3, [pc, #388]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 800804e:	69db      	ldr	r3, [r3, #28]
 8008050:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	495e      	ldr	r1, [pc, #376]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 800805a:	4313      	orrs	r3, r2
 800805c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0320 	and.w	r3, r3, #32
 8008066:	2b00      	cmp	r3, #0
 8008068:	d010      	beq.n	800808c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	69da      	ldr	r2, [r3, #28]
 800806e:	4b59      	ldr	r3, [pc, #356]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 8008070:	6a1b      	ldr	r3, [r3, #32]
 8008072:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008076:	429a      	cmp	r2, r3
 8008078:	d908      	bls.n	800808c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800807a:	4b56      	ldr	r3, [pc, #344]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	4953      	ldr	r1, [pc, #332]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 8008088:	4313      	orrs	r3, r2
 800808a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0302 	and.w	r3, r3, #2
 8008094:	2b00      	cmp	r3, #0
 8008096:	d010      	beq.n	80080ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	4b4d      	ldr	r3, [pc, #308]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	f003 030f 	and.w	r3, r3, #15
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d908      	bls.n	80080ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080a8:	4b4a      	ldr	r3, [pc, #296]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	f023 020f 	bic.w	r2, r3, #15
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	4947      	ldr	r1, [pc, #284]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 0301 	and.w	r3, r3, #1
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d055      	beq.n	8008172 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80080c6:	4b43      	ldr	r3, [pc, #268]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	4940      	ldr	r1, [pc, #256]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 80080d4:	4313      	orrs	r3, r2
 80080d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d107      	bne.n	80080f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080e0:	4b3c      	ldr	r3, [pc, #240]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d121      	bne.n	8008130 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e0f6      	b.n	80082de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	2b03      	cmp	r3, #3
 80080f6:	d107      	bne.n	8008108 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080f8:	4b36      	ldr	r3, [pc, #216]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008100:	2b00      	cmp	r3, #0
 8008102:	d115      	bne.n	8008130 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e0ea      	b.n	80082de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d107      	bne.n	8008120 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008110:	4b30      	ldr	r3, [pc, #192]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008118:	2b00      	cmp	r3, #0
 800811a:	d109      	bne.n	8008130 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e0de      	b.n	80082de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008120:	4b2c      	ldr	r3, [pc, #176]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0304 	and.w	r3, r3, #4
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e0d6      	b.n	80082de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008130:	4b28      	ldr	r3, [pc, #160]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	f023 0207 	bic.w	r2, r3, #7
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	4925      	ldr	r1, [pc, #148]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 800813e:	4313      	orrs	r3, r2
 8008140:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008142:	f7fd fa2b 	bl	800559c <HAL_GetTick>
 8008146:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008148:	e00a      	b.n	8008160 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800814a:	f7fd fa27 	bl	800559c <HAL_GetTick>
 800814e:	4602      	mov	r2, r0
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008158:	4293      	cmp	r3, r2
 800815a:	d901      	bls.n	8008160 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800815c:	2303      	movs	r3, #3
 800815e:	e0be      	b.n	80082de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008160:	4b1c      	ldr	r3, [pc, #112]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	00db      	lsls	r3, r3, #3
 800816e:	429a      	cmp	r2, r3
 8008170:	d1eb      	bne.n	800814a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0302 	and.w	r3, r3, #2
 800817a:	2b00      	cmp	r3, #0
 800817c:	d010      	beq.n	80081a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	4b14      	ldr	r3, [pc, #80]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	f003 030f 	and.w	r3, r3, #15
 800818a:	429a      	cmp	r2, r3
 800818c:	d208      	bcs.n	80081a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800818e:	4b11      	ldr	r3, [pc, #68]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	f023 020f 	bic.w	r2, r3, #15
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	490e      	ldr	r1, [pc, #56]	@ (80081d4 <HAL_RCC_ClockConfig+0x244>)
 800819c:	4313      	orrs	r3, r2
 800819e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80081a0:	4b0b      	ldr	r3, [pc, #44]	@ (80081d0 <HAL_RCC_ClockConfig+0x240>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 030f 	and.w	r3, r3, #15
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d214      	bcs.n	80081d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ae:	4b08      	ldr	r3, [pc, #32]	@ (80081d0 <HAL_RCC_ClockConfig+0x240>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f023 020f 	bic.w	r2, r3, #15
 80081b6:	4906      	ldr	r1, [pc, #24]	@ (80081d0 <HAL_RCC_ClockConfig+0x240>)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081be:	4b04      	ldr	r3, [pc, #16]	@ (80081d0 <HAL_RCC_ClockConfig+0x240>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 030f 	and.w	r3, r3, #15
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d005      	beq.n	80081d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e086      	b.n	80082de <HAL_RCC_ClockConfig+0x34e>
 80081d0:	52002000 	.word	0x52002000
 80081d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0304 	and.w	r3, r3, #4
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d010      	beq.n	8008206 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	691a      	ldr	r2, [r3, #16]
 80081e8:	4b3f      	ldr	r3, [pc, #252]	@ (80082e8 <HAL_RCC_ClockConfig+0x358>)
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d208      	bcs.n	8008206 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80081f4:	4b3c      	ldr	r3, [pc, #240]	@ (80082e8 <HAL_RCC_ClockConfig+0x358>)
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	4939      	ldr	r1, [pc, #228]	@ (80082e8 <HAL_RCC_ClockConfig+0x358>)
 8008202:	4313      	orrs	r3, r2
 8008204:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0308 	and.w	r3, r3, #8
 800820e:	2b00      	cmp	r3, #0
 8008210:	d010      	beq.n	8008234 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	695a      	ldr	r2, [r3, #20]
 8008216:	4b34      	ldr	r3, [pc, #208]	@ (80082e8 <HAL_RCC_ClockConfig+0x358>)
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800821e:	429a      	cmp	r2, r3
 8008220:	d208      	bcs.n	8008234 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008222:	4b31      	ldr	r3, [pc, #196]	@ (80082e8 <HAL_RCC_ClockConfig+0x358>)
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	492e      	ldr	r1, [pc, #184]	@ (80082e8 <HAL_RCC_ClockConfig+0x358>)
 8008230:	4313      	orrs	r3, r2
 8008232:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0310 	and.w	r3, r3, #16
 800823c:	2b00      	cmp	r3, #0
 800823e:	d010      	beq.n	8008262 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	699a      	ldr	r2, [r3, #24]
 8008244:	4b28      	ldr	r3, [pc, #160]	@ (80082e8 <HAL_RCC_ClockConfig+0x358>)
 8008246:	69db      	ldr	r3, [r3, #28]
 8008248:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800824c:	429a      	cmp	r2, r3
 800824e:	d208      	bcs.n	8008262 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008250:	4b25      	ldr	r3, [pc, #148]	@ (80082e8 <HAL_RCC_ClockConfig+0x358>)
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	4922      	ldr	r1, [pc, #136]	@ (80082e8 <HAL_RCC_ClockConfig+0x358>)
 800825e:	4313      	orrs	r3, r2
 8008260:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0320 	and.w	r3, r3, #32
 800826a:	2b00      	cmp	r3, #0
 800826c:	d010      	beq.n	8008290 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69da      	ldr	r2, [r3, #28]
 8008272:	4b1d      	ldr	r3, [pc, #116]	@ (80082e8 <HAL_RCC_ClockConfig+0x358>)
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800827a:	429a      	cmp	r2, r3
 800827c:	d208      	bcs.n	8008290 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800827e:	4b1a      	ldr	r3, [pc, #104]	@ (80082e8 <HAL_RCC_ClockConfig+0x358>)
 8008280:	6a1b      	ldr	r3, [r3, #32]
 8008282:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	4917      	ldr	r1, [pc, #92]	@ (80082e8 <HAL_RCC_ClockConfig+0x358>)
 800828c:	4313      	orrs	r3, r2
 800828e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008290:	f000 f834 	bl	80082fc <HAL_RCC_GetSysClockFreq>
 8008294:	4602      	mov	r2, r0
 8008296:	4b14      	ldr	r3, [pc, #80]	@ (80082e8 <HAL_RCC_ClockConfig+0x358>)
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	0a1b      	lsrs	r3, r3, #8
 800829c:	f003 030f 	and.w	r3, r3, #15
 80082a0:	4912      	ldr	r1, [pc, #72]	@ (80082ec <HAL_RCC_ClockConfig+0x35c>)
 80082a2:	5ccb      	ldrb	r3, [r1, r3]
 80082a4:	f003 031f 	and.w	r3, r3, #31
 80082a8:	fa22 f303 	lsr.w	r3, r2, r3
 80082ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80082ae:	4b0e      	ldr	r3, [pc, #56]	@ (80082e8 <HAL_RCC_ClockConfig+0x358>)
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	f003 030f 	and.w	r3, r3, #15
 80082b6:	4a0d      	ldr	r2, [pc, #52]	@ (80082ec <HAL_RCC_ClockConfig+0x35c>)
 80082b8:	5cd3      	ldrb	r3, [r2, r3]
 80082ba:	f003 031f 	and.w	r3, r3, #31
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	fa22 f303 	lsr.w	r3, r2, r3
 80082c4:	4a0a      	ldr	r2, [pc, #40]	@ (80082f0 <HAL_RCC_ClockConfig+0x360>)
 80082c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082c8:	4a0a      	ldr	r2, [pc, #40]	@ (80082f4 <HAL_RCC_ClockConfig+0x364>)
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80082ce:	4b0a      	ldr	r3, [pc, #40]	@ (80082f8 <HAL_RCC_ClockConfig+0x368>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7fd f918 	bl	8005508 <HAL_InitTick>
 80082d8:	4603      	mov	r3, r0
 80082da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3718      	adds	r7, #24
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	58024400 	.word	0x58024400
 80082ec:	080133b0 	.word	0x080133b0
 80082f0:	2400005c 	.word	0x2400005c
 80082f4:	24000058 	.word	0x24000058
 80082f8:	24000060 	.word	0x24000060

080082fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b089      	sub	sp, #36	@ 0x24
 8008300:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008302:	4bb3      	ldr	r3, [pc, #716]	@ (80085d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800830a:	2b18      	cmp	r3, #24
 800830c:	f200 8155 	bhi.w	80085ba <HAL_RCC_GetSysClockFreq+0x2be>
 8008310:	a201      	add	r2, pc, #4	@ (adr r2, 8008318 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008316:	bf00      	nop
 8008318:	0800837d 	.word	0x0800837d
 800831c:	080085bb 	.word	0x080085bb
 8008320:	080085bb 	.word	0x080085bb
 8008324:	080085bb 	.word	0x080085bb
 8008328:	080085bb 	.word	0x080085bb
 800832c:	080085bb 	.word	0x080085bb
 8008330:	080085bb 	.word	0x080085bb
 8008334:	080085bb 	.word	0x080085bb
 8008338:	080083a3 	.word	0x080083a3
 800833c:	080085bb 	.word	0x080085bb
 8008340:	080085bb 	.word	0x080085bb
 8008344:	080085bb 	.word	0x080085bb
 8008348:	080085bb 	.word	0x080085bb
 800834c:	080085bb 	.word	0x080085bb
 8008350:	080085bb 	.word	0x080085bb
 8008354:	080085bb 	.word	0x080085bb
 8008358:	080083a9 	.word	0x080083a9
 800835c:	080085bb 	.word	0x080085bb
 8008360:	080085bb 	.word	0x080085bb
 8008364:	080085bb 	.word	0x080085bb
 8008368:	080085bb 	.word	0x080085bb
 800836c:	080085bb 	.word	0x080085bb
 8008370:	080085bb 	.word	0x080085bb
 8008374:	080085bb 	.word	0x080085bb
 8008378:	080083af 	.word	0x080083af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800837c:	4b94      	ldr	r3, [pc, #592]	@ (80085d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0320 	and.w	r3, r3, #32
 8008384:	2b00      	cmp	r3, #0
 8008386:	d009      	beq.n	800839c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008388:	4b91      	ldr	r3, [pc, #580]	@ (80085d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	08db      	lsrs	r3, r3, #3
 800838e:	f003 0303 	and.w	r3, r3, #3
 8008392:	4a90      	ldr	r2, [pc, #576]	@ (80085d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008394:	fa22 f303 	lsr.w	r3, r2, r3
 8008398:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800839a:	e111      	b.n	80085c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800839c:	4b8d      	ldr	r3, [pc, #564]	@ (80085d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800839e:	61bb      	str	r3, [r7, #24]
      break;
 80083a0:	e10e      	b.n	80085c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80083a2:	4b8d      	ldr	r3, [pc, #564]	@ (80085d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80083a4:	61bb      	str	r3, [r7, #24]
      break;
 80083a6:	e10b      	b.n	80085c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80083a8:	4b8c      	ldr	r3, [pc, #560]	@ (80085dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80083aa:	61bb      	str	r3, [r7, #24]
      break;
 80083ac:	e108      	b.n	80085c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083ae:	4b88      	ldr	r3, [pc, #544]	@ (80085d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b2:	f003 0303 	and.w	r3, r3, #3
 80083b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80083b8:	4b85      	ldr	r3, [pc, #532]	@ (80085d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083bc:	091b      	lsrs	r3, r3, #4
 80083be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80083c4:	4b82      	ldr	r3, [pc, #520]	@ (80085d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c8:	f003 0301 	and.w	r3, r3, #1
 80083cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80083ce:	4b80      	ldr	r3, [pc, #512]	@ (80085d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083d2:	08db      	lsrs	r3, r3, #3
 80083d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	fb02 f303 	mul.w	r3, r2, r3
 80083de:	ee07 3a90 	vmov	s15, r3
 80083e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 80e1 	beq.w	80085b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	f000 8083 	beq.w	8008500 <HAL_RCC_GetSysClockFreq+0x204>
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	f200 80a1 	bhi.w	8008544 <HAL_RCC_GetSysClockFreq+0x248>
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d003      	beq.n	8008410 <HAL_RCC_GetSysClockFreq+0x114>
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d056      	beq.n	80084bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800840e:	e099      	b.n	8008544 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008410:	4b6f      	ldr	r3, [pc, #444]	@ (80085d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0320 	and.w	r3, r3, #32
 8008418:	2b00      	cmp	r3, #0
 800841a:	d02d      	beq.n	8008478 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800841c:	4b6c      	ldr	r3, [pc, #432]	@ (80085d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	08db      	lsrs	r3, r3, #3
 8008422:	f003 0303 	and.w	r3, r3, #3
 8008426:	4a6b      	ldr	r2, [pc, #428]	@ (80085d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008428:	fa22 f303 	lsr.w	r3, r2, r3
 800842c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	ee07 3a90 	vmov	s15, r3
 8008434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	ee07 3a90 	vmov	s15, r3
 800843e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008446:	4b62      	ldr	r3, [pc, #392]	@ (80085d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800844a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800844e:	ee07 3a90 	vmov	s15, r3
 8008452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008456:	ed97 6a02 	vldr	s12, [r7, #8]
 800845a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80085e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800845e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800846a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800846e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008472:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008476:	e087      	b.n	8008588 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	ee07 3a90 	vmov	s15, r3
 800847e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008482:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80085e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800848a:	4b51      	ldr	r3, [pc, #324]	@ (80085d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800848c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800848e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008492:	ee07 3a90 	vmov	s15, r3
 8008496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800849a:	ed97 6a02 	vldr	s12, [r7, #8]
 800849e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80085e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80084ba:	e065      	b.n	8008588 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	ee07 3a90 	vmov	s15, r3
 80084c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80085e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80084ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ce:	4b40      	ldr	r3, [pc, #256]	@ (80085d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d6:	ee07 3a90 	vmov	s15, r3
 80084da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084de:	ed97 6a02 	vldr	s12, [r7, #8]
 80084e2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80085e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80084fe:	e043      	b.n	8008588 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	ee07 3a90 	vmov	s15, r3
 8008506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80085ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800850e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008512:	4b2f      	ldr	r3, [pc, #188]	@ (80085d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800851a:	ee07 3a90 	vmov	s15, r3
 800851e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008522:	ed97 6a02 	vldr	s12, [r7, #8]
 8008526:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80085e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800852a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800852e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800853a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800853e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008542:	e021      	b.n	8008588 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80085e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008556:	4b1e      	ldr	r3, [pc, #120]	@ (80085d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800855a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800855e:	ee07 3a90 	vmov	s15, r3
 8008562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008566:	ed97 6a02 	vldr	s12, [r7, #8]
 800856a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80085e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800856e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800857a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800857e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008582:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008586:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008588:	4b11      	ldr	r3, [pc, #68]	@ (80085d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800858a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800858c:	0a5b      	lsrs	r3, r3, #9
 800858e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008592:	3301      	adds	r3, #1
 8008594:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	ee07 3a90 	vmov	s15, r3
 800859c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80085a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80085a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085ac:	ee17 3a90 	vmov	r3, s15
 80085b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80085b2:	e005      	b.n	80085c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80085b4:	2300      	movs	r3, #0
 80085b6:	61bb      	str	r3, [r7, #24]
      break;
 80085b8:	e002      	b.n	80085c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80085ba:	4b07      	ldr	r3, [pc, #28]	@ (80085d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80085bc:	61bb      	str	r3, [r7, #24]
      break;
 80085be:	bf00      	nop
  }

  return sysclockfreq;
 80085c0:	69bb      	ldr	r3, [r7, #24]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3724      	adds	r7, #36	@ 0x24
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	58024400 	.word	0x58024400
 80085d4:	03d09000 	.word	0x03d09000
 80085d8:	003d0900 	.word	0x003d0900
 80085dc:	017d7840 	.word	0x017d7840
 80085e0:	46000000 	.word	0x46000000
 80085e4:	4c742400 	.word	0x4c742400
 80085e8:	4a742400 	.word	0x4a742400
 80085ec:	4bbebc20 	.word	0x4bbebc20

080085f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80085f6:	f7ff fe81 	bl	80082fc <HAL_RCC_GetSysClockFreq>
 80085fa:	4602      	mov	r2, r0
 80085fc:	4b10      	ldr	r3, [pc, #64]	@ (8008640 <HAL_RCC_GetHCLKFreq+0x50>)
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	0a1b      	lsrs	r3, r3, #8
 8008602:	f003 030f 	and.w	r3, r3, #15
 8008606:	490f      	ldr	r1, [pc, #60]	@ (8008644 <HAL_RCC_GetHCLKFreq+0x54>)
 8008608:	5ccb      	ldrb	r3, [r1, r3]
 800860a:	f003 031f 	and.w	r3, r3, #31
 800860e:	fa22 f303 	lsr.w	r3, r2, r3
 8008612:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008614:	4b0a      	ldr	r3, [pc, #40]	@ (8008640 <HAL_RCC_GetHCLKFreq+0x50>)
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	f003 030f 	and.w	r3, r3, #15
 800861c:	4a09      	ldr	r2, [pc, #36]	@ (8008644 <HAL_RCC_GetHCLKFreq+0x54>)
 800861e:	5cd3      	ldrb	r3, [r2, r3]
 8008620:	f003 031f 	and.w	r3, r3, #31
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	fa22 f303 	lsr.w	r3, r2, r3
 800862a:	4a07      	ldr	r2, [pc, #28]	@ (8008648 <HAL_RCC_GetHCLKFreq+0x58>)
 800862c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800862e:	4a07      	ldr	r2, [pc, #28]	@ (800864c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008634:	4b04      	ldr	r3, [pc, #16]	@ (8008648 <HAL_RCC_GetHCLKFreq+0x58>)
 8008636:	681b      	ldr	r3, [r3, #0]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	58024400 	.word	0x58024400
 8008644:	080133b0 	.word	0x080133b0
 8008648:	2400005c 	.word	0x2400005c
 800864c:	24000058 	.word	0x24000058

08008650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008654:	f7ff ffcc 	bl	80085f0 <HAL_RCC_GetHCLKFreq>
 8008658:	4602      	mov	r2, r0
 800865a:	4b06      	ldr	r3, [pc, #24]	@ (8008674 <HAL_RCC_GetPCLK1Freq+0x24>)
 800865c:	69db      	ldr	r3, [r3, #28]
 800865e:	091b      	lsrs	r3, r3, #4
 8008660:	f003 0307 	and.w	r3, r3, #7
 8008664:	4904      	ldr	r1, [pc, #16]	@ (8008678 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008666:	5ccb      	ldrb	r3, [r1, r3]
 8008668:	f003 031f 	and.w	r3, r3, #31
 800866c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008670:	4618      	mov	r0, r3
 8008672:	bd80      	pop	{r7, pc}
 8008674:	58024400 	.word	0x58024400
 8008678:	080133b0 	.word	0x080133b0

0800867c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008680:	f7ff ffb6 	bl	80085f0 <HAL_RCC_GetHCLKFreq>
 8008684:	4602      	mov	r2, r0
 8008686:	4b06      	ldr	r3, [pc, #24]	@ (80086a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008688:	69db      	ldr	r3, [r3, #28]
 800868a:	0a1b      	lsrs	r3, r3, #8
 800868c:	f003 0307 	and.w	r3, r3, #7
 8008690:	4904      	ldr	r1, [pc, #16]	@ (80086a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008692:	5ccb      	ldrb	r3, [r1, r3]
 8008694:	f003 031f 	and.w	r3, r3, #31
 8008698:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800869c:	4618      	mov	r0, r3
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	58024400 	.word	0x58024400
 80086a4:	080133b0 	.word	0x080133b0

080086a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086ac:	b0ca      	sub	sp, #296	@ 0x128
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80086b4:	2300      	movs	r3, #0
 80086b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80086ba:	2300      	movs	r3, #0
 80086bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80086c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80086cc:	2500      	movs	r5, #0
 80086ce:	ea54 0305 	orrs.w	r3, r4, r5
 80086d2:	d049      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80086d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80086de:	d02f      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80086e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80086e4:	d828      	bhi.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80086e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086ea:	d01a      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80086ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086f0:	d822      	bhi.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80086f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086fa:	d007      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80086fc:	e01c      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086fe:	4bb8      	ldr	r3, [pc, #736]	@ (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008702:	4ab7      	ldr	r2, [pc, #732]	@ (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008708:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800870a:	e01a      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800870c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008710:	3308      	adds	r3, #8
 8008712:	2102      	movs	r1, #2
 8008714:	4618      	mov	r0, r3
 8008716:	f002 fb61 	bl	800addc <RCCEx_PLL2_Config>
 800871a:	4603      	mov	r3, r0
 800871c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008720:	e00f      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008726:	3328      	adds	r3, #40	@ 0x28
 8008728:	2102      	movs	r1, #2
 800872a:	4618      	mov	r0, r3
 800872c:	f002 fc08 	bl	800af40 <RCCEx_PLL3_Config>
 8008730:	4603      	mov	r3, r0
 8008732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008736:	e004      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800873e:	e000      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10a      	bne.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800874a:	4ba5      	ldr	r3, [pc, #660]	@ (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800874c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800874e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008756:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008758:	4aa1      	ldr	r2, [pc, #644]	@ (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800875a:	430b      	orrs	r3, r1
 800875c:	6513      	str	r3, [r2, #80]	@ 0x50
 800875e:	e003      	b.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008760:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008764:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800876c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008770:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008774:	f04f 0900 	mov.w	r9, #0
 8008778:	ea58 0309 	orrs.w	r3, r8, r9
 800877c:	d047      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800877e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008784:	2b04      	cmp	r3, #4
 8008786:	d82a      	bhi.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008788:	a201      	add	r2, pc, #4	@ (adr r2, 8008790 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800878a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878e:	bf00      	nop
 8008790:	080087a5 	.word	0x080087a5
 8008794:	080087b3 	.word	0x080087b3
 8008798:	080087c9 	.word	0x080087c9
 800879c:	080087e7 	.word	0x080087e7
 80087a0:	080087e7 	.word	0x080087e7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087a4:	4b8e      	ldr	r3, [pc, #568]	@ (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a8:	4a8d      	ldr	r2, [pc, #564]	@ (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087b0:	e01a      	b.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087b6:	3308      	adds	r3, #8
 80087b8:	2100      	movs	r1, #0
 80087ba:	4618      	mov	r0, r3
 80087bc:	f002 fb0e 	bl	800addc <RCCEx_PLL2_Config>
 80087c0:	4603      	mov	r3, r0
 80087c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087c6:	e00f      	b.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087cc:	3328      	adds	r3, #40	@ 0x28
 80087ce:	2100      	movs	r1, #0
 80087d0:	4618      	mov	r0, r3
 80087d2:	f002 fbb5 	bl	800af40 <RCCEx_PLL3_Config>
 80087d6:	4603      	mov	r3, r0
 80087d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087dc:	e004      	b.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087e4:	e000      	b.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80087e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10a      	bne.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087f0:	4b7b      	ldr	r3, [pc, #492]	@ (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087f4:	f023 0107 	bic.w	r1, r3, #7
 80087f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087fe:	4a78      	ldr	r2, [pc, #480]	@ (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008800:	430b      	orrs	r3, r1
 8008802:	6513      	str	r3, [r2, #80]	@ 0x50
 8008804:	e003      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800880a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800880e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008816:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800881a:	f04f 0b00 	mov.w	fp, #0
 800881e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008822:	d04c      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800882a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800882e:	d030      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008830:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008834:	d829      	bhi.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008836:	2bc0      	cmp	r3, #192	@ 0xc0
 8008838:	d02d      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800883a:	2bc0      	cmp	r3, #192	@ 0xc0
 800883c:	d825      	bhi.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800883e:	2b80      	cmp	r3, #128	@ 0x80
 8008840:	d018      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008842:	2b80      	cmp	r3, #128	@ 0x80
 8008844:	d821      	bhi.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008846:	2b00      	cmp	r3, #0
 8008848:	d002      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800884a:	2b40      	cmp	r3, #64	@ 0x40
 800884c:	d007      	beq.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800884e:	e01c      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008850:	4b63      	ldr	r3, [pc, #396]	@ (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008854:	4a62      	ldr	r2, [pc, #392]	@ (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800885a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800885c:	e01c      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800885e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008862:	3308      	adds	r3, #8
 8008864:	2100      	movs	r1, #0
 8008866:	4618      	mov	r0, r3
 8008868:	f002 fab8 	bl	800addc <RCCEx_PLL2_Config>
 800886c:	4603      	mov	r3, r0
 800886e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008872:	e011      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008878:	3328      	adds	r3, #40	@ 0x28
 800887a:	2100      	movs	r1, #0
 800887c:	4618      	mov	r0, r3
 800887e:	f002 fb5f 	bl	800af40 <RCCEx_PLL3_Config>
 8008882:	4603      	mov	r3, r0
 8008884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008888:	e006      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008890:	e002      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008892:	bf00      	nop
 8008894:	e000      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008898:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10a      	bne.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80088a0:	4b4f      	ldr	r3, [pc, #316]	@ (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088a4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80088a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088ae:	4a4c      	ldr	r2, [pc, #304]	@ (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088b0:	430b      	orrs	r3, r1
 80088b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80088b4:	e003      	b.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80088be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80088ca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80088ce:	2300      	movs	r3, #0
 80088d0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80088d4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80088d8:	460b      	mov	r3, r1
 80088da:	4313      	orrs	r3, r2
 80088dc:	d053      	beq.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80088de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80088e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088ea:	d035      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80088ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088f0:	d82e      	bhi.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80088f2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80088f6:	d031      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80088f8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80088fc:	d828      	bhi.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80088fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008902:	d01a      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008904:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008908:	d822      	bhi.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800890a:	2b00      	cmp	r3, #0
 800890c:	d003      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800890e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008912:	d007      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008914:	e01c      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008916:	4b32      	ldr	r3, [pc, #200]	@ (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800891a:	4a31      	ldr	r2, [pc, #196]	@ (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800891c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008920:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008922:	e01c      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008928:	3308      	adds	r3, #8
 800892a:	2100      	movs	r1, #0
 800892c:	4618      	mov	r0, r3
 800892e:	f002 fa55 	bl	800addc <RCCEx_PLL2_Config>
 8008932:	4603      	mov	r3, r0
 8008934:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008938:	e011      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800893a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800893e:	3328      	adds	r3, #40	@ 0x28
 8008940:	2100      	movs	r1, #0
 8008942:	4618      	mov	r0, r3
 8008944:	f002 fafc 	bl	800af40 <RCCEx_PLL3_Config>
 8008948:	4603      	mov	r3, r0
 800894a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800894e:	e006      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008956:	e002      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008958:	bf00      	nop
 800895a:	e000      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800895c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800895e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10b      	bne.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008966:	4b1e      	ldr	r3, [pc, #120]	@ (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800896a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800896e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008972:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008976:	4a1a      	ldr	r2, [pc, #104]	@ (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008978:	430b      	orrs	r3, r1
 800897a:	6593      	str	r3, [r2, #88]	@ 0x58
 800897c:	e003      	b.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008982:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008992:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008996:	2300      	movs	r3, #0
 8008998:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800899c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80089a0:	460b      	mov	r3, r1
 80089a2:	4313      	orrs	r3, r2
 80089a4:	d056      	beq.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80089a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80089ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80089b2:	d038      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80089b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80089b8:	d831      	bhi.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80089ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80089be:	d034      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80089c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80089c4:	d82b      	bhi.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80089c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089ca:	d01d      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80089cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089d0:	d825      	bhi.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d006      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80089d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089da:	d00a      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80089dc:	e01f      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80089de:	bf00      	nop
 80089e0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089e4:	4ba2      	ldr	r3, [pc, #648]	@ (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e8:	4aa1      	ldr	r2, [pc, #644]	@ (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80089f0:	e01c      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089f6:	3308      	adds	r3, #8
 80089f8:	2100      	movs	r1, #0
 80089fa:	4618      	mov	r0, r3
 80089fc:	f002 f9ee 	bl	800addc <RCCEx_PLL2_Config>
 8008a00:	4603      	mov	r3, r0
 8008a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008a06:	e011      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a0c:	3328      	adds	r3, #40	@ 0x28
 8008a0e:	2100      	movs	r1, #0
 8008a10:	4618      	mov	r0, r3
 8008a12:	f002 fa95 	bl	800af40 <RCCEx_PLL3_Config>
 8008a16:	4603      	mov	r3, r0
 8008a18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a1c:	e006      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a24:	e002      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008a26:	bf00      	nop
 8008a28:	e000      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10b      	bne.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008a34:	4b8e      	ldr	r3, [pc, #568]	@ (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a38:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008a44:	4a8a      	ldr	r2, [pc, #552]	@ (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a46:	430b      	orrs	r3, r1
 8008a48:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a4a:	e003      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008a60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008a64:	2300      	movs	r3, #0
 8008a66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008a6a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4313      	orrs	r3, r2
 8008a72:	d03a      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a7a:	2b30      	cmp	r3, #48	@ 0x30
 8008a7c:	d01f      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008a7e:	2b30      	cmp	r3, #48	@ 0x30
 8008a80:	d819      	bhi.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008a82:	2b20      	cmp	r3, #32
 8008a84:	d00c      	beq.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008a86:	2b20      	cmp	r3, #32
 8008a88:	d815      	bhi.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d019      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008a8e:	2b10      	cmp	r3, #16
 8008a90:	d111      	bne.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a92:	4b77      	ldr	r3, [pc, #476]	@ (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a96:	4a76      	ldr	r2, [pc, #472]	@ (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008a9e:	e011      	b.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aa4:	3308      	adds	r3, #8
 8008aa6:	2102      	movs	r1, #2
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f002 f997 	bl	800addc <RCCEx_PLL2_Config>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008ab4:	e006      	b.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008abc:	e002      	b.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008abe:	bf00      	nop
 8008ac0:	e000      	b.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10a      	bne.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008acc:	4b68      	ldr	r3, [pc, #416]	@ (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ad0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ada:	4a65      	ldr	r2, [pc, #404]	@ (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008adc:	430b      	orrs	r3, r1
 8008ade:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ae0:	e003      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ae6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008af6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008afa:	2300      	movs	r3, #0
 8008afc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008b00:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008b04:	460b      	mov	r3, r1
 8008b06:	4313      	orrs	r3, r2
 8008b08:	d051      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b14:	d035      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008b16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b1a:	d82e      	bhi.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008b1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b20:	d031      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008b22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b26:	d828      	bhi.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008b28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b2c:	d01a      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b32:	d822      	bhi.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d003      	beq.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b3c:	d007      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008b3e:	e01c      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b40:	4b4b      	ldr	r3, [pc, #300]	@ (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b44:	4a4a      	ldr	r2, [pc, #296]	@ (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b4c:	e01c      	b.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b52:	3308      	adds	r3, #8
 8008b54:	2100      	movs	r1, #0
 8008b56:	4618      	mov	r0, r3
 8008b58:	f002 f940 	bl	800addc <RCCEx_PLL2_Config>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b62:	e011      	b.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b68:	3328      	adds	r3, #40	@ 0x28
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f002 f9e7 	bl	800af40 <RCCEx_PLL3_Config>
 8008b72:	4603      	mov	r3, r0
 8008b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b78:	e006      	b.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b80:	e002      	b.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008b82:	bf00      	nop
 8008b84:	e000      	b.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10a      	bne.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008b90:	4b37      	ldr	r3, [pc, #220]	@ (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b94:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b9e:	4a34      	ldr	r2, [pc, #208]	@ (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ba0:	430b      	orrs	r3, r1
 8008ba2:	6513      	str	r3, [r2, #80]	@ 0x50
 8008ba4:	e003      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008baa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008bba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008bc4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008bc8:	460b      	mov	r3, r1
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	d056      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bd8:	d033      	beq.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008bda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bde:	d82c      	bhi.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008be0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008be4:	d02f      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008be6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008bea:	d826      	bhi.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008bec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008bf0:	d02b      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008bf2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008bf6:	d820      	bhi.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008bf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bfc:	d012      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008bfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c02:	d81a      	bhi.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d022      	beq.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c0c:	d115      	bne.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c12:	3308      	adds	r3, #8
 8008c14:	2101      	movs	r1, #1
 8008c16:	4618      	mov	r0, r3
 8008c18:	f002 f8e0 	bl	800addc <RCCEx_PLL2_Config>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008c22:	e015      	b.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c28:	3328      	adds	r3, #40	@ 0x28
 8008c2a:	2101      	movs	r1, #1
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f002 f987 	bl	800af40 <RCCEx_PLL3_Config>
 8008c32:	4603      	mov	r3, r0
 8008c34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008c38:	e00a      	b.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c40:	e006      	b.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c42:	bf00      	nop
 8008c44:	e004      	b.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c46:	bf00      	nop
 8008c48:	e002      	b.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c4a:	bf00      	nop
 8008c4c:	e000      	b.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d10d      	bne.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008c58:	4b05      	ldr	r3, [pc, #20]	@ (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c5c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c66:	4a02      	ldr	r2, [pc, #8]	@ (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c68:	430b      	orrs	r3, r1
 8008c6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c6c:	e006      	b.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008c6e:	bf00      	nop
 8008c70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c84:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008c88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008c92:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008c96:	460b      	mov	r3, r1
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	d055      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ca0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ca8:	d033      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cae:	d82c      	bhi.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cb4:	d02f      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cba:	d826      	bhi.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008cbc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008cc0:	d02b      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008cc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008cc6:	d820      	bhi.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008cc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ccc:	d012      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008cce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cd2:	d81a      	bhi.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d022      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008cd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cdc:	d115      	bne.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ce2:	3308      	adds	r3, #8
 8008ce4:	2101      	movs	r1, #1
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f002 f878 	bl	800addc <RCCEx_PLL2_Config>
 8008cec:	4603      	mov	r3, r0
 8008cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008cf2:	e015      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cf8:	3328      	adds	r3, #40	@ 0x28
 8008cfa:	2101      	movs	r1, #1
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f002 f91f 	bl	800af40 <RCCEx_PLL3_Config>
 8008d02:	4603      	mov	r3, r0
 8008d04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008d08:	e00a      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d10:	e006      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d12:	bf00      	nop
 8008d14:	e004      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d16:	bf00      	nop
 8008d18:	e002      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d1a:	bf00      	nop
 8008d1c:	e000      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d10b      	bne.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008d28:	4ba3      	ldr	r3, [pc, #652]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d2c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008d38:	4a9f      	ldr	r2, [pc, #636]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d3a:	430b      	orrs	r3, r1
 8008d3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d3e:	e003      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d50:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008d54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008d5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008d62:	460b      	mov	r3, r1
 8008d64:	4313      	orrs	r3, r2
 8008d66:	d037      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d72:	d00e      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008d74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d78:	d816      	bhi.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d018      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008d7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d82:	d111      	bne.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d84:	4b8c      	ldr	r3, [pc, #560]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d88:	4a8b      	ldr	r2, [pc, #556]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008d90:	e00f      	b.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d96:	3308      	adds	r3, #8
 8008d98:	2101      	movs	r1, #1
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f002 f81e 	bl	800addc <RCCEx_PLL2_Config>
 8008da0:	4603      	mov	r3, r0
 8008da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008da6:	e004      	b.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008dae:	e000      	b.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10a      	bne.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008dba:	4b7f      	ldr	r3, [pc, #508]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dbe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dc8:	4a7b      	ldr	r2, [pc, #492]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dca:	430b      	orrs	r3, r1
 8008dcc:	6513      	str	r3, [r2, #80]	@ 0x50
 8008dce:	e003      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008de4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008de8:	2300      	movs	r3, #0
 8008dea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008dee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008df2:	460b      	mov	r3, r1
 8008df4:	4313      	orrs	r3, r2
 8008df6:	d039      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	d81c      	bhi.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008e02:	a201      	add	r2, pc, #4	@ (adr r2, 8008e08 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e08:	08008e45 	.word	0x08008e45
 8008e0c:	08008e19 	.word	0x08008e19
 8008e10:	08008e27 	.word	0x08008e27
 8008e14:	08008e45 	.word	0x08008e45
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e18:	4b67      	ldr	r3, [pc, #412]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e1c:	4a66      	ldr	r2, [pc, #408]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008e24:	e00f      	b.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e2a:	3308      	adds	r3, #8
 8008e2c:	2102      	movs	r1, #2
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f001 ffd4 	bl	800addc <RCCEx_PLL2_Config>
 8008e34:	4603      	mov	r3, r0
 8008e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008e3a:	e004      	b.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e42:	e000      	b.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d10a      	bne.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008e4e:	4b5a      	ldr	r3, [pc, #360]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e52:	f023 0103 	bic.w	r1, r3, #3
 8008e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e5c:	4a56      	ldr	r2, [pc, #344]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e5e:	430b      	orrs	r3, r1
 8008e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e62:	e003      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008e78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008e82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008e86:	460b      	mov	r3, r1
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	f000 809f 	beq.w	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e8e:	4b4b      	ldr	r3, [pc, #300]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a4a      	ldr	r2, [pc, #296]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e9a:	f7fc fb7f 	bl	800559c <HAL_GetTick>
 8008e9e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ea2:	e00b      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ea4:	f7fc fb7a 	bl	800559c <HAL_GetTick>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008eae:	1ad3      	subs	r3, r2, r3
 8008eb0:	2b64      	cmp	r3, #100	@ 0x64
 8008eb2:	d903      	bls.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008eba:	e005      	b.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ebc:	4b3f      	ldr	r3, [pc, #252]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0ed      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d179      	bne.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008ed0:	4b39      	ldr	r3, [pc, #228]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ed2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ed8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008edc:	4053      	eors	r3, r2
 8008ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d015      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ee6:	4b34      	ldr	r3, [pc, #208]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008eea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008eee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008ef2:	4b31      	ldr	r3, [pc, #196]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ef6:	4a30      	ldr	r2, [pc, #192]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008efc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008efe:	4b2e      	ldr	r3, [pc, #184]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f02:	4a2d      	ldr	r2, [pc, #180]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f08:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008f0a:	4a2b      	ldr	r2, [pc, #172]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008f10:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f1e:	d118      	bne.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f20:	f7fc fb3c 	bl	800559c <HAL_GetTick>
 8008f24:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f28:	e00d      	b.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f2a:	f7fc fb37 	bl	800559c <HAL_GetTick>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008f34:	1ad2      	subs	r2, r2, r3
 8008f36:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d903      	bls.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008f44:	e005      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f46:	4b1c      	ldr	r3, [pc, #112]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f4a:	f003 0302 	and.w	r3, r3, #2
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d0eb      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d129      	bne.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f6a:	d10e      	bne.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008f6c:	4b12      	ldr	r3, [pc, #72]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008f7c:	091a      	lsrs	r2, r3, #4
 8008f7e:	4b10      	ldr	r3, [pc, #64]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008f80:	4013      	ands	r3, r2
 8008f82:	4a0d      	ldr	r2, [pc, #52]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f84:	430b      	orrs	r3, r1
 8008f86:	6113      	str	r3, [r2, #16]
 8008f88:	e005      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f90:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008f94:	6113      	str	r3, [r2, #16]
 8008f96:	4b08      	ldr	r3, [pc, #32]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f98:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fa6:	4a04      	ldr	r2, [pc, #16]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fa8:	430b      	orrs	r3, r1
 8008faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8008fac:	e00e      	b.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008fb6:	e009      	b.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008fb8:	58024400 	.word	0x58024400
 8008fbc:	58024800 	.word	0x58024800
 8008fc0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd4:	f002 0301 	and.w	r3, r2, #1
 8008fd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008fe2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	f000 8089 	beq.w	8009100 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ff4:	2b28      	cmp	r3, #40	@ 0x28
 8008ff6:	d86b      	bhi.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8009000 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffe:	bf00      	nop
 8009000:	080090d9 	.word	0x080090d9
 8009004:	080090d1 	.word	0x080090d1
 8009008:	080090d1 	.word	0x080090d1
 800900c:	080090d1 	.word	0x080090d1
 8009010:	080090d1 	.word	0x080090d1
 8009014:	080090d1 	.word	0x080090d1
 8009018:	080090d1 	.word	0x080090d1
 800901c:	080090d1 	.word	0x080090d1
 8009020:	080090a5 	.word	0x080090a5
 8009024:	080090d1 	.word	0x080090d1
 8009028:	080090d1 	.word	0x080090d1
 800902c:	080090d1 	.word	0x080090d1
 8009030:	080090d1 	.word	0x080090d1
 8009034:	080090d1 	.word	0x080090d1
 8009038:	080090d1 	.word	0x080090d1
 800903c:	080090d1 	.word	0x080090d1
 8009040:	080090bb 	.word	0x080090bb
 8009044:	080090d1 	.word	0x080090d1
 8009048:	080090d1 	.word	0x080090d1
 800904c:	080090d1 	.word	0x080090d1
 8009050:	080090d1 	.word	0x080090d1
 8009054:	080090d1 	.word	0x080090d1
 8009058:	080090d1 	.word	0x080090d1
 800905c:	080090d1 	.word	0x080090d1
 8009060:	080090d9 	.word	0x080090d9
 8009064:	080090d1 	.word	0x080090d1
 8009068:	080090d1 	.word	0x080090d1
 800906c:	080090d1 	.word	0x080090d1
 8009070:	080090d1 	.word	0x080090d1
 8009074:	080090d1 	.word	0x080090d1
 8009078:	080090d1 	.word	0x080090d1
 800907c:	080090d1 	.word	0x080090d1
 8009080:	080090d9 	.word	0x080090d9
 8009084:	080090d1 	.word	0x080090d1
 8009088:	080090d1 	.word	0x080090d1
 800908c:	080090d1 	.word	0x080090d1
 8009090:	080090d1 	.word	0x080090d1
 8009094:	080090d1 	.word	0x080090d1
 8009098:	080090d1 	.word	0x080090d1
 800909c:	080090d1 	.word	0x080090d1
 80090a0:	080090d9 	.word	0x080090d9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80090a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090a8:	3308      	adds	r3, #8
 80090aa:	2101      	movs	r1, #1
 80090ac:	4618      	mov	r0, r3
 80090ae:	f001 fe95 	bl	800addc <RCCEx_PLL2_Config>
 80090b2:	4603      	mov	r3, r0
 80090b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80090b8:	e00f      	b.n	80090da <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090be:	3328      	adds	r3, #40	@ 0x28
 80090c0:	2101      	movs	r1, #1
 80090c2:	4618      	mov	r0, r3
 80090c4:	f001 ff3c 	bl	800af40 <RCCEx_PLL3_Config>
 80090c8:	4603      	mov	r3, r0
 80090ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80090ce:	e004      	b.n	80090da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090d6:	e000      	b.n	80090da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80090d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10a      	bne.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80090e2:	4bbf      	ldr	r3, [pc, #764]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090e6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80090ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090f0:	4abb      	ldr	r2, [pc, #748]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090f2:	430b      	orrs	r3, r1
 80090f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80090f6:	e003      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	f002 0302 	and.w	r3, r2, #2
 800910c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009110:	2300      	movs	r3, #0
 8009112:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009116:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800911a:	460b      	mov	r3, r1
 800911c:	4313      	orrs	r3, r2
 800911e:	d041      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009124:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009126:	2b05      	cmp	r3, #5
 8009128:	d824      	bhi.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800912a:	a201      	add	r2, pc, #4	@ (adr r2, 8009130 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800912c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009130:	0800917d 	.word	0x0800917d
 8009134:	08009149 	.word	0x08009149
 8009138:	0800915f 	.word	0x0800915f
 800913c:	0800917d 	.word	0x0800917d
 8009140:	0800917d 	.word	0x0800917d
 8009144:	0800917d 	.word	0x0800917d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800914c:	3308      	adds	r3, #8
 800914e:	2101      	movs	r1, #1
 8009150:	4618      	mov	r0, r3
 8009152:	f001 fe43 	bl	800addc <RCCEx_PLL2_Config>
 8009156:	4603      	mov	r3, r0
 8009158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800915c:	e00f      	b.n	800917e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800915e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009162:	3328      	adds	r3, #40	@ 0x28
 8009164:	2101      	movs	r1, #1
 8009166:	4618      	mov	r0, r3
 8009168:	f001 feea 	bl	800af40 <RCCEx_PLL3_Config>
 800916c:	4603      	mov	r3, r0
 800916e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009172:	e004      	b.n	800917e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800917a:	e000      	b.n	800917e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800917c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800917e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10a      	bne.n	800919c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009186:	4b96      	ldr	r3, [pc, #600]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800918a:	f023 0107 	bic.w	r1, r3, #7
 800918e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009192:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009194:	4a92      	ldr	r2, [pc, #584]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009196:	430b      	orrs	r3, r1
 8009198:	6553      	str	r3, [r2, #84]	@ 0x54
 800919a:	e003      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800919c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80091a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ac:	f002 0304 	and.w	r3, r2, #4
 80091b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80091b4:	2300      	movs	r3, #0
 80091b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80091ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80091be:	460b      	mov	r3, r1
 80091c0:	4313      	orrs	r3, r2
 80091c2:	d044      	beq.n	800924e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80091c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091cc:	2b05      	cmp	r3, #5
 80091ce:	d825      	bhi.n	800921c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80091d0:	a201      	add	r2, pc, #4	@ (adr r2, 80091d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80091d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d6:	bf00      	nop
 80091d8:	08009225 	.word	0x08009225
 80091dc:	080091f1 	.word	0x080091f1
 80091e0:	08009207 	.word	0x08009207
 80091e4:	08009225 	.word	0x08009225
 80091e8:	08009225 	.word	0x08009225
 80091ec:	08009225 	.word	0x08009225
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091f4:	3308      	adds	r3, #8
 80091f6:	2101      	movs	r1, #1
 80091f8:	4618      	mov	r0, r3
 80091fa:	f001 fdef 	bl	800addc <RCCEx_PLL2_Config>
 80091fe:	4603      	mov	r3, r0
 8009200:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009204:	e00f      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800920a:	3328      	adds	r3, #40	@ 0x28
 800920c:	2101      	movs	r1, #1
 800920e:	4618      	mov	r0, r3
 8009210:	f001 fe96 	bl	800af40 <RCCEx_PLL3_Config>
 8009214:	4603      	mov	r3, r0
 8009216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800921a:	e004      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009222:	e000      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009226:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10b      	bne.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800922e:	4b6c      	ldr	r3, [pc, #432]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009232:	f023 0107 	bic.w	r1, r3, #7
 8009236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800923a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800923e:	4a68      	ldr	r2, [pc, #416]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009240:	430b      	orrs	r3, r1
 8009242:	6593      	str	r3, [r2, #88]	@ 0x58
 8009244:	e003      	b.n	800924e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800924a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800924e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009256:	f002 0320 	and.w	r3, r2, #32
 800925a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800925e:	2300      	movs	r3, #0
 8009260:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009264:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009268:	460b      	mov	r3, r1
 800926a:	4313      	orrs	r3, r2
 800926c:	d055      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800926e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009276:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800927a:	d033      	beq.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800927c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009280:	d82c      	bhi.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009286:	d02f      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800928c:	d826      	bhi.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800928e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009292:	d02b      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009294:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009298:	d820      	bhi.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800929a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800929e:	d012      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80092a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092a4:	d81a      	bhi.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d022      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80092aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092ae:	d115      	bne.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b4:	3308      	adds	r3, #8
 80092b6:	2100      	movs	r1, #0
 80092b8:	4618      	mov	r0, r3
 80092ba:	f001 fd8f 	bl	800addc <RCCEx_PLL2_Config>
 80092be:	4603      	mov	r3, r0
 80092c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80092c4:	e015      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80092c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ca:	3328      	adds	r3, #40	@ 0x28
 80092cc:	2102      	movs	r1, #2
 80092ce:	4618      	mov	r0, r3
 80092d0:	f001 fe36 	bl	800af40 <RCCEx_PLL3_Config>
 80092d4:	4603      	mov	r3, r0
 80092d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80092da:	e00a      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092e2:	e006      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80092e4:	bf00      	nop
 80092e6:	e004      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80092e8:	bf00      	nop
 80092ea:	e002      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80092ec:	bf00      	nop
 80092ee:	e000      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80092f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10b      	bne.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80092fa:	4b39      	ldr	r3, [pc, #228]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80092fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800930a:	4a35      	ldr	r2, [pc, #212]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800930c:	430b      	orrs	r3, r1
 800930e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009310:	e003      	b.n	800931a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009316:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800931a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800931e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009322:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009326:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800932a:	2300      	movs	r3, #0
 800932c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009330:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009334:	460b      	mov	r3, r1
 8009336:	4313      	orrs	r3, r2
 8009338:	d058      	beq.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800933a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800933e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009342:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009346:	d033      	beq.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009348:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800934c:	d82c      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800934e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009352:	d02f      	beq.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009358:	d826      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800935a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800935e:	d02b      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009360:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009364:	d820      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009366:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800936a:	d012      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800936c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009370:	d81a      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009372:	2b00      	cmp	r3, #0
 8009374:	d022      	beq.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800937a:	d115      	bne.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800937c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009380:	3308      	adds	r3, #8
 8009382:	2100      	movs	r1, #0
 8009384:	4618      	mov	r0, r3
 8009386:	f001 fd29 	bl	800addc <RCCEx_PLL2_Config>
 800938a:	4603      	mov	r3, r0
 800938c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009390:	e015      	b.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009396:	3328      	adds	r3, #40	@ 0x28
 8009398:	2102      	movs	r1, #2
 800939a:	4618      	mov	r0, r3
 800939c:	f001 fdd0 	bl	800af40 <RCCEx_PLL3_Config>
 80093a0:	4603      	mov	r3, r0
 80093a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80093a6:	e00a      	b.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093ae:	e006      	b.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80093b0:	bf00      	nop
 80093b2:	e004      	b.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80093b4:	bf00      	nop
 80093b6:	e002      	b.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80093b8:	bf00      	nop
 80093ba:	e000      	b.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80093bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10e      	bne.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80093c6:	4b06      	ldr	r3, [pc, #24]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093ca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80093ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80093d6:	4a02      	ldr	r2, [pc, #8]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093d8:	430b      	orrs	r3, r1
 80093da:	6593      	str	r3, [r2, #88]	@ 0x58
 80093dc:	e006      	b.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80093de:	bf00      	nop
 80093e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80093ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80093f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80093fc:	2300      	movs	r3, #0
 80093fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009402:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009406:	460b      	mov	r3, r1
 8009408:	4313      	orrs	r3, r2
 800940a:	d055      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800940c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009410:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009414:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009418:	d033      	beq.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800941a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800941e:	d82c      	bhi.n	800947a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009420:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009424:	d02f      	beq.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009426:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800942a:	d826      	bhi.n	800947a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800942c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009430:	d02b      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009432:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009436:	d820      	bhi.n	800947a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009438:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800943c:	d012      	beq.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800943e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009442:	d81a      	bhi.n	800947a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009444:	2b00      	cmp	r3, #0
 8009446:	d022      	beq.n	800948e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009448:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800944c:	d115      	bne.n	800947a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800944e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009452:	3308      	adds	r3, #8
 8009454:	2100      	movs	r1, #0
 8009456:	4618      	mov	r0, r3
 8009458:	f001 fcc0 	bl	800addc <RCCEx_PLL2_Config>
 800945c:	4603      	mov	r3, r0
 800945e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009462:	e015      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009468:	3328      	adds	r3, #40	@ 0x28
 800946a:	2102      	movs	r1, #2
 800946c:	4618      	mov	r0, r3
 800946e:	f001 fd67 	bl	800af40 <RCCEx_PLL3_Config>
 8009472:	4603      	mov	r3, r0
 8009474:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009478:	e00a      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009480:	e006      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009482:	bf00      	nop
 8009484:	e004      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009486:	bf00      	nop
 8009488:	e002      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800948a:	bf00      	nop
 800948c:	e000      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800948e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009490:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10b      	bne.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009498:	4ba1      	ldr	r3, [pc, #644]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800949a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800949c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80094a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80094a8:	4a9d      	ldr	r2, [pc, #628]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094aa:	430b      	orrs	r3, r1
 80094ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80094ae:	e003      	b.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80094b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	f002 0308 	and.w	r3, r2, #8
 80094c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80094c8:	2300      	movs	r3, #0
 80094ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80094ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80094d2:	460b      	mov	r3, r1
 80094d4:	4313      	orrs	r3, r2
 80094d6:	d01e      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80094d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094e4:	d10c      	bne.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80094e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ea:	3328      	adds	r3, #40	@ 0x28
 80094ec:	2102      	movs	r1, #2
 80094ee:	4618      	mov	r0, r3
 80094f0:	f001 fd26 	bl	800af40 <RCCEx_PLL3_Config>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d002      	beq.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009500:	4b87      	ldr	r3, [pc, #540]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009504:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800950c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009510:	4a83      	ldr	r2, [pc, #524]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009512:	430b      	orrs	r3, r1
 8009514:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800951a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951e:	f002 0310 	and.w	r3, r2, #16
 8009522:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009526:	2300      	movs	r3, #0
 8009528:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800952c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009530:	460b      	mov	r3, r1
 8009532:	4313      	orrs	r3, r2
 8009534:	d01e      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800953a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800953e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009542:	d10c      	bne.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009548:	3328      	adds	r3, #40	@ 0x28
 800954a:	2102      	movs	r1, #2
 800954c:	4618      	mov	r0, r3
 800954e:	f001 fcf7 	bl	800af40 <RCCEx_PLL3_Config>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d002      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800955e:	4b70      	ldr	r3, [pc, #448]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009562:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800956a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800956e:	4a6c      	ldr	r2, [pc, #432]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009570:	430b      	orrs	r3, r1
 8009572:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009580:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009584:	2300      	movs	r3, #0
 8009586:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800958a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800958e:	460b      	mov	r3, r1
 8009590:	4313      	orrs	r3, r2
 8009592:	d03e      	beq.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009598:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800959c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095a0:	d022      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80095a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095a6:	d81b      	bhi.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d003      	beq.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80095ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095b0:	d00b      	beq.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80095b2:	e015      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095b8:	3308      	adds	r3, #8
 80095ba:	2100      	movs	r1, #0
 80095bc:	4618      	mov	r0, r3
 80095be:	f001 fc0d 	bl	800addc <RCCEx_PLL2_Config>
 80095c2:	4603      	mov	r3, r0
 80095c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80095c8:	e00f      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80095ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095ce:	3328      	adds	r3, #40	@ 0x28
 80095d0:	2102      	movs	r1, #2
 80095d2:	4618      	mov	r0, r3
 80095d4:	f001 fcb4 	bl	800af40 <RCCEx_PLL3_Config>
 80095d8:	4603      	mov	r3, r0
 80095da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80095de:	e004      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095e6:	e000      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80095e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d10b      	bne.n	800960a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80095f2:	4b4b      	ldr	r3, [pc, #300]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80095fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009602:	4a47      	ldr	r2, [pc, #284]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009604:	430b      	orrs	r3, r1
 8009606:	6593      	str	r3, [r2, #88]	@ 0x58
 8009608:	e003      	b.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800960a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800960e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800961e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009620:	2300      	movs	r3, #0
 8009622:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009624:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009628:	460b      	mov	r3, r1
 800962a:	4313      	orrs	r3, r2
 800962c:	d03b      	beq.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800962e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009636:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800963a:	d01f      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800963c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009640:	d818      	bhi.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009642:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009646:	d003      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009648:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800964c:	d007      	beq.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800964e:	e011      	b.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009650:	4b33      	ldr	r3, [pc, #204]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009654:	4a32      	ldr	r2, [pc, #200]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800965a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800965c:	e00f      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800965e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009662:	3328      	adds	r3, #40	@ 0x28
 8009664:	2101      	movs	r1, #1
 8009666:	4618      	mov	r0, r3
 8009668:	f001 fc6a 	bl	800af40 <RCCEx_PLL3_Config>
 800966c:	4603      	mov	r3, r0
 800966e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009672:	e004      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800967a:	e000      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800967c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800967e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10b      	bne.n	800969e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009686:	4b26      	ldr	r3, [pc, #152]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800968a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800968e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009696:	4a22      	ldr	r2, [pc, #136]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009698:	430b      	orrs	r3, r1
 800969a:	6553      	str	r3, [r2, #84]	@ 0x54
 800969c:	e003      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800969e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80096a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80096b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80096b4:	2300      	movs	r3, #0
 80096b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80096b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80096bc:	460b      	mov	r3, r1
 80096be:	4313      	orrs	r3, r2
 80096c0:	d034      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80096c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d003      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80096cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096d0:	d007      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80096d2:	e011      	b.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096d4:	4b12      	ldr	r3, [pc, #72]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d8:	4a11      	ldr	r2, [pc, #68]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80096e0:	e00e      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80096e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096e6:	3308      	adds	r3, #8
 80096e8:	2102      	movs	r1, #2
 80096ea:	4618      	mov	r0, r3
 80096ec:	f001 fb76 	bl	800addc <RCCEx_PLL2_Config>
 80096f0:	4603      	mov	r3, r0
 80096f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80096f6:	e003      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80096fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10d      	bne.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009708:	4b05      	ldr	r3, [pc, #20]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800970a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800970c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009716:	4a02      	ldr	r2, [pc, #8]	@ (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009718:	430b      	orrs	r3, r1
 800971a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800971c:	e006      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800971e:	bf00      	nop
 8009720:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009728:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800972c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009734:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009738:	66bb      	str	r3, [r7, #104]	@ 0x68
 800973a:	2300      	movs	r3, #0
 800973c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800973e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009742:	460b      	mov	r3, r1
 8009744:	4313      	orrs	r3, r2
 8009746:	d00c      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800974c:	3328      	adds	r3, #40	@ 0x28
 800974e:	2102      	movs	r1, #2
 8009750:	4618      	mov	r0, r3
 8009752:	f001 fbf5 	bl	800af40 <RCCEx_PLL3_Config>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d002      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800976e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009770:	2300      	movs	r3, #0
 8009772:	667b      	str	r3, [r7, #100]	@ 0x64
 8009774:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009778:	460b      	mov	r3, r1
 800977a:	4313      	orrs	r3, r2
 800977c:	d038      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800977e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009786:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800978a:	d018      	beq.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800978c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009790:	d811      	bhi.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009792:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009796:	d014      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009798:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800979c:	d80b      	bhi.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d011      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80097a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097a6:	d106      	bne.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097a8:	4bc3      	ldr	r3, [pc, #780]	@ (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ac:	4ac2      	ldr	r2, [pc, #776]	@ (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80097b4:	e008      	b.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097bc:	e004      	b.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80097be:	bf00      	nop
 80097c0:	e002      	b.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80097c2:	bf00      	nop
 80097c4:	e000      	b.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80097c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d10b      	bne.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80097d0:	4bb9      	ldr	r3, [pc, #740]	@ (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097d4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80097d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097e0:	4ab5      	ldr	r2, [pc, #724]	@ (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097e2:	430b      	orrs	r3, r1
 80097e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80097e6:	e003      	b.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80097f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80097fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80097fe:	2300      	movs	r3, #0
 8009800:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009802:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009806:	460b      	mov	r3, r1
 8009808:	4313      	orrs	r3, r2
 800980a:	d009      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800980c:	4baa      	ldr	r3, [pc, #680]	@ (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800980e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009810:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800981a:	4aa7      	ldr	r2, [pc, #668]	@ (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800981c:	430b      	orrs	r3, r1
 800981e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009828:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800982c:	653b      	str	r3, [r7, #80]	@ 0x50
 800982e:	2300      	movs	r3, #0
 8009830:	657b      	str	r3, [r7, #84]	@ 0x54
 8009832:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009836:	460b      	mov	r3, r1
 8009838:	4313      	orrs	r3, r2
 800983a:	d00a      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800983c:	4b9e      	ldr	r3, [pc, #632]	@ (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009848:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800984c:	4a9a      	ldr	r2, [pc, #616]	@ (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800984e:	430b      	orrs	r3, r1
 8009850:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800985e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009860:	2300      	movs	r3, #0
 8009862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009864:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009868:	460b      	mov	r3, r1
 800986a:	4313      	orrs	r3, r2
 800986c:	d009      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800986e:	4b92      	ldr	r3, [pc, #584]	@ (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009872:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800987a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800987c:	4a8e      	ldr	r2, [pc, #568]	@ (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800987e:	430b      	orrs	r3, r1
 8009880:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800988e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009890:	2300      	movs	r3, #0
 8009892:	647b      	str	r3, [r7, #68]	@ 0x44
 8009894:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009898:	460b      	mov	r3, r1
 800989a:	4313      	orrs	r3, r2
 800989c:	d00e      	beq.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800989e:	4b86      	ldr	r3, [pc, #536]	@ (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	4a85      	ldr	r2, [pc, #532]	@ (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098a4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80098a8:	6113      	str	r3, [r2, #16]
 80098aa:	4b83      	ldr	r3, [pc, #524]	@ (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098ac:	6919      	ldr	r1, [r3, #16]
 80098ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80098b6:	4a80      	ldr	r2, [pc, #512]	@ (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098b8:	430b      	orrs	r3, r1
 80098ba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80098bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80098c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098ca:	2300      	movs	r3, #0
 80098cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098ce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80098d2:	460b      	mov	r3, r1
 80098d4:	4313      	orrs	r3, r2
 80098d6:	d009      	beq.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80098d8:	4b77      	ldr	r3, [pc, #476]	@ (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098dc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80098e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098e6:	4a74      	ldr	r2, [pc, #464]	@ (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098e8:	430b      	orrs	r3, r1
 80098ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80098ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80098f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80098fa:	2300      	movs	r3, #0
 80098fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80098fe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009902:	460b      	mov	r3, r1
 8009904:	4313      	orrs	r3, r2
 8009906:	d00a      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009908:	4b6b      	ldr	r3, [pc, #428]	@ (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800990a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800990c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009918:	4a67      	ldr	r2, [pc, #412]	@ (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800991a:	430b      	orrs	r3, r1
 800991c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800991e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009926:	2100      	movs	r1, #0
 8009928:	62b9      	str	r1, [r7, #40]	@ 0x28
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009930:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009934:	460b      	mov	r3, r1
 8009936:	4313      	orrs	r3, r2
 8009938:	d011      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800993a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800993e:	3308      	adds	r3, #8
 8009940:	2100      	movs	r1, #0
 8009942:	4618      	mov	r0, r3
 8009944:	f001 fa4a 	bl	800addc <RCCEx_PLL2_Config>
 8009948:	4603      	mov	r3, r0
 800994a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800994e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009952:	2b00      	cmp	r3, #0
 8009954:	d003      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800995a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800995e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	2100      	movs	r1, #0
 8009968:	6239      	str	r1, [r7, #32]
 800996a:	f003 0302 	and.w	r3, r3, #2
 800996e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009970:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009974:	460b      	mov	r3, r1
 8009976:	4313      	orrs	r3, r2
 8009978:	d011      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800997a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800997e:	3308      	adds	r3, #8
 8009980:	2101      	movs	r1, #1
 8009982:	4618      	mov	r0, r3
 8009984:	f001 fa2a 	bl	800addc <RCCEx_PLL2_Config>
 8009988:	4603      	mov	r3, r0
 800998a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800998e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009992:	2b00      	cmp	r3, #0
 8009994:	d003      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009996:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800999a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800999e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a6:	2100      	movs	r1, #0
 80099a8:	61b9      	str	r1, [r7, #24]
 80099aa:	f003 0304 	and.w	r3, r3, #4
 80099ae:	61fb      	str	r3, [r7, #28]
 80099b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80099b4:	460b      	mov	r3, r1
 80099b6:	4313      	orrs	r3, r2
 80099b8:	d011      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80099ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099be:	3308      	adds	r3, #8
 80099c0:	2102      	movs	r1, #2
 80099c2:	4618      	mov	r0, r3
 80099c4:	f001 fa0a 	bl	800addc <RCCEx_PLL2_Config>
 80099c8:	4603      	mov	r3, r0
 80099ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80099ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80099de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e6:	2100      	movs	r1, #0
 80099e8:	6139      	str	r1, [r7, #16]
 80099ea:	f003 0308 	and.w	r3, r3, #8
 80099ee:	617b      	str	r3, [r7, #20]
 80099f0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80099f4:	460b      	mov	r3, r1
 80099f6:	4313      	orrs	r3, r2
 80099f8:	d011      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099fe:	3328      	adds	r3, #40	@ 0x28
 8009a00:	2100      	movs	r1, #0
 8009a02:	4618      	mov	r0, r3
 8009a04:	f001 fa9c 	bl	800af40 <RCCEx_PLL3_Config>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d003      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a26:	2100      	movs	r1, #0
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	f003 0310 	and.w	r3, r3, #16
 8009a2e:	60fb      	str	r3, [r7, #12]
 8009a30:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009a34:	460b      	mov	r3, r1
 8009a36:	4313      	orrs	r3, r2
 8009a38:	d011      	beq.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a3e:	3328      	adds	r3, #40	@ 0x28
 8009a40:	2101      	movs	r1, #1
 8009a42:	4618      	mov	r0, r3
 8009a44:	f001 fa7c 	bl	800af40 <RCCEx_PLL3_Config>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a66:	2100      	movs	r1, #0
 8009a68:	6039      	str	r1, [r7, #0]
 8009a6a:	f003 0320 	and.w	r3, r3, #32
 8009a6e:	607b      	str	r3, [r7, #4]
 8009a70:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009a74:	460b      	mov	r3, r1
 8009a76:	4313      	orrs	r3, r2
 8009a78:	d011      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a7e:	3328      	adds	r3, #40	@ 0x28
 8009a80:	2102      	movs	r1, #2
 8009a82:	4618      	mov	r0, r3
 8009a84:	f001 fa5c 	bl	800af40 <RCCEx_PLL3_Config>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009a9e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d101      	bne.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	e000      	b.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ab8:	58024400 	.word	0x58024400

08009abc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b090      	sub	sp, #64	@ 0x40
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009ac6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aca:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009ace:	430b      	orrs	r3, r1
 8009ad0:	f040 8094 	bne.w	8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009ad4:	4b9e      	ldr	r3, [pc, #632]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ad8:	f003 0307 	and.w	r3, r3, #7
 8009adc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae0:	2b04      	cmp	r3, #4
 8009ae2:	f200 8087 	bhi.w	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aec:	08009b01 	.word	0x08009b01
 8009af0:	08009b29 	.word	0x08009b29
 8009af4:	08009b51 	.word	0x08009b51
 8009af8:	08009bed 	.word	0x08009bed
 8009afc:	08009b79 	.word	0x08009b79
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b00:	4b93      	ldr	r3, [pc, #588]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b0c:	d108      	bne.n	8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b12:	4618      	mov	r0, r3
 8009b14:	f001 f810 	bl	800ab38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b1c:	f000 bd45 	b.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b20:	2300      	movs	r3, #0
 8009b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b24:	f000 bd41 	b.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b28:	4b89      	ldr	r3, [pc, #548]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b34:	d108      	bne.n	8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b36:	f107 0318 	add.w	r3, r7, #24
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f000 fd54 	bl	800a5e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b44:	f000 bd31 	b.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b4c:	f000 bd2d 	b.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b50:	4b7f      	ldr	r3, [pc, #508]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b5c:	d108      	bne.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b5e:	f107 030c 	add.w	r3, r7, #12
 8009b62:	4618      	mov	r0, r3
 8009b64:	f000 fe94 	bl	800a890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b6c:	f000 bd1d 	b.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b70:	2300      	movs	r3, #0
 8009b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b74:	f000 bd19 	b.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b78:	4b75      	ldr	r3, [pc, #468]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009b80:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b82:	4b73      	ldr	r3, [pc, #460]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 0304 	and.w	r3, r3, #4
 8009b8a:	2b04      	cmp	r3, #4
 8009b8c:	d10c      	bne.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d109      	bne.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b94:	4b6e      	ldr	r3, [pc, #440]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	08db      	lsrs	r3, r3, #3
 8009b9a:	f003 0303 	and.w	r3, r3, #3
 8009b9e:	4a6d      	ldr	r2, [pc, #436]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ba6:	e01f      	b.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ba8:	4b69      	ldr	r3, [pc, #420]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bb4:	d106      	bne.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bbc:	d102      	bne.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009bbe:	4b66      	ldr	r3, [pc, #408]	@ (8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bc2:	e011      	b.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bc4:	4b62      	ldr	r3, [pc, #392]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bd0:	d106      	bne.n	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bd8:	d102      	bne.n	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009bda:	4b60      	ldr	r3, [pc, #384]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bde:	e003      	b.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009be0:	2300      	movs	r3, #0
 8009be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009be4:	f000 bce1 	b.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009be8:	f000 bcdf 	b.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009bec:	4b5c      	ldr	r3, [pc, #368]	@ (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bf0:	f000 bcdb 	b.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bf8:	f000 bcd7 	b.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c00:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009c04:	430b      	orrs	r3, r1
 8009c06:	f040 80ad 	bne.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009c0a:	4b51      	ldr	r3, [pc, #324]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c0e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009c12:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c1a:	d056      	beq.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c22:	f200 8090 	bhi.w	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c28:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c2a:	f000 8088 	beq.w	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c30:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c32:	f200 8088 	bhi.w	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c38:	2b80      	cmp	r3, #128	@ 0x80
 8009c3a:	d032      	beq.n	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3e:	2b80      	cmp	r3, #128	@ 0x80
 8009c40:	f200 8081 	bhi.w	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d003      	beq.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4c:	2b40      	cmp	r3, #64	@ 0x40
 8009c4e:	d014      	beq.n	8009c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009c50:	e079      	b.n	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c52:	4b3f      	ldr	r3, [pc, #252]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c5e:	d108      	bne.n	8009c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 ff67 	bl	800ab38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c6e:	f000 bc9c 	b.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c76:	f000 bc98 	b.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c7a:	4b35      	ldr	r3, [pc, #212]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c86:	d108      	bne.n	8009c9a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c88:	f107 0318 	add.w	r3, r7, #24
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f000 fcab 	bl	800a5e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c96:	f000 bc88 	b.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c9e:	f000 bc84 	b.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009caa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cae:	d108      	bne.n	8009cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cb0:	f107 030c 	add.w	r3, r7, #12
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f000 fdeb 	bl	800a890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cbe:	f000 bc74 	b.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cc6:	f000 bc70 	b.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009cca:	4b21      	ldr	r3, [pc, #132]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009cd2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f003 0304 	and.w	r3, r3, #4
 8009cdc:	2b04      	cmp	r3, #4
 8009cde:	d10c      	bne.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d109      	bne.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	08db      	lsrs	r3, r3, #3
 8009cec:	f003 0303 	and.w	r3, r3, #3
 8009cf0:	4a18      	ldr	r2, [pc, #96]	@ (8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8009cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cf8:	e01f      	b.n	8009d3a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cfa:	4b15      	ldr	r3, [pc, #84]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d06:	d106      	bne.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d0e:	d102      	bne.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009d10:	4b11      	ldr	r3, [pc, #68]	@ (8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d14:	e011      	b.n	8009d3a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d16:	4b0e      	ldr	r3, [pc, #56]	@ (8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d22:	d106      	bne.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d2a:	d102      	bne.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d30:	e003      	b.n	8009d3a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009d36:	f000 bc38 	b.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d3a:	f000 bc36 	b.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009d3e:	4b08      	ldr	r3, [pc, #32]	@ (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d42:	f000 bc32 	b.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009d46:	2300      	movs	r3, #0
 8009d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d4a:	f000 bc2e 	b.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d4e:	bf00      	nop
 8009d50:	58024400 	.word	0x58024400
 8009d54:	03d09000 	.word	0x03d09000
 8009d58:	003d0900 	.word	0x003d0900
 8009d5c:	017d7840 	.word	0x017d7840
 8009d60:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d68:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009d6c:	430b      	orrs	r3, r1
 8009d6e:	f040 809c 	bne.w	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009d72:	4b9e      	ldr	r3, [pc, #632]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d76:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009d7a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009d82:	d054      	beq.n	8009e2e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009d8a:	f200 808b 	bhi.w	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d90:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009d94:	f000 8083 	beq.w	8009e9e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009d9e:	f200 8081 	bhi.w	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009da8:	d02f      	beq.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009db0:	d878      	bhi.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d004      	beq.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009dbe:	d012      	beq.n	8009de6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009dc0:	e070      	b.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009dc2:	4b8a      	ldr	r3, [pc, #552]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009dca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009dce:	d107      	bne.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009dd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f000 feaf 	bl	800ab38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dde:	e3e4      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009de0:	2300      	movs	r3, #0
 8009de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009de4:	e3e1      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009de6:	4b81      	ldr	r3, [pc, #516]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009dee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009df2:	d107      	bne.n	8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009df4:	f107 0318 	add.w	r3, r7, #24
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f000 fbf5 	bl	800a5e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e02:	e3d2      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e04:	2300      	movs	r3, #0
 8009e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e08:	e3cf      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e0a:	4b78      	ldr	r3, [pc, #480]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e16:	d107      	bne.n	8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e18:	f107 030c 	add.w	r3, r7, #12
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 fd37 	bl	800a890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e26:	e3c0      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e2c:	e3bd      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e2e:	4b6f      	ldr	r3, [pc, #444]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009e36:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e38:	4b6c      	ldr	r3, [pc, #432]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f003 0304 	and.w	r3, r3, #4
 8009e40:	2b04      	cmp	r3, #4
 8009e42:	d10c      	bne.n	8009e5e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d109      	bne.n	8009e5e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e4a:	4b68      	ldr	r3, [pc, #416]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	08db      	lsrs	r3, r3, #3
 8009e50:	f003 0303 	and.w	r3, r3, #3
 8009e54:	4a66      	ldr	r2, [pc, #408]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009e56:	fa22 f303 	lsr.w	r3, r2, r3
 8009e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e5c:	e01e      	b.n	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e5e:	4b63      	ldr	r3, [pc, #396]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e6a:	d106      	bne.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e72:	d102      	bne.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e74:	4b5f      	ldr	r3, [pc, #380]	@ (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e78:	e010      	b.n	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e7a:	4b5c      	ldr	r3, [pc, #368]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e86:	d106      	bne.n	8009e96 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e8e:	d102      	bne.n	8009e96 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e90:	4b59      	ldr	r3, [pc, #356]	@ (8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e94:	e002      	b.n	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e96:	2300      	movs	r3, #0
 8009e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009e9a:	e386      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e9c:	e385      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e9e:	4b57      	ldr	r3, [pc, #348]	@ (8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ea2:	e382      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ea8:	e37f      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eae:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009eb2:	430b      	orrs	r3, r1
 8009eb4:	f040 80a7 	bne.w	800a006 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009eb8:	4b4c      	ldr	r3, [pc, #304]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ebc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009ec0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ec8:	d055      	beq.n	8009f76 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ecc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ed0:	f200 8096 	bhi.w	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009eda:	f000 8084 	beq.w	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009ee4:	f200 808c 	bhi.w	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009eee:	d030      	beq.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ef6:	f200 8083 	bhi.w	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d004      	beq.n	8009f0a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f06:	d012      	beq.n	8009f2e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009f08:	e07a      	b.n	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f0a:	4b38      	ldr	r3, [pc, #224]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f16:	d107      	bne.n	8009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f000 fe0b 	bl	800ab38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f26:	e340      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f2c:	e33d      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f2e:	4b2f      	ldr	r3, [pc, #188]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f3a:	d107      	bne.n	8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f3c:	f107 0318 	add.w	r3, r7, #24
 8009f40:	4618      	mov	r0, r3
 8009f42:	f000 fb51 	bl	800a5e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f4a:	e32e      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f50:	e32b      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f52:	4b26      	ldr	r3, [pc, #152]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f5e:	d107      	bne.n	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f60:	f107 030c 	add.w	r3, r7, #12
 8009f64:	4618      	mov	r0, r3
 8009f66:	f000 fc93 	bl	800a890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f6e:	e31c      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f70:	2300      	movs	r3, #0
 8009f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f74:	e319      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f76:	4b1d      	ldr	r3, [pc, #116]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009f7e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f80:	4b1a      	ldr	r3, [pc, #104]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f003 0304 	and.w	r3, r3, #4
 8009f88:	2b04      	cmp	r3, #4
 8009f8a:	d10c      	bne.n	8009fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d109      	bne.n	8009fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f92:	4b16      	ldr	r3, [pc, #88]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	08db      	lsrs	r3, r3, #3
 8009f98:	f003 0303 	and.w	r3, r3, #3
 8009f9c:	4a14      	ldr	r2, [pc, #80]	@ (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fa4:	e01e      	b.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fa6:	4b11      	ldr	r3, [pc, #68]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fb2:	d106      	bne.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fba:	d102      	bne.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fc0:	e010      	b.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fce:	d106      	bne.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fd6:	d102      	bne.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009fd8:	4b07      	ldr	r3, [pc, #28]	@ (8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fdc:	e002      	b.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009fe2:	e2e2      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fe4:	e2e1      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009fe6:	4b05      	ldr	r3, [pc, #20]	@ (8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fea:	e2de      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fec:	58024400 	.word	0x58024400
 8009ff0:	03d09000 	.word	0x03d09000
 8009ff4:	003d0900 	.word	0x003d0900
 8009ff8:	017d7840 	.word	0x017d7840
 8009ffc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a000:	2300      	movs	r3, #0
 800a002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a004:	e2d1      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a006:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a00a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a00e:	430b      	orrs	r3, r1
 800a010:	f040 809c 	bne.w	800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a014:	4b93      	ldr	r3, [pc, #588]	@ (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a018:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a01c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a020:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a024:	d054      	beq.n	800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a028:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a02c:	f200 808b 	bhi.w	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a032:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a036:	f000 8083 	beq.w	800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a040:	f200 8081 	bhi.w	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a04a:	d02f      	beq.n	800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a052:	d878      	bhi.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a056:	2b00      	cmp	r3, #0
 800a058:	d004      	beq.n	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a05c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a060:	d012      	beq.n	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a062:	e070      	b.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a064:	4b7f      	ldr	r3, [pc, #508]	@ (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a06c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a070:	d107      	bne.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a076:	4618      	mov	r0, r3
 800a078:	f000 fd5e 	bl	800ab38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a080:	e293      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a082:	2300      	movs	r3, #0
 800a084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a086:	e290      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a088:	4b76      	ldr	r3, [pc, #472]	@ (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a090:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a094:	d107      	bne.n	800a0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a096:	f107 0318 	add.w	r3, r7, #24
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 faa4 	bl	800a5e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0a4:	e281      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0aa:	e27e      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0ac:	4b6d      	ldr	r3, [pc, #436]	@ (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0b8:	d107      	bne.n	800a0ca <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0ba:	f107 030c 	add.w	r3, r7, #12
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f000 fbe6 	bl	800a890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0c8:	e26f      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0ce:	e26c      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0d0:	4b64      	ldr	r3, [pc, #400]	@ (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a0d8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0da:	4b62      	ldr	r3, [pc, #392]	@ (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 0304 	and.w	r3, r3, #4
 800a0e2:	2b04      	cmp	r3, #4
 800a0e4:	d10c      	bne.n	800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a0e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d109      	bne.n	800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0ec:	4b5d      	ldr	r3, [pc, #372]	@ (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	08db      	lsrs	r3, r3, #3
 800a0f2:	f003 0303 	and.w	r3, r3, #3
 800a0f6:	4a5c      	ldr	r2, [pc, #368]	@ (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a0f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0fe:	e01e      	b.n	800a13e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a100:	4b58      	ldr	r3, [pc, #352]	@ (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a10c:	d106      	bne.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a10e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a110:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a114:	d102      	bne.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a116:	4b55      	ldr	r3, [pc, #340]	@ (800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a118:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a11a:	e010      	b.n	800a13e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a11c:	4b51      	ldr	r3, [pc, #324]	@ (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a124:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a128:	d106      	bne.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a12a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a12c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a130:	d102      	bne.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a132:	4b4f      	ldr	r3, [pc, #316]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a134:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a136:	e002      	b.n	800a13e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a138:	2300      	movs	r3, #0
 800a13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a13c:	e235      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a13e:	e234      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a140:	4b4c      	ldr	r3, [pc, #304]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a144:	e231      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a146:	2300      	movs	r3, #0
 800a148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a14a:	e22e      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a14c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a150:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a154:	430b      	orrs	r3, r1
 800a156:	f040 808f 	bne.w	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a15a:	4b42      	ldr	r3, [pc, #264]	@ (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a15c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a15e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a162:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a166:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a16a:	d06b      	beq.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a16e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a172:	d874      	bhi.n	800a25e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a176:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a17a:	d056      	beq.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a182:	d86c      	bhi.n	800a25e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a186:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a18a:	d03b      	beq.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a18e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a192:	d864      	bhi.n	800a25e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a196:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a19a:	d021      	beq.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a19e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1a2:	d85c      	bhi.n	800a25e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d004      	beq.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a1aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1b0:	d004      	beq.n	800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a1b2:	e054      	b.n	800a25e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a1b4:	f7fe fa4c 	bl	8008650 <HAL_RCC_GetPCLK1Freq>
 800a1b8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a1ba:	e1f6      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1bc:	4b29      	ldr	r3, [pc, #164]	@ (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1c8:	d107      	bne.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1ca:	f107 0318 	add.w	r3, r7, #24
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 fa0a 	bl	800a5e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1d8:	e1e7      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1de:	e1e4      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1e0:	4b20      	ldr	r3, [pc, #128]	@ (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1ec:	d107      	bne.n	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1ee:	f107 030c 	add.w	r3, r7, #12
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 fb4c 	bl	800a890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1fc:	e1d5      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1fe:	2300      	movs	r3, #0
 800a200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a202:	e1d2      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a204:	4b17      	ldr	r3, [pc, #92]	@ (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 0304 	and.w	r3, r3, #4
 800a20c:	2b04      	cmp	r3, #4
 800a20e:	d109      	bne.n	800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a210:	4b14      	ldr	r3, [pc, #80]	@ (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	08db      	lsrs	r3, r3, #3
 800a216:	f003 0303 	and.w	r3, r3, #3
 800a21a:	4a13      	ldr	r2, [pc, #76]	@ (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a21c:	fa22 f303 	lsr.w	r3, r2, r3
 800a220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a222:	e1c2      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a224:	2300      	movs	r3, #0
 800a226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a228:	e1bf      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a22a:	4b0e      	ldr	r3, [pc, #56]	@ (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a236:	d102      	bne.n	800a23e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a238:	4b0c      	ldr	r3, [pc, #48]	@ (800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a23c:	e1b5      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a23e:	2300      	movs	r3, #0
 800a240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a242:	e1b2      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a244:	4b07      	ldr	r3, [pc, #28]	@ (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a24c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a250:	d102      	bne.n	800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a252:	4b07      	ldr	r3, [pc, #28]	@ (800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a256:	e1a8      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a258:	2300      	movs	r3, #0
 800a25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a25c:	e1a5      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a25e:	2300      	movs	r3, #0
 800a260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a262:	e1a2      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a264:	58024400 	.word	0x58024400
 800a268:	03d09000 	.word	0x03d09000
 800a26c:	003d0900 	.word	0x003d0900
 800a270:	017d7840 	.word	0x017d7840
 800a274:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a27c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a280:	430b      	orrs	r3, r1
 800a282:	d173      	bne.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a284:	4b9c      	ldr	r3, [pc, #624]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a288:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a28c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a290:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a294:	d02f      	beq.n	800a2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a298:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a29c:	d863      	bhi.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d004      	beq.n	800a2ae <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a2a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2aa:	d012      	beq.n	800a2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a2ac:	e05b      	b.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2ae:	4b92      	ldr	r3, [pc, #584]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2ba:	d107      	bne.n	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2bc:	f107 0318 	add.w	r3, r7, #24
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f000 f991 	bl	800a5e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2ca:	e16e      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2d0:	e16b      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2d2:	4b89      	ldr	r3, [pc, #548]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2de:	d107      	bne.n	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2e0:	f107 030c 	add.w	r3, r7, #12
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 fad3 	bl	800a890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2ee:	e15c      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2f4:	e159      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2f6:	4b80      	ldr	r3, [pc, #512]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a2f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a2fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a300:	4b7d      	ldr	r3, [pc, #500]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 0304 	and.w	r3, r3, #4
 800a308:	2b04      	cmp	r3, #4
 800a30a:	d10c      	bne.n	800a326 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a30c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d109      	bne.n	800a326 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a312:	4b79      	ldr	r3, [pc, #484]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	08db      	lsrs	r3, r3, #3
 800a318:	f003 0303 	and.w	r3, r3, #3
 800a31c:	4a77      	ldr	r2, [pc, #476]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a31e:	fa22 f303 	lsr.w	r3, r2, r3
 800a322:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a324:	e01e      	b.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a326:	4b74      	ldr	r3, [pc, #464]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a32e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a332:	d106      	bne.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a336:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a33a:	d102      	bne.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a33c:	4b70      	ldr	r3, [pc, #448]	@ (800a500 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a340:	e010      	b.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a342:	4b6d      	ldr	r3, [pc, #436]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a34a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a34e:	d106      	bne.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a352:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a356:	d102      	bne.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a358:	4b6a      	ldr	r3, [pc, #424]	@ (800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a35c:	e002      	b.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a35e:	2300      	movs	r3, #0
 800a360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a362:	e122      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a364:	e121      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a366:	2300      	movs	r3, #0
 800a368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a36a:	e11e      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a36c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a370:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a374:	430b      	orrs	r3, r1
 800a376:	d133      	bne.n	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a378:	4b5f      	ldr	r3, [pc, #380]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a37a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a37c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a380:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a384:	2b00      	cmp	r3, #0
 800a386:	d004      	beq.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a38a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a38e:	d012      	beq.n	800a3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a390:	e023      	b.n	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a392:	4b59      	ldr	r3, [pc, #356]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a39a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a39e:	d107      	bne.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f000 fbc7 	bl	800ab38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3ae:	e0fc      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3b4:	e0f9      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3b6:	4b50      	ldr	r3, [pc, #320]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3c2:	d107      	bne.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3c4:	f107 0318 	add.w	r3, r7, #24
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f000 f90d 	bl	800a5e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a3ce:	6a3b      	ldr	r3, [r7, #32]
 800a3d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3d2:	e0ea      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3d8:	e0e7      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3de:	e0e4      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a3e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3e4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a3e8:	430b      	orrs	r3, r1
 800a3ea:	f040 808d 	bne.w	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a3ee:	4b42      	ldr	r3, [pc, #264]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3f2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a3f6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a3fe:	d06b      	beq.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a402:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a406:	d874      	bhi.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a40e:	d056      	beq.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a416:	d86c      	bhi.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a41a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a41e:	d03b      	beq.n	800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a422:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a426:	d864      	bhi.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a42a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a42e:	d021      	beq.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a432:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a436:	d85c      	bhi.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d004      	beq.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a440:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a444:	d004      	beq.n	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a446:	e054      	b.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a448:	f000 f8b8 	bl	800a5bc <HAL_RCCEx_GetD3PCLK1Freq>
 800a44c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a44e:	e0ac      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a450:	4b29      	ldr	r3, [pc, #164]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a458:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a45c:	d107      	bne.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a45e:	f107 0318 	add.w	r3, r7, #24
 800a462:	4618      	mov	r0, r3
 800a464:	f000 f8c0 	bl	800a5e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a46c:	e09d      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a472:	e09a      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a474:	4b20      	ldr	r3, [pc, #128]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a47c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a480:	d107      	bne.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a482:	f107 030c 	add.w	r3, r7, #12
 800a486:	4618      	mov	r0, r3
 800a488:	f000 fa02 	bl	800a890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a490:	e08b      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a492:	2300      	movs	r3, #0
 800a494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a496:	e088      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a498:	4b17      	ldr	r3, [pc, #92]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 0304 	and.w	r3, r3, #4
 800a4a0:	2b04      	cmp	r3, #4
 800a4a2:	d109      	bne.n	800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4a4:	4b14      	ldr	r3, [pc, #80]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	08db      	lsrs	r3, r3, #3
 800a4aa:	f003 0303 	and.w	r3, r3, #3
 800a4ae:	4a13      	ldr	r2, [pc, #76]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a4b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4b6:	e078      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4bc:	e075      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a4be:	4b0e      	ldr	r3, [pc, #56]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4ca:	d102      	bne.n	800a4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a4cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a500 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4d0:	e06b      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d6:	e068      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a4d8:	4b07      	ldr	r3, [pc, #28]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4e4:	d102      	bne.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a4e6:	4b07      	ldr	r3, [pc, #28]	@ (800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a4e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4ea:	e05e      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f0:	e05b      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f6:	e058      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4f8:	58024400 	.word	0x58024400
 800a4fc:	03d09000 	.word	0x03d09000
 800a500:	003d0900 	.word	0x003d0900
 800a504:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a50c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a510:	430b      	orrs	r3, r1
 800a512:	d148      	bne.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a514:	4b27      	ldr	r3, [pc, #156]	@ (800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a518:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a51c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a520:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a524:	d02a      	beq.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a528:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a52c:	d838      	bhi.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a530:	2b00      	cmp	r3, #0
 800a532:	d004      	beq.n	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a536:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a53a:	d00d      	beq.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a53c:	e030      	b.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a53e:	4b1d      	ldr	r3, [pc, #116]	@ (800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a546:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a54a:	d102      	bne.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a54c:	4b1a      	ldr	r3, [pc, #104]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a54e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a550:	e02b      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a552:	2300      	movs	r3, #0
 800a554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a556:	e028      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a558:	4b16      	ldr	r3, [pc, #88]	@ (800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a560:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a564:	d107      	bne.n	800a576 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a566:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a56a:	4618      	mov	r0, r3
 800a56c:	f000 fae4 	bl	800ab38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a574:	e019      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a576:	2300      	movs	r3, #0
 800a578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a57a:	e016      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a57c:	4b0d      	ldr	r3, [pc, #52]	@ (800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a584:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a588:	d107      	bne.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a58a:	f107 0318 	add.w	r3, r7, #24
 800a58e:	4618      	mov	r0, r3
 800a590:	f000 f82a 	bl	800a5e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a598:	e007      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a59a:	2300      	movs	r3, #0
 800a59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a59e:	e004      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5a4:	e001      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a5aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3740      	adds	r7, #64	@ 0x40
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	58024400 	.word	0x58024400
 800a5b8:	017d7840 	.word	0x017d7840

0800a5bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a5c0:	f7fe f816 	bl	80085f0 <HAL_RCC_GetHCLKFreq>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	4b06      	ldr	r3, [pc, #24]	@ (800a5e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a5c8:	6a1b      	ldr	r3, [r3, #32]
 800a5ca:	091b      	lsrs	r3, r3, #4
 800a5cc:	f003 0307 	and.w	r3, r3, #7
 800a5d0:	4904      	ldr	r1, [pc, #16]	@ (800a5e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a5d2:	5ccb      	ldrb	r3, [r1, r3]
 800a5d4:	f003 031f 	and.w	r3, r3, #31
 800a5d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	58024400 	.word	0x58024400
 800a5e4:	080133b0 	.word	0x080133b0

0800a5e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b089      	sub	sp, #36	@ 0x24
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5f0:	4ba1      	ldr	r3, [pc, #644]	@ (800a878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5f4:	f003 0303 	and.w	r3, r3, #3
 800a5f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a5fa:	4b9f      	ldr	r3, [pc, #636]	@ (800a878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5fe:	0b1b      	lsrs	r3, r3, #12
 800a600:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a604:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a606:	4b9c      	ldr	r3, [pc, #624]	@ (800a878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a60a:	091b      	lsrs	r3, r3, #4
 800a60c:	f003 0301 	and.w	r3, r3, #1
 800a610:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a612:	4b99      	ldr	r3, [pc, #612]	@ (800a878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a616:	08db      	lsrs	r3, r3, #3
 800a618:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a61c:	693a      	ldr	r2, [r7, #16]
 800a61e:	fb02 f303 	mul.w	r3, r2, r3
 800a622:	ee07 3a90 	vmov	s15, r3
 800a626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a62a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	2b00      	cmp	r3, #0
 800a632:	f000 8111 	beq.w	800a858 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	2b02      	cmp	r3, #2
 800a63a:	f000 8083 	beq.w	800a744 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	2b02      	cmp	r3, #2
 800a642:	f200 80a1 	bhi.w	800a788 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d003      	beq.n	800a654 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d056      	beq.n	800a700 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a652:	e099      	b.n	800a788 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a654:	4b88      	ldr	r3, [pc, #544]	@ (800a878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 0320 	and.w	r3, r3, #32
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d02d      	beq.n	800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a660:	4b85      	ldr	r3, [pc, #532]	@ (800a878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	08db      	lsrs	r3, r3, #3
 800a666:	f003 0303 	and.w	r3, r3, #3
 800a66a:	4a84      	ldr	r2, [pc, #528]	@ (800a87c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a66c:	fa22 f303 	lsr.w	r3, r2, r3
 800a670:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	ee07 3a90 	vmov	s15, r3
 800a678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	ee07 3a90 	vmov	s15, r3
 800a682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a68a:	4b7b      	ldr	r3, [pc, #492]	@ (800a878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a68c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a68e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a692:	ee07 3a90 	vmov	s15, r3
 800a696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a69a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a69e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a6a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a6ba:	e087      	b.n	800a7cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	ee07 3a90 	vmov	s15, r3
 800a6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a884 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a6ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ce:	4b6a      	ldr	r3, [pc, #424]	@ (800a878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6d6:	ee07 3a90 	vmov	s15, r3
 800a6da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6de:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a6e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6fe:	e065      	b.n	800a7cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	ee07 3a90 	vmov	s15, r3
 800a706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a70a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a888 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a70e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a712:	4b59      	ldr	r3, [pc, #356]	@ (800a878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a71a:	ee07 3a90 	vmov	s15, r3
 800a71e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a722:	ed97 6a03 	vldr	s12, [r7, #12]
 800a726:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a72a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a72e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a73a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a73e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a742:	e043      	b.n	800a7cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	ee07 3a90 	vmov	s15, r3
 800a74a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a74e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a88c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a756:	4b48      	ldr	r3, [pc, #288]	@ (800a878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a75a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a75e:	ee07 3a90 	vmov	s15, r3
 800a762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a766:	ed97 6a03 	vldr	s12, [r7, #12]
 800a76a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a76e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a776:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a77a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a77e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a786:	e021      	b.n	800a7cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	ee07 3a90 	vmov	s15, r3
 800a78e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a792:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a888 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a79a:	4b37      	ldr	r3, [pc, #220]	@ (800a878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a79c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a79e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7a2:	ee07 3a90 	vmov	s15, r3
 800a7a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a7cc:	4b2a      	ldr	r3, [pc, #168]	@ (800a878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7d0:	0a5b      	lsrs	r3, r3, #9
 800a7d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7d6:	ee07 3a90 	vmov	s15, r3
 800a7da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7f2:	ee17 2a90 	vmov	r2, s15
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a7fa:	4b1f      	ldr	r3, [pc, #124]	@ (800a878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7fe:	0c1b      	lsrs	r3, r3, #16
 800a800:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a804:	ee07 3a90 	vmov	s15, r3
 800a808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a80c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a810:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a814:	edd7 6a07 	vldr	s13, [r7, #28]
 800a818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a81c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a820:	ee17 2a90 	vmov	r2, s15
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a828:	4b13      	ldr	r3, [pc, #76]	@ (800a878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a82a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a82c:	0e1b      	lsrs	r3, r3, #24
 800a82e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a832:	ee07 3a90 	vmov	s15, r3
 800a836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a83a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a83e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a842:	edd7 6a07 	vldr	s13, [r7, #28]
 800a846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a84a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a84e:	ee17 2a90 	vmov	r2, s15
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a856:	e008      	b.n	800a86a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	609a      	str	r2, [r3, #8]
}
 800a86a:	bf00      	nop
 800a86c:	3724      	adds	r7, #36	@ 0x24
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	58024400 	.word	0x58024400
 800a87c:	03d09000 	.word	0x03d09000
 800a880:	46000000 	.word	0x46000000
 800a884:	4c742400 	.word	0x4c742400
 800a888:	4a742400 	.word	0x4a742400
 800a88c:	4bbebc20 	.word	0x4bbebc20

0800a890 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a890:	b480      	push	{r7}
 800a892:	b089      	sub	sp, #36	@ 0x24
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a898:	4ba1      	ldr	r3, [pc, #644]	@ (800ab20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a89a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a89c:	f003 0303 	and.w	r3, r3, #3
 800a8a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a8a2:	4b9f      	ldr	r3, [pc, #636]	@ (800ab20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8a6:	0d1b      	lsrs	r3, r3, #20
 800a8a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a8ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a8ae:	4b9c      	ldr	r3, [pc, #624]	@ (800ab20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8b2:	0a1b      	lsrs	r3, r3, #8
 800a8b4:	f003 0301 	and.w	r3, r3, #1
 800a8b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a8ba:	4b99      	ldr	r3, [pc, #612]	@ (800ab20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8be:	08db      	lsrs	r3, r3, #3
 800a8c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8c4:	693a      	ldr	r2, [r7, #16]
 800a8c6:	fb02 f303 	mul.w	r3, r2, r3
 800a8ca:	ee07 3a90 	vmov	s15, r3
 800a8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f000 8111 	beq.w	800ab00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a8de:	69bb      	ldr	r3, [r7, #24]
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	f000 8083 	beq.w	800a9ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	f200 80a1 	bhi.w	800aa30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d003      	beq.n	800a8fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d056      	beq.n	800a9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a8fa:	e099      	b.n	800aa30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8fc:	4b88      	ldr	r3, [pc, #544]	@ (800ab20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 0320 	and.w	r3, r3, #32
 800a904:	2b00      	cmp	r3, #0
 800a906:	d02d      	beq.n	800a964 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a908:	4b85      	ldr	r3, [pc, #532]	@ (800ab20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	08db      	lsrs	r3, r3, #3
 800a90e:	f003 0303 	and.w	r3, r3, #3
 800a912:	4a84      	ldr	r2, [pc, #528]	@ (800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a914:	fa22 f303 	lsr.w	r3, r2, r3
 800a918:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	ee07 3a90 	vmov	s15, r3
 800a920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	ee07 3a90 	vmov	s15, r3
 800a92a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a92e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a932:	4b7b      	ldr	r3, [pc, #492]	@ (800ab20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a93a:	ee07 3a90 	vmov	s15, r3
 800a93e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a942:	ed97 6a03 	vldr	s12, [r7, #12]
 800a946:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ab28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a94a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a94e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a95a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a95e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a962:	e087      	b.n	800aa74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	ee07 3a90 	vmov	s15, r3
 800a96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a96e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ab2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a976:	4b6a      	ldr	r3, [pc, #424]	@ (800ab20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a97a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a97e:	ee07 3a90 	vmov	s15, r3
 800a982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a986:	ed97 6a03 	vldr	s12, [r7, #12]
 800a98a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ab28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a98e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a99a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a99e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9a6:	e065      	b.n	800aa74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	ee07 3a90 	vmov	s15, r3
 800a9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ab30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a9b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ba:	4b59      	ldr	r3, [pc, #356]	@ (800ab20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9c2:	ee07 3a90 	vmov	s15, r3
 800a9c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ab28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a9d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9ea:	e043      	b.n	800aa74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	ee07 3a90 	vmov	s15, r3
 800a9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ab34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a9fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9fe:	4b48      	ldr	r3, [pc, #288]	@ (800ab20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa06:	ee07 3a90 	vmov	s15, r3
 800aa0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa12:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ab28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa2e:	e021      	b.n	800aa74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	ee07 3a90 	vmov	s15, r3
 800aa36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa3a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ab30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aa3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa42:	4b37      	ldr	r3, [pc, #220]	@ (800ab20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa4a:	ee07 3a90 	vmov	s15, r3
 800aa4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa52:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa56:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ab28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800aa74:	4b2a      	ldr	r3, [pc, #168]	@ (800ab20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa78:	0a5b      	lsrs	r3, r3, #9
 800aa7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa7e:	ee07 3a90 	vmov	s15, r3
 800aa82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa8e:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa9a:	ee17 2a90 	vmov	r2, s15
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800aaa2:	4b1f      	ldr	r3, [pc, #124]	@ (800ab20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaa6:	0c1b      	lsrs	r3, r3, #16
 800aaa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aaac:	ee07 3a90 	vmov	s15, r3
 800aab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aab8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aabc:	edd7 6a07 	vldr	s13, [r7, #28]
 800aac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aac8:	ee17 2a90 	vmov	r2, s15
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800aad0:	4b13      	ldr	r3, [pc, #76]	@ (800ab20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aad4:	0e1b      	lsrs	r3, r3, #24
 800aad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aada:	ee07 3a90 	vmov	s15, r3
 800aade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aae2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aaea:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaf6:	ee17 2a90 	vmov	r2, s15
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aafe:	e008      	b.n	800ab12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	609a      	str	r2, [r3, #8]
}
 800ab12:	bf00      	nop
 800ab14:	3724      	adds	r7, #36	@ 0x24
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr
 800ab1e:	bf00      	nop
 800ab20:	58024400 	.word	0x58024400
 800ab24:	03d09000 	.word	0x03d09000
 800ab28:	46000000 	.word	0x46000000
 800ab2c:	4c742400 	.word	0x4c742400
 800ab30:	4a742400 	.word	0x4a742400
 800ab34:	4bbebc20 	.word	0x4bbebc20

0800ab38 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b089      	sub	sp, #36	@ 0x24
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab40:	4ba0      	ldr	r3, [pc, #640]	@ (800adc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab44:	f003 0303 	and.w	r3, r3, #3
 800ab48:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ab4a:	4b9e      	ldr	r3, [pc, #632]	@ (800adc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab4e:	091b      	lsrs	r3, r3, #4
 800ab50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab54:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ab56:	4b9b      	ldr	r3, [pc, #620]	@ (800adc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab5a:	f003 0301 	and.w	r3, r3, #1
 800ab5e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ab60:	4b98      	ldr	r3, [pc, #608]	@ (800adc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab64:	08db      	lsrs	r3, r3, #3
 800ab66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	fb02 f303 	mul.w	r3, r2, r3
 800ab70:	ee07 3a90 	vmov	s15, r3
 800ab74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab78:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f000 8111 	beq.w	800ada6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	f000 8083 	beq.w	800ac92 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ab8c:	69bb      	ldr	r3, [r7, #24]
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	f200 80a1 	bhi.w	800acd6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ab94:	69bb      	ldr	r3, [r7, #24]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d003      	beq.n	800aba2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d056      	beq.n	800ac4e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800aba0:	e099      	b.n	800acd6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aba2:	4b88      	ldr	r3, [pc, #544]	@ (800adc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f003 0320 	and.w	r3, r3, #32
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d02d      	beq.n	800ac0a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abae:	4b85      	ldr	r3, [pc, #532]	@ (800adc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	08db      	lsrs	r3, r3, #3
 800abb4:	f003 0303 	and.w	r3, r3, #3
 800abb8:	4a83      	ldr	r2, [pc, #524]	@ (800adc8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800abba:	fa22 f303 	lsr.w	r3, r2, r3
 800abbe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	ee07 3a90 	vmov	s15, r3
 800abc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	ee07 3a90 	vmov	s15, r3
 800abd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abd8:	4b7a      	ldr	r3, [pc, #488]	@ (800adc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abe0:	ee07 3a90 	vmov	s15, r3
 800abe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abe8:	ed97 6a03 	vldr	s12, [r7, #12]
 800abec:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800adcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800abf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abf8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac04:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac08:	e087      	b.n	800ad1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	ee07 3a90 	vmov	s15, r3
 800ac10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac14:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800add0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ac18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac1c:	4b69      	ldr	r3, [pc, #420]	@ (800adc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac24:	ee07 3a90 	vmov	s15, r3
 800ac28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac30:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800adcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ac34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac4c:	e065      	b.n	800ad1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	ee07 3a90 	vmov	s15, r3
 800ac54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac58:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800add4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ac5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac60:	4b58      	ldr	r3, [pc, #352]	@ (800adc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac68:	ee07 3a90 	vmov	s15, r3
 800ac6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac70:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac74:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800adcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ac78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac90:	e043      	b.n	800ad1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	ee07 3a90 	vmov	s15, r3
 800ac98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac9c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800add8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800aca0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aca4:	4b47      	ldr	r3, [pc, #284]	@ (800adc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acac:	ee07 3a90 	vmov	s15, r3
 800acb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acb4:	ed97 6a03 	vldr	s12, [r7, #12]
 800acb8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800adcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800acbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800accc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acd4:	e021      	b.n	800ad1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	ee07 3a90 	vmov	s15, r3
 800acdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ace0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800add0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ace4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ace8:	4b36      	ldr	r3, [pc, #216]	@ (800adc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acf0:	ee07 3a90 	vmov	s15, r3
 800acf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acf8:	ed97 6a03 	vldr	s12, [r7, #12]
 800acfc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800adcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad18:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ad1a:	4b2a      	ldr	r3, [pc, #168]	@ (800adc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad1e:	0a5b      	lsrs	r3, r3, #9
 800ad20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad24:	ee07 3a90 	vmov	s15, r3
 800ad28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad30:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad34:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad40:	ee17 2a90 	vmov	r2, s15
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ad48:	4b1e      	ldr	r3, [pc, #120]	@ (800adc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad4c:	0c1b      	lsrs	r3, r3, #16
 800ad4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad52:	ee07 3a90 	vmov	s15, r3
 800ad56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad62:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad6e:	ee17 2a90 	vmov	r2, s15
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ad76:	4b13      	ldr	r3, [pc, #76]	@ (800adc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad7a:	0e1b      	lsrs	r3, r3, #24
 800ad7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad80:	ee07 3a90 	vmov	s15, r3
 800ad84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad90:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad9c:	ee17 2a90 	vmov	r2, s15
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ada4:	e008      	b.n	800adb8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	609a      	str	r2, [r3, #8]
}
 800adb8:	bf00      	nop
 800adba:	3724      	adds	r7, #36	@ 0x24
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr
 800adc4:	58024400 	.word	0x58024400
 800adc8:	03d09000 	.word	0x03d09000
 800adcc:	46000000 	.word	0x46000000
 800add0:	4c742400 	.word	0x4c742400
 800add4:	4a742400 	.word	0x4a742400
 800add8:	4bbebc20 	.word	0x4bbebc20

0800addc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ade6:	2300      	movs	r3, #0
 800ade8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800adea:	4b53      	ldr	r3, [pc, #332]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800adec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adee:	f003 0303 	and.w	r3, r3, #3
 800adf2:	2b03      	cmp	r3, #3
 800adf4:	d101      	bne.n	800adfa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800adf6:	2301      	movs	r3, #1
 800adf8:	e099      	b.n	800af2e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800adfa:	4b4f      	ldr	r3, [pc, #316]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a4e      	ldr	r2, [pc, #312]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800ae00:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ae04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae06:	f7fa fbc9 	bl	800559c <HAL_GetTick>
 800ae0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae0c:	e008      	b.n	800ae20 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ae0e:	f7fa fbc5 	bl	800559c <HAL_GetTick>
 800ae12:	4602      	mov	r2, r0
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	1ad3      	subs	r3, r2, r3
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	d901      	bls.n	800ae20 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae1c:	2303      	movs	r3, #3
 800ae1e:	e086      	b.n	800af2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae20:	4b45      	ldr	r3, [pc, #276]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d1f0      	bne.n	800ae0e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ae2c:	4b42      	ldr	r3, [pc, #264]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800ae2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae30:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	031b      	lsls	r3, r3, #12
 800ae3a:	493f      	ldr	r1, [pc, #252]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	628b      	str	r3, [r1, #40]	@ 0x28
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	3b01      	subs	r3, #1
 800ae46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	025b      	lsls	r3, r3, #9
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	431a      	orrs	r2, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	3b01      	subs	r3, #1
 800ae5c:	041b      	lsls	r3, r3, #16
 800ae5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ae62:	431a      	orrs	r2, r3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	691b      	ldr	r3, [r3, #16]
 800ae68:	3b01      	subs	r3, #1
 800ae6a:	061b      	lsls	r3, r3, #24
 800ae6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ae70:	4931      	ldr	r1, [pc, #196]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800ae72:	4313      	orrs	r3, r2
 800ae74:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ae76:	4b30      	ldr	r3, [pc, #192]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800ae78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	695b      	ldr	r3, [r3, #20]
 800ae82:	492d      	ldr	r1, [pc, #180]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800ae84:	4313      	orrs	r3, r2
 800ae86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ae88:	4b2b      	ldr	r3, [pc, #172]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800ae8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae8c:	f023 0220 	bic.w	r2, r3, #32
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	699b      	ldr	r3, [r3, #24]
 800ae94:	4928      	ldr	r1, [pc, #160]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800ae96:	4313      	orrs	r3, r2
 800ae98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ae9a:	4b27      	ldr	r3, [pc, #156]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800ae9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae9e:	4a26      	ldr	r2, [pc, #152]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800aea0:	f023 0310 	bic.w	r3, r3, #16
 800aea4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800aea6:	4b24      	ldr	r3, [pc, #144]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800aea8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aeaa:	4b24      	ldr	r3, [pc, #144]	@ (800af3c <RCCEx_PLL2_Config+0x160>)
 800aeac:	4013      	ands	r3, r2
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	69d2      	ldr	r2, [r2, #28]
 800aeb2:	00d2      	lsls	r2, r2, #3
 800aeb4:	4920      	ldr	r1, [pc, #128]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800aeba:	4b1f      	ldr	r3, [pc, #124]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800aebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aebe:	4a1e      	ldr	r2, [pc, #120]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800aec0:	f043 0310 	orr.w	r3, r3, #16
 800aec4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d106      	bne.n	800aeda <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800aecc:	4b1a      	ldr	r3, [pc, #104]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800aece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed0:	4a19      	ldr	r2, [pc, #100]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800aed2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aed6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aed8:	e00f      	b.n	800aefa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d106      	bne.n	800aeee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800aee0:	4b15      	ldr	r3, [pc, #84]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800aee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee4:	4a14      	ldr	r2, [pc, #80]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800aee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aeea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aeec:	e005      	b.n	800aefa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800aeee:	4b12      	ldr	r3, [pc, #72]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800aef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef2:	4a11      	ldr	r2, [pc, #68]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800aef4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aef8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800aefa:	4b0f      	ldr	r3, [pc, #60]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a0e      	ldr	r2, [pc, #56]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800af00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800af04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af06:	f7fa fb49 	bl	800559c <HAL_GetTick>
 800af0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af0c:	e008      	b.n	800af20 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800af0e:	f7fa fb45 	bl	800559c <HAL_GetTick>
 800af12:	4602      	mov	r2, r0
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	1ad3      	subs	r3, r2, r3
 800af18:	2b02      	cmp	r3, #2
 800af1a:	d901      	bls.n	800af20 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af1c:	2303      	movs	r3, #3
 800af1e:	e006      	b.n	800af2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af20:	4b05      	ldr	r3, [pc, #20]	@ (800af38 <RCCEx_PLL2_Config+0x15c>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d0f0      	beq.n	800af0e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800af2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	58024400 	.word	0x58024400
 800af3c:	ffff0007 	.word	0xffff0007

0800af40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af4a:	2300      	movs	r3, #0
 800af4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800af4e:	4b53      	ldr	r3, [pc, #332]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800af50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af52:	f003 0303 	and.w	r3, r3, #3
 800af56:	2b03      	cmp	r3, #3
 800af58:	d101      	bne.n	800af5e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800af5a:	2301      	movs	r3, #1
 800af5c:	e099      	b.n	800b092 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800af5e:	4b4f      	ldr	r3, [pc, #316]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a4e      	ldr	r2, [pc, #312]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800af64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af6a:	f7fa fb17 	bl	800559c <HAL_GetTick>
 800af6e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800af70:	e008      	b.n	800af84 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800af72:	f7fa fb13 	bl	800559c <HAL_GetTick>
 800af76:	4602      	mov	r2, r0
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	1ad3      	subs	r3, r2, r3
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d901      	bls.n	800af84 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800af80:	2303      	movs	r3, #3
 800af82:	e086      	b.n	800b092 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800af84:	4b45      	ldr	r3, [pc, #276]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1f0      	bne.n	800af72 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800af90:	4b42      	ldr	r3, [pc, #264]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800af92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af94:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	051b      	lsls	r3, r3, #20
 800af9e:	493f      	ldr	r1, [pc, #252]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800afa0:	4313      	orrs	r3, r2
 800afa2:	628b      	str	r3, [r1, #40]	@ 0x28
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	3b01      	subs	r3, #1
 800afaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	3b01      	subs	r3, #1
 800afb4:	025b      	lsls	r3, r3, #9
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	431a      	orrs	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	3b01      	subs	r3, #1
 800afc0:	041b      	lsls	r3, r3, #16
 800afc2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800afc6:	431a      	orrs	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	3b01      	subs	r3, #1
 800afce:	061b      	lsls	r3, r3, #24
 800afd0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800afd4:	4931      	ldr	r1, [pc, #196]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800afd6:	4313      	orrs	r3, r2
 800afd8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800afda:	4b30      	ldr	r3, [pc, #192]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800afdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	695b      	ldr	r3, [r3, #20]
 800afe6:	492d      	ldr	r1, [pc, #180]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800afe8:	4313      	orrs	r3, r2
 800afea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800afec:	4b2b      	ldr	r3, [pc, #172]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800afee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aff0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	699b      	ldr	r3, [r3, #24]
 800aff8:	4928      	ldr	r1, [pc, #160]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800affa:	4313      	orrs	r3, r2
 800affc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800affe:	4b27      	ldr	r3, [pc, #156]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800b000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b002:	4a26      	ldr	r2, [pc, #152]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800b004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b008:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b00a:	4b24      	ldr	r3, [pc, #144]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800b00c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b00e:	4b24      	ldr	r3, [pc, #144]	@ (800b0a0 <RCCEx_PLL3_Config+0x160>)
 800b010:	4013      	ands	r3, r2
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	69d2      	ldr	r2, [r2, #28]
 800b016:	00d2      	lsls	r2, r2, #3
 800b018:	4920      	ldr	r1, [pc, #128]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800b01a:	4313      	orrs	r3, r2
 800b01c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b01e:	4b1f      	ldr	r3, [pc, #124]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800b020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b022:	4a1e      	ldr	r2, [pc, #120]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800b024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b028:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d106      	bne.n	800b03e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b030:	4b1a      	ldr	r3, [pc, #104]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800b032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b034:	4a19      	ldr	r2, [pc, #100]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800b036:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b03a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b03c:	e00f      	b.n	800b05e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d106      	bne.n	800b052 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b044:	4b15      	ldr	r3, [pc, #84]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800b046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b048:	4a14      	ldr	r2, [pc, #80]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800b04a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b04e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b050:	e005      	b.n	800b05e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b052:	4b12      	ldr	r3, [pc, #72]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800b054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b056:	4a11      	ldr	r2, [pc, #68]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800b058:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b05c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b05e:	4b0f      	ldr	r3, [pc, #60]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a0e      	ldr	r2, [pc, #56]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800b064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b06a:	f7fa fa97 	bl	800559c <HAL_GetTick>
 800b06e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b070:	e008      	b.n	800b084 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b072:	f7fa fa93 	bl	800559c <HAL_GetTick>
 800b076:	4602      	mov	r2, r0
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	1ad3      	subs	r3, r2, r3
 800b07c:	2b02      	cmp	r3, #2
 800b07e:	d901      	bls.n	800b084 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b080:	2303      	movs	r3, #3
 800b082:	e006      	b.n	800b092 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b084:	4b05      	ldr	r3, [pc, #20]	@ (800b09c <RCCEx_PLL3_Config+0x15c>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d0f0      	beq.n	800b072 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b090:	7bfb      	ldrb	r3, [r7, #15]
}
 800b092:	4618      	mov	r0, r3
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	58024400 	.word	0x58024400
 800b0a0:	ffff0007 	.word	0xffff0007

0800b0a4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b08a      	sub	sp, #40	@ 0x28
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d101      	bne.n	800b0b6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e075      	b.n	800b1a2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d105      	bne.n	800b0ce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7f9 f8b1 	bl	8004230 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2204      	movs	r2, #4
 800b0d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 f868 	bl	800b1ac <HAL_SD_InitCard>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d001      	beq.n	800b0e6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e05d      	b.n	800b1a2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800b0e6:	f107 0308 	add.w	r3, r7, #8
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 fdaf 	bl	800bc50 <HAL_SD_GetCardStatus>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d001      	beq.n	800b0fc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e052      	b.n	800b1a2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800b0fc:	7e3b      	ldrb	r3, [r7, #24]
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800b102:	7e7b      	ldrb	r3, [r7, #25]
 800b104:	b2db      	uxtb	r3, r3
 800b106:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d10a      	bne.n	800b126 <HAL_SD_Init+0x82>
 800b110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b112:	2b00      	cmp	r3, #0
 800b114:	d102      	bne.n	800b11c <HAL_SD_Init+0x78>
 800b116:	6a3b      	ldr	r3, [r7, #32]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d004      	beq.n	800b126 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b122:	659a      	str	r2, [r3, #88]	@ 0x58
 800b124:	e00b      	b.n	800b13e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d104      	bne.n	800b138 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b134:	659a      	str	r2, [r3, #88]	@ 0x58
 800b136:	e002      	b.n	800b13e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	4619      	mov	r1, r3
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 fe6d 	bl	800be24 <HAL_SD_ConfigWideBusOperation>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d001      	beq.n	800b154 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800b150:	2301      	movs	r3, #1
 800b152:	e026      	b.n	800b1a2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800b154:	f7fa fa22 	bl	800559c <HAL_GetTick>
 800b158:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b15a:	e011      	b.n	800b180 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b15c:	f7fa fa1e 	bl	800559c <HAL_GetTick>
 800b160:	4602      	mov	r2, r0
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	1ad3      	subs	r3, r2, r3
 800b166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b16a:	d109      	bne.n	800b180 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b172:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800b17c:	2303      	movs	r3, #3
 800b17e:	e010      	b.n	800b1a2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 ff61 	bl	800c048 <HAL_SD_GetCardState>
 800b186:	4603      	mov	r3, r0
 800b188:	2b04      	cmp	r3, #4
 800b18a:	d1e7      	bne.n	800b15c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3728      	adds	r7, #40	@ 0x28
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
	...

0800b1ac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b1ac:	b590      	push	{r4, r7, lr}
 800b1ae:	b08d      	sub	sp, #52	@ 0x34
 800b1b0:	af02      	add	r7, sp, #8
 800b1b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b1c4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b1c8:	f04f 0100 	mov.w	r1, #0
 800b1cc:	f7fe fc76 	bl	8009abc <HAL_RCCEx_GetPeriphCLKFreq>
 800b1d0:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d109      	bne.n	800b1ec <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b1e6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e070      	b.n	800b2ce <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ee:	0a1b      	lsrs	r3, r3, #8
 800b1f0:	4a39      	ldr	r2, [pc, #228]	@ (800b2d8 <HAL_SD_InitCard+0x12c>)
 800b1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f6:	091b      	lsrs	r3, r3, #4
 800b1f8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681c      	ldr	r4, [r3, #0]
 800b1fe:	466a      	mov	r2, sp
 800b200:	f107 0318 	add.w	r3, r7, #24
 800b204:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b208:	e882 0003 	stmia.w	r2, {r0, r1}
 800b20c:	f107 030c 	add.w	r3, r7, #12
 800b210:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b212:	4620      	mov	r0, r4
 800b214:	f003 f916 	bl	800e444 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4618      	mov	r0, r3
 800b21e:	f003 f959 	bl	800e4d4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d005      	beq.n	800b234 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	005b      	lsls	r3, r3, #1
 800b22c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b22e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b232:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800b234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b236:	2b00      	cmp	r3, #0
 800b238:	d007      	beq.n	800b24a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800b23a:	4a28      	ldr	r2, [pc, #160]	@ (800b2dc <HAL_SD_InitCard+0x130>)
 800b23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b23e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b242:	3301      	adds	r3, #1
 800b244:	4618      	mov	r0, r3
 800b246:	f7fa f9b5 	bl	80055b4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 ffea 	bl	800c224 <SD_PowerON>
 800b250:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b252:	6a3b      	ldr	r3, [r7, #32]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00b      	beq.n	800b270 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2201      	movs	r2, #1
 800b25c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b264:	6a3b      	ldr	r3, [r7, #32]
 800b266:	431a      	orrs	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b26c:	2301      	movs	r3, #1
 800b26e:	e02e      	b.n	800b2ce <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 ff09 	bl	800c088 <SD_InitCard>
 800b276:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b278:	6a3b      	ldr	r3, [r7, #32]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d00b      	beq.n	800b296 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2201      	movs	r2, #1
 800b282:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b28a:	6a3b      	ldr	r3, [r7, #32]
 800b28c:	431a      	orrs	r2, r3
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b292:	2301      	movs	r3, #1
 800b294:	e01b      	b.n	800b2ce <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f003 f9ae 	bl	800e600 <SDMMC_CmdBlockLength>
 800b2a4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b2a6:	6a3b      	ldr	r3, [r7, #32]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00f      	beq.n	800b2cc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a0b      	ldr	r2, [pc, #44]	@ (800b2e0 <HAL_SD_InitCard+0x134>)
 800b2b2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b2b8:	6a3b      	ldr	r3, [r7, #32]
 800b2ba:	431a      	orrs	r2, r3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e000      	b.n	800b2ce <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	372c      	adds	r7, #44	@ 0x2c
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd90      	pop	{r4, r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	014f8b59 	.word	0x014f8b59
 800b2dc:	00012110 	.word	0x00012110
 800b2e0:	1fe00fff 	.word	0x1fe00fff

0800b2e4 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b08c      	sub	sp, #48	@ 0x30
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	607a      	str	r2, [r7, #4]
 800b2f0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d107      	bne.n	800b30c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b300:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b308:	2301      	movs	r3, #1
 800b30a:	e08d      	b.n	800b428 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b312:	b2db      	uxtb	r3, r3
 800b314:	2b01      	cmp	r3, #1
 800b316:	f040 8086 	bne.w	800b426 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2200      	movs	r2, #0
 800b31e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b320:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	441a      	add	r2, r3
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d907      	bls.n	800b33e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b332:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800b33a:	2301      	movs	r3, #1
 800b33c:	e074      	b.n	800b428 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2203      	movs	r2, #3
 800b342:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2200      	movs	r2, #0
 800b34c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	68ba      	ldr	r2, [r7, #8]
 800b352:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	025a      	lsls	r2, r3, #9
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b360:	2b01      	cmp	r3, #1
 800b362:	d002      	beq.n	800b36a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800b364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b366:	025b      	lsls	r3, r3, #9
 800b368:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b36a:	f04f 33ff 	mov.w	r3, #4294967295
 800b36e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	025b      	lsls	r3, r3, #9
 800b374:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b376:	2390      	movs	r3, #144	@ 0x90
 800b378:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b37a:	2302      	movs	r3, #2
 800b37c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b37e:	2300      	movs	r3, #0
 800b380:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b382:	2300      	movs	r3, #0
 800b384:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f107 0210 	add.w	r2, r7, #16
 800b38e:	4611      	mov	r1, r2
 800b390:	4618      	mov	r0, r3
 800b392:	f003 f909 	bl	800e5a8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	68da      	ldr	r2, [r3, #12]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b3a4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	68ba      	ldr	r2, [r7, #8]
 800b3ac:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d90a      	bls.n	800b3d2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2282      	movs	r2, #130	@ 0x82
 800b3c0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f003 f95f 	bl	800e68c <SDMMC_CmdReadMultiBlock>
 800b3ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b3d0:	e009      	b.n	800b3e6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2281      	movs	r2, #129	@ 0x81
 800b3d6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f003 f931 	bl	800e646 <SDMMC_CmdReadSingleBlock>
 800b3e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800b3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d012      	beq.n	800b412 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a0f      	ldr	r2, [pc, #60]	@ (800b430 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800b3f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3fa:	431a      	orrs	r2, r3
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2201      	movs	r2, #1
 800b404:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2200      	movs	r2, #0
 800b40c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800b40e:	2301      	movs	r3, #1
 800b410:	e00a      	b.n	800b428 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800b420:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800b422:	2300      	movs	r3, #0
 800b424:	e000      	b.n	800b428 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800b426:	2302      	movs	r3, #2
  }
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3730      	adds	r7, #48	@ 0x30
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	1fe00fff 	.word	0x1fe00fff

0800b434 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b08c      	sub	sp, #48	@ 0x30
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	607a      	str	r2, [r7, #4]
 800b440:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d107      	bne.n	800b45c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b450:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	e08d      	b.n	800b578 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b462:	b2db      	uxtb	r3, r3
 800b464:	2b01      	cmp	r3, #1
 800b466:	f040 8086 	bne.w	800b576 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2200      	movs	r2, #0
 800b46e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b470:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	441a      	add	r2, r3
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d907      	bls.n	800b48e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b482:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	e074      	b.n	800b578 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2203      	movs	r2, #3
 800b492:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2200      	movs	r2, #0
 800b49c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	68ba      	ldr	r2, [r7, #8]
 800b4a2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	025a      	lsls	r2, r3, #9
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d002      	beq.n	800b4ba <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800b4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b6:	025b      	lsls	r3, r3, #9
 800b4b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b4be:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	025b      	lsls	r3, r3, #9
 800b4c4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b4c6:	2390      	movs	r3, #144	@ 0x90
 800b4c8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f107 0210 	add.w	r2, r7, #16
 800b4de:	4611      	mov	r1, r2
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f003 f861 	bl	800e5a8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	68da      	ldr	r2, [r3, #12]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b4f4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68ba      	ldr	r2, [r7, #8]
 800b4fc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2201      	movs	r2, #1
 800b504:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d90a      	bls.n	800b522 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	22a0      	movs	r2, #160	@ 0xa0
 800b510:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b518:	4618      	mov	r0, r3
 800b51a:	f003 f8fd 	bl	800e718 <SDMMC_CmdWriteMultiBlock>
 800b51e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b520:	e009      	b.n	800b536 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2290      	movs	r2, #144	@ 0x90
 800b526:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b52e:	4618      	mov	r0, r3
 800b530:	f003 f8cf 	bl	800e6d2 <SDMMC_CmdWriteSingleBlock>
 800b534:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800b536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d012      	beq.n	800b562 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a0f      	ldr	r2, [pc, #60]	@ (800b580 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800b542:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b54a:	431a      	orrs	r2, r3
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2201      	movs	r2, #1
 800b554:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2200      	movs	r2, #0
 800b55c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	e00a      	b.n	800b578 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800b570:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b572:	2300      	movs	r3, #0
 800b574:	e000      	b.n	800b578 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800b576:	2302      	movs	r3, #2
  }
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3730      	adds	r7, #48	@ 0x30
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	1fe00fff 	.word	0x1fe00fff

0800b584 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b590:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b598:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d008      	beq.n	800b5b2 <HAL_SD_IRQHandler+0x2e>
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f003 0308 	and.w	r3, r3, #8
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d003      	beq.n	800b5b2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f001 f926 	bl	800c7fc <SD_Read_IT>
 800b5b0:	e19a      	b.n	800b8e8 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f000 80ac 	beq.w	800b71a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b5ca:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	4b59      	ldr	r3, [pc, #356]	@ (800b73c <HAL_SD_IRQHandler+0x1b8>)
 800b5d8:	400b      	ands	r3, r1
 800b5da:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800b5ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	68da      	ldr	r2, [r3, #12]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b5fa:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f003 0308 	and.w	r3, r3, #8
 800b602:	2b00      	cmp	r3, #0
 800b604:	d038      	beq.n	800b678 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f003 0302 	and.w	r3, r3, #2
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d104      	bne.n	800b61a <HAL_SD_IRQHandler+0x96>
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f003 0320 	and.w	r3, r3, #32
 800b616:	2b00      	cmp	r3, #0
 800b618:	d011      	beq.n	800b63e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4618      	mov	r0, r3
 800b620:	f003 f89e 	bl	800e760 <SDMMC_CmdStopTransfer>
 800b624:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d008      	beq.n	800b63e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	431a      	orrs	r2, r3
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f95b 	bl	800b8f4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4a3f      	ldr	r2, [pc, #252]	@ (800b740 <HAL_SD_IRQHandler+0x1bc>)
 800b644:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2201      	movs	r2, #1
 800b64a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f003 0301 	and.w	r3, r3, #1
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d104      	bne.n	800b668 <HAL_SD_IRQHandler+0xe4>
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f003 0302 	and.w	r3, r3, #2
 800b664:	2b00      	cmp	r3, #0
 800b666:	d003      	beq.n	800b670 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f003 fd2b 	bl	800f0c4 <HAL_SD_RxCpltCallback>
 800b66e:	e13b      	b.n	800b8e8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f003 fd1d 	bl	800f0b0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b676:	e137      	b.n	800b8e8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b67e:	2b00      	cmp	r3, #0
 800b680:	f000 8132 	beq.w	800b8e8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2200      	movs	r2, #0
 800b68a:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2200      	movs	r2, #0
 800b692:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2200      	movs	r2, #0
 800b69a:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f003 0302 	and.w	r3, r3, #2
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d104      	bne.n	800b6b0 <HAL_SD_IRQHandler+0x12c>
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f003 0320 	and.w	r3, r3, #32
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d011      	beq.n	800b6d4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f003 f853 	bl	800e760 <SDMMC_CmdStopTransfer>
 800b6ba:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d008      	beq.n	800b6d4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	431a      	orrs	r2, r3
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 f910 	bl	800b8f4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f003 0310 	and.w	r3, r3, #16
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d104      	bne.n	800b6f6 <HAL_SD_IRQHandler+0x172>
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f003 0320 	and.w	r3, r3, #32
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d002      	beq.n	800b6fc <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f003 fcda 	bl	800f0b0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f003 0301 	and.w	r3, r3, #1
 800b702:	2b00      	cmp	r3, #0
 800b704:	d105      	bne.n	800b712 <HAL_SD_IRQHandler+0x18e>
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f003 0302 	and.w	r3, r3, #2
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f000 80eb 	beq.w	800b8e8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f003 fcd6 	bl	800f0c4 <HAL_SD_RxCpltCallback>
}
 800b718:	e0e6      	b.n	800b8e8 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b724:	2b00      	cmp	r3, #0
 800b726:	d00d      	beq.n	800b744 <HAL_SD_IRQHandler+0x1c0>
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f003 0308 	and.w	r3, r3, #8
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d008      	beq.n	800b744 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f001 f8a8 	bl	800c888 <SD_Write_IT>
 800b738:	e0d6      	b.n	800b8e8 <HAL_SD_IRQHandler+0x364>
 800b73a:	bf00      	nop
 800b73c:	ffff3ec5 	.word	0xffff3ec5
 800b740:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b74a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800b74e:	2b00      	cmp	r3, #0
 800b750:	f000 809d 	beq.w	800b88e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b75a:	f003 0302 	and.w	r3, r3, #2
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d005      	beq.n	800b76e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b766:	f043 0202 	orr.w	r2, r3, #2
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b774:	f003 0308 	and.w	r3, r3, #8
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d005      	beq.n	800b788 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b780:	f043 0208 	orr.w	r2, r3, #8
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b78e:	f003 0320 	and.w	r3, r3, #32
 800b792:	2b00      	cmp	r3, #0
 800b794:	d005      	beq.n	800b7a2 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b79a:	f043 0220 	orr.w	r2, r3, #32
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7a8:	f003 0310 	and.w	r3, r3, #16
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d005      	beq.n	800b7bc <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7b4:	f043 0210 	orr.w	r2, r3, #16
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a4b      	ldr	r2, [pc, #300]	@ (800b8f0 <HAL_SD_IRQHandler+0x36c>)
 800b7c2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800b7d2:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	68da      	ldr	r2, [r3, #12]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b7e2:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b7f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	68da      	ldr	r2, [r3, #12]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b802:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4618      	mov	r0, r3
 800b80a:	f002 ffa9 	bl	800e760 <SDMMC_CmdStopTransfer>
 800b80e:	4602      	mov	r2, r0
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b814:	431a      	orrs	r2, r3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	68da      	ldr	r2, [r3, #12]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b828:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b832:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f003 0308 	and.w	r3, r3, #8
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00a      	beq.n	800b854 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2201      	movs	r2, #1
 800b842:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2200      	movs	r2, #0
 800b84a:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 f851 	bl	800b8f4 <HAL_SD_ErrorCallback>
}
 800b852:	e049      	b.n	800b8e8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d044      	beq.n	800b8e8 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b862:	2b00      	cmp	r3, #0
 800b864:	d040      	beq.n	800b8e8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800b874:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2200      	movs	r2, #0
 800b87c:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2201      	movs	r2, #1
 800b882:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 f834 	bl	800b8f4 <HAL_SD_ErrorCallback>
}
 800b88c:	e02c      	b.n	800b8e8 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d025      	beq.n	800b8e8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8a4:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8ac:	f003 0304 	and.w	r3, r3, #4
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d10c      	bne.n	800b8ce <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f003 0320 	and.w	r3, r3, #32
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d003      	beq.n	800b8c6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f001 f84a 	bl	800c958 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800b8c4:	e010      	b.n	800b8e8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f001 f832 	bl	800c930 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800b8cc:	e00c      	b.n	800b8e8 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f003 0320 	and.w	r3, r3, #32
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d003      	beq.n	800b8e0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f001 f833 	bl	800c944 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800b8de:	e003      	b.n	800b8e8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f001 f81b 	bl	800c91c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800b8e6:	e7ff      	b.n	800b8e8 <HAL_SD_IRQHandler+0x364>
 800b8e8:	bf00      	nop
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	18000f3a 	.word	0x18000f3a

0800b8f4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b8fc:	bf00      	nop
 800b8fe:	370c      	adds	r7, #12
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b916:	0f9b      	lsrs	r3, r3, #30
 800b918:	b2da      	uxtb	r2, r3
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b922:	0e9b      	lsrs	r3, r3, #26
 800b924:	b2db      	uxtb	r3, r3
 800b926:	f003 030f 	and.w	r3, r3, #15
 800b92a:	b2da      	uxtb	r2, r3
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b934:	0e1b      	lsrs	r3, r3, #24
 800b936:	b2db      	uxtb	r3, r3
 800b938:	f003 0303 	and.w	r3, r3, #3
 800b93c:	b2da      	uxtb	r2, r3
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b946:	0c1b      	lsrs	r3, r3, #16
 800b948:	b2da      	uxtb	r2, r3
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b952:	0a1b      	lsrs	r3, r3, #8
 800b954:	b2da      	uxtb	r2, r3
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b95e:	b2da      	uxtb	r2, r3
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b968:	0d1b      	lsrs	r3, r3, #20
 800b96a:	b29a      	uxth	r2, r3
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b974:	0c1b      	lsrs	r3, r3, #16
 800b976:	b2db      	uxtb	r3, r3
 800b978:	f003 030f 	and.w	r3, r3, #15
 800b97c:	b2da      	uxtb	r2, r3
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b986:	0bdb      	lsrs	r3, r3, #15
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	f003 0301 	and.w	r3, r3, #1
 800b98e:	b2da      	uxtb	r2, r3
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b998:	0b9b      	lsrs	r3, r3, #14
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	f003 0301 	and.w	r3, r3, #1
 800b9a0:	b2da      	uxtb	r2, r3
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b9aa:	0b5b      	lsrs	r3, r3, #13
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	f003 0301 	and.w	r3, r3, #1
 800b9b2:	b2da      	uxtb	r2, r3
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b9bc:	0b1b      	lsrs	r3, r3, #12
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	f003 0301 	and.w	r3, r3, #1
 800b9c4:	b2da      	uxtb	r2, r3
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d163      	bne.n	800baa0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b9dc:	009a      	lsls	r2, r3, #2
 800b9de:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b9e2:	4013      	ands	r3, r2
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800b9e8:	0f92      	lsrs	r2, r2, #30
 800b9ea:	431a      	orrs	r2, r3
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9f4:	0edb      	lsrs	r3, r3, #27
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	f003 0307 	and.w	r3, r3, #7
 800b9fc:	b2da      	uxtb	r2, r3
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba06:	0e1b      	lsrs	r3, r3, #24
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	f003 0307 	and.w	r3, r3, #7
 800ba0e:	b2da      	uxtb	r2, r3
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba18:	0d5b      	lsrs	r3, r3, #21
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	f003 0307 	and.w	r3, r3, #7
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba2a:	0c9b      	lsrs	r3, r3, #18
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	f003 0307 	and.w	r3, r3, #7
 800ba32:	b2da      	uxtb	r2, r3
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba3c:	0bdb      	lsrs	r3, r3, #15
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	f003 0307 	and.w	r3, r3, #7
 800ba44:	b2da      	uxtb	r2, r3
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	691b      	ldr	r3, [r3, #16]
 800ba4e:	1c5a      	adds	r2, r3, #1
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	7e1b      	ldrb	r3, [r3, #24]
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	f003 0307 	and.w	r3, r3, #7
 800ba5e:	3302      	adds	r3, #2
 800ba60:	2201      	movs	r2, #1
 800ba62:	fa02 f303 	lsl.w	r3, r2, r3
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ba6a:	fb03 f202 	mul.w	r2, r3, r2
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	7a1b      	ldrb	r3, [r3, #8]
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	f003 030f 	and.w	r3, r3, #15
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	409a      	lsls	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800ba8c:	0a52      	lsrs	r2, r2, #9
 800ba8e:	fb03 f202 	mul.w	r2, r3, r2
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba9c:	655a      	str	r2, [r3, #84]	@ 0x54
 800ba9e:	e031      	b.n	800bb04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d11d      	bne.n	800bae4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800baac:	041b      	lsls	r3, r3, #16
 800baae:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bab6:	0c1b      	lsrs	r3, r3, #16
 800bab8:	431a      	orrs	r2, r3
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	691b      	ldr	r3, [r3, #16]
 800bac2:	3301      	adds	r3, #1
 800bac4:	029a      	lsls	r2, r3, #10
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bad8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	655a      	str	r2, [r3, #84]	@ 0x54
 800bae2:	e00f      	b.n	800bb04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a58      	ldr	r2, [pc, #352]	@ (800bc4c <HAL_SD_GetCardCSD+0x344>)
 800baea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baf0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2201      	movs	r2, #1
 800bafc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	e09d      	b.n	800bc40 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb08:	0b9b      	lsrs	r3, r3, #14
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	f003 0301 	and.w	r3, r3, #1
 800bb10:	b2da      	uxtb	r2, r3
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb1a:	09db      	lsrs	r3, r3, #7
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb22:	b2da      	uxtb	r2, r3
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb32:	b2da      	uxtb	r2, r3
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb3c:	0fdb      	lsrs	r3, r3, #31
 800bb3e:	b2da      	uxtb	r2, r3
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb48:	0f5b      	lsrs	r3, r3, #29
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	f003 0303 	and.w	r3, r3, #3
 800bb50:	b2da      	uxtb	r2, r3
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb5a:	0e9b      	lsrs	r3, r3, #26
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	f003 0307 	and.w	r3, r3, #7
 800bb62:	b2da      	uxtb	r2, r3
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb6c:	0d9b      	lsrs	r3, r3, #22
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	f003 030f 	and.w	r3, r3, #15
 800bb74:	b2da      	uxtb	r2, r3
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb7e:	0d5b      	lsrs	r3, r3, #21
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	f003 0301 	and.w	r3, r3, #1
 800bb86:	b2da      	uxtb	r2, r3
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	2200      	movs	r2, #0
 800bb92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb9a:	0c1b      	lsrs	r3, r3, #16
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	f003 0301 	and.w	r3, r3, #1
 800bba2:	b2da      	uxtb	r2, r3
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bbae:	0bdb      	lsrs	r3, r3, #15
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	f003 0301 	and.w	r3, r3, #1
 800bbb6:	b2da      	uxtb	r2, r3
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bbc2:	0b9b      	lsrs	r3, r3, #14
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	f003 0301 	and.w	r3, r3, #1
 800bbca:	b2da      	uxtb	r2, r3
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bbd6:	0b5b      	lsrs	r3, r3, #13
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	f003 0301 	and.w	r3, r3, #1
 800bbde:	b2da      	uxtb	r2, r3
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bbea:	0b1b      	lsrs	r3, r3, #12
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	f003 0301 	and.w	r3, r3, #1
 800bbf2:	b2da      	uxtb	r2, r3
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bbfe:	0a9b      	lsrs	r3, r3, #10
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	f003 0303 	and.w	r3, r3, #3
 800bc06:	b2da      	uxtb	r2, r3
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bc12:	0a1b      	lsrs	r3, r3, #8
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	f003 0303 	and.w	r3, r3, #3
 800bc1a:	b2da      	uxtb	r2, r3
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bc26:	085b      	lsrs	r3, r3, #1
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc2e:	b2da      	uxtb	r2, r3
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	2201      	movs	r2, #1
 800bc3a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800bc3e:	2300      	movs	r3, #0
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr
 800bc4c:	1fe00fff 	.word	0x1fe00fff

0800bc50 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b094      	sub	sp, #80	@ 0x50
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	2b03      	cmp	r3, #3
 800bc6a:	d101      	bne.n	800bc70 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e0a7      	b.n	800bdc0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800bc70:	f107 0308 	add.w	r3, r7, #8
 800bc74:	4619      	mov	r1, r3
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 fb62 	bl	800c340 <SD_SendSDStatus>
 800bc7c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800bc7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d011      	beq.n	800bca8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4a4f      	ldr	r2, [pc, #316]	@ (800bdc8 <HAL_SD_GetCardStatus+0x178>)
 800bc8a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc92:	431a      	orrs	r2, r3
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800bca0:	2301      	movs	r3, #1
 800bca2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800bca6:	e070      	b.n	800bd8a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	099b      	lsrs	r3, r3, #6
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	f003 0303 	and.w	r3, r3, #3
 800bcb2:	b2da      	uxtb	r2, r3
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	095b      	lsrs	r3, r3, #5
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	f003 0301 	and.w	r3, r3, #1
 800bcc2:	b2da      	uxtb	r2, r3
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	0a1b      	lsrs	r3, r3, #8
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bcd2:	b29a      	uxth	r2, r3
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	0e1b      	lsrs	r3, r3, #24
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	b29a      	uxth	r2, r3
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	061a      	lsls	r2, r3, #24
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	021b      	lsls	r3, r3, #8
 800bcea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bcee:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	0a1b      	lsrs	r3, r3, #8
 800bcf4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800bcf8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	0e1b      	lsrs	r3, r3, #24
 800bcfe:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	b2da      	uxtb	r2, r3
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	0a1b      	lsrs	r3, r3, #8
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	0d1b      	lsrs	r3, r3, #20
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	f003 030f 	and.w	r3, r3, #15
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	0c1b      	lsrs	r3, r3, #16
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bd30:	b29a      	uxth	r2, r3
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	b29a      	uxth	r2, r3
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	0a9b      	lsrs	r3, r3, #10
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bd4c:	b2da      	uxtb	r2, r3
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	0a1b      	lsrs	r3, r3, #8
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	f003 0303 	and.w	r3, r3, #3
 800bd5c:	b2da      	uxtb	r2, r3
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	091b      	lsrs	r3, r3, #4
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	f003 030f 	and.w	r3, r3, #15
 800bd6c:	b2da      	uxtb	r2, r3
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	f003 030f 	and.w	r3, r3, #15
 800bd7a:	b2da      	uxtb	r2, r3
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	0e1b      	lsrs	r3, r3, #24
 800bd84:	b2da      	uxtb	r2, r3
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bd92:	4618      	mov	r0, r3
 800bd94:	f002 fc34 	bl	800e600 <SDMMC_CmdBlockLength>
 800bd98:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800bd9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d00d      	beq.n	800bdbc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	4a08      	ldr	r2, [pc, #32]	@ (800bdc8 <HAL_SD_GetCardStatus+0x178>)
 800bda6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bdac:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800bdbc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3750      	adds	r7, #80	@ 0x50
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}
 800bdc8:	1fe00fff 	.word	0x1fe00fff

0800bdcc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800be16:	2300      	movs	r3, #0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	370c      	adds	r7, #12
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800be24:	b590      	push	{r4, r7, lr}
 800be26:	b08d      	sub	sp, #52	@ 0x34
 800be28:	af02      	add	r7, sp, #8
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800be2e:	2300      	movs	r3, #0
 800be30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2203      	movs	r2, #3
 800be38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be40:	2b03      	cmp	r3, #3
 800be42:	d02e      	beq.n	800bea2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800be4a:	d106      	bne.n	800be5a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be50:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	635a      	str	r2, [r3, #52]	@ 0x34
 800be58:	e029      	b.n	800beae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800be60:	d10a      	bne.n	800be78 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 fb64 	bl	800c530 <SD_WideBus_Enable>
 800be68:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be6e:	6a3b      	ldr	r3, [r7, #32]
 800be70:	431a      	orrs	r2, r3
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	635a      	str	r2, [r3, #52]	@ 0x34
 800be76:	e01a      	b.n	800beae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d10a      	bne.n	800be94 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fba1 	bl	800c5c6 <SD_WideBus_Disable>
 800be84:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be8a:	6a3b      	ldr	r3, [r7, #32]
 800be8c:	431a      	orrs	r2, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	635a      	str	r2, [r3, #52]	@ 0x34
 800be92:	e00c      	b.n	800beae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be98:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	635a      	str	r2, [r3, #52]	@ 0x34
 800bea0:	e005      	b.n	800beae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bea6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d007      	beq.n	800bec6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	4a5f      	ldr	r2, [pc, #380]	@ (800c038 <HAL_SD_ConfigWideBusOperation+0x214>)
 800bebc:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800bebe:	2301      	movs	r3, #1
 800bec0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bec4:	e096      	b.n	800bff4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800bec6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800beca:	f04f 0100 	mov.w	r1, #0
 800bece:	f7fd fdf5 	bl	8009abc <HAL_RCCEx_GetPeriphCLKFreq>
 800bed2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	f000 8083 	beq.w	800bfe2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	691b      	ldr	r3, [r3, #16]
 800bef0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	695a      	ldr	r2, [r3, #20]
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	4950      	ldr	r1, [pc, #320]	@ (800c03c <HAL_SD_ConfigWideBusOperation+0x218>)
 800befa:	fba1 1303 	umull	r1, r3, r1, r3
 800befe:	0e1b      	lsrs	r3, r3, #24
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d303      	bcc.n	800bf0c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	695b      	ldr	r3, [r3, #20]
 800bf08:	61bb      	str	r3, [r7, #24]
 800bf0a:	e05a      	b.n	800bfc2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf14:	d103      	bne.n	800bf1e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	695b      	ldr	r3, [r3, #20]
 800bf1a:	61bb      	str	r3, [r7, #24]
 800bf1c:	e051      	b.n	800bfc2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf26:	d126      	bne.n	800bf76 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	695b      	ldr	r3, [r3, #20]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d10e      	bne.n	800bf4e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	4a43      	ldr	r2, [pc, #268]	@ (800c040 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d906      	bls.n	800bf46 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800bf38:	69fb      	ldr	r3, [r7, #28]
 800bf3a:	4a40      	ldr	r2, [pc, #256]	@ (800c03c <HAL_SD_ConfigWideBusOperation+0x218>)
 800bf3c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf40:	0e5b      	lsrs	r3, r3, #25
 800bf42:	61bb      	str	r3, [r7, #24]
 800bf44:	e03d      	b.n	800bfc2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	695b      	ldr	r3, [r3, #20]
 800bf4a:	61bb      	str	r3, [r7, #24]
 800bf4c:	e039      	b.n	800bfc2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	695b      	ldr	r3, [r3, #20]
 800bf52:	005b      	lsls	r3, r3, #1
 800bf54:	69fa      	ldr	r2, [r7, #28]
 800bf56:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf5a:	4a39      	ldr	r2, [pc, #228]	@ (800c040 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d906      	bls.n	800bf6e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	4a36      	ldr	r2, [pc, #216]	@ (800c03c <HAL_SD_ConfigWideBusOperation+0x218>)
 800bf64:	fba2 2303 	umull	r2, r3, r2, r3
 800bf68:	0e5b      	lsrs	r3, r3, #25
 800bf6a:	61bb      	str	r3, [r7, #24]
 800bf6c:	e029      	b.n	800bfc2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	695b      	ldr	r3, [r3, #20]
 800bf72:	61bb      	str	r3, [r7, #24]
 800bf74:	e025      	b.n	800bfc2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	695b      	ldr	r3, [r3, #20]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d10e      	bne.n	800bf9c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	4a30      	ldr	r2, [pc, #192]	@ (800c044 <HAL_SD_ConfigWideBusOperation+0x220>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d906      	bls.n	800bf94 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800bf86:	69fb      	ldr	r3, [r7, #28]
 800bf88:	4a2c      	ldr	r2, [pc, #176]	@ (800c03c <HAL_SD_ConfigWideBusOperation+0x218>)
 800bf8a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf8e:	0e1b      	lsrs	r3, r3, #24
 800bf90:	61bb      	str	r3, [r7, #24]
 800bf92:	e016      	b.n	800bfc2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	695b      	ldr	r3, [r3, #20]
 800bf98:	61bb      	str	r3, [r7, #24]
 800bf9a:	e012      	b.n	800bfc2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	695b      	ldr	r3, [r3, #20]
 800bfa0:	005b      	lsls	r3, r3, #1
 800bfa2:	69fa      	ldr	r2, [r7, #28]
 800bfa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfa8:	4a26      	ldr	r2, [pc, #152]	@ (800c044 <HAL_SD_ConfigWideBusOperation+0x220>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d906      	bls.n	800bfbc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	4a22      	ldr	r2, [pc, #136]	@ (800c03c <HAL_SD_ConfigWideBusOperation+0x218>)
 800bfb2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfb6:	0e1b      	lsrs	r3, r3, #24
 800bfb8:	61bb      	str	r3, [r7, #24]
 800bfba:	e002      	b.n	800bfc2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	695b      	ldr	r3, [r3, #20]
 800bfc0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681c      	ldr	r4, [r3, #0]
 800bfc6:	466a      	mov	r2, sp
 800bfc8:	f107 0314 	add.w	r3, r7, #20
 800bfcc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bfd0:	e882 0003 	stmia.w	r2, {r0, r1}
 800bfd4:	f107 0308 	add.w	r3, r7, #8
 800bfd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f002 fa32 	bl	800e444 <SDMMC_Init>
 800bfe0:	e008      	b.n	800bff4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfe6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800bfee:	2301      	movs	r3, #1
 800bff0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bffc:	4618      	mov	r0, r3
 800bffe:	f002 faff 	bl	800e600 <SDMMC_CmdBlockLength>
 800c002:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c004:	6a3b      	ldr	r3, [r7, #32]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00c      	beq.n	800c024 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4a0a      	ldr	r2, [pc, #40]	@ (800c038 <HAL_SD_ConfigWideBusOperation+0x214>)
 800c010:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c016:	6a3b      	ldr	r3, [r7, #32]
 800c018:	431a      	orrs	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800c01e:	2301      	movs	r3, #1
 800c020:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2201      	movs	r2, #1
 800c028:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800c02c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c030:	4618      	mov	r0, r3
 800c032:	372c      	adds	r7, #44	@ 0x2c
 800c034:	46bd      	mov	sp, r7
 800c036:	bd90      	pop	{r4, r7, pc}
 800c038:	1fe00fff 	.word	0x1fe00fff
 800c03c:	55e63b89 	.word	0x55e63b89
 800c040:	02faf080 	.word	0x02faf080
 800c044:	017d7840 	.word	0x017d7840

0800c048 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b086      	sub	sp, #24
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c050:	2300      	movs	r3, #0
 800c052:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c054:	f107 030c 	add.w	r3, r7, #12
 800c058:	4619      	mov	r1, r3
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 fa40 	bl	800c4e0 <SD_SendStatus>
 800c060:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d005      	beq.n	800c074 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	431a      	orrs	r2, r3
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	0a5b      	lsrs	r3, r3, #9
 800c078:	f003 030f 	and.w	r3, r3, #15
 800c07c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c07e:	693b      	ldr	r3, [r7, #16]
}
 800c080:	4618      	mov	r0, r3
 800c082:	3718      	adds	r7, #24
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b090      	sub	sp, #64	@ 0x40
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800c090:	2300      	movs	r3, #0
 800c092:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800c094:	f7f9 fa82 	bl	800559c <HAL_GetTick>
 800c098:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f002 fa29 	bl	800e4f6 <SDMMC_GetPowerState>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d102      	bne.n	800c0b0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c0aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800c0ae:	e0b5      	b.n	800c21c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0b4:	2b03      	cmp	r3, #3
 800c0b6:	d02e      	beq.n	800c116 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f002 fc74 	bl	800e9aa <SDMMC_CmdSendCID>
 800c0c2:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d001      	beq.n	800c0ce <SD_InitCard+0x46>
    {
      return errorstate;
 800c0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0cc:	e0a6      	b.n	800c21c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2100      	movs	r1, #0
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f002 fa54 	bl	800e582 <SDMMC_GetResponse>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2104      	movs	r1, #4
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f002 fa4b 	bl	800e582 <SDMMC_GetResponse>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	2108      	movs	r1, #8
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f002 fa42 	bl	800e582 <SDMMC_GetResponse>
 800c0fe:	4602      	mov	r2, r0
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	210c      	movs	r1, #12
 800c10a:	4618      	mov	r0, r3
 800c10c:	f002 fa39 	bl	800e582 <SDMMC_GetResponse>
 800c110:	4602      	mov	r2, r0
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c11a:	2b03      	cmp	r3, #3
 800c11c:	d01d      	beq.n	800c15a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800c11e:	e019      	b.n	800c154 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f107 020a 	add.w	r2, r7, #10
 800c128:	4611      	mov	r1, r2
 800c12a:	4618      	mov	r0, r3
 800c12c:	f002 fc7c 	bl	800ea28 <SDMMC_CmdSetRelAdd>
 800c130:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800c132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c134:	2b00      	cmp	r3, #0
 800c136:	d001      	beq.n	800c13c <SD_InitCard+0xb4>
      {
        return errorstate;
 800c138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c13a:	e06f      	b.n	800c21c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800c13c:	f7f9 fa2e 	bl	800559c <HAL_GetTick>
 800c140:	4602      	mov	r2, r0
 800c142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c144:	1ad3      	subs	r3, r2, r3
 800c146:	f241 3287 	movw	r2, #4999	@ 0x1387
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d902      	bls.n	800c154 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800c14e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c152:	e063      	b.n	800c21c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800c154:	897b      	ldrh	r3, [r7, #10]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d0e2      	beq.n	800c120 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c15e:	2b03      	cmp	r3, #3
 800c160:	d036      	beq.n	800c1d0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c162:	897b      	ldrh	r3, [r7, #10]
 800c164:	461a      	mov	r2, r3
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681a      	ldr	r2, [r3, #0]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c172:	041b      	lsls	r3, r3, #16
 800c174:	4619      	mov	r1, r3
 800c176:	4610      	mov	r0, r2
 800c178:	f002 fc36 	bl	800e9e8 <SDMMC_CmdSendCSD>
 800c17c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c180:	2b00      	cmp	r3, #0
 800c182:	d001      	beq.n	800c188 <SD_InitCard+0x100>
    {
      return errorstate;
 800c184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c186:	e049      	b.n	800c21c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2100      	movs	r1, #0
 800c18e:	4618      	mov	r0, r3
 800c190:	f002 f9f7 	bl	800e582 <SDMMC_GetResponse>
 800c194:	4602      	mov	r2, r0
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	2104      	movs	r1, #4
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f002 f9ee 	bl	800e582 <SDMMC_GetResponse>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2108      	movs	r1, #8
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f002 f9e5 	bl	800e582 <SDMMC_GetResponse>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	210c      	movs	r1, #12
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f002 f9dc 	bl	800e582 <SDMMC_GetResponse>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	2104      	movs	r1, #4
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f002 f9d3 	bl	800e582 <SDMMC_GetResponse>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	0d1a      	lsrs	r2, r3, #20
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c1e4:	f107 030c 	add.w	r3, r7, #12
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f7ff fb8c 	bl	800b908 <HAL_SD_GetCardCSD>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d002      	beq.n	800c1fc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c1f6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c1fa:	e00f      	b.n	800c21c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c204:	041b      	lsls	r3, r3, #16
 800c206:	4619      	mov	r1, r3
 800c208:	4610      	mov	r0, r2
 800c20a:	f002 fae5 	bl	800e7d8 <SDMMC_CmdSelDesel>
 800c20e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800c210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c212:	2b00      	cmp	r3, #0
 800c214:	d001      	beq.n	800c21a <SD_InitCard+0x192>
  {
    return errorstate;
 800c216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c218:	e000      	b.n	800c21c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c21a:	2300      	movs	r3, #0
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3740      	adds	r7, #64	@ 0x40
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b086      	sub	sp, #24
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c22c:	2300      	movs	r3, #0
 800c22e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800c230:	2300      	movs	r3, #0
 800c232:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800c234:	2300      	movs	r3, #0
 800c236:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f002 faee 	bl	800e81e <SDMMC_CmdGoIdleState>
 800c242:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d001      	beq.n	800c24e <SD_PowerON+0x2a>
  {
    return errorstate;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	e072      	b.n	800c334 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	4618      	mov	r0, r3
 800c254:	f002 fb01 	bl	800e85a <SDMMC_CmdOperCond>
 800c258:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c260:	d10d      	bne.n	800c27e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2200      	movs	r2, #0
 800c266:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4618      	mov	r0, r3
 800c26e:	f002 fad6 	bl	800e81e <SDMMC_CmdGoIdleState>
 800c272:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d004      	beq.n	800c284 <SD_PowerON+0x60>
    {
      return errorstate;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	e05a      	b.n	800c334 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2201      	movs	r2, #1
 800c282:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d137      	bne.n	800c2fc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2100      	movs	r1, #0
 800c292:	4618      	mov	r0, r3
 800c294:	f002 fb01 	bl	800e89a <SDMMC_CmdAppCommand>
 800c298:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d02d      	beq.n	800c2fc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c2a0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c2a4:	e046      	b.n	800c334 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2100      	movs	r1, #0
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f002 faf4 	bl	800e89a <SDMMC_CmdAppCommand>
 800c2b2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d001      	beq.n	800c2be <SD_PowerON+0x9a>
    {
      return errorstate;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	e03a      	b.n	800c334 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	491e      	ldr	r1, [pc, #120]	@ (800c33c <SD_PowerON+0x118>)
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f002 fb0b 	bl	800e8e0 <SDMMC_CmdAppOperCommand>
 800c2ca:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d002      	beq.n	800c2d8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c2d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c2d6:	e02d      	b.n	800c334 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2100      	movs	r1, #0
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f002 f94f 	bl	800e582 <SDMMC_GetResponse>
 800c2e4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	0fdb      	lsrs	r3, r3, #31
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d101      	bne.n	800c2f2 <SD_PowerON+0xce>
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	e000      	b.n	800c2f4 <SD_PowerON+0xd0>
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	613b      	str	r3, [r7, #16]

    count++;
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c302:	4293      	cmp	r3, r2
 800c304:	d802      	bhi.n	800c30c <SD_PowerON+0xe8>
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d0cc      	beq.n	800c2a6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c312:	4293      	cmp	r3, r2
 800c314:	d902      	bls.n	800c31c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c316:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c31a:	e00b      	b.n	800c334 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2200      	movs	r2, #0
 800c320:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d002      	beq.n	800c332 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2201      	movs	r2, #1
 800c330:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	3718      	adds	r7, #24
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	c1100000 	.word	0xc1100000

0800c340 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b08c      	sub	sp, #48	@ 0x30
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c34a:	f7f9 f927 	bl	800559c <HAL_GetTick>
 800c34e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2100      	movs	r1, #0
 800c35a:	4618      	mov	r0, r3
 800c35c:	f002 f911 	bl	800e582 <SDMMC_GetResponse>
 800c360:	4603      	mov	r3, r0
 800c362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c366:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c36a:	d102      	bne.n	800c372 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c36c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c370:	e0b0      	b.n	800c4d4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2140      	movs	r1, #64	@ 0x40
 800c378:	4618      	mov	r0, r3
 800c37a:	f002 f941 	bl	800e600 <SDMMC_CmdBlockLength>
 800c37e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c380:	6a3b      	ldr	r3, [r7, #32]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d005      	beq.n	800c392 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800c38e:	6a3b      	ldr	r3, [r7, #32]
 800c390:	e0a0      	b.n	800c4d4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c39a:	041b      	lsls	r3, r3, #16
 800c39c:	4619      	mov	r1, r3
 800c39e:	4610      	mov	r0, r2
 800c3a0:	f002 fa7b 	bl	800e89a <SDMMC_CmdAppCommand>
 800c3a4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c3a6:	6a3b      	ldr	r3, [r7, #32]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d005      	beq.n	800c3b8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800c3b4:	6a3b      	ldr	r3, [r7, #32]
 800c3b6:	e08d      	b.n	800c4d4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c3b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c3bc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800c3be:	2340      	movs	r3, #64	@ 0x40
 800c3c0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800c3c2:	2360      	movs	r3, #96	@ 0x60
 800c3c4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c3c6:	2302      	movs	r3, #2
 800c3c8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f107 0208 	add.w	r2, r7, #8
 800c3da:	4611      	mov	r1, r2
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f002 f8e3 	bl	800e5a8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f002 fb63 	bl	800eab2 <SDMMC_CmdStatusRegister>
 800c3ec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c3ee:	6a3b      	ldr	r3, [r7, #32]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d02b      	beq.n	800c44c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800c3fc:	6a3b      	ldr	r3, [r7, #32]
 800c3fe:	e069      	b.n	800c4d4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c406:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d013      	beq.n	800c436 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800c40e:	2300      	movs	r3, #0
 800c410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c412:	e00d      	b.n	800c430 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4618      	mov	r0, r3
 800c41a:	f002 f83d 	bl	800e498 <SDMMC_ReadFIFO>
 800c41e:	4602      	mov	r2, r0
 800c420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c422:	601a      	str	r2, [r3, #0]
        pData++;
 800c424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c426:	3304      	adds	r3, #4
 800c428:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800c42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c42c:	3301      	adds	r3, #1
 800c42e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c432:	2b07      	cmp	r3, #7
 800c434:	d9ee      	bls.n	800c414 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c436:	f7f9 f8b1 	bl	800559c <HAL_GetTick>
 800c43a:	4602      	mov	r2, r0
 800c43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c43e:	1ad3      	subs	r3, r2, r3
 800c440:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c444:	d102      	bne.n	800c44c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c446:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c44a:	e043      	b.n	800c4d4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c452:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800c456:	2b00      	cmp	r3, #0
 800c458:	d0d2      	beq.n	800c400 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c460:	f003 0308 	and.w	r3, r3, #8
 800c464:	2b00      	cmp	r3, #0
 800c466:	d001      	beq.n	800c46c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c468:	2308      	movs	r3, #8
 800c46a:	e033      	b.n	800c4d4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c472:	f003 0302 	and.w	r3, r3, #2
 800c476:	2b00      	cmp	r3, #0
 800c478:	d001      	beq.n	800c47e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c47a:	2302      	movs	r3, #2
 800c47c:	e02a      	b.n	800c4d4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c484:	f003 0320 	and.w	r3, r3, #32
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d017      	beq.n	800c4bc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800c48c:	2320      	movs	r3, #32
 800c48e:	e021      	b.n	800c4d4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4618      	mov	r0, r3
 800c496:	f001 ffff 	bl	800e498 <SDMMC_ReadFIFO>
 800c49a:	4602      	mov	r2, r0
 800c49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c49e:	601a      	str	r2, [r3, #0]
    pData++;
 800c4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a2:	3304      	adds	r3, #4
 800c4a4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c4a6:	f7f9 f879 	bl	800559c <HAL_GetTick>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ae:	1ad3      	subs	r3, r2, r3
 800c4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4b4:	d102      	bne.n	800c4bc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c4b6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c4ba:	e00b      	b.n	800c4d4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d1e2      	bne.n	800c490 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4a03      	ldr	r2, [pc, #12]	@ (800c4dc <SD_SendSDStatus+0x19c>)
 800c4d0:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800c4d2:	2300      	movs	r3, #0
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3730      	adds	r7, #48	@ 0x30
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	18000f3a 	.word	0x18000f3a

0800c4e0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d102      	bne.n	800c4f6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c4f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c4f4:	e018      	b.n	800c528 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4fe:	041b      	lsls	r3, r3, #16
 800c500:	4619      	mov	r1, r3
 800c502:	4610      	mov	r0, r2
 800c504:	f002 fab2 	bl	800ea6c <SDMMC_CmdSendStatus>
 800c508:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d001      	beq.n	800c514 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	e009      	b.n	800c528 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	2100      	movs	r1, #0
 800c51a:	4618      	mov	r0, r3
 800c51c:	f002 f831 	bl	800e582 <SDMMC_GetResponse>
 800c520:	4602      	mov	r2, r0
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c526:	2300      	movs	r3, #0
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3710      	adds	r7, #16
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800c538:	2300      	movs	r3, #0
 800c53a:	60fb      	str	r3, [r7, #12]
 800c53c:	2300      	movs	r3, #0
 800c53e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2100      	movs	r1, #0
 800c546:	4618      	mov	r0, r3
 800c548:	f002 f81b 	bl	800e582 <SDMMC_GetResponse>
 800c54c:	4603      	mov	r3, r0
 800c54e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c552:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c556:	d102      	bne.n	800c55e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c558:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c55c:	e02f      	b.n	800c5be <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c55e:	f107 030c 	add.w	r3, r7, #12
 800c562:	4619      	mov	r1, r3
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 f879 	bl	800c65c <SD_FindSCR>
 800c56a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d001      	beq.n	800c576 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	e023      	b.n	800c5be <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d01c      	beq.n	800c5ba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681a      	ldr	r2, [r3, #0]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c588:	041b      	lsls	r3, r3, #16
 800c58a:	4619      	mov	r1, r3
 800c58c:	4610      	mov	r0, r2
 800c58e:	f002 f984 	bl	800e89a <SDMMC_CmdAppCommand>
 800c592:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d001      	beq.n	800c59e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	e00f      	b.n	800c5be <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2102      	movs	r1, #2
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f002 f9bb 	bl	800e920 <SDMMC_CmdBusWidth>
 800c5aa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d001      	beq.n	800c5b6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	e003      	b.n	800c5be <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	e001      	b.n	800c5be <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c5ba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3718      	adds	r7, #24
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b086      	sub	sp, #24
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	60fb      	str	r3, [r7, #12]
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2100      	movs	r1, #0
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f001 ffd0 	bl	800e582 <SDMMC_GetResponse>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c5e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c5ec:	d102      	bne.n	800c5f4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c5ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c5f2:	e02f      	b.n	800c654 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c5f4:	f107 030c 	add.w	r3, r7, #12
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 f82e 	bl	800c65c <SD_FindSCR>
 800c600:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d001      	beq.n	800c60c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	e023      	b.n	800c654 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c612:	2b00      	cmp	r3, #0
 800c614:	d01c      	beq.n	800c650 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c61e:	041b      	lsls	r3, r3, #16
 800c620:	4619      	mov	r1, r3
 800c622:	4610      	mov	r0, r2
 800c624:	f002 f939 	bl	800e89a <SDMMC_CmdAppCommand>
 800c628:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d001      	beq.n	800c634 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	e00f      	b.n	800c654 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	2100      	movs	r1, #0
 800c63a:	4618      	mov	r0, r3
 800c63c:	f002 f970 	bl	800e920 <SDMMC_CmdBusWidth>
 800c640:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d001      	beq.n	800c64c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	e003      	b.n	800c654 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c64c:	2300      	movs	r3, #0
 800c64e:	e001      	b.n	800c654 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c650:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800c654:	4618      	mov	r0, r3
 800c656:	3718      	adds	r7, #24
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b08e      	sub	sp, #56	@ 0x38
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c666:	f7f8 ff99 	bl	800559c <HAL_GetTick>
 800c66a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800c66c:	2300      	movs	r3, #0
 800c66e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800c670:	2300      	movs	r3, #0
 800c672:	60bb      	str	r3, [r7, #8]
 800c674:	2300      	movs	r3, #0
 800c676:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2108      	movs	r1, #8
 800c682:	4618      	mov	r0, r3
 800c684:	f001 ffbc 	bl	800e600 <SDMMC_CmdBlockLength>
 800c688:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800c68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d001      	beq.n	800c694 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c692:	e0ad      	b.n	800c7f0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681a      	ldr	r2, [r3, #0]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c69c:	041b      	lsls	r3, r3, #16
 800c69e:	4619      	mov	r1, r3
 800c6a0:	4610      	mov	r0, r2
 800c6a2:	f002 f8fa 	bl	800e89a <SDMMC_CmdAppCommand>
 800c6a6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800c6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d001      	beq.n	800c6b2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800c6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b0:	e09e      	b.n	800c7f0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c6b2:	f04f 33ff 	mov.w	r3, #4294967295
 800c6b6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c6b8:	2308      	movs	r3, #8
 800c6ba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800c6bc:	2330      	movs	r3, #48	@ 0x30
 800c6be:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c6c0:	2302      	movs	r3, #2
 800c6c2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f107 0210 	add.w	r2, r7, #16
 800c6d4:	4611      	mov	r1, r2
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f001 ff66 	bl	800e5a8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f002 f940 	bl	800e966 <SDMMC_CmdSendSCR>
 800c6e6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800c6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d027      	beq.n	800c73e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800c6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f0:	e07e      	b.n	800c7f0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d113      	bne.n	800c728 <SD_FindSCR+0xcc>
 800c700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c702:	2b00      	cmp	r3, #0
 800c704:	d110      	bne.n	800c728 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4618      	mov	r0, r3
 800c70c:	f001 fec4 	bl	800e498 <SDMMC_ReadFIFO>
 800c710:	4603      	mov	r3, r0
 800c712:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4618      	mov	r0, r3
 800c71a:	f001 febd 	bl	800e498 <SDMMC_ReadFIFO>
 800c71e:	4603      	mov	r3, r0
 800c720:	60fb      	str	r3, [r7, #12]
      index++;
 800c722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c724:	3301      	adds	r3, #1
 800c726:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c728:	f7f8 ff38 	bl	800559c <HAL_GetTick>
 800c72c:	4602      	mov	r2, r0
 800c72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c730:	1ad3      	subs	r3, r2, r3
 800c732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c736:	d102      	bne.n	800c73e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c738:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c73c:	e058      	b.n	800c7f0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c744:	f240 532a 	movw	r3, #1322	@ 0x52a
 800c748:	4013      	ands	r3, r2
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d0d1      	beq.n	800c6f2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c754:	f003 0308 	and.w	r3, r3, #8
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d005      	beq.n	800c768 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2208      	movs	r2, #8
 800c762:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c764:	2308      	movs	r3, #8
 800c766:	e043      	b.n	800c7f0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c76e:	f003 0302 	and.w	r3, r3, #2
 800c772:	2b00      	cmp	r3, #0
 800c774:	d005      	beq.n	800c782 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2202      	movs	r2, #2
 800c77c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c77e:	2302      	movs	r3, #2
 800c780:	e036      	b.n	800c7f0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c788:	f003 0320 	and.w	r3, r3, #32
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d005      	beq.n	800c79c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	2220      	movs	r2, #32
 800c796:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c798:	2320      	movs	r3, #32
 800c79a:	e029      	b.n	800c7f0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a15      	ldr	r2, [pc, #84]	@ (800c7f8 <SD_FindSCR+0x19c>)
 800c7a2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	061a      	lsls	r2, r3, #24
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	021b      	lsls	r3, r3, #8
 800c7ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c7b0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	0a1b      	lsrs	r3, r3, #8
 800c7b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800c7ba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	0e1b      	lsrs	r3, r3, #24
 800c7c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800c7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7c4:	601a      	str	r2, [r3, #0]
    scr++;
 800c7c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7c8:	3304      	adds	r3, #4
 800c7ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	061a      	lsls	r2, r3, #24
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	021b      	lsls	r3, r3, #8
 800c7d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c7d8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	0a1b      	lsrs	r3, r3, #8
 800c7de:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800c7e2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	0e1b      	lsrs	r3, r3, #24
 800c7e8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800c7ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ec:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c7ee:	2300      	movs	r3, #0
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3738      	adds	r7, #56	@ 0x38
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	18000f3a 	.word	0x18000f3a

0800c7fc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b086      	sub	sp, #24
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c808:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c80e:	2b1f      	cmp	r3, #31
 800c810:	d936      	bls.n	800c880 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800c812:	2300      	movs	r3, #0
 800c814:	617b      	str	r3, [r7, #20]
 800c816:	e027      	b.n	800c868 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f001 fe3b 	bl	800e498 <SDMMC_ReadFIFO>
 800c822:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	b2da      	uxtb	r2, r3
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	3301      	adds	r3, #1
 800c830:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	0a1b      	lsrs	r3, r3, #8
 800c836:	b2da      	uxtb	r2, r3
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	3301      	adds	r3, #1
 800c840:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	0c1b      	lsrs	r3, r3, #16
 800c846:	b2da      	uxtb	r2, r3
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	3301      	adds	r3, #1
 800c850:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	0e1b      	lsrs	r3, r3, #24
 800c856:	b2da      	uxtb	r2, r3
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	3301      	adds	r3, #1
 800c860:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	3301      	adds	r3, #1
 800c866:	617b      	str	r3, [r7, #20]
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	2b07      	cmp	r3, #7
 800c86c:	d9d4      	bls.n	800c818 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	693a      	ldr	r2, [r7, #16]
 800c872:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c878:	f1a3 0220 	sub.w	r2, r3, #32
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800c880:	bf00      	nop
 800c882:	3718      	adds	r7, #24
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b086      	sub	sp, #24
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	69db      	ldr	r3, [r3, #28]
 800c894:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6a1b      	ldr	r3, [r3, #32]
 800c89a:	2b1f      	cmp	r3, #31
 800c89c:	d93a      	bls.n	800c914 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800c89e:	2300      	movs	r3, #0
 800c8a0:	617b      	str	r3, [r7, #20]
 800c8a2:	e02b      	b.n	800c8fc <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	021a      	lsls	r2, r3, #8
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	60fb      	str	r3, [r7, #12]
      tmp++;
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	041a      	lsls	r2, r3, #16
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	061a      	lsls	r2, r3, #24
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	60fb      	str	r3, [r7, #12]
      tmp++;
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f107 020c 	add.w	r2, r7, #12
 800c8ee:	4611      	mov	r1, r2
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f001 fdde 	bl	800e4b2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	617b      	str	r3, [r7, #20]
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	2b07      	cmp	r3, #7
 800c900:	d9d0      	bls.n	800c8a4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	693a      	ldr	r2, [r7, #16]
 800c906:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6a1b      	ldr	r3, [r3, #32]
 800c90c:	f1a3 0220 	sub.w	r2, r3, #32
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	621a      	str	r2, [r3, #32]
  }
}
 800c914:	bf00      	nop
 800c916:	3718      	adds	r7, #24
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b083      	sub	sp, #12
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800c924:	bf00      	nop
 800c926:	370c      	adds	r7, #12
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800c930:	b480      	push	{r7}
 800c932:	b083      	sub	sp, #12
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800c938:	bf00      	nop
 800c93a:	370c      	adds	r7, #12
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr

0800c944 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800c944:	b480      	push	{r7}
 800c946:	b083      	sub	sp, #12
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800c94c:	bf00      	nop
 800c94e:	370c      	adds	r7, #12
 800c950:	46bd      	mov	sp, r7
 800c952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c956:	4770      	bx	lr

0800c958 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800c958:	b480      	push	{r7}
 800c95a:	b083      	sub	sp, #12
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800c960:	bf00      	nop
 800c962:	370c      	adds	r7, #12
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr

0800c96c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d101      	bne.n	800c97e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c97a:	2301      	movs	r3, #1
 800c97c:	e10f      	b.n	800cb9e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a87      	ldr	r2, [pc, #540]	@ (800cba8 <HAL_SPI_Init+0x23c>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d00f      	beq.n	800c9ae <HAL_SPI_Init+0x42>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a86      	ldr	r2, [pc, #536]	@ (800cbac <HAL_SPI_Init+0x240>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d00a      	beq.n	800c9ae <HAL_SPI_Init+0x42>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a84      	ldr	r2, [pc, #528]	@ (800cbb0 <HAL_SPI_Init+0x244>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d005      	beq.n	800c9ae <HAL_SPI_Init+0x42>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	2b0f      	cmp	r3, #15
 800c9a8:	d901      	bls.n	800c9ae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e0f7      	b.n	800cb9e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 fbc2 	bl	800d138 <SPI_GetPacketSize>
 800c9b4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4a7b      	ldr	r2, [pc, #492]	@ (800cba8 <HAL_SPI_Init+0x23c>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d00c      	beq.n	800c9da <HAL_SPI_Init+0x6e>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a79      	ldr	r2, [pc, #484]	@ (800cbac <HAL_SPI_Init+0x240>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d007      	beq.n	800c9da <HAL_SPI_Init+0x6e>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4a78      	ldr	r2, [pc, #480]	@ (800cbb0 <HAL_SPI_Init+0x244>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d002      	beq.n	800c9da <HAL_SPI_Init+0x6e>
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2b08      	cmp	r3, #8
 800c9d8:	d811      	bhi.n	800c9fe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c9de:	4a72      	ldr	r2, [pc, #456]	@ (800cba8 <HAL_SPI_Init+0x23c>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d009      	beq.n	800c9f8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a70      	ldr	r2, [pc, #448]	@ (800cbac <HAL_SPI_Init+0x240>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d004      	beq.n	800c9f8 <HAL_SPI_Init+0x8c>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4a6f      	ldr	r2, [pc, #444]	@ (800cbb0 <HAL_SPI_Init+0x244>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d104      	bne.n	800ca02 <HAL_SPI_Init+0x96>
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2b10      	cmp	r3, #16
 800c9fc:	d901      	bls.n	800ca02 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e0cd      	b.n	800cb9e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ca08:	b2db      	uxtb	r3, r3
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d106      	bne.n	800ca1c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2200      	movs	r2, #0
 800ca12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 f8cc 	bl	800cbb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2202      	movs	r2, #2
 800ca20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f022 0201 	bic.w	r2, r2, #1
 800ca32:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ca3e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	699b      	ldr	r3, [r3, #24]
 800ca44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ca48:	d119      	bne.n	800ca7e <HAL_SPI_Init+0x112>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ca52:	d103      	bne.n	800ca5c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d008      	beq.n	800ca6e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d10c      	bne.n	800ca7e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ca68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ca6c:	d107      	bne.n	800ca7e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ca7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00f      	beq.n	800caaa <HAL_SPI_Init+0x13e>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	68db      	ldr	r3, [r3, #12]
 800ca8e:	2b06      	cmp	r3, #6
 800ca90:	d90b      	bls.n	800caaa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	430a      	orrs	r2, r1
 800caa6:	601a      	str	r2, [r3, #0]
 800caa8:	e007      	b.n	800caba <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cab8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	69da      	ldr	r2, [r3, #28]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cac2:	431a      	orrs	r2, r3
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	431a      	orrs	r2, r3
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cacc:	ea42 0103 	orr.w	r1, r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	68da      	ldr	r2, [r3, #12]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	430a      	orrs	r2, r1
 800cada:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cae4:	431a      	orrs	r2, r3
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caea:	431a      	orrs	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	699b      	ldr	r3, [r3, #24]
 800caf0:	431a      	orrs	r2, r3
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	691b      	ldr	r3, [r3, #16]
 800caf6:	431a      	orrs	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	695b      	ldr	r3, [r3, #20]
 800cafc:	431a      	orrs	r2, r3
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6a1b      	ldr	r3, [r3, #32]
 800cb02:	431a      	orrs	r2, r3
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	685b      	ldr	r3, [r3, #4]
 800cb08:	431a      	orrs	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb0e:	431a      	orrs	r2, r3
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	689b      	ldr	r3, [r3, #8]
 800cb14:	431a      	orrs	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb1a:	ea42 0103 	orr.w	r1, r2, r3
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	430a      	orrs	r2, r1
 800cb28:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d113      	bne.n	800cb5a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cb44:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	689b      	ldr	r3, [r3, #8]
 800cb4c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cb58:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f022 0201 	bic.w	r2, r2, #1
 800cb68:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d00a      	beq.n	800cb8c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	430a      	orrs	r2, r1
 800cb8a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2201      	movs	r2, #1
 800cb98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800cb9c:	2300      	movs	r3, #0
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3710      	adds	r7, #16
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	40013000 	.word	0x40013000
 800cbac:	40003800 	.word	0x40003800
 800cbb0:	40003c00 	.word	0x40003c00

0800cbb4 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800cbbc:	bf00      	nop
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	607a      	str	r2, [r7, #4]
 800cbd4:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	2b01      	cmp	r3, #1
 800cbe0:	d001      	beq.n	800cbe6 <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 800cbe2:	2302      	movs	r3, #2
 800cbe4:	e18a      	b.n	800cefc <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d005      	beq.n	800cbf8 <HAL_SPI_TransmitReceive_DMA+0x30>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d002      	beq.n	800cbf8 <HAL_SPI_TransmitReceive_DMA+0x30>
 800cbf2:	887b      	ldrh	r3, [r7, #2]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d101      	bne.n	800cbfc <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e17f      	b.n	800cefc <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800cc02:	2b01      	cmp	r3, #1
 800cc04:	d101      	bne.n	800cc0a <HAL_SPI_TransmitReceive_DMA+0x42>
 800cc06:	2302      	movs	r3, #2
 800cc08:	e178      	b.n	800cefc <HAL_SPI_TransmitReceive_DMA+0x334>
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2205      	movs	r2, #5
 800cc16:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	68ba      	ldr	r2, [r7, #8]
 800cc26:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	887a      	ldrh	r2, [r7, #2]
 800cc2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	887a      	ldrh	r2, [r7, #2]
 800cc34:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	887a      	ldrh	r2, [r7, #2]
 800cc42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	887a      	ldrh	r2, [r7, #2]
 800cc4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2200      	movs	r2, #0
 800cc52:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2200      	movs	r2, #0
 800cc58:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	68da      	ldr	r2, [r3, #12]
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800cc68:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	689a      	ldr	r2, [r3, #8]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800cc78:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	2b0f      	cmp	r3, #15
 800cc80:	d905      	bls.n	800cc8e <HAL_SPI_TransmitReceive_DMA+0xc6>
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cc86:	699b      	ldr	r3, [r3, #24]
 800cc88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cc8c:	d10f      	bne.n	800ccae <HAL_SPI_TransmitReceive_DMA+0xe6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800cc92:	2b07      	cmp	r3, #7
 800cc94:	d911      	bls.n	800ccba <HAL_SPI_TransmitReceive_DMA+0xf2>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cc9a:	699b      	ldr	r3, [r3, #24]
 800cc9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cca0:	d00b      	beq.n	800ccba <HAL_SPI_TransmitReceive_DMA+0xf2>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cca6:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800cca8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ccac:	d005      	beq.n	800ccba <HAL_SPI_TransmitReceive_DMA+0xf2>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	e120      	b.n	800cefc <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	2b07      	cmp	r3, #7
 800ccc0:	d840      	bhi.n	800cd44 <HAL_SPI_TransmitReceive_DMA+0x17c>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ccc6:	699b      	ldr	r3, [r3, #24]
 800ccc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cccc:	d109      	bne.n	800cce2 <HAL_SPI_TransmitReceive_DMA+0x11a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	105b      	asrs	r3, r3, #1
 800ccda:	b29a      	uxth	r2, r3
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cce6:	699b      	ldr	r3, [r3, #24]
 800cce8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ccec:	d109      	bne.n	800cd02 <HAL_SPI_TransmitReceive_DMA+0x13a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	3303      	adds	r3, #3
 800ccf8:	109b      	asrs	r3, r3, #2
 800ccfa:	b29a      	uxth	r2, r3
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cd06:	699b      	ldr	r3, [r3, #24]
 800cd08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd0c:	d109      	bne.n	800cd22 <HAL_SPI_TransmitReceive_DMA+0x15a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	3301      	adds	r3, #1
 800cd18:	105b      	asrs	r3, r3, #1
 800cd1a:	b29a      	uxth	r2, r3
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cd26:	699b      	ldr	r3, [r3, #24]
 800cd28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd2c:	d12e      	bne.n	800cd8c <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	3303      	adds	r3, #3
 800cd38:	109b      	asrs	r3, r3, #2
 800cd3a:	b29a      	uxth	r2, r3
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cd42:	e023      	b.n	800cd8c <HAL_SPI_TransmitReceive_DMA+0x1c4>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	2b0f      	cmp	r3, #15
 800cd4a:	d81f      	bhi.n	800cd8c <HAL_SPI_TransmitReceive_DMA+0x1c4>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cd50:	699b      	ldr	r3, [r3, #24]
 800cd52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd56:	d109      	bne.n	800cd6c <HAL_SPI_TransmitReceive_DMA+0x1a4>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	3301      	adds	r3, #1
 800cd62:	105b      	asrs	r3, r3, #1
 800cd64:	b29a      	uxth	r2, r3
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cd70:	699b      	ldr	r3, [r3, #24]
 800cd72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd76:	d109      	bne.n	800cd8c <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd7e:	b29b      	uxth	r3, r3
 800cd80:	3301      	adds	r3, #1
 800cd82:	105b      	asrs	r3, r3, #1
 800cd84:	b29a      	uxth	r2, r3
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cd90:	4a5c      	ldr	r2, [pc, #368]	@ (800cf04 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800cd92:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cd98:	4a5b      	ldr	r2, [pc, #364]	@ (800cf08 <HAL_SPI_TransmitReceive_DMA+0x340>)
 800cd9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cda0:	4a5a      	ldr	r2, [pc, #360]	@ (800cf0c <HAL_SPI_TransmitReceive_DMA+0x344>)
 800cda2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cda8:	2200      	movs	r2, #0
 800cdaa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	3330      	adds	r3, #48	@ 0x30
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdbc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cdc4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800cdc6:	f7f9 f923 	bl	8006010 <HAL_DMA_Start_IT>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d011      	beq.n	800cdf4 <HAL_SPI_TransmitReceive_DMA+0x22c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cdd6:	f043 0210 	orr.w	r2, r3, #16
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2201      	movs	r2, #1
 800cde4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2200      	movs	r2, #0
 800cdec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	e083      	b.n	800cefc <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	689a      	ldr	r2, [r3, #8]
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ce02:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce08:	2200      	movs	r2, #0
 800ce0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce10:	2200      	movs	r2, #0
 800ce12:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce18:	2200      	movs	r2, #0
 800ce1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce20:	4a3a      	ldr	r2, [pc, #232]	@ (800cf0c <HAL_SPI_TransmitReceive_DMA+0x344>)
 800ce22:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	3320      	adds	r3, #32
 800ce34:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ce3c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800ce3e:	f7f9 f8e7 	bl	8006010 <HAL_DMA_Start_IT>
 800ce42:	4603      	mov	r3, r0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d016      	beq.n	800ce76 <HAL_SPI_TransmitReceive_DMA+0x2ae>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7f9 fb49 	bl	80064e4 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce58:	f043 0210 	orr.w	r2, r3, #16
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2201      	movs	r2, #1
 800ce66:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800ce72:	2301      	movs	r3, #1
 800ce74:	e042      	b.n	800cefc <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce7a:	69db      	ldr	r3, [r3, #28]
 800ce7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce80:	d108      	bne.n	800ce94 <HAL_SPI_TransmitReceive_DMA+0x2cc>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	6859      	ldr	r1, [r3, #4]
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	4b20      	ldr	r3, [pc, #128]	@ (800cf10 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800ce8e:	400b      	ands	r3, r1
 800ce90:	6053      	str	r3, [r2, #4]
 800ce92:	e009      	b.n	800cea8 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	685a      	ldr	r2, [r3, #4]
 800ce9a:	4b1d      	ldr	r3, [pc, #116]	@ (800cf10 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800ce9c:	4013      	ands	r3, r2
 800ce9e:	8879      	ldrh	r1, [r7, #2]
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	6812      	ldr	r2, [r2, #0]
 800cea4:	430b      	orrs	r3, r1
 800cea6:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	689a      	ldr	r2, [r3, #8]
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ceb6:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	691a      	ldr	r2, [r3, #16]
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800cec6:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f042 0201 	orr.w	r2, r2, #1
 800ced6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cee0:	d107      	bne.n	800cef2 <HAL_SPI_TransmitReceive_DMA+0x32a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cef0:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2200      	movs	r2, #0
 800cef6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800cefa:	2300      	movs	r3, #0
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3710      	adds	r7, #16
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	0800cf97 	.word	0x0800cf97
 800cf08:	0800cf51 	.word	0x0800cf51
 800cf0c:	0800cfb3 	.word	0x0800cfb3
 800cf10:	ffff0000 	.word	0xffff0000

0800cf14 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800cf1c:	bf00      	nop
 800cf1e:	370c      	adds	r7, #12
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr

0800cf28 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800cf30:	bf00      	nop
 800cf32:	370c      	adds	r7, #12
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b083      	sub	sp, #12
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cf44:	bf00      	nop
 800cf46:	370c      	adds	r7, #12
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf5c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cf64:	b2db      	uxtb	r3, r3
 800cf66:	2b07      	cmp	r3, #7
 800cf68:	d011      	beq.n	800cf8e <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf6e:	69db      	ldr	r3, [r3, #28]
 800cf70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf74:	d103      	bne.n	800cf7e <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800cf76:	68f8      	ldr	r0, [r7, #12]
 800cf78:	f7ff ffcc 	bl	800cf14 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800cf7c:	e007      	b.n	800cf8e <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	691a      	ldr	r2, [r3, #16]
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f042 0208 	orr.w	r2, r2, #8
 800cf8c:	611a      	str	r2, [r3, #16]
}
 800cf8e:	bf00      	nop
 800cf90:	3710      	adds	r7, #16
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cf96:	b580      	push	{r7, lr}
 800cf98:	b084      	sub	sp, #16
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfa2:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800cfa4:	68f8      	ldr	r0, [r7, #12]
 800cfa6:	f7ff ffbf 	bl	800cf28 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cfaa:	bf00      	nop
 800cfac:	3710      	adds	r7, #16
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b084      	sub	sp, #16
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfbe:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f7f9 fdad 	bl	8006b20 <HAL_DMA_GetError>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b02      	cmp	r3, #2
 800cfca:	d011      	beq.n	800cff0 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800cfcc:	68f8      	ldr	r0, [r7, #12]
 800cfce:	f000 f813 	bl	800cff8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cfd8:	f043 0210 	orr.w	r2, r3, #16
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800cfea:	68f8      	ldr	r0, [r7, #12]
 800cfec:	f7ff ffa6 	bl	800cf3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800cff0:	bf00      	nop
 800cff2:	3710      	adds	r7, #16
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b085      	sub	sp, #20
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	695b      	ldr	r3, [r3, #20]
 800d006:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	699a      	ldr	r2, [r3, #24]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f042 0208 	orr.w	r2, r2, #8
 800d016:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	699a      	ldr	r2, [r3, #24]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f042 0210 	orr.w	r2, r2, #16
 800d026:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f022 0201 	bic.w	r2, r2, #1
 800d036:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	6919      	ldr	r1, [r3, #16]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681a      	ldr	r2, [r3, #0]
 800d042:	4b3c      	ldr	r3, [pc, #240]	@ (800d134 <SPI_CloseTransfer+0x13c>)
 800d044:	400b      	ands	r3, r1
 800d046:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	689a      	ldr	r2, [r3, #8]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d056:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d05e:	b2db      	uxtb	r3, r3
 800d060:	2b04      	cmp	r3, #4
 800d062:	d014      	beq.n	800d08e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f003 0320 	and.w	r3, r3, #32
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d00f      	beq.n	800d08e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d074:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	699a      	ldr	r2, [r3, #24]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f042 0220 	orr.w	r2, r2, #32
 800d08c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d094:	b2db      	uxtb	r3, r3
 800d096:	2b03      	cmp	r3, #3
 800d098:	d014      	beq.n	800d0c4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d00f      	beq.n	800d0c4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d0aa:	f043 0204 	orr.w	r2, r3, #4
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	699a      	ldr	r2, [r3, #24]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d0c2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d00f      	beq.n	800d0ee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d0d4:	f043 0201 	orr.w	r2, r3, #1
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	699a      	ldr	r2, [r3, #24]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d0ec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d00f      	beq.n	800d118 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d0fe:	f043 0208 	orr.w	r2, r3, #8
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	699a      	ldr	r2, [r3, #24]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d116:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2200      	movs	r2, #0
 800d124:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d128:	bf00      	nop
 800d12a:	3714      	adds	r7, #20
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr
 800d134:	fffffc90 	.word	0xfffffc90

0800d138 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d138:	b480      	push	{r7}
 800d13a:	b085      	sub	sp, #20
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d144:	095b      	lsrs	r3, r3, #5
 800d146:	3301      	adds	r3, #1
 800d148:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	3301      	adds	r3, #1
 800d150:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	3307      	adds	r3, #7
 800d156:	08db      	lsrs	r3, r3, #3
 800d158:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	fb02 f303 	mul.w	r3, r2, r3
}
 800d162:	4618      	mov	r0, r3
 800d164:	3714      	adds	r7, #20
 800d166:	46bd      	mov	sp, r7
 800d168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16c:	4770      	bx	lr

0800d16e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b082      	sub	sp, #8
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d101      	bne.n	800d180 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d17c:	2301      	movs	r3, #1
 800d17e:	e042      	b.n	800d206 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d186:	2b00      	cmp	r3, #0
 800d188:	d106      	bne.n	800d198 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2200      	movs	r2, #0
 800d18e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f7f7 f8e2 	bl	800435c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2224      	movs	r2, #36	@ 0x24
 800d19c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f022 0201 	bic.w	r2, r2, #1
 800d1ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d002      	beq.n	800d1be <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 fe1f 	bl	800ddfc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 f8b4 	bl	800d32c <UART_SetConfig>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	d101      	bne.n	800d1ce <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	e01b      	b.n	800d206 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	685a      	ldr	r2, [r3, #4]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d1dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	689a      	ldr	r2, [r3, #8]
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d1ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	681a      	ldr	r2, [r3, #0]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f042 0201 	orr.w	r2, r2, #1
 800d1fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 fe9e 	bl	800df40 <UART_CheckIdleState>
 800d204:	4603      	mov	r3, r0
}
 800d206:	4618      	mov	r0, r3
 800d208:	3708      	adds	r7, #8
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d20e:	b580      	push	{r7, lr}
 800d210:	b08a      	sub	sp, #40	@ 0x28
 800d212:	af02      	add	r7, sp, #8
 800d214:	60f8      	str	r0, [r7, #12]
 800d216:	60b9      	str	r1, [r7, #8]
 800d218:	603b      	str	r3, [r7, #0]
 800d21a:	4613      	mov	r3, r2
 800d21c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d224:	2b20      	cmp	r3, #32
 800d226:	d17b      	bne.n	800d320 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d002      	beq.n	800d234 <HAL_UART_Transmit+0x26>
 800d22e:	88fb      	ldrh	r3, [r7, #6]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d101      	bne.n	800d238 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d234:	2301      	movs	r3, #1
 800d236:	e074      	b.n	800d322 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2200      	movs	r2, #0
 800d23c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2221      	movs	r2, #33	@ 0x21
 800d244:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d248:	f7f8 f9a8 	bl	800559c <HAL_GetTick>
 800d24c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	88fa      	ldrh	r2, [r7, #6]
 800d252:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	88fa      	ldrh	r2, [r7, #6]
 800d25a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	689b      	ldr	r3, [r3, #8]
 800d262:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d266:	d108      	bne.n	800d27a <HAL_UART_Transmit+0x6c>
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	691b      	ldr	r3, [r3, #16]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d104      	bne.n	800d27a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d270:	2300      	movs	r3, #0
 800d272:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	61bb      	str	r3, [r7, #24]
 800d278:	e003      	b.n	800d282 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d27e:	2300      	movs	r3, #0
 800d280:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d282:	e030      	b.n	800d2e6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	9300      	str	r3, [sp, #0]
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	2200      	movs	r2, #0
 800d28c:	2180      	movs	r1, #128	@ 0x80
 800d28e:	68f8      	ldr	r0, [r7, #12]
 800d290:	f000 ff00 	bl	800e094 <UART_WaitOnFlagUntilTimeout>
 800d294:	4603      	mov	r3, r0
 800d296:	2b00      	cmp	r3, #0
 800d298:	d005      	beq.n	800d2a6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2220      	movs	r2, #32
 800d29e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d2a2:	2303      	movs	r3, #3
 800d2a4:	e03d      	b.n	800d322 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d10b      	bne.n	800d2c4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d2ac:	69bb      	ldr	r3, [r7, #24]
 800d2ae:	881b      	ldrh	r3, [r3, #0]
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d2ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d2bc:	69bb      	ldr	r3, [r7, #24]
 800d2be:	3302      	adds	r3, #2
 800d2c0:	61bb      	str	r3, [r7, #24]
 800d2c2:	e007      	b.n	800d2d4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d2c4:	69fb      	ldr	r3, [r7, #28]
 800d2c6:	781a      	ldrb	r2, [r3, #0]
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d2ce:	69fb      	ldr	r3, [r7, #28]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	3b01      	subs	r3, #1
 800d2de:	b29a      	uxth	r2, r3
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d1c8      	bne.n	800d284 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	2140      	movs	r1, #64	@ 0x40
 800d2fc:	68f8      	ldr	r0, [r7, #12]
 800d2fe:	f000 fec9 	bl	800e094 <UART_WaitOnFlagUntilTimeout>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d005      	beq.n	800d314 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2220      	movs	r2, #32
 800d30c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d310:	2303      	movs	r3, #3
 800d312:	e006      	b.n	800d322 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2220      	movs	r2, #32
 800d318:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d31c:	2300      	movs	r3, #0
 800d31e:	e000      	b.n	800d322 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d320:	2302      	movs	r3, #2
  }
}
 800d322:	4618      	mov	r0, r3
 800d324:	3720      	adds	r7, #32
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
	...

0800d32c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d32c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d330:	b092      	sub	sp, #72	@ 0x48
 800d332:	af00      	add	r7, sp, #0
 800d334:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d336:	2300      	movs	r3, #0
 800d338:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	689a      	ldr	r2, [r3, #8]
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	691b      	ldr	r3, [r3, #16]
 800d344:	431a      	orrs	r2, r3
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	695b      	ldr	r3, [r3, #20]
 800d34a:	431a      	orrs	r2, r3
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	69db      	ldr	r3, [r3, #28]
 800d350:	4313      	orrs	r3, r2
 800d352:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	4bbe      	ldr	r3, [pc, #760]	@ (800d654 <UART_SetConfig+0x328>)
 800d35c:	4013      	ands	r3, r2
 800d35e:	697a      	ldr	r2, [r7, #20]
 800d360:	6812      	ldr	r2, [r2, #0]
 800d362:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d364:	430b      	orrs	r3, r1
 800d366:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	68da      	ldr	r2, [r3, #12]
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	430a      	orrs	r2, r1
 800d37c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	699b      	ldr	r3, [r3, #24]
 800d382:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4ab3      	ldr	r2, [pc, #716]	@ (800d658 <UART_SetConfig+0x32c>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d004      	beq.n	800d398 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	6a1b      	ldr	r3, [r3, #32]
 800d392:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d394:	4313      	orrs	r3, r2
 800d396:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	689a      	ldr	r2, [r3, #8]
 800d39e:	4baf      	ldr	r3, [pc, #700]	@ (800d65c <UART_SetConfig+0x330>)
 800d3a0:	4013      	ands	r3, r2
 800d3a2:	697a      	ldr	r2, [r7, #20]
 800d3a4:	6812      	ldr	r2, [r2, #0]
 800d3a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d3a8:	430b      	orrs	r3, r1
 800d3aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3b2:	f023 010f 	bic.w	r1, r3, #15
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	430a      	orrs	r2, r1
 800d3c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4aa6      	ldr	r2, [pc, #664]	@ (800d660 <UART_SetConfig+0x334>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d177      	bne.n	800d4bc <UART_SetConfig+0x190>
 800d3cc:	4ba5      	ldr	r3, [pc, #660]	@ (800d664 <UART_SetConfig+0x338>)
 800d3ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d3d4:	2b28      	cmp	r3, #40	@ 0x28
 800d3d6:	d86d      	bhi.n	800d4b4 <UART_SetConfig+0x188>
 800d3d8:	a201      	add	r2, pc, #4	@ (adr r2, 800d3e0 <UART_SetConfig+0xb4>)
 800d3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3de:	bf00      	nop
 800d3e0:	0800d485 	.word	0x0800d485
 800d3e4:	0800d4b5 	.word	0x0800d4b5
 800d3e8:	0800d4b5 	.word	0x0800d4b5
 800d3ec:	0800d4b5 	.word	0x0800d4b5
 800d3f0:	0800d4b5 	.word	0x0800d4b5
 800d3f4:	0800d4b5 	.word	0x0800d4b5
 800d3f8:	0800d4b5 	.word	0x0800d4b5
 800d3fc:	0800d4b5 	.word	0x0800d4b5
 800d400:	0800d48d 	.word	0x0800d48d
 800d404:	0800d4b5 	.word	0x0800d4b5
 800d408:	0800d4b5 	.word	0x0800d4b5
 800d40c:	0800d4b5 	.word	0x0800d4b5
 800d410:	0800d4b5 	.word	0x0800d4b5
 800d414:	0800d4b5 	.word	0x0800d4b5
 800d418:	0800d4b5 	.word	0x0800d4b5
 800d41c:	0800d4b5 	.word	0x0800d4b5
 800d420:	0800d495 	.word	0x0800d495
 800d424:	0800d4b5 	.word	0x0800d4b5
 800d428:	0800d4b5 	.word	0x0800d4b5
 800d42c:	0800d4b5 	.word	0x0800d4b5
 800d430:	0800d4b5 	.word	0x0800d4b5
 800d434:	0800d4b5 	.word	0x0800d4b5
 800d438:	0800d4b5 	.word	0x0800d4b5
 800d43c:	0800d4b5 	.word	0x0800d4b5
 800d440:	0800d49d 	.word	0x0800d49d
 800d444:	0800d4b5 	.word	0x0800d4b5
 800d448:	0800d4b5 	.word	0x0800d4b5
 800d44c:	0800d4b5 	.word	0x0800d4b5
 800d450:	0800d4b5 	.word	0x0800d4b5
 800d454:	0800d4b5 	.word	0x0800d4b5
 800d458:	0800d4b5 	.word	0x0800d4b5
 800d45c:	0800d4b5 	.word	0x0800d4b5
 800d460:	0800d4a5 	.word	0x0800d4a5
 800d464:	0800d4b5 	.word	0x0800d4b5
 800d468:	0800d4b5 	.word	0x0800d4b5
 800d46c:	0800d4b5 	.word	0x0800d4b5
 800d470:	0800d4b5 	.word	0x0800d4b5
 800d474:	0800d4b5 	.word	0x0800d4b5
 800d478:	0800d4b5 	.word	0x0800d4b5
 800d47c:	0800d4b5 	.word	0x0800d4b5
 800d480:	0800d4ad 	.word	0x0800d4ad
 800d484:	2301      	movs	r3, #1
 800d486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d48a:	e222      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d48c:	2304      	movs	r3, #4
 800d48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d492:	e21e      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d494:	2308      	movs	r3, #8
 800d496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d49a:	e21a      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d49c:	2310      	movs	r3, #16
 800d49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4a2:	e216      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d4a4:	2320      	movs	r3, #32
 800d4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4aa:	e212      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d4ac:	2340      	movs	r3, #64	@ 0x40
 800d4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4b2:	e20e      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d4b4:	2380      	movs	r3, #128	@ 0x80
 800d4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4ba:	e20a      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a69      	ldr	r2, [pc, #420]	@ (800d668 <UART_SetConfig+0x33c>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d130      	bne.n	800d528 <UART_SetConfig+0x1fc>
 800d4c6:	4b67      	ldr	r3, [pc, #412]	@ (800d664 <UART_SetConfig+0x338>)
 800d4c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4ca:	f003 0307 	and.w	r3, r3, #7
 800d4ce:	2b05      	cmp	r3, #5
 800d4d0:	d826      	bhi.n	800d520 <UART_SetConfig+0x1f4>
 800d4d2:	a201      	add	r2, pc, #4	@ (adr r2, 800d4d8 <UART_SetConfig+0x1ac>)
 800d4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4d8:	0800d4f1 	.word	0x0800d4f1
 800d4dc:	0800d4f9 	.word	0x0800d4f9
 800d4e0:	0800d501 	.word	0x0800d501
 800d4e4:	0800d509 	.word	0x0800d509
 800d4e8:	0800d511 	.word	0x0800d511
 800d4ec:	0800d519 	.word	0x0800d519
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4f6:	e1ec      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d4f8:	2304      	movs	r3, #4
 800d4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4fe:	e1e8      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d500:	2308      	movs	r3, #8
 800d502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d506:	e1e4      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d508:	2310      	movs	r3, #16
 800d50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d50e:	e1e0      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d510:	2320      	movs	r3, #32
 800d512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d516:	e1dc      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d518:	2340      	movs	r3, #64	@ 0x40
 800d51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d51e:	e1d8      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d520:	2380      	movs	r3, #128	@ 0x80
 800d522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d526:	e1d4      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4a4f      	ldr	r2, [pc, #316]	@ (800d66c <UART_SetConfig+0x340>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d130      	bne.n	800d594 <UART_SetConfig+0x268>
 800d532:	4b4c      	ldr	r3, [pc, #304]	@ (800d664 <UART_SetConfig+0x338>)
 800d534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d536:	f003 0307 	and.w	r3, r3, #7
 800d53a:	2b05      	cmp	r3, #5
 800d53c:	d826      	bhi.n	800d58c <UART_SetConfig+0x260>
 800d53e:	a201      	add	r2, pc, #4	@ (adr r2, 800d544 <UART_SetConfig+0x218>)
 800d540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d544:	0800d55d 	.word	0x0800d55d
 800d548:	0800d565 	.word	0x0800d565
 800d54c:	0800d56d 	.word	0x0800d56d
 800d550:	0800d575 	.word	0x0800d575
 800d554:	0800d57d 	.word	0x0800d57d
 800d558:	0800d585 	.word	0x0800d585
 800d55c:	2300      	movs	r3, #0
 800d55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d562:	e1b6      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d564:	2304      	movs	r3, #4
 800d566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d56a:	e1b2      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d56c:	2308      	movs	r3, #8
 800d56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d572:	e1ae      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d574:	2310      	movs	r3, #16
 800d576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d57a:	e1aa      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d57c:	2320      	movs	r3, #32
 800d57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d582:	e1a6      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d584:	2340      	movs	r3, #64	@ 0x40
 800d586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d58a:	e1a2      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d58c:	2380      	movs	r3, #128	@ 0x80
 800d58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d592:	e19e      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4a35      	ldr	r2, [pc, #212]	@ (800d670 <UART_SetConfig+0x344>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d130      	bne.n	800d600 <UART_SetConfig+0x2d4>
 800d59e:	4b31      	ldr	r3, [pc, #196]	@ (800d664 <UART_SetConfig+0x338>)
 800d5a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5a2:	f003 0307 	and.w	r3, r3, #7
 800d5a6:	2b05      	cmp	r3, #5
 800d5a8:	d826      	bhi.n	800d5f8 <UART_SetConfig+0x2cc>
 800d5aa:	a201      	add	r2, pc, #4	@ (adr r2, 800d5b0 <UART_SetConfig+0x284>)
 800d5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5b0:	0800d5c9 	.word	0x0800d5c9
 800d5b4:	0800d5d1 	.word	0x0800d5d1
 800d5b8:	0800d5d9 	.word	0x0800d5d9
 800d5bc:	0800d5e1 	.word	0x0800d5e1
 800d5c0:	0800d5e9 	.word	0x0800d5e9
 800d5c4:	0800d5f1 	.word	0x0800d5f1
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5ce:	e180      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d5d0:	2304      	movs	r3, #4
 800d5d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5d6:	e17c      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d5d8:	2308      	movs	r3, #8
 800d5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5de:	e178      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d5e0:	2310      	movs	r3, #16
 800d5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5e6:	e174      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d5e8:	2320      	movs	r3, #32
 800d5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5ee:	e170      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d5f0:	2340      	movs	r3, #64	@ 0x40
 800d5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5f6:	e16c      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d5f8:	2380      	movs	r3, #128	@ 0x80
 800d5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5fe:	e168      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4a1b      	ldr	r2, [pc, #108]	@ (800d674 <UART_SetConfig+0x348>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d142      	bne.n	800d690 <UART_SetConfig+0x364>
 800d60a:	4b16      	ldr	r3, [pc, #88]	@ (800d664 <UART_SetConfig+0x338>)
 800d60c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d60e:	f003 0307 	and.w	r3, r3, #7
 800d612:	2b05      	cmp	r3, #5
 800d614:	d838      	bhi.n	800d688 <UART_SetConfig+0x35c>
 800d616:	a201      	add	r2, pc, #4	@ (adr r2, 800d61c <UART_SetConfig+0x2f0>)
 800d618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d61c:	0800d635 	.word	0x0800d635
 800d620:	0800d63d 	.word	0x0800d63d
 800d624:	0800d645 	.word	0x0800d645
 800d628:	0800d64d 	.word	0x0800d64d
 800d62c:	0800d679 	.word	0x0800d679
 800d630:	0800d681 	.word	0x0800d681
 800d634:	2300      	movs	r3, #0
 800d636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d63a:	e14a      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d63c:	2304      	movs	r3, #4
 800d63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d642:	e146      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d644:	2308      	movs	r3, #8
 800d646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d64a:	e142      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d64c:	2310      	movs	r3, #16
 800d64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d652:	e13e      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d654:	cfff69f3 	.word	0xcfff69f3
 800d658:	58000c00 	.word	0x58000c00
 800d65c:	11fff4ff 	.word	0x11fff4ff
 800d660:	40011000 	.word	0x40011000
 800d664:	58024400 	.word	0x58024400
 800d668:	40004400 	.word	0x40004400
 800d66c:	40004800 	.word	0x40004800
 800d670:	40004c00 	.word	0x40004c00
 800d674:	40005000 	.word	0x40005000
 800d678:	2320      	movs	r3, #32
 800d67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d67e:	e128      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d680:	2340      	movs	r3, #64	@ 0x40
 800d682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d686:	e124      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d688:	2380      	movs	r3, #128	@ 0x80
 800d68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d68e:	e120      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4acb      	ldr	r2, [pc, #812]	@ (800d9c4 <UART_SetConfig+0x698>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d176      	bne.n	800d788 <UART_SetConfig+0x45c>
 800d69a:	4bcb      	ldr	r3, [pc, #812]	@ (800d9c8 <UART_SetConfig+0x69c>)
 800d69c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d69e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d6a2:	2b28      	cmp	r3, #40	@ 0x28
 800d6a4:	d86c      	bhi.n	800d780 <UART_SetConfig+0x454>
 800d6a6:	a201      	add	r2, pc, #4	@ (adr r2, 800d6ac <UART_SetConfig+0x380>)
 800d6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6ac:	0800d751 	.word	0x0800d751
 800d6b0:	0800d781 	.word	0x0800d781
 800d6b4:	0800d781 	.word	0x0800d781
 800d6b8:	0800d781 	.word	0x0800d781
 800d6bc:	0800d781 	.word	0x0800d781
 800d6c0:	0800d781 	.word	0x0800d781
 800d6c4:	0800d781 	.word	0x0800d781
 800d6c8:	0800d781 	.word	0x0800d781
 800d6cc:	0800d759 	.word	0x0800d759
 800d6d0:	0800d781 	.word	0x0800d781
 800d6d4:	0800d781 	.word	0x0800d781
 800d6d8:	0800d781 	.word	0x0800d781
 800d6dc:	0800d781 	.word	0x0800d781
 800d6e0:	0800d781 	.word	0x0800d781
 800d6e4:	0800d781 	.word	0x0800d781
 800d6e8:	0800d781 	.word	0x0800d781
 800d6ec:	0800d761 	.word	0x0800d761
 800d6f0:	0800d781 	.word	0x0800d781
 800d6f4:	0800d781 	.word	0x0800d781
 800d6f8:	0800d781 	.word	0x0800d781
 800d6fc:	0800d781 	.word	0x0800d781
 800d700:	0800d781 	.word	0x0800d781
 800d704:	0800d781 	.word	0x0800d781
 800d708:	0800d781 	.word	0x0800d781
 800d70c:	0800d769 	.word	0x0800d769
 800d710:	0800d781 	.word	0x0800d781
 800d714:	0800d781 	.word	0x0800d781
 800d718:	0800d781 	.word	0x0800d781
 800d71c:	0800d781 	.word	0x0800d781
 800d720:	0800d781 	.word	0x0800d781
 800d724:	0800d781 	.word	0x0800d781
 800d728:	0800d781 	.word	0x0800d781
 800d72c:	0800d771 	.word	0x0800d771
 800d730:	0800d781 	.word	0x0800d781
 800d734:	0800d781 	.word	0x0800d781
 800d738:	0800d781 	.word	0x0800d781
 800d73c:	0800d781 	.word	0x0800d781
 800d740:	0800d781 	.word	0x0800d781
 800d744:	0800d781 	.word	0x0800d781
 800d748:	0800d781 	.word	0x0800d781
 800d74c:	0800d779 	.word	0x0800d779
 800d750:	2301      	movs	r3, #1
 800d752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d756:	e0bc      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d758:	2304      	movs	r3, #4
 800d75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d75e:	e0b8      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d760:	2308      	movs	r3, #8
 800d762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d766:	e0b4      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d768:	2310      	movs	r3, #16
 800d76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d76e:	e0b0      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d770:	2320      	movs	r3, #32
 800d772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d776:	e0ac      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d778:	2340      	movs	r3, #64	@ 0x40
 800d77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d77e:	e0a8      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d780:	2380      	movs	r3, #128	@ 0x80
 800d782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d786:	e0a4      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4a8f      	ldr	r2, [pc, #572]	@ (800d9cc <UART_SetConfig+0x6a0>)
 800d78e:	4293      	cmp	r3, r2
 800d790:	d130      	bne.n	800d7f4 <UART_SetConfig+0x4c8>
 800d792:	4b8d      	ldr	r3, [pc, #564]	@ (800d9c8 <UART_SetConfig+0x69c>)
 800d794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d796:	f003 0307 	and.w	r3, r3, #7
 800d79a:	2b05      	cmp	r3, #5
 800d79c:	d826      	bhi.n	800d7ec <UART_SetConfig+0x4c0>
 800d79e:	a201      	add	r2, pc, #4	@ (adr r2, 800d7a4 <UART_SetConfig+0x478>)
 800d7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7a4:	0800d7bd 	.word	0x0800d7bd
 800d7a8:	0800d7c5 	.word	0x0800d7c5
 800d7ac:	0800d7cd 	.word	0x0800d7cd
 800d7b0:	0800d7d5 	.word	0x0800d7d5
 800d7b4:	0800d7dd 	.word	0x0800d7dd
 800d7b8:	0800d7e5 	.word	0x0800d7e5
 800d7bc:	2300      	movs	r3, #0
 800d7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7c2:	e086      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d7c4:	2304      	movs	r3, #4
 800d7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ca:	e082      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d7cc:	2308      	movs	r3, #8
 800d7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7d2:	e07e      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d7d4:	2310      	movs	r3, #16
 800d7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7da:	e07a      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d7dc:	2320      	movs	r3, #32
 800d7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7e2:	e076      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d7e4:	2340      	movs	r3, #64	@ 0x40
 800d7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ea:	e072      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d7ec:	2380      	movs	r3, #128	@ 0x80
 800d7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7f2:	e06e      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a75      	ldr	r2, [pc, #468]	@ (800d9d0 <UART_SetConfig+0x6a4>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d130      	bne.n	800d860 <UART_SetConfig+0x534>
 800d7fe:	4b72      	ldr	r3, [pc, #456]	@ (800d9c8 <UART_SetConfig+0x69c>)
 800d800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d802:	f003 0307 	and.w	r3, r3, #7
 800d806:	2b05      	cmp	r3, #5
 800d808:	d826      	bhi.n	800d858 <UART_SetConfig+0x52c>
 800d80a:	a201      	add	r2, pc, #4	@ (adr r2, 800d810 <UART_SetConfig+0x4e4>)
 800d80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d810:	0800d829 	.word	0x0800d829
 800d814:	0800d831 	.word	0x0800d831
 800d818:	0800d839 	.word	0x0800d839
 800d81c:	0800d841 	.word	0x0800d841
 800d820:	0800d849 	.word	0x0800d849
 800d824:	0800d851 	.word	0x0800d851
 800d828:	2300      	movs	r3, #0
 800d82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d82e:	e050      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d830:	2304      	movs	r3, #4
 800d832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d836:	e04c      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d838:	2308      	movs	r3, #8
 800d83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d83e:	e048      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d840:	2310      	movs	r3, #16
 800d842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d846:	e044      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d848:	2320      	movs	r3, #32
 800d84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d84e:	e040      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d850:	2340      	movs	r3, #64	@ 0x40
 800d852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d856:	e03c      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d858:	2380      	movs	r3, #128	@ 0x80
 800d85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d85e:	e038      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a5b      	ldr	r2, [pc, #364]	@ (800d9d4 <UART_SetConfig+0x6a8>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d130      	bne.n	800d8cc <UART_SetConfig+0x5a0>
 800d86a:	4b57      	ldr	r3, [pc, #348]	@ (800d9c8 <UART_SetConfig+0x69c>)
 800d86c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d86e:	f003 0307 	and.w	r3, r3, #7
 800d872:	2b05      	cmp	r3, #5
 800d874:	d826      	bhi.n	800d8c4 <UART_SetConfig+0x598>
 800d876:	a201      	add	r2, pc, #4	@ (adr r2, 800d87c <UART_SetConfig+0x550>)
 800d878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d87c:	0800d895 	.word	0x0800d895
 800d880:	0800d89d 	.word	0x0800d89d
 800d884:	0800d8a5 	.word	0x0800d8a5
 800d888:	0800d8ad 	.word	0x0800d8ad
 800d88c:	0800d8b5 	.word	0x0800d8b5
 800d890:	0800d8bd 	.word	0x0800d8bd
 800d894:	2302      	movs	r3, #2
 800d896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d89a:	e01a      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d89c:	2304      	movs	r3, #4
 800d89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8a2:	e016      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d8a4:	2308      	movs	r3, #8
 800d8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8aa:	e012      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d8ac:	2310      	movs	r3, #16
 800d8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8b2:	e00e      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d8b4:	2320      	movs	r3, #32
 800d8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ba:	e00a      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d8bc:	2340      	movs	r3, #64	@ 0x40
 800d8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8c2:	e006      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d8c4:	2380      	movs	r3, #128	@ 0x80
 800d8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ca:	e002      	b.n	800d8d2 <UART_SetConfig+0x5a6>
 800d8cc:	2380      	movs	r3, #128	@ 0x80
 800d8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4a3f      	ldr	r2, [pc, #252]	@ (800d9d4 <UART_SetConfig+0x6a8>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	f040 80f8 	bne.w	800dace <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d8de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d8e2:	2b20      	cmp	r3, #32
 800d8e4:	dc46      	bgt.n	800d974 <UART_SetConfig+0x648>
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	f2c0 8082 	blt.w	800d9f0 <UART_SetConfig+0x6c4>
 800d8ec:	3b02      	subs	r3, #2
 800d8ee:	2b1e      	cmp	r3, #30
 800d8f0:	d87e      	bhi.n	800d9f0 <UART_SetConfig+0x6c4>
 800d8f2:	a201      	add	r2, pc, #4	@ (adr r2, 800d8f8 <UART_SetConfig+0x5cc>)
 800d8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f8:	0800d97b 	.word	0x0800d97b
 800d8fc:	0800d9f1 	.word	0x0800d9f1
 800d900:	0800d983 	.word	0x0800d983
 800d904:	0800d9f1 	.word	0x0800d9f1
 800d908:	0800d9f1 	.word	0x0800d9f1
 800d90c:	0800d9f1 	.word	0x0800d9f1
 800d910:	0800d993 	.word	0x0800d993
 800d914:	0800d9f1 	.word	0x0800d9f1
 800d918:	0800d9f1 	.word	0x0800d9f1
 800d91c:	0800d9f1 	.word	0x0800d9f1
 800d920:	0800d9f1 	.word	0x0800d9f1
 800d924:	0800d9f1 	.word	0x0800d9f1
 800d928:	0800d9f1 	.word	0x0800d9f1
 800d92c:	0800d9f1 	.word	0x0800d9f1
 800d930:	0800d9a3 	.word	0x0800d9a3
 800d934:	0800d9f1 	.word	0x0800d9f1
 800d938:	0800d9f1 	.word	0x0800d9f1
 800d93c:	0800d9f1 	.word	0x0800d9f1
 800d940:	0800d9f1 	.word	0x0800d9f1
 800d944:	0800d9f1 	.word	0x0800d9f1
 800d948:	0800d9f1 	.word	0x0800d9f1
 800d94c:	0800d9f1 	.word	0x0800d9f1
 800d950:	0800d9f1 	.word	0x0800d9f1
 800d954:	0800d9f1 	.word	0x0800d9f1
 800d958:	0800d9f1 	.word	0x0800d9f1
 800d95c:	0800d9f1 	.word	0x0800d9f1
 800d960:	0800d9f1 	.word	0x0800d9f1
 800d964:	0800d9f1 	.word	0x0800d9f1
 800d968:	0800d9f1 	.word	0x0800d9f1
 800d96c:	0800d9f1 	.word	0x0800d9f1
 800d970:	0800d9e3 	.word	0x0800d9e3
 800d974:	2b40      	cmp	r3, #64	@ 0x40
 800d976:	d037      	beq.n	800d9e8 <UART_SetConfig+0x6bc>
 800d978:	e03a      	b.n	800d9f0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d97a:	f7fc fe1f 	bl	800a5bc <HAL_RCCEx_GetD3PCLK1Freq>
 800d97e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d980:	e03c      	b.n	800d9fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d986:	4618      	mov	r0, r3
 800d988:	f7fc fe2e 	bl	800a5e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d98e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d990:	e034      	b.n	800d9fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d992:	f107 0318 	add.w	r3, r7, #24
 800d996:	4618      	mov	r0, r3
 800d998:	f7fc ff7a 	bl	800a890 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d99c:	69fb      	ldr	r3, [r7, #28]
 800d99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9a0:	e02c      	b.n	800d9fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d9a2:	4b09      	ldr	r3, [pc, #36]	@ (800d9c8 <UART_SetConfig+0x69c>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f003 0320 	and.w	r3, r3, #32
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d016      	beq.n	800d9dc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d9ae:	4b06      	ldr	r3, [pc, #24]	@ (800d9c8 <UART_SetConfig+0x69c>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	08db      	lsrs	r3, r3, #3
 800d9b4:	f003 0303 	and.w	r3, r3, #3
 800d9b8:	4a07      	ldr	r2, [pc, #28]	@ (800d9d8 <UART_SetConfig+0x6ac>)
 800d9ba:	fa22 f303 	lsr.w	r3, r2, r3
 800d9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d9c0:	e01c      	b.n	800d9fc <UART_SetConfig+0x6d0>
 800d9c2:	bf00      	nop
 800d9c4:	40011400 	.word	0x40011400
 800d9c8:	58024400 	.word	0x58024400
 800d9cc:	40007800 	.word	0x40007800
 800d9d0:	40007c00 	.word	0x40007c00
 800d9d4:	58000c00 	.word	0x58000c00
 800d9d8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d9dc:	4b9d      	ldr	r3, [pc, #628]	@ (800dc54 <UART_SetConfig+0x928>)
 800d9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9e0:	e00c      	b.n	800d9fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d9e2:	4b9d      	ldr	r3, [pc, #628]	@ (800dc58 <UART_SetConfig+0x92c>)
 800d9e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9e6:	e009      	b.n	800d9fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d9e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d9ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9ee:	e005      	b.n	800d9fc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d9fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d9fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f000 81de 	beq.w	800ddc0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da08:	4a94      	ldr	r2, [pc, #592]	@ (800dc5c <UART_SetConfig+0x930>)
 800da0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da0e:	461a      	mov	r2, r3
 800da10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da12:	fbb3 f3f2 	udiv	r3, r3, r2
 800da16:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	685a      	ldr	r2, [r3, #4]
 800da1c:	4613      	mov	r3, r2
 800da1e:	005b      	lsls	r3, r3, #1
 800da20:	4413      	add	r3, r2
 800da22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da24:	429a      	cmp	r2, r3
 800da26:	d305      	bcc.n	800da34 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800da2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da30:	429a      	cmp	r2, r3
 800da32:	d903      	bls.n	800da3c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800da34:	2301      	movs	r3, #1
 800da36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800da3a:	e1c1      	b.n	800ddc0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da3e:	2200      	movs	r2, #0
 800da40:	60bb      	str	r3, [r7, #8]
 800da42:	60fa      	str	r2, [r7, #12]
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da48:	4a84      	ldr	r2, [pc, #528]	@ (800dc5c <UART_SetConfig+0x930>)
 800da4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da4e:	b29b      	uxth	r3, r3
 800da50:	2200      	movs	r2, #0
 800da52:	603b      	str	r3, [r7, #0]
 800da54:	607a      	str	r2, [r7, #4]
 800da56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800da5e:	f7f2 fe5b 	bl	8000718 <__aeabi_uldivmod>
 800da62:	4602      	mov	r2, r0
 800da64:	460b      	mov	r3, r1
 800da66:	4610      	mov	r0, r2
 800da68:	4619      	mov	r1, r3
 800da6a:	f04f 0200 	mov.w	r2, #0
 800da6e:	f04f 0300 	mov.w	r3, #0
 800da72:	020b      	lsls	r3, r1, #8
 800da74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800da78:	0202      	lsls	r2, r0, #8
 800da7a:	6979      	ldr	r1, [r7, #20]
 800da7c:	6849      	ldr	r1, [r1, #4]
 800da7e:	0849      	lsrs	r1, r1, #1
 800da80:	2000      	movs	r0, #0
 800da82:	460c      	mov	r4, r1
 800da84:	4605      	mov	r5, r0
 800da86:	eb12 0804 	adds.w	r8, r2, r4
 800da8a:	eb43 0905 	adc.w	r9, r3, r5
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	2200      	movs	r2, #0
 800da94:	469a      	mov	sl, r3
 800da96:	4693      	mov	fp, r2
 800da98:	4652      	mov	r2, sl
 800da9a:	465b      	mov	r3, fp
 800da9c:	4640      	mov	r0, r8
 800da9e:	4649      	mov	r1, r9
 800daa0:	f7f2 fe3a 	bl	8000718 <__aeabi_uldivmod>
 800daa4:	4602      	mov	r2, r0
 800daa6:	460b      	mov	r3, r1
 800daa8:	4613      	mov	r3, r2
 800daaa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800daac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dab2:	d308      	bcc.n	800dac6 <UART_SetConfig+0x79a>
 800dab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800daba:	d204      	bcs.n	800dac6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dac2:	60da      	str	r2, [r3, #12]
 800dac4:	e17c      	b.n	800ddc0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800dac6:	2301      	movs	r3, #1
 800dac8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dacc:	e178      	b.n	800ddc0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	69db      	ldr	r3, [r3, #28]
 800dad2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dad6:	f040 80c5 	bne.w	800dc64 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800dada:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dade:	2b20      	cmp	r3, #32
 800dae0:	dc48      	bgt.n	800db74 <UART_SetConfig+0x848>
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	db7b      	blt.n	800dbde <UART_SetConfig+0x8b2>
 800dae6:	2b20      	cmp	r3, #32
 800dae8:	d879      	bhi.n	800dbde <UART_SetConfig+0x8b2>
 800daea:	a201      	add	r2, pc, #4	@ (adr r2, 800daf0 <UART_SetConfig+0x7c4>)
 800daec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daf0:	0800db7b 	.word	0x0800db7b
 800daf4:	0800db83 	.word	0x0800db83
 800daf8:	0800dbdf 	.word	0x0800dbdf
 800dafc:	0800dbdf 	.word	0x0800dbdf
 800db00:	0800db8b 	.word	0x0800db8b
 800db04:	0800dbdf 	.word	0x0800dbdf
 800db08:	0800dbdf 	.word	0x0800dbdf
 800db0c:	0800dbdf 	.word	0x0800dbdf
 800db10:	0800db9b 	.word	0x0800db9b
 800db14:	0800dbdf 	.word	0x0800dbdf
 800db18:	0800dbdf 	.word	0x0800dbdf
 800db1c:	0800dbdf 	.word	0x0800dbdf
 800db20:	0800dbdf 	.word	0x0800dbdf
 800db24:	0800dbdf 	.word	0x0800dbdf
 800db28:	0800dbdf 	.word	0x0800dbdf
 800db2c:	0800dbdf 	.word	0x0800dbdf
 800db30:	0800dbab 	.word	0x0800dbab
 800db34:	0800dbdf 	.word	0x0800dbdf
 800db38:	0800dbdf 	.word	0x0800dbdf
 800db3c:	0800dbdf 	.word	0x0800dbdf
 800db40:	0800dbdf 	.word	0x0800dbdf
 800db44:	0800dbdf 	.word	0x0800dbdf
 800db48:	0800dbdf 	.word	0x0800dbdf
 800db4c:	0800dbdf 	.word	0x0800dbdf
 800db50:	0800dbdf 	.word	0x0800dbdf
 800db54:	0800dbdf 	.word	0x0800dbdf
 800db58:	0800dbdf 	.word	0x0800dbdf
 800db5c:	0800dbdf 	.word	0x0800dbdf
 800db60:	0800dbdf 	.word	0x0800dbdf
 800db64:	0800dbdf 	.word	0x0800dbdf
 800db68:	0800dbdf 	.word	0x0800dbdf
 800db6c:	0800dbdf 	.word	0x0800dbdf
 800db70:	0800dbd1 	.word	0x0800dbd1
 800db74:	2b40      	cmp	r3, #64	@ 0x40
 800db76:	d02e      	beq.n	800dbd6 <UART_SetConfig+0x8aa>
 800db78:	e031      	b.n	800dbde <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db7a:	f7fa fd69 	bl	8008650 <HAL_RCC_GetPCLK1Freq>
 800db7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800db80:	e033      	b.n	800dbea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db82:	f7fa fd7b 	bl	800867c <HAL_RCC_GetPCLK2Freq>
 800db86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800db88:	e02f      	b.n	800dbea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800db8e:	4618      	mov	r0, r3
 800db90:	f7fc fd2a 	bl	800a5e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db98:	e027      	b.n	800dbea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db9a:	f107 0318 	add.w	r3, r7, #24
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7fc fe76 	bl	800a890 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dba4:	69fb      	ldr	r3, [r7, #28]
 800dba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dba8:	e01f      	b.n	800dbea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dbaa:	4b2d      	ldr	r3, [pc, #180]	@ (800dc60 <UART_SetConfig+0x934>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f003 0320 	and.w	r3, r3, #32
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d009      	beq.n	800dbca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dbb6:	4b2a      	ldr	r3, [pc, #168]	@ (800dc60 <UART_SetConfig+0x934>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	08db      	lsrs	r3, r3, #3
 800dbbc:	f003 0303 	and.w	r3, r3, #3
 800dbc0:	4a24      	ldr	r2, [pc, #144]	@ (800dc54 <UART_SetConfig+0x928>)
 800dbc2:	fa22 f303 	lsr.w	r3, r2, r3
 800dbc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dbc8:	e00f      	b.n	800dbea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dbca:	4b22      	ldr	r3, [pc, #136]	@ (800dc54 <UART_SetConfig+0x928>)
 800dbcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbce:	e00c      	b.n	800dbea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dbd0:	4b21      	ldr	r3, [pc, #132]	@ (800dc58 <UART_SetConfig+0x92c>)
 800dbd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbd4:	e009      	b.n	800dbea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dbd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dbda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbdc:	e005      	b.n	800dbea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dbe8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dbea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	f000 80e7 	beq.w	800ddc0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbf6:	4a19      	ldr	r2, [pc, #100]	@ (800dc5c <UART_SetConfig+0x930>)
 800dbf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc00:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc04:	005a      	lsls	r2, r3, #1
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	085b      	lsrs	r3, r3, #1
 800dc0c:	441a      	add	r2, r3
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc16:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc1a:	2b0f      	cmp	r3, #15
 800dc1c:	d916      	bls.n	800dc4c <UART_SetConfig+0x920>
 800dc1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc24:	d212      	bcs.n	800dc4c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dc26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	f023 030f 	bic.w	r3, r3, #15
 800dc2e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dc30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc32:	085b      	lsrs	r3, r3, #1
 800dc34:	b29b      	uxth	r3, r3
 800dc36:	f003 0307 	and.w	r3, r3, #7
 800dc3a:	b29a      	uxth	r2, r3
 800dc3c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800dc48:	60da      	str	r2, [r3, #12]
 800dc4a:	e0b9      	b.n	800ddc0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dc52:	e0b5      	b.n	800ddc0 <UART_SetConfig+0xa94>
 800dc54:	03d09000 	.word	0x03d09000
 800dc58:	003d0900 	.word	0x003d0900
 800dc5c:	08013428 	.word	0x08013428
 800dc60:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800dc64:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dc68:	2b20      	cmp	r3, #32
 800dc6a:	dc49      	bgt.n	800dd00 <UART_SetConfig+0x9d4>
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	db7c      	blt.n	800dd6a <UART_SetConfig+0xa3e>
 800dc70:	2b20      	cmp	r3, #32
 800dc72:	d87a      	bhi.n	800dd6a <UART_SetConfig+0xa3e>
 800dc74:	a201      	add	r2, pc, #4	@ (adr r2, 800dc7c <UART_SetConfig+0x950>)
 800dc76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc7a:	bf00      	nop
 800dc7c:	0800dd07 	.word	0x0800dd07
 800dc80:	0800dd0f 	.word	0x0800dd0f
 800dc84:	0800dd6b 	.word	0x0800dd6b
 800dc88:	0800dd6b 	.word	0x0800dd6b
 800dc8c:	0800dd17 	.word	0x0800dd17
 800dc90:	0800dd6b 	.word	0x0800dd6b
 800dc94:	0800dd6b 	.word	0x0800dd6b
 800dc98:	0800dd6b 	.word	0x0800dd6b
 800dc9c:	0800dd27 	.word	0x0800dd27
 800dca0:	0800dd6b 	.word	0x0800dd6b
 800dca4:	0800dd6b 	.word	0x0800dd6b
 800dca8:	0800dd6b 	.word	0x0800dd6b
 800dcac:	0800dd6b 	.word	0x0800dd6b
 800dcb0:	0800dd6b 	.word	0x0800dd6b
 800dcb4:	0800dd6b 	.word	0x0800dd6b
 800dcb8:	0800dd6b 	.word	0x0800dd6b
 800dcbc:	0800dd37 	.word	0x0800dd37
 800dcc0:	0800dd6b 	.word	0x0800dd6b
 800dcc4:	0800dd6b 	.word	0x0800dd6b
 800dcc8:	0800dd6b 	.word	0x0800dd6b
 800dccc:	0800dd6b 	.word	0x0800dd6b
 800dcd0:	0800dd6b 	.word	0x0800dd6b
 800dcd4:	0800dd6b 	.word	0x0800dd6b
 800dcd8:	0800dd6b 	.word	0x0800dd6b
 800dcdc:	0800dd6b 	.word	0x0800dd6b
 800dce0:	0800dd6b 	.word	0x0800dd6b
 800dce4:	0800dd6b 	.word	0x0800dd6b
 800dce8:	0800dd6b 	.word	0x0800dd6b
 800dcec:	0800dd6b 	.word	0x0800dd6b
 800dcf0:	0800dd6b 	.word	0x0800dd6b
 800dcf4:	0800dd6b 	.word	0x0800dd6b
 800dcf8:	0800dd6b 	.word	0x0800dd6b
 800dcfc:	0800dd5d 	.word	0x0800dd5d
 800dd00:	2b40      	cmp	r3, #64	@ 0x40
 800dd02:	d02e      	beq.n	800dd62 <UART_SetConfig+0xa36>
 800dd04:	e031      	b.n	800dd6a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd06:	f7fa fca3 	bl	8008650 <HAL_RCC_GetPCLK1Freq>
 800dd0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dd0c:	e033      	b.n	800dd76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd0e:	f7fa fcb5 	bl	800867c <HAL_RCC_GetPCLK2Freq>
 800dd12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dd14:	e02f      	b.n	800dd76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7fc fc64 	bl	800a5e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dd20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd24:	e027      	b.n	800dd76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd26:	f107 0318 	add.w	r3, r7, #24
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f7fc fdb0 	bl	800a890 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd34:	e01f      	b.n	800dd76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd36:	4b2d      	ldr	r3, [pc, #180]	@ (800ddec <UART_SetConfig+0xac0>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f003 0320 	and.w	r3, r3, #32
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d009      	beq.n	800dd56 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd42:	4b2a      	ldr	r3, [pc, #168]	@ (800ddec <UART_SetConfig+0xac0>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	08db      	lsrs	r3, r3, #3
 800dd48:	f003 0303 	and.w	r3, r3, #3
 800dd4c:	4a28      	ldr	r2, [pc, #160]	@ (800ddf0 <UART_SetConfig+0xac4>)
 800dd4e:	fa22 f303 	lsr.w	r3, r2, r3
 800dd52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd54:	e00f      	b.n	800dd76 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800dd56:	4b26      	ldr	r3, [pc, #152]	@ (800ddf0 <UART_SetConfig+0xac4>)
 800dd58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd5a:	e00c      	b.n	800dd76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd5c:	4b25      	ldr	r3, [pc, #148]	@ (800ddf4 <UART_SetConfig+0xac8>)
 800dd5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd60:	e009      	b.n	800dd76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dd66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd68:	e005      	b.n	800dd76 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dd6e:	2301      	movs	r3, #1
 800dd70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dd74:	bf00      	nop
    }

    if (pclk != 0U)
 800dd76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d021      	beq.n	800ddc0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd80:	4a1d      	ldr	r2, [pc, #116]	@ (800ddf8 <UART_SetConfig+0xacc>)
 800dd82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd86:	461a      	mov	r2, r3
 800dd88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd8a:	fbb3 f2f2 	udiv	r2, r3, r2
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	685b      	ldr	r3, [r3, #4]
 800dd92:	085b      	lsrs	r3, r3, #1
 800dd94:	441a      	add	r2, r3
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dda0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dda2:	2b0f      	cmp	r3, #15
 800dda4:	d909      	bls.n	800ddba <UART_SetConfig+0xa8e>
 800dda6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dda8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ddac:	d205      	bcs.n	800ddba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ddae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddb0:	b29a      	uxth	r2, r3
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	60da      	str	r2, [r3, #12]
 800ddb8:	e002      	b.n	800ddc0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ddba:	2301      	movs	r3, #1
 800ddbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800dddc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3748      	adds	r7, #72	@ 0x48
 800dde4:	46bd      	mov	sp, r7
 800dde6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ddea:	bf00      	nop
 800ddec:	58024400 	.word	0x58024400
 800ddf0:	03d09000 	.word	0x03d09000
 800ddf4:	003d0900 	.word	0x003d0900
 800ddf8:	08013428 	.word	0x08013428

0800ddfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b083      	sub	sp, #12
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de08:	f003 0308 	and.w	r3, r3, #8
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d00a      	beq.n	800de26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	430a      	orrs	r2, r1
 800de24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de2a:	f003 0301 	and.w	r3, r3, #1
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d00a      	beq.n	800de48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	685b      	ldr	r3, [r3, #4]
 800de38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	430a      	orrs	r2, r1
 800de46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de4c:	f003 0302 	and.w	r3, r3, #2
 800de50:	2b00      	cmp	r3, #0
 800de52:	d00a      	beq.n	800de6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	430a      	orrs	r2, r1
 800de68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de6e:	f003 0304 	and.w	r3, r3, #4
 800de72:	2b00      	cmp	r3, #0
 800de74:	d00a      	beq.n	800de8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	685b      	ldr	r3, [r3, #4]
 800de7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	430a      	orrs	r2, r1
 800de8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de90:	f003 0310 	and.w	r3, r3, #16
 800de94:	2b00      	cmp	r3, #0
 800de96:	d00a      	beq.n	800deae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	689b      	ldr	r3, [r3, #8]
 800de9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	430a      	orrs	r2, r1
 800deac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800deb2:	f003 0320 	and.w	r3, r3, #32
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d00a      	beq.n	800ded0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	430a      	orrs	r2, r1
 800dece:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ded4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d01a      	beq.n	800df12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	430a      	orrs	r2, r1
 800def0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800def6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800defa:	d10a      	bne.n	800df12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	430a      	orrs	r2, r1
 800df10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d00a      	beq.n	800df34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	430a      	orrs	r2, r1
 800df32:	605a      	str	r2, [r3, #4]
  }
}
 800df34:	bf00      	nop
 800df36:	370c      	adds	r7, #12
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr

0800df40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b098      	sub	sp, #96	@ 0x60
 800df44:	af02      	add	r7, sp, #8
 800df46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800df50:	f7f7 fb24 	bl	800559c <HAL_GetTick>
 800df54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f003 0308 	and.w	r3, r3, #8
 800df60:	2b08      	cmp	r3, #8
 800df62:	d12f      	bne.n	800dfc4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800df64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800df68:	9300      	str	r3, [sp, #0]
 800df6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df6c:	2200      	movs	r2, #0
 800df6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f000 f88e 	bl	800e094 <UART_WaitOnFlagUntilTimeout>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d022      	beq.n	800dfc4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df86:	e853 3f00 	ldrex	r3, [r3]
 800df8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800df8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df92:	653b      	str	r3, [r7, #80]	@ 0x50
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	461a      	mov	r2, r3
 800df9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800df9e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfa0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dfa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dfa4:	e841 2300 	strex	r3, r2, [r1]
 800dfa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dfaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d1e6      	bne.n	800df7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2220      	movs	r2, #32
 800dfb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dfc0:	2303      	movs	r3, #3
 800dfc2:	e063      	b.n	800e08c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f003 0304 	and.w	r3, r3, #4
 800dfce:	2b04      	cmp	r3, #4
 800dfd0:	d149      	bne.n	800e066 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dfd2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dfd6:	9300      	str	r3, [sp, #0]
 800dfd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dfda:	2200      	movs	r2, #0
 800dfdc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f000 f857 	bl	800e094 <UART_WaitOnFlagUntilTimeout>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d03c      	beq.n	800e066 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dff4:	e853 3f00 	ldrex	r3, [r3]
 800dff8:	623b      	str	r3, [r7, #32]
   return(result);
 800dffa:	6a3b      	ldr	r3, [r7, #32]
 800dffc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e000:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	461a      	mov	r2, r3
 800e008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e00a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e00c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e00e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e010:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e012:	e841 2300 	strex	r3, r2, [r1]
 800e016:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d1e6      	bne.n	800dfec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	3308      	adds	r3, #8
 800e024:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	e853 3f00 	ldrex	r3, [r3]
 800e02c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f023 0301 	bic.w	r3, r3, #1
 800e034:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	3308      	adds	r3, #8
 800e03c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e03e:	61fa      	str	r2, [r7, #28]
 800e040:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e042:	69b9      	ldr	r1, [r7, #24]
 800e044:	69fa      	ldr	r2, [r7, #28]
 800e046:	e841 2300 	strex	r3, r2, [r1]
 800e04a:	617b      	str	r3, [r7, #20]
   return(result);
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d1e5      	bne.n	800e01e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2220      	movs	r2, #32
 800e056:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2200      	movs	r2, #0
 800e05e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e062:	2303      	movs	r3, #3
 800e064:	e012      	b.n	800e08c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2220      	movs	r2, #32
 800e06a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2220      	movs	r2, #32
 800e072:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2200      	movs	r2, #0
 800e07a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2200      	movs	r2, #0
 800e086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e08a:	2300      	movs	r3, #0
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3758      	adds	r7, #88	@ 0x58
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
 800e09a:	60f8      	str	r0, [r7, #12]
 800e09c:	60b9      	str	r1, [r7, #8]
 800e09e:	603b      	str	r3, [r7, #0]
 800e0a0:	4613      	mov	r3, r2
 800e0a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e0a4:	e04f      	b.n	800e146 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e0a6:	69bb      	ldr	r3, [r7, #24]
 800e0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ac:	d04b      	beq.n	800e146 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e0ae:	f7f7 fa75 	bl	800559c <HAL_GetTick>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	1ad3      	subs	r3, r2, r3
 800e0b8:	69ba      	ldr	r2, [r7, #24]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d302      	bcc.n	800e0c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d101      	bne.n	800e0c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e0c4:	2303      	movs	r3, #3
 800e0c6:	e04e      	b.n	800e166 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f003 0304 	and.w	r3, r3, #4
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d037      	beq.n	800e146 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	2b80      	cmp	r3, #128	@ 0x80
 800e0da:	d034      	beq.n	800e146 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	2b40      	cmp	r3, #64	@ 0x40
 800e0e0:	d031      	beq.n	800e146 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	69db      	ldr	r3, [r3, #28]
 800e0e8:	f003 0308 	and.w	r3, r3, #8
 800e0ec:	2b08      	cmp	r3, #8
 800e0ee:	d110      	bne.n	800e112 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	2208      	movs	r2, #8
 800e0f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e0f8:	68f8      	ldr	r0, [r7, #12]
 800e0fa:	f000 f839 	bl	800e170 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2208      	movs	r2, #8
 800e102:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2200      	movs	r2, #0
 800e10a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e10e:	2301      	movs	r3, #1
 800e110:	e029      	b.n	800e166 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	69db      	ldr	r3, [r3, #28]
 800e118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e11c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e120:	d111      	bne.n	800e146 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e12a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e12c:	68f8      	ldr	r0, [r7, #12]
 800e12e:	f000 f81f 	bl	800e170 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2220      	movs	r2, #32
 800e136:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2200      	movs	r2, #0
 800e13e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e142:	2303      	movs	r3, #3
 800e144:	e00f      	b.n	800e166 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	69da      	ldr	r2, [r3, #28]
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	4013      	ands	r3, r2
 800e150:	68ba      	ldr	r2, [r7, #8]
 800e152:	429a      	cmp	r2, r3
 800e154:	bf0c      	ite	eq
 800e156:	2301      	moveq	r3, #1
 800e158:	2300      	movne	r3, #0
 800e15a:	b2db      	uxtb	r3, r3
 800e15c:	461a      	mov	r2, r3
 800e15e:	79fb      	ldrb	r3, [r7, #7]
 800e160:	429a      	cmp	r2, r3
 800e162:	d0a0      	beq.n	800e0a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e164:	2300      	movs	r3, #0
}
 800e166:	4618      	mov	r0, r3
 800e168:	3710      	adds	r7, #16
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}
	...

0800e170 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e170:	b480      	push	{r7}
 800e172:	b095      	sub	sp, #84	@ 0x54
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e17e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e180:	e853 3f00 	ldrex	r3, [r3]
 800e184:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e188:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e18c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	461a      	mov	r2, r3
 800e194:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e196:	643b      	str	r3, [r7, #64]	@ 0x40
 800e198:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e19a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e19c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e19e:	e841 2300 	strex	r3, r2, [r1]
 800e1a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d1e6      	bne.n	800e178 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	3308      	adds	r3, #8
 800e1b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1b2:	6a3b      	ldr	r3, [r7, #32]
 800e1b4:	e853 3f00 	ldrex	r3, [r3]
 800e1b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e1ba:	69fa      	ldr	r2, [r7, #28]
 800e1bc:	4b1e      	ldr	r3, [pc, #120]	@ (800e238 <UART_EndRxTransfer+0xc8>)
 800e1be:	4013      	ands	r3, r2
 800e1c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	3308      	adds	r3, #8
 800e1c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e1ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e1cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e1d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1d2:	e841 2300 	strex	r3, r2, [r1]
 800e1d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d1e5      	bne.n	800e1aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d118      	bne.n	800e218 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	e853 3f00 	ldrex	r3, [r3]
 800e1f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	f023 0310 	bic.w	r3, r3, #16
 800e1fa:	647b      	str	r3, [r7, #68]	@ 0x44
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	461a      	mov	r2, r3
 800e202:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e204:	61bb      	str	r3, [r7, #24]
 800e206:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e208:	6979      	ldr	r1, [r7, #20]
 800e20a:	69ba      	ldr	r2, [r7, #24]
 800e20c:	e841 2300 	strex	r3, r2, [r1]
 800e210:	613b      	str	r3, [r7, #16]
   return(result);
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d1e6      	bne.n	800e1e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2220      	movs	r2, #32
 800e21c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2200      	movs	r2, #0
 800e224:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2200      	movs	r2, #0
 800e22a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e22c:	bf00      	nop
 800e22e:	3754      	adds	r7, #84	@ 0x54
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr
 800e238:	effffffe 	.word	0xeffffffe

0800e23c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b085      	sub	sp, #20
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e24a:	2b01      	cmp	r3, #1
 800e24c:	d101      	bne.n	800e252 <HAL_UARTEx_DisableFifoMode+0x16>
 800e24e:	2302      	movs	r3, #2
 800e250:	e027      	b.n	800e2a2 <HAL_UARTEx_DisableFifoMode+0x66>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2201      	movs	r2, #1
 800e256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2224      	movs	r2, #36	@ 0x24
 800e25e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	681a      	ldr	r2, [r3, #0]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f022 0201 	bic.w	r2, r2, #1
 800e278:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e280:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2200      	movs	r2, #0
 800e286:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	68fa      	ldr	r2, [r7, #12]
 800e28e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2220      	movs	r2, #32
 800e294:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2200      	movs	r2, #0
 800e29c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e2a0:	2300      	movs	r3, #0
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3714      	adds	r7, #20
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ac:	4770      	bx	lr

0800e2ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e2ae:	b580      	push	{r7, lr}
 800e2b0:	b084      	sub	sp, #16
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	6078      	str	r0, [r7, #4]
 800e2b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e2be:	2b01      	cmp	r3, #1
 800e2c0:	d101      	bne.n	800e2c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e2c2:	2302      	movs	r3, #2
 800e2c4:	e02d      	b.n	800e322 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2224      	movs	r2, #36	@ 0x24
 800e2d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	681a      	ldr	r2, [r3, #0]
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	f022 0201 	bic.w	r2, r2, #1
 800e2ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	689b      	ldr	r3, [r3, #8]
 800e2f4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	683a      	ldr	r2, [r7, #0]
 800e2fe:	430a      	orrs	r2, r1
 800e300:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 f850 	bl	800e3a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	68fa      	ldr	r2, [r7, #12]
 800e30e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2220      	movs	r2, #32
 800e314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2200      	movs	r2, #0
 800e31c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e320:	2300      	movs	r3, #0
}
 800e322:	4618      	mov	r0, r3
 800e324:	3710      	adds	r7, #16
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}

0800e32a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e32a:	b580      	push	{r7, lr}
 800e32c:	b084      	sub	sp, #16
 800e32e:	af00      	add	r7, sp, #0
 800e330:	6078      	str	r0, [r7, #4]
 800e332:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d101      	bne.n	800e342 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e33e:	2302      	movs	r3, #2
 800e340:	e02d      	b.n	800e39e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2201      	movs	r2, #1
 800e346:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2224      	movs	r2, #36	@ 0x24
 800e34e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f022 0201 	bic.w	r2, r2, #1
 800e368:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	689b      	ldr	r3, [r3, #8]
 800e370:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	683a      	ldr	r2, [r7, #0]
 800e37a:	430a      	orrs	r2, r1
 800e37c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f000 f812 	bl	800e3a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	68fa      	ldr	r2, [r7, #12]
 800e38a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2220      	movs	r2, #32
 800e390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e39c:	2300      	movs	r3, #0
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3710      	adds	r7, #16
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}
	...

0800e3a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b085      	sub	sp, #20
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d108      	bne.n	800e3ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e3c8:	e031      	b.n	800e42e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e3ca:	2310      	movs	r3, #16
 800e3cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e3ce:	2310      	movs	r3, #16
 800e3d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	689b      	ldr	r3, [r3, #8]
 800e3d8:	0e5b      	lsrs	r3, r3, #25
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	f003 0307 	and.w	r3, r3, #7
 800e3e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	689b      	ldr	r3, [r3, #8]
 800e3e8:	0f5b      	lsrs	r3, r3, #29
 800e3ea:	b2db      	uxtb	r3, r3
 800e3ec:	f003 0307 	and.w	r3, r3, #7
 800e3f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e3f2:	7bbb      	ldrb	r3, [r7, #14]
 800e3f4:	7b3a      	ldrb	r2, [r7, #12]
 800e3f6:	4911      	ldr	r1, [pc, #68]	@ (800e43c <UARTEx_SetNbDataToProcess+0x94>)
 800e3f8:	5c8a      	ldrb	r2, [r1, r2]
 800e3fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e3fe:	7b3a      	ldrb	r2, [r7, #12]
 800e400:	490f      	ldr	r1, [pc, #60]	@ (800e440 <UARTEx_SetNbDataToProcess+0x98>)
 800e402:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e404:	fb93 f3f2 	sdiv	r3, r3, r2
 800e408:	b29a      	uxth	r2, r3
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e410:	7bfb      	ldrb	r3, [r7, #15]
 800e412:	7b7a      	ldrb	r2, [r7, #13]
 800e414:	4909      	ldr	r1, [pc, #36]	@ (800e43c <UARTEx_SetNbDataToProcess+0x94>)
 800e416:	5c8a      	ldrb	r2, [r1, r2]
 800e418:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e41c:	7b7a      	ldrb	r2, [r7, #13]
 800e41e:	4908      	ldr	r1, [pc, #32]	@ (800e440 <UARTEx_SetNbDataToProcess+0x98>)
 800e420:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e422:	fb93 f3f2 	sdiv	r3, r3, r2
 800e426:	b29a      	uxth	r2, r3
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e42e:	bf00      	nop
 800e430:	3714      	adds	r7, #20
 800e432:	46bd      	mov	sp, r7
 800e434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e438:	4770      	bx	lr
 800e43a:	bf00      	nop
 800e43c:	08013440 	.word	0x08013440
 800e440:	08013448 	.word	0x08013448

0800e444 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e444:	b084      	sub	sp, #16
 800e446:	b480      	push	{r7}
 800e448:	b085      	sub	sp, #20
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	6078      	str	r0, [r7, #4]
 800e44e:	f107 001c 	add.w	r0, r7, #28
 800e452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e456:	2300      	movs	r3, #0
 800e458:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800e45a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800e45c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800e45e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800e460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800e462:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800e464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800e466:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800e46a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800e46c:	68fa      	ldr	r2, [r7, #12]
 800e46e:	4313      	orrs	r3, r2
 800e470:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	685a      	ldr	r2, [r3, #4]
 800e476:	4b07      	ldr	r3, [pc, #28]	@ (800e494 <SDMMC_Init+0x50>)
 800e478:	4013      	ands	r3, r2
 800e47a:	68fa      	ldr	r2, [r7, #12]
 800e47c:	431a      	orrs	r2, r3
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e482:	2300      	movs	r3, #0
}
 800e484:	4618      	mov	r0, r3
 800e486:	3714      	adds	r7, #20
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	b004      	add	sp, #16
 800e490:	4770      	bx	lr
 800e492:	bf00      	nop
 800e494:	ffc02c00 	.word	0xffc02c00

0800e498 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e498:	b480      	push	{r7}
 800e49a:	b083      	sub	sp, #12
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	370c      	adds	r7, #12
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b0:	4770      	bx	lr

0800e4b2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800e4b2:	b480      	push	{r7}
 800e4b4:	b083      	sub	sp, #12
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]
 800e4ba:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	681a      	ldr	r2, [r3, #0]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800e4c6:	2300      	movs	r3, #0
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	370c      	adds	r7, #12
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr

0800e4d4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f043 0203 	orr.w	r2, r3, #3
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e4e8:	2300      	movs	r3, #0
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	370c      	adds	r7, #12
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr

0800e4f6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800e4f6:	b480      	push	{r7}
 800e4f8:	b083      	sub	sp, #12
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f003 0303 	and.w	r3, r3, #3
}
 800e506:	4618      	mov	r0, r3
 800e508:	370c      	adds	r7, #12
 800e50a:	46bd      	mov	sp, r7
 800e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e510:	4770      	bx	lr
	...

0800e514 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e514:	b480      	push	{r7}
 800e516:	b085      	sub	sp, #20
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e51e:	2300      	movs	r3, #0
 800e520:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	681a      	ldr	r2, [r3, #0]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e532:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800e538:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800e53e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e540:	68fa      	ldr	r2, [r7, #12]
 800e542:	4313      	orrs	r3, r2
 800e544:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	68da      	ldr	r2, [r3, #12]
 800e54a:	4b06      	ldr	r3, [pc, #24]	@ (800e564 <SDMMC_SendCommand+0x50>)
 800e54c:	4013      	ands	r3, r2
 800e54e:	68fa      	ldr	r2, [r7, #12]
 800e550:	431a      	orrs	r2, r3
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e556:	2300      	movs	r3, #0
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3714      	adds	r7, #20
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr
 800e564:	fffee0c0 	.word	0xfffee0c0

0800e568 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e568:	b480      	push	{r7}
 800e56a:	b083      	sub	sp, #12
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	691b      	ldr	r3, [r3, #16]
 800e574:	b2db      	uxtb	r3, r3
}
 800e576:	4618      	mov	r0, r3
 800e578:	370c      	adds	r7, #12
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr

0800e582 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e582:	b480      	push	{r7}
 800e584:	b085      	sub	sp, #20
 800e586:	af00      	add	r7, sp, #0
 800e588:	6078      	str	r0, [r7, #4]
 800e58a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	3314      	adds	r3, #20
 800e590:	461a      	mov	r2, r3
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	4413      	add	r3, r2
 800e596:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3714      	adds	r7, #20
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr

0800e5a8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b085      	sub	sp, #20
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	681a      	ldr	r2, [r3, #0]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	685a      	ldr	r2, [r3, #4]
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e5ce:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800e5d4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800e5da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e5dc:	68fa      	ldr	r2, [r7, #12]
 800e5de:	4313      	orrs	r3, r2
 800e5e0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5e6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	431a      	orrs	r2, r3
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e5f2:	2300      	movs	r3, #0

}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3714      	adds	r7, #20
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr

0800e600 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b088      	sub	sp, #32
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e60e:	2310      	movs	r3, #16
 800e610:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e612:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e616:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e618:	2300      	movs	r3, #0
 800e61a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e61c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e620:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e622:	f107 0308 	add.w	r3, r7, #8
 800e626:	4619      	mov	r1, r3
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f7ff ff73 	bl	800e514 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e62e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e632:	2110      	movs	r1, #16
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f000 fa5f 	bl	800eaf8 <SDMMC_GetCmdResp1>
 800e63a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e63c:	69fb      	ldr	r3, [r7, #28]
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3720      	adds	r7, #32
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}

0800e646 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e646:	b580      	push	{r7, lr}
 800e648:	b088      	sub	sp, #32
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	6078      	str	r0, [r7, #4]
 800e64e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e654:	2311      	movs	r3, #17
 800e656:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e658:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e65c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e65e:	2300      	movs	r3, #0
 800e660:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e662:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e666:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e668:	f107 0308 	add.w	r3, r7, #8
 800e66c:	4619      	mov	r1, r3
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f7ff ff50 	bl	800e514 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e674:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e678:	2111      	movs	r1, #17
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f000 fa3c 	bl	800eaf8 <SDMMC_GetCmdResp1>
 800e680:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e682:	69fb      	ldr	r3, [r7, #28]
}
 800e684:	4618      	mov	r0, r3
 800e686:	3720      	adds	r7, #32
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b088      	sub	sp, #32
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e69a:	2312      	movs	r3, #18
 800e69c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e69e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e6a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e6ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6ae:	f107 0308 	add.w	r3, r7, #8
 800e6b2:	4619      	mov	r1, r3
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f7ff ff2d 	bl	800e514 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e6ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e6be:	2112      	movs	r1, #18
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f000 fa19 	bl	800eaf8 <SDMMC_GetCmdResp1>
 800e6c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6c8:	69fb      	ldr	r3, [r7, #28]
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3720      	adds	r7, #32
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}

0800e6d2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e6d2:	b580      	push	{r7, lr}
 800e6d4:	b088      	sub	sp, #32
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	6078      	str	r0, [r7, #4]
 800e6da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e6e0:	2318      	movs	r3, #24
 800e6e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e6e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e6f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6f4:	f107 0308 	add.w	r3, r7, #8
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f7ff ff0a 	bl	800e514 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e700:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e704:	2118      	movs	r1, #24
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 f9f6 	bl	800eaf8 <SDMMC_GetCmdResp1>
 800e70c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e70e:	69fb      	ldr	r3, [r7, #28]
}
 800e710:	4618      	mov	r0, r3
 800e712:	3720      	adds	r7, #32
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b088      	sub	sp, #32
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e726:	2319      	movs	r3, #25
 800e728:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e72a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e72e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e730:	2300      	movs	r3, #0
 800e732:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e734:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e738:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e73a:	f107 0308 	add.w	r3, r7, #8
 800e73e:	4619      	mov	r1, r3
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f7ff fee7 	bl	800e514 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e74a:	2119      	movs	r1, #25
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f000 f9d3 	bl	800eaf8 <SDMMC_GetCmdResp1>
 800e752:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e754:	69fb      	ldr	r3, [r7, #28]
}
 800e756:	4618      	mov	r0, r3
 800e758:	3720      	adds	r7, #32
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
	...

0800e760 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b088      	sub	sp, #32
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e768:	2300      	movs	r3, #0
 800e76a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e76c:	230c      	movs	r3, #12
 800e76e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e770:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e774:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e776:	2300      	movs	r3, #0
 800e778:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e77a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e77e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	68db      	ldr	r3, [r3, #12]
 800e784:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	68db      	ldr	r3, [r3, #12]
 800e790:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e798:	f107 0308 	add.w	r3, r7, #8
 800e79c:	4619      	mov	r1, r3
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f7ff feb8 	bl	800e514 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e7a4:	4a0b      	ldr	r2, [pc, #44]	@ (800e7d4 <SDMMC_CmdStopTransfer+0x74>)
 800e7a6:	210c      	movs	r1, #12
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 f9a5 	bl	800eaf8 <SDMMC_GetCmdResp1>
 800e7ae:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	68db      	ldr	r3, [r3, #12]
 800e7b4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e7bc:	69fb      	ldr	r3, [r7, #28]
 800e7be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e7c2:	d101      	bne.n	800e7c8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800e7c8:	69fb      	ldr	r3, [r7, #28]
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3720      	adds	r7, #32
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	05f5e100 	.word	0x05f5e100

0800e7d8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b088      	sub	sp, #32
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e7e6:	2307      	movs	r3, #7
 800e7e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e7ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e7ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e7f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e7f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e7fa:	f107 0308 	add.w	r3, r7, #8
 800e7fe:	4619      	mov	r1, r3
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f7ff fe87 	bl	800e514 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e80a:	2107      	movs	r1, #7
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f000 f973 	bl	800eaf8 <SDMMC_GetCmdResp1>
 800e812:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e814:	69fb      	ldr	r3, [r7, #28]
}
 800e816:	4618      	mov	r0, r3
 800e818:	3720      	adds	r7, #32
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}

0800e81e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e81e:	b580      	push	{r7, lr}
 800e820:	b088      	sub	sp, #32
 800e822:	af00      	add	r7, sp, #0
 800e824:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e826:	2300      	movs	r3, #0
 800e828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e82a:	2300      	movs	r3, #0
 800e82c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e82e:	2300      	movs	r3, #0
 800e830:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e832:	2300      	movs	r3, #0
 800e834:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e836:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e83a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e83c:	f107 0308 	add.w	r3, r7, #8
 800e840:	4619      	mov	r1, r3
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f7ff fe66 	bl	800e514 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f000 fb97 	bl	800ef7c <SDMMC_GetCmdError>
 800e84e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e850:	69fb      	ldr	r3, [r7, #28]
}
 800e852:	4618      	mov	r0, r3
 800e854:	3720      	adds	r7, #32
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}

0800e85a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b088      	sub	sp, #32
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e862:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800e866:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e868:	2308      	movs	r3, #8
 800e86a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e86c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e870:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e872:	2300      	movs	r3, #0
 800e874:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e876:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e87a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e87c:	f107 0308 	add.w	r3, r7, #8
 800e880:	4619      	mov	r1, r3
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f7ff fe46 	bl	800e514 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f000 fb29 	bl	800eee0 <SDMMC_GetCmdResp7>
 800e88e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e890:	69fb      	ldr	r3, [r7, #28]
}
 800e892:	4618      	mov	r0, r3
 800e894:	3720      	adds	r7, #32
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}

0800e89a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e89a:	b580      	push	{r7, lr}
 800e89c:	b088      	sub	sp, #32
 800e89e:	af00      	add	r7, sp, #0
 800e8a0:	6078      	str	r0, [r7, #4]
 800e8a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e8a8:	2337      	movs	r3, #55	@ 0x37
 800e8aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e8ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e8b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e8b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e8ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e8bc:	f107 0308 	add.w	r3, r7, #8
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f7ff fe26 	bl	800e514 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e8c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e8cc:	2137      	movs	r1, #55	@ 0x37
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f000 f912 	bl	800eaf8 <SDMMC_GetCmdResp1>
 800e8d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8d6:	69fb      	ldr	r3, [r7, #28]
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3720      	adds	r7, #32
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b088      	sub	sp, #32
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e8ee:	2329      	movs	r3, #41	@ 0x29
 800e8f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e8f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e8f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e8fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e900:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e902:	f107 0308 	add.w	r3, r7, #8
 800e906:	4619      	mov	r1, r3
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f7ff fe03 	bl	800e514 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f000 fa2e 	bl	800ed70 <SDMMC_GetCmdResp3>
 800e914:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e916:	69fb      	ldr	r3, [r7, #28]
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3720      	adds	r7, #32
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b088      	sub	sp, #32
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e92e:	2306      	movs	r3, #6
 800e930:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e932:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e936:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e938:	2300      	movs	r3, #0
 800e93a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e93c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e940:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e942:	f107 0308 	add.w	r3, r7, #8
 800e946:	4619      	mov	r1, r3
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f7ff fde3 	bl	800e514 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e94e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e952:	2106      	movs	r1, #6
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f000 f8cf 	bl	800eaf8 <SDMMC_GetCmdResp1>
 800e95a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e95c:	69fb      	ldr	r3, [r7, #28]
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3720      	adds	r7, #32
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}

0800e966 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e966:	b580      	push	{r7, lr}
 800e968:	b088      	sub	sp, #32
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e96e:	2300      	movs	r3, #0
 800e970:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e972:	2333      	movs	r3, #51	@ 0x33
 800e974:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e976:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e97a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e97c:	2300      	movs	r3, #0
 800e97e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e980:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e984:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e986:	f107 0308 	add.w	r3, r7, #8
 800e98a:	4619      	mov	r1, r3
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f7ff fdc1 	bl	800e514 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e992:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e996:	2133      	movs	r1, #51	@ 0x33
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f000 f8ad 	bl	800eaf8 <SDMMC_GetCmdResp1>
 800e99e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9a0:	69fb      	ldr	r3, [r7, #28]
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3720      	adds	r7, #32
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}

0800e9aa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e9aa:	b580      	push	{r7, lr}
 800e9ac:	b088      	sub	sp, #32
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e9b6:	2302      	movs	r3, #2
 800e9b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e9ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e9be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e9c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e9c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e9ca:	f107 0308 	add.w	r3, r7, #8
 800e9ce:	4619      	mov	r1, r3
 800e9d0:	6878      	ldr	r0, [r7, #4]
 800e9d2:	f7ff fd9f 	bl	800e514 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f000 f980 	bl	800ecdc <SDMMC_GetCmdResp2>
 800e9dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9de:	69fb      	ldr	r3, [r7, #28]
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3720      	adds	r7, #32
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b088      	sub	sp, #32
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e9f6:	2309      	movs	r3, #9
 800e9f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e9fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e9fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea00:	2300      	movs	r3, #0
 800ea02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ea08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea0a:	f107 0308 	add.w	r3, r7, #8
 800ea0e:	4619      	mov	r1, r3
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	f7ff fd7f 	bl	800e514 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f000 f960 	bl	800ecdc <SDMMC_GetCmdResp2>
 800ea1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea1e:	69fb      	ldr	r3, [r7, #28]
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3720      	adds	r7, #32
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}

0800ea28 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b088      	sub	sp, #32
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ea32:	2300      	movs	r3, #0
 800ea34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ea36:	2303      	movs	r3, #3
 800ea38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ea3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ea3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea40:	2300      	movs	r3, #0
 800ea42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ea48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea4a:	f107 0308 	add.w	r3, r7, #8
 800ea4e:	4619      	mov	r1, r3
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f7ff fd5f 	bl	800e514 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ea56:	683a      	ldr	r2, [r7, #0]
 800ea58:	2103      	movs	r1, #3
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f000 f9c8 	bl	800edf0 <SDMMC_GetCmdResp6>
 800ea60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea62:	69fb      	ldr	r3, [r7, #28]
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3720      	adds	r7, #32
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b088      	sub	sp, #32
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ea7a:	230d      	movs	r3, #13
 800ea7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ea7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ea82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea84:	2300      	movs	r3, #0
 800ea86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ea8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea8e:	f107 0308 	add.w	r3, r7, #8
 800ea92:	4619      	mov	r1, r3
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f7ff fd3d 	bl	800e514 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ea9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ea9e:	210d      	movs	r1, #13
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f000 f829 	bl	800eaf8 <SDMMC_GetCmdResp1>
 800eaa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eaa8:	69fb      	ldr	r3, [r7, #28]
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3720      	adds	r7, #32
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}

0800eab2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800eab2:	b580      	push	{r7, lr}
 800eab4:	b088      	sub	sp, #32
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800eaba:	2300      	movs	r3, #0
 800eabc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800eabe:	230d      	movs	r3, #13
 800eac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eac2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eac8:	2300      	movs	r3, #0
 800eaca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eacc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ead0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ead2:	f107 0308 	add.w	r3, r7, #8
 800ead6:	4619      	mov	r1, r3
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f7ff fd1b 	bl	800e514 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800eade:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eae2:	210d      	movs	r1, #13
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f000 f807 	bl	800eaf8 <SDMMC_GetCmdResp1>
 800eaea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eaec:	69fb      	ldr	r3, [r7, #28]
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3720      	adds	r7, #32
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
	...

0800eaf8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b088      	sub	sp, #32
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	460b      	mov	r3, r1
 800eb02:	607a      	str	r2, [r7, #4]
 800eb04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800eb06:	4b70      	ldr	r3, [pc, #448]	@ (800ecc8 <SDMMC_GetCmdResp1+0x1d0>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	4a70      	ldr	r2, [pc, #448]	@ (800eccc <SDMMC_GetCmdResp1+0x1d4>)
 800eb0c:	fba2 2303 	umull	r2, r3, r2, r3
 800eb10:	0a5a      	lsrs	r2, r3, #9
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	fb02 f303 	mul.w	r3, r2, r3
 800eb18:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800eb1a:	69fb      	ldr	r3, [r7, #28]
 800eb1c:	1e5a      	subs	r2, r3, #1
 800eb1e:	61fa      	str	r2, [r7, #28]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d102      	bne.n	800eb2a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800eb28:	e0c9      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb2e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800eb30:	69ba      	ldr	r2, [r7, #24]
 800eb32:	4b67      	ldr	r3, [pc, #412]	@ (800ecd0 <SDMMC_GetCmdResp1+0x1d8>)
 800eb34:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d0ef      	beq.n	800eb1a <SDMMC_GetCmdResp1+0x22>
 800eb3a:	69bb      	ldr	r3, [r7, #24]
 800eb3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d1ea      	bne.n	800eb1a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb48:	f003 0304 	and.w	r3, r3, #4
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d004      	beq.n	800eb5a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	2204      	movs	r2, #4
 800eb54:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eb56:	2304      	movs	r3, #4
 800eb58:	e0b1      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb5e:	f003 0301 	and.w	r3, r3, #1
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d004      	beq.n	800eb70 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	2201      	movs	r2, #1
 800eb6a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	e0a6      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	4a58      	ldr	r2, [pc, #352]	@ (800ecd4 <SDMMC_GetCmdResp1+0x1dc>)
 800eb74:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800eb76:	68f8      	ldr	r0, [r7, #12]
 800eb78:	f7ff fcf6 	bl	800e568 <SDMMC_GetCommandResponse>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	461a      	mov	r2, r3
 800eb80:	7afb      	ldrb	r3, [r7, #11]
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d001      	beq.n	800eb8a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eb86:	2301      	movs	r3, #1
 800eb88:	e099      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800eb8a:	2100      	movs	r1, #0
 800eb8c:	68f8      	ldr	r0, [r7, #12]
 800eb8e:	f7ff fcf8 	bl	800e582 <SDMMC_GetResponse>
 800eb92:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800eb94:	697a      	ldr	r2, [r7, #20]
 800eb96:	4b50      	ldr	r3, [pc, #320]	@ (800ecd8 <SDMMC_GetCmdResp1+0x1e0>)
 800eb98:	4013      	ands	r3, r2
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d101      	bne.n	800eba2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	e08d      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	da02      	bge.n	800ebae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800eba8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ebac:	e087      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d001      	beq.n	800ebbc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ebb8:	2340      	movs	r3, #64	@ 0x40
 800ebba:	e080      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d001      	beq.n	800ebca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ebc6:	2380      	movs	r3, #128	@ 0x80
 800ebc8:	e079      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d002      	beq.n	800ebda <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ebd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ebd8:	e071      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d002      	beq.n	800ebea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ebe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ebe8:	e069      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d002      	beq.n	800ebfa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ebf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ebf8:	e061      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d002      	beq.n	800ec0a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ec04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ec08:	e059      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d002      	beq.n	800ec1a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ec14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ec18:	e051      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d002      	beq.n	800ec2a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ec24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ec28:	e049      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d002      	beq.n	800ec3a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ec34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ec38:	e041      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d002      	beq.n	800ec4a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ec44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ec48:	e039      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d002      	beq.n	800ec5a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ec54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ec58:	e031      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d002      	beq.n	800ec6a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ec64:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ec68:	e029      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d002      	beq.n	800ec7a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ec74:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ec78:	e021      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d002      	beq.n	800ec8a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ec84:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ec88:	e019      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d002      	beq.n	800ec9a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ec94:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ec98:	e011      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d002      	beq.n	800ecaa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800eca4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800eca8:	e009      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	f003 0308 	and.w	r3, r3, #8
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d002      	beq.n	800ecba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ecb4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800ecb8:	e001      	b.n	800ecbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ecba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3720      	adds	r7, #32
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}
 800ecc6:	bf00      	nop
 800ecc8:	24000058 	.word	0x24000058
 800eccc:	10624dd3 	.word	0x10624dd3
 800ecd0:	00200045 	.word	0x00200045
 800ecd4:	002000c5 	.word	0x002000c5
 800ecd8:	fdffe008 	.word	0xfdffe008

0800ecdc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b085      	sub	sp, #20
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ece4:	4b1f      	ldr	r3, [pc, #124]	@ (800ed64 <SDMMC_GetCmdResp2+0x88>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	4a1f      	ldr	r2, [pc, #124]	@ (800ed68 <SDMMC_GetCmdResp2+0x8c>)
 800ecea:	fba2 2303 	umull	r2, r3, r2, r3
 800ecee:	0a5b      	lsrs	r3, r3, #9
 800ecf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ecf4:	fb02 f303 	mul.w	r3, r2, r3
 800ecf8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	1e5a      	subs	r2, r3, #1
 800ecfe:	60fa      	str	r2, [r7, #12]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d102      	bne.n	800ed0a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed04:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ed08:	e026      	b.n	800ed58 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed0e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d0ef      	beq.n	800ecfa <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d1ea      	bne.n	800ecfa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed28:	f003 0304 	and.w	r3, r3, #4
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d004      	beq.n	800ed3a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2204      	movs	r2, #4
 800ed34:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ed36:	2304      	movs	r3, #4
 800ed38:	e00e      	b.n	800ed58 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed3e:	f003 0301 	and.w	r3, r3, #1
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d004      	beq.n	800ed50 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2201      	movs	r2, #1
 800ed4a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	e003      	b.n	800ed58 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	4a06      	ldr	r2, [pc, #24]	@ (800ed6c <SDMMC_GetCmdResp2+0x90>)
 800ed54:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ed56:	2300      	movs	r3, #0
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3714      	adds	r7, #20
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed62:	4770      	bx	lr
 800ed64:	24000058 	.word	0x24000058
 800ed68:	10624dd3 	.word	0x10624dd3
 800ed6c:	002000c5 	.word	0x002000c5

0800ed70 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ed70:	b480      	push	{r7}
 800ed72:	b085      	sub	sp, #20
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ed78:	4b1a      	ldr	r3, [pc, #104]	@ (800ede4 <SDMMC_GetCmdResp3+0x74>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4a1a      	ldr	r2, [pc, #104]	@ (800ede8 <SDMMC_GetCmdResp3+0x78>)
 800ed7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ed82:	0a5b      	lsrs	r3, r3, #9
 800ed84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed88:	fb02 f303 	mul.w	r3, r2, r3
 800ed8c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	1e5a      	subs	r2, r3, #1
 800ed92:	60fa      	str	r2, [r7, #12]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d102      	bne.n	800ed9e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed98:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ed9c:	e01b      	b.n	800edd6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eda2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d0ef      	beq.n	800ed8e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d1ea      	bne.n	800ed8e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edbc:	f003 0304 	and.w	r3, r3, #4
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d004      	beq.n	800edce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2204      	movs	r2, #4
 800edc8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800edca:	2304      	movs	r3, #4
 800edcc:	e003      	b.n	800edd6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	4a06      	ldr	r2, [pc, #24]	@ (800edec <SDMMC_GetCmdResp3+0x7c>)
 800edd2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800edd4:	2300      	movs	r3, #0
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3714      	adds	r7, #20
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr
 800ede2:	bf00      	nop
 800ede4:	24000058 	.word	0x24000058
 800ede8:	10624dd3 	.word	0x10624dd3
 800edec:	002000c5 	.word	0x002000c5

0800edf0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b088      	sub	sp, #32
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	460b      	mov	r3, r1
 800edfa:	607a      	str	r2, [r7, #4]
 800edfc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800edfe:	4b35      	ldr	r3, [pc, #212]	@ (800eed4 <SDMMC_GetCmdResp6+0xe4>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	4a35      	ldr	r2, [pc, #212]	@ (800eed8 <SDMMC_GetCmdResp6+0xe8>)
 800ee04:	fba2 2303 	umull	r2, r3, r2, r3
 800ee08:	0a5b      	lsrs	r3, r3, #9
 800ee0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee0e:	fb02 f303 	mul.w	r3, r2, r3
 800ee12:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ee14:	69fb      	ldr	r3, [r7, #28]
 800ee16:	1e5a      	subs	r2, r3, #1
 800ee18:	61fa      	str	r2, [r7, #28]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d102      	bne.n	800ee24 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ee1e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ee22:	e052      	b.n	800eeca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee28:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ee2a:	69bb      	ldr	r3, [r7, #24]
 800ee2c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d0ef      	beq.n	800ee14 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ee34:	69bb      	ldr	r3, [r7, #24]
 800ee36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d1ea      	bne.n	800ee14 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee42:	f003 0304 	and.w	r3, r3, #4
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d004      	beq.n	800ee54 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2204      	movs	r2, #4
 800ee4e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ee50:	2304      	movs	r3, #4
 800ee52:	e03a      	b.n	800eeca <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee58:	f003 0301 	and.w	r3, r3, #1
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d004      	beq.n	800ee6a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2201      	movs	r2, #1
 800ee64:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ee66:	2301      	movs	r3, #1
 800ee68:	e02f      	b.n	800eeca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ee6a:	68f8      	ldr	r0, [r7, #12]
 800ee6c:	f7ff fb7c 	bl	800e568 <SDMMC_GetCommandResponse>
 800ee70:	4603      	mov	r3, r0
 800ee72:	461a      	mov	r2, r3
 800ee74:	7afb      	ldrb	r3, [r7, #11]
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d001      	beq.n	800ee7e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	e025      	b.n	800eeca <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	4a16      	ldr	r2, [pc, #88]	@ (800eedc <SDMMC_GetCmdResp6+0xec>)
 800ee82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ee84:	2100      	movs	r1, #0
 800ee86:	68f8      	ldr	r0, [r7, #12]
 800ee88:	f7ff fb7b 	bl	800e582 <SDMMC_GetResponse>
 800ee8c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d106      	bne.n	800eea6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	0c1b      	lsrs	r3, r3, #16
 800ee9c:	b29a      	uxth	r2, r3
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800eea2:	2300      	movs	r3, #0
 800eea4:	e011      	b.n	800eeca <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d002      	beq.n	800eeb6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eeb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800eeb4:	e009      	b.n	800eeca <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d002      	beq.n	800eec6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800eec0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eec4:	e001      	b.n	800eeca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eec6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3720      	adds	r7, #32
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	24000058 	.word	0x24000058
 800eed8:	10624dd3 	.word	0x10624dd3
 800eedc:	002000c5 	.word	0x002000c5

0800eee0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b085      	sub	sp, #20
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eee8:	4b22      	ldr	r3, [pc, #136]	@ (800ef74 <SDMMC_GetCmdResp7+0x94>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4a22      	ldr	r2, [pc, #136]	@ (800ef78 <SDMMC_GetCmdResp7+0x98>)
 800eeee:	fba2 2303 	umull	r2, r3, r2, r3
 800eef2:	0a5b      	lsrs	r3, r3, #9
 800eef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eef8:	fb02 f303 	mul.w	r3, r2, r3
 800eefc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	1e5a      	subs	r2, r3, #1
 800ef02:	60fa      	str	r2, [r7, #12]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d102      	bne.n	800ef0e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ef08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ef0c:	e02c      	b.n	800ef68 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef12:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d0ef      	beq.n	800eefe <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d1ea      	bne.n	800eefe <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef2c:	f003 0304 	and.w	r3, r3, #4
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d004      	beq.n	800ef3e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2204      	movs	r2, #4
 800ef38:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ef3a:	2304      	movs	r3, #4
 800ef3c:	e014      	b.n	800ef68 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef42:	f003 0301 	and.w	r3, r3, #1
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d004      	beq.n	800ef54 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2201      	movs	r2, #1
 800ef4e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef50:	2301      	movs	r3, #1
 800ef52:	e009      	b.n	800ef68 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d002      	beq.n	800ef66 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2240      	movs	r2, #64	@ 0x40
 800ef64:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ef66:	2300      	movs	r3, #0

}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3714      	adds	r7, #20
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr
 800ef74:	24000058 	.word	0x24000058
 800ef78:	10624dd3 	.word	0x10624dd3

0800ef7c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	b085      	sub	sp, #20
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ef84:	4b11      	ldr	r3, [pc, #68]	@ (800efcc <SDMMC_GetCmdError+0x50>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4a11      	ldr	r2, [pc, #68]	@ (800efd0 <SDMMC_GetCmdError+0x54>)
 800ef8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ef8e:	0a5b      	lsrs	r3, r3, #9
 800ef90:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef94:	fb02 f303 	mul.w	r3, r2, r3
 800ef98:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	1e5a      	subs	r2, r3, #1
 800ef9e:	60fa      	str	r2, [r7, #12]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d102      	bne.n	800efaa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800efa4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800efa8:	e009      	b.n	800efbe <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d0f1      	beq.n	800ef9a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	4a06      	ldr	r2, [pc, #24]	@ (800efd4 <SDMMC_GetCmdError+0x58>)
 800efba:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800efbc:	2300      	movs	r3, #0
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3714      	adds	r7, #20
 800efc2:	46bd      	mov	sp, r7
 800efc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc8:	4770      	bx	lr
 800efca:	bf00      	nop
 800efcc:	24000058 	.word	0x24000058
 800efd0:	10624dd3 	.word	0x10624dd3
 800efd4:	002000c5 	.word	0x002000c5

0800efd8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800efdc:	4904      	ldr	r1, [pc, #16]	@ (800eff0 <MX_FATFS_Init+0x18>)
 800efde:	4805      	ldr	r0, [pc, #20]	@ (800eff4 <MX_FATFS_Init+0x1c>)
 800efe0:	f002 fccc 	bl	801197c <FATFS_LinkDriver>
 800efe4:	4603      	mov	r3, r0
 800efe6:	461a      	mov	r2, r3
 800efe8:	4b03      	ldr	r3, [pc, #12]	@ (800eff8 <MX_FATFS_Init+0x20>)
 800efea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800efec:	bf00      	nop
 800efee:	bd80      	pop	{r7, pc}
 800eff0:	240005a0 	.word	0x240005a0
 800eff4:	08013450 	.word	0x08013450
 800eff8:	2400059c 	.word	0x2400059c

0800effc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800effc:	b480      	push	{r7}
 800effe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f000:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f002:	4618      	mov	r0, r3
 800f004:	46bd      	mov	sp, r7
 800f006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00a:	4770      	bx	lr

0800f00c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b086      	sub	sp, #24
 800f010:	af00      	add	r7, sp, #0
 800f012:	60f8      	str	r0, [r7, #12]
 800f014:	60b9      	str	r1, [r7, #8]
 800f016:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f018:	2300      	movs	r3, #0
 800f01a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	68ba      	ldr	r2, [r7, #8]
 800f020:	68f9      	ldr	r1, [r7, #12]
 800f022:	4806      	ldr	r0, [pc, #24]	@ (800f03c <BSP_SD_ReadBlocks_DMA+0x30>)
 800f024:	f7fc f95e 	bl	800b2e4 <HAL_SD_ReadBlocks_DMA>
 800f028:	4603      	mov	r3, r0
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d001      	beq.n	800f032 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f02e:	2301      	movs	r3, #1
 800f030:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f032:	7dfb      	ldrb	r3, [r7, #23]
}
 800f034:	4618      	mov	r0, r3
 800f036:	3718      	adds	r7, #24
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}
 800f03c:	24000434 	.word	0x24000434

0800f040 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b086      	sub	sp, #24
 800f044:	af00      	add	r7, sp, #0
 800f046:	60f8      	str	r0, [r7, #12]
 800f048:	60b9      	str	r1, [r7, #8]
 800f04a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f04c:	2300      	movs	r3, #0
 800f04e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	68ba      	ldr	r2, [r7, #8]
 800f054:	68f9      	ldr	r1, [r7, #12]
 800f056:	4806      	ldr	r0, [pc, #24]	@ (800f070 <BSP_SD_WriteBlocks_DMA+0x30>)
 800f058:	f7fc f9ec 	bl	800b434 <HAL_SD_WriteBlocks_DMA>
 800f05c:	4603      	mov	r3, r0
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d001      	beq.n	800f066 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f062:	2301      	movs	r3, #1
 800f064:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f066:	7dfb      	ldrb	r3, [r7, #23]
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3718      	adds	r7, #24
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}
 800f070:	24000434 	.word	0x24000434

0800f074 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f078:	4805      	ldr	r0, [pc, #20]	@ (800f090 <BSP_SD_GetCardState+0x1c>)
 800f07a:	f7fc ffe5 	bl	800c048 <HAL_SD_GetCardState>
 800f07e:	4603      	mov	r3, r0
 800f080:	2b04      	cmp	r3, #4
 800f082:	bf14      	ite	ne
 800f084:	2301      	movne	r3, #1
 800f086:	2300      	moveq	r3, #0
 800f088:	b2db      	uxtb	r3, r3
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop
 800f090:	24000434 	.word	0x24000434

0800f094 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b082      	sub	sp, #8
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f09c:	6879      	ldr	r1, [r7, #4]
 800f09e:	4803      	ldr	r0, [pc, #12]	@ (800f0ac <BSP_SD_GetCardInfo+0x18>)
 800f0a0:	f7fc fe94 	bl	800bdcc <HAL_SD_GetCardInfo>
}
 800f0a4:	bf00      	nop
 800f0a6:	3708      	adds	r7, #8
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}
 800f0ac:	24000434 	.word	0x24000434

0800f0b0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b082      	sub	sp, #8
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800f0b8:	f000 fad8 	bl	800f66c <BSP_SD_WriteCpltCallback>
}
 800f0bc:	bf00      	nop
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b082      	sub	sp, #8
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f0cc:	f000 fada 	bl	800f684 <BSP_SD_ReadCpltCallback>
}
 800f0d0:	bf00      	nop
 800f0d2:	3708      	adds	r7, #8
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b084      	sub	sp, #16
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800f0e0:	f7f6 fa5c 	bl	800559c <HAL_GetTick>
 800f0e4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800f0e6:	e006      	b.n	800f0f6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f0e8:	f7ff ffc4 	bl	800f074 <BSP_SD_GetCardState>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d101      	bne.n	800f0f6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	e009      	b.n	800f10a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800f0f6:	f7f6 fa51 	bl	800559c <HAL_GetTick>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	1ad3      	subs	r3, r2, r3
 800f100:	687a      	ldr	r2, [r7, #4]
 800f102:	429a      	cmp	r2, r3
 800f104:	d8f0      	bhi.n	800f0e8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f106:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3710      	adds	r7, #16
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
	...

0800f114 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b082      	sub	sp, #8
 800f118:	af00      	add	r7, sp, #0
 800f11a:	4603      	mov	r3, r0
 800f11c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f11e:	4b0b      	ldr	r3, [pc, #44]	@ (800f14c <SD_CheckStatus+0x38>)
 800f120:	2201      	movs	r2, #1
 800f122:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f124:	f7ff ffa6 	bl	800f074 <BSP_SD_GetCardState>
 800f128:	4603      	mov	r3, r0
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d107      	bne.n	800f13e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f12e:	4b07      	ldr	r3, [pc, #28]	@ (800f14c <SD_CheckStatus+0x38>)
 800f130:	781b      	ldrb	r3, [r3, #0]
 800f132:	b2db      	uxtb	r3, r3
 800f134:	f023 0301 	bic.w	r3, r3, #1
 800f138:	b2da      	uxtb	r2, r3
 800f13a:	4b04      	ldr	r3, [pc, #16]	@ (800f14c <SD_CheckStatus+0x38>)
 800f13c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f13e:	4b03      	ldr	r3, [pc, #12]	@ (800f14c <SD_CheckStatus+0x38>)
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	b2db      	uxtb	r3, r3
}
 800f144:	4618      	mov	r0, r3
 800f146:	3708      	adds	r7, #8
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	24000065 	.word	0x24000065

0800f150 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b082      	sub	sp, #8
 800f154:	af00      	add	r7, sp, #0
 800f156:	4603      	mov	r3, r0
 800f158:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 800f15a:	79fb      	ldrb	r3, [r7, #7]
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7ff ffd9 	bl	800f114 <SD_CheckStatus>
 800f162:	4603      	mov	r3, r0
 800f164:	461a      	mov	r2, r3
 800f166:	4b04      	ldr	r3, [pc, #16]	@ (800f178 <SD_initialize+0x28>)
 800f168:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 800f16a:	4b03      	ldr	r3, [pc, #12]	@ (800f178 <SD_initialize+0x28>)
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	b2db      	uxtb	r3, r3
}
 800f170:	4618      	mov	r0, r3
 800f172:	3708      	adds	r7, #8
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}
 800f178:	24000065 	.word	0x24000065

0800f17c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
 800f182:	4603      	mov	r3, r0
 800f184:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f186:	79fb      	ldrb	r3, [r7, #7]
 800f188:	4618      	mov	r0, r3
 800f18a:	f7ff ffc3 	bl	800f114 <SD_CheckStatus>
 800f18e:	4603      	mov	r3, r0
}
 800f190:	4618      	mov	r0, r3
 800f192:	3708      	adds	r7, #8
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}

0800f198 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b090      	sub	sp, #64	@ 0x40
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	60b9      	str	r1, [r7, #8]
 800f1a0:	607a      	str	r2, [r7, #4]
 800f1a2:	603b      	str	r3, [r7, #0]
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f1ae:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f1b2:	f7ff ff91 	bl	800f0d8 <SD_CheckStatusWithTimeout>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	da02      	bge.n	800f1c2 <SD_read+0x2a>
  {
    return res;
 800f1bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f1c0:	e0ea      	b.n	800f398 <SD_read+0x200>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	f003 0303 	and.w	r3, r3, #3
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d16d      	bne.n	800f2a8 <SD_read+0x110>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800f1cc:	683a      	ldr	r2, [r7, #0]
 800f1ce:	6879      	ldr	r1, [r7, #4]
 800f1d0:	68b8      	ldr	r0, [r7, #8]
 800f1d2:	f7ff ff1b 	bl	800f00c <BSP_SD_ReadBlocks_DMA>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	f040 80db 	bne.w	800f394 <SD_read+0x1fc>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800f1de:	4b70      	ldr	r3, [pc, #448]	@ (800f3a0 <SD_read+0x208>)
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800f1e4:	f7f6 f9da 	bl	800559c <HAL_GetTick>
 800f1e8:	6378      	str	r0, [r7, #52]	@ 0x34
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f1ea:	bf00      	nop
 800f1ec:	4b6c      	ldr	r3, [pc, #432]	@ (800f3a0 <SD_read+0x208>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d108      	bne.n	800f206 <SD_read+0x6e>
 800f1f4:	f7f6 f9d2 	bl	800559c <HAL_GetTick>
 800f1f8:	4602      	mov	r2, r0
 800f1fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1fc:	1ad3      	subs	r3, r2, r3
 800f1fe:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f202:	4293      	cmp	r3, r2
 800f204:	d9f2      	bls.n	800f1ec <SD_read+0x54>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800f206:	4b66      	ldr	r3, [pc, #408]	@ (800f3a0 <SD_read+0x208>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d103      	bne.n	800f216 <SD_read+0x7e>
      {
        res = RES_ERROR;
 800f20e:	2301      	movs	r3, #1
 800f210:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800f214:	e0be      	b.n	800f394 <SD_read+0x1fc>
      }
      else
      {
        ReadStatus = 0;
 800f216:	4b62      	ldr	r3, [pc, #392]	@ (800f3a0 <SD_read+0x208>)
 800f218:	2200      	movs	r2, #0
 800f21a:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f21c:	f7f6 f9be 	bl	800559c <HAL_GetTick>
 800f220:	6378      	str	r0, [r7, #52]	@ 0x34

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f222:	e037      	b.n	800f294 <SD_read+0xfc>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f224:	f7ff ff26 	bl	800f074 <BSP_SD_GetCardState>
 800f228:	4603      	mov	r3, r0
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d132      	bne.n	800f294 <SD_read+0xfc>
          {
            res = RES_OK;
 800f22e:	2300      	movs	r3, #0
 800f230:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
            /*
            the SCB_InvalidateDCache_by_Addr() requires a 32-Byte aligned address,
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	f023 031f 	bic.w	r3, r3, #31
 800f23a:	633b      	str	r3, [r7, #48]	@ 0x30
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 800f23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f23e:	683a      	ldr	r2, [r7, #0]
 800f240:	0251      	lsls	r1, r2, #9
 800f242:	68b8      	ldr	r0, [r7, #8]
 800f244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f246:	1a82      	subs	r2, r0, r2
 800f248:	440a      	add	r2, r1
 800f24a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f24c:	62ba      	str	r2, [r7, #40]	@ 0x28
    if ( dsize > 0 ) { 
 800f24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f250:	2b00      	cmp	r3, #0
 800f252:	dd1d      	ble.n	800f290 <SD_read+0xf8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800f254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f256:	f003 021f 	and.w	r2, r3, #31
 800f25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f25c:	4413      	add	r3, r2
 800f25e:	627b      	str	r3, [r7, #36]	@ 0x24
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800f260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f262:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dsb 0xF":::"memory");
 800f264:	f3bf 8f4f 	dsb	sy
}
 800f268:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800f26a:	4a4e      	ldr	r2, [pc, #312]	@ (800f3a4 <SD_read+0x20c>)
 800f26c:	6a3b      	ldr	r3, [r7, #32]
 800f26e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800f272:	6a3b      	ldr	r3, [r7, #32]
 800f274:	3320      	adds	r3, #32
 800f276:	623b      	str	r3, [r7, #32]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800f278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f27a:	3b20      	subs	r3, #32
 800f27c:	627b      	str	r3, [r7, #36]	@ 0x24
      } while ( op_size > 0 );
 800f27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f280:	2b00      	cmp	r3, #0
 800f282:	dcf2      	bgt.n	800f26a <SD_read+0xd2>
  __ASM volatile ("dsb 0xF":::"memory");
 800f284:	f3bf 8f4f 	dsb	sy
}
 800f288:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f28a:	f3bf 8f6f 	isb	sy
}
 800f28e:	bf00      	nop
}
 800f290:	bf00      	nop
#endif
            break;
 800f292:	e07f      	b.n	800f394 <SD_read+0x1fc>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f294:	f7f6 f982 	bl	800559c <HAL_GetTick>
 800f298:	4602      	mov	r2, r0
 800f29a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f29c:	1ad3      	subs	r3, r2, r3
 800f29e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d9be      	bls.n	800f224 <SD_read+0x8c>
 800f2a6:	e075      	b.n	800f394 <SD_read+0x1fc>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f2ac:	e061      	b.n	800f372 <SD_read+0x1da>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	1c5a      	adds	r2, r3, #1
 800f2b2:	607a      	str	r2, [r7, #4]
 800f2b4:	2201      	movs	r2, #1
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	483b      	ldr	r0, [pc, #236]	@ (800f3a8 <SD_read+0x210>)
 800f2ba:	f7ff fea7 	bl	800f00c <BSP_SD_ReadBlocks_DMA>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        if (ret == MSD_OK) {
 800f2c4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d157      	bne.n	800f37c <SD_read+0x1e4>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 800f2cc:	f7f6 f966 	bl	800559c <HAL_GetTick>
 800f2d0:	6378      	str	r0, [r7, #52]	@ 0x34
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f2d2:	bf00      	nop
 800f2d4:	4b32      	ldr	r3, [pc, #200]	@ (800f3a0 <SD_read+0x208>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d108      	bne.n	800f2ee <SD_read+0x156>
 800f2dc:	f7f6 f95e 	bl	800559c <HAL_GetTick>
 800f2e0:	4602      	mov	r2, r0
 800f2e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2e4:	1ad3      	subs	r3, r2, r3
 800f2e6:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f2ea:	4293      	cmp	r3, r2
 800f2ec:	d9f2      	bls.n	800f2d4 <SD_read+0x13c>
          {
          }
          if (ReadStatus == 0)
 800f2ee:	4b2c      	ldr	r3, [pc, #176]	@ (800f3a0 <SD_read+0x208>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d103      	bne.n	800f2fe <SD_read+0x166>
          {
            res = RES_ERROR;
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 800f2fc:	e03f      	b.n	800f37e <SD_read+0x1e6>
          }
          ReadStatus = 0;
 800f2fe:	4b28      	ldr	r3, [pc, #160]	@ (800f3a0 <SD_read+0x208>)
 800f300:	2200      	movs	r2, #0
 800f302:	601a      	str	r2, [r3, #0]
 800f304:	4b28      	ldr	r3, [pc, #160]	@ (800f3a8 <SD_read+0x210>)
 800f306:	61fb      	str	r3, [r7, #28]
 800f308:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f30c:	61bb      	str	r3, [r7, #24]
    if ( dsize > 0 ) { 
 800f30e:	69bb      	ldr	r3, [r7, #24]
 800f310:	2b00      	cmp	r3, #0
 800f312:	dd1d      	ble.n	800f350 <SD_read+0x1b8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800f314:	69fb      	ldr	r3, [r7, #28]
 800f316:	f003 021f 	and.w	r2, r3, #31
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	4413      	add	r3, r2
 800f31e:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800f320:	69fb      	ldr	r3, [r7, #28]
 800f322:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800f324:	f3bf 8f4f 	dsb	sy
}
 800f328:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800f32a:	4a1e      	ldr	r2, [pc, #120]	@ (800f3a4 <SD_read+0x20c>)
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	3320      	adds	r3, #32
 800f336:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	3b20      	subs	r3, #32
 800f33c:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	2b00      	cmp	r3, #0
 800f342:	dcf2      	bgt.n	800f32a <SD_read+0x192>
  __ASM volatile ("dsb 0xF":::"memory");
 800f344:	f3bf 8f4f 	dsb	sy
}
 800f348:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f34a:	f3bf 8f6f 	isb	sy
}
 800f34e:	bf00      	nop
}
 800f350:	bf00      	nop
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	4a14      	ldr	r2, [pc, #80]	@ (800f3a8 <SD_read+0x210>)
 800f356:	4618      	mov	r0, r3
 800f358:	4611      	mov	r1, r2
 800f35a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f35e:	461a      	mov	r2, r3
 800f360:	f003 f88b 	bl	801247a <memcpy>
          buff += BLOCKSIZE;
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800f36a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800f36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f36e:	3301      	adds	r3, #1
 800f370:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f374:	683a      	ldr	r2, [r7, #0]
 800f376:	429a      	cmp	r2, r3
 800f378:	d899      	bhi.n	800f2ae <SD_read+0x116>
 800f37a:	e000      	b.n	800f37e <SD_read+0x1e6>
        }
        else
        {
          break;
 800f37c:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800f37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f380:	683a      	ldr	r2, [r7, #0]
 800f382:	429a      	cmp	r2, r3
 800f384:	d106      	bne.n	800f394 <SD_read+0x1fc>
 800f386:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d102      	bne.n	800f394 <SD_read+0x1fc>
        res = RES_OK;
 800f38e:	2300      	movs	r3, #0
 800f390:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
#endif

  return res;
 800f394:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800f398:	4618      	mov	r0, r3
 800f39a:	3740      	adds	r7, #64	@ 0x40
 800f39c:	46bd      	mov	sp, r7
 800f39e:	bd80      	pop	{r7, pc}
 800f3a0:	24000c24 	.word	0x24000c24
 800f3a4:	e000ed00 	.word	0xe000ed00
 800f3a8:	24000a20 	.word	0x24000a20

0800f3ac <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b090      	sub	sp, #64	@ 0x40
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60b9      	str	r1, [r7, #8]
 800f3b4:	607a      	str	r2, [r7, #4]
 800f3b6:	603b      	str	r3, [r7, #0]
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f3bc:	2301      	movs	r3, #1
 800f3be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800f3c2:	4b7b      	ldr	r3, [pc, #492]	@ (800f5b0 <SD_write+0x204>)
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f3c8:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f3cc:	f7ff fe84 	bl	800f0d8 <SD_CheckStatusWithTimeout>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	da02      	bge.n	800f3dc <SD_write+0x30>
  {
    return res;
 800f3d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f3da:	e0e5      	b.n	800f5a8 <SD_write+0x1fc>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	f003 0303 	and.w	r3, r3, #3
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d16a      	bne.n	800f4bc <SD_write+0x110>

    /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	f023 031f 	bic.w	r3, r3, #31
 800f3ec:	633b      	str	r3, [r7, #48]	@ 0x30
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 800f3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3f0:	683a      	ldr	r2, [r7, #0]
 800f3f2:	0251      	lsls	r1, r2, #9
 800f3f4:	68b8      	ldr	r0, [r7, #8]
 800f3f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3f8:	1a82      	subs	r2, r0, r2
 800f3fa:	440a      	add	r2, r1
 800f3fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f3fe:	62ba      	str	r2, [r7, #40]	@ 0x28
    if ( dsize > 0 ) { 
 800f400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f402:	2b00      	cmp	r3, #0
 800f404:	dd1d      	ble.n	800f442 <SD_write+0x96>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800f406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f408:	f003 021f 	and.w	r2, r3, #31
 800f40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f40e:	4413      	add	r3, r2
 800f410:	627b      	str	r3, [r7, #36]	@ 0x24
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800f412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f414:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dsb 0xF":::"memory");
 800f416:	f3bf 8f4f 	dsb	sy
}
 800f41a:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800f41c:	4a65      	ldr	r2, [pc, #404]	@ (800f5b4 <SD_write+0x208>)
 800f41e:	6a3b      	ldr	r3, [r7, #32]
 800f420:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800f424:	6a3b      	ldr	r3, [r7, #32]
 800f426:	3320      	adds	r3, #32
 800f428:	623b      	str	r3, [r7, #32]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800f42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f42c:	3b20      	subs	r3, #32
 800f42e:	627b      	str	r3, [r7, #36]	@ 0x24
      } while ( op_size > 0 );
 800f430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f432:	2b00      	cmp	r3, #0
 800f434:	dcf2      	bgt.n	800f41c <SD_write+0x70>
  __ASM volatile ("dsb 0xF":::"memory");
 800f436:	f3bf 8f4f 	dsb	sy
}
 800f43a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f43c:	f3bf 8f6f 	isb	sy
}
 800f440:	bf00      	nop
}
 800f442:	bf00      	nop
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f444:	683a      	ldr	r2, [r7, #0]
 800f446:	6879      	ldr	r1, [r7, #4]
 800f448:	68b8      	ldr	r0, [r7, #8]
 800f44a:	f7ff fdf9 	bl	800f040 <BSP_SD_WriteBlocks_DMA>
 800f44e:	4603      	mov	r3, r0
 800f450:	2b00      	cmp	r3, #0
 800f452:	f040 80a7 	bne.w	800f5a4 <SD_write+0x1f8>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800f456:	f7f6 f8a1 	bl	800559c <HAL_GetTick>
 800f45a:	6378      	str	r0, [r7, #52]	@ 0x34
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f45c:	bf00      	nop
 800f45e:	4b54      	ldr	r3, [pc, #336]	@ (800f5b0 <SD_write+0x204>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d108      	bne.n	800f478 <SD_write+0xcc>
 800f466:	f7f6 f899 	bl	800559c <HAL_GetTick>
 800f46a:	4602      	mov	r2, r0
 800f46c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f46e:	1ad3      	subs	r3, r2, r3
 800f470:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f474:	4293      	cmp	r3, r2
 800f476:	d9f2      	bls.n	800f45e <SD_write+0xb2>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800f478:	4b4d      	ldr	r3, [pc, #308]	@ (800f5b0 <SD_write+0x204>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d103      	bne.n	800f488 <SD_write+0xdc>
      {
        res = RES_ERROR;
 800f480:	2301      	movs	r3, #1
 800f482:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800f486:	e08d      	b.n	800f5a4 <SD_write+0x1f8>
      }
      else
      {
        WriteStatus = 0;
 800f488:	4b49      	ldr	r3, [pc, #292]	@ (800f5b0 <SD_write+0x204>)
 800f48a:	2200      	movs	r2, #0
 800f48c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f48e:	f7f6 f885 	bl	800559c <HAL_GetTick>
 800f492:	6378      	str	r0, [r7, #52]	@ 0x34

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f494:	e008      	b.n	800f4a8 <SD_write+0xfc>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f496:	f7ff fded 	bl	800f074 <BSP_SD_GetCardState>
 800f49a:	4603      	mov	r3, r0
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d103      	bne.n	800f4a8 <SD_write+0xfc>
          {
            res = RES_OK;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 800f4a6:	e07d      	b.n	800f5a4 <SD_write+0x1f8>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f4a8:	f7f6 f878 	bl	800559c <HAL_GetTick>
 800f4ac:	4602      	mov	r2, r0
 800f4ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4b0:	1ad3      	subs	r3, r2, r3
 800f4b2:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d9ed      	bls.n	800f496 <SD_write+0xea>
 800f4ba:	e073      	b.n	800f5a4 <SD_write+0x1f8>
 800f4bc:	4b3e      	ldr	r3, [pc, #248]	@ (800f5b8 <SD_write+0x20c>)
 800f4be:	61fb      	str	r3, [r7, #28]
 800f4c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f4c4:	61bb      	str	r3, [r7, #24]
    if ( dsize > 0 ) { 
 800f4c6:	69bb      	ldr	r3, [r7, #24]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	dd1d      	ble.n	800f508 <SD_write+0x15c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800f4cc:	69fb      	ldr	r3, [r7, #28]
 800f4ce:	f003 021f 	and.w	r2, r3, #31
 800f4d2:	69bb      	ldr	r3, [r7, #24]
 800f4d4:	4413      	add	r3, r2
 800f4d6:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800f4d8:	69fb      	ldr	r3, [r7, #28]
 800f4da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800f4dc:	f3bf 8f4f 	dsb	sy
}
 800f4e0:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800f4e2:	4a34      	ldr	r2, [pc, #208]	@ (800f5b4 <SD_write+0x208>)
 800f4e4:	693b      	ldr	r3, [r7, #16]
 800f4e6:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	3320      	adds	r3, #32
 800f4ee:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	3b20      	subs	r3, #32
 800f4f4:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	dcf2      	bgt.n	800f4e2 <SD_write+0x136>
  __ASM volatile ("dsb 0xF":::"memory");
 800f4fc:	f3bf 8f4f 	dsb	sy
}
 800f500:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f502:	f3bf 8f6f 	isb	sy
}
 800f506:	bf00      	nop
}
 800f508:	bf00      	nop
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800f50a:	2300      	movs	r3, #0
 800f50c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f50e:	e036      	b.n	800f57e <SD_write+0x1d2>
      {
        WriteStatus = 0;
 800f510:	4b27      	ldr	r3, [pc, #156]	@ (800f5b0 <SD_write+0x204>)
 800f512:	2200      	movs	r2, #0
 800f514:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 800f516:	4a28      	ldr	r2, [pc, #160]	@ (800f5b8 <SD_write+0x20c>)
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	4610      	mov	r0, r2
 800f51c:	4619      	mov	r1, r3
 800f51e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f522:	461a      	mov	r2, r3
 800f524:	f002 ffa9 	bl	801247a <memcpy>
        buff += BLOCKSIZE;
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800f52e:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	1c5a      	adds	r2, r3, #1
 800f534:	607a      	str	r2, [r7, #4]
 800f536:	2201      	movs	r2, #1
 800f538:	4619      	mov	r1, r3
 800f53a:	481f      	ldr	r0, [pc, #124]	@ (800f5b8 <SD_write+0x20c>)
 800f53c:	f7ff fd80 	bl	800f040 <BSP_SD_WriteBlocks_DMA>
 800f540:	4603      	mov	r3, r0
 800f542:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        if (ret == MSD_OK) {
 800f546:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d11c      	bne.n	800f588 <SD_write+0x1dc>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800f54e:	f7f6 f825 	bl	800559c <HAL_GetTick>
 800f552:	6378      	str	r0, [r7, #52]	@ 0x34
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f554:	bf00      	nop
 800f556:	4b16      	ldr	r3, [pc, #88]	@ (800f5b0 <SD_write+0x204>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d108      	bne.n	800f570 <SD_write+0x1c4>
 800f55e:	f7f6 f81d 	bl	800559c <HAL_GetTick>
 800f562:	4602      	mov	r2, r0
 800f564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f566:	1ad3      	subs	r3, r2, r3
 800f568:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f56c:	4293      	cmp	r3, r2
 800f56e:	d9f2      	bls.n	800f556 <SD_write+0x1aa>
          {
          }
          if (WriteStatus == 0)
 800f570:	4b0f      	ldr	r3, [pc, #60]	@ (800f5b0 <SD_write+0x204>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d009      	beq.n	800f58c <SD_write+0x1e0>
      for (i = 0; i < count; i++)
 800f578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f57a:	3301      	adds	r3, #1
 800f57c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f580:	683a      	ldr	r2, [r7, #0]
 800f582:	429a      	cmp	r2, r3
 800f584:	d8c4      	bhi.n	800f510 <SD_write+0x164>
 800f586:	e002      	b.n	800f58e <SD_write+0x1e2>
          }

        }
        else
        {
          break;
 800f588:	bf00      	nop
 800f58a:	e000      	b.n	800f58e <SD_write+0x1e2>
            break;
 800f58c:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800f58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f590:	683a      	ldr	r2, [r7, #0]
 800f592:	429a      	cmp	r2, r3
 800f594:	d106      	bne.n	800f5a4 <SD_write+0x1f8>
 800f596:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d102      	bne.n	800f5a4 <SD_write+0x1f8>
        res = RES_OK;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
#endif
  return res;
 800f5a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3740      	adds	r7, #64	@ 0x40
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}
 800f5b0:	24000c20 	.word	0x24000c20
 800f5b4:	e000ed00 	.word	0xe000ed00
 800f5b8:	24000a20 	.word	0x24000a20

0800f5bc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b08c      	sub	sp, #48	@ 0x30
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	603a      	str	r2, [r7, #0]
 800f5c6:	71fb      	strb	r3, [r7, #7]
 800f5c8:	460b      	mov	r3, r1
 800f5ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f5d2:	4b25      	ldr	r3, [pc, #148]	@ (800f668 <SD_ioctl+0xac>)
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	f003 0301 	and.w	r3, r3, #1
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d001      	beq.n	800f5e4 <SD_ioctl+0x28>
 800f5e0:	2303      	movs	r3, #3
 800f5e2:	e03c      	b.n	800f65e <SD_ioctl+0xa2>

  switch (cmd)
 800f5e4:	79bb      	ldrb	r3, [r7, #6]
 800f5e6:	2b03      	cmp	r3, #3
 800f5e8:	d834      	bhi.n	800f654 <SD_ioctl+0x98>
 800f5ea:	a201      	add	r2, pc, #4	@ (adr r2, 800f5f0 <SD_ioctl+0x34>)
 800f5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5f0:	0800f601 	.word	0x0800f601
 800f5f4:	0800f609 	.word	0x0800f609
 800f5f8:	0800f621 	.word	0x0800f621
 800f5fc:	0800f63b 	.word	0x0800f63b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f600:	2300      	movs	r3, #0
 800f602:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f606:	e028      	b.n	800f65a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f608:	f107 0308 	add.w	r3, r7, #8
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7ff fd41 	bl	800f094 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f612:	6a3a      	ldr	r2, [r7, #32]
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f618:	2300      	movs	r3, #0
 800f61a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f61e:	e01c      	b.n	800f65a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f620:	f107 0308 	add.w	r3, r7, #8
 800f624:	4618      	mov	r0, r3
 800f626:	f7ff fd35 	bl	800f094 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f62c:	b29a      	uxth	r2, r3
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f632:	2300      	movs	r3, #0
 800f634:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f638:	e00f      	b.n	800f65a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f63a:	f107 0308 	add.w	r3, r7, #8
 800f63e:	4618      	mov	r0, r3
 800f640:	f7ff fd28 	bl	800f094 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f646:	0a5a      	lsrs	r2, r3, #9
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f64c:	2300      	movs	r3, #0
 800f64e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f652:	e002      	b.n	800f65a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f654:	2304      	movs	r3, #4
 800f656:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f65a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3730      	adds	r7, #48	@ 0x30
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}
 800f666:	bf00      	nop
 800f668:	24000065 	.word	0x24000065

0800f66c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f66c:	b480      	push	{r7}
 800f66e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800f670:	4b03      	ldr	r3, [pc, #12]	@ (800f680 <BSP_SD_WriteCpltCallback+0x14>)
 800f672:	2201      	movs	r2, #1
 800f674:	601a      	str	r2, [r3, #0]
}
 800f676:	bf00      	nop
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr
 800f680:	24000c20 	.word	0x24000c20

0800f684 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f684:	b480      	push	{r7}
 800f686:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800f688:	4b03      	ldr	r3, [pc, #12]	@ (800f698 <BSP_SD_ReadCpltCallback+0x14>)
 800f68a:	2201      	movs	r2, #1
 800f68c:	601a      	str	r2, [r3, #0]
}
 800f68e:	bf00      	nop
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr
 800f698:	24000c24 	.word	0x24000c24

0800f69c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b084      	sub	sp, #16
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f6a6:	79fb      	ldrb	r3, [r7, #7]
 800f6a8:	4a08      	ldr	r2, [pc, #32]	@ (800f6cc <disk_status+0x30>)
 800f6aa:	009b      	lsls	r3, r3, #2
 800f6ac:	4413      	add	r3, r2
 800f6ae:	685b      	ldr	r3, [r3, #4]
 800f6b0:	685b      	ldr	r3, [r3, #4]
 800f6b2:	79fa      	ldrb	r2, [r7, #7]
 800f6b4:	4905      	ldr	r1, [pc, #20]	@ (800f6cc <disk_status+0x30>)
 800f6b6:	440a      	add	r2, r1
 800f6b8:	7a12      	ldrb	r2, [r2, #8]
 800f6ba:	4610      	mov	r0, r2
 800f6bc:	4798      	blx	r3
 800f6be:	4603      	mov	r3, r0
 800f6c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f6c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3710      	adds	r7, #16
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}
 800f6cc:	24000c50 	.word	0x24000c50

0800f6d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f6de:	79fb      	ldrb	r3, [r7, #7]
 800f6e0:	4a0e      	ldr	r2, [pc, #56]	@ (800f71c <disk_initialize+0x4c>)
 800f6e2:	5cd3      	ldrb	r3, [r2, r3]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d114      	bne.n	800f712 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f6e8:	79fb      	ldrb	r3, [r7, #7]
 800f6ea:	4a0c      	ldr	r2, [pc, #48]	@ (800f71c <disk_initialize+0x4c>)
 800f6ec:	009b      	lsls	r3, r3, #2
 800f6ee:	4413      	add	r3, r2
 800f6f0:	685b      	ldr	r3, [r3, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	79fa      	ldrb	r2, [r7, #7]
 800f6f6:	4909      	ldr	r1, [pc, #36]	@ (800f71c <disk_initialize+0x4c>)
 800f6f8:	440a      	add	r2, r1
 800f6fa:	7a12      	ldrb	r2, [r2, #8]
 800f6fc:	4610      	mov	r0, r2
 800f6fe:	4798      	blx	r3
 800f700:	4603      	mov	r3, r0
 800f702:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800f704:	7bfb      	ldrb	r3, [r7, #15]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d103      	bne.n	800f712 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800f70a:	79fb      	ldrb	r3, [r7, #7]
 800f70c:	4a03      	ldr	r2, [pc, #12]	@ (800f71c <disk_initialize+0x4c>)
 800f70e:	2101      	movs	r1, #1
 800f710:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800f712:	7bfb      	ldrb	r3, [r7, #15]
}
 800f714:	4618      	mov	r0, r3
 800f716:	3710      	adds	r7, #16
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}
 800f71c:	24000c50 	.word	0x24000c50

0800f720 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f720:	b590      	push	{r4, r7, lr}
 800f722:	b087      	sub	sp, #28
 800f724:	af00      	add	r7, sp, #0
 800f726:	60b9      	str	r1, [r7, #8]
 800f728:	607a      	str	r2, [r7, #4]
 800f72a:	603b      	str	r3, [r7, #0]
 800f72c:	4603      	mov	r3, r0
 800f72e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f730:	7bfb      	ldrb	r3, [r7, #15]
 800f732:	4a0a      	ldr	r2, [pc, #40]	@ (800f75c <disk_read+0x3c>)
 800f734:	009b      	lsls	r3, r3, #2
 800f736:	4413      	add	r3, r2
 800f738:	685b      	ldr	r3, [r3, #4]
 800f73a:	689c      	ldr	r4, [r3, #8]
 800f73c:	7bfb      	ldrb	r3, [r7, #15]
 800f73e:	4a07      	ldr	r2, [pc, #28]	@ (800f75c <disk_read+0x3c>)
 800f740:	4413      	add	r3, r2
 800f742:	7a18      	ldrb	r0, [r3, #8]
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	687a      	ldr	r2, [r7, #4]
 800f748:	68b9      	ldr	r1, [r7, #8]
 800f74a:	47a0      	blx	r4
 800f74c:	4603      	mov	r3, r0
 800f74e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f750:	7dfb      	ldrb	r3, [r7, #23]
}
 800f752:	4618      	mov	r0, r3
 800f754:	371c      	adds	r7, #28
 800f756:	46bd      	mov	sp, r7
 800f758:	bd90      	pop	{r4, r7, pc}
 800f75a:	bf00      	nop
 800f75c:	24000c50 	.word	0x24000c50

0800f760 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f760:	b590      	push	{r4, r7, lr}
 800f762:	b087      	sub	sp, #28
 800f764:	af00      	add	r7, sp, #0
 800f766:	60b9      	str	r1, [r7, #8]
 800f768:	607a      	str	r2, [r7, #4]
 800f76a:	603b      	str	r3, [r7, #0]
 800f76c:	4603      	mov	r3, r0
 800f76e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f770:	7bfb      	ldrb	r3, [r7, #15]
 800f772:	4a0a      	ldr	r2, [pc, #40]	@ (800f79c <disk_write+0x3c>)
 800f774:	009b      	lsls	r3, r3, #2
 800f776:	4413      	add	r3, r2
 800f778:	685b      	ldr	r3, [r3, #4]
 800f77a:	68dc      	ldr	r4, [r3, #12]
 800f77c:	7bfb      	ldrb	r3, [r7, #15]
 800f77e:	4a07      	ldr	r2, [pc, #28]	@ (800f79c <disk_write+0x3c>)
 800f780:	4413      	add	r3, r2
 800f782:	7a18      	ldrb	r0, [r3, #8]
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	687a      	ldr	r2, [r7, #4]
 800f788:	68b9      	ldr	r1, [r7, #8]
 800f78a:	47a0      	blx	r4
 800f78c:	4603      	mov	r3, r0
 800f78e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f790:	7dfb      	ldrb	r3, [r7, #23]
}
 800f792:	4618      	mov	r0, r3
 800f794:	371c      	adds	r7, #28
 800f796:	46bd      	mov	sp, r7
 800f798:	bd90      	pop	{r4, r7, pc}
 800f79a:	bf00      	nop
 800f79c:	24000c50 	.word	0x24000c50

0800f7a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b084      	sub	sp, #16
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	603a      	str	r2, [r7, #0]
 800f7aa:	71fb      	strb	r3, [r7, #7]
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f7b0:	79fb      	ldrb	r3, [r7, #7]
 800f7b2:	4a09      	ldr	r2, [pc, #36]	@ (800f7d8 <disk_ioctl+0x38>)
 800f7b4:	009b      	lsls	r3, r3, #2
 800f7b6:	4413      	add	r3, r2
 800f7b8:	685b      	ldr	r3, [r3, #4]
 800f7ba:	691b      	ldr	r3, [r3, #16]
 800f7bc:	79fa      	ldrb	r2, [r7, #7]
 800f7be:	4906      	ldr	r1, [pc, #24]	@ (800f7d8 <disk_ioctl+0x38>)
 800f7c0:	440a      	add	r2, r1
 800f7c2:	7a10      	ldrb	r0, [r2, #8]
 800f7c4:	79b9      	ldrb	r1, [r7, #6]
 800f7c6:	683a      	ldr	r2, [r7, #0]
 800f7c8:	4798      	blx	r3
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	73fb      	strb	r3, [r7, #15]
  return res;
 800f7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3710      	adds	r7, #16
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}
 800f7d8:	24000c50 	.word	0x24000c50

0800f7dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f7dc:	b480      	push	{r7}
 800f7de:	b085      	sub	sp, #20
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	781b      	ldrb	r3, [r3, #0]
 800f7ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f7ec:	89fb      	ldrh	r3, [r7, #14]
 800f7ee:	021b      	lsls	r3, r3, #8
 800f7f0:	b21a      	sxth	r2, r3
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	b21b      	sxth	r3, r3
 800f7f8:	4313      	orrs	r3, r2
 800f7fa:	b21b      	sxth	r3, r3
 800f7fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f7fe:	89fb      	ldrh	r3, [r7, #14]
}
 800f800:	4618      	mov	r0, r3
 800f802:	3714      	adds	r7, #20
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr

0800f80c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f80c:	b480      	push	{r7}
 800f80e:	b085      	sub	sp, #20
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	3303      	adds	r3, #3
 800f818:	781b      	ldrb	r3, [r3, #0]
 800f81a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	021b      	lsls	r3, r3, #8
 800f820:	687a      	ldr	r2, [r7, #4]
 800f822:	3202      	adds	r2, #2
 800f824:	7812      	ldrb	r2, [r2, #0]
 800f826:	4313      	orrs	r3, r2
 800f828:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	021b      	lsls	r3, r3, #8
 800f82e:	687a      	ldr	r2, [r7, #4]
 800f830:	3201      	adds	r2, #1
 800f832:	7812      	ldrb	r2, [r2, #0]
 800f834:	4313      	orrs	r3, r2
 800f836:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	021b      	lsls	r3, r3, #8
 800f83c:	687a      	ldr	r2, [r7, #4]
 800f83e:	7812      	ldrb	r2, [r2, #0]
 800f840:	4313      	orrs	r3, r2
 800f842:	60fb      	str	r3, [r7, #12]
	return rv;
 800f844:	68fb      	ldr	r3, [r7, #12]
}
 800f846:	4618      	mov	r0, r3
 800f848:	3714      	adds	r7, #20
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr

0800f852 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f852:	b480      	push	{r7}
 800f854:	b083      	sub	sp, #12
 800f856:	af00      	add	r7, sp, #0
 800f858:	6078      	str	r0, [r7, #4]
 800f85a:	460b      	mov	r3, r1
 800f85c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	1c5a      	adds	r2, r3, #1
 800f862:	607a      	str	r2, [r7, #4]
 800f864:	887a      	ldrh	r2, [r7, #2]
 800f866:	b2d2      	uxtb	r2, r2
 800f868:	701a      	strb	r2, [r3, #0]
 800f86a:	887b      	ldrh	r3, [r7, #2]
 800f86c:	0a1b      	lsrs	r3, r3, #8
 800f86e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	1c5a      	adds	r2, r3, #1
 800f874:	607a      	str	r2, [r7, #4]
 800f876:	887a      	ldrh	r2, [r7, #2]
 800f878:	b2d2      	uxtb	r2, r2
 800f87a:	701a      	strb	r2, [r3, #0]
}
 800f87c:	bf00      	nop
 800f87e:	370c      	adds	r7, #12
 800f880:	46bd      	mov	sp, r7
 800f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f886:	4770      	bx	lr

0800f888 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f888:	b480      	push	{r7}
 800f88a:	b083      	sub	sp, #12
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
 800f890:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	1c5a      	adds	r2, r3, #1
 800f896:	607a      	str	r2, [r7, #4]
 800f898:	683a      	ldr	r2, [r7, #0]
 800f89a:	b2d2      	uxtb	r2, r2
 800f89c:	701a      	strb	r2, [r3, #0]
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	0a1b      	lsrs	r3, r3, #8
 800f8a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	1c5a      	adds	r2, r3, #1
 800f8a8:	607a      	str	r2, [r7, #4]
 800f8aa:	683a      	ldr	r2, [r7, #0]
 800f8ac:	b2d2      	uxtb	r2, r2
 800f8ae:	701a      	strb	r2, [r3, #0]
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	0a1b      	lsrs	r3, r3, #8
 800f8b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	1c5a      	adds	r2, r3, #1
 800f8ba:	607a      	str	r2, [r7, #4]
 800f8bc:	683a      	ldr	r2, [r7, #0]
 800f8be:	b2d2      	uxtb	r2, r2
 800f8c0:	701a      	strb	r2, [r3, #0]
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	0a1b      	lsrs	r3, r3, #8
 800f8c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	1c5a      	adds	r2, r3, #1
 800f8cc:	607a      	str	r2, [r7, #4]
 800f8ce:	683a      	ldr	r2, [r7, #0]
 800f8d0:	b2d2      	uxtb	r2, r2
 800f8d2:	701a      	strb	r2, [r3, #0]
}
 800f8d4:	bf00      	nop
 800f8d6:	370c      	adds	r7, #12
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr

0800f8e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f8e0:	b480      	push	{r7}
 800f8e2:	b087      	sub	sp, #28
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	60f8      	str	r0, [r7, #12]
 800f8e8:	60b9      	str	r1, [r7, #8]
 800f8ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d00d      	beq.n	800f916 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f8fa:	693a      	ldr	r2, [r7, #16]
 800f8fc:	1c53      	adds	r3, r2, #1
 800f8fe:	613b      	str	r3, [r7, #16]
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	1c59      	adds	r1, r3, #1
 800f904:	6179      	str	r1, [r7, #20]
 800f906:	7812      	ldrb	r2, [r2, #0]
 800f908:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	3b01      	subs	r3, #1
 800f90e:	607b      	str	r3, [r7, #4]
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d1f1      	bne.n	800f8fa <mem_cpy+0x1a>
	}
}
 800f916:	bf00      	nop
 800f918:	371c      	adds	r7, #28
 800f91a:	46bd      	mov	sp, r7
 800f91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f920:	4770      	bx	lr

0800f922 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f922:	b480      	push	{r7}
 800f924:	b087      	sub	sp, #28
 800f926:	af00      	add	r7, sp, #0
 800f928:	60f8      	str	r0, [r7, #12]
 800f92a:	60b9      	str	r1, [r7, #8]
 800f92c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	1c5a      	adds	r2, r3, #1
 800f936:	617a      	str	r2, [r7, #20]
 800f938:	68ba      	ldr	r2, [r7, #8]
 800f93a:	b2d2      	uxtb	r2, r2
 800f93c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	3b01      	subs	r3, #1
 800f942:	607b      	str	r3, [r7, #4]
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d1f3      	bne.n	800f932 <mem_set+0x10>
}
 800f94a:	bf00      	nop
 800f94c:	bf00      	nop
 800f94e:	371c      	adds	r7, #28
 800f950:	46bd      	mov	sp, r7
 800f952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f956:	4770      	bx	lr

0800f958 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f958:	b480      	push	{r7}
 800f95a:	b089      	sub	sp, #36	@ 0x24
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	60f8      	str	r0, [r7, #12]
 800f960:	60b9      	str	r1, [r7, #8]
 800f962:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	61fb      	str	r3, [r7, #28]
 800f968:	68bb      	ldr	r3, [r7, #8]
 800f96a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f96c:	2300      	movs	r3, #0
 800f96e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f970:	69fb      	ldr	r3, [r7, #28]
 800f972:	1c5a      	adds	r2, r3, #1
 800f974:	61fa      	str	r2, [r7, #28]
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	4619      	mov	r1, r3
 800f97a:	69bb      	ldr	r3, [r7, #24]
 800f97c:	1c5a      	adds	r2, r3, #1
 800f97e:	61ba      	str	r2, [r7, #24]
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	1acb      	subs	r3, r1, r3
 800f984:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	3b01      	subs	r3, #1
 800f98a:	607b      	str	r3, [r7, #4]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d002      	beq.n	800f998 <mem_cmp+0x40>
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d0eb      	beq.n	800f970 <mem_cmp+0x18>

	return r;
 800f998:	697b      	ldr	r3, [r7, #20]
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	3724      	adds	r7, #36	@ 0x24
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a4:	4770      	bx	lr

0800f9a6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f9a6:	b480      	push	{r7}
 800f9a8:	b083      	sub	sp, #12
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
 800f9ae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f9b0:	e002      	b.n	800f9b8 <chk_chr+0x12>
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	3301      	adds	r3, #1
 800f9b6:	607b      	str	r3, [r7, #4]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	781b      	ldrb	r3, [r3, #0]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d005      	beq.n	800f9cc <chk_chr+0x26>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	d1f2      	bne.n	800f9b2 <chk_chr+0xc>
	return *str;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	781b      	ldrb	r3, [r3, #0]
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	370c      	adds	r7, #12
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr

0800f9dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f9dc:	b480      	push	{r7}
 800f9de:	b085      	sub	sp, #20
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	60bb      	str	r3, [r7, #8]
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	60fb      	str	r3, [r7, #12]
 800f9ee:	e029      	b.n	800fa44 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f9f0:	4a27      	ldr	r2, [pc, #156]	@ (800fa90 <chk_lock+0xb4>)
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	011b      	lsls	r3, r3, #4
 800f9f6:	4413      	add	r3, r2
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d01d      	beq.n	800fa3a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f9fe:	4a24      	ldr	r2, [pc, #144]	@ (800fa90 <chk_lock+0xb4>)
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	011b      	lsls	r3, r3, #4
 800fa04:	4413      	add	r3, r2
 800fa06:	681a      	ldr	r2, [r3, #0]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d116      	bne.n	800fa3e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fa10:	4a1f      	ldr	r2, [pc, #124]	@ (800fa90 <chk_lock+0xb4>)
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	011b      	lsls	r3, r3, #4
 800fa16:	4413      	add	r3, r2
 800fa18:	3304      	adds	r3, #4
 800fa1a:	681a      	ldr	r2, [r3, #0]
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d10c      	bne.n	800fa3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fa24:	4a1a      	ldr	r2, [pc, #104]	@ (800fa90 <chk_lock+0xb4>)
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	011b      	lsls	r3, r3, #4
 800fa2a:	4413      	add	r3, r2
 800fa2c:	3308      	adds	r3, #8
 800fa2e:	681a      	ldr	r2, [r3, #0]
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d102      	bne.n	800fa3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fa38:	e007      	b.n	800fa4a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	3301      	adds	r3, #1
 800fa42:	60fb      	str	r3, [r7, #12]
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	2b01      	cmp	r3, #1
 800fa48:	d9d2      	bls.n	800f9f0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	2b02      	cmp	r3, #2
 800fa4e:	d109      	bne.n	800fa64 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d102      	bne.n	800fa5c <chk_lock+0x80>
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	2b02      	cmp	r3, #2
 800fa5a:	d101      	bne.n	800fa60 <chk_lock+0x84>
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	e010      	b.n	800fa82 <chk_lock+0xa6>
 800fa60:	2312      	movs	r3, #18
 800fa62:	e00e      	b.n	800fa82 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d108      	bne.n	800fa7c <chk_lock+0xa0>
 800fa6a:	4a09      	ldr	r2, [pc, #36]	@ (800fa90 <chk_lock+0xb4>)
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	011b      	lsls	r3, r3, #4
 800fa70:	4413      	add	r3, r2
 800fa72:	330c      	adds	r3, #12
 800fa74:	881b      	ldrh	r3, [r3, #0]
 800fa76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fa7a:	d101      	bne.n	800fa80 <chk_lock+0xa4>
 800fa7c:	2310      	movs	r3, #16
 800fa7e:	e000      	b.n	800fa82 <chk_lock+0xa6>
 800fa80:	2300      	movs	r3, #0
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3714      	adds	r7, #20
 800fa86:	46bd      	mov	sp, r7
 800fa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8c:	4770      	bx	lr
 800fa8e:	bf00      	nop
 800fa90:	24000c30 	.word	0x24000c30

0800fa94 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fa94:	b480      	push	{r7}
 800fa96:	b083      	sub	sp, #12
 800fa98:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	607b      	str	r3, [r7, #4]
 800fa9e:	e002      	b.n	800faa6 <enq_lock+0x12>
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	3301      	adds	r3, #1
 800faa4:	607b      	str	r3, [r7, #4]
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2b01      	cmp	r3, #1
 800faaa:	d806      	bhi.n	800faba <enq_lock+0x26>
 800faac:	4a09      	ldr	r2, [pc, #36]	@ (800fad4 <enq_lock+0x40>)
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	011b      	lsls	r3, r3, #4
 800fab2:	4413      	add	r3, r2
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d1f2      	bne.n	800faa0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2b02      	cmp	r3, #2
 800fabe:	bf14      	ite	ne
 800fac0:	2301      	movne	r3, #1
 800fac2:	2300      	moveq	r3, #0
 800fac4:	b2db      	uxtb	r3, r3
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	370c      	adds	r7, #12
 800faca:	46bd      	mov	sp, r7
 800facc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad0:	4770      	bx	lr
 800fad2:	bf00      	nop
 800fad4:	24000c30 	.word	0x24000c30

0800fad8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fad8:	b480      	push	{r7}
 800fada:	b085      	sub	sp, #20
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fae2:	2300      	movs	r3, #0
 800fae4:	60fb      	str	r3, [r7, #12]
 800fae6:	e01f      	b.n	800fb28 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fae8:	4a41      	ldr	r2, [pc, #260]	@ (800fbf0 <inc_lock+0x118>)
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	011b      	lsls	r3, r3, #4
 800faee:	4413      	add	r3, r2
 800faf0:	681a      	ldr	r2, [r3, #0]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d113      	bne.n	800fb22 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fafa:	4a3d      	ldr	r2, [pc, #244]	@ (800fbf0 <inc_lock+0x118>)
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	011b      	lsls	r3, r3, #4
 800fb00:	4413      	add	r3, r2
 800fb02:	3304      	adds	r3, #4
 800fb04:	681a      	ldr	r2, [r3, #0]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d109      	bne.n	800fb22 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fb0e:	4a38      	ldr	r2, [pc, #224]	@ (800fbf0 <inc_lock+0x118>)
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	011b      	lsls	r3, r3, #4
 800fb14:	4413      	add	r3, r2
 800fb16:	3308      	adds	r3, #8
 800fb18:	681a      	ldr	r2, [r3, #0]
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d006      	beq.n	800fb30 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	3301      	adds	r3, #1
 800fb26:	60fb      	str	r3, [r7, #12]
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	2b01      	cmp	r3, #1
 800fb2c:	d9dc      	bls.n	800fae8 <inc_lock+0x10>
 800fb2e:	e000      	b.n	800fb32 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fb30:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	2b02      	cmp	r3, #2
 800fb36:	d132      	bne.n	800fb9e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	60fb      	str	r3, [r7, #12]
 800fb3c:	e002      	b.n	800fb44 <inc_lock+0x6c>
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	3301      	adds	r3, #1
 800fb42:	60fb      	str	r3, [r7, #12]
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	2b01      	cmp	r3, #1
 800fb48:	d806      	bhi.n	800fb58 <inc_lock+0x80>
 800fb4a:	4a29      	ldr	r2, [pc, #164]	@ (800fbf0 <inc_lock+0x118>)
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	011b      	lsls	r3, r3, #4
 800fb50:	4413      	add	r3, r2
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d1f2      	bne.n	800fb3e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	2b02      	cmp	r3, #2
 800fb5c:	d101      	bne.n	800fb62 <inc_lock+0x8a>
 800fb5e:	2300      	movs	r3, #0
 800fb60:	e040      	b.n	800fbe4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681a      	ldr	r2, [r3, #0]
 800fb66:	4922      	ldr	r1, [pc, #136]	@ (800fbf0 <inc_lock+0x118>)
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	011b      	lsls	r3, r3, #4
 800fb6c:	440b      	add	r3, r1
 800fb6e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	689a      	ldr	r2, [r3, #8]
 800fb74:	491e      	ldr	r1, [pc, #120]	@ (800fbf0 <inc_lock+0x118>)
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	011b      	lsls	r3, r3, #4
 800fb7a:	440b      	add	r3, r1
 800fb7c:	3304      	adds	r3, #4
 800fb7e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	695a      	ldr	r2, [r3, #20]
 800fb84:	491a      	ldr	r1, [pc, #104]	@ (800fbf0 <inc_lock+0x118>)
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	011b      	lsls	r3, r3, #4
 800fb8a:	440b      	add	r3, r1
 800fb8c:	3308      	adds	r3, #8
 800fb8e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fb90:	4a17      	ldr	r2, [pc, #92]	@ (800fbf0 <inc_lock+0x118>)
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	011b      	lsls	r3, r3, #4
 800fb96:	4413      	add	r3, r2
 800fb98:	330c      	adds	r3, #12
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d009      	beq.n	800fbb8 <inc_lock+0xe0>
 800fba4:	4a12      	ldr	r2, [pc, #72]	@ (800fbf0 <inc_lock+0x118>)
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	011b      	lsls	r3, r3, #4
 800fbaa:	4413      	add	r3, r2
 800fbac:	330c      	adds	r3, #12
 800fbae:	881b      	ldrh	r3, [r3, #0]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d001      	beq.n	800fbb8 <inc_lock+0xe0>
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	e015      	b.n	800fbe4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d108      	bne.n	800fbd0 <inc_lock+0xf8>
 800fbbe:	4a0c      	ldr	r2, [pc, #48]	@ (800fbf0 <inc_lock+0x118>)
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	011b      	lsls	r3, r3, #4
 800fbc4:	4413      	add	r3, r2
 800fbc6:	330c      	adds	r3, #12
 800fbc8:	881b      	ldrh	r3, [r3, #0]
 800fbca:	3301      	adds	r3, #1
 800fbcc:	b29a      	uxth	r2, r3
 800fbce:	e001      	b.n	800fbd4 <inc_lock+0xfc>
 800fbd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fbd4:	4906      	ldr	r1, [pc, #24]	@ (800fbf0 <inc_lock+0x118>)
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	011b      	lsls	r3, r3, #4
 800fbda:	440b      	add	r3, r1
 800fbdc:	330c      	adds	r3, #12
 800fbde:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	3301      	adds	r3, #1
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3714      	adds	r7, #20
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr
 800fbf0:	24000c30 	.word	0x24000c30

0800fbf4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	b085      	sub	sp, #20
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	3b01      	subs	r3, #1
 800fc00:	607b      	str	r3, [r7, #4]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	d825      	bhi.n	800fc54 <dec_lock+0x60>
		n = Files[i].ctr;
 800fc08:	4a17      	ldr	r2, [pc, #92]	@ (800fc68 <dec_lock+0x74>)
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	011b      	lsls	r3, r3, #4
 800fc0e:	4413      	add	r3, r2
 800fc10:	330c      	adds	r3, #12
 800fc12:	881b      	ldrh	r3, [r3, #0]
 800fc14:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fc16:	89fb      	ldrh	r3, [r7, #14]
 800fc18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fc1c:	d101      	bne.n	800fc22 <dec_lock+0x2e>
 800fc1e:	2300      	movs	r3, #0
 800fc20:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fc22:	89fb      	ldrh	r3, [r7, #14]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d002      	beq.n	800fc2e <dec_lock+0x3a>
 800fc28:	89fb      	ldrh	r3, [r7, #14]
 800fc2a:	3b01      	subs	r3, #1
 800fc2c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fc2e:	4a0e      	ldr	r2, [pc, #56]	@ (800fc68 <dec_lock+0x74>)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	011b      	lsls	r3, r3, #4
 800fc34:	4413      	add	r3, r2
 800fc36:	330c      	adds	r3, #12
 800fc38:	89fa      	ldrh	r2, [r7, #14]
 800fc3a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fc3c:	89fb      	ldrh	r3, [r7, #14]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d105      	bne.n	800fc4e <dec_lock+0x5a>
 800fc42:	4a09      	ldr	r2, [pc, #36]	@ (800fc68 <dec_lock+0x74>)
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	011b      	lsls	r3, r3, #4
 800fc48:	4413      	add	r3, r2
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	737b      	strb	r3, [r7, #13]
 800fc52:	e001      	b.n	800fc58 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fc54:	2302      	movs	r3, #2
 800fc56:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fc58:	7b7b      	ldrb	r3, [r7, #13]
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3714      	adds	r7, #20
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc64:	4770      	bx	lr
 800fc66:	bf00      	nop
 800fc68:	24000c30 	.word	0x24000c30

0800fc6c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fc6c:	b480      	push	{r7}
 800fc6e:	b085      	sub	sp, #20
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fc74:	2300      	movs	r3, #0
 800fc76:	60fb      	str	r3, [r7, #12]
 800fc78:	e010      	b.n	800fc9c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fc7a:	4a0d      	ldr	r2, [pc, #52]	@ (800fcb0 <clear_lock+0x44>)
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	011b      	lsls	r3, r3, #4
 800fc80:	4413      	add	r3, r2
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d105      	bne.n	800fc96 <clear_lock+0x2a>
 800fc8a:	4a09      	ldr	r2, [pc, #36]	@ (800fcb0 <clear_lock+0x44>)
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	011b      	lsls	r3, r3, #4
 800fc90:	4413      	add	r3, r2
 800fc92:	2200      	movs	r2, #0
 800fc94:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	3301      	adds	r3, #1
 800fc9a:	60fb      	str	r3, [r7, #12]
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	2b01      	cmp	r3, #1
 800fca0:	d9eb      	bls.n	800fc7a <clear_lock+0xe>
	}
}
 800fca2:	bf00      	nop
 800fca4:	bf00      	nop
 800fca6:	3714      	adds	r7, #20
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcae:	4770      	bx	lr
 800fcb0:	24000c30 	.word	0x24000c30

0800fcb4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b086      	sub	sp, #24
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	78db      	ldrb	r3, [r3, #3]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d034      	beq.n	800fd32 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fccc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	7858      	ldrb	r0, [r3, #1]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fcd8:	2301      	movs	r3, #1
 800fcda:	697a      	ldr	r2, [r7, #20]
 800fcdc:	f7ff fd40 	bl	800f760 <disk_write>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d002      	beq.n	800fcec <sync_window+0x38>
			res = FR_DISK_ERR;
 800fce6:	2301      	movs	r3, #1
 800fce8:	73fb      	strb	r3, [r7, #15]
 800fcea:	e022      	b.n	800fd32 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2200      	movs	r2, #0
 800fcf0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6a1b      	ldr	r3, [r3, #32]
 800fcf6:	697a      	ldr	r2, [r7, #20]
 800fcf8:	1ad2      	subs	r2, r2, r3
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	699b      	ldr	r3, [r3, #24]
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d217      	bcs.n	800fd32 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	789b      	ldrb	r3, [r3, #2]
 800fd06:	613b      	str	r3, [r7, #16]
 800fd08:	e010      	b.n	800fd2c <sync_window+0x78>
					wsect += fs->fsize;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	699b      	ldr	r3, [r3, #24]
 800fd0e:	697a      	ldr	r2, [r7, #20]
 800fd10:	4413      	add	r3, r2
 800fd12:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	7858      	ldrb	r0, [r3, #1]
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fd1e:	2301      	movs	r3, #1
 800fd20:	697a      	ldr	r2, [r7, #20]
 800fd22:	f7ff fd1d 	bl	800f760 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	3b01      	subs	r3, #1
 800fd2a:	613b      	str	r3, [r7, #16]
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	2b01      	cmp	r3, #1
 800fd30:	d8eb      	bhi.n	800fd0a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fd32:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3718      	adds	r7, #24
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}

0800fd3c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b084      	sub	sp, #16
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fd46:	2300      	movs	r3, #0
 800fd48:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd4e:	683a      	ldr	r2, [r7, #0]
 800fd50:	429a      	cmp	r2, r3
 800fd52:	d01b      	beq.n	800fd8c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f7ff ffad 	bl	800fcb4 <sync_window>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fd5e:	7bfb      	ldrb	r3, [r7, #15]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d113      	bne.n	800fd8c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	7858      	ldrb	r0, [r3, #1]
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fd6e:	2301      	movs	r3, #1
 800fd70:	683a      	ldr	r2, [r7, #0]
 800fd72:	f7ff fcd5 	bl	800f720 <disk_read>
 800fd76:	4603      	mov	r3, r0
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d004      	beq.n	800fd86 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fd7c:	f04f 33ff 	mov.w	r3, #4294967295
 800fd80:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fd82:	2301      	movs	r3, #1
 800fd84:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	683a      	ldr	r2, [r7, #0]
 800fd8a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800fd8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3710      	adds	r7, #16
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}
	...

0800fd98 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b084      	sub	sp, #16
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f7ff ff87 	bl	800fcb4 <sync_window>
 800fda6:	4603      	mov	r3, r0
 800fda8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fdaa:	7bfb      	ldrb	r3, [r7, #15]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d158      	bne.n	800fe62 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	781b      	ldrb	r3, [r3, #0]
 800fdb4:	2b03      	cmp	r3, #3
 800fdb6:	d148      	bne.n	800fe4a <sync_fs+0xb2>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	791b      	ldrb	r3, [r3, #4]
 800fdbc:	2b01      	cmp	r3, #1
 800fdbe:	d144      	bne.n	800fe4a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	3330      	adds	r3, #48	@ 0x30
 800fdc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fdc8:	2100      	movs	r1, #0
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f7ff fda9 	bl	800f922 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	3330      	adds	r3, #48	@ 0x30
 800fdd4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fdd8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7ff fd38 	bl	800f852 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	3330      	adds	r3, #48	@ 0x30
 800fde6:	4921      	ldr	r1, [pc, #132]	@ (800fe6c <sync_fs+0xd4>)
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7ff fd4d 	bl	800f888 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	3330      	adds	r3, #48	@ 0x30
 800fdf2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fdf6:	491e      	ldr	r1, [pc, #120]	@ (800fe70 <sync_fs+0xd8>)
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7ff fd45 	bl	800f888 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	3330      	adds	r3, #48	@ 0x30
 800fe02:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	691b      	ldr	r3, [r3, #16]
 800fe0a:	4619      	mov	r1, r3
 800fe0c:	4610      	mov	r0, r2
 800fe0e:	f7ff fd3b 	bl	800f888 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	3330      	adds	r3, #48	@ 0x30
 800fe16:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	68db      	ldr	r3, [r3, #12]
 800fe1e:	4619      	mov	r1, r3
 800fe20:	4610      	mov	r0, r2
 800fe22:	f7ff fd31 	bl	800f888 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	69db      	ldr	r3, [r3, #28]
 800fe2a:	1c5a      	adds	r2, r3, #1
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	7858      	ldrb	r0, [r3, #1]
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe3e:	2301      	movs	r3, #1
 800fe40:	f7ff fc8e 	bl	800f760 <disk_write>
			fs->fsi_flag = 0;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2200      	movs	r2, #0
 800fe48:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	785b      	ldrb	r3, [r3, #1]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	2100      	movs	r1, #0
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7ff fca4 	bl	800f7a0 <disk_ioctl>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d001      	beq.n	800fe62 <sync_fs+0xca>
 800fe5e:	2301      	movs	r3, #1
 800fe60:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fe62:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3710      	adds	r7, #16
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}
 800fe6c:	41615252 	.word	0x41615252
 800fe70:	61417272 	.word	0x61417272

0800fe74 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fe74:	b480      	push	{r7}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	3b02      	subs	r3, #2
 800fe82:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	695b      	ldr	r3, [r3, #20]
 800fe88:	3b02      	subs	r3, #2
 800fe8a:	683a      	ldr	r2, [r7, #0]
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d301      	bcc.n	800fe94 <clust2sect+0x20>
 800fe90:	2300      	movs	r3, #0
 800fe92:	e008      	b.n	800fea6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	895b      	ldrh	r3, [r3, #10]
 800fe98:	461a      	mov	r2, r3
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	fb03 f202 	mul.w	r2, r3, r2
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fea4:	4413      	add	r3, r2
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	370c      	adds	r7, #12
 800feaa:	46bd      	mov	sp, r7
 800feac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb0:	4770      	bx	lr

0800feb2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800feb2:	b580      	push	{r7, lr}
 800feb4:	b086      	sub	sp, #24
 800feb6:	af00      	add	r7, sp, #0
 800feb8:	6078      	str	r0, [r7, #4]
 800feba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	d904      	bls.n	800fed2 <get_fat+0x20>
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	695b      	ldr	r3, [r3, #20]
 800fecc:	683a      	ldr	r2, [r7, #0]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d302      	bcc.n	800fed8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fed2:	2301      	movs	r3, #1
 800fed4:	617b      	str	r3, [r7, #20]
 800fed6:	e08e      	b.n	800fff6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fed8:	f04f 33ff 	mov.w	r3, #4294967295
 800fedc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fede:	693b      	ldr	r3, [r7, #16]
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	2b03      	cmp	r3, #3
 800fee4:	d061      	beq.n	800ffaa <get_fat+0xf8>
 800fee6:	2b03      	cmp	r3, #3
 800fee8:	dc7b      	bgt.n	800ffe2 <get_fat+0x130>
 800feea:	2b01      	cmp	r3, #1
 800feec:	d002      	beq.n	800fef4 <get_fat+0x42>
 800feee:	2b02      	cmp	r3, #2
 800fef0:	d041      	beq.n	800ff76 <get_fat+0xc4>
 800fef2:	e076      	b.n	800ffe2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	60fb      	str	r3, [r7, #12]
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	085b      	lsrs	r3, r3, #1
 800fefc:	68fa      	ldr	r2, [r7, #12]
 800fefe:	4413      	add	r3, r2
 800ff00:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff02:	693b      	ldr	r3, [r7, #16]
 800ff04:	6a1a      	ldr	r2, [r3, #32]
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	0a5b      	lsrs	r3, r3, #9
 800ff0a:	4413      	add	r3, r2
 800ff0c:	4619      	mov	r1, r3
 800ff0e:	6938      	ldr	r0, [r7, #16]
 800ff10:	f7ff ff14 	bl	800fd3c <move_window>
 800ff14:	4603      	mov	r3, r0
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d166      	bne.n	800ffe8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	1c5a      	adds	r2, r3, #1
 800ff1e:	60fa      	str	r2, [r7, #12]
 800ff20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff24:	693a      	ldr	r2, [r7, #16]
 800ff26:	4413      	add	r3, r2
 800ff28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ff2c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	6a1a      	ldr	r2, [r3, #32]
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	0a5b      	lsrs	r3, r3, #9
 800ff36:	4413      	add	r3, r2
 800ff38:	4619      	mov	r1, r3
 800ff3a:	6938      	ldr	r0, [r7, #16]
 800ff3c:	f7ff fefe 	bl	800fd3c <move_window>
 800ff40:	4603      	mov	r3, r0
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d152      	bne.n	800ffec <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff4c:	693a      	ldr	r2, [r7, #16]
 800ff4e:	4413      	add	r3, r2
 800ff50:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ff54:	021b      	lsls	r3, r3, #8
 800ff56:	68ba      	ldr	r2, [r7, #8]
 800ff58:	4313      	orrs	r3, r2
 800ff5a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	f003 0301 	and.w	r3, r3, #1
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d002      	beq.n	800ff6c <get_fat+0xba>
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	091b      	lsrs	r3, r3, #4
 800ff6a:	e002      	b.n	800ff72 <get_fat+0xc0>
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ff72:	617b      	str	r3, [r7, #20]
			break;
 800ff74:	e03f      	b.n	800fff6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	6a1a      	ldr	r2, [r3, #32]
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	0a1b      	lsrs	r3, r3, #8
 800ff7e:	4413      	add	r3, r2
 800ff80:	4619      	mov	r1, r3
 800ff82:	6938      	ldr	r0, [r7, #16]
 800ff84:	f7ff feda 	bl	800fd3c <move_window>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d130      	bne.n	800fff0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	005b      	lsls	r3, r3, #1
 800ff98:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ff9c:	4413      	add	r3, r2
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7ff fc1c 	bl	800f7dc <ld_word>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	617b      	str	r3, [r7, #20]
			break;
 800ffa8:	e025      	b.n	800fff6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	6a1a      	ldr	r2, [r3, #32]
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	09db      	lsrs	r3, r3, #7
 800ffb2:	4413      	add	r3, r2
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	6938      	ldr	r0, [r7, #16]
 800ffb8:	f7ff fec0 	bl	800fd3c <move_window>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d118      	bne.n	800fff4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ffc2:	693b      	ldr	r3, [r7, #16]
 800ffc4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	009b      	lsls	r3, r3, #2
 800ffcc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ffd0:	4413      	add	r3, r2
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7ff fc1a 	bl	800f80c <ld_dword>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ffde:	617b      	str	r3, [r7, #20]
			break;
 800ffe0:	e009      	b.n	800fff6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	617b      	str	r3, [r7, #20]
 800ffe6:	e006      	b.n	800fff6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ffe8:	bf00      	nop
 800ffea:	e004      	b.n	800fff6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ffec:	bf00      	nop
 800ffee:	e002      	b.n	800fff6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fff0:	bf00      	nop
 800fff2:	e000      	b.n	800fff6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fff4:	bf00      	nop
		}
	}

	return val;
 800fff6:	697b      	ldr	r3, [r7, #20]
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	3718      	adds	r7, #24
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}

08010000 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010000:	b590      	push	{r4, r7, lr}
 8010002:	b089      	sub	sp, #36	@ 0x24
 8010004:	af00      	add	r7, sp, #0
 8010006:	60f8      	str	r0, [r7, #12]
 8010008:	60b9      	str	r1, [r7, #8]
 801000a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801000c:	2302      	movs	r3, #2
 801000e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	2b01      	cmp	r3, #1
 8010014:	f240 80d9 	bls.w	80101ca <put_fat+0x1ca>
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	695b      	ldr	r3, [r3, #20]
 801001c:	68ba      	ldr	r2, [r7, #8]
 801001e:	429a      	cmp	r2, r3
 8010020:	f080 80d3 	bcs.w	80101ca <put_fat+0x1ca>
		switch (fs->fs_type) {
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	781b      	ldrb	r3, [r3, #0]
 8010028:	2b03      	cmp	r3, #3
 801002a:	f000 8096 	beq.w	801015a <put_fat+0x15a>
 801002e:	2b03      	cmp	r3, #3
 8010030:	f300 80cb 	bgt.w	80101ca <put_fat+0x1ca>
 8010034:	2b01      	cmp	r3, #1
 8010036:	d002      	beq.n	801003e <put_fat+0x3e>
 8010038:	2b02      	cmp	r3, #2
 801003a:	d06e      	beq.n	801011a <put_fat+0x11a>
 801003c:	e0c5      	b.n	80101ca <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	61bb      	str	r3, [r7, #24]
 8010042:	69bb      	ldr	r3, [r7, #24]
 8010044:	085b      	lsrs	r3, r3, #1
 8010046:	69ba      	ldr	r2, [r7, #24]
 8010048:	4413      	add	r3, r2
 801004a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	6a1a      	ldr	r2, [r3, #32]
 8010050:	69bb      	ldr	r3, [r7, #24]
 8010052:	0a5b      	lsrs	r3, r3, #9
 8010054:	4413      	add	r3, r2
 8010056:	4619      	mov	r1, r3
 8010058:	68f8      	ldr	r0, [r7, #12]
 801005a:	f7ff fe6f 	bl	800fd3c <move_window>
 801005e:	4603      	mov	r3, r0
 8010060:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010062:	7ffb      	ldrb	r3, [r7, #31]
 8010064:	2b00      	cmp	r3, #0
 8010066:	f040 80a9 	bne.w	80101bc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010070:	69bb      	ldr	r3, [r7, #24]
 8010072:	1c59      	adds	r1, r3, #1
 8010074:	61b9      	str	r1, [r7, #24]
 8010076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801007a:	4413      	add	r3, r2
 801007c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	f003 0301 	and.w	r3, r3, #1
 8010084:	2b00      	cmp	r3, #0
 8010086:	d00d      	beq.n	80100a4 <put_fat+0xa4>
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	781b      	ldrb	r3, [r3, #0]
 801008c:	b25b      	sxtb	r3, r3
 801008e:	f003 030f 	and.w	r3, r3, #15
 8010092:	b25a      	sxtb	r2, r3
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	b2db      	uxtb	r3, r3
 8010098:	011b      	lsls	r3, r3, #4
 801009a:	b25b      	sxtb	r3, r3
 801009c:	4313      	orrs	r3, r2
 801009e:	b25b      	sxtb	r3, r3
 80100a0:	b2db      	uxtb	r3, r3
 80100a2:	e001      	b.n	80100a8 <put_fat+0xa8>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	b2db      	uxtb	r3, r3
 80100a8:	697a      	ldr	r2, [r7, #20]
 80100aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	2201      	movs	r2, #1
 80100b0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	6a1a      	ldr	r2, [r3, #32]
 80100b6:	69bb      	ldr	r3, [r7, #24]
 80100b8:	0a5b      	lsrs	r3, r3, #9
 80100ba:	4413      	add	r3, r2
 80100bc:	4619      	mov	r1, r3
 80100be:	68f8      	ldr	r0, [r7, #12]
 80100c0:	f7ff fe3c 	bl	800fd3c <move_window>
 80100c4:	4603      	mov	r3, r0
 80100c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80100c8:	7ffb      	ldrb	r3, [r7, #31]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d178      	bne.n	80101c0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80100d4:	69bb      	ldr	r3, [r7, #24]
 80100d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100da:	4413      	add	r3, r2
 80100dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	f003 0301 	and.w	r3, r3, #1
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d003      	beq.n	80100f0 <put_fat+0xf0>
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	091b      	lsrs	r3, r3, #4
 80100ec:	b2db      	uxtb	r3, r3
 80100ee:	e00e      	b.n	801010e <put_fat+0x10e>
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	b25b      	sxtb	r3, r3
 80100f6:	f023 030f 	bic.w	r3, r3, #15
 80100fa:	b25a      	sxtb	r2, r3
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	0a1b      	lsrs	r3, r3, #8
 8010100:	b25b      	sxtb	r3, r3
 8010102:	f003 030f 	and.w	r3, r3, #15
 8010106:	b25b      	sxtb	r3, r3
 8010108:	4313      	orrs	r3, r2
 801010a:	b25b      	sxtb	r3, r3
 801010c:	b2db      	uxtb	r3, r3
 801010e:	697a      	ldr	r2, [r7, #20]
 8010110:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	2201      	movs	r2, #1
 8010116:	70da      	strb	r2, [r3, #3]
			break;
 8010118:	e057      	b.n	80101ca <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	6a1a      	ldr	r2, [r3, #32]
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	0a1b      	lsrs	r3, r3, #8
 8010122:	4413      	add	r3, r2
 8010124:	4619      	mov	r1, r3
 8010126:	68f8      	ldr	r0, [r7, #12]
 8010128:	f7ff fe08 	bl	800fd3c <move_window>
 801012c:	4603      	mov	r3, r0
 801012e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010130:	7ffb      	ldrb	r3, [r7, #31]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d146      	bne.n	80101c4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	005b      	lsls	r3, r3, #1
 8010140:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8010144:	4413      	add	r3, r2
 8010146:	687a      	ldr	r2, [r7, #4]
 8010148:	b292      	uxth	r2, r2
 801014a:	4611      	mov	r1, r2
 801014c:	4618      	mov	r0, r3
 801014e:	f7ff fb80 	bl	800f852 <st_word>
			fs->wflag = 1;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	2201      	movs	r2, #1
 8010156:	70da      	strb	r2, [r3, #3]
			break;
 8010158:	e037      	b.n	80101ca <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	6a1a      	ldr	r2, [r3, #32]
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	09db      	lsrs	r3, r3, #7
 8010162:	4413      	add	r3, r2
 8010164:	4619      	mov	r1, r3
 8010166:	68f8      	ldr	r0, [r7, #12]
 8010168:	f7ff fde8 	bl	800fd3c <move_window>
 801016c:	4603      	mov	r3, r0
 801016e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010170:	7ffb      	ldrb	r3, [r7, #31]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d128      	bne.n	80101c8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	009b      	lsls	r3, r3, #2
 8010186:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801018a:	4413      	add	r3, r2
 801018c:	4618      	mov	r0, r3
 801018e:	f7ff fb3d 	bl	800f80c <ld_dword>
 8010192:	4603      	mov	r3, r0
 8010194:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8010198:	4323      	orrs	r3, r4
 801019a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	009b      	lsls	r3, r3, #2
 80101a6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80101aa:	4413      	add	r3, r2
 80101ac:	6879      	ldr	r1, [r7, #4]
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7ff fb6a 	bl	800f888 <st_dword>
			fs->wflag = 1;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2201      	movs	r2, #1
 80101b8:	70da      	strb	r2, [r3, #3]
			break;
 80101ba:	e006      	b.n	80101ca <put_fat+0x1ca>
			if (res != FR_OK) break;
 80101bc:	bf00      	nop
 80101be:	e004      	b.n	80101ca <put_fat+0x1ca>
			if (res != FR_OK) break;
 80101c0:	bf00      	nop
 80101c2:	e002      	b.n	80101ca <put_fat+0x1ca>
			if (res != FR_OK) break;
 80101c4:	bf00      	nop
 80101c6:	e000      	b.n	80101ca <put_fat+0x1ca>
			if (res != FR_OK) break;
 80101c8:	bf00      	nop
		}
	}
	return res;
 80101ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3724      	adds	r7, #36	@ 0x24
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd90      	pop	{r4, r7, pc}

080101d4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b088      	sub	sp, #32
 80101d8:	af00      	add	r7, sp, #0
 80101da:	60f8      	str	r0, [r7, #12]
 80101dc:	60b9      	str	r1, [r7, #8]
 80101de:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80101e0:	2300      	movs	r3, #0
 80101e2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	2b01      	cmp	r3, #1
 80101ee:	d904      	bls.n	80101fa <remove_chain+0x26>
 80101f0:	69bb      	ldr	r3, [r7, #24]
 80101f2:	695b      	ldr	r3, [r3, #20]
 80101f4:	68ba      	ldr	r2, [r7, #8]
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d301      	bcc.n	80101fe <remove_chain+0x2a>
 80101fa:	2302      	movs	r3, #2
 80101fc:	e04b      	b.n	8010296 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d00c      	beq.n	801021e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010204:	f04f 32ff 	mov.w	r2, #4294967295
 8010208:	6879      	ldr	r1, [r7, #4]
 801020a:	69b8      	ldr	r0, [r7, #24]
 801020c:	f7ff fef8 	bl	8010000 <put_fat>
 8010210:	4603      	mov	r3, r0
 8010212:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010214:	7ffb      	ldrb	r3, [r7, #31]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d001      	beq.n	801021e <remove_chain+0x4a>
 801021a:	7ffb      	ldrb	r3, [r7, #31]
 801021c:	e03b      	b.n	8010296 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801021e:	68b9      	ldr	r1, [r7, #8]
 8010220:	68f8      	ldr	r0, [r7, #12]
 8010222:	f7ff fe46 	bl	800feb2 <get_fat>
 8010226:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010228:	697b      	ldr	r3, [r7, #20]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d031      	beq.n	8010292 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	2b01      	cmp	r3, #1
 8010232:	d101      	bne.n	8010238 <remove_chain+0x64>
 8010234:	2302      	movs	r3, #2
 8010236:	e02e      	b.n	8010296 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801023e:	d101      	bne.n	8010244 <remove_chain+0x70>
 8010240:	2301      	movs	r3, #1
 8010242:	e028      	b.n	8010296 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010244:	2200      	movs	r2, #0
 8010246:	68b9      	ldr	r1, [r7, #8]
 8010248:	69b8      	ldr	r0, [r7, #24]
 801024a:	f7ff fed9 	bl	8010000 <put_fat>
 801024e:	4603      	mov	r3, r0
 8010250:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010252:	7ffb      	ldrb	r3, [r7, #31]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d001      	beq.n	801025c <remove_chain+0x88>
 8010258:	7ffb      	ldrb	r3, [r7, #31]
 801025a:	e01c      	b.n	8010296 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801025c:	69bb      	ldr	r3, [r7, #24]
 801025e:	691a      	ldr	r2, [r3, #16]
 8010260:	69bb      	ldr	r3, [r7, #24]
 8010262:	695b      	ldr	r3, [r3, #20]
 8010264:	3b02      	subs	r3, #2
 8010266:	429a      	cmp	r2, r3
 8010268:	d20b      	bcs.n	8010282 <remove_chain+0xae>
			fs->free_clst++;
 801026a:	69bb      	ldr	r3, [r7, #24]
 801026c:	691b      	ldr	r3, [r3, #16]
 801026e:	1c5a      	adds	r2, r3, #1
 8010270:	69bb      	ldr	r3, [r7, #24]
 8010272:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8010274:	69bb      	ldr	r3, [r7, #24]
 8010276:	791b      	ldrb	r3, [r3, #4]
 8010278:	f043 0301 	orr.w	r3, r3, #1
 801027c:	b2da      	uxtb	r2, r3
 801027e:	69bb      	ldr	r3, [r7, #24]
 8010280:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010286:	69bb      	ldr	r3, [r7, #24]
 8010288:	695b      	ldr	r3, [r3, #20]
 801028a:	68ba      	ldr	r2, [r7, #8]
 801028c:	429a      	cmp	r2, r3
 801028e:	d3c6      	bcc.n	801021e <remove_chain+0x4a>
 8010290:	e000      	b.n	8010294 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010292:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010294:	2300      	movs	r3, #0
}
 8010296:	4618      	mov	r0, r3
 8010298:	3720      	adds	r7, #32
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}

0801029e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801029e:	b580      	push	{r7, lr}
 80102a0:	b088      	sub	sp, #32
 80102a2:	af00      	add	r7, sp, #0
 80102a4:	6078      	str	r0, [r7, #4]
 80102a6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d10d      	bne.n	80102d0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80102b4:	693b      	ldr	r3, [r7, #16]
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80102ba:	69bb      	ldr	r3, [r7, #24]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d004      	beq.n	80102ca <create_chain+0x2c>
 80102c0:	693b      	ldr	r3, [r7, #16]
 80102c2:	695b      	ldr	r3, [r3, #20]
 80102c4:	69ba      	ldr	r2, [r7, #24]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d31b      	bcc.n	8010302 <create_chain+0x64>
 80102ca:	2301      	movs	r3, #1
 80102cc:	61bb      	str	r3, [r7, #24]
 80102ce:	e018      	b.n	8010302 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80102d0:	6839      	ldr	r1, [r7, #0]
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f7ff fded 	bl	800feb2 <get_fat>
 80102d8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2b01      	cmp	r3, #1
 80102de:	d801      	bhi.n	80102e4 <create_chain+0x46>
 80102e0:	2301      	movs	r3, #1
 80102e2:	e070      	b.n	80103c6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ea:	d101      	bne.n	80102f0 <create_chain+0x52>
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	e06a      	b.n	80103c6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80102f0:	693b      	ldr	r3, [r7, #16]
 80102f2:	695b      	ldr	r3, [r3, #20]
 80102f4:	68fa      	ldr	r2, [r7, #12]
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d201      	bcs.n	80102fe <create_chain+0x60>
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	e063      	b.n	80103c6 <create_chain+0x128>
		scl = clst;
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010302:	69bb      	ldr	r3, [r7, #24]
 8010304:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010306:	69fb      	ldr	r3, [r7, #28]
 8010308:	3301      	adds	r3, #1
 801030a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801030c:	693b      	ldr	r3, [r7, #16]
 801030e:	695b      	ldr	r3, [r3, #20]
 8010310:	69fa      	ldr	r2, [r7, #28]
 8010312:	429a      	cmp	r2, r3
 8010314:	d307      	bcc.n	8010326 <create_chain+0x88>
				ncl = 2;
 8010316:	2302      	movs	r3, #2
 8010318:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801031a:	69fa      	ldr	r2, [r7, #28]
 801031c:	69bb      	ldr	r3, [r7, #24]
 801031e:	429a      	cmp	r2, r3
 8010320:	d901      	bls.n	8010326 <create_chain+0x88>
 8010322:	2300      	movs	r3, #0
 8010324:	e04f      	b.n	80103c6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010326:	69f9      	ldr	r1, [r7, #28]
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	f7ff fdc2 	bl	800feb2 <get_fat>
 801032e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d00e      	beq.n	8010354 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2b01      	cmp	r3, #1
 801033a:	d003      	beq.n	8010344 <create_chain+0xa6>
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010342:	d101      	bne.n	8010348 <create_chain+0xaa>
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	e03e      	b.n	80103c6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010348:	69fa      	ldr	r2, [r7, #28]
 801034a:	69bb      	ldr	r3, [r7, #24]
 801034c:	429a      	cmp	r2, r3
 801034e:	d1da      	bne.n	8010306 <create_chain+0x68>
 8010350:	2300      	movs	r3, #0
 8010352:	e038      	b.n	80103c6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010354:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010356:	f04f 32ff 	mov.w	r2, #4294967295
 801035a:	69f9      	ldr	r1, [r7, #28]
 801035c:	6938      	ldr	r0, [r7, #16]
 801035e:	f7ff fe4f 	bl	8010000 <put_fat>
 8010362:	4603      	mov	r3, r0
 8010364:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010366:	7dfb      	ldrb	r3, [r7, #23]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d109      	bne.n	8010380 <create_chain+0xe2>
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d006      	beq.n	8010380 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010372:	69fa      	ldr	r2, [r7, #28]
 8010374:	6839      	ldr	r1, [r7, #0]
 8010376:	6938      	ldr	r0, [r7, #16]
 8010378:	f7ff fe42 	bl	8010000 <put_fat>
 801037c:	4603      	mov	r3, r0
 801037e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010380:	7dfb      	ldrb	r3, [r7, #23]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d116      	bne.n	80103b4 <create_chain+0x116>
		fs->last_clst = ncl;
 8010386:	693b      	ldr	r3, [r7, #16]
 8010388:	69fa      	ldr	r2, [r7, #28]
 801038a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801038c:	693b      	ldr	r3, [r7, #16]
 801038e:	691a      	ldr	r2, [r3, #16]
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	695b      	ldr	r3, [r3, #20]
 8010394:	3b02      	subs	r3, #2
 8010396:	429a      	cmp	r2, r3
 8010398:	d804      	bhi.n	80103a4 <create_chain+0x106>
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	691b      	ldr	r3, [r3, #16]
 801039e:	1e5a      	subs	r2, r3, #1
 80103a0:	693b      	ldr	r3, [r7, #16]
 80103a2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	791b      	ldrb	r3, [r3, #4]
 80103a8:	f043 0301 	orr.w	r3, r3, #1
 80103ac:	b2da      	uxtb	r2, r3
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	711a      	strb	r2, [r3, #4]
 80103b2:	e007      	b.n	80103c4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80103b4:	7dfb      	ldrb	r3, [r7, #23]
 80103b6:	2b01      	cmp	r3, #1
 80103b8:	d102      	bne.n	80103c0 <create_chain+0x122>
 80103ba:	f04f 33ff 	mov.w	r3, #4294967295
 80103be:	e000      	b.n	80103c2 <create_chain+0x124>
 80103c0:	2301      	movs	r3, #1
 80103c2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80103c4:	69fb      	ldr	r3, [r7, #28]
}
 80103c6:	4618      	mov	r0, r3
 80103c8:	3720      	adds	r7, #32
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd80      	pop	{r7, pc}

080103ce <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80103ce:	b480      	push	{r7}
 80103d0:	b087      	sub	sp, #28
 80103d2:	af00      	add	r7, sp, #0
 80103d4:	6078      	str	r0, [r7, #4]
 80103d6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103e2:	3304      	adds	r3, #4
 80103e4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	0a5b      	lsrs	r3, r3, #9
 80103ea:	68fa      	ldr	r2, [r7, #12]
 80103ec:	8952      	ldrh	r2, [r2, #10]
 80103ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80103f2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	1d1a      	adds	r2, r3, #4
 80103f8:	613a      	str	r2, [r7, #16]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d101      	bne.n	8010408 <clmt_clust+0x3a>
 8010404:	2300      	movs	r3, #0
 8010406:	e010      	b.n	801042a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010408:	697a      	ldr	r2, [r7, #20]
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	429a      	cmp	r2, r3
 801040e:	d307      	bcc.n	8010420 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010410:	697a      	ldr	r2, [r7, #20]
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	1ad3      	subs	r3, r2, r3
 8010416:	617b      	str	r3, [r7, #20]
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	3304      	adds	r3, #4
 801041c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801041e:	e7e9      	b.n	80103f4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010420:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010422:	693b      	ldr	r3, [r7, #16]
 8010424:	681a      	ldr	r2, [r3, #0]
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	4413      	add	r3, r2
}
 801042a:	4618      	mov	r0, r3
 801042c:	371c      	adds	r7, #28
 801042e:	46bd      	mov	sp, r7
 8010430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010434:	4770      	bx	lr

08010436 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010436:	b580      	push	{r7, lr}
 8010438:	b086      	sub	sp, #24
 801043a:	af00      	add	r7, sp, #0
 801043c:	6078      	str	r0, [r7, #4]
 801043e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801044c:	d204      	bcs.n	8010458 <dir_sdi+0x22>
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	f003 031f 	and.w	r3, r3, #31
 8010454:	2b00      	cmp	r3, #0
 8010456:	d001      	beq.n	801045c <dir_sdi+0x26>
		return FR_INT_ERR;
 8010458:	2302      	movs	r3, #2
 801045a:	e063      	b.n	8010524 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	683a      	ldr	r2, [r7, #0]
 8010460:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	689b      	ldr	r3, [r3, #8]
 8010466:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d106      	bne.n	801047c <dir_sdi+0x46>
 801046e:	693b      	ldr	r3, [r7, #16]
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	2b02      	cmp	r3, #2
 8010474:	d902      	bls.n	801047c <dir_sdi+0x46>
		clst = fs->dirbase;
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801047a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d10c      	bne.n	801049c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	095b      	lsrs	r3, r3, #5
 8010486:	693a      	ldr	r2, [r7, #16]
 8010488:	8912      	ldrh	r2, [r2, #8]
 801048a:	4293      	cmp	r3, r2
 801048c:	d301      	bcc.n	8010492 <dir_sdi+0x5c>
 801048e:	2302      	movs	r3, #2
 8010490:	e048      	b.n	8010524 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	61da      	str	r2, [r3, #28]
 801049a:	e029      	b.n	80104f0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801049c:	693b      	ldr	r3, [r7, #16]
 801049e:	895b      	ldrh	r3, [r3, #10]
 80104a0:	025b      	lsls	r3, r3, #9
 80104a2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80104a4:	e019      	b.n	80104da <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6979      	ldr	r1, [r7, #20]
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7ff fd01 	bl	800feb2 <get_fat>
 80104b0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80104b2:	697b      	ldr	r3, [r7, #20]
 80104b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104b8:	d101      	bne.n	80104be <dir_sdi+0x88>
 80104ba:	2301      	movs	r3, #1
 80104bc:	e032      	b.n	8010524 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	2b01      	cmp	r3, #1
 80104c2:	d904      	bls.n	80104ce <dir_sdi+0x98>
 80104c4:	693b      	ldr	r3, [r7, #16]
 80104c6:	695b      	ldr	r3, [r3, #20]
 80104c8:	697a      	ldr	r2, [r7, #20]
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d301      	bcc.n	80104d2 <dir_sdi+0x9c>
 80104ce:	2302      	movs	r3, #2
 80104d0:	e028      	b.n	8010524 <dir_sdi+0xee>
			ofs -= csz;
 80104d2:	683a      	ldr	r2, [r7, #0]
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	1ad3      	subs	r3, r2, r3
 80104d8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80104da:	683a      	ldr	r2, [r7, #0]
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	429a      	cmp	r2, r3
 80104e0:	d2e1      	bcs.n	80104a6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80104e2:	6979      	ldr	r1, [r7, #20]
 80104e4:	6938      	ldr	r0, [r7, #16]
 80104e6:	f7ff fcc5 	bl	800fe74 <clust2sect>
 80104ea:	4602      	mov	r2, r0
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	697a      	ldr	r2, [r7, #20]
 80104f4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	69db      	ldr	r3, [r3, #28]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d101      	bne.n	8010502 <dir_sdi+0xcc>
 80104fe:	2302      	movs	r3, #2
 8010500:	e010      	b.n	8010524 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	69da      	ldr	r2, [r3, #28]
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	0a5b      	lsrs	r3, r3, #9
 801050a:	441a      	add	r2, r3
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801051c:	441a      	add	r2, r3
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010522:	2300      	movs	r3, #0
}
 8010524:	4618      	mov	r0, r3
 8010526:	3718      	adds	r7, #24
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}

0801052c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b086      	sub	sp, #24
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	695b      	ldr	r3, [r3, #20]
 8010540:	3320      	adds	r3, #32
 8010542:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	69db      	ldr	r3, [r3, #28]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d003      	beq.n	8010554 <dir_next+0x28>
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010552:	d301      	bcc.n	8010558 <dir_next+0x2c>
 8010554:	2304      	movs	r3, #4
 8010556:	e0aa      	b.n	80106ae <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010558:	68bb      	ldr	r3, [r7, #8]
 801055a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801055e:	2b00      	cmp	r3, #0
 8010560:	f040 8098 	bne.w	8010694 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	69db      	ldr	r3, [r3, #28]
 8010568:	1c5a      	adds	r2, r3, #1
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	699b      	ldr	r3, [r3, #24]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d10b      	bne.n	801058e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	095b      	lsrs	r3, r3, #5
 801057a:	68fa      	ldr	r2, [r7, #12]
 801057c:	8912      	ldrh	r2, [r2, #8]
 801057e:	4293      	cmp	r3, r2
 8010580:	f0c0 8088 	bcc.w	8010694 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2200      	movs	r2, #0
 8010588:	61da      	str	r2, [r3, #28]
 801058a:	2304      	movs	r3, #4
 801058c:	e08f      	b.n	80106ae <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	0a5b      	lsrs	r3, r3, #9
 8010592:	68fa      	ldr	r2, [r7, #12]
 8010594:	8952      	ldrh	r2, [r2, #10]
 8010596:	3a01      	subs	r2, #1
 8010598:	4013      	ands	r3, r2
 801059a:	2b00      	cmp	r3, #0
 801059c:	d17a      	bne.n	8010694 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801059e:	687a      	ldr	r2, [r7, #4]
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	699b      	ldr	r3, [r3, #24]
 80105a4:	4619      	mov	r1, r3
 80105a6:	4610      	mov	r0, r2
 80105a8:	f7ff fc83 	bl	800feb2 <get_fat>
 80105ac:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80105ae:	697b      	ldr	r3, [r7, #20]
 80105b0:	2b01      	cmp	r3, #1
 80105b2:	d801      	bhi.n	80105b8 <dir_next+0x8c>
 80105b4:	2302      	movs	r3, #2
 80105b6:	e07a      	b.n	80106ae <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105be:	d101      	bne.n	80105c4 <dir_next+0x98>
 80105c0:	2301      	movs	r3, #1
 80105c2:	e074      	b.n	80106ae <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	695b      	ldr	r3, [r3, #20]
 80105c8:	697a      	ldr	r2, [r7, #20]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d358      	bcc.n	8010680 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d104      	bne.n	80105de <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2200      	movs	r2, #0
 80105d8:	61da      	str	r2, [r3, #28]
 80105da:	2304      	movs	r3, #4
 80105dc:	e067      	b.n	80106ae <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80105de:	687a      	ldr	r2, [r7, #4]
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	699b      	ldr	r3, [r3, #24]
 80105e4:	4619      	mov	r1, r3
 80105e6:	4610      	mov	r0, r2
 80105e8:	f7ff fe59 	bl	801029e <create_chain>
 80105ec:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d101      	bne.n	80105f8 <dir_next+0xcc>
 80105f4:	2307      	movs	r3, #7
 80105f6:	e05a      	b.n	80106ae <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	d101      	bne.n	8010602 <dir_next+0xd6>
 80105fe:	2302      	movs	r3, #2
 8010600:	e055      	b.n	80106ae <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010608:	d101      	bne.n	801060e <dir_next+0xe2>
 801060a:	2301      	movs	r3, #1
 801060c:	e04f      	b.n	80106ae <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801060e:	68f8      	ldr	r0, [r7, #12]
 8010610:	f7ff fb50 	bl	800fcb4 <sync_window>
 8010614:	4603      	mov	r3, r0
 8010616:	2b00      	cmp	r3, #0
 8010618:	d001      	beq.n	801061e <dir_next+0xf2>
 801061a:	2301      	movs	r3, #1
 801061c:	e047      	b.n	80106ae <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	3330      	adds	r3, #48	@ 0x30
 8010622:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010626:	2100      	movs	r1, #0
 8010628:	4618      	mov	r0, r3
 801062a:	f7ff f97a 	bl	800f922 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801062e:	2300      	movs	r3, #0
 8010630:	613b      	str	r3, [r7, #16]
 8010632:	6979      	ldr	r1, [r7, #20]
 8010634:	68f8      	ldr	r0, [r7, #12]
 8010636:	f7ff fc1d 	bl	800fe74 <clust2sect>
 801063a:	4602      	mov	r2, r0
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010640:	e012      	b.n	8010668 <dir_next+0x13c>
						fs->wflag = 1;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	2201      	movs	r2, #1
 8010646:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010648:	68f8      	ldr	r0, [r7, #12]
 801064a:	f7ff fb33 	bl	800fcb4 <sync_window>
 801064e:	4603      	mov	r3, r0
 8010650:	2b00      	cmp	r3, #0
 8010652:	d001      	beq.n	8010658 <dir_next+0x12c>
 8010654:	2301      	movs	r3, #1
 8010656:	e02a      	b.n	80106ae <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	3301      	adds	r3, #1
 801065c:	613b      	str	r3, [r7, #16]
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010662:	1c5a      	adds	r2, r3, #1
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	895b      	ldrh	r3, [r3, #10]
 801066c:	461a      	mov	r2, r3
 801066e:	693b      	ldr	r3, [r7, #16]
 8010670:	4293      	cmp	r3, r2
 8010672:	d3e6      	bcc.n	8010642 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010678:	693b      	ldr	r3, [r7, #16]
 801067a:	1ad2      	subs	r2, r2, r3
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	697a      	ldr	r2, [r7, #20]
 8010684:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010686:	6979      	ldr	r1, [r7, #20]
 8010688:	68f8      	ldr	r0, [r7, #12]
 801068a:	f7ff fbf3 	bl	800fe74 <clust2sect>
 801068e:	4602      	mov	r2, r0
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	68ba      	ldr	r2, [r7, #8]
 8010698:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106a6:	441a      	add	r2, r3
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80106ac:	2300      	movs	r3, #0
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	3718      	adds	r7, #24
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}

080106b6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80106b6:	b580      	push	{r7, lr}
 80106b8:	b086      	sub	sp, #24
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	6078      	str	r0, [r7, #4]
 80106be:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80106c6:	2100      	movs	r1, #0
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f7ff feb4 	bl	8010436 <dir_sdi>
 80106ce:	4603      	mov	r3, r0
 80106d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80106d2:	7dfb      	ldrb	r3, [r7, #23]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d12b      	bne.n	8010730 <dir_alloc+0x7a>
		n = 0;
 80106d8:	2300      	movs	r3, #0
 80106da:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	69db      	ldr	r3, [r3, #28]
 80106e0:	4619      	mov	r1, r3
 80106e2:	68f8      	ldr	r0, [r7, #12]
 80106e4:	f7ff fb2a 	bl	800fd3c <move_window>
 80106e8:	4603      	mov	r3, r0
 80106ea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80106ec:	7dfb      	ldrb	r3, [r7, #23]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d11d      	bne.n	801072e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	6a1b      	ldr	r3, [r3, #32]
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	2be5      	cmp	r3, #229	@ 0xe5
 80106fa:	d004      	beq.n	8010706 <dir_alloc+0x50>
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6a1b      	ldr	r3, [r3, #32]
 8010700:	781b      	ldrb	r3, [r3, #0]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d107      	bne.n	8010716 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010706:	693b      	ldr	r3, [r7, #16]
 8010708:	3301      	adds	r3, #1
 801070a:	613b      	str	r3, [r7, #16]
 801070c:	693a      	ldr	r2, [r7, #16]
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	429a      	cmp	r2, r3
 8010712:	d102      	bne.n	801071a <dir_alloc+0x64>
 8010714:	e00c      	b.n	8010730 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010716:	2300      	movs	r3, #0
 8010718:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801071a:	2101      	movs	r1, #1
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f7ff ff05 	bl	801052c <dir_next>
 8010722:	4603      	mov	r3, r0
 8010724:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010726:	7dfb      	ldrb	r3, [r7, #23]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d0d7      	beq.n	80106dc <dir_alloc+0x26>
 801072c:	e000      	b.n	8010730 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801072e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010730:	7dfb      	ldrb	r3, [r7, #23]
 8010732:	2b04      	cmp	r3, #4
 8010734:	d101      	bne.n	801073a <dir_alloc+0x84>
 8010736:	2307      	movs	r3, #7
 8010738:	75fb      	strb	r3, [r7, #23]
	return res;
 801073a:	7dfb      	ldrb	r3, [r7, #23]
}
 801073c:	4618      	mov	r0, r3
 801073e:	3718      	adds	r7, #24
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}

08010744 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b084      	sub	sp, #16
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	331a      	adds	r3, #26
 8010752:	4618      	mov	r0, r3
 8010754:	f7ff f842 	bl	800f7dc <ld_word>
 8010758:	4603      	mov	r3, r0
 801075a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	781b      	ldrb	r3, [r3, #0]
 8010760:	2b03      	cmp	r3, #3
 8010762:	d109      	bne.n	8010778 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	3314      	adds	r3, #20
 8010768:	4618      	mov	r0, r3
 801076a:	f7ff f837 	bl	800f7dc <ld_word>
 801076e:	4603      	mov	r3, r0
 8010770:	041b      	lsls	r3, r3, #16
 8010772:	68fa      	ldr	r2, [r7, #12]
 8010774:	4313      	orrs	r3, r2
 8010776:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010778:	68fb      	ldr	r3, [r7, #12]
}
 801077a:	4618      	mov	r0, r3
 801077c:	3710      	adds	r7, #16
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}

08010782 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010782:	b580      	push	{r7, lr}
 8010784:	b084      	sub	sp, #16
 8010786:	af00      	add	r7, sp, #0
 8010788:	60f8      	str	r0, [r7, #12]
 801078a:	60b9      	str	r1, [r7, #8]
 801078c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	331a      	adds	r3, #26
 8010792:	687a      	ldr	r2, [r7, #4]
 8010794:	b292      	uxth	r2, r2
 8010796:	4611      	mov	r1, r2
 8010798:	4618      	mov	r0, r3
 801079a:	f7ff f85a 	bl	800f852 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	2b03      	cmp	r3, #3
 80107a4:	d109      	bne.n	80107ba <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	f103 0214 	add.w	r2, r3, #20
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	0c1b      	lsrs	r3, r3, #16
 80107b0:	b29b      	uxth	r3, r3
 80107b2:	4619      	mov	r1, r3
 80107b4:	4610      	mov	r0, r2
 80107b6:	f7ff f84c 	bl	800f852 <st_word>
	}
}
 80107ba:	bf00      	nop
 80107bc:	3710      	adds	r7, #16
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}

080107c2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80107c2:	b580      	push	{r7, lr}
 80107c4:	b086      	sub	sp, #24
 80107c6:	af00      	add	r7, sp, #0
 80107c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80107d0:	2100      	movs	r1, #0
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f7ff fe2f 	bl	8010436 <dir_sdi>
 80107d8:	4603      	mov	r3, r0
 80107da:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80107dc:	7dfb      	ldrb	r3, [r7, #23]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d001      	beq.n	80107e6 <dir_find+0x24>
 80107e2:	7dfb      	ldrb	r3, [r7, #23]
 80107e4:	e03e      	b.n	8010864 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	69db      	ldr	r3, [r3, #28]
 80107ea:	4619      	mov	r1, r3
 80107ec:	6938      	ldr	r0, [r7, #16]
 80107ee:	f7ff faa5 	bl	800fd3c <move_window>
 80107f2:	4603      	mov	r3, r0
 80107f4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80107f6:	7dfb      	ldrb	r3, [r7, #23]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d12f      	bne.n	801085c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	6a1b      	ldr	r3, [r3, #32]
 8010800:	781b      	ldrb	r3, [r3, #0]
 8010802:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010804:	7bfb      	ldrb	r3, [r7, #15]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d102      	bne.n	8010810 <dir_find+0x4e>
 801080a:	2304      	movs	r3, #4
 801080c:	75fb      	strb	r3, [r7, #23]
 801080e:	e028      	b.n	8010862 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	6a1b      	ldr	r3, [r3, #32]
 8010814:	330b      	adds	r3, #11
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801081c:	b2da      	uxtb	r2, r3
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	6a1b      	ldr	r3, [r3, #32]
 8010826:	330b      	adds	r3, #11
 8010828:	781b      	ldrb	r3, [r3, #0]
 801082a:	f003 0308 	and.w	r3, r3, #8
 801082e:	2b00      	cmp	r3, #0
 8010830:	d10a      	bne.n	8010848 <dir_find+0x86>
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6a18      	ldr	r0, [r3, #32]
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	3324      	adds	r3, #36	@ 0x24
 801083a:	220b      	movs	r2, #11
 801083c:	4619      	mov	r1, r3
 801083e:	f7ff f88b 	bl	800f958 <mem_cmp>
 8010842:	4603      	mov	r3, r0
 8010844:	2b00      	cmp	r3, #0
 8010846:	d00b      	beq.n	8010860 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010848:	2100      	movs	r1, #0
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f7ff fe6e 	bl	801052c <dir_next>
 8010850:	4603      	mov	r3, r0
 8010852:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010854:	7dfb      	ldrb	r3, [r7, #23]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d0c5      	beq.n	80107e6 <dir_find+0x24>
 801085a:	e002      	b.n	8010862 <dir_find+0xa0>
		if (res != FR_OK) break;
 801085c:	bf00      	nop
 801085e:	e000      	b.n	8010862 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010860:	bf00      	nop

	return res;
 8010862:	7dfb      	ldrb	r3, [r7, #23]
}
 8010864:	4618      	mov	r0, r3
 8010866:	3718      	adds	r7, #24
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}

0801086c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b084      	sub	sp, #16
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801087a:	2101      	movs	r1, #1
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f7ff ff1a 	bl	80106b6 <dir_alloc>
 8010882:	4603      	mov	r3, r0
 8010884:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010886:	7bfb      	ldrb	r3, [r7, #15]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d11c      	bne.n	80108c6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	69db      	ldr	r3, [r3, #28]
 8010890:	4619      	mov	r1, r3
 8010892:	68b8      	ldr	r0, [r7, #8]
 8010894:	f7ff fa52 	bl	800fd3c <move_window>
 8010898:	4603      	mov	r3, r0
 801089a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801089c:	7bfb      	ldrb	r3, [r7, #15]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d111      	bne.n	80108c6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	6a1b      	ldr	r3, [r3, #32]
 80108a6:	2220      	movs	r2, #32
 80108a8:	2100      	movs	r1, #0
 80108aa:	4618      	mov	r0, r3
 80108ac:	f7ff f839 	bl	800f922 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6a18      	ldr	r0, [r3, #32]
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	3324      	adds	r3, #36	@ 0x24
 80108b8:	220b      	movs	r2, #11
 80108ba:	4619      	mov	r1, r3
 80108bc:	f7ff f810 	bl	800f8e0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	2201      	movs	r2, #1
 80108c4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80108c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80108c8:	4618      	mov	r0, r3
 80108ca:	3710      	adds	r7, #16
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}

080108d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b088      	sub	sp, #32
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
 80108d8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	60fb      	str	r3, [r7, #12]
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	3324      	adds	r3, #36	@ 0x24
 80108e4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80108e6:	220b      	movs	r2, #11
 80108e8:	2120      	movs	r1, #32
 80108ea:	68b8      	ldr	r0, [r7, #8]
 80108ec:	f7ff f819 	bl	800f922 <mem_set>
	si = i = 0; ni = 8;
 80108f0:	2300      	movs	r3, #0
 80108f2:	613b      	str	r3, [r7, #16]
 80108f4:	693b      	ldr	r3, [r7, #16]
 80108f6:	61fb      	str	r3, [r7, #28]
 80108f8:	2308      	movs	r3, #8
 80108fa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80108fc:	69fb      	ldr	r3, [r7, #28]
 80108fe:	1c5a      	adds	r2, r3, #1
 8010900:	61fa      	str	r2, [r7, #28]
 8010902:	68fa      	ldr	r2, [r7, #12]
 8010904:	4413      	add	r3, r2
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801090a:	7efb      	ldrb	r3, [r7, #27]
 801090c:	2b20      	cmp	r3, #32
 801090e:	d94e      	bls.n	80109ae <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010910:	7efb      	ldrb	r3, [r7, #27]
 8010912:	2b2f      	cmp	r3, #47	@ 0x2f
 8010914:	d006      	beq.n	8010924 <create_name+0x54>
 8010916:	7efb      	ldrb	r3, [r7, #27]
 8010918:	2b5c      	cmp	r3, #92	@ 0x5c
 801091a:	d110      	bne.n	801093e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801091c:	e002      	b.n	8010924 <create_name+0x54>
 801091e:	69fb      	ldr	r3, [r7, #28]
 8010920:	3301      	adds	r3, #1
 8010922:	61fb      	str	r3, [r7, #28]
 8010924:	68fa      	ldr	r2, [r7, #12]
 8010926:	69fb      	ldr	r3, [r7, #28]
 8010928:	4413      	add	r3, r2
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	2b2f      	cmp	r3, #47	@ 0x2f
 801092e:	d0f6      	beq.n	801091e <create_name+0x4e>
 8010930:	68fa      	ldr	r2, [r7, #12]
 8010932:	69fb      	ldr	r3, [r7, #28]
 8010934:	4413      	add	r3, r2
 8010936:	781b      	ldrb	r3, [r3, #0]
 8010938:	2b5c      	cmp	r3, #92	@ 0x5c
 801093a:	d0f0      	beq.n	801091e <create_name+0x4e>
			break;
 801093c:	e038      	b.n	80109b0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801093e:	7efb      	ldrb	r3, [r7, #27]
 8010940:	2b2e      	cmp	r3, #46	@ 0x2e
 8010942:	d003      	beq.n	801094c <create_name+0x7c>
 8010944:	693a      	ldr	r2, [r7, #16]
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	429a      	cmp	r2, r3
 801094a:	d30c      	bcc.n	8010966 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801094c:	697b      	ldr	r3, [r7, #20]
 801094e:	2b0b      	cmp	r3, #11
 8010950:	d002      	beq.n	8010958 <create_name+0x88>
 8010952:	7efb      	ldrb	r3, [r7, #27]
 8010954:	2b2e      	cmp	r3, #46	@ 0x2e
 8010956:	d001      	beq.n	801095c <create_name+0x8c>
 8010958:	2306      	movs	r3, #6
 801095a:	e044      	b.n	80109e6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801095c:	2308      	movs	r3, #8
 801095e:	613b      	str	r3, [r7, #16]
 8010960:	230b      	movs	r3, #11
 8010962:	617b      	str	r3, [r7, #20]
			continue;
 8010964:	e022      	b.n	80109ac <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010966:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801096a:	2b00      	cmp	r3, #0
 801096c:	da04      	bge.n	8010978 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801096e:	7efb      	ldrb	r3, [r7, #27]
 8010970:	3b80      	subs	r3, #128	@ 0x80
 8010972:	4a1f      	ldr	r2, [pc, #124]	@ (80109f0 <create_name+0x120>)
 8010974:	5cd3      	ldrb	r3, [r2, r3]
 8010976:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010978:	7efb      	ldrb	r3, [r7, #27]
 801097a:	4619      	mov	r1, r3
 801097c:	481d      	ldr	r0, [pc, #116]	@ (80109f4 <create_name+0x124>)
 801097e:	f7ff f812 	bl	800f9a6 <chk_chr>
 8010982:	4603      	mov	r3, r0
 8010984:	2b00      	cmp	r3, #0
 8010986:	d001      	beq.n	801098c <create_name+0xbc>
 8010988:	2306      	movs	r3, #6
 801098a:	e02c      	b.n	80109e6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801098c:	7efb      	ldrb	r3, [r7, #27]
 801098e:	2b60      	cmp	r3, #96	@ 0x60
 8010990:	d905      	bls.n	801099e <create_name+0xce>
 8010992:	7efb      	ldrb	r3, [r7, #27]
 8010994:	2b7a      	cmp	r3, #122	@ 0x7a
 8010996:	d802      	bhi.n	801099e <create_name+0xce>
 8010998:	7efb      	ldrb	r3, [r7, #27]
 801099a:	3b20      	subs	r3, #32
 801099c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801099e:	693b      	ldr	r3, [r7, #16]
 80109a0:	1c5a      	adds	r2, r3, #1
 80109a2:	613a      	str	r2, [r7, #16]
 80109a4:	68ba      	ldr	r2, [r7, #8]
 80109a6:	4413      	add	r3, r2
 80109a8:	7efa      	ldrb	r2, [r7, #27]
 80109aa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80109ac:	e7a6      	b.n	80108fc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80109ae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80109b0:	68fa      	ldr	r2, [r7, #12]
 80109b2:	69fb      	ldr	r3, [r7, #28]
 80109b4:	441a      	add	r2, r3
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80109ba:	693b      	ldr	r3, [r7, #16]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d101      	bne.n	80109c4 <create_name+0xf4>
 80109c0:	2306      	movs	r3, #6
 80109c2:	e010      	b.n	80109e6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	781b      	ldrb	r3, [r3, #0]
 80109c8:	2be5      	cmp	r3, #229	@ 0xe5
 80109ca:	d102      	bne.n	80109d2 <create_name+0x102>
 80109cc:	68bb      	ldr	r3, [r7, #8]
 80109ce:	2205      	movs	r2, #5
 80109d0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80109d2:	7efb      	ldrb	r3, [r7, #27]
 80109d4:	2b20      	cmp	r3, #32
 80109d6:	d801      	bhi.n	80109dc <create_name+0x10c>
 80109d8:	2204      	movs	r2, #4
 80109da:	e000      	b.n	80109de <create_name+0x10e>
 80109dc:	2200      	movs	r2, #0
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	330b      	adds	r3, #11
 80109e2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80109e4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3720      	adds	r7, #32
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
 80109ee:	bf00      	nop
 80109f0:	08013464 	.word	0x08013464
 80109f4:	08013360 	.word	0x08013360

080109f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b086      	sub	sp, #24
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010a06:	693b      	ldr	r3, [r7, #16]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010a0c:	e002      	b.n	8010a14 <follow_path+0x1c>
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	3301      	adds	r3, #1
 8010a12:	603b      	str	r3, [r7, #0]
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	781b      	ldrb	r3, [r3, #0]
 8010a18:	2b2f      	cmp	r3, #47	@ 0x2f
 8010a1a:	d0f8      	beq.n	8010a0e <follow_path+0x16>
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	781b      	ldrb	r3, [r3, #0]
 8010a20:	2b5c      	cmp	r3, #92	@ 0x5c
 8010a22:	d0f4      	beq.n	8010a0e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010a24:	693b      	ldr	r3, [r7, #16]
 8010a26:	2200      	movs	r2, #0
 8010a28:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	781b      	ldrb	r3, [r3, #0]
 8010a2e:	2b1f      	cmp	r3, #31
 8010a30:	d80a      	bhi.n	8010a48 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	2280      	movs	r2, #128	@ 0x80
 8010a36:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8010a3a:	2100      	movs	r1, #0
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f7ff fcfa 	bl	8010436 <dir_sdi>
 8010a42:	4603      	mov	r3, r0
 8010a44:	75fb      	strb	r3, [r7, #23]
 8010a46:	e043      	b.n	8010ad0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010a48:	463b      	mov	r3, r7
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f7ff ff3f 	bl	80108d0 <create_name>
 8010a52:	4603      	mov	r3, r0
 8010a54:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010a56:	7dfb      	ldrb	r3, [r7, #23]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d134      	bne.n	8010ac6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f7ff feb0 	bl	80107c2 <dir_find>
 8010a62:	4603      	mov	r3, r0
 8010a64:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010a6c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010a6e:	7dfb      	ldrb	r3, [r7, #23]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d00a      	beq.n	8010a8a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010a74:	7dfb      	ldrb	r3, [r7, #23]
 8010a76:	2b04      	cmp	r3, #4
 8010a78:	d127      	bne.n	8010aca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010a7a:	7afb      	ldrb	r3, [r7, #11]
 8010a7c:	f003 0304 	and.w	r3, r3, #4
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d122      	bne.n	8010aca <follow_path+0xd2>
 8010a84:	2305      	movs	r3, #5
 8010a86:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010a88:	e01f      	b.n	8010aca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010a8a:	7afb      	ldrb	r3, [r7, #11]
 8010a8c:	f003 0304 	and.w	r3, r3, #4
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d11c      	bne.n	8010ace <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010a94:	693b      	ldr	r3, [r7, #16]
 8010a96:	799b      	ldrb	r3, [r3, #6]
 8010a98:	f003 0310 	and.w	r3, r3, #16
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d102      	bne.n	8010aa6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010aa0:	2305      	movs	r3, #5
 8010aa2:	75fb      	strb	r3, [r7, #23]
 8010aa4:	e014      	b.n	8010ad0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	695b      	ldr	r3, [r3, #20]
 8010ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ab4:	4413      	add	r3, r2
 8010ab6:	4619      	mov	r1, r3
 8010ab8:	68f8      	ldr	r0, [r7, #12]
 8010aba:	f7ff fe43 	bl	8010744 <ld_clust>
 8010abe:	4602      	mov	r2, r0
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010ac4:	e7c0      	b.n	8010a48 <follow_path+0x50>
			if (res != FR_OK) break;
 8010ac6:	bf00      	nop
 8010ac8:	e002      	b.n	8010ad0 <follow_path+0xd8>
				break;
 8010aca:	bf00      	nop
 8010acc:	e000      	b.n	8010ad0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010ace:	bf00      	nop
			}
		}
	}

	return res;
 8010ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3718      	adds	r7, #24
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}

08010ada <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010ada:	b480      	push	{r7}
 8010adc:	b087      	sub	sp, #28
 8010ade:	af00      	add	r7, sp, #0
 8010ae0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ae6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d031      	beq.n	8010b54 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	617b      	str	r3, [r7, #20]
 8010af6:	e002      	b.n	8010afe <get_ldnumber+0x24>
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	3301      	adds	r3, #1
 8010afc:	617b      	str	r3, [r7, #20]
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	2b20      	cmp	r3, #32
 8010b04:	d903      	bls.n	8010b0e <get_ldnumber+0x34>
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	781b      	ldrb	r3, [r3, #0]
 8010b0a:	2b3a      	cmp	r3, #58	@ 0x3a
 8010b0c:	d1f4      	bne.n	8010af8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	781b      	ldrb	r3, [r3, #0]
 8010b12:	2b3a      	cmp	r3, #58	@ 0x3a
 8010b14:	d11c      	bne.n	8010b50 <get_ldnumber+0x76>
			tp = *path;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	1c5a      	adds	r2, r3, #1
 8010b20:	60fa      	str	r2, [r7, #12]
 8010b22:	781b      	ldrb	r3, [r3, #0]
 8010b24:	3b30      	subs	r3, #48	@ 0x30
 8010b26:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	2b09      	cmp	r3, #9
 8010b2c:	d80e      	bhi.n	8010b4c <get_ldnumber+0x72>
 8010b2e:	68fa      	ldr	r2, [r7, #12]
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d10a      	bne.n	8010b4c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d107      	bne.n	8010b4c <get_ldnumber+0x72>
					vol = (int)i;
 8010b3c:	68bb      	ldr	r3, [r7, #8]
 8010b3e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	3301      	adds	r3, #1
 8010b44:	617b      	str	r3, [r7, #20]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	697a      	ldr	r2, [r7, #20]
 8010b4a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010b4c:	693b      	ldr	r3, [r7, #16]
 8010b4e:	e002      	b.n	8010b56 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010b50:	2300      	movs	r3, #0
 8010b52:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010b54:	693b      	ldr	r3, [r7, #16]
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	371c      	adds	r7, #28
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b60:	4770      	bx	lr
	...

08010b64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b082      	sub	sp, #8
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
 8010b6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2200      	movs	r2, #0
 8010b72:	70da      	strb	r2, [r3, #3]
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f04f 32ff 	mov.w	r2, #4294967295
 8010b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010b7c:	6839      	ldr	r1, [r7, #0]
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f7ff f8dc 	bl	800fd3c <move_window>
 8010b84:	4603      	mov	r3, r0
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d001      	beq.n	8010b8e <check_fs+0x2a>
 8010b8a:	2304      	movs	r3, #4
 8010b8c:	e038      	b.n	8010c00 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	3330      	adds	r3, #48	@ 0x30
 8010b92:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7fe fe20 	bl	800f7dc <ld_word>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	461a      	mov	r2, r3
 8010ba0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d001      	beq.n	8010bac <check_fs+0x48>
 8010ba8:	2303      	movs	r3, #3
 8010baa:	e029      	b.n	8010c00 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010bb2:	2be9      	cmp	r3, #233	@ 0xe9
 8010bb4:	d009      	beq.n	8010bca <check_fs+0x66>
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010bbc:	2beb      	cmp	r3, #235	@ 0xeb
 8010bbe:	d11e      	bne.n	8010bfe <check_fs+0x9a>
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8010bc6:	2b90      	cmp	r3, #144	@ 0x90
 8010bc8:	d119      	bne.n	8010bfe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	3330      	adds	r3, #48	@ 0x30
 8010bce:	3336      	adds	r3, #54	@ 0x36
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7fe fe1b 	bl	800f80c <ld_dword>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8010c08 <check_fs+0xa4>)
 8010bde:	4293      	cmp	r3, r2
 8010be0:	d101      	bne.n	8010be6 <check_fs+0x82>
 8010be2:	2300      	movs	r3, #0
 8010be4:	e00c      	b.n	8010c00 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	3330      	adds	r3, #48	@ 0x30
 8010bea:	3352      	adds	r3, #82	@ 0x52
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7fe fe0d 	bl	800f80c <ld_dword>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	4a05      	ldr	r2, [pc, #20]	@ (8010c0c <check_fs+0xa8>)
 8010bf6:	4293      	cmp	r3, r2
 8010bf8:	d101      	bne.n	8010bfe <check_fs+0x9a>
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	e000      	b.n	8010c00 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010bfe:	2302      	movs	r3, #2
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3708      	adds	r7, #8
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	00544146 	.word	0x00544146
 8010c0c:	33544146 	.word	0x33544146

08010c10 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b096      	sub	sp, #88	@ 0x58
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	60f8      	str	r0, [r7, #12]
 8010c18:	60b9      	str	r1, [r7, #8]
 8010c1a:	4613      	mov	r3, r2
 8010c1c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	2200      	movs	r2, #0
 8010c22:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010c24:	68f8      	ldr	r0, [r7, #12]
 8010c26:	f7ff ff58 	bl	8010ada <get_ldnumber>
 8010c2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	da01      	bge.n	8010c36 <find_volume+0x26>
 8010c32:	230b      	movs	r3, #11
 8010c34:	e22d      	b.n	8011092 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010c36:	4aa1      	ldr	r2, [pc, #644]	@ (8010ebc <find_volume+0x2ac>)
 8010c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d101      	bne.n	8010c4a <find_volume+0x3a>
 8010c46:	230c      	movs	r3, #12
 8010c48:	e223      	b.n	8011092 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010c4a:	68bb      	ldr	r3, [r7, #8]
 8010c4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010c4e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010c50:	79fb      	ldrb	r3, [r7, #7]
 8010c52:	f023 0301 	bic.w	r3, r3, #1
 8010c56:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c5a:	781b      	ldrb	r3, [r3, #0]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d01a      	beq.n	8010c96 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c62:	785b      	ldrb	r3, [r3, #1]
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7fe fd19 	bl	800f69c <disk_status>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010c70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010c74:	f003 0301 	and.w	r3, r3, #1
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d10c      	bne.n	8010c96 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010c7c:	79fb      	ldrb	r3, [r7, #7]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d007      	beq.n	8010c92 <find_volume+0x82>
 8010c82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010c86:	f003 0304 	and.w	r3, r3, #4
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d001      	beq.n	8010c92 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010c8e:	230a      	movs	r3, #10
 8010c90:	e1ff      	b.n	8011092 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8010c92:	2300      	movs	r3, #0
 8010c94:	e1fd      	b.n	8011092 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c98:	2200      	movs	r2, #0
 8010c9a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c9e:	b2da      	uxtb	r2, r3
 8010ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ca2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ca6:	785b      	ldrb	r3, [r3, #1]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7fe fd11 	bl	800f6d0 <disk_initialize>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010cb4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010cb8:	f003 0301 	and.w	r3, r3, #1
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d001      	beq.n	8010cc4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010cc0:	2303      	movs	r3, #3
 8010cc2:	e1e6      	b.n	8011092 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010cc4:	79fb      	ldrb	r3, [r7, #7]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d007      	beq.n	8010cda <find_volume+0xca>
 8010cca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010cce:	f003 0304 	and.w	r3, r3, #4
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d001      	beq.n	8010cda <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010cd6:	230a      	movs	r3, #10
 8010cd8:	e1db      	b.n	8011092 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010cda:	2300      	movs	r3, #0
 8010cdc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010cde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010ce0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010ce2:	f7ff ff3f 	bl	8010b64 <check_fs>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010cec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010cf0:	2b02      	cmp	r3, #2
 8010cf2:	d149      	bne.n	8010d88 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	643b      	str	r3, [r7, #64]	@ 0x40
 8010cf8:	e01e      	b.n	8010d38 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cfc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d02:	011b      	lsls	r3, r3, #4
 8010d04:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010d08:	4413      	add	r3, r2
 8010d0a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d0e:	3304      	adds	r3, #4
 8010d10:	781b      	ldrb	r3, [r3, #0]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d006      	beq.n	8010d24 <find_volume+0x114>
 8010d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d18:	3308      	adds	r3, #8
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7fe fd76 	bl	800f80c <ld_dword>
 8010d20:	4602      	mov	r2, r0
 8010d22:	e000      	b.n	8010d26 <find_volume+0x116>
 8010d24:	2200      	movs	r2, #0
 8010d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d28:	009b      	lsls	r3, r3, #2
 8010d2a:	3358      	adds	r3, #88	@ 0x58
 8010d2c:	443b      	add	r3, r7
 8010d2e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d34:	3301      	adds	r3, #1
 8010d36:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d3a:	2b03      	cmp	r3, #3
 8010d3c:	d9dd      	bls.n	8010cfa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010d3e:	2300      	movs	r3, #0
 8010d40:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8010d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d002      	beq.n	8010d4e <find_volume+0x13e>
 8010d48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d4a:	3b01      	subs	r3, #1
 8010d4c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010d4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d50:	009b      	lsls	r3, r3, #2
 8010d52:	3358      	adds	r3, #88	@ 0x58
 8010d54:	443b      	add	r3, r7
 8010d56:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010d5a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010d5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d005      	beq.n	8010d6e <find_volume+0x15e>
 8010d62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010d64:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010d66:	f7ff fefd 	bl	8010b64 <check_fs>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	e000      	b.n	8010d70 <find_volume+0x160>
 8010d6e:	2303      	movs	r3, #3
 8010d70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010d74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010d78:	2b01      	cmp	r3, #1
 8010d7a:	d905      	bls.n	8010d88 <find_volume+0x178>
 8010d7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d7e:	3301      	adds	r3, #1
 8010d80:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d84:	2b03      	cmp	r3, #3
 8010d86:	d9e2      	bls.n	8010d4e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010d88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010d8c:	2b04      	cmp	r3, #4
 8010d8e:	d101      	bne.n	8010d94 <find_volume+0x184>
 8010d90:	2301      	movs	r3, #1
 8010d92:	e17e      	b.n	8011092 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010d94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010d98:	2b01      	cmp	r3, #1
 8010d9a:	d901      	bls.n	8010da0 <find_volume+0x190>
 8010d9c:	230d      	movs	r3, #13
 8010d9e:	e178      	b.n	8011092 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010da2:	3330      	adds	r3, #48	@ 0x30
 8010da4:	330b      	adds	r3, #11
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7fe fd18 	bl	800f7dc <ld_word>
 8010dac:	4603      	mov	r3, r0
 8010dae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010db2:	d001      	beq.n	8010db8 <find_volume+0x1a8>
 8010db4:	230d      	movs	r3, #13
 8010db6:	e16c      	b.n	8011092 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dba:	3330      	adds	r3, #48	@ 0x30
 8010dbc:	3316      	adds	r3, #22
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7fe fd0c 	bl	800f7dc <ld_word>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010dc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d106      	bne.n	8010ddc <find_volume+0x1cc>
 8010dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dd0:	3330      	adds	r3, #48	@ 0x30
 8010dd2:	3324      	adds	r3, #36	@ 0x24
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7fe fd19 	bl	800f80c <ld_dword>
 8010dda:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8010ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010de0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010de4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8010de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dee:	789b      	ldrb	r3, [r3, #2]
 8010df0:	2b01      	cmp	r3, #1
 8010df2:	d005      	beq.n	8010e00 <find_volume+0x1f0>
 8010df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010df6:	789b      	ldrb	r3, [r3, #2]
 8010df8:	2b02      	cmp	r3, #2
 8010dfa:	d001      	beq.n	8010e00 <find_volume+0x1f0>
 8010dfc:	230d      	movs	r3, #13
 8010dfe:	e148      	b.n	8011092 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e02:	789b      	ldrb	r3, [r3, #2]
 8010e04:	461a      	mov	r2, r3
 8010e06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e08:	fb02 f303 	mul.w	r3, r2, r3
 8010e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010e14:	461a      	mov	r2, r3
 8010e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e18:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e1c:	895b      	ldrh	r3, [r3, #10]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d008      	beq.n	8010e34 <find_volume+0x224>
 8010e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e24:	895b      	ldrh	r3, [r3, #10]
 8010e26:	461a      	mov	r2, r3
 8010e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e2a:	895b      	ldrh	r3, [r3, #10]
 8010e2c:	3b01      	subs	r3, #1
 8010e2e:	4013      	ands	r3, r2
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d001      	beq.n	8010e38 <find_volume+0x228>
 8010e34:	230d      	movs	r3, #13
 8010e36:	e12c      	b.n	8011092 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e3a:	3330      	adds	r3, #48	@ 0x30
 8010e3c:	3311      	adds	r3, #17
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7fe fccc 	bl	800f7dc <ld_word>
 8010e44:	4603      	mov	r3, r0
 8010e46:	461a      	mov	r2, r3
 8010e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e4a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e4e:	891b      	ldrh	r3, [r3, #8]
 8010e50:	f003 030f 	and.w	r3, r3, #15
 8010e54:	b29b      	uxth	r3, r3
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d001      	beq.n	8010e5e <find_volume+0x24e>
 8010e5a:	230d      	movs	r3, #13
 8010e5c:	e119      	b.n	8011092 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e60:	3330      	adds	r3, #48	@ 0x30
 8010e62:	3313      	adds	r3, #19
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7fe fcb9 	bl	800f7dc <ld_word>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010e6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d106      	bne.n	8010e82 <find_volume+0x272>
 8010e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e76:	3330      	adds	r3, #48	@ 0x30
 8010e78:	3320      	adds	r3, #32
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7fe fcc6 	bl	800f80c <ld_dword>
 8010e80:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e84:	3330      	adds	r3, #48	@ 0x30
 8010e86:	330e      	adds	r3, #14
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7fe fca7 	bl	800f7dc <ld_word>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010e92:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d101      	bne.n	8010e9c <find_volume+0x28c>
 8010e98:	230d      	movs	r3, #13
 8010e9a:	e0fa      	b.n	8011092 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010e9c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ea0:	4413      	add	r3, r2
 8010ea2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ea4:	8912      	ldrh	r2, [r2, #8]
 8010ea6:	0912      	lsrs	r2, r2, #4
 8010ea8:	b292      	uxth	r2, r2
 8010eaa:	4413      	add	r3, r2
 8010eac:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010eae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d204      	bcs.n	8010ec0 <find_volume+0x2b0>
 8010eb6:	230d      	movs	r3, #13
 8010eb8:	e0eb      	b.n	8011092 <find_volume+0x482>
 8010eba:	bf00      	nop
 8010ebc:	24000c28 	.word	0x24000c28
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010ec0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ec4:	1ad3      	subs	r3, r2, r3
 8010ec6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ec8:	8952      	ldrh	r2, [r2, #10]
 8010eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ece:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d101      	bne.n	8010eda <find_volume+0x2ca>
 8010ed6:	230d      	movs	r3, #13
 8010ed8:	e0db      	b.n	8011092 <find_volume+0x482>
		fmt = FS_FAT32;
 8010eda:	2303      	movs	r3, #3
 8010edc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ee2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010ee6:	4293      	cmp	r3, r2
 8010ee8:	d802      	bhi.n	8010ef0 <find_volume+0x2e0>
 8010eea:	2302      	movs	r3, #2
 8010eec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ef2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	d802      	bhi.n	8010f00 <find_volume+0x2f0>
 8010efa:	2301      	movs	r3, #1
 8010efc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f02:	1c9a      	adds	r2, r3, #2
 8010f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f06:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8010f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010f0c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010f0e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010f10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f12:	441a      	add	r2, r3
 8010f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f16:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8010f18:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f1c:	441a      	add	r2, r3
 8010f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f20:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8010f22:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010f26:	2b03      	cmp	r3, #3
 8010f28:	d11e      	bne.n	8010f68 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f2c:	3330      	adds	r3, #48	@ 0x30
 8010f2e:	332a      	adds	r3, #42	@ 0x2a
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7fe fc53 	bl	800f7dc <ld_word>
 8010f36:	4603      	mov	r3, r0
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d001      	beq.n	8010f40 <find_volume+0x330>
 8010f3c:	230d      	movs	r3, #13
 8010f3e:	e0a8      	b.n	8011092 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f42:	891b      	ldrh	r3, [r3, #8]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d001      	beq.n	8010f4c <find_volume+0x33c>
 8010f48:	230d      	movs	r3, #13
 8010f4a:	e0a2      	b.n	8011092 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f4e:	3330      	adds	r3, #48	@ 0x30
 8010f50:	332c      	adds	r3, #44	@ 0x2c
 8010f52:	4618      	mov	r0, r3
 8010f54:	f7fe fc5a 	bl	800f80c <ld_dword>
 8010f58:	4602      	mov	r2, r0
 8010f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f5c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f60:	695b      	ldr	r3, [r3, #20]
 8010f62:	009b      	lsls	r3, r3, #2
 8010f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8010f66:	e01f      	b.n	8010fa8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f6a:	891b      	ldrh	r3, [r3, #8]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d101      	bne.n	8010f74 <find_volume+0x364>
 8010f70:	230d      	movs	r3, #13
 8010f72:	e08e      	b.n	8011092 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f76:	6a1a      	ldr	r2, [r3, #32]
 8010f78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f7a:	441a      	add	r2, r3
 8010f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f7e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010f80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010f84:	2b02      	cmp	r3, #2
 8010f86:	d103      	bne.n	8010f90 <find_volume+0x380>
 8010f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f8a:	695b      	ldr	r3, [r3, #20]
 8010f8c:	005b      	lsls	r3, r3, #1
 8010f8e:	e00a      	b.n	8010fa6 <find_volume+0x396>
 8010f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f92:	695a      	ldr	r2, [r3, #20]
 8010f94:	4613      	mov	r3, r2
 8010f96:	005b      	lsls	r3, r3, #1
 8010f98:	4413      	add	r3, r2
 8010f9a:	085a      	lsrs	r2, r3, #1
 8010f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f9e:	695b      	ldr	r3, [r3, #20]
 8010fa0:	f003 0301 	and.w	r3, r3, #1
 8010fa4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010fa6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010faa:	699a      	ldr	r2, [r3, #24]
 8010fac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010fae:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8010fb2:	0a5b      	lsrs	r3, r3, #9
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d201      	bcs.n	8010fbc <find_volume+0x3ac>
 8010fb8:	230d      	movs	r3, #13
 8010fba:	e06a      	b.n	8011092 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8010fc2:	611a      	str	r2, [r3, #16]
 8010fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fc6:	691a      	ldr	r2, [r3, #16]
 8010fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fca:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8010fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fce:	2280      	movs	r2, #128	@ 0x80
 8010fd0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010fd2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010fd6:	2b03      	cmp	r3, #3
 8010fd8:	d149      	bne.n	801106e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fdc:	3330      	adds	r3, #48	@ 0x30
 8010fde:	3330      	adds	r3, #48	@ 0x30
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7fe fbfb 	bl	800f7dc <ld_word>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	2b01      	cmp	r3, #1
 8010fea:	d140      	bne.n	801106e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010fec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010fee:	3301      	adds	r3, #1
 8010ff0:	4619      	mov	r1, r3
 8010ff2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010ff4:	f7fe fea2 	bl	800fd3c <move_window>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d137      	bne.n	801106e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8010ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011000:	2200      	movs	r2, #0
 8011002:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011006:	3330      	adds	r3, #48	@ 0x30
 8011008:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801100c:	4618      	mov	r0, r3
 801100e:	f7fe fbe5 	bl	800f7dc <ld_word>
 8011012:	4603      	mov	r3, r0
 8011014:	461a      	mov	r2, r3
 8011016:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801101a:	429a      	cmp	r2, r3
 801101c:	d127      	bne.n	801106e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801101e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011020:	3330      	adds	r3, #48	@ 0x30
 8011022:	4618      	mov	r0, r3
 8011024:	f7fe fbf2 	bl	800f80c <ld_dword>
 8011028:	4603      	mov	r3, r0
 801102a:	4a1c      	ldr	r2, [pc, #112]	@ (801109c <find_volume+0x48c>)
 801102c:	4293      	cmp	r3, r2
 801102e:	d11e      	bne.n	801106e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011032:	3330      	adds	r3, #48	@ 0x30
 8011034:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011038:	4618      	mov	r0, r3
 801103a:	f7fe fbe7 	bl	800f80c <ld_dword>
 801103e:	4603      	mov	r3, r0
 8011040:	4a17      	ldr	r2, [pc, #92]	@ (80110a0 <find_volume+0x490>)
 8011042:	4293      	cmp	r3, r2
 8011044:	d113      	bne.n	801106e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011048:	3330      	adds	r3, #48	@ 0x30
 801104a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801104e:	4618      	mov	r0, r3
 8011050:	f7fe fbdc 	bl	800f80c <ld_dword>
 8011054:	4602      	mov	r2, r0
 8011056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011058:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801105a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801105c:	3330      	adds	r3, #48	@ 0x30
 801105e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8011062:	4618      	mov	r0, r3
 8011064:	f7fe fbd2 	bl	800f80c <ld_dword>
 8011068:	4602      	mov	r2, r0
 801106a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801106c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801106e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011070:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8011074:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011076:	4b0b      	ldr	r3, [pc, #44]	@ (80110a4 <find_volume+0x494>)
 8011078:	881b      	ldrh	r3, [r3, #0]
 801107a:	3301      	adds	r3, #1
 801107c:	b29a      	uxth	r2, r3
 801107e:	4b09      	ldr	r3, [pc, #36]	@ (80110a4 <find_volume+0x494>)
 8011080:	801a      	strh	r2, [r3, #0]
 8011082:	4b08      	ldr	r3, [pc, #32]	@ (80110a4 <find_volume+0x494>)
 8011084:	881a      	ldrh	r2, [r3, #0]
 8011086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011088:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801108a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801108c:	f7fe fdee 	bl	800fc6c <clear_lock>
#endif
	return FR_OK;
 8011090:	2300      	movs	r3, #0
}
 8011092:	4618      	mov	r0, r3
 8011094:	3758      	adds	r7, #88	@ 0x58
 8011096:	46bd      	mov	sp, r7
 8011098:	bd80      	pop	{r7, pc}
 801109a:	bf00      	nop
 801109c:	41615252 	.word	0x41615252
 80110a0:	61417272 	.word	0x61417272
 80110a4:	24000c2c 	.word	0x24000c2c

080110a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b084      	sub	sp, #16
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
 80110b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80110b2:	2309      	movs	r3, #9
 80110b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d01c      	beq.n	80110f6 <validate+0x4e>
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d018      	beq.n	80110f6 <validate+0x4e>
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	781b      	ldrb	r3, [r3, #0]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d013      	beq.n	80110f6 <validate+0x4e>
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	889a      	ldrh	r2, [r3, #4]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	88db      	ldrh	r3, [r3, #6]
 80110d8:	429a      	cmp	r2, r3
 80110da:	d10c      	bne.n	80110f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	785b      	ldrb	r3, [r3, #1]
 80110e2:	4618      	mov	r0, r3
 80110e4:	f7fe fada 	bl	800f69c <disk_status>
 80110e8:	4603      	mov	r3, r0
 80110ea:	f003 0301 	and.w	r3, r3, #1
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d101      	bne.n	80110f6 <validate+0x4e>
			res = FR_OK;
 80110f2:	2300      	movs	r3, #0
 80110f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80110f6:	7bfb      	ldrb	r3, [r7, #15]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d102      	bne.n	8011102 <validate+0x5a>
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	e000      	b.n	8011104 <validate+0x5c>
 8011102:	2300      	movs	r3, #0
 8011104:	683a      	ldr	r2, [r7, #0]
 8011106:	6013      	str	r3, [r2, #0]
	return res;
 8011108:	7bfb      	ldrb	r3, [r7, #15]
}
 801110a:	4618      	mov	r0, r3
 801110c:	3710      	adds	r7, #16
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
	...

08011114 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b088      	sub	sp, #32
 8011118:	af00      	add	r7, sp, #0
 801111a:	60f8      	str	r0, [r7, #12]
 801111c:	60b9      	str	r1, [r7, #8]
 801111e:	4613      	mov	r3, r2
 8011120:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011122:	68bb      	ldr	r3, [r7, #8]
 8011124:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011126:	f107 0310 	add.w	r3, r7, #16
 801112a:	4618      	mov	r0, r3
 801112c:	f7ff fcd5 	bl	8010ada <get_ldnumber>
 8011130:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011132:	69fb      	ldr	r3, [r7, #28]
 8011134:	2b00      	cmp	r3, #0
 8011136:	da01      	bge.n	801113c <f_mount+0x28>
 8011138:	230b      	movs	r3, #11
 801113a:	e02b      	b.n	8011194 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801113c:	4a17      	ldr	r2, [pc, #92]	@ (801119c <f_mount+0x88>)
 801113e:	69fb      	ldr	r3, [r7, #28]
 8011140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011144:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011146:	69bb      	ldr	r3, [r7, #24]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d005      	beq.n	8011158 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801114c:	69b8      	ldr	r0, [r7, #24]
 801114e:	f7fe fd8d 	bl	800fc6c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011152:	69bb      	ldr	r3, [r7, #24]
 8011154:	2200      	movs	r2, #0
 8011156:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d002      	beq.n	8011164 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	2200      	movs	r2, #0
 8011162:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011164:	68fa      	ldr	r2, [r7, #12]
 8011166:	490d      	ldr	r1, [pc, #52]	@ (801119c <f_mount+0x88>)
 8011168:	69fb      	ldr	r3, [r7, #28]
 801116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d002      	beq.n	801117a <f_mount+0x66>
 8011174:	79fb      	ldrb	r3, [r7, #7]
 8011176:	2b01      	cmp	r3, #1
 8011178:	d001      	beq.n	801117e <f_mount+0x6a>
 801117a:	2300      	movs	r3, #0
 801117c:	e00a      	b.n	8011194 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801117e:	f107 010c 	add.w	r1, r7, #12
 8011182:	f107 0308 	add.w	r3, r7, #8
 8011186:	2200      	movs	r2, #0
 8011188:	4618      	mov	r0, r3
 801118a:	f7ff fd41 	bl	8010c10 <find_volume>
 801118e:	4603      	mov	r3, r0
 8011190:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011192:	7dfb      	ldrb	r3, [r7, #23]
}
 8011194:	4618      	mov	r0, r3
 8011196:	3720      	adds	r7, #32
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}
 801119c:	24000c28 	.word	0x24000c28

080111a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b098      	sub	sp, #96	@ 0x60
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	60f8      	str	r0, [r7, #12]
 80111a8:	60b9      	str	r1, [r7, #8]
 80111aa:	4613      	mov	r3, r2
 80111ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d101      	bne.n	80111b8 <f_open+0x18>
 80111b4:	2309      	movs	r3, #9
 80111b6:	e1a9      	b.n	801150c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80111b8:	79fb      	ldrb	r3, [r7, #7]
 80111ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80111be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80111c0:	79fa      	ldrb	r2, [r7, #7]
 80111c2:	f107 0110 	add.w	r1, r7, #16
 80111c6:	f107 0308 	add.w	r3, r7, #8
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7ff fd20 	bl	8010c10 <find_volume>
 80111d0:	4603      	mov	r3, r0
 80111d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80111d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80111da:	2b00      	cmp	r3, #0
 80111dc:	f040 818d 	bne.w	80114fa <f_open+0x35a>
		dj.obj.fs = fs;
 80111e0:	693b      	ldr	r3, [r7, #16]
 80111e2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80111e4:	68ba      	ldr	r2, [r7, #8]
 80111e6:	f107 0314 	add.w	r3, r7, #20
 80111ea:	4611      	mov	r1, r2
 80111ec:	4618      	mov	r0, r3
 80111ee:	f7ff fc03 	bl	80109f8 <follow_path>
 80111f2:	4603      	mov	r3, r0
 80111f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80111f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d118      	bne.n	8011232 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011200:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011204:	b25b      	sxtb	r3, r3
 8011206:	2b00      	cmp	r3, #0
 8011208:	da03      	bge.n	8011212 <f_open+0x72>
				res = FR_INVALID_NAME;
 801120a:	2306      	movs	r3, #6
 801120c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011210:	e00f      	b.n	8011232 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011212:	79fb      	ldrb	r3, [r7, #7]
 8011214:	2b01      	cmp	r3, #1
 8011216:	bf8c      	ite	hi
 8011218:	2301      	movhi	r3, #1
 801121a:	2300      	movls	r3, #0
 801121c:	b2db      	uxtb	r3, r3
 801121e:	461a      	mov	r2, r3
 8011220:	f107 0314 	add.w	r3, r7, #20
 8011224:	4611      	mov	r1, r2
 8011226:	4618      	mov	r0, r3
 8011228:	f7fe fbd8 	bl	800f9dc <chk_lock>
 801122c:	4603      	mov	r3, r0
 801122e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011232:	79fb      	ldrb	r3, [r7, #7]
 8011234:	f003 031c 	and.w	r3, r3, #28
 8011238:	2b00      	cmp	r3, #0
 801123a:	d07f      	beq.n	801133c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801123c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011240:	2b00      	cmp	r3, #0
 8011242:	d017      	beq.n	8011274 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011244:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011248:	2b04      	cmp	r3, #4
 801124a:	d10e      	bne.n	801126a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801124c:	f7fe fc22 	bl	800fa94 <enq_lock>
 8011250:	4603      	mov	r3, r0
 8011252:	2b00      	cmp	r3, #0
 8011254:	d006      	beq.n	8011264 <f_open+0xc4>
 8011256:	f107 0314 	add.w	r3, r7, #20
 801125a:	4618      	mov	r0, r3
 801125c:	f7ff fb06 	bl	801086c <dir_register>
 8011260:	4603      	mov	r3, r0
 8011262:	e000      	b.n	8011266 <f_open+0xc6>
 8011264:	2312      	movs	r3, #18
 8011266:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801126a:	79fb      	ldrb	r3, [r7, #7]
 801126c:	f043 0308 	orr.w	r3, r3, #8
 8011270:	71fb      	strb	r3, [r7, #7]
 8011272:	e010      	b.n	8011296 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011274:	7ebb      	ldrb	r3, [r7, #26]
 8011276:	f003 0311 	and.w	r3, r3, #17
 801127a:	2b00      	cmp	r3, #0
 801127c:	d003      	beq.n	8011286 <f_open+0xe6>
					res = FR_DENIED;
 801127e:	2307      	movs	r3, #7
 8011280:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011284:	e007      	b.n	8011296 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011286:	79fb      	ldrb	r3, [r7, #7]
 8011288:	f003 0304 	and.w	r3, r3, #4
 801128c:	2b00      	cmp	r3, #0
 801128e:	d002      	beq.n	8011296 <f_open+0xf6>
 8011290:	2308      	movs	r3, #8
 8011292:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011296:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801129a:	2b00      	cmp	r3, #0
 801129c:	d168      	bne.n	8011370 <f_open+0x1d0>
 801129e:	79fb      	ldrb	r3, [r7, #7]
 80112a0:	f003 0308 	and.w	r3, r3, #8
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d063      	beq.n	8011370 <f_open+0x1d0>
				dw = GET_FATTIME();
 80112a8:	f7fd fea8 	bl	800effc <get_fattime>
 80112ac:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80112ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112b0:	330e      	adds	r3, #14
 80112b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7fe fae7 	bl	800f888 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80112ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112bc:	3316      	adds	r3, #22
 80112be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7fe fae1 	bl	800f888 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80112c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112c8:	330b      	adds	r3, #11
 80112ca:	2220      	movs	r2, #32
 80112cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80112ce:	693b      	ldr	r3, [r7, #16]
 80112d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80112d2:	4611      	mov	r1, r2
 80112d4:	4618      	mov	r0, r3
 80112d6:	f7ff fa35 	bl	8010744 <ld_clust>
 80112da:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80112dc:	693b      	ldr	r3, [r7, #16]
 80112de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80112e0:	2200      	movs	r2, #0
 80112e2:	4618      	mov	r0, r3
 80112e4:	f7ff fa4d 	bl	8010782 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80112e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112ea:	331c      	adds	r3, #28
 80112ec:	2100      	movs	r1, #0
 80112ee:	4618      	mov	r0, r3
 80112f0:	f7fe faca 	bl	800f888 <st_dword>
					fs->wflag = 1;
 80112f4:	693b      	ldr	r3, [r7, #16]
 80112f6:	2201      	movs	r2, #1
 80112f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80112fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d037      	beq.n	8011370 <f_open+0x1d0>
						dw = fs->winsect;
 8011300:	693b      	ldr	r3, [r7, #16]
 8011302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011304:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8011306:	f107 0314 	add.w	r3, r7, #20
 801130a:	2200      	movs	r2, #0
 801130c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801130e:	4618      	mov	r0, r3
 8011310:	f7fe ff60 	bl	80101d4 <remove_chain>
 8011314:	4603      	mov	r3, r0
 8011316:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801131a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801131e:	2b00      	cmp	r3, #0
 8011320:	d126      	bne.n	8011370 <f_open+0x1d0>
							res = move_window(fs, dw);
 8011322:	693b      	ldr	r3, [r7, #16]
 8011324:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011326:	4618      	mov	r0, r3
 8011328:	f7fe fd08 	bl	800fd3c <move_window>
 801132c:	4603      	mov	r3, r0
 801132e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011332:	693b      	ldr	r3, [r7, #16]
 8011334:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011336:	3a01      	subs	r2, #1
 8011338:	60da      	str	r2, [r3, #12]
 801133a:	e019      	b.n	8011370 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801133c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011340:	2b00      	cmp	r3, #0
 8011342:	d115      	bne.n	8011370 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011344:	7ebb      	ldrb	r3, [r7, #26]
 8011346:	f003 0310 	and.w	r3, r3, #16
 801134a:	2b00      	cmp	r3, #0
 801134c:	d003      	beq.n	8011356 <f_open+0x1b6>
					res = FR_NO_FILE;
 801134e:	2304      	movs	r3, #4
 8011350:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011354:	e00c      	b.n	8011370 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011356:	79fb      	ldrb	r3, [r7, #7]
 8011358:	f003 0302 	and.w	r3, r3, #2
 801135c:	2b00      	cmp	r3, #0
 801135e:	d007      	beq.n	8011370 <f_open+0x1d0>
 8011360:	7ebb      	ldrb	r3, [r7, #26]
 8011362:	f003 0301 	and.w	r3, r3, #1
 8011366:	2b00      	cmp	r3, #0
 8011368:	d002      	beq.n	8011370 <f_open+0x1d0>
						res = FR_DENIED;
 801136a:	2307      	movs	r3, #7
 801136c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011370:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011374:	2b00      	cmp	r3, #0
 8011376:	d126      	bne.n	80113c6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011378:	79fb      	ldrb	r3, [r7, #7]
 801137a:	f003 0308 	and.w	r3, r3, #8
 801137e:	2b00      	cmp	r3, #0
 8011380:	d003      	beq.n	801138a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8011382:	79fb      	ldrb	r3, [r7, #7]
 8011384:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011388:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8011392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011398:	79fb      	ldrb	r3, [r7, #7]
 801139a:	2b01      	cmp	r3, #1
 801139c:	bf8c      	ite	hi
 801139e:	2301      	movhi	r3, #1
 80113a0:	2300      	movls	r3, #0
 80113a2:	b2db      	uxtb	r3, r3
 80113a4:	461a      	mov	r2, r3
 80113a6:	f107 0314 	add.w	r3, r7, #20
 80113aa:	4611      	mov	r1, r2
 80113ac:	4618      	mov	r0, r3
 80113ae:	f7fe fb93 	bl	800fad8 <inc_lock>
 80113b2:	4602      	mov	r2, r0
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	691b      	ldr	r3, [r3, #16]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d102      	bne.n	80113c6 <f_open+0x226>
 80113c0:	2302      	movs	r3, #2
 80113c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80113c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	f040 8095 	bne.w	80114fa <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80113d4:	4611      	mov	r1, r2
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7ff f9b4 	bl	8010744 <ld_clust>
 80113dc:	4602      	mov	r2, r0
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80113e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113e4:	331c      	adds	r3, #28
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7fe fa10 	bl	800f80c <ld_dword>
 80113ec:	4602      	mov	r2, r0
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	2200      	movs	r2, #0
 80113f6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80113f8:	693a      	ldr	r2, [r7, #16]
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	88da      	ldrh	r2, [r3, #6]
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	79fa      	ldrb	r2, [r7, #7]
 801140a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	2200      	movs	r2, #0
 8011410:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	2200      	movs	r2, #0
 8011416:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	2200      	movs	r2, #0
 801141c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	3330      	adds	r3, #48	@ 0x30
 8011422:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011426:	2100      	movs	r1, #0
 8011428:	4618      	mov	r0, r3
 801142a:	f7fe fa7a 	bl	800f922 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801142e:	79fb      	ldrb	r3, [r7, #7]
 8011430:	f003 0320 	and.w	r3, r3, #32
 8011434:	2b00      	cmp	r3, #0
 8011436:	d060      	beq.n	80114fa <f_open+0x35a>
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	68db      	ldr	r3, [r3, #12]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d05c      	beq.n	80114fa <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	68da      	ldr	r2, [r3, #12]
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011448:	693b      	ldr	r3, [r7, #16]
 801144a:	895b      	ldrh	r3, [r3, #10]
 801144c:	025b      	lsls	r3, r3, #9
 801144e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	689b      	ldr	r3, [r3, #8]
 8011454:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	68db      	ldr	r3, [r3, #12]
 801145a:	657b      	str	r3, [r7, #84]	@ 0x54
 801145c:	e016      	b.n	801148c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011462:	4618      	mov	r0, r3
 8011464:	f7fe fd25 	bl	800feb2 <get_fat>
 8011468:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801146a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801146c:	2b01      	cmp	r3, #1
 801146e:	d802      	bhi.n	8011476 <f_open+0x2d6>
 8011470:	2302      	movs	r3, #2
 8011472:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011476:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011478:	f1b3 3fff 	cmp.w	r3, #4294967295
 801147c:	d102      	bne.n	8011484 <f_open+0x2e4>
 801147e:	2301      	movs	r3, #1
 8011480:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011484:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011488:	1ad3      	subs	r3, r2, r3
 801148a:	657b      	str	r3, [r7, #84]	@ 0x54
 801148c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011490:	2b00      	cmp	r3, #0
 8011492:	d103      	bne.n	801149c <f_open+0x2fc>
 8011494:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011496:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011498:	429a      	cmp	r2, r3
 801149a:	d8e0      	bhi.n	801145e <f_open+0x2be>
				}
				fp->clust = clst;
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80114a0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80114a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d127      	bne.n	80114fa <f_open+0x35a>
 80114aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80114ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d022      	beq.n	80114fa <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7fe fcdb 	bl	800fe74 <clust2sect>
 80114be:	6478      	str	r0, [r7, #68]	@ 0x44
 80114c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d103      	bne.n	80114ce <f_open+0x32e>
						res = FR_INT_ERR;
 80114c6:	2302      	movs	r3, #2
 80114c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80114cc:	e015      	b.n	80114fa <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80114ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80114d0:	0a5a      	lsrs	r2, r3, #9
 80114d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80114d4:	441a      	add	r2, r3
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80114da:	693b      	ldr	r3, [r7, #16]
 80114dc:	7858      	ldrb	r0, [r3, #1]
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	6a1a      	ldr	r2, [r3, #32]
 80114e8:	2301      	movs	r3, #1
 80114ea:	f7fe f919 	bl	800f720 <disk_read>
 80114ee:	4603      	mov	r3, r0
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d002      	beq.n	80114fa <f_open+0x35a>
 80114f4:	2301      	movs	r3, #1
 80114f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80114fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d002      	beq.n	8011508 <f_open+0x368>
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	2200      	movs	r2, #0
 8011506:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011508:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801150c:	4618      	mov	r0, r3
 801150e:	3760      	adds	r7, #96	@ 0x60
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}

08011514 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b08e      	sub	sp, #56	@ 0x38
 8011518:	af00      	add	r7, sp, #0
 801151a:	60f8      	str	r0, [r7, #12]
 801151c:	60b9      	str	r1, [r7, #8]
 801151e:	607a      	str	r2, [r7, #4]
 8011520:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8011522:	68bb      	ldr	r3, [r7, #8]
 8011524:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	2200      	movs	r2, #0
 801152a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	f107 0214 	add.w	r2, r7, #20
 8011532:	4611      	mov	r1, r2
 8011534:	4618      	mov	r0, r3
 8011536:	f7ff fdb7 	bl	80110a8 <validate>
 801153a:	4603      	mov	r3, r0
 801153c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011540:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011544:	2b00      	cmp	r3, #0
 8011546:	d107      	bne.n	8011558 <f_read+0x44>
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	7d5b      	ldrb	r3, [r3, #21]
 801154c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011550:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011554:	2b00      	cmp	r3, #0
 8011556:	d002      	beq.n	801155e <f_read+0x4a>
 8011558:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801155c:	e115      	b.n	801178a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	7d1b      	ldrb	r3, [r3, #20]
 8011562:	f003 0301 	and.w	r3, r3, #1
 8011566:	2b00      	cmp	r3, #0
 8011568:	d101      	bne.n	801156e <f_read+0x5a>
 801156a:	2307      	movs	r3, #7
 801156c:	e10d      	b.n	801178a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	68da      	ldr	r2, [r3, #12]
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	699b      	ldr	r3, [r3, #24]
 8011576:	1ad3      	subs	r3, r2, r3
 8011578:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801157a:	687a      	ldr	r2, [r7, #4]
 801157c:	6a3b      	ldr	r3, [r7, #32]
 801157e:	429a      	cmp	r2, r3
 8011580:	f240 80fe 	bls.w	8011780 <f_read+0x26c>
 8011584:	6a3b      	ldr	r3, [r7, #32]
 8011586:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011588:	e0fa      	b.n	8011780 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	699b      	ldr	r3, [r3, #24]
 801158e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011592:	2b00      	cmp	r3, #0
 8011594:	f040 80c6 	bne.w	8011724 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	699b      	ldr	r3, [r3, #24]
 801159c:	0a5b      	lsrs	r3, r3, #9
 801159e:	697a      	ldr	r2, [r7, #20]
 80115a0:	8952      	ldrh	r2, [r2, #10]
 80115a2:	3a01      	subs	r2, #1
 80115a4:	4013      	ands	r3, r2
 80115a6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80115a8:	69fb      	ldr	r3, [r7, #28]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d12f      	bne.n	801160e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	699b      	ldr	r3, [r3, #24]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d103      	bne.n	80115be <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	689b      	ldr	r3, [r3, #8]
 80115ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80115bc:	e013      	b.n	80115e6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d007      	beq.n	80115d6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	699b      	ldr	r3, [r3, #24]
 80115ca:	4619      	mov	r1, r3
 80115cc:	68f8      	ldr	r0, [r7, #12]
 80115ce:	f7fe fefe 	bl	80103ce <clmt_clust>
 80115d2:	6338      	str	r0, [r7, #48]	@ 0x30
 80115d4:	e007      	b.n	80115e6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80115d6:	68fa      	ldr	r2, [r7, #12]
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	69db      	ldr	r3, [r3, #28]
 80115dc:	4619      	mov	r1, r3
 80115de:	4610      	mov	r0, r2
 80115e0:	f7fe fc67 	bl	800feb2 <get_fat>
 80115e4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80115e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115e8:	2b01      	cmp	r3, #1
 80115ea:	d804      	bhi.n	80115f6 <f_read+0xe2>
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	2202      	movs	r2, #2
 80115f0:	755a      	strb	r2, [r3, #21]
 80115f2:	2302      	movs	r3, #2
 80115f4:	e0c9      	b.n	801178a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80115f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115fc:	d104      	bne.n	8011608 <f_read+0xf4>
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	2201      	movs	r2, #1
 8011602:	755a      	strb	r2, [r3, #21]
 8011604:	2301      	movs	r3, #1
 8011606:	e0c0      	b.n	801178a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801160c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801160e:	697a      	ldr	r2, [r7, #20]
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	69db      	ldr	r3, [r3, #28]
 8011614:	4619      	mov	r1, r3
 8011616:	4610      	mov	r0, r2
 8011618:	f7fe fc2c 	bl	800fe74 <clust2sect>
 801161c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801161e:	69bb      	ldr	r3, [r7, #24]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d104      	bne.n	801162e <f_read+0x11a>
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	2202      	movs	r2, #2
 8011628:	755a      	strb	r2, [r3, #21]
 801162a:	2302      	movs	r3, #2
 801162c:	e0ad      	b.n	801178a <f_read+0x276>
			sect += csect;
 801162e:	69ba      	ldr	r2, [r7, #24]
 8011630:	69fb      	ldr	r3, [r7, #28]
 8011632:	4413      	add	r3, r2
 8011634:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	0a5b      	lsrs	r3, r3, #9
 801163a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801163c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801163e:	2b00      	cmp	r3, #0
 8011640:	d039      	beq.n	80116b6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011642:	69fa      	ldr	r2, [r7, #28]
 8011644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011646:	4413      	add	r3, r2
 8011648:	697a      	ldr	r2, [r7, #20]
 801164a:	8952      	ldrh	r2, [r2, #10]
 801164c:	4293      	cmp	r3, r2
 801164e:	d905      	bls.n	801165c <f_read+0x148>
					cc = fs->csize - csect;
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	895b      	ldrh	r3, [r3, #10]
 8011654:	461a      	mov	r2, r3
 8011656:	69fb      	ldr	r3, [r7, #28]
 8011658:	1ad3      	subs	r3, r2, r3
 801165a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	7858      	ldrb	r0, [r3, #1]
 8011660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011662:	69ba      	ldr	r2, [r7, #24]
 8011664:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011666:	f7fe f85b 	bl	800f720 <disk_read>
 801166a:	4603      	mov	r3, r0
 801166c:	2b00      	cmp	r3, #0
 801166e:	d004      	beq.n	801167a <f_read+0x166>
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	2201      	movs	r2, #1
 8011674:	755a      	strb	r2, [r3, #21]
 8011676:	2301      	movs	r3, #1
 8011678:	e087      	b.n	801178a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	7d1b      	ldrb	r3, [r3, #20]
 801167e:	b25b      	sxtb	r3, r3
 8011680:	2b00      	cmp	r3, #0
 8011682:	da14      	bge.n	80116ae <f_read+0x19a>
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	6a1a      	ldr	r2, [r3, #32]
 8011688:	69bb      	ldr	r3, [r7, #24]
 801168a:	1ad3      	subs	r3, r2, r3
 801168c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801168e:	429a      	cmp	r2, r3
 8011690:	d90d      	bls.n	80116ae <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	6a1a      	ldr	r2, [r3, #32]
 8011696:	69bb      	ldr	r3, [r7, #24]
 8011698:	1ad3      	subs	r3, r2, r3
 801169a:	025b      	lsls	r3, r3, #9
 801169c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801169e:	18d0      	adds	r0, r2, r3
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	3330      	adds	r3, #48	@ 0x30
 80116a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80116a8:	4619      	mov	r1, r3
 80116aa:	f7fe f919 	bl	800f8e0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80116ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116b0:	025b      	lsls	r3, r3, #9
 80116b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80116b4:	e050      	b.n	8011758 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	6a1b      	ldr	r3, [r3, #32]
 80116ba:	69ba      	ldr	r2, [r7, #24]
 80116bc:	429a      	cmp	r2, r3
 80116be:	d02e      	beq.n	801171e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	7d1b      	ldrb	r3, [r3, #20]
 80116c4:	b25b      	sxtb	r3, r3
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	da18      	bge.n	80116fc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	7858      	ldrb	r0, [r3, #1]
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	6a1a      	ldr	r2, [r3, #32]
 80116d8:	2301      	movs	r3, #1
 80116da:	f7fe f841 	bl	800f760 <disk_write>
 80116de:	4603      	mov	r3, r0
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d004      	beq.n	80116ee <f_read+0x1da>
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	2201      	movs	r2, #1
 80116e8:	755a      	strb	r2, [r3, #21]
 80116ea:	2301      	movs	r3, #1
 80116ec:	e04d      	b.n	801178a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	7d1b      	ldrb	r3, [r3, #20]
 80116f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80116f6:	b2da      	uxtb	r2, r3
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	7858      	ldrb	r0, [r3, #1]
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011706:	2301      	movs	r3, #1
 8011708:	69ba      	ldr	r2, [r7, #24]
 801170a:	f7fe f809 	bl	800f720 <disk_read>
 801170e:	4603      	mov	r3, r0
 8011710:	2b00      	cmp	r3, #0
 8011712:	d004      	beq.n	801171e <f_read+0x20a>
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	2201      	movs	r2, #1
 8011718:	755a      	strb	r2, [r3, #21]
 801171a:	2301      	movs	r3, #1
 801171c:	e035      	b.n	801178a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	69ba      	ldr	r2, [r7, #24]
 8011722:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	699b      	ldr	r3, [r3, #24]
 8011728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801172c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8011730:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8011732:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	429a      	cmp	r2, r3
 8011738:	d901      	bls.n	801173e <f_read+0x22a>
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	699b      	ldr	r3, [r3, #24]
 8011748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801174c:	4413      	add	r3, r2
 801174e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011750:	4619      	mov	r1, r3
 8011752:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011754:	f7fe f8c4 	bl	800f8e0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801175a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801175c:	4413      	add	r3, r2
 801175e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	699a      	ldr	r2, [r3, #24]
 8011764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011766:	441a      	add	r2, r3
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	619a      	str	r2, [r3, #24]
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	681a      	ldr	r2, [r3, #0]
 8011770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011772:	441a      	add	r2, r3
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	601a      	str	r2, [r3, #0]
 8011778:	687a      	ldr	r2, [r7, #4]
 801177a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801177c:	1ad3      	subs	r3, r2, r3
 801177e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2b00      	cmp	r3, #0
 8011784:	f47f af01 	bne.w	801158a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011788:	2300      	movs	r3, #0
}
 801178a:	4618      	mov	r0, r3
 801178c:	3738      	adds	r7, #56	@ 0x38
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}

08011792 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011792:	b580      	push	{r7, lr}
 8011794:	b086      	sub	sp, #24
 8011796:	af00      	add	r7, sp, #0
 8011798:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f107 0208 	add.w	r2, r7, #8
 80117a0:	4611      	mov	r1, r2
 80117a2:	4618      	mov	r0, r3
 80117a4:	f7ff fc80 	bl	80110a8 <validate>
 80117a8:	4603      	mov	r3, r0
 80117aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80117ac:	7dfb      	ldrb	r3, [r7, #23]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d168      	bne.n	8011884 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	7d1b      	ldrb	r3, [r3, #20]
 80117b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d062      	beq.n	8011884 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	7d1b      	ldrb	r3, [r3, #20]
 80117c2:	b25b      	sxtb	r3, r3
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	da15      	bge.n	80117f4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	7858      	ldrb	r0, [r3, #1]
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6a1a      	ldr	r2, [r3, #32]
 80117d6:	2301      	movs	r3, #1
 80117d8:	f7fd ffc2 	bl	800f760 <disk_write>
 80117dc:	4603      	mov	r3, r0
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d001      	beq.n	80117e6 <f_sync+0x54>
 80117e2:	2301      	movs	r3, #1
 80117e4:	e04f      	b.n	8011886 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	7d1b      	ldrb	r3, [r3, #20]
 80117ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80117ee:	b2da      	uxtb	r2, r3
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80117f4:	f7fd fc02 	bl	800effc <get_fattime>
 80117f8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80117fa:	68ba      	ldr	r2, [r7, #8]
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011800:	4619      	mov	r1, r3
 8011802:	4610      	mov	r0, r2
 8011804:	f7fe fa9a 	bl	800fd3c <move_window>
 8011808:	4603      	mov	r3, r0
 801180a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801180c:	7dfb      	ldrb	r3, [r7, #23]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d138      	bne.n	8011884 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011816:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	330b      	adds	r3, #11
 801181c:	781a      	ldrb	r2, [r3, #0]
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	330b      	adds	r3, #11
 8011822:	f042 0220 	orr.w	r2, r2, #32
 8011826:	b2d2      	uxtb	r2, r2
 8011828:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6818      	ldr	r0, [r3, #0]
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	689b      	ldr	r3, [r3, #8]
 8011832:	461a      	mov	r2, r3
 8011834:	68f9      	ldr	r1, [r7, #12]
 8011836:	f7fe ffa4 	bl	8010782 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	f103 021c 	add.w	r2, r3, #28
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	68db      	ldr	r3, [r3, #12]
 8011844:	4619      	mov	r1, r3
 8011846:	4610      	mov	r0, r2
 8011848:	f7fe f81e 	bl	800f888 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	3316      	adds	r3, #22
 8011850:	6939      	ldr	r1, [r7, #16]
 8011852:	4618      	mov	r0, r3
 8011854:	f7fe f818 	bl	800f888 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	3312      	adds	r3, #18
 801185c:	2100      	movs	r1, #0
 801185e:	4618      	mov	r0, r3
 8011860:	f7fd fff7 	bl	800f852 <st_word>
					fs->wflag = 1;
 8011864:	68bb      	ldr	r3, [r7, #8]
 8011866:	2201      	movs	r2, #1
 8011868:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	4618      	mov	r0, r3
 801186e:	f7fe fa93 	bl	800fd98 <sync_fs>
 8011872:	4603      	mov	r3, r0
 8011874:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	7d1b      	ldrb	r3, [r3, #20]
 801187a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801187e:	b2da      	uxtb	r2, r3
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011884:	7dfb      	ldrb	r3, [r7, #23]
}
 8011886:	4618      	mov	r0, r3
 8011888:	3718      	adds	r7, #24
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}

0801188e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801188e:	b580      	push	{r7, lr}
 8011890:	b084      	sub	sp, #16
 8011892:	af00      	add	r7, sp, #0
 8011894:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f7ff ff7b 	bl	8011792 <f_sync>
 801189c:	4603      	mov	r3, r0
 801189e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80118a0:	7bfb      	ldrb	r3, [r7, #15]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d118      	bne.n	80118d8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f107 0208 	add.w	r2, r7, #8
 80118ac:	4611      	mov	r1, r2
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7ff fbfa 	bl	80110a8 <validate>
 80118b4:	4603      	mov	r3, r0
 80118b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80118b8:	7bfb      	ldrb	r3, [r7, #15]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d10c      	bne.n	80118d8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	691b      	ldr	r3, [r3, #16]
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7fe f996 	bl	800fbf4 <dec_lock>
 80118c8:	4603      	mov	r3, r0
 80118ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80118cc:	7bfb      	ldrb	r3, [r7, #15]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d102      	bne.n	80118d8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2200      	movs	r2, #0
 80118d6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80118d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80118da:	4618      	mov	r0, r3
 80118dc:	3710      	adds	r7, #16
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd80      	pop	{r7, pc}
	...

080118e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80118e4:	b480      	push	{r7}
 80118e6:	b087      	sub	sp, #28
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	60f8      	str	r0, [r7, #12]
 80118ec:	60b9      	str	r1, [r7, #8]
 80118ee:	4613      	mov	r3, r2
 80118f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80118f2:	2301      	movs	r3, #1
 80118f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80118f6:	2300      	movs	r3, #0
 80118f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80118fa:	4b1f      	ldr	r3, [pc, #124]	@ (8011978 <FATFS_LinkDriverEx+0x94>)
 80118fc:	7a5b      	ldrb	r3, [r3, #9]
 80118fe:	b2db      	uxtb	r3, r3
 8011900:	2b00      	cmp	r3, #0
 8011902:	d131      	bne.n	8011968 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011904:	4b1c      	ldr	r3, [pc, #112]	@ (8011978 <FATFS_LinkDriverEx+0x94>)
 8011906:	7a5b      	ldrb	r3, [r3, #9]
 8011908:	b2db      	uxtb	r3, r3
 801190a:	461a      	mov	r2, r3
 801190c:	4b1a      	ldr	r3, [pc, #104]	@ (8011978 <FATFS_LinkDriverEx+0x94>)
 801190e:	2100      	movs	r1, #0
 8011910:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011912:	4b19      	ldr	r3, [pc, #100]	@ (8011978 <FATFS_LinkDriverEx+0x94>)
 8011914:	7a5b      	ldrb	r3, [r3, #9]
 8011916:	b2db      	uxtb	r3, r3
 8011918:	4a17      	ldr	r2, [pc, #92]	@ (8011978 <FATFS_LinkDriverEx+0x94>)
 801191a:	009b      	lsls	r3, r3, #2
 801191c:	4413      	add	r3, r2
 801191e:	68fa      	ldr	r2, [r7, #12]
 8011920:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011922:	4b15      	ldr	r3, [pc, #84]	@ (8011978 <FATFS_LinkDriverEx+0x94>)
 8011924:	7a5b      	ldrb	r3, [r3, #9]
 8011926:	b2db      	uxtb	r3, r3
 8011928:	461a      	mov	r2, r3
 801192a:	4b13      	ldr	r3, [pc, #76]	@ (8011978 <FATFS_LinkDriverEx+0x94>)
 801192c:	4413      	add	r3, r2
 801192e:	79fa      	ldrb	r2, [r7, #7]
 8011930:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011932:	4b11      	ldr	r3, [pc, #68]	@ (8011978 <FATFS_LinkDriverEx+0x94>)
 8011934:	7a5b      	ldrb	r3, [r3, #9]
 8011936:	b2db      	uxtb	r3, r3
 8011938:	1c5a      	adds	r2, r3, #1
 801193a:	b2d1      	uxtb	r1, r2
 801193c:	4a0e      	ldr	r2, [pc, #56]	@ (8011978 <FATFS_LinkDriverEx+0x94>)
 801193e:	7251      	strb	r1, [r2, #9]
 8011940:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011942:	7dbb      	ldrb	r3, [r7, #22]
 8011944:	3330      	adds	r3, #48	@ 0x30
 8011946:	b2da      	uxtb	r2, r3
 8011948:	68bb      	ldr	r3, [r7, #8]
 801194a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	3301      	adds	r3, #1
 8011950:	223a      	movs	r2, #58	@ 0x3a
 8011952:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011954:	68bb      	ldr	r3, [r7, #8]
 8011956:	3302      	adds	r3, #2
 8011958:	222f      	movs	r2, #47	@ 0x2f
 801195a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	3303      	adds	r3, #3
 8011960:	2200      	movs	r2, #0
 8011962:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011964:	2300      	movs	r3, #0
 8011966:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011968:	7dfb      	ldrb	r3, [r7, #23]
}
 801196a:	4618      	mov	r0, r3
 801196c:	371c      	adds	r7, #28
 801196e:	46bd      	mov	sp, r7
 8011970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011974:	4770      	bx	lr
 8011976:	bf00      	nop
 8011978:	24000c50 	.word	0x24000c50

0801197c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b082      	sub	sp, #8
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011986:	2200      	movs	r2, #0
 8011988:	6839      	ldr	r1, [r7, #0]
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f7ff ffaa 	bl	80118e4 <FATFS_LinkDriverEx>
 8011990:	4603      	mov	r3, r0
}
 8011992:	4618      	mov	r0, r3
 8011994:	3708      	adds	r7, #8
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}

0801199a <_ZdlPvj>:
 801199a:	f000 b9a2 	b.w	8011ce2 <_ZdlPv>

0801199e <__cxa_guard_acquire>:
 801199e:	6802      	ldr	r2, [r0, #0]
 80119a0:	07d2      	lsls	r2, r2, #31
 80119a2:	4603      	mov	r3, r0
 80119a4:	d405      	bmi.n	80119b2 <__cxa_guard_acquire+0x14>
 80119a6:	7842      	ldrb	r2, [r0, #1]
 80119a8:	b102      	cbz	r2, 80119ac <__cxa_guard_acquire+0xe>
 80119aa:	deff      	udf	#255	@ 0xff
 80119ac:	2001      	movs	r0, #1
 80119ae:	7058      	strb	r0, [r3, #1]
 80119b0:	4770      	bx	lr
 80119b2:	2000      	movs	r0, #0
 80119b4:	4770      	bx	lr

080119b6 <__cxa_guard_release>:
 80119b6:	2301      	movs	r3, #1
 80119b8:	6003      	str	r3, [r0, #0]
 80119ba:	4770      	bx	lr

080119bc <_Znwj>:
 80119bc:	2801      	cmp	r0, #1
 80119be:	bf38      	it	cc
 80119c0:	2001      	movcc	r0, #1
 80119c2:	b510      	push	{r4, lr}
 80119c4:	4604      	mov	r4, r0
 80119c6:	4620      	mov	r0, r4
 80119c8:	f000 f99e 	bl	8011d08 <malloc>
 80119cc:	b100      	cbz	r0, 80119d0 <_Znwj+0x14>
 80119ce:	bd10      	pop	{r4, pc}
 80119d0:	f000 f98a 	bl	8011ce8 <_ZSt15get_new_handlerv>
 80119d4:	b908      	cbnz	r0, 80119da <_Znwj+0x1e>
 80119d6:	f000 f98f 	bl	8011cf8 <abort>
 80119da:	4780      	blx	r0
 80119dc:	e7f3      	b.n	80119c6 <_Znwj+0xa>

080119de <_ZSt17__throw_bad_allocv>:
 80119de:	b508      	push	{r3, lr}
 80119e0:	f000 f98a 	bl	8011cf8 <abort>

080119e4 <_ZSt20__throw_length_errorPKc>:
 80119e4:	b508      	push	{r3, lr}
 80119e6:	f000 f987 	bl	8011cf8 <abort>

080119ea <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80119ea:	b10a      	cbz	r2, 80119f0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80119ec:	f000 bd45 	b.w	801247a <memcpy>
 80119f0:	4770      	bx	lr

080119f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 80119f2:	f850 3b08 	ldr.w	r3, [r0], #8
 80119f6:	1a1b      	subs	r3, r3, r0
 80119f8:	4258      	negs	r0, r3
 80119fa:	4158      	adcs	r0, r3
 80119fc:	4770      	bx	lr
	...

08011a00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8011a00:	b508      	push	{r3, lr}
 8011a02:	680b      	ldr	r3, [r1, #0]
 8011a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011a08:	d302      	bcc.n	8011a10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8011a0a:	480d      	ldr	r0, [pc, #52]	@ (8011a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8011a0c:	f7ff ffea 	bl	80119e4 <_ZSt20__throw_length_errorPKc>
 8011a10:	4293      	cmp	r3, r2
 8011a12:	d90b      	bls.n	8011a2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8011a14:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8011a18:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8011a1c:	d206      	bcs.n	8011a2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8011a1e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8011a22:	bf2a      	itet	cs
 8011a24:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8011a28:	6008      	strcc	r0, [r1, #0]
 8011a2a:	600b      	strcs	r3, [r1, #0]
 8011a2c:	6808      	ldr	r0, [r1, #0]
 8011a2e:	3001      	adds	r0, #1
 8011a30:	d501      	bpl.n	8011a36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8011a32:	f7ff ffd4 	bl	80119de <_ZSt17__throw_bad_allocv>
 8011a36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011a3a:	f7ff bfbf 	b.w	80119bc <_Znwj>
 8011a3e:	bf00      	nop
 8011a40:	080134e4 	.word	0x080134e4

08011a44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8011a44:	b510      	push	{r4, lr}
 8011a46:	4604      	mov	r4, r0
 8011a48:	f7ff ffd3 	bl	80119f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8011a4c:	b920      	cbnz	r0, 8011a58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8011a4e:	6820      	ldr	r0, [r4, #0]
 8011a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a54:	f000 b945 	b.w	8011ce2 <_ZdlPv>
 8011a58:	bd10      	pop	{r4, pc}

08011a5a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8011a5a:	6840      	ldr	r0, [r0, #4]
 8011a5c:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8011a60:	3901      	subs	r1, #1
 8011a62:	1a09      	subs	r1, r1, r0
 8011a64:	4291      	cmp	r1, r2
 8011a66:	b508      	push	{r3, lr}
 8011a68:	d202      	bcs.n	8011a70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7ff ffba 	bl	80119e4 <_ZSt20__throw_length_errorPKc>
 8011a70:	bd08      	pop	{r3, pc}

08011a72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8011a72:	2a01      	cmp	r2, #1
 8011a74:	b410      	push	{r4}
 8011a76:	d104      	bne.n	8011a82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8011a78:	780a      	ldrb	r2, [r1, #0]
 8011a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a7e:	7002      	strb	r2, [r0, #0]
 8011a80:	4770      	bx	lr
 8011a82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a86:	f7ff bfb0 	b.w	80119ea <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08011a8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8011a8a:	2a01      	cmp	r2, #1
 8011a8c:	b430      	push	{r4, r5}
 8011a8e:	d103      	bne.n	8011a98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8011a90:	780b      	ldrb	r3, [r1, #0]
 8011a92:	7003      	strb	r3, [r0, #0]
 8011a94:	bc30      	pop	{r4, r5}
 8011a96:	4770      	bx	lr
 8011a98:	2a00      	cmp	r2, #0
 8011a9a:	d0fb      	beq.n	8011a94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8011a9c:	bc30      	pop	{r4, r5}
 8011a9e:	f000 bc03 	b.w	80122a8 <memmove>

08011aa2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8011aa2:	460b      	mov	r3, r1
 8011aa4:	2b01      	cmp	r3, #1
 8011aa6:	b410      	push	{r4}
 8011aa8:	4611      	mov	r1, r2
 8011aaa:	4604      	mov	r4, r0
 8011aac:	d103      	bne.n	8011ab6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8011aae:	7022      	strb	r2, [r4, #0]
 8011ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ab4:	4770      	bx	lr
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d0fa      	beq.n	8011ab0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8011aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011abe:	461a      	mov	r2, r3
 8011ac0:	f000 bc0c 	b.w	80122dc <memset>

08011ac4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8011ac4:	b508      	push	{r3, lr}
 8011ac6:	1a52      	subs	r2, r2, r1
 8011ac8:	f7ff ffd3 	bl	8011a72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011acc:	bd08      	pop	{r3, pc}

08011ace <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8011ace:	f100 0208 	add.w	r2, r0, #8
 8011ad2:	6002      	str	r2, [r0, #0]
 8011ad4:	2200      	movs	r2, #0
 8011ad6:	6042      	str	r2, [r0, #4]
 8011ad8:	7202      	strb	r2, [r0, #8]
 8011ada:	4770      	bx	lr

08011adc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8011adc:	b510      	push	{r4, lr}
 8011ade:	4604      	mov	r4, r0
 8011ae0:	f7ff ffb0 	bl	8011a44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8011ae4:	4620      	mov	r0, r4
 8011ae6:	bd10      	pop	{r4, pc}

08011ae8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8011ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aea:	460c      	mov	r4, r1
 8011aec:	4605      	mov	r5, r0
 8011aee:	f7ff ff80 	bl	80119f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8011af2:	4606      	mov	r6, r0
 8011af4:	4620      	mov	r0, r4
 8011af6:	f7ff ff7c 	bl	80119f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8011afa:	b190      	cbz	r0, 8011b22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 8011afc:	42a5      	cmp	r5, r4
 8011afe:	d00a      	beq.n	8011b16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8011b00:	6862      	ldr	r2, [r4, #4]
 8011b02:	b11a      	cbz	r2, 8011b0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 8011b04:	6821      	ldr	r1, [r4, #0]
 8011b06:	6828      	ldr	r0, [r5, #0]
 8011b08:	f7ff ffb3 	bl	8011a72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011b0c:	6863      	ldr	r3, [r4, #4]
 8011b0e:	682a      	ldr	r2, [r5, #0]
 8011b10:	606b      	str	r3, [r5, #4]
 8011b12:	2100      	movs	r1, #0
 8011b14:	54d1      	strb	r1, [r2, r3]
 8011b16:	6822      	ldr	r2, [r4, #0]
 8011b18:	2300      	movs	r3, #0
 8011b1a:	6063      	str	r3, [r4, #4]
 8011b1c:	7013      	strb	r3, [r2, #0]
 8011b1e:	4628      	mov	r0, r5
 8011b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b22:	b90e      	cbnz	r6, 8011b28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8011b24:	6828      	ldr	r0, [r5, #0]
 8011b26:	68af      	ldr	r7, [r5, #8]
 8011b28:	6823      	ldr	r3, [r4, #0]
 8011b2a:	602b      	str	r3, [r5, #0]
 8011b2c:	6863      	ldr	r3, [r4, #4]
 8011b2e:	606b      	str	r3, [r5, #4]
 8011b30:	68a3      	ldr	r3, [r4, #8]
 8011b32:	60ab      	str	r3, [r5, #8]
 8011b34:	b110      	cbz	r0, 8011b3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 8011b36:	6020      	str	r0, [r4, #0]
 8011b38:	60a7      	str	r7, [r4, #8]
 8011b3a:	e7ec      	b.n	8011b16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8011b3c:	f104 0308 	add.w	r3, r4, #8
 8011b40:	6023      	str	r3, [r4, #0]
 8011b42:	e7e8      	b.n	8011b16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

08011b44 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8011b44:	b510      	push	{r4, lr}
 8011b46:	4604      	mov	r4, r0
 8011b48:	f7ff ff53 	bl	80119f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8011b4c:	b908      	cbnz	r0, 8011b52 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8011b4e:	68a0      	ldr	r0, [r4, #8]
 8011b50:	bd10      	pop	{r4, pc}
 8011b52:	200f      	movs	r0, #15
 8011b54:	e7fc      	b.n	8011b50 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

08011b56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8011b56:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b5a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011b5c:	461f      	mov	r7, r3
 8011b5e:	6843      	ldr	r3, [r0, #4]
 8011b60:	eb01 0802 	add.w	r8, r1, r2
 8011b64:	1ab2      	subs	r2, r6, r2
 8011b66:	441a      	add	r2, r3
 8011b68:	4604      	mov	r4, r0
 8011b6a:	460d      	mov	r5, r1
 8011b6c:	eba3 0908 	sub.w	r9, r3, r8
 8011b70:	9201      	str	r2, [sp, #4]
 8011b72:	f7ff ffe7 	bl	8011b44 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8011b76:	a901      	add	r1, sp, #4
 8011b78:	4602      	mov	r2, r0
 8011b7a:	4620      	mov	r0, r4
 8011b7c:	f7ff ff40 	bl	8011a00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8011b80:	4682      	mov	sl, r0
 8011b82:	b11d      	cbz	r5, 8011b8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8011b84:	6821      	ldr	r1, [r4, #0]
 8011b86:	462a      	mov	r2, r5
 8011b88:	f7ff ff73 	bl	8011a72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011b8c:	b137      	cbz	r7, 8011b9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8011b8e:	b12e      	cbz	r6, 8011b9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8011b90:	4632      	mov	r2, r6
 8011b92:	4639      	mov	r1, r7
 8011b94:	eb0a 0005 	add.w	r0, sl, r5
 8011b98:	f7ff ff6b 	bl	8011a72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011b9c:	f1b9 0f00 	cmp.w	r9, #0
 8011ba0:	d007      	beq.n	8011bb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8011ba2:	6821      	ldr	r1, [r4, #0]
 8011ba4:	4435      	add	r5, r6
 8011ba6:	464a      	mov	r2, r9
 8011ba8:	4441      	add	r1, r8
 8011baa:	eb0a 0005 	add.w	r0, sl, r5
 8011bae:	f7ff ff60 	bl	8011a72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	f7ff ff46 	bl	8011a44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8011bb8:	9b01      	ldr	r3, [sp, #4]
 8011bba:	f8c4 a000 	str.w	sl, [r4]
 8011bbe:	60a3      	str	r3, [r4, #8]
 8011bc0:	b002      	add	sp, #8
 8011bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 8011bc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011bc8:	4604      	mov	r4, r0
 8011bca:	9101      	str	r1, [sp, #4]
 8011bcc:	f7ff ffba 	bl	8011b44 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8011bd0:	9b01      	ldr	r3, [sp, #4]
 8011bd2:	4283      	cmp	r3, r0
 8011bd4:	4602      	mov	r2, r0
 8011bd6:	d90f      	bls.n	8011bf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 8011bd8:	a901      	add	r1, sp, #4
 8011bda:	4620      	mov	r0, r4
 8011bdc:	f7ff ff10 	bl	8011a00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8011be0:	6862      	ldr	r2, [r4, #4]
 8011be2:	6821      	ldr	r1, [r4, #0]
 8011be4:	3201      	adds	r2, #1
 8011be6:	4605      	mov	r5, r0
 8011be8:	f7ff ff43 	bl	8011a72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011bec:	4620      	mov	r0, r4
 8011bee:	f7ff ff29 	bl	8011a44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8011bf2:	9b01      	ldr	r3, [sp, #4]
 8011bf4:	6025      	str	r5, [r4, #0]
 8011bf6:	60a3      	str	r3, [r4, #8]
 8011bf8:	b003      	add	sp, #12
 8011bfa:	bd30      	pop	{r4, r5, pc}

08011bfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8011bfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c00:	4616      	mov	r6, r2
 8011c02:	461d      	mov	r5, r3
 8011c04:	4604      	mov	r4, r0
 8011c06:	4b1b      	ldr	r3, [pc, #108]	@ (8011c74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 8011c08:	462a      	mov	r2, r5
 8011c0a:	460f      	mov	r7, r1
 8011c0c:	4631      	mov	r1, r6
 8011c0e:	f7ff ff24 	bl	8011a5a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8011c12:	4620      	mov	r0, r4
 8011c14:	f7ff ff96 	bl	8011b44 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8011c18:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011c1c:	eba5 0806 	sub.w	r8, r5, r6
 8011c20:	44c8      	add	r8, r9
 8011c22:	4540      	cmp	r0, r8
 8011c24:	d31d      	bcc.n	8011c62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 8011c26:	19f3      	adds	r3, r6, r7
 8011c28:	ebb9 0203 	subs.w	r2, r9, r3
 8011c2c:	d007      	beq.n	8011c3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8011c2e:	42ae      	cmp	r6, r5
 8011c30:	d005      	beq.n	8011c3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8011c32:	6820      	ldr	r0, [r4, #0]
 8011c34:	4438      	add	r0, r7
 8011c36:	1981      	adds	r1, r0, r6
 8011c38:	4428      	add	r0, r5
 8011c3a:	f7ff ff26 	bl	8011a8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8011c3e:	b135      	cbz	r5, 8011c4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 8011c40:	6820      	ldr	r0, [r4, #0]
 8011c42:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 8011c46:	4629      	mov	r1, r5
 8011c48:	4438      	add	r0, r7
 8011c4a:	f7ff ff2a 	bl	8011aa2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8011c4e:	6823      	ldr	r3, [r4, #0]
 8011c50:	f8c4 8004 	str.w	r8, [r4, #4]
 8011c54:	2200      	movs	r2, #0
 8011c56:	4620      	mov	r0, r4
 8011c58:	f803 2008 	strb.w	r2, [r3, r8]
 8011c5c:	b003      	add	sp, #12
 8011c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c62:	9500      	str	r5, [sp, #0]
 8011c64:	2300      	movs	r3, #0
 8011c66:	4632      	mov	r2, r6
 8011c68:	4639      	mov	r1, r7
 8011c6a:	4620      	mov	r0, r4
 8011c6c:	f7ff ff73 	bl	8011b56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8011c70:	e7e5      	b.n	8011c3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8011c72:	bf00      	nop
 8011c74:	080134fc 	.word	0x080134fc

08011c78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 8011c78:	b507      	push	{r0, r1, r2, lr}
 8011c7a:	9200      	str	r2, [sp, #0]
 8011c7c:	460b      	mov	r3, r1
 8011c7e:	2200      	movs	r2, #0
 8011c80:	6841      	ldr	r1, [r0, #4]
 8011c82:	f7ff ffbb 	bl	8011bfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 8011c86:	b003      	add	sp, #12
 8011c88:	f85d fb04 	ldr.w	pc, [sp], #4

08011c8c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8011c8c:	6800      	ldr	r0, [r0, #0]
 8011c8e:	4770      	bx	lr

08011c90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8011c90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c92:	1a53      	subs	r3, r2, r1
 8011c94:	2b0f      	cmp	r3, #15
 8011c96:	4604      	mov	r4, r0
 8011c98:	460d      	mov	r5, r1
 8011c9a:	4616      	mov	r6, r2
 8011c9c:	9301      	str	r3, [sp, #4]
 8011c9e:	d906      	bls.n	8011cae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	a901      	add	r1, sp, #4
 8011ca4:	f7ff feac 	bl	8011a00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8011ca8:	9b01      	ldr	r3, [sp, #4]
 8011caa:	6020      	str	r0, [r4, #0]
 8011cac:	60a3      	str	r3, [r4, #8]
 8011cae:	4632      	mov	r2, r6
 8011cb0:	4629      	mov	r1, r5
 8011cb2:	6820      	ldr	r0, [r4, #0]
 8011cb4:	f7ff ff06 	bl	8011ac4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8011cb8:	9b01      	ldr	r3, [sp, #4]
 8011cba:	6822      	ldr	r2, [r4, #0]
 8011cbc:	6063      	str	r3, [r4, #4]
 8011cbe:	2100      	movs	r1, #0
 8011cc0:	54d1      	strb	r1, [r2, r3]
 8011cc2:	b002      	add	sp, #8
 8011cc4:	bd70      	pop	{r4, r5, r6, pc}

08011cc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8011cc6:	f100 0208 	add.w	r2, r0, #8
 8011cca:	b510      	push	{r4, lr}
 8011ccc:	6002      	str	r2, [r0, #0]
 8011cce:	e9d1 1200 	ldrd	r1, r2, [r1]
 8011cd2:	4604      	mov	r4, r0
 8011cd4:	f04f 0300 	mov.w	r3, #0
 8011cd8:	440a      	add	r2, r1
 8011cda:	f7ff ffd9 	bl	8011c90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8011cde:	4620      	mov	r0, r4
 8011ce0:	bd10      	pop	{r4, pc}

08011ce2 <_ZdlPv>:
 8011ce2:	f000 b819 	b.w	8011d18 <free>
	...

08011ce8 <_ZSt15get_new_handlerv>:
 8011ce8:	4b02      	ldr	r3, [pc, #8]	@ (8011cf4 <_ZSt15get_new_handlerv+0xc>)
 8011cea:	6818      	ldr	r0, [r3, #0]
 8011cec:	f3bf 8f5b 	dmb	ish
 8011cf0:	4770      	bx	lr
 8011cf2:	bf00      	nop
 8011cf4:	24000c5c 	.word	0x24000c5c

08011cf8 <abort>:
 8011cf8:	b508      	push	{r3, lr}
 8011cfa:	2006      	movs	r0, #6
 8011cfc:	f000 fb1e 	bl	801233c <raise>
 8011d00:	2001      	movs	r0, #1
 8011d02:	f7f2 fbfb 	bl	80044fc <_exit>
	...

08011d08 <malloc>:
 8011d08:	4b02      	ldr	r3, [pc, #8]	@ (8011d14 <malloc+0xc>)
 8011d0a:	4601      	mov	r1, r0
 8011d0c:	6818      	ldr	r0, [r3, #0]
 8011d0e:	f000 b82d 	b.w	8011d6c <_malloc_r>
 8011d12:	bf00      	nop
 8011d14:	24000074 	.word	0x24000074

08011d18 <free>:
 8011d18:	4b02      	ldr	r3, [pc, #8]	@ (8011d24 <free+0xc>)
 8011d1a:	4601      	mov	r1, r0
 8011d1c:	6818      	ldr	r0, [r3, #0]
 8011d1e:	f000 bbbb 	b.w	8012498 <_free_r>
 8011d22:	bf00      	nop
 8011d24:	24000074 	.word	0x24000074

08011d28 <sbrk_aligned>:
 8011d28:	b570      	push	{r4, r5, r6, lr}
 8011d2a:	4e0f      	ldr	r6, [pc, #60]	@ (8011d68 <sbrk_aligned+0x40>)
 8011d2c:	460c      	mov	r4, r1
 8011d2e:	6831      	ldr	r1, [r6, #0]
 8011d30:	4605      	mov	r5, r0
 8011d32:	b911      	cbnz	r1, 8011d3a <sbrk_aligned+0x12>
 8011d34:	f000 fb52 	bl	80123dc <_sbrk_r>
 8011d38:	6030      	str	r0, [r6, #0]
 8011d3a:	4621      	mov	r1, r4
 8011d3c:	4628      	mov	r0, r5
 8011d3e:	f000 fb4d 	bl	80123dc <_sbrk_r>
 8011d42:	1c43      	adds	r3, r0, #1
 8011d44:	d103      	bne.n	8011d4e <sbrk_aligned+0x26>
 8011d46:	f04f 34ff 	mov.w	r4, #4294967295
 8011d4a:	4620      	mov	r0, r4
 8011d4c:	bd70      	pop	{r4, r5, r6, pc}
 8011d4e:	1cc4      	adds	r4, r0, #3
 8011d50:	f024 0403 	bic.w	r4, r4, #3
 8011d54:	42a0      	cmp	r0, r4
 8011d56:	d0f8      	beq.n	8011d4a <sbrk_aligned+0x22>
 8011d58:	1a21      	subs	r1, r4, r0
 8011d5a:	4628      	mov	r0, r5
 8011d5c:	f000 fb3e 	bl	80123dc <_sbrk_r>
 8011d60:	3001      	adds	r0, #1
 8011d62:	d1f2      	bne.n	8011d4a <sbrk_aligned+0x22>
 8011d64:	e7ef      	b.n	8011d46 <sbrk_aligned+0x1e>
 8011d66:	bf00      	nop
 8011d68:	24000c60 	.word	0x24000c60

08011d6c <_malloc_r>:
 8011d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d70:	1ccd      	adds	r5, r1, #3
 8011d72:	f025 0503 	bic.w	r5, r5, #3
 8011d76:	3508      	adds	r5, #8
 8011d78:	2d0c      	cmp	r5, #12
 8011d7a:	bf38      	it	cc
 8011d7c:	250c      	movcc	r5, #12
 8011d7e:	2d00      	cmp	r5, #0
 8011d80:	4606      	mov	r6, r0
 8011d82:	db01      	blt.n	8011d88 <_malloc_r+0x1c>
 8011d84:	42a9      	cmp	r1, r5
 8011d86:	d904      	bls.n	8011d92 <_malloc_r+0x26>
 8011d88:	230c      	movs	r3, #12
 8011d8a:	6033      	str	r3, [r6, #0]
 8011d8c:	2000      	movs	r0, #0
 8011d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011e68 <_malloc_r+0xfc>
 8011d96:	f000 f869 	bl	8011e6c <__malloc_lock>
 8011d9a:	f8d8 3000 	ldr.w	r3, [r8]
 8011d9e:	461c      	mov	r4, r3
 8011da0:	bb44      	cbnz	r4, 8011df4 <_malloc_r+0x88>
 8011da2:	4629      	mov	r1, r5
 8011da4:	4630      	mov	r0, r6
 8011da6:	f7ff ffbf 	bl	8011d28 <sbrk_aligned>
 8011daa:	1c43      	adds	r3, r0, #1
 8011dac:	4604      	mov	r4, r0
 8011dae:	d158      	bne.n	8011e62 <_malloc_r+0xf6>
 8011db0:	f8d8 4000 	ldr.w	r4, [r8]
 8011db4:	4627      	mov	r7, r4
 8011db6:	2f00      	cmp	r7, #0
 8011db8:	d143      	bne.n	8011e42 <_malloc_r+0xd6>
 8011dba:	2c00      	cmp	r4, #0
 8011dbc:	d04b      	beq.n	8011e56 <_malloc_r+0xea>
 8011dbe:	6823      	ldr	r3, [r4, #0]
 8011dc0:	4639      	mov	r1, r7
 8011dc2:	4630      	mov	r0, r6
 8011dc4:	eb04 0903 	add.w	r9, r4, r3
 8011dc8:	f000 fb08 	bl	80123dc <_sbrk_r>
 8011dcc:	4581      	cmp	r9, r0
 8011dce:	d142      	bne.n	8011e56 <_malloc_r+0xea>
 8011dd0:	6821      	ldr	r1, [r4, #0]
 8011dd2:	1a6d      	subs	r5, r5, r1
 8011dd4:	4629      	mov	r1, r5
 8011dd6:	4630      	mov	r0, r6
 8011dd8:	f7ff ffa6 	bl	8011d28 <sbrk_aligned>
 8011ddc:	3001      	adds	r0, #1
 8011dde:	d03a      	beq.n	8011e56 <_malloc_r+0xea>
 8011de0:	6823      	ldr	r3, [r4, #0]
 8011de2:	442b      	add	r3, r5
 8011de4:	6023      	str	r3, [r4, #0]
 8011de6:	f8d8 3000 	ldr.w	r3, [r8]
 8011dea:	685a      	ldr	r2, [r3, #4]
 8011dec:	bb62      	cbnz	r2, 8011e48 <_malloc_r+0xdc>
 8011dee:	f8c8 7000 	str.w	r7, [r8]
 8011df2:	e00f      	b.n	8011e14 <_malloc_r+0xa8>
 8011df4:	6822      	ldr	r2, [r4, #0]
 8011df6:	1b52      	subs	r2, r2, r5
 8011df8:	d420      	bmi.n	8011e3c <_malloc_r+0xd0>
 8011dfa:	2a0b      	cmp	r2, #11
 8011dfc:	d917      	bls.n	8011e2e <_malloc_r+0xc2>
 8011dfe:	1961      	adds	r1, r4, r5
 8011e00:	42a3      	cmp	r3, r4
 8011e02:	6025      	str	r5, [r4, #0]
 8011e04:	bf18      	it	ne
 8011e06:	6059      	strne	r1, [r3, #4]
 8011e08:	6863      	ldr	r3, [r4, #4]
 8011e0a:	bf08      	it	eq
 8011e0c:	f8c8 1000 	streq.w	r1, [r8]
 8011e10:	5162      	str	r2, [r4, r5]
 8011e12:	604b      	str	r3, [r1, #4]
 8011e14:	4630      	mov	r0, r6
 8011e16:	f000 f82f 	bl	8011e78 <__malloc_unlock>
 8011e1a:	f104 000b 	add.w	r0, r4, #11
 8011e1e:	1d23      	adds	r3, r4, #4
 8011e20:	f020 0007 	bic.w	r0, r0, #7
 8011e24:	1ac2      	subs	r2, r0, r3
 8011e26:	bf1c      	itt	ne
 8011e28:	1a1b      	subne	r3, r3, r0
 8011e2a:	50a3      	strne	r3, [r4, r2]
 8011e2c:	e7af      	b.n	8011d8e <_malloc_r+0x22>
 8011e2e:	6862      	ldr	r2, [r4, #4]
 8011e30:	42a3      	cmp	r3, r4
 8011e32:	bf0c      	ite	eq
 8011e34:	f8c8 2000 	streq.w	r2, [r8]
 8011e38:	605a      	strne	r2, [r3, #4]
 8011e3a:	e7eb      	b.n	8011e14 <_malloc_r+0xa8>
 8011e3c:	4623      	mov	r3, r4
 8011e3e:	6864      	ldr	r4, [r4, #4]
 8011e40:	e7ae      	b.n	8011da0 <_malloc_r+0x34>
 8011e42:	463c      	mov	r4, r7
 8011e44:	687f      	ldr	r7, [r7, #4]
 8011e46:	e7b6      	b.n	8011db6 <_malloc_r+0x4a>
 8011e48:	461a      	mov	r2, r3
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	42a3      	cmp	r3, r4
 8011e4e:	d1fb      	bne.n	8011e48 <_malloc_r+0xdc>
 8011e50:	2300      	movs	r3, #0
 8011e52:	6053      	str	r3, [r2, #4]
 8011e54:	e7de      	b.n	8011e14 <_malloc_r+0xa8>
 8011e56:	230c      	movs	r3, #12
 8011e58:	6033      	str	r3, [r6, #0]
 8011e5a:	4630      	mov	r0, r6
 8011e5c:	f000 f80c 	bl	8011e78 <__malloc_unlock>
 8011e60:	e794      	b.n	8011d8c <_malloc_r+0x20>
 8011e62:	6005      	str	r5, [r0, #0]
 8011e64:	e7d6      	b.n	8011e14 <_malloc_r+0xa8>
 8011e66:	bf00      	nop
 8011e68:	24000c64 	.word	0x24000c64

08011e6c <__malloc_lock>:
 8011e6c:	4801      	ldr	r0, [pc, #4]	@ (8011e74 <__malloc_lock+0x8>)
 8011e6e:	f000 bb02 	b.w	8012476 <__retarget_lock_acquire_recursive>
 8011e72:	bf00      	nop
 8011e74:	24000da8 	.word	0x24000da8

08011e78 <__malloc_unlock>:
 8011e78:	4801      	ldr	r0, [pc, #4]	@ (8011e80 <__malloc_unlock+0x8>)
 8011e7a:	f000 bafd 	b.w	8012478 <__retarget_lock_release_recursive>
 8011e7e:	bf00      	nop
 8011e80:	24000da8 	.word	0x24000da8

08011e84 <std>:
 8011e84:	2300      	movs	r3, #0
 8011e86:	b510      	push	{r4, lr}
 8011e88:	4604      	mov	r4, r0
 8011e8a:	e9c0 3300 	strd	r3, r3, [r0]
 8011e8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011e92:	6083      	str	r3, [r0, #8]
 8011e94:	8181      	strh	r1, [r0, #12]
 8011e96:	6643      	str	r3, [r0, #100]	@ 0x64
 8011e98:	81c2      	strh	r2, [r0, #14]
 8011e9a:	6183      	str	r3, [r0, #24]
 8011e9c:	4619      	mov	r1, r3
 8011e9e:	2208      	movs	r2, #8
 8011ea0:	305c      	adds	r0, #92	@ 0x5c
 8011ea2:	f000 fa1b 	bl	80122dc <memset>
 8011ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8011edc <std+0x58>)
 8011ea8:	6263      	str	r3, [r4, #36]	@ 0x24
 8011eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8011ee0 <std+0x5c>)
 8011eac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011eae:	4b0d      	ldr	r3, [pc, #52]	@ (8011ee4 <std+0x60>)
 8011eb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8011ee8 <std+0x64>)
 8011eb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8011eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8011eec <std+0x68>)
 8011eb8:	6224      	str	r4, [r4, #32]
 8011eba:	429c      	cmp	r4, r3
 8011ebc:	d006      	beq.n	8011ecc <std+0x48>
 8011ebe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011ec2:	4294      	cmp	r4, r2
 8011ec4:	d002      	beq.n	8011ecc <std+0x48>
 8011ec6:	33d0      	adds	r3, #208	@ 0xd0
 8011ec8:	429c      	cmp	r4, r3
 8011eca:	d105      	bne.n	8011ed8 <std+0x54>
 8011ecc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ed4:	f000 bace 	b.w	8012474 <__retarget_lock_init_recursive>
 8011ed8:	bd10      	pop	{r4, pc}
 8011eda:	bf00      	nop
 8011edc:	080120f9 	.word	0x080120f9
 8011ee0:	0801211b 	.word	0x0801211b
 8011ee4:	08012153 	.word	0x08012153
 8011ee8:	08012177 	.word	0x08012177
 8011eec:	24000c68 	.word	0x24000c68

08011ef0 <stdio_exit_handler>:
 8011ef0:	4a02      	ldr	r2, [pc, #8]	@ (8011efc <stdio_exit_handler+0xc>)
 8011ef2:	4903      	ldr	r1, [pc, #12]	@ (8011f00 <stdio_exit_handler+0x10>)
 8011ef4:	4803      	ldr	r0, [pc, #12]	@ (8011f04 <stdio_exit_handler+0x14>)
 8011ef6:	f000 b869 	b.w	8011fcc <_fwalk_sglue>
 8011efa:	bf00      	nop
 8011efc:	24000068 	.word	0x24000068
 8011f00:	08012bd5 	.word	0x08012bd5
 8011f04:	24000078 	.word	0x24000078

08011f08 <cleanup_stdio>:
 8011f08:	6841      	ldr	r1, [r0, #4]
 8011f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8011f3c <cleanup_stdio+0x34>)
 8011f0c:	4299      	cmp	r1, r3
 8011f0e:	b510      	push	{r4, lr}
 8011f10:	4604      	mov	r4, r0
 8011f12:	d001      	beq.n	8011f18 <cleanup_stdio+0x10>
 8011f14:	f000 fe5e 	bl	8012bd4 <_fflush_r>
 8011f18:	68a1      	ldr	r1, [r4, #8]
 8011f1a:	4b09      	ldr	r3, [pc, #36]	@ (8011f40 <cleanup_stdio+0x38>)
 8011f1c:	4299      	cmp	r1, r3
 8011f1e:	d002      	beq.n	8011f26 <cleanup_stdio+0x1e>
 8011f20:	4620      	mov	r0, r4
 8011f22:	f000 fe57 	bl	8012bd4 <_fflush_r>
 8011f26:	68e1      	ldr	r1, [r4, #12]
 8011f28:	4b06      	ldr	r3, [pc, #24]	@ (8011f44 <cleanup_stdio+0x3c>)
 8011f2a:	4299      	cmp	r1, r3
 8011f2c:	d004      	beq.n	8011f38 <cleanup_stdio+0x30>
 8011f2e:	4620      	mov	r0, r4
 8011f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f34:	f000 be4e 	b.w	8012bd4 <_fflush_r>
 8011f38:	bd10      	pop	{r4, pc}
 8011f3a:	bf00      	nop
 8011f3c:	24000c68 	.word	0x24000c68
 8011f40:	24000cd0 	.word	0x24000cd0
 8011f44:	24000d38 	.word	0x24000d38

08011f48 <global_stdio_init.part.0>:
 8011f48:	b510      	push	{r4, lr}
 8011f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8011f78 <global_stdio_init.part.0+0x30>)
 8011f4c:	4c0b      	ldr	r4, [pc, #44]	@ (8011f7c <global_stdio_init.part.0+0x34>)
 8011f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8011f80 <global_stdio_init.part.0+0x38>)
 8011f50:	601a      	str	r2, [r3, #0]
 8011f52:	4620      	mov	r0, r4
 8011f54:	2200      	movs	r2, #0
 8011f56:	2104      	movs	r1, #4
 8011f58:	f7ff ff94 	bl	8011e84 <std>
 8011f5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011f60:	2201      	movs	r2, #1
 8011f62:	2109      	movs	r1, #9
 8011f64:	f7ff ff8e 	bl	8011e84 <std>
 8011f68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011f6c:	2202      	movs	r2, #2
 8011f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f72:	2112      	movs	r1, #18
 8011f74:	f7ff bf86 	b.w	8011e84 <std>
 8011f78:	24000da0 	.word	0x24000da0
 8011f7c:	24000c68 	.word	0x24000c68
 8011f80:	08011ef1 	.word	0x08011ef1

08011f84 <__sfp_lock_acquire>:
 8011f84:	4801      	ldr	r0, [pc, #4]	@ (8011f8c <__sfp_lock_acquire+0x8>)
 8011f86:	f000 ba76 	b.w	8012476 <__retarget_lock_acquire_recursive>
 8011f8a:	bf00      	nop
 8011f8c:	24000da9 	.word	0x24000da9

08011f90 <__sfp_lock_release>:
 8011f90:	4801      	ldr	r0, [pc, #4]	@ (8011f98 <__sfp_lock_release+0x8>)
 8011f92:	f000 ba71 	b.w	8012478 <__retarget_lock_release_recursive>
 8011f96:	bf00      	nop
 8011f98:	24000da9 	.word	0x24000da9

08011f9c <__sinit>:
 8011f9c:	b510      	push	{r4, lr}
 8011f9e:	4604      	mov	r4, r0
 8011fa0:	f7ff fff0 	bl	8011f84 <__sfp_lock_acquire>
 8011fa4:	6a23      	ldr	r3, [r4, #32]
 8011fa6:	b11b      	cbz	r3, 8011fb0 <__sinit+0x14>
 8011fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fac:	f7ff bff0 	b.w	8011f90 <__sfp_lock_release>
 8011fb0:	4b04      	ldr	r3, [pc, #16]	@ (8011fc4 <__sinit+0x28>)
 8011fb2:	6223      	str	r3, [r4, #32]
 8011fb4:	4b04      	ldr	r3, [pc, #16]	@ (8011fc8 <__sinit+0x2c>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d1f5      	bne.n	8011fa8 <__sinit+0xc>
 8011fbc:	f7ff ffc4 	bl	8011f48 <global_stdio_init.part.0>
 8011fc0:	e7f2      	b.n	8011fa8 <__sinit+0xc>
 8011fc2:	bf00      	nop
 8011fc4:	08011f09 	.word	0x08011f09
 8011fc8:	24000da0 	.word	0x24000da0

08011fcc <_fwalk_sglue>:
 8011fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fd0:	4607      	mov	r7, r0
 8011fd2:	4688      	mov	r8, r1
 8011fd4:	4614      	mov	r4, r2
 8011fd6:	2600      	movs	r6, #0
 8011fd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011fdc:	f1b9 0901 	subs.w	r9, r9, #1
 8011fe0:	d505      	bpl.n	8011fee <_fwalk_sglue+0x22>
 8011fe2:	6824      	ldr	r4, [r4, #0]
 8011fe4:	2c00      	cmp	r4, #0
 8011fe6:	d1f7      	bne.n	8011fd8 <_fwalk_sglue+0xc>
 8011fe8:	4630      	mov	r0, r6
 8011fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fee:	89ab      	ldrh	r3, [r5, #12]
 8011ff0:	2b01      	cmp	r3, #1
 8011ff2:	d907      	bls.n	8012004 <_fwalk_sglue+0x38>
 8011ff4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ff8:	3301      	adds	r3, #1
 8011ffa:	d003      	beq.n	8012004 <_fwalk_sglue+0x38>
 8011ffc:	4629      	mov	r1, r5
 8011ffe:	4638      	mov	r0, r7
 8012000:	47c0      	blx	r8
 8012002:	4306      	orrs	r6, r0
 8012004:	3568      	adds	r5, #104	@ 0x68
 8012006:	e7e9      	b.n	8011fdc <_fwalk_sglue+0x10>

08012008 <iprintf>:
 8012008:	b40f      	push	{r0, r1, r2, r3}
 801200a:	b507      	push	{r0, r1, r2, lr}
 801200c:	4906      	ldr	r1, [pc, #24]	@ (8012028 <iprintf+0x20>)
 801200e:	ab04      	add	r3, sp, #16
 8012010:	6808      	ldr	r0, [r1, #0]
 8012012:	f853 2b04 	ldr.w	r2, [r3], #4
 8012016:	6881      	ldr	r1, [r0, #8]
 8012018:	9301      	str	r3, [sp, #4]
 801201a:	f000 fab1 	bl	8012580 <_vfiprintf_r>
 801201e:	b003      	add	sp, #12
 8012020:	f85d eb04 	ldr.w	lr, [sp], #4
 8012024:	b004      	add	sp, #16
 8012026:	4770      	bx	lr
 8012028:	24000074 	.word	0x24000074

0801202c <putchar>:
 801202c:	4b02      	ldr	r3, [pc, #8]	@ (8012038 <putchar+0xc>)
 801202e:	4601      	mov	r1, r0
 8012030:	6818      	ldr	r0, [r3, #0]
 8012032:	6882      	ldr	r2, [r0, #8]
 8012034:	f000 be58 	b.w	8012ce8 <_putc_r>
 8012038:	24000074 	.word	0x24000074

0801203c <_puts_r>:
 801203c:	6a03      	ldr	r3, [r0, #32]
 801203e:	b570      	push	{r4, r5, r6, lr}
 8012040:	6884      	ldr	r4, [r0, #8]
 8012042:	4605      	mov	r5, r0
 8012044:	460e      	mov	r6, r1
 8012046:	b90b      	cbnz	r3, 801204c <_puts_r+0x10>
 8012048:	f7ff ffa8 	bl	8011f9c <__sinit>
 801204c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801204e:	07db      	lsls	r3, r3, #31
 8012050:	d405      	bmi.n	801205e <_puts_r+0x22>
 8012052:	89a3      	ldrh	r3, [r4, #12]
 8012054:	0598      	lsls	r0, r3, #22
 8012056:	d402      	bmi.n	801205e <_puts_r+0x22>
 8012058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801205a:	f000 fa0c 	bl	8012476 <__retarget_lock_acquire_recursive>
 801205e:	89a3      	ldrh	r3, [r4, #12]
 8012060:	0719      	lsls	r1, r3, #28
 8012062:	d502      	bpl.n	801206a <_puts_r+0x2e>
 8012064:	6923      	ldr	r3, [r4, #16]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d135      	bne.n	80120d6 <_puts_r+0x9a>
 801206a:	4621      	mov	r1, r4
 801206c:	4628      	mov	r0, r5
 801206e:	f000 f8c5 	bl	80121fc <__swsetup_r>
 8012072:	b380      	cbz	r0, 80120d6 <_puts_r+0x9a>
 8012074:	f04f 35ff 	mov.w	r5, #4294967295
 8012078:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801207a:	07da      	lsls	r2, r3, #31
 801207c:	d405      	bmi.n	801208a <_puts_r+0x4e>
 801207e:	89a3      	ldrh	r3, [r4, #12]
 8012080:	059b      	lsls	r3, r3, #22
 8012082:	d402      	bmi.n	801208a <_puts_r+0x4e>
 8012084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012086:	f000 f9f7 	bl	8012478 <__retarget_lock_release_recursive>
 801208a:	4628      	mov	r0, r5
 801208c:	bd70      	pop	{r4, r5, r6, pc}
 801208e:	2b00      	cmp	r3, #0
 8012090:	da04      	bge.n	801209c <_puts_r+0x60>
 8012092:	69a2      	ldr	r2, [r4, #24]
 8012094:	429a      	cmp	r2, r3
 8012096:	dc17      	bgt.n	80120c8 <_puts_r+0x8c>
 8012098:	290a      	cmp	r1, #10
 801209a:	d015      	beq.n	80120c8 <_puts_r+0x8c>
 801209c:	6823      	ldr	r3, [r4, #0]
 801209e:	1c5a      	adds	r2, r3, #1
 80120a0:	6022      	str	r2, [r4, #0]
 80120a2:	7019      	strb	r1, [r3, #0]
 80120a4:	68a3      	ldr	r3, [r4, #8]
 80120a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80120aa:	3b01      	subs	r3, #1
 80120ac:	60a3      	str	r3, [r4, #8]
 80120ae:	2900      	cmp	r1, #0
 80120b0:	d1ed      	bne.n	801208e <_puts_r+0x52>
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	da11      	bge.n	80120da <_puts_r+0x9e>
 80120b6:	4622      	mov	r2, r4
 80120b8:	210a      	movs	r1, #10
 80120ba:	4628      	mov	r0, r5
 80120bc:	f000 f85f 	bl	801217e <__swbuf_r>
 80120c0:	3001      	adds	r0, #1
 80120c2:	d0d7      	beq.n	8012074 <_puts_r+0x38>
 80120c4:	250a      	movs	r5, #10
 80120c6:	e7d7      	b.n	8012078 <_puts_r+0x3c>
 80120c8:	4622      	mov	r2, r4
 80120ca:	4628      	mov	r0, r5
 80120cc:	f000 f857 	bl	801217e <__swbuf_r>
 80120d0:	3001      	adds	r0, #1
 80120d2:	d1e7      	bne.n	80120a4 <_puts_r+0x68>
 80120d4:	e7ce      	b.n	8012074 <_puts_r+0x38>
 80120d6:	3e01      	subs	r6, #1
 80120d8:	e7e4      	b.n	80120a4 <_puts_r+0x68>
 80120da:	6823      	ldr	r3, [r4, #0]
 80120dc:	1c5a      	adds	r2, r3, #1
 80120de:	6022      	str	r2, [r4, #0]
 80120e0:	220a      	movs	r2, #10
 80120e2:	701a      	strb	r2, [r3, #0]
 80120e4:	e7ee      	b.n	80120c4 <_puts_r+0x88>
	...

080120e8 <puts>:
 80120e8:	4b02      	ldr	r3, [pc, #8]	@ (80120f4 <puts+0xc>)
 80120ea:	4601      	mov	r1, r0
 80120ec:	6818      	ldr	r0, [r3, #0]
 80120ee:	f7ff bfa5 	b.w	801203c <_puts_r>
 80120f2:	bf00      	nop
 80120f4:	24000074 	.word	0x24000074

080120f8 <__sread>:
 80120f8:	b510      	push	{r4, lr}
 80120fa:	460c      	mov	r4, r1
 80120fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012100:	f000 f946 	bl	8012390 <_read_r>
 8012104:	2800      	cmp	r0, #0
 8012106:	bfab      	itete	ge
 8012108:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801210a:	89a3      	ldrhlt	r3, [r4, #12]
 801210c:	181b      	addge	r3, r3, r0
 801210e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012112:	bfac      	ite	ge
 8012114:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012116:	81a3      	strhlt	r3, [r4, #12]
 8012118:	bd10      	pop	{r4, pc}

0801211a <__swrite>:
 801211a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801211e:	461f      	mov	r7, r3
 8012120:	898b      	ldrh	r3, [r1, #12]
 8012122:	05db      	lsls	r3, r3, #23
 8012124:	4605      	mov	r5, r0
 8012126:	460c      	mov	r4, r1
 8012128:	4616      	mov	r6, r2
 801212a:	d505      	bpl.n	8012138 <__swrite+0x1e>
 801212c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012130:	2302      	movs	r3, #2
 8012132:	2200      	movs	r2, #0
 8012134:	f000 f91a 	bl	801236c <_lseek_r>
 8012138:	89a3      	ldrh	r3, [r4, #12]
 801213a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801213e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012142:	81a3      	strh	r3, [r4, #12]
 8012144:	4632      	mov	r2, r6
 8012146:	463b      	mov	r3, r7
 8012148:	4628      	mov	r0, r5
 801214a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801214e:	f000 b955 	b.w	80123fc <_write_r>

08012152 <__sseek>:
 8012152:	b510      	push	{r4, lr}
 8012154:	460c      	mov	r4, r1
 8012156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801215a:	f000 f907 	bl	801236c <_lseek_r>
 801215e:	1c43      	adds	r3, r0, #1
 8012160:	89a3      	ldrh	r3, [r4, #12]
 8012162:	bf15      	itete	ne
 8012164:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012166:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801216a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801216e:	81a3      	strheq	r3, [r4, #12]
 8012170:	bf18      	it	ne
 8012172:	81a3      	strhne	r3, [r4, #12]
 8012174:	bd10      	pop	{r4, pc}

08012176 <__sclose>:
 8012176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801217a:	f000 b8e7 	b.w	801234c <_close_r>

0801217e <__swbuf_r>:
 801217e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012180:	460e      	mov	r6, r1
 8012182:	4614      	mov	r4, r2
 8012184:	4605      	mov	r5, r0
 8012186:	b118      	cbz	r0, 8012190 <__swbuf_r+0x12>
 8012188:	6a03      	ldr	r3, [r0, #32]
 801218a:	b90b      	cbnz	r3, 8012190 <__swbuf_r+0x12>
 801218c:	f7ff ff06 	bl	8011f9c <__sinit>
 8012190:	69a3      	ldr	r3, [r4, #24]
 8012192:	60a3      	str	r3, [r4, #8]
 8012194:	89a3      	ldrh	r3, [r4, #12]
 8012196:	071a      	lsls	r2, r3, #28
 8012198:	d501      	bpl.n	801219e <__swbuf_r+0x20>
 801219a:	6923      	ldr	r3, [r4, #16]
 801219c:	b943      	cbnz	r3, 80121b0 <__swbuf_r+0x32>
 801219e:	4621      	mov	r1, r4
 80121a0:	4628      	mov	r0, r5
 80121a2:	f000 f82b 	bl	80121fc <__swsetup_r>
 80121a6:	b118      	cbz	r0, 80121b0 <__swbuf_r+0x32>
 80121a8:	f04f 37ff 	mov.w	r7, #4294967295
 80121ac:	4638      	mov	r0, r7
 80121ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121b0:	6823      	ldr	r3, [r4, #0]
 80121b2:	6922      	ldr	r2, [r4, #16]
 80121b4:	1a98      	subs	r0, r3, r2
 80121b6:	6963      	ldr	r3, [r4, #20]
 80121b8:	b2f6      	uxtb	r6, r6
 80121ba:	4283      	cmp	r3, r0
 80121bc:	4637      	mov	r7, r6
 80121be:	dc05      	bgt.n	80121cc <__swbuf_r+0x4e>
 80121c0:	4621      	mov	r1, r4
 80121c2:	4628      	mov	r0, r5
 80121c4:	f000 fd06 	bl	8012bd4 <_fflush_r>
 80121c8:	2800      	cmp	r0, #0
 80121ca:	d1ed      	bne.n	80121a8 <__swbuf_r+0x2a>
 80121cc:	68a3      	ldr	r3, [r4, #8]
 80121ce:	3b01      	subs	r3, #1
 80121d0:	60a3      	str	r3, [r4, #8]
 80121d2:	6823      	ldr	r3, [r4, #0]
 80121d4:	1c5a      	adds	r2, r3, #1
 80121d6:	6022      	str	r2, [r4, #0]
 80121d8:	701e      	strb	r6, [r3, #0]
 80121da:	6962      	ldr	r2, [r4, #20]
 80121dc:	1c43      	adds	r3, r0, #1
 80121de:	429a      	cmp	r2, r3
 80121e0:	d004      	beq.n	80121ec <__swbuf_r+0x6e>
 80121e2:	89a3      	ldrh	r3, [r4, #12]
 80121e4:	07db      	lsls	r3, r3, #31
 80121e6:	d5e1      	bpl.n	80121ac <__swbuf_r+0x2e>
 80121e8:	2e0a      	cmp	r6, #10
 80121ea:	d1df      	bne.n	80121ac <__swbuf_r+0x2e>
 80121ec:	4621      	mov	r1, r4
 80121ee:	4628      	mov	r0, r5
 80121f0:	f000 fcf0 	bl	8012bd4 <_fflush_r>
 80121f4:	2800      	cmp	r0, #0
 80121f6:	d0d9      	beq.n	80121ac <__swbuf_r+0x2e>
 80121f8:	e7d6      	b.n	80121a8 <__swbuf_r+0x2a>
	...

080121fc <__swsetup_r>:
 80121fc:	b538      	push	{r3, r4, r5, lr}
 80121fe:	4b29      	ldr	r3, [pc, #164]	@ (80122a4 <__swsetup_r+0xa8>)
 8012200:	4605      	mov	r5, r0
 8012202:	6818      	ldr	r0, [r3, #0]
 8012204:	460c      	mov	r4, r1
 8012206:	b118      	cbz	r0, 8012210 <__swsetup_r+0x14>
 8012208:	6a03      	ldr	r3, [r0, #32]
 801220a:	b90b      	cbnz	r3, 8012210 <__swsetup_r+0x14>
 801220c:	f7ff fec6 	bl	8011f9c <__sinit>
 8012210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012214:	0719      	lsls	r1, r3, #28
 8012216:	d422      	bmi.n	801225e <__swsetup_r+0x62>
 8012218:	06da      	lsls	r2, r3, #27
 801221a:	d407      	bmi.n	801222c <__swsetup_r+0x30>
 801221c:	2209      	movs	r2, #9
 801221e:	602a      	str	r2, [r5, #0]
 8012220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012224:	81a3      	strh	r3, [r4, #12]
 8012226:	f04f 30ff 	mov.w	r0, #4294967295
 801222a:	e033      	b.n	8012294 <__swsetup_r+0x98>
 801222c:	0758      	lsls	r0, r3, #29
 801222e:	d512      	bpl.n	8012256 <__swsetup_r+0x5a>
 8012230:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012232:	b141      	cbz	r1, 8012246 <__swsetup_r+0x4a>
 8012234:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012238:	4299      	cmp	r1, r3
 801223a:	d002      	beq.n	8012242 <__swsetup_r+0x46>
 801223c:	4628      	mov	r0, r5
 801223e:	f000 f92b 	bl	8012498 <_free_r>
 8012242:	2300      	movs	r3, #0
 8012244:	6363      	str	r3, [r4, #52]	@ 0x34
 8012246:	89a3      	ldrh	r3, [r4, #12]
 8012248:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801224c:	81a3      	strh	r3, [r4, #12]
 801224e:	2300      	movs	r3, #0
 8012250:	6063      	str	r3, [r4, #4]
 8012252:	6923      	ldr	r3, [r4, #16]
 8012254:	6023      	str	r3, [r4, #0]
 8012256:	89a3      	ldrh	r3, [r4, #12]
 8012258:	f043 0308 	orr.w	r3, r3, #8
 801225c:	81a3      	strh	r3, [r4, #12]
 801225e:	6923      	ldr	r3, [r4, #16]
 8012260:	b94b      	cbnz	r3, 8012276 <__swsetup_r+0x7a>
 8012262:	89a3      	ldrh	r3, [r4, #12]
 8012264:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801226c:	d003      	beq.n	8012276 <__swsetup_r+0x7a>
 801226e:	4621      	mov	r1, r4
 8012270:	4628      	mov	r0, r5
 8012272:	f000 fcfd 	bl	8012c70 <__smakebuf_r>
 8012276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801227a:	f013 0201 	ands.w	r2, r3, #1
 801227e:	d00a      	beq.n	8012296 <__swsetup_r+0x9a>
 8012280:	2200      	movs	r2, #0
 8012282:	60a2      	str	r2, [r4, #8]
 8012284:	6962      	ldr	r2, [r4, #20]
 8012286:	4252      	negs	r2, r2
 8012288:	61a2      	str	r2, [r4, #24]
 801228a:	6922      	ldr	r2, [r4, #16]
 801228c:	b942      	cbnz	r2, 80122a0 <__swsetup_r+0xa4>
 801228e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012292:	d1c5      	bne.n	8012220 <__swsetup_r+0x24>
 8012294:	bd38      	pop	{r3, r4, r5, pc}
 8012296:	0799      	lsls	r1, r3, #30
 8012298:	bf58      	it	pl
 801229a:	6962      	ldrpl	r2, [r4, #20]
 801229c:	60a2      	str	r2, [r4, #8]
 801229e:	e7f4      	b.n	801228a <__swsetup_r+0x8e>
 80122a0:	2000      	movs	r0, #0
 80122a2:	e7f7      	b.n	8012294 <__swsetup_r+0x98>
 80122a4:	24000074 	.word	0x24000074

080122a8 <memmove>:
 80122a8:	4288      	cmp	r0, r1
 80122aa:	b510      	push	{r4, lr}
 80122ac:	eb01 0402 	add.w	r4, r1, r2
 80122b0:	d902      	bls.n	80122b8 <memmove+0x10>
 80122b2:	4284      	cmp	r4, r0
 80122b4:	4623      	mov	r3, r4
 80122b6:	d807      	bhi.n	80122c8 <memmove+0x20>
 80122b8:	1e43      	subs	r3, r0, #1
 80122ba:	42a1      	cmp	r1, r4
 80122bc:	d008      	beq.n	80122d0 <memmove+0x28>
 80122be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80122c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80122c6:	e7f8      	b.n	80122ba <memmove+0x12>
 80122c8:	4402      	add	r2, r0
 80122ca:	4601      	mov	r1, r0
 80122cc:	428a      	cmp	r2, r1
 80122ce:	d100      	bne.n	80122d2 <memmove+0x2a>
 80122d0:	bd10      	pop	{r4, pc}
 80122d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80122d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80122da:	e7f7      	b.n	80122cc <memmove+0x24>

080122dc <memset>:
 80122dc:	4402      	add	r2, r0
 80122de:	4603      	mov	r3, r0
 80122e0:	4293      	cmp	r3, r2
 80122e2:	d100      	bne.n	80122e6 <memset+0xa>
 80122e4:	4770      	bx	lr
 80122e6:	f803 1b01 	strb.w	r1, [r3], #1
 80122ea:	e7f9      	b.n	80122e0 <memset+0x4>

080122ec <_raise_r>:
 80122ec:	291f      	cmp	r1, #31
 80122ee:	b538      	push	{r3, r4, r5, lr}
 80122f0:	4605      	mov	r5, r0
 80122f2:	460c      	mov	r4, r1
 80122f4:	d904      	bls.n	8012300 <_raise_r+0x14>
 80122f6:	2316      	movs	r3, #22
 80122f8:	6003      	str	r3, [r0, #0]
 80122fa:	f04f 30ff 	mov.w	r0, #4294967295
 80122fe:	bd38      	pop	{r3, r4, r5, pc}
 8012300:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012302:	b112      	cbz	r2, 801230a <_raise_r+0x1e>
 8012304:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012308:	b94b      	cbnz	r3, 801231e <_raise_r+0x32>
 801230a:	4628      	mov	r0, r5
 801230c:	f000 f864 	bl	80123d8 <_getpid_r>
 8012310:	4622      	mov	r2, r4
 8012312:	4601      	mov	r1, r0
 8012314:	4628      	mov	r0, r5
 8012316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801231a:	f000 b84b 	b.w	80123b4 <_kill_r>
 801231e:	2b01      	cmp	r3, #1
 8012320:	d00a      	beq.n	8012338 <_raise_r+0x4c>
 8012322:	1c59      	adds	r1, r3, #1
 8012324:	d103      	bne.n	801232e <_raise_r+0x42>
 8012326:	2316      	movs	r3, #22
 8012328:	6003      	str	r3, [r0, #0]
 801232a:	2001      	movs	r0, #1
 801232c:	e7e7      	b.n	80122fe <_raise_r+0x12>
 801232e:	2100      	movs	r1, #0
 8012330:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012334:	4620      	mov	r0, r4
 8012336:	4798      	blx	r3
 8012338:	2000      	movs	r0, #0
 801233a:	e7e0      	b.n	80122fe <_raise_r+0x12>

0801233c <raise>:
 801233c:	4b02      	ldr	r3, [pc, #8]	@ (8012348 <raise+0xc>)
 801233e:	4601      	mov	r1, r0
 8012340:	6818      	ldr	r0, [r3, #0]
 8012342:	f7ff bfd3 	b.w	80122ec <_raise_r>
 8012346:	bf00      	nop
 8012348:	24000074 	.word	0x24000074

0801234c <_close_r>:
 801234c:	b538      	push	{r3, r4, r5, lr}
 801234e:	4d06      	ldr	r5, [pc, #24]	@ (8012368 <_close_r+0x1c>)
 8012350:	2300      	movs	r3, #0
 8012352:	4604      	mov	r4, r0
 8012354:	4608      	mov	r0, r1
 8012356:	602b      	str	r3, [r5, #0]
 8012358:	f7f2 f914 	bl	8004584 <_close>
 801235c:	1c43      	adds	r3, r0, #1
 801235e:	d102      	bne.n	8012366 <_close_r+0x1a>
 8012360:	682b      	ldr	r3, [r5, #0]
 8012362:	b103      	cbz	r3, 8012366 <_close_r+0x1a>
 8012364:	6023      	str	r3, [r4, #0]
 8012366:	bd38      	pop	{r3, r4, r5, pc}
 8012368:	24000da4 	.word	0x24000da4

0801236c <_lseek_r>:
 801236c:	b538      	push	{r3, r4, r5, lr}
 801236e:	4d07      	ldr	r5, [pc, #28]	@ (801238c <_lseek_r+0x20>)
 8012370:	4604      	mov	r4, r0
 8012372:	4608      	mov	r0, r1
 8012374:	4611      	mov	r1, r2
 8012376:	2200      	movs	r2, #0
 8012378:	602a      	str	r2, [r5, #0]
 801237a:	461a      	mov	r2, r3
 801237c:	f7f2 f929 	bl	80045d2 <_lseek>
 8012380:	1c43      	adds	r3, r0, #1
 8012382:	d102      	bne.n	801238a <_lseek_r+0x1e>
 8012384:	682b      	ldr	r3, [r5, #0]
 8012386:	b103      	cbz	r3, 801238a <_lseek_r+0x1e>
 8012388:	6023      	str	r3, [r4, #0]
 801238a:	bd38      	pop	{r3, r4, r5, pc}
 801238c:	24000da4 	.word	0x24000da4

08012390 <_read_r>:
 8012390:	b538      	push	{r3, r4, r5, lr}
 8012392:	4d07      	ldr	r5, [pc, #28]	@ (80123b0 <_read_r+0x20>)
 8012394:	4604      	mov	r4, r0
 8012396:	4608      	mov	r0, r1
 8012398:	4611      	mov	r1, r2
 801239a:	2200      	movs	r2, #0
 801239c:	602a      	str	r2, [r5, #0]
 801239e:	461a      	mov	r2, r3
 80123a0:	f7f2 f8b7 	bl	8004512 <_read>
 80123a4:	1c43      	adds	r3, r0, #1
 80123a6:	d102      	bne.n	80123ae <_read_r+0x1e>
 80123a8:	682b      	ldr	r3, [r5, #0]
 80123aa:	b103      	cbz	r3, 80123ae <_read_r+0x1e>
 80123ac:	6023      	str	r3, [r4, #0]
 80123ae:	bd38      	pop	{r3, r4, r5, pc}
 80123b0:	24000da4 	.word	0x24000da4

080123b4 <_kill_r>:
 80123b4:	b538      	push	{r3, r4, r5, lr}
 80123b6:	4d07      	ldr	r5, [pc, #28]	@ (80123d4 <_kill_r+0x20>)
 80123b8:	2300      	movs	r3, #0
 80123ba:	4604      	mov	r4, r0
 80123bc:	4608      	mov	r0, r1
 80123be:	4611      	mov	r1, r2
 80123c0:	602b      	str	r3, [r5, #0]
 80123c2:	f7f2 f88b 	bl	80044dc <_kill>
 80123c6:	1c43      	adds	r3, r0, #1
 80123c8:	d102      	bne.n	80123d0 <_kill_r+0x1c>
 80123ca:	682b      	ldr	r3, [r5, #0]
 80123cc:	b103      	cbz	r3, 80123d0 <_kill_r+0x1c>
 80123ce:	6023      	str	r3, [r4, #0]
 80123d0:	bd38      	pop	{r3, r4, r5, pc}
 80123d2:	bf00      	nop
 80123d4:	24000da4 	.word	0x24000da4

080123d8 <_getpid_r>:
 80123d8:	f7f2 b878 	b.w	80044cc <_getpid>

080123dc <_sbrk_r>:
 80123dc:	b538      	push	{r3, r4, r5, lr}
 80123de:	4d06      	ldr	r5, [pc, #24]	@ (80123f8 <_sbrk_r+0x1c>)
 80123e0:	2300      	movs	r3, #0
 80123e2:	4604      	mov	r4, r0
 80123e4:	4608      	mov	r0, r1
 80123e6:	602b      	str	r3, [r5, #0]
 80123e8:	f7f2 f900 	bl	80045ec <_sbrk>
 80123ec:	1c43      	adds	r3, r0, #1
 80123ee:	d102      	bne.n	80123f6 <_sbrk_r+0x1a>
 80123f0:	682b      	ldr	r3, [r5, #0]
 80123f2:	b103      	cbz	r3, 80123f6 <_sbrk_r+0x1a>
 80123f4:	6023      	str	r3, [r4, #0]
 80123f6:	bd38      	pop	{r3, r4, r5, pc}
 80123f8:	24000da4 	.word	0x24000da4

080123fc <_write_r>:
 80123fc:	b538      	push	{r3, r4, r5, lr}
 80123fe:	4d07      	ldr	r5, [pc, #28]	@ (801241c <_write_r+0x20>)
 8012400:	4604      	mov	r4, r0
 8012402:	4608      	mov	r0, r1
 8012404:	4611      	mov	r1, r2
 8012406:	2200      	movs	r2, #0
 8012408:	602a      	str	r2, [r5, #0]
 801240a:	461a      	mov	r2, r3
 801240c:	f7f2 f89e 	bl	800454c <_write>
 8012410:	1c43      	adds	r3, r0, #1
 8012412:	d102      	bne.n	801241a <_write_r+0x1e>
 8012414:	682b      	ldr	r3, [r5, #0]
 8012416:	b103      	cbz	r3, 801241a <_write_r+0x1e>
 8012418:	6023      	str	r3, [r4, #0]
 801241a:	bd38      	pop	{r3, r4, r5, pc}
 801241c:	24000da4 	.word	0x24000da4

08012420 <__errno>:
 8012420:	4b01      	ldr	r3, [pc, #4]	@ (8012428 <__errno+0x8>)
 8012422:	6818      	ldr	r0, [r3, #0]
 8012424:	4770      	bx	lr
 8012426:	bf00      	nop
 8012428:	24000074 	.word	0x24000074

0801242c <__libc_init_array>:
 801242c:	b570      	push	{r4, r5, r6, lr}
 801242e:	4d0d      	ldr	r5, [pc, #52]	@ (8012464 <__libc_init_array+0x38>)
 8012430:	4c0d      	ldr	r4, [pc, #52]	@ (8012468 <__libc_init_array+0x3c>)
 8012432:	1b64      	subs	r4, r4, r5
 8012434:	10a4      	asrs	r4, r4, #2
 8012436:	2600      	movs	r6, #0
 8012438:	42a6      	cmp	r6, r4
 801243a:	d109      	bne.n	8012450 <__libc_init_array+0x24>
 801243c:	4d0b      	ldr	r5, [pc, #44]	@ (801246c <__libc_init_array+0x40>)
 801243e:	4c0c      	ldr	r4, [pc, #48]	@ (8012470 <__libc_init_array+0x44>)
 8012440:	f000 fca8 	bl	8012d94 <_init>
 8012444:	1b64      	subs	r4, r4, r5
 8012446:	10a4      	asrs	r4, r4, #2
 8012448:	2600      	movs	r6, #0
 801244a:	42a6      	cmp	r6, r4
 801244c:	d105      	bne.n	801245a <__libc_init_array+0x2e>
 801244e:	bd70      	pop	{r4, r5, r6, pc}
 8012450:	f855 3b04 	ldr.w	r3, [r5], #4
 8012454:	4798      	blx	r3
 8012456:	3601      	adds	r6, #1
 8012458:	e7ee      	b.n	8012438 <__libc_init_array+0xc>
 801245a:	f855 3b04 	ldr.w	r3, [r5], #4
 801245e:	4798      	blx	r3
 8012460:	3601      	adds	r6, #1
 8012462:	e7f2      	b.n	801244a <__libc_init_array+0x1e>
 8012464:	08013554 	.word	0x08013554
 8012468:	08013554 	.word	0x08013554
 801246c:	08013554 	.word	0x08013554
 8012470:	0801355c 	.word	0x0801355c

08012474 <__retarget_lock_init_recursive>:
 8012474:	4770      	bx	lr

08012476 <__retarget_lock_acquire_recursive>:
 8012476:	4770      	bx	lr

08012478 <__retarget_lock_release_recursive>:
 8012478:	4770      	bx	lr

0801247a <memcpy>:
 801247a:	440a      	add	r2, r1
 801247c:	4291      	cmp	r1, r2
 801247e:	f100 33ff 	add.w	r3, r0, #4294967295
 8012482:	d100      	bne.n	8012486 <memcpy+0xc>
 8012484:	4770      	bx	lr
 8012486:	b510      	push	{r4, lr}
 8012488:	f811 4b01 	ldrb.w	r4, [r1], #1
 801248c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012490:	4291      	cmp	r1, r2
 8012492:	d1f9      	bne.n	8012488 <memcpy+0xe>
 8012494:	bd10      	pop	{r4, pc}
	...

08012498 <_free_r>:
 8012498:	b538      	push	{r3, r4, r5, lr}
 801249a:	4605      	mov	r5, r0
 801249c:	2900      	cmp	r1, #0
 801249e:	d041      	beq.n	8012524 <_free_r+0x8c>
 80124a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124a4:	1f0c      	subs	r4, r1, #4
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	bfb8      	it	lt
 80124aa:	18e4      	addlt	r4, r4, r3
 80124ac:	f7ff fcde 	bl	8011e6c <__malloc_lock>
 80124b0:	4a1d      	ldr	r2, [pc, #116]	@ (8012528 <_free_r+0x90>)
 80124b2:	6813      	ldr	r3, [r2, #0]
 80124b4:	b933      	cbnz	r3, 80124c4 <_free_r+0x2c>
 80124b6:	6063      	str	r3, [r4, #4]
 80124b8:	6014      	str	r4, [r2, #0]
 80124ba:	4628      	mov	r0, r5
 80124bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124c0:	f7ff bcda 	b.w	8011e78 <__malloc_unlock>
 80124c4:	42a3      	cmp	r3, r4
 80124c6:	d908      	bls.n	80124da <_free_r+0x42>
 80124c8:	6820      	ldr	r0, [r4, #0]
 80124ca:	1821      	adds	r1, r4, r0
 80124cc:	428b      	cmp	r3, r1
 80124ce:	bf01      	itttt	eq
 80124d0:	6819      	ldreq	r1, [r3, #0]
 80124d2:	685b      	ldreq	r3, [r3, #4]
 80124d4:	1809      	addeq	r1, r1, r0
 80124d6:	6021      	streq	r1, [r4, #0]
 80124d8:	e7ed      	b.n	80124b6 <_free_r+0x1e>
 80124da:	461a      	mov	r2, r3
 80124dc:	685b      	ldr	r3, [r3, #4]
 80124de:	b10b      	cbz	r3, 80124e4 <_free_r+0x4c>
 80124e0:	42a3      	cmp	r3, r4
 80124e2:	d9fa      	bls.n	80124da <_free_r+0x42>
 80124e4:	6811      	ldr	r1, [r2, #0]
 80124e6:	1850      	adds	r0, r2, r1
 80124e8:	42a0      	cmp	r0, r4
 80124ea:	d10b      	bne.n	8012504 <_free_r+0x6c>
 80124ec:	6820      	ldr	r0, [r4, #0]
 80124ee:	4401      	add	r1, r0
 80124f0:	1850      	adds	r0, r2, r1
 80124f2:	4283      	cmp	r3, r0
 80124f4:	6011      	str	r1, [r2, #0]
 80124f6:	d1e0      	bne.n	80124ba <_free_r+0x22>
 80124f8:	6818      	ldr	r0, [r3, #0]
 80124fa:	685b      	ldr	r3, [r3, #4]
 80124fc:	6053      	str	r3, [r2, #4]
 80124fe:	4408      	add	r0, r1
 8012500:	6010      	str	r0, [r2, #0]
 8012502:	e7da      	b.n	80124ba <_free_r+0x22>
 8012504:	d902      	bls.n	801250c <_free_r+0x74>
 8012506:	230c      	movs	r3, #12
 8012508:	602b      	str	r3, [r5, #0]
 801250a:	e7d6      	b.n	80124ba <_free_r+0x22>
 801250c:	6820      	ldr	r0, [r4, #0]
 801250e:	1821      	adds	r1, r4, r0
 8012510:	428b      	cmp	r3, r1
 8012512:	bf04      	itt	eq
 8012514:	6819      	ldreq	r1, [r3, #0]
 8012516:	685b      	ldreq	r3, [r3, #4]
 8012518:	6063      	str	r3, [r4, #4]
 801251a:	bf04      	itt	eq
 801251c:	1809      	addeq	r1, r1, r0
 801251e:	6021      	streq	r1, [r4, #0]
 8012520:	6054      	str	r4, [r2, #4]
 8012522:	e7ca      	b.n	80124ba <_free_r+0x22>
 8012524:	bd38      	pop	{r3, r4, r5, pc}
 8012526:	bf00      	nop
 8012528:	24000c64 	.word	0x24000c64

0801252c <__sfputc_r>:
 801252c:	6893      	ldr	r3, [r2, #8]
 801252e:	3b01      	subs	r3, #1
 8012530:	2b00      	cmp	r3, #0
 8012532:	b410      	push	{r4}
 8012534:	6093      	str	r3, [r2, #8]
 8012536:	da08      	bge.n	801254a <__sfputc_r+0x1e>
 8012538:	6994      	ldr	r4, [r2, #24]
 801253a:	42a3      	cmp	r3, r4
 801253c:	db01      	blt.n	8012542 <__sfputc_r+0x16>
 801253e:	290a      	cmp	r1, #10
 8012540:	d103      	bne.n	801254a <__sfputc_r+0x1e>
 8012542:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012546:	f7ff be1a 	b.w	801217e <__swbuf_r>
 801254a:	6813      	ldr	r3, [r2, #0]
 801254c:	1c58      	adds	r0, r3, #1
 801254e:	6010      	str	r0, [r2, #0]
 8012550:	7019      	strb	r1, [r3, #0]
 8012552:	4608      	mov	r0, r1
 8012554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012558:	4770      	bx	lr

0801255a <__sfputs_r>:
 801255a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801255c:	4606      	mov	r6, r0
 801255e:	460f      	mov	r7, r1
 8012560:	4614      	mov	r4, r2
 8012562:	18d5      	adds	r5, r2, r3
 8012564:	42ac      	cmp	r4, r5
 8012566:	d101      	bne.n	801256c <__sfputs_r+0x12>
 8012568:	2000      	movs	r0, #0
 801256a:	e007      	b.n	801257c <__sfputs_r+0x22>
 801256c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012570:	463a      	mov	r2, r7
 8012572:	4630      	mov	r0, r6
 8012574:	f7ff ffda 	bl	801252c <__sfputc_r>
 8012578:	1c43      	adds	r3, r0, #1
 801257a:	d1f3      	bne.n	8012564 <__sfputs_r+0xa>
 801257c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012580 <_vfiprintf_r>:
 8012580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012584:	460d      	mov	r5, r1
 8012586:	b09d      	sub	sp, #116	@ 0x74
 8012588:	4614      	mov	r4, r2
 801258a:	4698      	mov	r8, r3
 801258c:	4606      	mov	r6, r0
 801258e:	b118      	cbz	r0, 8012598 <_vfiprintf_r+0x18>
 8012590:	6a03      	ldr	r3, [r0, #32]
 8012592:	b90b      	cbnz	r3, 8012598 <_vfiprintf_r+0x18>
 8012594:	f7ff fd02 	bl	8011f9c <__sinit>
 8012598:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801259a:	07d9      	lsls	r1, r3, #31
 801259c:	d405      	bmi.n	80125aa <_vfiprintf_r+0x2a>
 801259e:	89ab      	ldrh	r3, [r5, #12]
 80125a0:	059a      	lsls	r2, r3, #22
 80125a2:	d402      	bmi.n	80125aa <_vfiprintf_r+0x2a>
 80125a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80125a6:	f7ff ff66 	bl	8012476 <__retarget_lock_acquire_recursive>
 80125aa:	89ab      	ldrh	r3, [r5, #12]
 80125ac:	071b      	lsls	r3, r3, #28
 80125ae:	d501      	bpl.n	80125b4 <_vfiprintf_r+0x34>
 80125b0:	692b      	ldr	r3, [r5, #16]
 80125b2:	b99b      	cbnz	r3, 80125dc <_vfiprintf_r+0x5c>
 80125b4:	4629      	mov	r1, r5
 80125b6:	4630      	mov	r0, r6
 80125b8:	f7ff fe20 	bl	80121fc <__swsetup_r>
 80125bc:	b170      	cbz	r0, 80125dc <_vfiprintf_r+0x5c>
 80125be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80125c0:	07dc      	lsls	r4, r3, #31
 80125c2:	d504      	bpl.n	80125ce <_vfiprintf_r+0x4e>
 80125c4:	f04f 30ff 	mov.w	r0, #4294967295
 80125c8:	b01d      	add	sp, #116	@ 0x74
 80125ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125ce:	89ab      	ldrh	r3, [r5, #12]
 80125d0:	0598      	lsls	r0, r3, #22
 80125d2:	d4f7      	bmi.n	80125c4 <_vfiprintf_r+0x44>
 80125d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80125d6:	f7ff ff4f 	bl	8012478 <__retarget_lock_release_recursive>
 80125da:	e7f3      	b.n	80125c4 <_vfiprintf_r+0x44>
 80125dc:	2300      	movs	r3, #0
 80125de:	9309      	str	r3, [sp, #36]	@ 0x24
 80125e0:	2320      	movs	r3, #32
 80125e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80125e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80125ea:	2330      	movs	r3, #48	@ 0x30
 80125ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801279c <_vfiprintf_r+0x21c>
 80125f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80125f4:	f04f 0901 	mov.w	r9, #1
 80125f8:	4623      	mov	r3, r4
 80125fa:	469a      	mov	sl, r3
 80125fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012600:	b10a      	cbz	r2, 8012606 <_vfiprintf_r+0x86>
 8012602:	2a25      	cmp	r2, #37	@ 0x25
 8012604:	d1f9      	bne.n	80125fa <_vfiprintf_r+0x7a>
 8012606:	ebba 0b04 	subs.w	fp, sl, r4
 801260a:	d00b      	beq.n	8012624 <_vfiprintf_r+0xa4>
 801260c:	465b      	mov	r3, fp
 801260e:	4622      	mov	r2, r4
 8012610:	4629      	mov	r1, r5
 8012612:	4630      	mov	r0, r6
 8012614:	f7ff ffa1 	bl	801255a <__sfputs_r>
 8012618:	3001      	adds	r0, #1
 801261a:	f000 80a7 	beq.w	801276c <_vfiprintf_r+0x1ec>
 801261e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012620:	445a      	add	r2, fp
 8012622:	9209      	str	r2, [sp, #36]	@ 0x24
 8012624:	f89a 3000 	ldrb.w	r3, [sl]
 8012628:	2b00      	cmp	r3, #0
 801262a:	f000 809f 	beq.w	801276c <_vfiprintf_r+0x1ec>
 801262e:	2300      	movs	r3, #0
 8012630:	f04f 32ff 	mov.w	r2, #4294967295
 8012634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012638:	f10a 0a01 	add.w	sl, sl, #1
 801263c:	9304      	str	r3, [sp, #16]
 801263e:	9307      	str	r3, [sp, #28]
 8012640:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012644:	931a      	str	r3, [sp, #104]	@ 0x68
 8012646:	4654      	mov	r4, sl
 8012648:	2205      	movs	r2, #5
 801264a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801264e:	4853      	ldr	r0, [pc, #332]	@ (801279c <_vfiprintf_r+0x21c>)
 8012650:	f7ed fe56 	bl	8000300 <memchr>
 8012654:	9a04      	ldr	r2, [sp, #16]
 8012656:	b9d8      	cbnz	r0, 8012690 <_vfiprintf_r+0x110>
 8012658:	06d1      	lsls	r1, r2, #27
 801265a:	bf44      	itt	mi
 801265c:	2320      	movmi	r3, #32
 801265e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012662:	0713      	lsls	r3, r2, #28
 8012664:	bf44      	itt	mi
 8012666:	232b      	movmi	r3, #43	@ 0x2b
 8012668:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801266c:	f89a 3000 	ldrb.w	r3, [sl]
 8012670:	2b2a      	cmp	r3, #42	@ 0x2a
 8012672:	d015      	beq.n	80126a0 <_vfiprintf_r+0x120>
 8012674:	9a07      	ldr	r2, [sp, #28]
 8012676:	4654      	mov	r4, sl
 8012678:	2000      	movs	r0, #0
 801267a:	f04f 0c0a 	mov.w	ip, #10
 801267e:	4621      	mov	r1, r4
 8012680:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012684:	3b30      	subs	r3, #48	@ 0x30
 8012686:	2b09      	cmp	r3, #9
 8012688:	d94b      	bls.n	8012722 <_vfiprintf_r+0x1a2>
 801268a:	b1b0      	cbz	r0, 80126ba <_vfiprintf_r+0x13a>
 801268c:	9207      	str	r2, [sp, #28]
 801268e:	e014      	b.n	80126ba <_vfiprintf_r+0x13a>
 8012690:	eba0 0308 	sub.w	r3, r0, r8
 8012694:	fa09 f303 	lsl.w	r3, r9, r3
 8012698:	4313      	orrs	r3, r2
 801269a:	9304      	str	r3, [sp, #16]
 801269c:	46a2      	mov	sl, r4
 801269e:	e7d2      	b.n	8012646 <_vfiprintf_r+0xc6>
 80126a0:	9b03      	ldr	r3, [sp, #12]
 80126a2:	1d19      	adds	r1, r3, #4
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	9103      	str	r1, [sp, #12]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	bfbb      	ittet	lt
 80126ac:	425b      	neglt	r3, r3
 80126ae:	f042 0202 	orrlt.w	r2, r2, #2
 80126b2:	9307      	strge	r3, [sp, #28]
 80126b4:	9307      	strlt	r3, [sp, #28]
 80126b6:	bfb8      	it	lt
 80126b8:	9204      	strlt	r2, [sp, #16]
 80126ba:	7823      	ldrb	r3, [r4, #0]
 80126bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80126be:	d10a      	bne.n	80126d6 <_vfiprintf_r+0x156>
 80126c0:	7863      	ldrb	r3, [r4, #1]
 80126c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80126c4:	d132      	bne.n	801272c <_vfiprintf_r+0x1ac>
 80126c6:	9b03      	ldr	r3, [sp, #12]
 80126c8:	1d1a      	adds	r2, r3, #4
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	9203      	str	r2, [sp, #12]
 80126ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80126d2:	3402      	adds	r4, #2
 80126d4:	9305      	str	r3, [sp, #20]
 80126d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80127ac <_vfiprintf_r+0x22c>
 80126da:	7821      	ldrb	r1, [r4, #0]
 80126dc:	2203      	movs	r2, #3
 80126de:	4650      	mov	r0, sl
 80126e0:	f7ed fe0e 	bl	8000300 <memchr>
 80126e4:	b138      	cbz	r0, 80126f6 <_vfiprintf_r+0x176>
 80126e6:	9b04      	ldr	r3, [sp, #16]
 80126e8:	eba0 000a 	sub.w	r0, r0, sl
 80126ec:	2240      	movs	r2, #64	@ 0x40
 80126ee:	4082      	lsls	r2, r0
 80126f0:	4313      	orrs	r3, r2
 80126f2:	3401      	adds	r4, #1
 80126f4:	9304      	str	r3, [sp, #16]
 80126f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126fa:	4829      	ldr	r0, [pc, #164]	@ (80127a0 <_vfiprintf_r+0x220>)
 80126fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012700:	2206      	movs	r2, #6
 8012702:	f7ed fdfd 	bl	8000300 <memchr>
 8012706:	2800      	cmp	r0, #0
 8012708:	d03f      	beq.n	801278a <_vfiprintf_r+0x20a>
 801270a:	4b26      	ldr	r3, [pc, #152]	@ (80127a4 <_vfiprintf_r+0x224>)
 801270c:	bb1b      	cbnz	r3, 8012756 <_vfiprintf_r+0x1d6>
 801270e:	9b03      	ldr	r3, [sp, #12]
 8012710:	3307      	adds	r3, #7
 8012712:	f023 0307 	bic.w	r3, r3, #7
 8012716:	3308      	adds	r3, #8
 8012718:	9303      	str	r3, [sp, #12]
 801271a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801271c:	443b      	add	r3, r7
 801271e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012720:	e76a      	b.n	80125f8 <_vfiprintf_r+0x78>
 8012722:	fb0c 3202 	mla	r2, ip, r2, r3
 8012726:	460c      	mov	r4, r1
 8012728:	2001      	movs	r0, #1
 801272a:	e7a8      	b.n	801267e <_vfiprintf_r+0xfe>
 801272c:	2300      	movs	r3, #0
 801272e:	3401      	adds	r4, #1
 8012730:	9305      	str	r3, [sp, #20]
 8012732:	4619      	mov	r1, r3
 8012734:	f04f 0c0a 	mov.w	ip, #10
 8012738:	4620      	mov	r0, r4
 801273a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801273e:	3a30      	subs	r2, #48	@ 0x30
 8012740:	2a09      	cmp	r2, #9
 8012742:	d903      	bls.n	801274c <_vfiprintf_r+0x1cc>
 8012744:	2b00      	cmp	r3, #0
 8012746:	d0c6      	beq.n	80126d6 <_vfiprintf_r+0x156>
 8012748:	9105      	str	r1, [sp, #20]
 801274a:	e7c4      	b.n	80126d6 <_vfiprintf_r+0x156>
 801274c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012750:	4604      	mov	r4, r0
 8012752:	2301      	movs	r3, #1
 8012754:	e7f0      	b.n	8012738 <_vfiprintf_r+0x1b8>
 8012756:	ab03      	add	r3, sp, #12
 8012758:	9300      	str	r3, [sp, #0]
 801275a:	462a      	mov	r2, r5
 801275c:	4b12      	ldr	r3, [pc, #72]	@ (80127a8 <_vfiprintf_r+0x228>)
 801275e:	a904      	add	r1, sp, #16
 8012760:	4630      	mov	r0, r6
 8012762:	f3af 8000 	nop.w
 8012766:	4607      	mov	r7, r0
 8012768:	1c78      	adds	r0, r7, #1
 801276a:	d1d6      	bne.n	801271a <_vfiprintf_r+0x19a>
 801276c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801276e:	07d9      	lsls	r1, r3, #31
 8012770:	d405      	bmi.n	801277e <_vfiprintf_r+0x1fe>
 8012772:	89ab      	ldrh	r3, [r5, #12]
 8012774:	059a      	lsls	r2, r3, #22
 8012776:	d402      	bmi.n	801277e <_vfiprintf_r+0x1fe>
 8012778:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801277a:	f7ff fe7d 	bl	8012478 <__retarget_lock_release_recursive>
 801277e:	89ab      	ldrh	r3, [r5, #12]
 8012780:	065b      	lsls	r3, r3, #25
 8012782:	f53f af1f 	bmi.w	80125c4 <_vfiprintf_r+0x44>
 8012786:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012788:	e71e      	b.n	80125c8 <_vfiprintf_r+0x48>
 801278a:	ab03      	add	r3, sp, #12
 801278c:	9300      	str	r3, [sp, #0]
 801278e:	462a      	mov	r2, r5
 8012790:	4b05      	ldr	r3, [pc, #20]	@ (80127a8 <_vfiprintf_r+0x228>)
 8012792:	a904      	add	r1, sp, #16
 8012794:	4630      	mov	r0, r6
 8012796:	f000 f879 	bl	801288c <_printf_i>
 801279a:	e7e4      	b.n	8012766 <_vfiprintf_r+0x1e6>
 801279c:	08013519 	.word	0x08013519
 80127a0:	08013523 	.word	0x08013523
 80127a4:	00000000 	.word	0x00000000
 80127a8:	0801255b 	.word	0x0801255b
 80127ac:	0801351f 	.word	0x0801351f

080127b0 <_printf_common>:
 80127b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127b4:	4616      	mov	r6, r2
 80127b6:	4698      	mov	r8, r3
 80127b8:	688a      	ldr	r2, [r1, #8]
 80127ba:	690b      	ldr	r3, [r1, #16]
 80127bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80127c0:	4293      	cmp	r3, r2
 80127c2:	bfb8      	it	lt
 80127c4:	4613      	movlt	r3, r2
 80127c6:	6033      	str	r3, [r6, #0]
 80127c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80127cc:	4607      	mov	r7, r0
 80127ce:	460c      	mov	r4, r1
 80127d0:	b10a      	cbz	r2, 80127d6 <_printf_common+0x26>
 80127d2:	3301      	adds	r3, #1
 80127d4:	6033      	str	r3, [r6, #0]
 80127d6:	6823      	ldr	r3, [r4, #0]
 80127d8:	0699      	lsls	r1, r3, #26
 80127da:	bf42      	ittt	mi
 80127dc:	6833      	ldrmi	r3, [r6, #0]
 80127de:	3302      	addmi	r3, #2
 80127e0:	6033      	strmi	r3, [r6, #0]
 80127e2:	6825      	ldr	r5, [r4, #0]
 80127e4:	f015 0506 	ands.w	r5, r5, #6
 80127e8:	d106      	bne.n	80127f8 <_printf_common+0x48>
 80127ea:	f104 0a19 	add.w	sl, r4, #25
 80127ee:	68e3      	ldr	r3, [r4, #12]
 80127f0:	6832      	ldr	r2, [r6, #0]
 80127f2:	1a9b      	subs	r3, r3, r2
 80127f4:	42ab      	cmp	r3, r5
 80127f6:	dc26      	bgt.n	8012846 <_printf_common+0x96>
 80127f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80127fc:	6822      	ldr	r2, [r4, #0]
 80127fe:	3b00      	subs	r3, #0
 8012800:	bf18      	it	ne
 8012802:	2301      	movne	r3, #1
 8012804:	0692      	lsls	r2, r2, #26
 8012806:	d42b      	bmi.n	8012860 <_printf_common+0xb0>
 8012808:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801280c:	4641      	mov	r1, r8
 801280e:	4638      	mov	r0, r7
 8012810:	47c8      	blx	r9
 8012812:	3001      	adds	r0, #1
 8012814:	d01e      	beq.n	8012854 <_printf_common+0xa4>
 8012816:	6823      	ldr	r3, [r4, #0]
 8012818:	6922      	ldr	r2, [r4, #16]
 801281a:	f003 0306 	and.w	r3, r3, #6
 801281e:	2b04      	cmp	r3, #4
 8012820:	bf02      	ittt	eq
 8012822:	68e5      	ldreq	r5, [r4, #12]
 8012824:	6833      	ldreq	r3, [r6, #0]
 8012826:	1aed      	subeq	r5, r5, r3
 8012828:	68a3      	ldr	r3, [r4, #8]
 801282a:	bf0c      	ite	eq
 801282c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012830:	2500      	movne	r5, #0
 8012832:	4293      	cmp	r3, r2
 8012834:	bfc4      	itt	gt
 8012836:	1a9b      	subgt	r3, r3, r2
 8012838:	18ed      	addgt	r5, r5, r3
 801283a:	2600      	movs	r6, #0
 801283c:	341a      	adds	r4, #26
 801283e:	42b5      	cmp	r5, r6
 8012840:	d11a      	bne.n	8012878 <_printf_common+0xc8>
 8012842:	2000      	movs	r0, #0
 8012844:	e008      	b.n	8012858 <_printf_common+0xa8>
 8012846:	2301      	movs	r3, #1
 8012848:	4652      	mov	r2, sl
 801284a:	4641      	mov	r1, r8
 801284c:	4638      	mov	r0, r7
 801284e:	47c8      	blx	r9
 8012850:	3001      	adds	r0, #1
 8012852:	d103      	bne.n	801285c <_printf_common+0xac>
 8012854:	f04f 30ff 	mov.w	r0, #4294967295
 8012858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801285c:	3501      	adds	r5, #1
 801285e:	e7c6      	b.n	80127ee <_printf_common+0x3e>
 8012860:	18e1      	adds	r1, r4, r3
 8012862:	1c5a      	adds	r2, r3, #1
 8012864:	2030      	movs	r0, #48	@ 0x30
 8012866:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801286a:	4422      	add	r2, r4
 801286c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012870:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012874:	3302      	adds	r3, #2
 8012876:	e7c7      	b.n	8012808 <_printf_common+0x58>
 8012878:	2301      	movs	r3, #1
 801287a:	4622      	mov	r2, r4
 801287c:	4641      	mov	r1, r8
 801287e:	4638      	mov	r0, r7
 8012880:	47c8      	blx	r9
 8012882:	3001      	adds	r0, #1
 8012884:	d0e6      	beq.n	8012854 <_printf_common+0xa4>
 8012886:	3601      	adds	r6, #1
 8012888:	e7d9      	b.n	801283e <_printf_common+0x8e>
	...

0801288c <_printf_i>:
 801288c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012890:	7e0f      	ldrb	r7, [r1, #24]
 8012892:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012894:	2f78      	cmp	r7, #120	@ 0x78
 8012896:	4691      	mov	r9, r2
 8012898:	4680      	mov	r8, r0
 801289a:	460c      	mov	r4, r1
 801289c:	469a      	mov	sl, r3
 801289e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80128a2:	d807      	bhi.n	80128b4 <_printf_i+0x28>
 80128a4:	2f62      	cmp	r7, #98	@ 0x62
 80128a6:	d80a      	bhi.n	80128be <_printf_i+0x32>
 80128a8:	2f00      	cmp	r7, #0
 80128aa:	f000 80d2 	beq.w	8012a52 <_printf_i+0x1c6>
 80128ae:	2f58      	cmp	r7, #88	@ 0x58
 80128b0:	f000 80b9 	beq.w	8012a26 <_printf_i+0x19a>
 80128b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80128b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80128bc:	e03a      	b.n	8012934 <_printf_i+0xa8>
 80128be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80128c2:	2b15      	cmp	r3, #21
 80128c4:	d8f6      	bhi.n	80128b4 <_printf_i+0x28>
 80128c6:	a101      	add	r1, pc, #4	@ (adr r1, 80128cc <_printf_i+0x40>)
 80128c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80128cc:	08012925 	.word	0x08012925
 80128d0:	08012939 	.word	0x08012939
 80128d4:	080128b5 	.word	0x080128b5
 80128d8:	080128b5 	.word	0x080128b5
 80128dc:	080128b5 	.word	0x080128b5
 80128e0:	080128b5 	.word	0x080128b5
 80128e4:	08012939 	.word	0x08012939
 80128e8:	080128b5 	.word	0x080128b5
 80128ec:	080128b5 	.word	0x080128b5
 80128f0:	080128b5 	.word	0x080128b5
 80128f4:	080128b5 	.word	0x080128b5
 80128f8:	08012a39 	.word	0x08012a39
 80128fc:	08012963 	.word	0x08012963
 8012900:	080129f3 	.word	0x080129f3
 8012904:	080128b5 	.word	0x080128b5
 8012908:	080128b5 	.word	0x080128b5
 801290c:	08012a5b 	.word	0x08012a5b
 8012910:	080128b5 	.word	0x080128b5
 8012914:	08012963 	.word	0x08012963
 8012918:	080128b5 	.word	0x080128b5
 801291c:	080128b5 	.word	0x080128b5
 8012920:	080129fb 	.word	0x080129fb
 8012924:	6833      	ldr	r3, [r6, #0]
 8012926:	1d1a      	adds	r2, r3, #4
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	6032      	str	r2, [r6, #0]
 801292c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012930:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012934:	2301      	movs	r3, #1
 8012936:	e09d      	b.n	8012a74 <_printf_i+0x1e8>
 8012938:	6833      	ldr	r3, [r6, #0]
 801293a:	6820      	ldr	r0, [r4, #0]
 801293c:	1d19      	adds	r1, r3, #4
 801293e:	6031      	str	r1, [r6, #0]
 8012940:	0606      	lsls	r6, r0, #24
 8012942:	d501      	bpl.n	8012948 <_printf_i+0xbc>
 8012944:	681d      	ldr	r5, [r3, #0]
 8012946:	e003      	b.n	8012950 <_printf_i+0xc4>
 8012948:	0645      	lsls	r5, r0, #25
 801294a:	d5fb      	bpl.n	8012944 <_printf_i+0xb8>
 801294c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012950:	2d00      	cmp	r5, #0
 8012952:	da03      	bge.n	801295c <_printf_i+0xd0>
 8012954:	232d      	movs	r3, #45	@ 0x2d
 8012956:	426d      	negs	r5, r5
 8012958:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801295c:	4859      	ldr	r0, [pc, #356]	@ (8012ac4 <_printf_i+0x238>)
 801295e:	230a      	movs	r3, #10
 8012960:	e011      	b.n	8012986 <_printf_i+0xfa>
 8012962:	6821      	ldr	r1, [r4, #0]
 8012964:	6833      	ldr	r3, [r6, #0]
 8012966:	0608      	lsls	r0, r1, #24
 8012968:	f853 5b04 	ldr.w	r5, [r3], #4
 801296c:	d402      	bmi.n	8012974 <_printf_i+0xe8>
 801296e:	0649      	lsls	r1, r1, #25
 8012970:	bf48      	it	mi
 8012972:	b2ad      	uxthmi	r5, r5
 8012974:	2f6f      	cmp	r7, #111	@ 0x6f
 8012976:	4853      	ldr	r0, [pc, #332]	@ (8012ac4 <_printf_i+0x238>)
 8012978:	6033      	str	r3, [r6, #0]
 801297a:	bf14      	ite	ne
 801297c:	230a      	movne	r3, #10
 801297e:	2308      	moveq	r3, #8
 8012980:	2100      	movs	r1, #0
 8012982:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012986:	6866      	ldr	r6, [r4, #4]
 8012988:	60a6      	str	r6, [r4, #8]
 801298a:	2e00      	cmp	r6, #0
 801298c:	bfa2      	ittt	ge
 801298e:	6821      	ldrge	r1, [r4, #0]
 8012990:	f021 0104 	bicge.w	r1, r1, #4
 8012994:	6021      	strge	r1, [r4, #0]
 8012996:	b90d      	cbnz	r5, 801299c <_printf_i+0x110>
 8012998:	2e00      	cmp	r6, #0
 801299a:	d04b      	beq.n	8012a34 <_printf_i+0x1a8>
 801299c:	4616      	mov	r6, r2
 801299e:	fbb5 f1f3 	udiv	r1, r5, r3
 80129a2:	fb03 5711 	mls	r7, r3, r1, r5
 80129a6:	5dc7      	ldrb	r7, [r0, r7]
 80129a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80129ac:	462f      	mov	r7, r5
 80129ae:	42bb      	cmp	r3, r7
 80129b0:	460d      	mov	r5, r1
 80129b2:	d9f4      	bls.n	801299e <_printf_i+0x112>
 80129b4:	2b08      	cmp	r3, #8
 80129b6:	d10b      	bne.n	80129d0 <_printf_i+0x144>
 80129b8:	6823      	ldr	r3, [r4, #0]
 80129ba:	07df      	lsls	r7, r3, #31
 80129bc:	d508      	bpl.n	80129d0 <_printf_i+0x144>
 80129be:	6923      	ldr	r3, [r4, #16]
 80129c0:	6861      	ldr	r1, [r4, #4]
 80129c2:	4299      	cmp	r1, r3
 80129c4:	bfde      	ittt	le
 80129c6:	2330      	movle	r3, #48	@ 0x30
 80129c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80129cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80129d0:	1b92      	subs	r2, r2, r6
 80129d2:	6122      	str	r2, [r4, #16]
 80129d4:	f8cd a000 	str.w	sl, [sp]
 80129d8:	464b      	mov	r3, r9
 80129da:	aa03      	add	r2, sp, #12
 80129dc:	4621      	mov	r1, r4
 80129de:	4640      	mov	r0, r8
 80129e0:	f7ff fee6 	bl	80127b0 <_printf_common>
 80129e4:	3001      	adds	r0, #1
 80129e6:	d14a      	bne.n	8012a7e <_printf_i+0x1f2>
 80129e8:	f04f 30ff 	mov.w	r0, #4294967295
 80129ec:	b004      	add	sp, #16
 80129ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129f2:	6823      	ldr	r3, [r4, #0]
 80129f4:	f043 0320 	orr.w	r3, r3, #32
 80129f8:	6023      	str	r3, [r4, #0]
 80129fa:	4833      	ldr	r0, [pc, #204]	@ (8012ac8 <_printf_i+0x23c>)
 80129fc:	2778      	movs	r7, #120	@ 0x78
 80129fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012a02:	6823      	ldr	r3, [r4, #0]
 8012a04:	6831      	ldr	r1, [r6, #0]
 8012a06:	061f      	lsls	r7, r3, #24
 8012a08:	f851 5b04 	ldr.w	r5, [r1], #4
 8012a0c:	d402      	bmi.n	8012a14 <_printf_i+0x188>
 8012a0e:	065f      	lsls	r7, r3, #25
 8012a10:	bf48      	it	mi
 8012a12:	b2ad      	uxthmi	r5, r5
 8012a14:	6031      	str	r1, [r6, #0]
 8012a16:	07d9      	lsls	r1, r3, #31
 8012a18:	bf44      	itt	mi
 8012a1a:	f043 0320 	orrmi.w	r3, r3, #32
 8012a1e:	6023      	strmi	r3, [r4, #0]
 8012a20:	b11d      	cbz	r5, 8012a2a <_printf_i+0x19e>
 8012a22:	2310      	movs	r3, #16
 8012a24:	e7ac      	b.n	8012980 <_printf_i+0xf4>
 8012a26:	4827      	ldr	r0, [pc, #156]	@ (8012ac4 <_printf_i+0x238>)
 8012a28:	e7e9      	b.n	80129fe <_printf_i+0x172>
 8012a2a:	6823      	ldr	r3, [r4, #0]
 8012a2c:	f023 0320 	bic.w	r3, r3, #32
 8012a30:	6023      	str	r3, [r4, #0]
 8012a32:	e7f6      	b.n	8012a22 <_printf_i+0x196>
 8012a34:	4616      	mov	r6, r2
 8012a36:	e7bd      	b.n	80129b4 <_printf_i+0x128>
 8012a38:	6833      	ldr	r3, [r6, #0]
 8012a3a:	6825      	ldr	r5, [r4, #0]
 8012a3c:	6961      	ldr	r1, [r4, #20]
 8012a3e:	1d18      	adds	r0, r3, #4
 8012a40:	6030      	str	r0, [r6, #0]
 8012a42:	062e      	lsls	r6, r5, #24
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	d501      	bpl.n	8012a4c <_printf_i+0x1c0>
 8012a48:	6019      	str	r1, [r3, #0]
 8012a4a:	e002      	b.n	8012a52 <_printf_i+0x1c6>
 8012a4c:	0668      	lsls	r0, r5, #25
 8012a4e:	d5fb      	bpl.n	8012a48 <_printf_i+0x1bc>
 8012a50:	8019      	strh	r1, [r3, #0]
 8012a52:	2300      	movs	r3, #0
 8012a54:	6123      	str	r3, [r4, #16]
 8012a56:	4616      	mov	r6, r2
 8012a58:	e7bc      	b.n	80129d4 <_printf_i+0x148>
 8012a5a:	6833      	ldr	r3, [r6, #0]
 8012a5c:	1d1a      	adds	r2, r3, #4
 8012a5e:	6032      	str	r2, [r6, #0]
 8012a60:	681e      	ldr	r6, [r3, #0]
 8012a62:	6862      	ldr	r2, [r4, #4]
 8012a64:	2100      	movs	r1, #0
 8012a66:	4630      	mov	r0, r6
 8012a68:	f7ed fc4a 	bl	8000300 <memchr>
 8012a6c:	b108      	cbz	r0, 8012a72 <_printf_i+0x1e6>
 8012a6e:	1b80      	subs	r0, r0, r6
 8012a70:	6060      	str	r0, [r4, #4]
 8012a72:	6863      	ldr	r3, [r4, #4]
 8012a74:	6123      	str	r3, [r4, #16]
 8012a76:	2300      	movs	r3, #0
 8012a78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012a7c:	e7aa      	b.n	80129d4 <_printf_i+0x148>
 8012a7e:	6923      	ldr	r3, [r4, #16]
 8012a80:	4632      	mov	r2, r6
 8012a82:	4649      	mov	r1, r9
 8012a84:	4640      	mov	r0, r8
 8012a86:	47d0      	blx	sl
 8012a88:	3001      	adds	r0, #1
 8012a8a:	d0ad      	beq.n	80129e8 <_printf_i+0x15c>
 8012a8c:	6823      	ldr	r3, [r4, #0]
 8012a8e:	079b      	lsls	r3, r3, #30
 8012a90:	d413      	bmi.n	8012aba <_printf_i+0x22e>
 8012a92:	68e0      	ldr	r0, [r4, #12]
 8012a94:	9b03      	ldr	r3, [sp, #12]
 8012a96:	4298      	cmp	r0, r3
 8012a98:	bfb8      	it	lt
 8012a9a:	4618      	movlt	r0, r3
 8012a9c:	e7a6      	b.n	80129ec <_printf_i+0x160>
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	4632      	mov	r2, r6
 8012aa2:	4649      	mov	r1, r9
 8012aa4:	4640      	mov	r0, r8
 8012aa6:	47d0      	blx	sl
 8012aa8:	3001      	adds	r0, #1
 8012aaa:	d09d      	beq.n	80129e8 <_printf_i+0x15c>
 8012aac:	3501      	adds	r5, #1
 8012aae:	68e3      	ldr	r3, [r4, #12]
 8012ab0:	9903      	ldr	r1, [sp, #12]
 8012ab2:	1a5b      	subs	r3, r3, r1
 8012ab4:	42ab      	cmp	r3, r5
 8012ab6:	dcf2      	bgt.n	8012a9e <_printf_i+0x212>
 8012ab8:	e7eb      	b.n	8012a92 <_printf_i+0x206>
 8012aba:	2500      	movs	r5, #0
 8012abc:	f104 0619 	add.w	r6, r4, #25
 8012ac0:	e7f5      	b.n	8012aae <_printf_i+0x222>
 8012ac2:	bf00      	nop
 8012ac4:	0801352a 	.word	0x0801352a
 8012ac8:	0801353b 	.word	0x0801353b

08012acc <__sflush_r>:
 8012acc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ad4:	0716      	lsls	r6, r2, #28
 8012ad6:	4605      	mov	r5, r0
 8012ad8:	460c      	mov	r4, r1
 8012ada:	d454      	bmi.n	8012b86 <__sflush_r+0xba>
 8012adc:	684b      	ldr	r3, [r1, #4]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	dc02      	bgt.n	8012ae8 <__sflush_r+0x1c>
 8012ae2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	dd48      	ble.n	8012b7a <__sflush_r+0xae>
 8012ae8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012aea:	2e00      	cmp	r6, #0
 8012aec:	d045      	beq.n	8012b7a <__sflush_r+0xae>
 8012aee:	2300      	movs	r3, #0
 8012af0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012af4:	682f      	ldr	r7, [r5, #0]
 8012af6:	6a21      	ldr	r1, [r4, #32]
 8012af8:	602b      	str	r3, [r5, #0]
 8012afa:	d030      	beq.n	8012b5e <__sflush_r+0x92>
 8012afc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012afe:	89a3      	ldrh	r3, [r4, #12]
 8012b00:	0759      	lsls	r1, r3, #29
 8012b02:	d505      	bpl.n	8012b10 <__sflush_r+0x44>
 8012b04:	6863      	ldr	r3, [r4, #4]
 8012b06:	1ad2      	subs	r2, r2, r3
 8012b08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012b0a:	b10b      	cbz	r3, 8012b10 <__sflush_r+0x44>
 8012b0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012b0e:	1ad2      	subs	r2, r2, r3
 8012b10:	2300      	movs	r3, #0
 8012b12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012b14:	6a21      	ldr	r1, [r4, #32]
 8012b16:	4628      	mov	r0, r5
 8012b18:	47b0      	blx	r6
 8012b1a:	1c43      	adds	r3, r0, #1
 8012b1c:	89a3      	ldrh	r3, [r4, #12]
 8012b1e:	d106      	bne.n	8012b2e <__sflush_r+0x62>
 8012b20:	6829      	ldr	r1, [r5, #0]
 8012b22:	291d      	cmp	r1, #29
 8012b24:	d82b      	bhi.n	8012b7e <__sflush_r+0xb2>
 8012b26:	4a2a      	ldr	r2, [pc, #168]	@ (8012bd0 <__sflush_r+0x104>)
 8012b28:	410a      	asrs	r2, r1
 8012b2a:	07d6      	lsls	r6, r2, #31
 8012b2c:	d427      	bmi.n	8012b7e <__sflush_r+0xb2>
 8012b2e:	2200      	movs	r2, #0
 8012b30:	6062      	str	r2, [r4, #4]
 8012b32:	04d9      	lsls	r1, r3, #19
 8012b34:	6922      	ldr	r2, [r4, #16]
 8012b36:	6022      	str	r2, [r4, #0]
 8012b38:	d504      	bpl.n	8012b44 <__sflush_r+0x78>
 8012b3a:	1c42      	adds	r2, r0, #1
 8012b3c:	d101      	bne.n	8012b42 <__sflush_r+0x76>
 8012b3e:	682b      	ldr	r3, [r5, #0]
 8012b40:	b903      	cbnz	r3, 8012b44 <__sflush_r+0x78>
 8012b42:	6560      	str	r0, [r4, #84]	@ 0x54
 8012b44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012b46:	602f      	str	r7, [r5, #0]
 8012b48:	b1b9      	cbz	r1, 8012b7a <__sflush_r+0xae>
 8012b4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012b4e:	4299      	cmp	r1, r3
 8012b50:	d002      	beq.n	8012b58 <__sflush_r+0x8c>
 8012b52:	4628      	mov	r0, r5
 8012b54:	f7ff fca0 	bl	8012498 <_free_r>
 8012b58:	2300      	movs	r3, #0
 8012b5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8012b5c:	e00d      	b.n	8012b7a <__sflush_r+0xae>
 8012b5e:	2301      	movs	r3, #1
 8012b60:	4628      	mov	r0, r5
 8012b62:	47b0      	blx	r6
 8012b64:	4602      	mov	r2, r0
 8012b66:	1c50      	adds	r0, r2, #1
 8012b68:	d1c9      	bne.n	8012afe <__sflush_r+0x32>
 8012b6a:	682b      	ldr	r3, [r5, #0]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d0c6      	beq.n	8012afe <__sflush_r+0x32>
 8012b70:	2b1d      	cmp	r3, #29
 8012b72:	d001      	beq.n	8012b78 <__sflush_r+0xac>
 8012b74:	2b16      	cmp	r3, #22
 8012b76:	d11e      	bne.n	8012bb6 <__sflush_r+0xea>
 8012b78:	602f      	str	r7, [r5, #0]
 8012b7a:	2000      	movs	r0, #0
 8012b7c:	e022      	b.n	8012bc4 <__sflush_r+0xf8>
 8012b7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012b82:	b21b      	sxth	r3, r3
 8012b84:	e01b      	b.n	8012bbe <__sflush_r+0xf2>
 8012b86:	690f      	ldr	r7, [r1, #16]
 8012b88:	2f00      	cmp	r7, #0
 8012b8a:	d0f6      	beq.n	8012b7a <__sflush_r+0xae>
 8012b8c:	0793      	lsls	r3, r2, #30
 8012b8e:	680e      	ldr	r6, [r1, #0]
 8012b90:	bf08      	it	eq
 8012b92:	694b      	ldreq	r3, [r1, #20]
 8012b94:	600f      	str	r7, [r1, #0]
 8012b96:	bf18      	it	ne
 8012b98:	2300      	movne	r3, #0
 8012b9a:	eba6 0807 	sub.w	r8, r6, r7
 8012b9e:	608b      	str	r3, [r1, #8]
 8012ba0:	f1b8 0f00 	cmp.w	r8, #0
 8012ba4:	dde9      	ble.n	8012b7a <__sflush_r+0xae>
 8012ba6:	6a21      	ldr	r1, [r4, #32]
 8012ba8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012baa:	4643      	mov	r3, r8
 8012bac:	463a      	mov	r2, r7
 8012bae:	4628      	mov	r0, r5
 8012bb0:	47b0      	blx	r6
 8012bb2:	2800      	cmp	r0, #0
 8012bb4:	dc08      	bgt.n	8012bc8 <__sflush_r+0xfc>
 8012bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012bbe:	81a3      	strh	r3, [r4, #12]
 8012bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8012bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bc8:	4407      	add	r7, r0
 8012bca:	eba8 0800 	sub.w	r8, r8, r0
 8012bce:	e7e7      	b.n	8012ba0 <__sflush_r+0xd4>
 8012bd0:	dfbffffe 	.word	0xdfbffffe

08012bd4 <_fflush_r>:
 8012bd4:	b538      	push	{r3, r4, r5, lr}
 8012bd6:	690b      	ldr	r3, [r1, #16]
 8012bd8:	4605      	mov	r5, r0
 8012bda:	460c      	mov	r4, r1
 8012bdc:	b913      	cbnz	r3, 8012be4 <_fflush_r+0x10>
 8012bde:	2500      	movs	r5, #0
 8012be0:	4628      	mov	r0, r5
 8012be2:	bd38      	pop	{r3, r4, r5, pc}
 8012be4:	b118      	cbz	r0, 8012bee <_fflush_r+0x1a>
 8012be6:	6a03      	ldr	r3, [r0, #32]
 8012be8:	b90b      	cbnz	r3, 8012bee <_fflush_r+0x1a>
 8012bea:	f7ff f9d7 	bl	8011f9c <__sinit>
 8012bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d0f3      	beq.n	8012bde <_fflush_r+0xa>
 8012bf6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012bf8:	07d0      	lsls	r0, r2, #31
 8012bfa:	d404      	bmi.n	8012c06 <_fflush_r+0x32>
 8012bfc:	0599      	lsls	r1, r3, #22
 8012bfe:	d402      	bmi.n	8012c06 <_fflush_r+0x32>
 8012c00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012c02:	f7ff fc38 	bl	8012476 <__retarget_lock_acquire_recursive>
 8012c06:	4628      	mov	r0, r5
 8012c08:	4621      	mov	r1, r4
 8012c0a:	f7ff ff5f 	bl	8012acc <__sflush_r>
 8012c0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012c10:	07da      	lsls	r2, r3, #31
 8012c12:	4605      	mov	r5, r0
 8012c14:	d4e4      	bmi.n	8012be0 <_fflush_r+0xc>
 8012c16:	89a3      	ldrh	r3, [r4, #12]
 8012c18:	059b      	lsls	r3, r3, #22
 8012c1a:	d4e1      	bmi.n	8012be0 <_fflush_r+0xc>
 8012c1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012c1e:	f7ff fc2b 	bl	8012478 <__retarget_lock_release_recursive>
 8012c22:	e7dd      	b.n	8012be0 <_fflush_r+0xc>

08012c24 <__swhatbuf_r>:
 8012c24:	b570      	push	{r4, r5, r6, lr}
 8012c26:	460c      	mov	r4, r1
 8012c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c2c:	2900      	cmp	r1, #0
 8012c2e:	b096      	sub	sp, #88	@ 0x58
 8012c30:	4615      	mov	r5, r2
 8012c32:	461e      	mov	r6, r3
 8012c34:	da0d      	bge.n	8012c52 <__swhatbuf_r+0x2e>
 8012c36:	89a3      	ldrh	r3, [r4, #12]
 8012c38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012c3c:	f04f 0100 	mov.w	r1, #0
 8012c40:	bf14      	ite	ne
 8012c42:	2340      	movne	r3, #64	@ 0x40
 8012c44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012c48:	2000      	movs	r0, #0
 8012c4a:	6031      	str	r1, [r6, #0]
 8012c4c:	602b      	str	r3, [r5, #0]
 8012c4e:	b016      	add	sp, #88	@ 0x58
 8012c50:	bd70      	pop	{r4, r5, r6, pc}
 8012c52:	466a      	mov	r2, sp
 8012c54:	f000 f87c 	bl	8012d50 <_fstat_r>
 8012c58:	2800      	cmp	r0, #0
 8012c5a:	dbec      	blt.n	8012c36 <__swhatbuf_r+0x12>
 8012c5c:	9901      	ldr	r1, [sp, #4]
 8012c5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012c62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012c66:	4259      	negs	r1, r3
 8012c68:	4159      	adcs	r1, r3
 8012c6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012c6e:	e7eb      	b.n	8012c48 <__swhatbuf_r+0x24>

08012c70 <__smakebuf_r>:
 8012c70:	898b      	ldrh	r3, [r1, #12]
 8012c72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c74:	079d      	lsls	r5, r3, #30
 8012c76:	4606      	mov	r6, r0
 8012c78:	460c      	mov	r4, r1
 8012c7a:	d507      	bpl.n	8012c8c <__smakebuf_r+0x1c>
 8012c7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012c80:	6023      	str	r3, [r4, #0]
 8012c82:	6123      	str	r3, [r4, #16]
 8012c84:	2301      	movs	r3, #1
 8012c86:	6163      	str	r3, [r4, #20]
 8012c88:	b003      	add	sp, #12
 8012c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c8c:	ab01      	add	r3, sp, #4
 8012c8e:	466a      	mov	r2, sp
 8012c90:	f7ff ffc8 	bl	8012c24 <__swhatbuf_r>
 8012c94:	9f00      	ldr	r7, [sp, #0]
 8012c96:	4605      	mov	r5, r0
 8012c98:	4639      	mov	r1, r7
 8012c9a:	4630      	mov	r0, r6
 8012c9c:	f7ff f866 	bl	8011d6c <_malloc_r>
 8012ca0:	b948      	cbnz	r0, 8012cb6 <__smakebuf_r+0x46>
 8012ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ca6:	059a      	lsls	r2, r3, #22
 8012ca8:	d4ee      	bmi.n	8012c88 <__smakebuf_r+0x18>
 8012caa:	f023 0303 	bic.w	r3, r3, #3
 8012cae:	f043 0302 	orr.w	r3, r3, #2
 8012cb2:	81a3      	strh	r3, [r4, #12]
 8012cb4:	e7e2      	b.n	8012c7c <__smakebuf_r+0xc>
 8012cb6:	89a3      	ldrh	r3, [r4, #12]
 8012cb8:	6020      	str	r0, [r4, #0]
 8012cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012cbe:	81a3      	strh	r3, [r4, #12]
 8012cc0:	9b01      	ldr	r3, [sp, #4]
 8012cc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012cc6:	b15b      	cbz	r3, 8012ce0 <__smakebuf_r+0x70>
 8012cc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ccc:	4630      	mov	r0, r6
 8012cce:	f000 f851 	bl	8012d74 <_isatty_r>
 8012cd2:	b128      	cbz	r0, 8012ce0 <__smakebuf_r+0x70>
 8012cd4:	89a3      	ldrh	r3, [r4, #12]
 8012cd6:	f023 0303 	bic.w	r3, r3, #3
 8012cda:	f043 0301 	orr.w	r3, r3, #1
 8012cde:	81a3      	strh	r3, [r4, #12]
 8012ce0:	89a3      	ldrh	r3, [r4, #12]
 8012ce2:	431d      	orrs	r5, r3
 8012ce4:	81a5      	strh	r5, [r4, #12]
 8012ce6:	e7cf      	b.n	8012c88 <__smakebuf_r+0x18>

08012ce8 <_putc_r>:
 8012ce8:	b570      	push	{r4, r5, r6, lr}
 8012cea:	460d      	mov	r5, r1
 8012cec:	4614      	mov	r4, r2
 8012cee:	4606      	mov	r6, r0
 8012cf0:	b118      	cbz	r0, 8012cfa <_putc_r+0x12>
 8012cf2:	6a03      	ldr	r3, [r0, #32]
 8012cf4:	b90b      	cbnz	r3, 8012cfa <_putc_r+0x12>
 8012cf6:	f7ff f951 	bl	8011f9c <__sinit>
 8012cfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012cfc:	07d8      	lsls	r0, r3, #31
 8012cfe:	d405      	bmi.n	8012d0c <_putc_r+0x24>
 8012d00:	89a3      	ldrh	r3, [r4, #12]
 8012d02:	0599      	lsls	r1, r3, #22
 8012d04:	d402      	bmi.n	8012d0c <_putc_r+0x24>
 8012d06:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012d08:	f7ff fbb5 	bl	8012476 <__retarget_lock_acquire_recursive>
 8012d0c:	68a3      	ldr	r3, [r4, #8]
 8012d0e:	3b01      	subs	r3, #1
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	60a3      	str	r3, [r4, #8]
 8012d14:	da05      	bge.n	8012d22 <_putc_r+0x3a>
 8012d16:	69a2      	ldr	r2, [r4, #24]
 8012d18:	4293      	cmp	r3, r2
 8012d1a:	db12      	blt.n	8012d42 <_putc_r+0x5a>
 8012d1c:	b2eb      	uxtb	r3, r5
 8012d1e:	2b0a      	cmp	r3, #10
 8012d20:	d00f      	beq.n	8012d42 <_putc_r+0x5a>
 8012d22:	6823      	ldr	r3, [r4, #0]
 8012d24:	1c5a      	adds	r2, r3, #1
 8012d26:	6022      	str	r2, [r4, #0]
 8012d28:	701d      	strb	r5, [r3, #0]
 8012d2a:	b2ed      	uxtb	r5, r5
 8012d2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012d2e:	07da      	lsls	r2, r3, #31
 8012d30:	d405      	bmi.n	8012d3e <_putc_r+0x56>
 8012d32:	89a3      	ldrh	r3, [r4, #12]
 8012d34:	059b      	lsls	r3, r3, #22
 8012d36:	d402      	bmi.n	8012d3e <_putc_r+0x56>
 8012d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012d3a:	f7ff fb9d 	bl	8012478 <__retarget_lock_release_recursive>
 8012d3e:	4628      	mov	r0, r5
 8012d40:	bd70      	pop	{r4, r5, r6, pc}
 8012d42:	4629      	mov	r1, r5
 8012d44:	4622      	mov	r2, r4
 8012d46:	4630      	mov	r0, r6
 8012d48:	f7ff fa19 	bl	801217e <__swbuf_r>
 8012d4c:	4605      	mov	r5, r0
 8012d4e:	e7ed      	b.n	8012d2c <_putc_r+0x44>

08012d50 <_fstat_r>:
 8012d50:	b538      	push	{r3, r4, r5, lr}
 8012d52:	4d07      	ldr	r5, [pc, #28]	@ (8012d70 <_fstat_r+0x20>)
 8012d54:	2300      	movs	r3, #0
 8012d56:	4604      	mov	r4, r0
 8012d58:	4608      	mov	r0, r1
 8012d5a:	4611      	mov	r1, r2
 8012d5c:	602b      	str	r3, [r5, #0]
 8012d5e:	f7f1 fc1d 	bl	800459c <_fstat>
 8012d62:	1c43      	adds	r3, r0, #1
 8012d64:	d102      	bne.n	8012d6c <_fstat_r+0x1c>
 8012d66:	682b      	ldr	r3, [r5, #0]
 8012d68:	b103      	cbz	r3, 8012d6c <_fstat_r+0x1c>
 8012d6a:	6023      	str	r3, [r4, #0]
 8012d6c:	bd38      	pop	{r3, r4, r5, pc}
 8012d6e:	bf00      	nop
 8012d70:	24000da4 	.word	0x24000da4

08012d74 <_isatty_r>:
 8012d74:	b538      	push	{r3, r4, r5, lr}
 8012d76:	4d06      	ldr	r5, [pc, #24]	@ (8012d90 <_isatty_r+0x1c>)
 8012d78:	2300      	movs	r3, #0
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	4608      	mov	r0, r1
 8012d7e:	602b      	str	r3, [r5, #0]
 8012d80:	f7f1 fc1c 	bl	80045bc <_isatty>
 8012d84:	1c43      	adds	r3, r0, #1
 8012d86:	d102      	bne.n	8012d8e <_isatty_r+0x1a>
 8012d88:	682b      	ldr	r3, [r5, #0]
 8012d8a:	b103      	cbz	r3, 8012d8e <_isatty_r+0x1a>
 8012d8c:	6023      	str	r3, [r4, #0]
 8012d8e:	bd38      	pop	{r3, r4, r5, pc}
 8012d90:	24000da4 	.word	0x24000da4

08012d94 <_init>:
 8012d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d96:	bf00      	nop
 8012d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d9a:	bc08      	pop	{r3}
 8012d9c:	469e      	mov	lr, r3
 8012d9e:	4770      	bx	lr

08012da0 <_fini>:
 8012da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012da2:	bf00      	nop
 8012da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012da6:	bc08      	pop	{r3}
 8012da8:	469e      	mov	lr, r3
 8012daa:	4770      	bx	lr
