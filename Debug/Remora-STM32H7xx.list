
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001dcd0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d3c  0801df70  0801df70  0001ef70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ecac  0801ecac  0001fcac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  0801ecb4  0801ecb4  0001fcb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ecc0  0801ecc0  0001fcc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  24000000  0801ecc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000bcc  24000088  0801ed4c  00020088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000c54  0801ed4c  00020c54  2**0
                  ALLOC
  9 .dma_buffers  00000100  30000000  00000000  00001000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 11 .debug_info   000c3d48  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000d9ab  00000000  00000000  000e3dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000048a8  00000000  00000000  000f17b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00003773  00000000  00000000  000f6058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004976b  00000000  00000000  000f97cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00053e74  00000000  00000000  00142f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001af1a8  00000000  00000000  00196daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00345f52  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00016968  00000000  00000000  00345f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000069  00000000  00000000  0035c900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801df58 	.word	0x0801df58

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0801df58 	.word	0x0801df58

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_frsub>:
 8000728:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800072c:	e002      	b.n	8000734 <__addsf3>
 800072e:	bf00      	nop

08000730 <__aeabi_fsub>:
 8000730:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000734 <__addsf3>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	bf1f      	itttt	ne
 8000738:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800073c:	ea92 0f03 	teqne	r2, r3
 8000740:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000744:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000748:	d06a      	beq.n	8000820 <__addsf3+0xec>
 800074a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800074e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000752:	bfc1      	itttt	gt
 8000754:	18d2      	addgt	r2, r2, r3
 8000756:	4041      	eorgt	r1, r0
 8000758:	4048      	eorgt	r0, r1
 800075a:	4041      	eorgt	r1, r0
 800075c:	bfb8      	it	lt
 800075e:	425b      	neglt	r3, r3
 8000760:	2b19      	cmp	r3, #25
 8000762:	bf88      	it	hi
 8000764:	4770      	bxhi	lr
 8000766:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800076a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800076e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000772:	bf18      	it	ne
 8000774:	4240      	negne	r0, r0
 8000776:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800077a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800077e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000782:	bf18      	it	ne
 8000784:	4249      	negne	r1, r1
 8000786:	ea92 0f03 	teq	r2, r3
 800078a:	d03f      	beq.n	800080c <__addsf3+0xd8>
 800078c:	f1a2 0201 	sub.w	r2, r2, #1
 8000790:	fa41 fc03 	asr.w	ip, r1, r3
 8000794:	eb10 000c 	adds.w	r0, r0, ip
 8000798:	f1c3 0320 	rsb	r3, r3, #32
 800079c:	fa01 f103 	lsl.w	r1, r1, r3
 80007a0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a4:	d502      	bpl.n	80007ac <__addsf3+0x78>
 80007a6:	4249      	negs	r1, r1
 80007a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007ac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007b0:	d313      	bcc.n	80007da <__addsf3+0xa6>
 80007b2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007b6:	d306      	bcc.n	80007c6 <__addsf3+0x92>
 80007b8:	0840      	lsrs	r0, r0, #1
 80007ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80007be:	f102 0201 	add.w	r2, r2, #1
 80007c2:	2afe      	cmp	r2, #254	@ 0xfe
 80007c4:	d251      	bcs.n	800086a <__addsf3+0x136>
 80007c6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ce:	bf08      	it	eq
 80007d0:	f020 0001 	biceq.w	r0, r0, #1
 80007d4:	ea40 0003 	orr.w	r0, r0, r3
 80007d8:	4770      	bx	lr
 80007da:	0049      	lsls	r1, r1, #1
 80007dc:	eb40 0000 	adc.w	r0, r0, r0
 80007e0:	3a01      	subs	r2, #1
 80007e2:	bf28      	it	cs
 80007e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007e8:	d2ed      	bcs.n	80007c6 <__addsf3+0x92>
 80007ea:	fab0 fc80 	clz	ip, r0
 80007ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80007f2:	ebb2 020c 	subs.w	r2, r2, ip
 80007f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007fa:	bfaa      	itet	ge
 80007fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000800:	4252      	neglt	r2, r2
 8000802:	4318      	orrge	r0, r3
 8000804:	bfbc      	itt	lt
 8000806:	40d0      	lsrlt	r0, r2
 8000808:	4318      	orrlt	r0, r3
 800080a:	4770      	bx	lr
 800080c:	f092 0f00 	teq	r2, #0
 8000810:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000814:	bf06      	itte	eq
 8000816:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800081a:	3201      	addeq	r2, #1
 800081c:	3b01      	subne	r3, #1
 800081e:	e7b5      	b.n	800078c <__addsf3+0x58>
 8000820:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000824:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000828:	bf18      	it	ne
 800082a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800082e:	d021      	beq.n	8000874 <__addsf3+0x140>
 8000830:	ea92 0f03 	teq	r2, r3
 8000834:	d004      	beq.n	8000840 <__addsf3+0x10c>
 8000836:	f092 0f00 	teq	r2, #0
 800083a:	bf08      	it	eq
 800083c:	4608      	moveq	r0, r1
 800083e:	4770      	bx	lr
 8000840:	ea90 0f01 	teq	r0, r1
 8000844:	bf1c      	itt	ne
 8000846:	2000      	movne	r0, #0
 8000848:	4770      	bxne	lr
 800084a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800084e:	d104      	bne.n	800085a <__addsf3+0x126>
 8000850:	0040      	lsls	r0, r0, #1
 8000852:	bf28      	it	cs
 8000854:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000858:	4770      	bx	lr
 800085a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800085e:	bf3c      	itt	cc
 8000860:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000864:	4770      	bxcc	lr
 8000866:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800086a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800086e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000872:	4770      	bx	lr
 8000874:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000878:	bf16      	itet	ne
 800087a:	4608      	movne	r0, r1
 800087c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000880:	4601      	movne	r1, r0
 8000882:	0242      	lsls	r2, r0, #9
 8000884:	bf06      	itte	eq
 8000886:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800088a:	ea90 0f01 	teqeq	r0, r1
 800088e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000892:	4770      	bx	lr

08000894 <__aeabi_ui2f>:
 8000894:	f04f 0300 	mov.w	r3, #0
 8000898:	e004      	b.n	80008a4 <__aeabi_i2f+0x8>
 800089a:	bf00      	nop

0800089c <__aeabi_i2f>:
 800089c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008a0:	bf48      	it	mi
 80008a2:	4240      	negmi	r0, r0
 80008a4:	ea5f 0c00 	movs.w	ip, r0
 80008a8:	bf08      	it	eq
 80008aa:	4770      	bxeq	lr
 80008ac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008b0:	4601      	mov	r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	e01c      	b.n	80008f2 <__aeabi_l2f+0x2a>

080008b8 <__aeabi_ul2f>:
 80008b8:	ea50 0201 	orrs.w	r2, r0, r1
 80008bc:	bf08      	it	eq
 80008be:	4770      	bxeq	lr
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	e00a      	b.n	80008dc <__aeabi_l2f+0x14>
 80008c6:	bf00      	nop

080008c8 <__aeabi_l2f>:
 80008c8:	ea50 0201 	orrs.w	r2, r0, r1
 80008cc:	bf08      	it	eq
 80008ce:	4770      	bxeq	lr
 80008d0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008d4:	d502      	bpl.n	80008dc <__aeabi_l2f+0x14>
 80008d6:	4240      	negs	r0, r0
 80008d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008dc:	ea5f 0c01 	movs.w	ip, r1
 80008e0:	bf02      	ittt	eq
 80008e2:	4684      	moveq	ip, r0
 80008e4:	4601      	moveq	r1, r0
 80008e6:	2000      	moveq	r0, #0
 80008e8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008ec:	bf08      	it	eq
 80008ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008f2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008f6:	fabc f28c 	clz	r2, ip
 80008fa:	3a08      	subs	r2, #8
 80008fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000900:	db10      	blt.n	8000924 <__aeabi_l2f+0x5c>
 8000902:	fa01 fc02 	lsl.w	ip, r1, r2
 8000906:	4463      	add	r3, ip
 8000908:	fa00 fc02 	lsl.w	ip, r0, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000914:	fa20 f202 	lsr.w	r2, r0, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f102 0220 	add.w	r2, r2, #32
 8000928:	fa01 fc02 	lsl.w	ip, r1, r2
 800092c:	f1c2 0220 	rsb	r2, r2, #32
 8000930:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000934:	fa21 f202 	lsr.w	r2, r1, r2
 8000938:	eb43 0002 	adc.w	r0, r3, r2
 800093c:	bf08      	it	eq
 800093e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000942:	4770      	bx	lr

08000944 <__aeabi_uldivmod>:
 8000944:	b953      	cbnz	r3, 800095c <__aeabi_uldivmod+0x18>
 8000946:	b94a      	cbnz	r2, 800095c <__aeabi_uldivmod+0x18>
 8000948:	2900      	cmp	r1, #0
 800094a:	bf08      	it	eq
 800094c:	2800      	cmpeq	r0, #0
 800094e:	bf1c      	itt	ne
 8000950:	f04f 31ff 	movne.w	r1, #4294967295
 8000954:	f04f 30ff 	movne.w	r0, #4294967295
 8000958:	f000 b96a 	b.w	8000c30 <__aeabi_idiv0>
 800095c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000960:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000964:	f000 f806 	bl	8000974 <__udivmoddi4>
 8000968:	f8dd e004 	ldr.w	lr, [sp, #4]
 800096c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr

08000974 <__udivmoddi4>:
 8000974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000978:	9d08      	ldr	r5, [sp, #32]
 800097a:	460c      	mov	r4, r1
 800097c:	2b00      	cmp	r3, #0
 800097e:	d14e      	bne.n	8000a1e <__udivmoddi4+0xaa>
 8000980:	4694      	mov	ip, r2
 8000982:	458c      	cmp	ip, r1
 8000984:	4686      	mov	lr, r0
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	d962      	bls.n	8000a52 <__udivmoddi4+0xde>
 800098c:	b14a      	cbz	r2, 80009a2 <__udivmoddi4+0x2e>
 800098e:	f1c2 0320 	rsb	r3, r2, #32
 8000992:	4091      	lsls	r1, r2
 8000994:	fa20 f303 	lsr.w	r3, r0, r3
 8000998:	fa0c fc02 	lsl.w	ip, ip, r2
 800099c:	4319      	orrs	r1, r3
 800099e:	fa00 fe02 	lsl.w	lr, r0, r2
 80009a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a6:	fa1f f68c 	uxth.w	r6, ip
 80009aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80009ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b2:	fb07 1114 	mls	r1, r7, r4, r1
 80009b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ba:	fb04 f106 	mul.w	r1, r4, r6
 80009be:	4299      	cmp	r1, r3
 80009c0:	d90a      	bls.n	80009d8 <__udivmoddi4+0x64>
 80009c2:	eb1c 0303 	adds.w	r3, ip, r3
 80009c6:	f104 30ff 	add.w	r0, r4, #4294967295
 80009ca:	f080 8112 	bcs.w	8000bf2 <__udivmoddi4+0x27e>
 80009ce:	4299      	cmp	r1, r3
 80009d0:	f240 810f 	bls.w	8000bf2 <__udivmoddi4+0x27e>
 80009d4:	3c02      	subs	r4, #2
 80009d6:	4463      	add	r3, ip
 80009d8:	1a59      	subs	r1, r3, r1
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e2:	fb07 1110 	mls	r1, r7, r0, r1
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f606 	mul.w	r6, r0, r6
 80009ee:	429e      	cmp	r6, r3
 80009f0:	d90a      	bls.n	8000a08 <__udivmoddi4+0x94>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80009fa:	f080 80fc 	bcs.w	8000bf6 <__udivmoddi4+0x282>
 80009fe:	429e      	cmp	r6, r3
 8000a00:	f240 80f9 	bls.w	8000bf6 <__udivmoddi4+0x282>
 8000a04:	4463      	add	r3, ip
 8000a06:	3802      	subs	r0, #2
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a0e:	2100      	movs	r1, #0
 8000a10:	b11d      	cbz	r5, 8000a1a <__udivmoddi4+0xa6>
 8000a12:	40d3      	lsrs	r3, r2
 8000a14:	2200      	movs	r2, #0
 8000a16:	e9c5 3200 	strd	r3, r2, [r5]
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	428b      	cmp	r3, r1
 8000a20:	d905      	bls.n	8000a2e <__udivmoddi4+0xba>
 8000a22:	b10d      	cbz	r5, 8000a28 <__udivmoddi4+0xb4>
 8000a24:	e9c5 0100 	strd	r0, r1, [r5]
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e7f5      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a2e:	fab3 f183 	clz	r1, r3
 8000a32:	2900      	cmp	r1, #0
 8000a34:	d146      	bne.n	8000ac4 <__udivmoddi4+0x150>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d302      	bcc.n	8000a40 <__udivmoddi4+0xcc>
 8000a3a:	4290      	cmp	r0, r2
 8000a3c:	f0c0 80f0 	bcc.w	8000c20 <__udivmoddi4+0x2ac>
 8000a40:	1a86      	subs	r6, r0, r2
 8000a42:	eb64 0303 	sbc.w	r3, r4, r3
 8000a46:	2001      	movs	r0, #1
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d0e6      	beq.n	8000a1a <__udivmoddi4+0xa6>
 8000a4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000a50:	e7e3      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	f040 8090 	bne.w	8000b78 <__udivmoddi4+0x204>
 8000a58:	eba1 040c 	sub.w	r4, r1, ip
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	fa1f f78c 	uxth.w	r7, ip
 8000a64:	2101      	movs	r1, #1
 8000a66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000a72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a76:	fb07 f006 	mul.w	r0, r7, r6
 8000a7a:	4298      	cmp	r0, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x11c>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a86:	d202      	bcs.n	8000a8e <__udivmoddi4+0x11a>
 8000a88:	4298      	cmp	r0, r3
 8000a8a:	f200 80cd 	bhi.w	8000c28 <__udivmoddi4+0x2b4>
 8000a8e:	4626      	mov	r6, r4
 8000a90:	1a1c      	subs	r4, r3, r0
 8000a92:	fa1f f38e 	uxth.w	r3, lr
 8000a96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000a9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aa2:	fb00 f707 	mul.w	r7, r0, r7
 8000aa6:	429f      	cmp	r7, r3
 8000aa8:	d908      	bls.n	8000abc <__udivmoddi4+0x148>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab2:	d202      	bcs.n	8000aba <__udivmoddi4+0x146>
 8000ab4:	429f      	cmp	r7, r3
 8000ab6:	f200 80b0 	bhi.w	8000c1a <__udivmoddi4+0x2a6>
 8000aba:	4620      	mov	r0, r4
 8000abc:	1bdb      	subs	r3, r3, r7
 8000abe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac2:	e7a5      	b.n	8000a10 <__udivmoddi4+0x9c>
 8000ac4:	f1c1 0620 	rsb	r6, r1, #32
 8000ac8:	408b      	lsls	r3, r1
 8000aca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ace:	431f      	orrs	r7, r3
 8000ad0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ad4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ad8:	ea43 030c 	orr.w	r3, r3, ip
 8000adc:	40f4      	lsrs	r4, r6
 8000ade:	fa00 f801 	lsl.w	r8, r0, r1
 8000ae2:	0c38      	lsrs	r0, r7, #16
 8000ae4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ae8:	fbb4 fef0 	udiv	lr, r4, r0
 8000aec:	fa1f fc87 	uxth.w	ip, r7
 8000af0:	fb00 441e 	mls	r4, r0, lr, r4
 8000af4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000af8:	fb0e f90c 	mul.w	r9, lr, ip
 8000afc:	45a1      	cmp	r9, r4
 8000afe:	fa02 f201 	lsl.w	r2, r2, r1
 8000b02:	d90a      	bls.n	8000b1a <__udivmoddi4+0x1a6>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b0a:	f080 8084 	bcs.w	8000c16 <__udivmoddi4+0x2a2>
 8000b0e:	45a1      	cmp	r9, r4
 8000b10:	f240 8081 	bls.w	8000c16 <__udivmoddi4+0x2a2>
 8000b14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b18:	443c      	add	r4, r7
 8000b1a:	eba4 0409 	sub.w	r4, r4, r9
 8000b1e:	fa1f f983 	uxth.w	r9, r3
 8000b22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b26:	fb00 4413 	mls	r4, r0, r3, r4
 8000b2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b32:	45a4      	cmp	ip, r4
 8000b34:	d907      	bls.n	8000b46 <__udivmoddi4+0x1d2>
 8000b36:	193c      	adds	r4, r7, r4
 8000b38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b3c:	d267      	bcs.n	8000c0e <__udivmoddi4+0x29a>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0x29a>
 8000b42:	3b02      	subs	r3, #2
 8000b44:	443c      	add	r4, r7
 8000b46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b4e:	eba4 040c 	sub.w	r4, r4, ip
 8000b52:	429c      	cmp	r4, r3
 8000b54:	46ce      	mov	lr, r9
 8000b56:	469c      	mov	ip, r3
 8000b58:	d351      	bcc.n	8000bfe <__udivmoddi4+0x28a>
 8000b5a:	d04e      	beq.n	8000bfa <__udivmoddi4+0x286>
 8000b5c:	b155      	cbz	r5, 8000b74 <__udivmoddi4+0x200>
 8000b5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000b62:	eb64 040c 	sbc.w	r4, r4, ip
 8000b66:	fa04 f606 	lsl.w	r6, r4, r6
 8000b6a:	40cb      	lsrs	r3, r1
 8000b6c:	431e      	orrs	r6, r3
 8000b6e:	40cc      	lsrs	r4, r1
 8000b70:	e9c5 6400 	strd	r6, r4, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	e750      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000b78:	f1c2 0320 	rsb	r3, r2, #32
 8000b7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	fa24 f303 	lsr.w	r3, r4, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	430c      	orrs	r4, r1
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b94:	fa1f f78c 	uxth.w	r7, ip
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000ba0:	0c23      	lsrs	r3, r4, #16
 8000ba2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba6:	fb00 f107 	mul.w	r1, r0, r7
 8000baa:	4299      	cmp	r1, r3
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x24c>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bb6:	d22c      	bcs.n	8000c12 <__udivmoddi4+0x29e>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d92a      	bls.n	8000c12 <__udivmoddi4+0x29e>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb01 f307 	mul.w	r3, r1, r7
 8000bd4:	42a3      	cmp	r3, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x276>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000be0:	d213      	bcs.n	8000c0a <__udivmoddi4+0x296>
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	d911      	bls.n	8000c0a <__udivmoddi4+0x296>
 8000be6:	3902      	subs	r1, #2
 8000be8:	4464      	add	r4, ip
 8000bea:	1ae4      	subs	r4, r4, r3
 8000bec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bf0:	e739      	b.n	8000a66 <__udivmoddi4+0xf2>
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	e6f0      	b.n	80009d8 <__udivmoddi4+0x64>
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	e706      	b.n	8000a08 <__udivmoddi4+0x94>
 8000bfa:	45c8      	cmp	r8, r9
 8000bfc:	d2ae      	bcs.n	8000b5c <__udivmoddi4+0x1e8>
 8000bfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c06:	3801      	subs	r0, #1
 8000c08:	e7a8      	b.n	8000b5c <__udivmoddi4+0x1e8>
 8000c0a:	4631      	mov	r1, r6
 8000c0c:	e7ed      	b.n	8000bea <__udivmoddi4+0x276>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	e799      	b.n	8000b46 <__udivmoddi4+0x1d2>
 8000c12:	4630      	mov	r0, r6
 8000c14:	e7d4      	b.n	8000bc0 <__udivmoddi4+0x24c>
 8000c16:	46d6      	mov	lr, sl
 8000c18:	e77f      	b.n	8000b1a <__udivmoddi4+0x1a6>
 8000c1a:	4463      	add	r3, ip
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	e74d      	b.n	8000abc <__udivmoddi4+0x148>
 8000c20:	4606      	mov	r6, r0
 8000c22:	4623      	mov	r3, r4
 8000c24:	4608      	mov	r0, r1
 8000c26:	e70f      	b.n	8000a48 <__udivmoddi4+0xd4>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	e730      	b.n	8000a90 <__udivmoddi4+0x11c>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_idiv0>:
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <_ZN8rxData_tC1Ev>:
    uint8_t jointEnable;
    uint16_t outputs;
    uint8_t spare0;
  };

  rxData_t() {
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
      header = 0;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
      outputs = 0;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      jointEnable = 0;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e008      	b.n	8000c70 <_ZN8rxData_tC1Ev+0x3c>
         jointFreqCmd[i] = 0;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	d9f3      	bls.n	8000c5e <_ZN8rxData_tC1Ev+0x2a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	73bb      	strb	r3, [r7, #14]
 8000c7a:	e00b      	b.n	8000c94 <_ZN8rxData_tC1Ev+0x60>
         setPoint[i] = 0.0;
 8000c7c:	7bbb      	ldrb	r3, [r7, #14]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	3308      	adds	r3, #8
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	3304      	adds	r3, #4
 8000c88:	f04f 0200 	mov.w	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	3301      	adds	r3, #1
 8000c92:	73bb      	strb	r3, [r7, #14]
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	2b05      	cmp	r3, #5
 8000c98:	d9f0      	bls.n	8000c7c <_ZN8rxData_tC1Ev+0x48>
     }
  }
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	4798      	blx	r3
    }
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf0c      	ite	eq
 8000cde:	2301      	moveq	r3, #1
 8000ce0:	2300      	movne	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <_ZNK6Module17getUsesModulePostEv>:
		virtual void update();		// the standard interface for update of the module - use for stepgen, PWM etc
		virtual void updatePost();
		virtual void slowUpdate();	// the standard interface for the slow update - use for PID controller etc
        virtual void configure();   // the standard interface for one off configuration

        virtual bool getUsesModulePost() const { return usesModulePost; }
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7d1b      	ldrb	r3, [r3, #20]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>:

  size_t size() const {
    return size_;
  }

  char operator[](size_t i) const {
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
  }
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_ZN14DMA_RxBuffer_tC1Ev>:
} __attribute__((aligned(32))) txData_t;


typedef struct {
    volatile rxData_t buffer[2]; // DMA RX buffers
} DMA_RxBuffer_t;
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2401      	movs	r4, #1
 8000d34:	461d      	mov	r5, r3
 8000d36:	e004      	b.n	8000d42 <_ZN14DMA_RxBuffer_tC1Ev+0x1a>
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f7ff ff7b 	bl	8000c34 <_ZN8rxData_tC1Ev>
 8000d3e:	3c01      	subs	r4, #1
 8000d40:	3540      	adds	r5, #64	@ 0x40
 8000d42:	2c00      	cmp	r4, #0
 8000d44:	daf8      	bge.n	8000d38 <_ZN14DMA_RxBuffer_tC1Ev+0x10>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bdb0      	pop	{r4, r5, r7, pc}

08000d50 <_ZNSt8functionIFvbEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ffa4 	bl	8000ca8 <_ZNSt14_Function_baseD1Ev>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <_ZN14CommsInterfaceD1Ev>:

#include <functional>

#include "../../modules/module.h"

class CommsInterface : public Module {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <_ZN14CommsInterfaceD1Ev+0x2c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3318      	adds	r3, #24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ffe6 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00c fe74 	bl	800da74 <_ZN6ModuleD1Ev>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	0801e854 	.word	0x0801e854

08000d9c <_ZN14CommsInterfaceD0Ev>:
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ffe1 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000daa:	2128      	movs	r1, #40	@ 0x28
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f01b fd66 	bl	801c87e <_ZdlPvj>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>:
#include "SPIComms.h"

__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;


SPIComms::SPIComms(volatile rxData_t* _ptrRxData, volatile txData_t* _ptrTxData, SPI_TypeDef* _spiType) :
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
	ptrRxData(_ptrRxData),
	ptrTxData(_ptrTxData),
	spiType(_spiType)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 f9ab 	bl	8002128 <_ZN14CommsInterfaceC1Ev>
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x60>)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	601a      	str	r2, [r3, #0]
	ptrRxData(_ptrRxData),
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	629a      	str	r2, [r3, #40]	@ 0x28
	ptrTxData(_ptrTxData),
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	62da      	str	r2, [r3, #44]	@ 0x2c
	spiType(_spiType)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	635a      	str	r2, [r3, #52]	@ 0x34
{
    spiHandle.Instance = spiType;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	651a      	str	r2, [r3, #80]	@ 0x50
    ptrRxDMABuffer = &rxDMABuffer;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x64>)
 8000df6:	631a      	str	r2, [r3, #48]	@ 0x30

    irqNss = EXTI4_IRQn;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	220a      	movs	r2, #10
 8000dfc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    irqDMAtx = DMA1_Stream0_IRQn;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	220b      	movs	r2, #11
 8000e04:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    irqDMArx = DMA1_Stream1_IRQn;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
}
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	0801e824 	.word	0x0801e824
 8000e20:	30000000 	.word	0x30000000

08000e24 <_ZN8SPICommsD1Ev>:

SPIComms::~SPIComms() {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <_ZN8SPICommsD1Ev+0x20>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	601a      	str	r2, [r3, #0]

}
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff99 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	0801e824 	.word	0x0801e824

08000e48 <_ZN8SPICommsD0Ev>:
SPIComms::~SPIComms() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
}
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ffe7 	bl	8000e24 <_ZN8SPICommsD1Ev>
 8000e56:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f01b fd0f 	bl	801c87e <_ZdlPvj>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <_ZN8SPIComms4initEv>:

void SPIComms::init() {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]

    if(spiHandle.Instance == SPI1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e88:	4ab1      	ldr	r2, [pc, #708]	@ (8001150 <_ZN8SPIComms4initEv+0x2e4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	f040 815c 	bne.w	8001148 <_ZN8SPIComms4initEv+0x2dc>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e90:	4bb0      	ldr	r3, [pc, #704]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e96:	4aaf      	ldr	r2, [pc, #700]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea0:	4bac      	ldr	r3, [pc, #688]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eae:	2310      	movs	r3, #16
 8000eb0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	48a5      	ldr	r0, [pc, #660]	@ (8001158 <_ZN8SPIComms4initEv+0x2ec>)
 8000ec4:	f011 fcf4 	bl	80128b0 <HAL_GPIO_Init>

        printf("	Initialising SPI1 slave\n");
 8000ec8:	48a4      	ldr	r0, [pc, #656]	@ (800115c <_ZN8SPIComms4initEv+0x2f0>)
 8000eca:	f01c f9e7 	bl	801d29c <puts>

        spiHandle.Init.Mode           			= SPI_MODE_SLAVE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	655a      	str	r2, [r3, #84]	@ 0x54
        spiHandle.Init.Direction      			= SPI_DIRECTION_2LINES;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	659a      	str	r2, [r3, #88]	@ 0x58
        spiHandle.Init.DataSize       			= SPI_DATASIZE_8BIT;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2207      	movs	r2, #7
 8000ede:	65da      	str	r2, [r3, #92]	@ 0x5c
        spiHandle.Init.CLKPolarity    			= SPI_POLARITY_LOW;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	661a      	str	r2, [r3, #96]	@ 0x60
        spiHandle.Init.CLKPhase       			= SPI_PHASE_1EDGE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	665a      	str	r2, [r3, #100]	@ 0x64
        spiHandle.Init.NSS            			= SPI_NSS_HARD_INPUT;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	669a      	str	r2, [r3, #104]	@ 0x68
        spiHandle.Init.FirstBit       			= SPI_FIRSTBIT_MSB;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	671a      	str	r2, [r3, #112]	@ 0x70
        spiHandle.Init.TIMode         			= SPI_TIMODE_DISABLE;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	675a      	str	r2, [r3, #116]	@ 0x74
        spiHandle.Init.CRCCalculation 			= SPI_CRCCALCULATION_DISABLE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	679a      	str	r2, [r3, #120]	@ 0x78
        spiHandle.Init.CRCPolynomial  			= 0x0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	67da      	str	r2, [r3, #124]	@ 0x7c
        spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        spiHandle.Init.NSSPolarity 				= SPI_NSS_POLARITY_LOW;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        spiHandle.Init.MasterInterDataIdleness 	= SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        spiHandle.Init.MasterReceiverAutoSusp 	= SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        spiHandle.Init.IOSwap 					= SPI_IO_SWAP_DISABLE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

        HAL_SPI_Init(&this->spiHandle);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3350      	adds	r3, #80	@ 0x50
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f016 fff2 	bl	8017f48 <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 8000f64:	4b7b      	ldr	r3, [pc, #492]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f6a:	4a7a      	ldr	r2, [pc, #488]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f74:	4b77      	ldr	r3, [pc, #476]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

		printf("	Initialising GPIO for SPI\n");
 8000f82:	4877      	ldr	r0, [pc, #476]	@ (8001160 <_ZN8SPIComms4initEv+0x2f4>)
 8000f84:	f01c f98a 	bl	801d29c <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b72      	ldr	r3, [pc, #456]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	4a71      	ldr	r2, [pc, #452]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f98:	4b6e      	ldr	r3, [pc, #440]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fb6:	23f0      	movs	r3, #240	@ 0xf0
 8000fb8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4861      	ldr	r0, [pc, #388]	@ (8001158 <_ZN8SPIComms4initEv+0x2ec>)
 8000fd2:	f011 fc6d 	bl	80128b0 <HAL_GPIO_Init>

        printf("	Initialising DMA for SPI\n");
 8000fd6:	4863      	ldr	r0, [pc, #396]	@ (8001164 <_ZN8SPIComms4initEv+0x2f8>)
 8000fd8:	f01c f960 	bl	801d29c <puts>

        hdma_spi_tx.Instance 					= DMA1_Stream0;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a62      	ldr	r2, [pc, #392]	@ (8001168 <_ZN8SPIComms4initEv+0x2fc>)
 8000fe0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2226      	movs	r2, #38	@ 0x26
 8000fe8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        hdma_spi_tx.Init.Direction 				= DMA_MEMORY_TO_PERIPH;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2240      	movs	r2, #64	@ 0x40
 8000ff0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        hdma_spi_tx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001002:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        hdma_spi_tx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        hdma_spi_tx.Init.Mode 					= DMA_CIRCULAR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800101c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        hdma_spi_tx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        hdma_spi_tx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

        HAL_DMA_Init(&hdma_spi_tx);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	33d8      	adds	r3, #216	@ 0xd8
 8001034:	4618      	mov	r0, r3
 8001036:	f00f f8fb 	bl	8010230 <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmatx, hdma_spi_tx);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

        hdma_spi_rx.Instance 					= DMA1_Stream1;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a45      	ldr	r2, [pc, #276]	@ (800116c <_ZN8SPIComms4initEv+0x300>)
 8001056:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
        hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2225      	movs	r2, #37	@ 0x25
 800105e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        hdma_spi_rx.Init.Direction 				= DMA_PERIPH_TO_MEMORY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
        hdma_spi_rx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
        hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001078:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        hdma_spi_rx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        hdma_spi_rx.Init.Mode 					= DMA_CIRCULAR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001092:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        hdma_spi_rx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        hdma_spi_rx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174

        HAL_DMA_Init(&hdma_spi_rx);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80010ac:	4618      	mov	r0, r3
 80010ae:	f00f f8bf 	bl	8010230 <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmarx, hdma_spi_rx);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f503 72a8 	add.w	r2, r3, #336	@ 0x150
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188

        printf("	Initialising DMA for Memory to Memory transfer\n");
 80010ca:	4829      	ldr	r0, [pc, #164]	@ (8001170 <_ZN8SPIComms4initEv+0x304>)
 80010cc:	f01c f8e6 	bl	801d29c <puts>

        hdma_memtomem.Instance 					= DMA1_Stream2;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a28      	ldr	r2, [pc, #160]	@ (8001174 <_ZN8SPIComms4initEv+0x308>)
 80010d4:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
        hdma_memtomem.Init.Request 				= DMA_REQUEST_MEM2MEM;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
        hdma_memtomem.Init.Direction 			= DMA_MEMORY_TO_MEMORY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
        hdma_memtomem.Init.PeriphInc 			= DMA_PINC_ENABLE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ee:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
        hdma_memtomem.Init.MemInc 				= DMA_MINC_ENABLE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f8:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
        hdma_memtomem.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc
        hdma_memtomem.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        hdma_memtomem.Init.Mode 				= DMA_NORMAL;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        hdma_memtomem.Init.Priority 			= DMA_PRIORITY_LOW;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
        hdma_memtomem.Init.FIFOMode 			= DMA_FIFOMODE_ENABLE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2204      	movs	r2, #4
 8001120:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        hdma_memtomem.Init.FIFOThreshold 		= DMA_FIFO_THRESHOLD_FULL;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2203      	movs	r2, #3
 8001128:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
        hdma_memtomem.Init.MemBurst 			= DMA_MBURST_SINGLE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
        hdma_memtomem.Init.PeriphBurst 			= DMA_PBURST_SINGLE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8

        HAL_DMA_Init(&hdma_memtomem);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001142:	4618      	mov	r0, r3
 8001144:	f00f f874 	bl	8010230 <HAL_DMA_Init>
    }
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	@ 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40013000 	.word	0x40013000
 8001154:	58024400 	.word	0x58024400
 8001158:	58020000 	.word	0x58020000
 800115c:	0801df70 	.word	0x0801df70
 8001160:	0801df8c 	.word	0x0801df8c
 8001164:	0801dfa8 	.word	0x0801dfa8
 8001168:	40020010 	.word	0x40020010
 800116c:	40020028 	.word	0x40020028
 8001170:	0801dfc4 	.word	0x0801dfc4
 8001174:	40020040 	.word	0x40020040

08001178 <_ZN8SPIComms5startEv>:

void SPIComms::start() {
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b08f      	sub	sp, #60	@ 0x3c
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
    // Register the NSS (slave select) interrupt
    NssInterrupt = new ModuleInterrupt<SPIComms>(
        irqNss,
        this,
        &SPIComms::handleNssInterrupt
    );
 8001180:	2010      	movs	r0, #16
 8001182:	f01b fb8d 	bl	801c8a0 <_Znwj>
 8001186:	4603      	mov	r3, r0
 8001188:	461c      	mov	r4, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	@ 0x48
 8001190:	4b6d      	ldr	r3, [pc, #436]	@ (8001348 <_ZN8SPIComms5startEv+0x1d0>)
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4620      	mov	r0, r4
 80011a2:	f000 fec5 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    NssInterrupt = new ModuleInterrupt<SPIComms>(
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	63dc      	str	r4, [r3, #60]	@ 0x3c
    HAL_NVIC_SetPriority(irqNss, Config::spiNssIrqPriority, 0);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011b0:	2200      	movs	r2, #0
 80011b2:	2106      	movs	r1, #6
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00e ff8a 	bl	80100ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqNss);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011c0:	4618      	mov	r0, r3
 80011c2:	f00e ff9e 	bl	8010102 <HAL_NVIC_EnableIRQ>
    // Register the DMA Rx interrupt
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMArx,
        this,
        &SPIComms::handleRxInterrupt
    );
 80011c6:	2010      	movs	r0, #16
 80011c8:	f01b fb6a 	bl	801c8a0 <_Znwj>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461c      	mov	r4, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f9b3 104a 	ldrsh.w	r1, [r3, #74]	@ 0x4a
 80011d6:	4b5d      	ldr	r3, [pc, #372]	@ (800134c <_ZN8SPIComms5startEv+0x1d4>)
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4620      	mov	r0, r4
 80011e8:	f000 fea2 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	645c      	str	r4, [r3, #68]	@ 0x44
    HAL_NVIC_SetPriority(irqDMArx, Config::spiDmaRxIrqPriority, 0);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 80011f6:	2200      	movs	r2, #0
 80011f8:	2105      	movs	r1, #5
 80011fa:	4618      	mov	r0, r3
 80011fc:	f00e ff67 	bl	80100ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMArx);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001206:	4618      	mov	r0, r3
 8001208:	f00e ff7b 	bl	8010102 <HAL_NVIC_EnableIRQ>
    // Register the DMA Tx interrupt
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMAtx,
        this,
        &SPIComms::handleTxInterrupt
    );
 800120c:	2010      	movs	r0, #16
 800120e:	f01b fb47 	bl	801c8a0 <_Znwj>
 8001212:	4603      	mov	r3, r0
 8001214:	461c      	mov	r4, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f9b3 104c 	ldrsh.w	r1, [r3, #76]	@ 0x4c
 800121c:	4b4c      	ldr	r3, [pc, #304]	@ (8001350 <_ZN8SPIComms5startEv+0x1d8>)
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4620      	mov	r0, r4
 800122e:	f000 fe7f 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641c      	str	r4, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(irqDMAtx, Config::spiDmaTxIrqPriority, 0); // TX needs higher priority than RX
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800123c:	2200      	movs	r2, #0
 800123e:	2104      	movs	r1, #4
 8001240:	4618      	mov	r0, r3
 8001242:	f00e ff44 	bl	80100ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMAtx);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800124c:	4618      	mov	r0, r3
 800124e:	f00e ff58 	bl	8010102 <HAL_NVIC_EnableIRQ>

    // Initialize the data buffers
    std::fill(std::begin(ptrTxData->txBuffer), std::end(ptrTxData->txBuffer), 0);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fe96 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 800125c:	4604      	mov	r4, r0
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fe9b 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001268:	4601      	mov	r1, r0
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	461a      	mov	r2, r3
 8001274:	4620      	mov	r0, r4
 8001276:	f000 fe9e 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxData->rxBuffer), std::end(ptrRxData->rxBuffer), 0);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fe82 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 8001284:	4604      	mov	r4, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fe87 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001290:	4601      	mov	r1, r0
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129a:	461a      	mov	r2, r3
 800129c:	4620      	mov	r0, r4
 800129e:	f000 fe8a 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[0].rxBuffer), std::end(ptrRxDMABuffer->buffer[0].rxBuffer), 0);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fe6e 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012ac:	4604      	mov	r4, r0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fe73 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012b8:	4601      	mov	r1, r0
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c2:	461a      	mov	r2, r3
 80012c4:	4620      	mov	r0, r4
 80012c6:	f000 fe76 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[1].rxBuffer), std::end(ptrRxDMABuffer->buffer[1].rxBuffer), 0);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	3340      	adds	r3, #64	@ 0x40
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fe59 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012d6:	4604      	mov	r4, r0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	3340      	adds	r3, #64	@ 0x40
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fe5d 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012e4:	4601      	mov	r1, r0
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ee:	461a      	mov	r2, r3
 80012f0:	4620      	mov	r0, r4
 80012f2:	f000 fe60 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>

    ptrTxData->header = Config::pruData;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fa:	4a16      	ldr	r2, [pc, #88]	@ (8001354 <_ZN8SPIComms5startEv+0x1dc>)
 80012fc:	601a      	str	r2, [r3, #0]

    // Start the multi-buffer DMA SPI communication
    dmaStatus = startMultiBufferDMASPI(
        (uint8_t*)ptrTxData->txBuffer,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001302:	4619      	mov	r1, r3
        (uint8_t*)ptrTxData->txBuffer,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001308:	4618      	mov	r0, r3
        (uint8_t*)ptrRxDMABuffer->buffer[0].rxBuffer,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	461c      	mov	r4, r3
        (uint8_t*)ptrRxDMABuffer->buffer[1].rxBuffer,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	3340      	adds	r3, #64	@ 0x40
    dmaStatus = startMultiBufferDMASPI(
 8001316:	2240      	movs	r2, #64	@ 0x40
 8001318:	9201      	str	r2, [sp, #4]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4623      	mov	r3, r4
 800131e:	4602      	mov	r2, r0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f81b 	bl	800135c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
        Config::dataBuffSize
    );

    // Check for DMA initialization errors
    if (dmaStatus != HAL_OK) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <_ZN8SPIComms5startEv+0x1c8>
        printf("DMA SPI error\n");
 800133a:	4807      	ldr	r0, [pc, #28]	@ (8001358 <_ZN8SPIComms5startEv+0x1e0>)
 800133c:	f01b ffae 	bl	801d29c <puts>
    }
}
 8001340:	bf00      	nop
 8001342:	3734      	adds	r7, #52	@ 0x34
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	08001d7f 	.word	0x08001d7f
 800134c:	08001dd5 	.word	0x08001dd5
 8001350:	08001dad 	.word	0x08001dad
 8001354:	64617461 	.word	0x64617461
 8001358:	0801dff4 	.word	0x0801dff4

0800135c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>:

HAL_StatusTypeDef SPIComms::startMultiBufferDMASPI(uint8_t *pTxBuffer0, uint8_t *pTxBuffer1,
                                                   uint8_t *pRxBuffer0, uint8_t *pRxBuffer1,
                                                   uint16_t Size)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b087      	sub	sp, #28
 8001360:	af02      	add	r7, sp, #8
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
    /* Check Direction parameter */
    assert_param(IS_SPI_DIRECTION_2LINES(spiHandle.Init.Direction));

    if (spiHandle.State != HAL_SPI_STATE_READY)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b01      	cmp	r3, #1
 8001374:	bf14      	ite	ne
 8001376:	2301      	movne	r3, #1
 8001378:	2300      	moveq	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x28>
    {
        return HAL_BUSY;
 8001380:	2302      	movs	r3, #2
 8001382:	e13e      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    if ((pTxBuffer0 == NULL) || (pRxBuffer0 == NULL) || (Size == 0UL))
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 8001390:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3e>
    {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e133      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* If secondary Tx or Rx buffer is not provided, use the primary buffer */
    if (pTxBuffer1 == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x48>
    {
        pTxBuffer1 = pTxBuffer0;
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	607b      	str	r3, [r7, #4]
    }

    if (pRxBuffer1 == NULL)
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x52>
    {
        pRxBuffer1 = pRxBuffer0;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	623b      	str	r3, [r7, #32]
    }

    /* Lock the process */
    __HAL_LOCK(&spiHandle);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x60>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e122      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    /* Set the transaction information */
    spiHandle.State       = HAL_SPI_STATE_BUSY_TX_RX;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2205      	movs	r2, #5
 80013c8:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
    spiHandle.ErrorCode   = HAL_SPI_ERROR_NONE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    spiHandle.TxXferSize  = Size;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013d8:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    spiHandle.TxXferCount = Size;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e0:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
    spiHandle.RxXferSize  = Size;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e8:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
    spiHandle.RxXferCount = Size;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013f0:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba

    /* Init unused fields in handle to zero */
    spiHandle.RxISR       = NULL;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    spiHandle.TxISR       = NULL;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

    /* Set Full-Duplex mode */
    SPI_2LINES(&spiHandle);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800140e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8001412:	60da      	str	r2, [r3, #12]

    /* Reset the Tx/Rx DMA bits */
    CLEAR_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800141e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8001422:	609a      	str	r2, [r3, #8]

    /* Adjust XferCount according to DMA alignment / Data size */
    if (spiHandle.Init.DataSize <= SPI_DATASIZE_8BIT)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001428:	2b07      	cmp	r3, #7
 800142a:	d820      	bhi.n	800146e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x112>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001436:	d109      	bne.n	800144c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0xf0>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 800143e:	b29b      	uxth	r3, r3
 8001440:	3301      	adds	r3, #1
 8001442:	085b      	lsrs	r3, r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001456:	d12e      	bne.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800145e:	b29b      	uxth	r3, r3
 8001460:	3301      	adds	r3, #1
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	b29a      	uxth	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
 800146c:	e023      	b.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        }
    }
    else if (spiHandle.Init.DataSize <= SPI_DATASIZE_16BIT)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001472:	2b0f      	cmp	r3, #15
 8001474:	d81f      	bhi.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800147c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001480:	d109      	bne.n	8001496 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x13a>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8001488:	b29b      	uxth	r3, r3
 800148a:	3301      	adds	r3, #1
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800149c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80014a0:	d109      	bne.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3301      	adds	r3, #1
 80014ac:	085b      	lsrs	r3, r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
        }
    }

    /* Configure Tx DMA with Multi-Buffer */
    hdma_spi_tx.XferHalfCpltCallback = NULL;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    hdma_spi_tx.XferCpltCallback     = NULL;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    hdma_spi_tx.XferErrorCallback    = NULL;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 80014d4:	68b9      	ldr	r1, [r7, #8]
                                                (uint32_t)pTxBuffer0,
                                                (uint32_t)&spiHandle.Instance->TXDR,
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014da:	3320      	adds	r3, #32
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014dc:	461c      	mov	r4, r3
 80014de:	687a      	ldr	r2, [r7, #4]
                                                (uint32_t)pTxBuffer1,
                                                spiHandle.TxXferCount))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 80014e6:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4613      	mov	r3, r2
 80014ec:	4622      	mov	r2, r4
 80014ee:	f010 fdcb 	bl	8012088 <HAL_DMAEx_MultiBufferStart_IT>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf14      	ite	ne
 80014f8:	2301      	movne	r3, #1
 80014fa:	2300      	moveq	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x1b2>
    {
        __HAL_UNLOCK(&spiHandle);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e079      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure Rx DMA with Multi-Buffer */
    hdma_spi_rx.XferHalfCpltCallback = NULL;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    hdma_spi_rx.XferCpltCallback     = NULL;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    hdma_spi_rx.XferErrorCallback    = NULL;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f503 70a8 	add.w	r0, r3, #336	@ 0x150
                                                (uint32_t)&spiHandle.Instance->RXDR,
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001530:	3330      	adds	r3, #48	@ 0x30
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001532:	461c      	mov	r4, r3
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	6a39      	ldr	r1, [r7, #32]
                                                (uint32_t)pRxBuffer0,
                                                (uint32_t)pRxBuffer1,
                                                spiHandle.RxXferCount))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800153e:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	460b      	mov	r3, r1
 8001544:	4621      	mov	r1, r4
 8001546:	f010 fd9f 	bl	8012088 <HAL_DMAEx_MultiBufferStart_IT>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf14      	ite	ne
 8001550:	2301      	movne	r3, #1
 8001552:	2300      	moveq	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00a      	beq.n	8001570 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x214>
    {
        (void)HAL_DMA_Abort(&hdma_spi_tx);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	33d8      	adds	r3, #216	@ 0xd8
 800155e:	4618      	mov	r0, r3
 8001560:	f00f fae2 	bl	8010b28 <HAL_DMA_Abort>
        __HAL_UNLOCK(&spiHandle);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e048      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure SPI TSIZE for full transfer or circular mode */
    if (hdma_spi_rx.Init.Mode == DMA_CIRCULAR || hdma_spi_tx.Init.Mode == DMA_CIRCULAR)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8001576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800157a:	d005      	beq.n	8001588 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x22c>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001586:	d108      	bne.n	800159a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x23e>
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800158c:	6859      	ldr	r1, [r3, #4]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 8001594:	400b      	ands	r3, r1
 8001596:	6053      	str	r3, [r2, #4]
 8001598:	e009      	b.n	80015ae <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x252>
    }
    else
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, Size);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015aa:	430b      	orrs	r3, r1
 80015ac:	6053      	str	r3, [r2, #4]
    }

    /* Enable Tx and Rx DMA Requests */
    SET_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80015bc:	609a      	str	r2, [r3, #8]

    /* Enable SPI error interrupt */
    __HAL_SPI_ENABLE_IT(&spiHandle, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c8:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 80015cc:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&spiHandle);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

    if (spiHandle.Init.Mode == SPI_MODE_MASTER)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015e6:	d107      	bne.n	80015f8 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x29c>
    {
        SET_BIT(spiHandle.Instance->CR1, SPI_CR1_CSTART);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015f6:	601a      	str	r2, [r3, #0]
    }

    __HAL_UNLOCK(&spiHandle);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bd90      	pop	{r4, r7, pc}
 800160a:	bf00      	nop
 800160c:	ffff0000 	.word	0xffff0000

08001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>:

int SPIComms::DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr_dma;
  int interrupt;

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161e:	613b      	str	r3, [r7, #16]

  tmpisr_dma  = regs_dma->ISR;
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a5a      	ldr	r2, [pc, #360]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d04a      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a58      	ldr	r2, [pc, #352]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d045      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a57      	ldr	r2, [pc, #348]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d040      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a55      	ldr	r2, [pc, #340]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d03b      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a54      	ldr	r2, [pc, #336]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d036      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a52      	ldr	r2, [pc, #328]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d031      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a51      	ldr	r2, [pc, #324]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d02c      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a4f      	ldr	r2, [pc, #316]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d027      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a4e      	ldr	r2, [pc, #312]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d022      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a4c      	ldr	r2, [pc, #304]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01d      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a4b      	ldr	r2, [pc, #300]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d018      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a49      	ldr	r2, [pc, #292]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a48      	ldr	r2, [pc, #288]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d00e      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a46      	ldr	r2, [pc, #280]	@ (80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d009      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a45      	ldr	r2, [pc, #276]	@ (80017cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d004      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a43      	ldr	r2, [pc, #268]	@ (80017d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xba>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xbc>
 80016ca:	2300      	movs	r3, #0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 8338 	beq.w	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	2208      	movs	r2, #8
 80016dc:	409a      	lsls	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 809a 	beq.w	800181c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a29      	ldr	r2, [pc, #164]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d04a      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a28      	ldr	r2, [pc, #160]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d045      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a26      	ldr	r2, [pc, #152]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d040      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a25      	ldr	r2, [pc, #148]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d03b      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a23      	ldr	r2, [pc, #140]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d036      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a22      	ldr	r2, [pc, #136]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d031      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a20      	ldr	r2, [pc, #128]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d02c      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1f      	ldr	r2, [pc, #124]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d027      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1d      	ldr	r2, [pc, #116]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d022      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a1c      	ldr	r2, [pc, #112]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d01d      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1a      	ldr	r2, [pc, #104]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d018      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a19      	ldr	r2, [pc, #100]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d013      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00e      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a16      	ldr	r2, [pc, #88]	@ (80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d009      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a14      	ldr	r2, [pc, #80]	@ (80017cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d004      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a13      	ldr	r2, [pc, #76]	@ (80017d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d125      	bne.n	80017d4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c4>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	e024      	b.n	80017de <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ce>
 8001794:	40020010 	.word	0x40020010
 8001798:	40020028 	.word	0x40020028
 800179c:	40020040 	.word	0x40020040
 80017a0:	40020058 	.word	0x40020058
 80017a4:	40020070 	.word	0x40020070
 80017a8:	40020088 	.word	0x40020088
 80017ac:	400200a0 	.word	0x400200a0
 80017b0:	400200b8 	.word	0x400200b8
 80017b4:	40020410 	.word	0x40020410
 80017b8:	40020428 	.word	0x40020428
 80017bc:	40020440 	.word	0x40020440
 80017c0:	40020458 	.word	0x40020458
 80017c4:	40020470 	.word	0x40020470
 80017c8:	40020488 	.word	0x40020488
 80017cc:	400204a0 	.word	0x400204a0
 80017d0:	400204b8 	.word	0x400204b8
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf14      	ite	ne
 80017e2:	2301      	movne	r3, #1
 80017e4:	2300      	moveq	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d017      	beq.n	800181c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0204 	bic.w	r2, r2, #4
 80017fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	2208      	movs	r2, #8
 8001806:	409a      	lsls	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001818:	2303      	movs	r3, #3
 800181a:	617b      	str	r3, [r7, #20]
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d070      	beq.n	8001914 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a68      	ldr	r2, [pc, #416]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d04a      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a66      	ldr	r2, [pc, #408]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d045      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a65      	ldr	r2, [pc, #404]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d040      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a63      	ldr	r2, [pc, #396]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d03b      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a62      	ldr	r2, [pc, #392]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d036      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a60      	ldr	r2, [pc, #384]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d031      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a5f      	ldr	r2, [pc, #380]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d02c      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a5d      	ldr	r2, [pc, #372]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d027      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a5c      	ldr	r2, [pc, #368]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d022      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5a      	ldr	r2, [pc, #360]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d01d      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a59      	ldr	r2, [pc, #356]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d018      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a57      	ldr	r2, [pc, #348]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a56      	ldr	r2, [pc, #344]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00e      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a54      	ldr	r2, [pc, #336]	@ (8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d009      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a53      	ldr	r2, [pc, #332]	@ (8001a10 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d004      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a51      	ldr	r2, [pc, #324]	@ (8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d105      	bne.n	80018de <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2ce>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018dc:	e003      	b.n	80018e6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2d6>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2300      	movs	r3, #0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf14      	ite	ne
 80018ea:	2301      	movne	r3, #1
 80018ec:	2300      	moveq	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00f      	beq.n	8001914 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	2201      	movs	r2, #1
 80018fe:	409a      	lsls	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001908:	f043 0202 	orr.w	r2, r3, #2
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001910:	2303      	movs	r3, #3
 8001912:	617b      	str	r3, [r7, #20]
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	2204      	movs	r2, #4
 800191e:	409a      	lsls	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8092 	beq.w	8001a4e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2a      	ldr	r2, [pc, #168]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d04a      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a28      	ldr	r2, [pc, #160]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d045      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a27      	ldr	r2, [pc, #156]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d040      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a25      	ldr	r2, [pc, #148]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d03b      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a24      	ldr	r2, [pc, #144]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d036      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a22      	ldr	r2, [pc, #136]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d031      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a21      	ldr	r2, [pc, #132]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d02c      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1f      	ldr	r2, [pc, #124]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d027      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d022      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1c      	ldr	r2, [pc, #112]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01d      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1b      	ldr	r2, [pc, #108]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d018      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a18      	ldr	r2, [pc, #96]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00e      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a16      	ldr	r2, [pc, #88]	@ (8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d009      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a15      	ldr	r2, [pc, #84]	@ (8001a10 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d004      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a13      	ldr	r2, [pc, #76]	@ (8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d126      	bne.n	8001a18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x408>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	e024      	b.n	8001a20 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x410>
 80019d6:	bf00      	nop
 80019d8:	40020010 	.word	0x40020010
 80019dc:	40020028 	.word	0x40020028
 80019e0:	40020040 	.word	0x40020040
 80019e4:	40020058 	.word	0x40020058
 80019e8:	40020070 	.word	0x40020070
 80019ec:	40020088 	.word	0x40020088
 80019f0:	400200a0 	.word	0x400200a0
 80019f4:	400200b8 	.word	0x400200b8
 80019f8:	40020410 	.word	0x40020410
 80019fc:	40020428 	.word	0x40020428
 8001a00:	40020440 	.word	0x40020440
 8001a04:	40020458 	.word	0x40020458
 8001a08:	40020470 	.word	0x40020470
 8001a0c:	40020488 	.word	0x40020488
 8001a10:	400204a0 	.word	0x400204a0
 8001a14:	400204b8 	.word	0x400204b8
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf14      	ite	ne
 8001a24:	2301      	movne	r3, #1
 8001a26:	2300      	moveq	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00f      	beq.n	8001a4e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	2204      	movs	r2, #4
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a42:	f043 0204 	orr.w	r2, r3, #4
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	617b      	str	r3, [r7, #20]
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	2210      	movs	r2, #16
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d07f      	beq.n	8001b62 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x552>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6f      	ldr	r2, [pc, #444]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d04a      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a6d      	ldr	r2, [pc, #436]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d045      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d040      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a6a      	ldr	r2, [pc, #424]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d03b      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a69      	ldr	r2, [pc, #420]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d036      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a67      	ldr	r2, [pc, #412]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d031      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a66      	ldr	r2, [pc, #408]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d02c      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a64      	ldr	r2, [pc, #400]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d027      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a63      	ldr	r2, [pc, #396]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d022      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a61      	ldr	r2, [pc, #388]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01d      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a60      	ldr	r2, [pc, #384]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d018      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a5e      	ldr	r2, [pc, #376]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a5d      	ldr	r2, [pc, #372]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00e      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a5b      	ldr	r2, [pc, #364]	@ (8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d009      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c5c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d004      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a58      	ldr	r2, [pc, #352]	@ (8001c60 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d105      	bne.n	8001b0e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4fe>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	e004      	b.n	8001b18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x508>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d01b      	beq.n	8001b5e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2210      	movs	r2, #16
 8001b30:	409a      	lsls	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	609a      	str	r2, [r3, #8]

        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bf0c      	ite	eq
 8001b44:	2301      	moveq	r3, #1
 8001b46:	2300      	movne	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
        {
          /* Disable the half transfer interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0208 	bic.w	r2, r2, #8
 8001b5c:	601a      	str	r2, [r3, #0]
        }

      }
      interrupt = DMA_HALF_TRANSFER;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80e5 	beq.w	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a29      	ldr	r2, [pc, #164]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d04a      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a28      	ldr	r2, [pc, #160]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d045      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a26      	ldr	r2, [pc, #152]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d040      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a25      	ldr	r2, [pc, #148]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d03b      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a23      	ldr	r2, [pc, #140]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d036      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a22      	ldr	r2, [pc, #136]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d031      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a20      	ldr	r2, [pc, #128]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d02c      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d027      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d022      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d01d      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d018      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a19      	ldr	r2, [pc, #100]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d013      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a17      	ldr	r2, [pc, #92]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00e      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a16      	ldr	r2, [pc, #88]	@ (8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d009      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a14      	ldr	r2, [pc, #80]	@ (8001c5c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d004      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a13      	ldr	r2, [pc, #76]	@ (8001c60 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d125      	bne.n	8001c64 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x654>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	e024      	b.n	8001c6e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65e>
 8001c24:	40020010 	.word	0x40020010
 8001c28:	40020028 	.word	0x40020028
 8001c2c:	40020040 	.word	0x40020040
 8001c30:	40020058 	.word	0x40020058
 8001c34:	40020070 	.word	0x40020070
 8001c38:	40020088 	.word	0x40020088
 8001c3c:	400200a0 	.word	0x400200a0
 8001c40:	400200b8 	.word	0x400200b8
 8001c44:	40020410 	.word	0x40020410
 8001c48:	40020428 	.word	0x40020428
 8001c4c:	40020440 	.word	0x40020440
 8001c50:	40020458 	.word	0x40020458
 8001c54:	40020470 	.word	0x40020470
 8001c58:	40020488 	.word	0x40020488
 8001c5c:	400204a0 	.word	0x400204a0
 8001c60:	400204b8 	.word	0x400204b8
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf14      	ite	ne
 8001c72:	2301      	movne	r3, #1
 8001c74:	2300      	moveq	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d062      	beq.n	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2220      	movs	r2, #32
 8001c86:	409a      	lsls	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d031      	beq.n	8001d06 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6f6>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0216 	bic.w	r2, r2, #22
 8001cb0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cc0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d103      	bne.n	8001cd2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6c2>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6d2>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0208 	bic.w	r2, r2, #8
 8001ce0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	223f      	movs	r2, #63	@ 0x3f
 8001cec:	409a      	lsls	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          interrupt = DMA_TRANSFER_COMPLETE;
 8001d02:	2302      	movs	r3, #2
 8001d04:	617b      	str	r3, [r7, #20]
        }

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00f      	beq.n	8001d3e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x72e>
        {
          /* Disable the transfer complete interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0210 	bic.w	r2, r2, #16
 8001d2c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }
        interrupt =  2;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return interrupt;
 8001d42:	697b      	ldr	r3, [r7, #20]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>:

int SPIComms::getActiveDMAmemory(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
    DMA_Stream_TypeDef *dmaStream = (DMA_Stream_TypeDef *)hdma->Instance;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60fb      	str	r3, [r7, #12]

    return (dmaStream->CR & DMA_SxCR_CT) ? 1 : 0;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x20>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x22>
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <_ZN8SPIComms18handleNssInterruptEv>:

void SPIComms::handleNssInterrupt()
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
	// SPI packet has been fully received
	// Flag the copy the RX buffer if new WRITE data has been received
	// DMA copy is performed during the servo thread update
	if (newWriteData)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3242 	ldrb.w	r3, [r3, #578]	@ 0x242
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <_ZN8SPIComms18handleNssInterruptEv+0x22>
	{
		copyRXbuffer = true;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
		newWriteData = false;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
	}
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_ZN8SPIComms17handleTxInterruptEv>:

void SPIComms::handleTxInterrupt()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	DMA_IRQHandler(&hdma_spi_tx);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	33d8      	adds	r3, #216	@ 0xd8
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fc28 	bl	8001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
	HAL_NVIC_EnableIRQ(irqDMAtx);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f00e f99b 	bl	8010102 <HAL_NVIC_EnableIRQ>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_ZN8SPIComms17handleRxInterruptEv>:

void SPIComms::handleRxInterrupt()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    // Handle the interrupt and determine the type of interrupt
    interruptType = DMA_IRQHandler(&hdma_spi_rx);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001de2:	4619      	mov	r1, r3
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fc13 	bl	8001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241

    RxDMAmemoryIdx = getActiveDMAmemory(&hdma_spi_rx);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ffa7 	bl	8001d50 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if (interruptType == DMA_HALF_TRANSFER) // Use the HTC interrupt to check the packet being received
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d12d      	bne.n	8001e72 <_ZN8SPIComms17handleRxInterruptEv+0x9e>
    {
        switch (ptrRxDMABuffer->buffer[RxDMAmemoryIdx].header)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e20:	019b      	lsls	r3, r3, #6
 8001e22:	4413      	add	r3, r2
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1c      	ldr	r2, [pc, #112]	@ (8001e98 <_ZN8SPIComms17handleRxInterruptEv+0xc4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d003      	beq.n	8001e34 <_ZN8SPIComms17handleRxInterruptEv+0x60>
 8001e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e9c <_ZN8SPIComms17handleRxInterruptEv+0xc8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <_ZN8SPIComms17handleRxInterruptEv+0x6e>
 8001e32:	e017      	b.n	8001e64 <_ZN8SPIComms17handleRxInterruptEv+0x90>
        {
            case Config::pruRead:
                // No action needed for PRU_READ.
            	dataCallback(true);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3318      	adds	r3, #24
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f8ca 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e40:	e01f      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            case Config::pruWrite:
            	// Valid PRU_WRITE header, flag RX data transfer.
            	dataCallback(true);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3318      	adds	r3, #24
 8001e46:	2101      	movs	r1, #1
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 f8c3 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
            	newWriteData = true;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
                RXbufferIdx = RxDMAmemoryIdx;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                break;
 8001e62:	e00e      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            default:
            	dataCallback(false);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3318      	adds	r3, #24
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f8b2 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e70:	e007      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>
        }
    }
    else if (interruptType == DMA_TRANSFER_COMPLETE) // Transfer complete interrupt
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d002      	beq.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>
    {
        // Placeholder for transfer complete handling if needed in the future.
    }
    else // Other interrupt sources
    {
        printf("DMA SPI Rx error\n");
 8001e7c:	4808      	ldr	r0, [pc, #32]	@ (8001ea0 <_ZN8SPIComms17handleRxInterruptEv+0xcc>)
 8001e7e:	f01b fa0d 	bl	801d29c <puts>
    }

    HAL_NVIC_EnableIRQ(irqDMArx);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f00e f93a 	bl	8010102 <HAL_NVIC_EnableIRQ>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	72656164 	.word	0x72656164
 8001e9c:	77726974 	.word	0x77726974
 8001ea0:	0801e004 	.word	0x0801e004

08001ea4 <_ZN8SPIComms5tasksEv>:

void SPIComms::tasks() {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

	if (copyRXbuffer == true)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d138      	bne.n	8001f28 <_ZN8SPIComms5tasksEv+0x84>
    {
	    uint8_t* srcBuffer = (uint8_t*)ptrRxDMABuffer->buffer[RXbufferIdx].rxBuffer;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001ec0:	019b      	lsls	r3, r3, #6
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
	    uint8_t* destBuffer = (uint8_t*)ptrRxData->rxBuffer;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop

	    __disable_irq();

	    dmaStatus = HAL_DMA_Start(
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f503 70e4 	add.w	r0, r3, #456	@ 0x1c8
 8001ed6:	68f9      	ldr	r1, [r7, #12]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	2340      	movs	r3, #64	@ 0x40
 8001edc:	f00e fd04 	bl	80108e8 <HAL_DMA_Start>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
									(uint32_t)srcBuffer,
									(uint32_t)destBuffer,
									Config::dataBuffSize
	    							);

	    if (dmaStatus == HAL_OK) {
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10d      	bne.n	8001f10 <_ZN8SPIComms5tasksEv+0x6c>
	        dmaStatus = HAL_DMA_PollForTransfer(&hdma_memtomem, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001efa:	f04f 32ff 	mov.w	r2, #4294967295
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f00f f92f 	bl	8011164 <HAL_DMA_PollForTransfer>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
  __ASM volatile ("cpsie i" : : : "memory");
 8001f10:	b662      	cpsie	i
}
 8001f12:	bf00      	nop
	    }

	    __enable_irq();
	    HAL_DMA_Abort(&hdma_memtomem);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f00e fe04 	bl	8010b28 <HAL_DMA_Abort>
		copyRXbuffer = false;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>:
private:
	DerivedModule* InterruptOwnerPtr;                                // Pointer to the owning module
	void (DerivedModule::*InterruptHandler)();                       // Member function pointer for the ISR
	
public:
    ModuleInterrupt(IRQn_Type interruptNumber, DerivedModule* ownerPtr, void (DerivedModule::*handler)())
 8001f30:	b082      	sub	sp, #8
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	817b      	strh	r3, [r7, #10]
        : InterruptOwnerPtr(ownerPtr), InterruptHandler(handler)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fa89 	bl	800245c <_ZN9InterruptC1Ev>
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f84 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE+0x54>)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3308      	adds	r3, #8
 8001f5a:	f107 021c 	add.w	r2, r7, #28
 8001f5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f62:	e883 0003 	stmia.w	r3, {r0, r1}
    {
        // Register the interrupt
        Interrupt::Register(interruptNumber, this);
 8001f66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fa84 	bl	800247c <_ZN9Interrupt8RegisterEiPS_>
    }
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f80:	b002      	add	sp, #8
 8001f82:	4770      	bx	lr
 8001f84:	0801e818 	.word	0x0801e818

08001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    { return __arr; }
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3340      	adds	r3, #64	@ 0x40
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>:
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(__first, __last, __value);
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f82d 	bl	8002026 <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>
    }
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_ZNKSt8functionIFvbEEclEb>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
      {
	if (_M_empty())
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fe73 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <_ZNKSt8functionIFvbEEclEb+0x1e>
	  __throw_bad_function_call();
 8001fee:	f01a fc76 	bl	801c8de <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68dc      	ldr	r4, [r3, #12]
 8001ff6:	687d      	ldr	r5, [r7, #4]
 8001ff8:	1cfb      	adds	r3, r7, #3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f808 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8002000:	4603      	mov	r3, r0
 8002002:	4619      	mov	r1, r3
 8002004:	4628      	mov	r0, r5
 8002006:	47a0      	blx	r4
 8002008:	bf00      	nop
      }
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bdb0      	pop	{r4, r5, r7, pc}

08002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f804 	bl	8002044 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8002056:	e006      	b.n	8002066 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x22>
	*__first = __tmp;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	701a      	strb	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3301      	adds	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	d1f4      	bne.n	8002058 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x14>
    }
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_Z41__static_initialization_and_destruction_0ii>:
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002092:	4293      	cmp	r3, r2
 8002094:	d102      	bne.n	800209c <_Z41__static_initialization_and_destruction_0ii+0x20>
__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;
 8002096:	4803      	ldr	r0, [pc, #12]	@ (80020a4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002098:	f7fe fe46 	bl	8000d28 <_ZN14DMA_RxBuffer_tC1Ev>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	30000000 	.word	0x30000000

080020a8 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv>:

    void ISR_Handler(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
        if (this->InterruptOwnerPtr && this->InterruptHandler) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d02a      	beq.n	800210e <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d107      	bne.n	80020d0 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x2a>
 80020d0:	2300      	movs	r3, #0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d01b      	beq.n	800210e <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
            (this->InterruptOwnerPtr->*InterruptHandler)(); // Call the member function of the owner
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d102      	bne.n	80020e8 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x40>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	e00a      	b.n	80020fe <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x56>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68d2      	ldr	r2, [r2, #12]
 80020f0:	1052      	asrs	r2, r2, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6892      	ldr	r2, [r2, #8]
 80020fa:	4413      	add	r3, r2
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6852      	ldr	r2, [r2, #4]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	68c9      	ldr	r1, [r1, #12]
 8002106:	1049      	asrs	r1, r1, #1
 8002108:	440a      	add	r2, r1
 800210a:	4610      	mov	r0, r2
 800210c:	4798      	blx	r3
        }
    }
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_GLOBAL__sub_I_rxDMABuffer>:
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
 800211a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800211e:	2001      	movs	r0, #1
 8002120:	f7ff ffac 	bl	800207c <_Z41__static_initialization_and_destruction_0ii>
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <_ZN14CommsInterfaceC1Ev>:
#include "commsInterface.h"

CommsInterface::CommsInterface() {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4618      	mov	r0, r3
 8002134:	f00b fc82 	bl	800da3c <_ZN6ModuleC1Ev>
 8002138:	4a06      	ldr	r2, [pc, #24]	@ (8002154 <_ZN14CommsInterfaceC1Ev+0x2c>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3318      	adds	r3, #24
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f839 	bl	80021ba <_ZNSt8functionIFvbEEC1Ev>
    // Constructor implementation
}
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	0801e854 	.word	0x0801e854

08002158 <_ZN14CommsInterface4initEv>:

void CommsInterface::init(){}
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_ZN14CommsInterface5startEv>:
void CommsInterface::start(){}
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_ZN14CommsInterface5tasksEv>:
void CommsInterface::tasks(){}
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	461a      	mov	r2, r3
 80021a0:	2300      	movs	r3, #0
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	6053      	str	r3, [r2, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_ZNSt8functionIFvbEEC1Ev>:
      function() noexcept
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	461a      	mov	r2, r3
 80021c6:	2300      	movs	r3, #0
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	6053      	str	r3, [r2, #4]
 80021cc:	6093      	str	r3, [r2, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ffdf 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	60da      	str	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>:
#include <cstdio>
#include <cerrno>
#include <string>


Pin::Pin(std::string portAndPin, int dir) :
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
    portAndPin(portAndPin),
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f01a fcfd 	bl	801cbf6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    dir(dir)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	761a      	strb	r2, [r3, #24]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3330      	adds	r3, #48	@ 0x30
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
{
    // Set direction
    if (this->dir == INPUT)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	7e1b      	ldrb	r3, [r3, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d106      	bne.n	800222a <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x44>
    {
        this->mode = GPIO_MODE_INPUT;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	625a      	str	r2, [r3, #36]	@ 0x24
 8002228:	e005      	b.n	8002236 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x50>
    }
    else
    {
        this->mode = GPIO_MODE_OUTPUT_PP;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    this->configPin();
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f806 	bl	8002248 <_ZN3Pin9configPinEv>
}
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <_ZN3Pin9configPinEv>:

    this->configPin();
}

void Pin::configPin()
{
 8002248:	b5b0      	push	{r4, r5, r7, lr}
 800224a:	b08e      	sub	sp, #56	@ 0x38
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
    printf("Creating Pin @\n");
 8002250:	4868      	ldr	r0, [pc, #416]	@ (80023f4 <_ZN3Pin9configPinEv+0x1ac>)
 8002252:	f01b f823 	bl	801d29c <puts>

    //x can be (A..H) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
    GPIO_TypeDef* gpios[5] ={GPIOA,GPIOB,GPIOC,GPIOD,GPIOE};
 8002256:	4b68      	ldr	r3, [pc, #416]	@ (80023f8 <_ZN3Pin9configPinEv+0x1b0>)
 8002258:	f107 0420 	add.w	r4, r7, #32
 800225c:	461d      	mov	r5, r3
 800225e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002262:	682b      	ldr	r3, [r5, #0]
 8002264:	6023      	str	r3, [r4, #0]
    

    if (this->portAndPin[0] == 'P') // PXXX e.g.PA_2 PC_15
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f01a fc59 	bl	801cb22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8002270:	4603      	mov	r3, r0
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b50      	cmp	r3, #80	@ 0x50
 8002276:	bf0c      	ite	eq
 8002278:	2301      	moveq	r3, #1
 800227a:	2300      	movne	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d05e      	beq.n	8002340 <_ZN3Pin9configPinEv+0xf8>
    {  
        this->portIndex     = this->portAndPin[1] - 'A';
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2101      	movs	r1, #1
 8002286:	4618      	mov	r0, r3
 8002288:	f01a fc4b 	bl	801cb22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800228c:	4603      	mov	r3, r0
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	3b41      	subs	r3, #65	@ 0x41
 8002292:	b2da      	uxtb	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	769a      	strb	r2, [r3, #26]
        this->pinNumber     = this->portAndPin[3] - '0';       
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2103      	movs	r1, #3
 800229c:	4618      	mov	r0, r3
 800229e:	f01a fc40 	bl	801cb22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80022a2:	4603      	mov	r3, r0
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	3b30      	subs	r3, #48	@ 0x30
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	839a      	strh	r2, [r3, #28]
        uint16_t pin2       = this->portAndPin[4] - '0';       
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2104      	movs	r1, #4
 80022b2:	4618      	mov	r0, r3
 80022b4:	f01a fc35 	bl	801cb22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80022b8:	4603      	mov	r3, r0
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	3b30      	subs	r3, #48	@ 0x30
 80022be:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if (pin2 <= 8) 
 80022c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d80b      	bhi.n	80022de <_ZN3Pin9configPinEv+0x96>
        {
            this->pinNumber = this->pinNumber * 10 + pin2;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	8b9b      	ldrh	r3, [r3, #28]
 80022ca:	461a      	mov	r2, r3
 80022cc:	0092      	lsls	r2, r2, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80022d6:	4413      	add	r3, r2
 80022d8:	b29a      	uxth	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	839a      	strh	r2, [r3, #28]
        }

        this->pin = 1 << this->pinNumber; // this is equivalent to GPIO_PIN_x definition
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	8b9b      	ldrh	r3, [r3, #28]
 80022e2:	461a      	mov	r2, r3
 80022e4:	2301      	movs	r3, #1
 80022e6:	4093      	lsls	r3, r2
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	83da      	strh	r2, [r3, #30]
    {
        printf("  Invalid port and pin definition\n");
        return;
    }    

    printf("  port = GPIO%c\n", char('A' + this->portIndex));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7e9b      	ldrb	r3, [r3, #26]
 80022f2:	3341      	adds	r3, #65	@ 0x41
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	4619      	mov	r1, r3
 80022f8:	4840      	ldr	r0, [pc, #256]	@ (80023fc <_ZN3Pin9configPinEv+0x1b4>)
 80022fa:	f01a ff5f 	bl	801d1bc <iprintf>
    printf("  pin = %d\n", this->pinNumber);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	8b9b      	ldrh	r3, [r3, #28]
 8002302:	4619      	mov	r1, r3
 8002304:	483e      	ldr	r0, [pc, #248]	@ (8002400 <_ZN3Pin9configPinEv+0x1b8>)
 8002306:	f01a ff59 	bl	801d1bc <iprintf>

    // translate port index into something useful
    this->GPIOx = gpios[this->portIndex];
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7e9b      	ldrb	r3, [r3, #26]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	3338      	adds	r3, #56	@ 0x38
 8002312:	443b      	add	r3, r7
 8002314:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	62da      	str	r2, [r3, #44]	@ 0x2c

    // enable the peripheral clock
    switch (portIndex){
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7e9b      	ldrb	r3, [r3, #26]
 8002320:	2b04      	cmp	r3, #4
 8002322:	d861      	bhi.n	80023e8 <_ZN3Pin9configPinEv+0x1a0>
 8002324:	a201      	add	r2, pc, #4	@ (adr r2, 800232c <_ZN3Pin9configPinEv+0xe4>)
 8002326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232a:	bf00      	nop
 800232c:	08002349 	.word	0x08002349
 8002330:	08002369 	.word	0x08002369
 8002334:	08002389 	.word	0x08002389
 8002338:	080023a9 	.word	0x080023a9
 800233c:	080023c9 	.word	0x080023c9
        printf("  Invalid port and pin definition\n");
 8002340:	4830      	ldr	r0, [pc, #192]	@ (8002404 <_ZN3Pin9configPinEv+0x1bc>)
 8002342:	f01a ffab 	bl	801d29c <puts>
 8002346:	e052      	b.n	80023ee <_ZN3Pin9configPinEv+0x1a6>
        case 0:
            __HAL_RCC_GPIOA_CLK_ENABLE();
 8002348:	4b2f      	ldr	r3, [pc, #188]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 800234a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800234e:	4a2e      	ldr	r2, [pc, #184]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002358:	4b2b      	ldr	r3, [pc, #172]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 800235a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	61fb      	str	r3, [r7, #28]
 8002364:	69fb      	ldr	r3, [r7, #28]
            break;
 8002366:	e03f      	b.n	80023e8 <_ZN3Pin9configPinEv+0x1a0>

        case 1:
            __HAL_RCC_GPIOB_CLK_ENABLE();
 8002368:	4b27      	ldr	r3, [pc, #156]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 800236a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800236e:	4a26      	ldr	r2, [pc, #152]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 8002370:	f043 0302 	orr.w	r3, r3, #2
 8002374:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002378:	4b23      	ldr	r3, [pc, #140]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 800237a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	69bb      	ldr	r3, [r7, #24]
            break;
 8002386:	e02f      	b.n	80023e8 <_ZN3Pin9configPinEv+0x1a0>

        case 2:
            __HAL_RCC_GPIOC_CLK_ENABLE();
 8002388:	4b1f      	ldr	r3, [pc, #124]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 800238a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800238e:	4a1e      	ldr	r2, [pc, #120]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002398:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 800239a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	697b      	ldr	r3, [r7, #20]
            break;
 80023a6:	e01f      	b.n	80023e8 <_ZN3Pin9configPinEv+0x1a0>
        
        case 3:
            __HAL_RCC_GPIOD_CLK_ENABLE();
 80023a8:	4b17      	ldr	r3, [pc, #92]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 80023aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ae:	4a16      	ldr	r2, [pc, #88]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023b8:	4b13      	ldr	r3, [pc, #76]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 80023ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]
            break;
 80023c6:	e00f      	b.n	80023e8 <_ZN3Pin9configPinEv+0x1a0>

        case 4:
            __HAL_RCC_GPIOE_CLK_ENABLE();
 80023c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 80023ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 80023d0:	f043 0310 	orr.w	r3, r3, #16
 80023d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <_ZN3Pin9configPinEv+0x1c0>)
 80023da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
            break;
 80023e6:	bf00      	nop
    }

    this->initPin();
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f80f 	bl	800240c <_ZN3Pin7initPinEv>
}
 80023ee:	3738      	adds	r7, #56	@ 0x38
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bdb0      	pop	{r4, r5, r7, pc}
 80023f4:	0801e06c 	.word	0x0801e06c
 80023f8:	0801e0c0 	.word	0x0801e0c0
 80023fc:	0801e0a0 	.word	0x0801e0a0
 8002400:	0801e0b4 	.word	0x0801e0b4
 8002404:	0801e07c 	.word	0x0801e07c
 8002408:	58024400 	.word	0x58024400

0800240c <_ZN3Pin7initPinEv>:


void Pin::initPin()
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
    // Configure GPIO pin Output Level
    HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	8bdb      	ldrh	r3, [r3, #30]
 800241c:	2200      	movs	r2, #0
 800241e:	4619      	mov	r1, r3
 8002420:	f010 fbf6 	bl	8012c10 <HAL_GPIO_WritePin>

    // Configure the GPIO pin
    this->GPIO_InitStruct.Pin = this->pin;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	8bdb      	ldrh	r3, [r3, #30]
 8002428:	461a      	mov	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	631a      	str	r2, [r3, #48]	@ 0x30
    this->GPIO_InitStruct.Mode = this->mode;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1a      	ldr	r2, [r3, #32]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	635a      	str	r2, [r3, #52]	@ 0x34
    this->GPIO_InitStruct.Pull = this->pull;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	639a      	str	r2, [r3, #56]	@ 0x38
    this->GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2202      	movs	r2, #2
 8002442:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(this->GPIOx, &this->GPIO_InitStruct);  
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3330      	adds	r3, #48	@ 0x30
 800244c:	4619      	mov	r1, r3
 800244e:	4610      	mov	r0, r2
 8002450:	f010 fa2e 	bl	80128b0 <HAL_GPIO_Init>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	4a04      	ldr	r2, [pc, #16]	@ (8002478 <_ZN9InterruptC1Ev+0x1c>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	0801e884 	.word	0x0801e884

0800247c <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4805      	ldr	r0, [pc, #20]	@ (80024a0 <_ZN9Interrupt8RegisterEiPS_+0x24>)
 800248a:	f01a fe97 	bl	801d1bc <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 800248e:	4905      	ldr	r1, [pc, #20]	@ (80024a4 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	0801e0d4 	.word	0x0801e0d4
 80024a4:	240000a4 	.word	0x240000a4

080024a8 <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 80024ac:	4b04      	ldr	r3, [pc, #16]	@ (80024c0 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 80024ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a02      	ldr	r2, [pc, #8]	@ (80024c0 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 80024b6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80024b8:	4610      	mov	r0, r2
 80024ba:	4798      	blx	r3
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	240000a4 	.word	0x240000a4

080024c4 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>:

void Interrupt::DMA1_Stream0_Wrapper(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream0_IRQn]->ISR_Handler();
 80024c8:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 80024ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a02      	ldr	r2, [pc, #8]	@ (80024dc <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 80024d2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024d4:	4610      	mov	r0, r2
 80024d6:	4798      	blx	r3
}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	240000a4 	.word	0x240000a4

080024e0 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>:

void Interrupt::DMA1_Stream1_Wrapper(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream1_IRQn]->ISR_Handler();
 80024e4:	4b04      	ldr	r3, [pc, #16]	@ (80024f8 <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a02      	ldr	r2, [pc, #8]	@ (80024f8 <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 80024ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024f0:	4610      	mov	r0, r2
 80024f2:	4798      	blx	r3
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	240000a4 	.word	0x240000a4

080024fc <_ZN9Interrupt12TIM2_WrapperEv>:


void Interrupt::TIM2_Wrapper(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM2_IRQn]->ISR_Handler();
 8002500:	4b04      	ldr	r3, [pc, #16]	@ (8002514 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a02      	ldr	r2, [pc, #8]	@ (8002514 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 800250a:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 800250c:	4610      	mov	r0, r2
 800250e:	4798      	blx	r3
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	240000a4 	.word	0x240000a4

08002518 <_ZN9Interrupt12TIM3_WrapperEv>:

void Interrupt::TIM3_Wrapper(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM3_IRQn]->ISR_Handler();
 800251c:	4b04      	ldr	r3, [pc, #16]	@ (8002530 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 800251e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a02      	ldr	r2, [pc, #8]	@ (8002530 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8002526:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002528:	4610      	mov	r0, r2
 800252a:	4798      	blx	r3
}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}
 8002530:	240000a4 	.word	0x240000a4

08002534 <_ZN9Interrupt12TIM4_WrapperEv>:

void Interrupt::TIM4_Wrapper(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM4_IRQn]->ISR_Handler();
 8002538:	4b04      	ldr	r3, [pc, #16]	@ (800254c <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 800253a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a02      	ldr	r2, [pc, #8]	@ (800254c <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8002542:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8002544:	4610      	mov	r0, r2
 8002546:	4798      	blx	r3
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	240000a4 	.word	0x240000a4

08002550 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8002554:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
 8002568:	f7ff fff2 	bl	8002550 <_ZSt23__is_constant_evaluatedv>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d004      	beq.n	800257c <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f002 f948 	bl	8004808 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 8002578:	4603      	mov	r3, r0
 800257a:	e004      	b.n	8002586 <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7fd ff0f 	bl	80003a0 <strlen>
 8002582:	4603      	mov	r3, r0
 8002584:	bf00      	nop
      }
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8allocateEj>:
};

namespace detail {
class DefaultAllocator : public Allocator {
 public:
  void* allocate(size_t size) override {
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
    return malloc(size);
 8002598:	6838      	ldr	r0, [r7, #0]
 800259a:	f01a fc59 	bl	801ce50 <malloc>
 800259e:	4603      	mov	r3, r0
  }
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10deallocateEPv>:

  void deallocate(void* ptr) override {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
    free(ptr);
 80025b2:	6838      	ldr	r0, [r7, #0]
 80025b4:	f01a fc54 	bl	801ce60 <free>
  }
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10reallocateEPvj>:

  void* reallocate(void* ptr, size_t new_size) override {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
    return realloc(ptr, new_size);
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	68b8      	ldr	r0, [r7, #8]
 80025d0:	f01a fcfc 	bl	801cfcc <realloc>
 80025d4:	4603      	mov	r3, r0
  }
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>:

  static Allocator* instance() {
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
    static DefaultAllocator allocator;
    return &allocator;
 80025e4:	4b02      	ldr	r3, [pc, #8]	@ (80025f0 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv+0x10>)
  }
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	24000000 	.word	0x24000000

080025f4 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>:
  length_type length;
  char data[1];

  static constexpr size_t maxLength = numeric_limits<length_type>::highest();

  static constexpr size_t sizeForLength(size_t n) {
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
    return n + 1 + offsetof(StringNode, data);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3309      	adds	r3, #9
  }
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>:

  static StringNode* create(size_t length, Allocator* allocator) {
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
    if (length > maxLength)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800261c:	d301      	bcc.n	8002622 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x16>
      return nullptr;
 800261e:	2300      	movs	r3, #0
 8002620:	e01b      	b.n	800265a <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto size = sizeForLength(length);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ffe6 	bl	80025f4 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 8002628:	60f8      	str	r0, [r7, #12]
    if (size < length)  // integer overflow
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	429a      	cmp	r2, r3
 8002630:	d201      	bcs.n	8002636 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x2a>
      return nullptr;   // (not testable on 64-bit)
 8002632:	2300      	movs	r3, #0
 8002634:	e011      	b.n	800265a <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto node = reinterpret_cast<StringNode*>(allocator->allocate(size));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68f9      	ldr	r1, [r7, #12]
 800263e:	6838      	ldr	r0, [r7, #0]
 8002640:	4798      	blx	r3
 8002642:	60b8      	str	r0, [r7, #8]
    if (node) {
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d006      	beq.n	8002658 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4c>
      node->length = length_type(length);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	b29a      	uxth	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	80da      	strh	r2, [r3, #6]
      node->references = 1;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2201      	movs	r2, #1
 8002656:	809a      	strh	r2, [r3, #4]
    }
    return node;
 8002658:	68bb      	ldr	r3, [r7, #8]
  }
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>:

  static StringNode* resize(StringNode* node, size_t length,
 8002662:	b5b0      	push	{r4, r5, r7, lr}
 8002664:	b086      	sub	sp, #24
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
                            Allocator* allocator) {
    ARDUINOJSON_ASSERT(node != nullptr);
    StringNode* newNode;
    if (length <= maxLength)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002674:	d20e      	bcs.n	8002694 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x32>
      newNode = reinterpret_cast<StringNode*>(
          allocator->reallocate(node, sizeForLength(length)));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3308      	adds	r3, #8
 800267c:	681c      	ldr	r4, [r3, #0]
 800267e:	687d      	ldr	r5, [r7, #4]
 8002680:	68b8      	ldr	r0, [r7, #8]
 8002682:	f7ff ffb7 	bl	80025f4 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 8002686:	4603      	mov	r3, r0
 8002688:	461a      	mov	r2, r3
 800268a:	68f9      	ldr	r1, [r7, #12]
 800268c:	4628      	mov	r0, r5
 800268e:	47a0      	blx	r4
 8002690:	6178      	str	r0, [r7, #20]
 8002692:	e001      	b.n	8002698 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x36>
    else
      newNode = nullptr;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
    if (newNode)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d004      	beq.n	80026a8 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x46>
      newNode->length = length_type(length);
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	80da      	strh	r2, [r3, #6]
 80026a6:	e006      	b.n	80026b6 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x54>
    else
      allocator->deallocate(node);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	3304      	adds	r3, #4
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68f9      	ldr	r1, [r7, #12]
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	4798      	blx	r3
    return newNode;
 80026b6:	697b      	ldr	r3, [r7, #20]
  }
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bdb0      	pop	{r4, r5, r7, pc}

080026c0 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>:

  static void destroy(StringNode* node, Allocator* allocator) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
    allocator->deallocate(node);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	3304      	adds	r3, #4
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	6838      	ldr	r0, [r7, #0]
 80026d6:	4798      	blx	r3
  }
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>:
  RamString(const char* str, size_t sz, bool isStatic = false)
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	70fb      	strb	r3, [r7, #3]
      : str_(str), size_(sz & sizeMask), static_(isStatic) {
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	721a      	strb	r2, [r3, #8]
  }
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>:
  bool isNull() const {
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
    return !str_;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf0c      	ite	eq
 800271e:	2301      	moveq	r3, #1
 8002720:	2300      	movne	r3, #0
 8002722:	b2db      	uxtb	r3, r3
  }
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>:
  size_t size() const {
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
    return size_;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
  }
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>:

  const char* data() const {
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
    return str_;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
  }
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>:

  friend void swap(StringPool& a, StringPool& b) {
    swap_(a.strings_, b.strings_);
  }

  void clear(Allocator* allocator) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
    while (strings_) {
 800276a:	e00a      	b.n	8002782 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0x22>
      auto node = strings_;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
      strings_ = node->next;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	601a      	str	r2, [r3, #0]
      StringNode::destroy(node, allocator);
 800277a:	6839      	ldr	r1, [r7, #0]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7ff ff9f 	bl	80026c0 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
    while (strings_) {
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0xc>
    }
  }
 800278a:	bf00      	nop
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>:
    node->data[n] = 0;  // force NUL terminator
    add(node);
    return node;
  }

  void add(StringNode* node) {
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node != nullptr);
    node->next = strings_;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	601a      	str	r2, [r3, #0]
    strings_ = node;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	601a      	str	r2, [r3, #0]
  }
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>:
        return node;
    }
    return nullptr;
  }

  void dereference(const char* s, Allocator* allocator) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
    StringNode* prev = nullptr;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	e029      	b.n	8002824 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x6c>
      if (node->data == s) {
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	3308      	adds	r3, #8
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d11f      	bne.n	800281a <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x62>
        if (--node->references == 0) {
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	889b      	ldrh	r3, [r3, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	809a      	strh	r2, [r3, #4]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	889b      	ldrh	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bf0c      	ite	eq
 80027ee:	2301      	moveq	r3, #1
 80027f0:	2300      	movne	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d019      	beq.n	800282c <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
          if (prev)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d004      	beq.n	8002808 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x50>
            prev->next = node->next;
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	e003      	b.n	8002810 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x58>
          else
            strings_ = node->next;
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	601a      	str	r2, [r3, #0]
          StringNode::destroy(node, allocator);
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	6938      	ldr	r0, [r7, #16]
 8002814:	f7ff ff54 	bl	80026c0 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
        }
        return;
 8002818:	e008      	b.n	800282c <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
      }
      prev = node;
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1d2      	bne.n	80027d0 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x18>
 800282a:	e000      	b.n	800282e <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x76>
        return;
 800282c:	bf00      	nop
    }
  }
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>:
// https://arduinojson.org/v7/api/jsonstring/
class JsonString {
  friend struct detail::StringAdapter<JsonString>;

 public:
  JsonString() : str_(nullptr, 0, true) {}
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	2301      	movs	r3, #1
 8002840:	2200      	movs	r2, #0
 8002842:	2100      	movs	r1, #0
 8002844:	f7ff ff4c 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>:

  JsonString(const char* data, bool isStatic = false)
 8002852:	b590      	push	{r4, r7, lr}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	4613      	mov	r3, r2
 800285e:	71fb      	strb	r3, [r7, #7]
      : str_(data, data ? ::strlen(data) : 0, isStatic) {}
 8002860:	68fc      	ldr	r4, [r7, #12]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d004      	beq.n	8002872 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x20>
 8002868:	68b8      	ldr	r0, [r7, #8]
 800286a:	f7fd fd99 	bl	80003a0 <strlen>
 800286e:	4602      	mov	r2, r0
 8002870:	e000      	b.n	8002874 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x22>
 8002872:	2200      	movs	r2, #0
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	4620      	mov	r0, r4
 800287a:	f7ff ff31 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4618      	mov	r0, r3
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	bd90      	pop	{r4, r7, pc}

08002888 <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>:
                                int> = 0>
  JsonString(const char* data, TSize sz, bool isStatic = false)
      : str_(data, size_t(sz), isStatic) {}

  // Returns a pointer to the characters.
  const char* c_str() const {
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
    return str_.data();
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ff58 	bl	8002748 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 8002898:	4603      	mov	r3, r0
  }
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>:
namespace detail {
template <>
struct StringAdapter<JsonString> {
  using AdaptedString = RamString;

  static const AdaptedString& adapt(const JsonString& s) {
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
    return s.str_;
 80028aa:	687b      	ldr	r3, [r7, #4]
  }
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>:

class CollectionIterator {
  friend class CollectionData;

 public:
  CollectionIterator() : slot_(nullptr), currentId_(NULL_SLOT) {}
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028cc:	809a      	strh	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>:

  void next(const ResourceManager* resources);

  bool done() const {
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
    return slot_ == nullptr;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
  }
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>:

  bool operator==(const CollectionIterator& other) const {
    return slot_ == other.slot_;
  }

  bool operator!=(const CollectionIterator& other) const {
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
    return slot_ != other.slot_;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	bf14      	ite	ne
 8002914:	2301      	movne	r3, #1
 8002916:	2300      	moveq	r3, #0
 8002918:	b2db      	uxtb	r3, r3
  }
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>:

  VariantData* operator->() {
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return data();
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f805 	bl	800293e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8002934:	4603      	mov	r3, r0
  }
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>:
  const VariantData& operator*() const {
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return *data();
  }

  VariantData* data() {
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(slot_);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
  }
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>:
  SlotId head_ = NULL_SLOT;
  SlotId tail_ = NULL_SLOT;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
    return p;
 8002960:	683b      	ldr	r3, [r7, #0]
  }
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>:
    const CollectionData* collection) {
  const void* data = collection;  // prevent warning cast-align
  return reinterpret_cast<const VariantData*>(data);
}

inline VariantData* collectionToVariant(CollectionData* collection) {
 800296e:	b480      	push	{r7}
 8002970:	b085      	sub	sp, #20
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  void* data = collection;  // prevent warning cast-align
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	60fb      	str	r3, [r7, #12]
  return reinterpret_cast<VariantData*>(data);
 800297a:	68fb      	ldr	r3, [r7, #12]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>:
#endif
  Object = 0x20,
  Array = 0x40,
};

inline bool operator&(VariantType type, VariantTypeBits bit) {
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	460a      	mov	r2, r1
 8002992:	71fb      	strb	r3, [r7, #7]
 8002994:	4613      	mov	r3, r2
 8002996:	71bb      	strb	r3, [r7, #6]
  return (uint8_t(type) & uint8_t(bit)) != 0;
 8002998:	79fa      	ldrb	r2, [r7, #7]
 800299a:	79bb      	ldrb	r3, [r7, #6]
 800299c:	4013      	ands	r3, r2
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>:

union VariantContent {
  VariantContent() {}
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>:
  VariantType type_;
  SlotId next_;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
    return p;
 80029d6:	683b      	ldr	r3, [r7, #0]
  }
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>:

  static void operator delete(void*, void*) noexcept {}

  VariantData() : type_(VariantType::Null), next_(NULL_SLOT) {}
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff ffe1 	bl	80029b6 <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	711a      	strb	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a00:	80da      	strh	r2, [r3, #6]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>:

  SlotId next() const {
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
    return next_;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	88db      	ldrh	r3, [r3, #6]
  }
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>:

  void setNext(SlotId slot) {
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]
    next_ = slot;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	80da      	strh	r2, [r3, #6]
  }
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
      default:
        return true;
    }
  }

  ArrayData* asArray() {
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
    return isArray() ? &content_.asArray : 0;
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f85f 	bl	8002b0e <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x18>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	e000      	b.n	8002a5c <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x1a>
 8002a5a:	2300      	movs	r3, #0
  }
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>:

  const ArrayData* asArray() const {
    return const_cast<VariantData*>(this)->asArray();
  }

  CollectionData* asCollection() {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
    return isCollection() ? &content_.asCollection : 0;
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f85f 	bl	8002b30 <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x18>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	e000      	b.n	8002a7e <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x1a>
 8002a7c:	2300      	movs	r3, #0
  }
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:
      default:
        return 0;
    }
  }

  ObjectData* asObject() {
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
    return isObject() ? &content_.asObject : 0;
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f86c 	bl	8002b6c <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x18>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	e000      	b.n	8002aa0 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x1a>
 8002a9e:	2300      	movs	r3, #0
  }
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:

  const ObjectData* asObject() const {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asObject();
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff ffe8 	bl	8002a86 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8002ab6:	4603      	mov	r3, r0
  }
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>:
      default:
        return JsonString();
    }
  }

  JsonString asString() const {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
    switch (type_) {
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	791b      	ldrb	r3, [r3, #4]
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d002      	beq.n	8002ad8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x18>
 8002ad2:	2b05      	cmp	r3, #5
 8002ad4:	d008      	beq.n	8002ae8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x28>
 8002ad6:	e013      	b.n	8002b00 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x40>
      case VariantType::LinkedString:
        return JsonString(content_.asLinkedString, true);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2201      	movs	r2, #1
 8002ade:	4619      	mov	r1, r3
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff feb6 	bl	8002852 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>
 8002ae6:	e00e      	b.n	8002b06 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      case VariantType::OwnedString:
        return JsonString(content_.asOwnedString->data,
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f103 0108 	add.w	r1, r3, #8
                          content_.asOwnedString->length);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	88da      	ldrh	r2, [r3, #6]
 8002af6:	2300      	movs	r3, #0
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f001 fea5 	bl	8004848 <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>
 8002afe:	e002      	b.n	8002b06 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      default:
        return JsonString();
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff fe97 	bl	8002834 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>
    }
  }
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>:
    if (!obj)
      return nullptr;
    return obj->getOrAddMember(key, resources);
  }

  bool isArray() const {
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Array;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	791b      	ldrb	r3, [r3, #4]
 8002b1a:	2b40      	cmp	r3, #64	@ 0x40
 8002b1c:	bf0c      	ite	eq
 8002b1e:	2301      	moveq	r3, #1
 8002b20:	2300      	movne	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
  }
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>:

  bool isBoolean() const {
    return type_ == VariantType::Boolean;
  }

  bool isCollection() const {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::CollectionMask;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	791b      	ldrb	r3, [r3, #4]
 8002b3c:	2160      	movs	r1, #96	@ 0x60
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff ff22 	bl	8002988 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8002b44:	4603      	mov	r3, r0
  }
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>:

  bool isFloat() const {
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::NumberBit;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	791b      	ldrb	r3, [r3, #4]
 8002b5a:	2108      	movs	r1, #8
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff13 	bl	8002988 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8002b62:	4603      	mov	r3, r0
  }
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>:
    if (!var)
      return true;
    return var->isNull();
  }

  bool isObject() const {
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Object;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	791b      	ldrb	r3, [r3, #4]
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
  }
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>:
    if (!var)
      return;
    var->removeMember(key, resources);
  }

  void reset() {  // TODO: remove
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
    type_ = VariantType::Null;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	711a      	strb	r2, [r3, #4]
  }
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>:

  void setBoolean(bool value) {
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	70fb      	strb	r3, [r7, #3]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Boolean;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2206      	movs	r2, #6
 8002bb8:	711a      	strb	r2, [r3, #4]
    content_.asBoolean = value;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	701a      	strb	r2, [r3, #0]
  }
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>:
  }

  template <typename TAdaptedString>
  bool setString(TAdaptedString value, ResourceManager* resources);

  bool setString(StringNode* s, ResourceManager*) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
    setOwnedString(s);
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f805 	bl	8002bea <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 8002be0:	2301      	movs	r3, #1
  }
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>:
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::LinkedString;
    content_.asLinkedString = s;
  }

  void setOwnedString(StringNode* s) {
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::OwnedString;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2205      	movs	r2, #5
 8002bf8:	711a      	strb	r2, [r3, #4]
    content_.asOwnedString = s;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	601a      	str	r2, [r3, #0]
  }
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>:
class CollectionData {
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c1a:	801a      	strh	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c22:	805a      	strh	r2, [r3, #2]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ArrayData : public CollectionData {
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ffe5 	bl	8002c0c <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>:

  static size_t size(const VariantData* var, const ResourceManager* resources) {
    return var != 0 ? var->size(resources) : 0;
  }

  ArrayData& toArray() {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Array;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2240      	movs	r2, #64	@ 0x40
 8002c58:	711a      	strb	r2, [r3, #4]
    new (&content_.asArray) ArrayData();
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	2004      	movs	r0, #4
 8002c60:	f7ff fe79 	bl	8002956 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d006      	beq.n	8002c78 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv+0x2c>
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	801a      	strh	r2, [r3, #0]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	805a      	strh	r2, [r3, #2]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff ffdd 	bl	8002c32 <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>
    return content_.asArray;
 8002c78:	687b      	ldr	r3, [r7, #4]
  }
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ObjectData : public CollectionData {
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ffbd 	bl	8002c0c <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>:
      return 0;
    var->clear(resources);
    return &var->toArray();
  }

  ObjectData& toObject() {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Object;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	711a      	strb	r2, [r3, #4]
    new (&content_.asObject) ObjectData();
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4619      	mov	r1, r3
 8002cae:	2004      	movs	r0, #4
 8002cb0:	f7ff fe51 	bl	8002956 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d006      	beq.n	8002cc8 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv+0x2c>
 8002cba:	2200      	movs	r2, #0
 8002cbc:	801a      	strh	r2, [r3, #0]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	805a      	strh	r2, [r3, #2]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff ffdd 	bl	8002c82 <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>
    return content_.asObject;
 8002cc8:	687b      	ldr	r3, [r7, #4]
  }
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>:
  StringPool() = default;
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>:
  static_assert(sizeof(FreeSlot) <= sizeof(T), "T is too small");

 public:
  using Pool = MemoryPool<T>;

  MemoryPoolList() = default;
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	621a      	str	r2, [r3, #32]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	849a      	strh	r2, [r3, #36]	@ 0x24
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2204      	movs	r2, #4
 8002d06:	84da      	strh	r2, [r3, #38]	@ 0x26
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>:
  };

 public:
  constexpr static size_t slotSize = sizeof(SlotData);

  ResourceManager(Allocator* allocator = DefaultAllocator::instance())
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
      : allocator_(allocator), overflowed_(false) {}
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	711a      	strb	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3308      	adds	r3, #8
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ffca 	bl	8002cd2 <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	330c      	adds	r3, #12
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff ffd3 	bl	8002cee <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>:
      overflowed_ = true;

    return node;
  }

  void saveString(StringNode* node) {
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
    stringPool_.add(node);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3308      	adds	r3, #8
 8002d60:	6839      	ldr	r1, [r7, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fd16 	bl	8002794 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
  }
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>:
  template <typename TAdaptedString>
  StringNode* getString(const TAdaptedString& str) const {
    return stringPool_.get(str);
  }

  StringNode* createString(size_t length) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
    auto node = StringNode::create(length, allocator_);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	6838      	ldr	r0, [r7, #0]
 8002d82:	f7ff fc43 	bl	800260c <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 8002d86:	60f8      	str	r0, [r7, #12]
    if (!node)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d102      	bne.n	8002d94 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj+0x24>
      overflowed_ = true;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	711a      	strb	r2, [r3, #4]
    return node;
 8002d94:	68fb      	ldr	r3, [r7, #12]
  }
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>:

  StringNode* resizeString(StringNode* node, size_t length) {
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
    node = StringNode::resize(node, length, allocator_);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	68b8      	ldr	r0, [r7, #8]
 8002db4:	f7ff fc55 	bl	8002662 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>
 8002db8:	60b8      	str	r0, [r7, #8]
    if (!node)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d102      	bne.n	8002dc6 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj+0x28>
      overflowed_ = true;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	711a      	strb	r2, [r3, #4]
    return node;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
  }
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>:

  void destroyString(StringNode* node) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
    StringNode::destroy(node, allocator_);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4619      	mov	r1, r3
 8002de0:	6838      	ldr	r0, [r7, #0]
 8002de2:	f7ff fc6d 	bl	80026c0 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
  }
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>:

  void dereferenceString(const char* s) {
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
    stringPool_.dereference(s, allocator_);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f103 0008 	add.w	r0, r3, #8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	6839      	ldr	r1, [r7, #0]
 8002e06:	f7ff fcd7 	bl	80027b8 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>
  }
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>:

  void clear() {
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
    variantPools_.clear(allocator_);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f103 020c 	add.w	r2, r3, #12
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4619      	mov	r1, r3
 8002e26:	4610      	mov	r0, r2
 8002e28:	f001 fd24 	bl	8004874 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
    overflowed_ = false;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	711a      	strb	r2, [r3, #4]
    stringPool_.clear(allocator_);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f103 0208 	add.w	r2, r3, #8
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4610      	mov	r0, r2
 8002e40:	f7ff fc8e 	bl	8002760 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
  }
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>:

  void shrinkToFit() {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
    variantPools_.shrinkToFit(allocator_);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f103 020c 	add.w	r2, r3, #12
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4610      	mov	r0, r2
 8002e62:	f001 fd3f 	bl	80048e4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
  }
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariantConst() : data_(nullptr), resources_(nullptr) {}

  // INTERNAL USE ONLY
  explicit JsonVariantConst(const detail::VariantData* data,
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
                            const detail::ResourceManager* resources)
      : data_(data), resources_(resources) {}
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>:
  size_t memoryUsage() const {
    return 0;
  }

 protected:
  const detail::VariantData* getData() const {
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
    return data_;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
  }
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>:

  const detail::ResourceManager* getResourceManager() const {
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
    return resources_;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
  }
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariant() : data_(0), resources_(0) {}

  // INTERNAL USE ONLY
  JsonVariant(detail::VariantData* data, detail::ResourceManager* resources)
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>:

 private:
  detail::ResourceManager* getResourceManager() const {
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
    return resources_;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
  }
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>:

  detail::VariantData* getData() const {
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
    return data_;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
  }
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>:

  static JsonVariant fromJson(JsonVariant src) {
    return src;
  }

  static bool checkJson(JsonVariant src) {
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	463b      	mov	r3, r7
 8002f22:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8002f26:	463b      	mov	r3, r7
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f001 fd13 	bl	8004954 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8002f2e:	60f8      	str	r0, [r7, #12]
    return !!data;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	bf14      	ite	ne
 8002f36:	2301      	movne	r3, #1
 8002f38:	2300      	moveq	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
  }
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>:

class JsonArrayIterator {
  friend class JsonArray;

 public:
  JsonArrayIterator() {}
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fcb2 	bl	80028b8 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>:
  explicit JsonArrayIterator(detail::ArrayData::iterator iterator,
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	1d38      	adds	r0, r7, #4
 8002f68:	e880 0006 	stmia.w	r0, {r1, r2}
 8002f6c:	603b      	str	r3, [r7, #0]
                             detail::ResourceManager* resources)
      : iterator_(iterator), resources_(resources) {}
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	461a      	mov	r2, r3
 8002f72:	1d3b      	adds	r3, r7, #4
 8002f74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f78:	e882 0003 	stmia.w	r2, {r0, r1}
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	609a      	str	r2, [r3, #8]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>:

  JsonVariant operator*() {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
    return JsonVariant(iterator_.data(), resources_);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fcce 	bl	800293e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8002fa2:	4601      	mov	r1, r0
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff ff8a 	bl	8002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>:

  bool operator==(const JsonArrayIterator& other) const {
    return iterator_ == other.iterator_;
  }

  bool operator!=(const JsonArrayIterator& other) const {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
    return iterator_ != other.iterator_;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fc98 	bl	80028fe <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>
 8002fce:	4603      	mov	r3, r0
  }
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>:

  JsonArrayIterator& operator++() {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
    iterator_.next(resources_);
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4610      	mov	r0, r2
 8002fea:	f000 f936 	bl	800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    return *this;
 8002fee:	687b      	ldr	r3, [r7, #4]
  }
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>:

 public:
  using iterator = JsonArrayIterator;

  // Constructs an unbound reference.
  JsonArray() : data_(0), resources_(0) {}
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonArray(detail::ArrayData* data, detail::ResourceManager* resources)
 800301a:	b480      	push	{r7}
 800301c:	b085      	sub	sp, #20
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>:
    return detail::ArrayData::addValue(data_, value, resources_);
  }

  // Returns an iterator to the first element of the array.
  // https://arduinojson.org/v7/api/jsonarray/begin/
  iterator begin() const {
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
    if (!data_)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d103      	bne.n	800305a <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x1a>
      return iterator();
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff ff76 	bl	8002f44 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
 8003058:	e011      	b.n	800307e <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x3e>
    return iterator(data_->createIterator(resources_), resources_);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4619      	mov	r1, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	f107 0308 	add.w	r3, r7, #8
 8003068:	4618      	mov	r0, r3
 800306a:	f000 f919 	bl	80032a0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f107 0208 	add.w	r2, r7, #8
 8003076:	ca06      	ldmia	r2, {r1, r2}
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff ff70 	bl	8002f5e <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>
  }
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>:

  // Returns an iterator following the last element of the array.
  // https://arduinojson.org/v7/api/jsonarray/end/
  iterator end() const {
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
    return iterator();
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff ff57 	bl	8002f44 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
  }
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>:

 public:
  using iterator = JsonObjectIterator;

  // Creates an unbound reference.
  JsonObject() : data_(0), resources_(0) {}
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonObject(detail::ObjectData* data, detail::ResourceManager* resource)
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resource) {}
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	605a      	str	r2, [r3, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
    return resources_;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
  }
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>:

  detail::VariantData* getData() const {
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
    return detail::collectionToVariant(data_);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fc2f 	bl	800296e <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8003110:	4603      	mov	r3, r0
  }
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>:
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
  friend class detail::VariantAttorney;

 public:
  explicit JsonDocument(Allocator* alloc = detail::DefaultAllocator::instance())
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]
      : resources_(alloc) {}
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6839      	ldr	r1, [r7, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fdf8 	bl	8002d1e <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3338      	adds	r3, #56	@ 0x38
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff fc56 	bl	80029e4 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>:
    return resources_.allocator();
  }

  // Reduces the capacity of the memory pool to match the current usage.
  // https://arduinojson.org/v7/api/jsondocument/shrinktofit/
  void shrinkToFit() {
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
    resources_.shrinkToFit();
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fe7d 	bl	8002e4c <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>
  }
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>:
    return getVariant().template as<T>();
  }

  // Empties the document and resets the memory pool
  // https://arduinojson.org/v7/api/jsondocument/clear/
  void clear() {
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
    resources_.clear();
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fe54 	bl	8002e12 <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>
    data_.reset();
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3338      	adds	r3, #56	@ 0x38
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fd0d 	bl	8002b8e <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>
  }
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>:

  JsonVariantConst getVariant() const {
    return JsonVariantConst(&data_, &resources_);
  }

  detail::ResourceManager* getResourceManager() {
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
    return &resources_;
 8003184:	687b      	ldr	r3, [r7, #4]
  }
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>:

  detail::VariantData* getData() {
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
    return &data_;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3338      	adds	r3, #56	@ 0x38
  }
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>:

  const detail::VariantData* getData() const {
    return &data_;
  }

  detail::VariantData* getOrCreateData() {
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
    return &data_;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3338      	adds	r3, #56	@ 0x38
  }
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>:
    --index;
  }
  return it;
}

inline VariantData* ArrayData::addElement(ResourceManager* resources) {
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
  auto slot = resources->allocVariant();
 80031cc:	f107 0308 	add.w	r3, r7, #8
 80031d0:	6839      	ldr	r1, [r7, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 f93e 	bl	8003454 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!slot)
 80031d8:	f107 0308 	add.w	r3, r7, #8
 80031dc:	4618      	mov	r0, r3
 80031de:	f001 fbdd 	bl	800499c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f083 0301 	eor.w	r3, r3, #1
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x30>
    return nullptr;
 80031ee:	2300      	movs	r3, #0
 80031f0:	e00d      	b.n	800320e <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x4c>
  CollectionData::appendOne(slot, resources);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	f107 0208 	add.w	r2, r7, #8
 80031fa:	ca06      	ldmia	r2, {r1, r2}
 80031fc:	f000 f867 	bl	80032ce <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>
  return slot.ptr();
 8003200:	f107 0308 	add.w	r3, r7, #8
 8003204:	4618      	mov	r0, r3
 8003206:	f001 fbda 	bl	80049be <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800320a:	4603      	mov	r3, r0
 800320c:	bf00      	nop
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>:
#include <ArduinoJson/Variant/VariantCompare.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline CollectionIterator::CollectionIterator(VariantData* slot, SlotId slotId)
 8003216:	b580      	push	{r7, lr}
 8003218:	b084      	sub	sp, #16
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	4613      	mov	r3, r2
 8003222:	80fb      	strh	r3, [r7, #6]
    : slot_(slot), currentId_(slotId) {
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	88fa      	ldrh	r2, [r7, #6]
 800322e:	809a      	strh	r2, [r3, #4]
  nextId_ = slot_ ? slot_->next() : NULL_SLOT;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d007      	beq.n	8003248 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x32>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fbe5 	bl	8002a0c <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8003242:	4603      	mov	r3, r0
 8003244:	461a      	mov	r2, r3
 8003246:	e001      	b.n	800324c <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x36>
 8003248:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	80da      	strh	r2, [r3, #6]
}
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>:

inline void CollectionIterator::next(const ResourceManager* resources) {
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	6039      	str	r1, [r7, #0]
  ARDUINOJSON_ASSERT(currentId_ != NULL_SLOT);
  slot_ = resources->getVariant(nextId_);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	88db      	ldrh	r3, [r3, #6]
 8003268:	4619      	mov	r1, r3
 800326a:	6838      	ldr	r0, [r7, #0]
 800326c:	f000 f965 	bl	800353a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8003270:	4602      	mov	r2, r0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	601a      	str	r2, [r3, #0]
  currentId_ = nextId_;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	88da      	ldrh	r2, [r3, #6]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	809a      	strh	r2, [r3, #4]
  if (slot_)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE+0x3e>
    nextId_ = slot_->next();
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fbbe 	bl	8002a0c <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8003290:	4603      	mov	r3, r0
 8003292:	461a      	mov	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	80da      	strh	r2, [r3, #6]
}
 8003298:	bf00      	nop
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>:

inline CollectionData::iterator CollectionData::createIterator(
    const ResourceManager* resources) const {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  return iterator(resources->getVariant(head_), head_);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	4619      	mov	r1, r3
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f941 	bl	800353a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 80032b8:	4601      	mov	r1, r0
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f7ff ffa8 	bl	8003216 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>
}
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>:

inline void CollectionData::appendOne(Slot<VariantData> slot,
                                      const ResourceManager* resources) {
 80032ce:	b590      	push	{r4, r7, lr}
 80032d0:	b087      	sub	sp, #28
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	1d38      	adds	r0, r7, #4
 80032d8:	e880 0006 	stmia.w	r0, {r1, r2}
 80032dc:	603b      	str	r3, [r7, #0]
  if (tail_ != NULL_SLOT) {
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	885b      	ldrh	r3, [r3, #2]
 80032e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d019      	beq.n	800331e <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x50>
    auto tail = resources->getVariant(tail_);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	885b      	ldrh	r3, [r3, #2]
 80032ee:	4619      	mov	r1, r3
 80032f0:	6838      	ldr	r0, [r7, #0]
 80032f2:	f000 f922 	bl	800353a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 80032f6:	6178      	str	r0, [r7, #20]
    tail->setNext(slot.id());
 80032f8:	697c      	ldr	r4, [r7, #20]
 80032fa:	1d3b      	adds	r3, r7, #4
 80032fc:	4618      	mov	r0, r3
 80032fe:	f001 fb6a 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003302:	4603      	mov	r3, r0
 8003304:	4619      	mov	r1, r3
 8003306:	4620      	mov	r0, r4
 8003308:	f7ff fb8c 	bl	8002a24 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = slot.id();
 800330c:	1d3b      	adds	r3, r7, #4
 800330e:	4618      	mov	r0, r3
 8003310:	f001 fb61 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003314:	4603      	mov	r3, r0
 8003316:	461a      	mov	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = slot.id();
    tail_ = slot.id();
  }
}
 800331c:	e00f      	b.n	800333e <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x70>
    head_ = slot.id();
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	4618      	mov	r0, r3
 8003322:	f001 fb58 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003326:	4603      	mov	r3, r0
 8003328:	461a      	mov	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	801a      	strh	r2, [r3, #0]
    tail_ = slot.id();
 800332e:	1d3b      	adds	r3, r7, #4
 8003330:	4618      	mov	r0, r3
 8003332:	f001 fb50 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003336:	4603      	mov	r3, r0
 8003338:	461a      	mov	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	805a      	strh	r2, [r3, #2]
}
 800333e:	bf00      	nop
 8003340:	371c      	adds	r7, #28
 8003342:	46bd      	mov	sp, r7
 8003344:	bd90      	pop	{r4, r7, pc}

08003346 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>:

inline void CollectionData::appendPair(Slot<VariantData> key,
                                       Slot<VariantData> value,
                                       const ResourceManager* resources) {
 8003346:	b082      	sub	sp, #8
 8003348:	b590      	push	{r4, r7, lr}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	1d38      	adds	r0, r7, #4
 8003352:	e880 0006 	stmia.w	r0, {r1, r2}
 8003356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  key->setNext(value.id());
 8003358:	1d3b      	adds	r3, r7, #4
 800335a:	4618      	mov	r0, r3
 800335c:	f001 fb47 	bl	80049ee <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8003360:	4604      	mov	r4, r0
 8003362:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003366:	4618      	mov	r0, r3
 8003368:	f001 fb35 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 800336c:	4603      	mov	r3, r0
 800336e:	4619      	mov	r1, r3
 8003370:	4620      	mov	r0, r4
 8003372:	f7ff fb57 	bl	8002a24 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>

  if (tail_ != NULL_SLOT) {
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	885b      	ldrh	r3, [r3, #2]
 800337a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800337e:	4293      	cmp	r3, r2
 8003380:	d01a      	beq.n	80033b8 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x72>
    auto tail = resources->getVariant(tail_);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	885b      	ldrh	r3, [r3, #2]
 8003386:	4619      	mov	r1, r3
 8003388:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800338a:	f000 f8d6 	bl	800353a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 800338e:	6178      	str	r0, [r7, #20]
    tail->setNext(key.id());
 8003390:	697c      	ldr	r4, [r7, #20]
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	4618      	mov	r0, r3
 8003396:	f001 fb1e 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 800339a:	4603      	mov	r3, r0
 800339c:	4619      	mov	r1, r3
 800339e:	4620      	mov	r0, r4
 80033a0:	f7ff fb40 	bl	8002a24 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = value.id();
 80033a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033a8:	4618      	mov	r0, r3
 80033aa:	f001 fb14 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 80033ae:	4603      	mov	r3, r0
 80033b0:	461a      	mov	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = key.id();
    tail_ = value.id();
  }
}
 80033b6:	e010      	b.n	80033da <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x94>
    head_ = key.id();
 80033b8:	1d3b      	adds	r3, r7, #4
 80033ba:	4618      	mov	r0, r3
 80033bc:	f001 fb0b 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	801a      	strh	r2, [r3, #0]
    tail_ = value.id();
 80033c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033cc:	4618      	mov	r0, r3
 80033ce:	f001 fb02 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	805a      	strh	r2, [r3, #2]
}
 80033da:	bf00      	nop
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80033e4:	b002      	add	sp, #8
 80033e6:	4770      	bx	lr

080033e8 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>:

inline void CollectionData::clear(ResourceManager* resources) {
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  auto next = head_;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	82fb      	strh	r3, [r7, #22]
  while (next != NULL_SLOT) {
 80033f8:	e01b      	b.n	8003432 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x4a>
    auto currId = next;
 80033fa:	8afb      	ldrh	r3, [r7, #22]
 80033fc:	82bb      	strh	r3, [r7, #20]
    auto slot = resources->getVariant(next);
 80033fe:	8afb      	ldrh	r3, [r7, #22]
 8003400:	4619      	mov	r1, r3
 8003402:	6838      	ldr	r0, [r7, #0]
 8003404:	f000 f899 	bl	800353a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8003408:	6138      	str	r0, [r7, #16]
    next = slot->next();
 800340a:	6938      	ldr	r0, [r7, #16]
 800340c:	f7ff fafe 	bl	8002a0c <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8003410:	4603      	mov	r3, r0
 8003412:	82fb      	strh	r3, [r7, #22]
    resources->freeVariant({slot, currId});
 8003414:	683c      	ldr	r4, [r7, #0]
 8003416:	8aba      	ldrh	r2, [r7, #20]
 8003418:	f107 0308 	add.w	r3, r7, #8
 800341c:	6939      	ldr	r1, [r7, #16]
 800341e:	4618      	mov	r0, r3
 8003420:	f001 faf1 	bl	8004a06 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
 8003424:	f107 0308 	add.w	r3, r7, #8
 8003428:	e893 0006 	ldmia.w	r3, {r1, r2}
 800342c:	4620      	mov	r0, r4
 800342e:	f000 f851 	bl	80034d4 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>
  while (next != NULL_SLOT) {
 8003432:	8afb      	ldrh	r3, [r7, #22]
 8003434:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003438:	4293      	cmp	r3, r2
 800343a:	d1de      	bne.n	80033fa <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x12>
  }

  head_ = NULL_SLOT;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003442:	801a      	strh	r2, [r3, #0]
  tail_ = NULL_SLOT;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800344a:	805a      	strh	r2, [r3, #2]
}
 800344c:	bf00      	nop
 800344e:	371c      	adds	r7, #28
 8003450:	46bd      	mov	sp, r7
 8003452:	bd90      	pop	{r4, r7, pc}

08003454 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>:
#include <ArduinoJson/Polyfills/alias_cast.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline Slot<VariantData> ResourceManager::allocVariant() {
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	f103 010c 	add.w	r1, r3, #12
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	f107 0308 	add.w	r3, r7, #8
 800346c:	4618      	mov	r0, r3
 800346e:	f001 faf0 	bl	8004a52 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8003472:	f107 0308 	add.w	r3, r7, #8
 8003476:	4618      	mov	r0, r3
 8003478:	f001 fb2e 	bl	8004ad8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 800347c:	4603      	mov	r3, r0
 800347e:	f083 0301 	eor.w	r3, r3, #1
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d006      	beq.n	8003496 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x42>
    overflowed_ = true;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2201      	movs	r2, #1
 800348c:	711a      	strb	r2, [r3, #4]
    return {};
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f001 facd 	bl	8004a2e <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>
 8003494:	e01a      	b.n	80034cc <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x78>
  }
  return {new (&p->variant) VariantData, p.id()};
 8003496:	f107 0308 	add.w	r3, r7, #8
 800349a:	4618      	mov	r0, r3
 800349c:	f001 fb2d 	bl	8004afa <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 80034a0:	4603      	mov	r3, r0
 80034a2:	4619      	mov	r1, r3
 80034a4:	2008      	movs	r0, #8
 80034a6:	f7ff fa91 	bl	80029cc <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>
 80034aa:	4604      	mov	r4, r0
 80034ac:	2c00      	cmp	r4, #0
 80034ae:	d002      	beq.n	80034b6 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x62>
 80034b0:	4620      	mov	r0, r4
 80034b2:	f7ff fa97 	bl	80029e4 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 80034b6:	f107 0308 	add.w	r3, r7, #8
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 fb29 	bl	8004b12 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 80034c0:	4603      	mov	r3, r0
 80034c2:	461a      	mov	r2, r3
 80034c4:	4621      	mov	r1, r4
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f001 fa9d 	bl	8004a06 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
}
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd90      	pop	{r4, r7, pc}

080034d4 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>:

inline void ResourceManager::freeVariant(Slot<VariantData> variant) {
 80034d4:	b5b0      	push	{r4, r5, r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	1d3b      	adds	r3, r7, #4
 80034de:	e883 0006 	stmia.w	r3, {r1, r2}
  variant->clear(this);
 80034e2:	1d3b      	adds	r3, r7, #4
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 fa82 	bl	80049ee <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 80034ea:	4603      	mov	r3, r0
 80034ec:	68f9      	ldr	r1, [r7, #12]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fa1c 	bl	800392c <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
  variantPools_.freeSlot({alias_cast<SlotData*>(variant.ptr()), variant.id()});
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f103 040c 	add.w	r4, r3, #12
 80034fa:	1d3b      	adds	r3, r7, #4
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 fa5e 	bl	80049be <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8003502:	4603      	mov	r3, r0
 8003504:	4618      	mov	r0, r3
 8003506:	f001 fb10 	bl	8004b2a <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>
 800350a:	4605      	mov	r5, r0
 800350c:	1d3b      	adds	r3, r7, #4
 800350e:	4618      	mov	r0, r3
 8003510:	f001 fa61 	bl	80049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003514:	4603      	mov	r3, r0
 8003516:	461a      	mov	r2, r3
 8003518:	f107 0310 	add.w	r3, r7, #16
 800351c:	4629      	mov	r1, r5
 800351e:	4618      	mov	r0, r3
 8003520:	f001 fb10 	bl	8004b44 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 8003524:	f107 0310 	add.w	r3, r7, #16
 8003528:	e893 0006 	ldmia.w	r3, {r1, r2}
 800352c:	4620      	mov	r0, r4
 800352e:	f001 fb1d 	bl	8004b6c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 8003532:	bf00      	nop
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bdb0      	pop	{r4, r5, r7, pc}

0800353a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>:

inline VariantData* ResourceManager::getVariant(SlotId id) const {
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	460b      	mov	r3, r1
 8003544:	807b      	strh	r3, [r7, #2]
  return reinterpret_cast<VariantData*>(variantPools_.getSlot(id));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	330c      	adds	r3, #12
 800354a:	887a      	ldrh	r2, [r7, #2]
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f001 fb28 	bl	8004ba4 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8003554:	4603      	mov	r3, r0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>:

#if ARDUINOJSON_USE_EXTENSIONS
inline Slot<VariantExtension> ResourceManager::allocExtension() {
 800355e:	b590      	push	{r4, r7, lr}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	f103 010c 	add.w	r1, r3, #12
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	f107 0308 	add.w	r3, r7, #8
 8003576:	4618      	mov	r0, r3
 8003578:	f001 fa6b 	bl	8004a52 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 800357c:	f107 0308 	add.w	r3, r7, #8
 8003580:	4618      	mov	r0, r3
 8003582:	f001 faa9 	bl	8004ad8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8003586:	4603      	mov	r3, r0
 8003588:	f083 0301 	eor.w	r3, r3, #1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x42>
    overflowed_ = true;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2201      	movs	r2, #1
 8003596:	711a      	strb	r2, [r3, #4]
    return {};
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f001 fb27 	bl	8004bec <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>
 800359e:	e011      	b.n	80035c4 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x66>
  }
  return {&p->extension, p.id()};
 80035a0:	f107 0308 	add.w	r3, r7, #8
 80035a4:	4618      	mov	r0, r3
 80035a6:	f001 faa8 	bl	8004afa <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 80035aa:	4603      	mov	r3, r0
 80035ac:	461c      	mov	r4, r3
 80035ae:	f107 0308 	add.w	r3, r7, #8
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 faad 	bl	8004b12 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 80035b8:	4603      	mov	r3, r0
 80035ba:	461a      	mov	r2, r3
 80035bc:	4621      	mov	r1, r4
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f001 fb26 	bl	8004c10 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>
}
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd90      	pop	{r4, r7, pc}

080035cc <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>:

inline void ResourceManager::freeExtension(SlotId id) {
 80035cc:	b590      	push	{r4, r7, lr}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	807b      	strh	r3, [r7, #2]
  auto p = getExtension(id);
 80035d8:	887b      	ldrh	r3, [r7, #2]
 80035da:	4619      	mov	r1, r3
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f816 	bl	800360e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 80035e2:	6178      	str	r0, [r7, #20]
  variantPools_.freeSlot({reinterpret_cast<SlotData*>(p), id});
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f103 040c 	add.w	r4, r3, #12
 80035ea:	887a      	ldrh	r2, [r7, #2]
 80035ec:	f107 030c 	add.w	r3, r7, #12
 80035f0:	6979      	ldr	r1, [r7, #20]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 faa6 	bl	8004b44 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 80035f8:	f107 030c 	add.w	r3, r7, #12
 80035fc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003600:	4620      	mov	r0, r4
 8003602:	f001 fab3 	bl	8004b6c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	bd90      	pop	{r4, r7, pc}

0800360e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>:

inline VariantExtension* ResourceManager::getExtension(SlotId id) const {
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	460b      	mov	r3, r1
 8003618:	807b      	strh	r3, [r7, #2]
  return &variantPools_.getSlot(id)->extension;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	330c      	adds	r3, #12
 800361e:	887a      	ldrh	r2, [r7, #2]
 8003620:	4611      	mov	r1, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f001 fabe 	bl	8004ba4 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8003628:	4603      	mov	r3, r0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 8003632:	b580      	push	{r7, lr}
 8003634:	b084      	sub	sp, #16
 8003636:	af00      	add	r7, sp, #0
 8003638:	4603      	mov	r3, r0
 800363a:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(false);
 800363c:	2000      	movs	r0, #0
 800363e:	f000 f819 	bl	8003674 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>
 8003642:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0')
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x1e>
        return 0;
 800364c:	2300      	movs	r3, #0
 800364e:	e00c      	b.n	800366a <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	79fa      	ldrb	r2, [r7, #7]
 8003656:	429a      	cmp	r2, r3
 8003658:	d103      	bne.n	8003662 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x30>
        return p[1];
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3301      	adds	r3, #1
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	e003      	b.n	800366a <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3302      	adds	r3, #2
 8003666:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0')
 8003668:	e7ec      	b.n	8003644 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x12>
    }
  }
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>:

 private:
  static const char* escapeTable(bool isSerializing) {
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	71fb      	strb	r3, [r7, #7]
    return &"//''\"\"\\\\b\bf\fn\nr\rt\t"[isSerializing ? 4 : 0];
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x14>
 8003684:	2304      	movs	r3, #4
 8003686:	e000      	b.n	800368a <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x16>
 8003688:	2300      	movs	r3, #0
 800368a:	4a04      	ldr	r2, [pc, #16]	@ (800369c <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x28>)
 800368c:	4413      	add	r3, r2
  }
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	0801e108 	.word	0x0801e108

080036a0 <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>:

class StringBuilder {
 public:
  static const size_t initialCapacity = 31;

  StringBuilder(ResourceManager* resources) : resources_(resources) {}
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>:

  ~StringBuilder() {
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
    if (node_)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d007      	beq.n	80036ea <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev+0x20>
      resources_->destroyString(node_);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4619      	mov	r1, r3
 80036e4:	4610      	mov	r0, r2
 80036e6:	f7ff fb73 	bl	8002dd0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>
  }
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>:

  void startString() {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
    size_ = 0;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	609a      	str	r2, [r3, #8]
    if (!node_)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d108      	bne.n	800371c <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv+0x28>
      node_ = resources_->createString(initialCapacity);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	211f      	movs	r1, #31
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff fb2d 	bl	8002d70 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>
 8003716:	4602      	mov	r2, r0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	605a      	str	r2, [r3, #4]
  }
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>:

  StringNode* save() {
 8003724:	b590      	push	{r4, r7, lr}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	4413      	add	r3, r2
 8003736:	2200      	movs	r2, #0
 8003738:	721a      	strb	r2, [r3, #8]
    StringNode* node = resources_->getString(adaptString(node_->data, size_));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681c      	ldr	r4, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f103 0108 	add.w	r1, r3, #8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	f107 0308 	add.w	r3, r7, #8
 800374e:	4618      	mov	r0, r3
 8003750:	f001 fa72 	bl	8004c38 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8003754:	f107 0308 	add.w	r3, r7, #8
 8003758:	4619      	mov	r1, r3
 800375a:	4620      	mov	r0, r4
 800375c:	f001 fa7d 	bl	8004c5a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 8003760:	6178      	str	r0, [r7, #20]
    if (!node) {
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d113      	bne.n	8003790 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x6c>
      node = resources_->resizeString(node_, size_);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	461a      	mov	r2, r3
 8003776:	f7ff fb12 	bl	8002d9e <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 800377a:	6178      	str	r0, [r7, #20]
      ARDUINOJSON_ASSERT(node != nullptr);  // realloc to smaller can't fail
      resources_->saveString(node);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6979      	ldr	r1, [r7, #20]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fae5 	bl	8002d52 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>
      node_ = nullptr;  // next time we need a new string
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	e005      	b.n	800379c <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x78>
    } else {
      node->references++;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	889b      	ldrh	r3, [r3, #4]
 8003794:	3301      	adds	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	809a      	strh	r2, [r3, #4]
    }
    return node;
 800379c:	697b      	ldr	r3, [r7, #20]
  }
 800379e:	4618      	mov	r0, r3
 80037a0:	371c      	adds	r7, #28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd90      	pop	{r4, r7, pc}

080037a6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>:
  void append(const char* s, size_t n) {
    while (n-- > 0)  // TODO: memcpy
      append(*s++);
  }

  void append(char c) {
 80037a6:	b590      	push	{r4, r7, lr}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	460b      	mov	r3, r1
 80037b0:	70fb      	strb	r3, [r7, #3]
    if (node_ && size_ == node_->length)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d014      	beq.n	80037e4 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6852      	ldr	r2, [r2, #4]
 80037c2:	88d2      	ldrh	r2, [r2, #6]
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d10d      	bne.n	80037e4 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
      node_ = resources_->resizeString(node_, size_ * 2U + 1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6859      	ldr	r1, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	3301      	adds	r3, #1
 80037d8:	461a      	mov	r2, r3
 80037da:	f7ff fae0 	bl	8002d9e <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 80037de:	4602      	mov	r2, r0
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	605a      	str	r2, [r3, #4]
    if (node_)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x5c>
      node_->data[size_++] = c;
 80037ec:	78fc      	ldrb	r4, [r7, #3]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	1c58      	adds	r0, r3, #1
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	6088      	str	r0, [r1, #8]
 80037fc:	4413      	add	r3, r2
 80037fe:	4622      	mov	r2, r4
 8003800:	721a      	strb	r2, [r3, #8]
  }
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	bd90      	pop	{r4, r7, pc}

0800380a <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>:

  bool isValid() const {
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
    return node_ != nullptr;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	bf14      	ite	ne
 800381a:	2301      	movne	r3, #1
 800381c:	2300      	moveq	r3, #0
 800381e:	b2db      	uxtb	r3, r3
  }
 8003820:	4618      	mov	r0, r3
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>:

  size_t size() const {
    return size_;
  }

  JsonString str() const {
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	4413      	add	r3, r2
 8003840:	2200      	movs	r2, #0
 8003842:	721a      	strb	r2, [r3, #8]
    return JsonString(node_->data, size_);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f103 0108 	add.w	r1, r3, #8
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	2300      	movs	r3, #0
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f001 fa11 	bl	8004c7a <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>
  }
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>:
  static void toJson(const char* src, JsonVariant dst) {
    detail::VariantData::setString(getData(dst), detail::adaptString(src),
                                   getResourceManager(dst));
  }

  static const char* fromJson(JsonVariantConst src) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	463b      	mov	r3, r7
 8003868:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 800386c:	463b      	mov	r3, r7
 800386e:	4618      	mov	r0, r3
 8003870:	f001 f87c 	bl	800496c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8003874:	6178      	str	r0, [r7, #20]
    return data ? data->asString().c_str() : 0;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00c      	beq.n	8003896 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x36>
 800387c:	f107 0308 	add.w	r3, r7, #8
 8003880:	6979      	ldr	r1, [r7, #20]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff f91c 	bl	8002ac0 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8003888:	f107 0308 	add.w	r3, r7, #8
 800388c:	4618      	mov	r0, r3
 800388e:	f7fe fffb 	bl	8002888 <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 8003892:	4603      	mov	r3, r0
 8003894:	e000      	b.n	8003898 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x38>
 8003896:	2300      	movs	r3, #0
  }
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonArray>().set(src);
  }

  static JsonArray fromJson(JsonVariant src) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	1d3b      	adds	r3, r7, #4
 80038aa:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 80038ae:	1d3b      	adds	r3, r7, #4
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 f84f 	bl	8004954 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80038b6:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 80038b8:	1d3b      	adds	r3, r7, #4
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 f9ef 	bl	8004c9e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 80038c0:	6138      	str	r0, [r7, #16]
    return JsonArray(data != 0 ? data->asArray() : 0, resources);
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d004      	beq.n	80038d2 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x32>
 80038c8:	6978      	ldr	r0, [r7, #20]
 80038ca:	f7ff f8ba 	bl	8002a42 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 80038ce:	4603      	mov	r3, r0
 80038d0:	e000      	b.n	80038d4 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x34>
 80038d2:	2300      	movs	r3, #0
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4619      	mov	r1, r3
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f7ff fb9e 	bl	800301a <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>
  }
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonObject>().set(src);
  }

  static JsonObject fromJson(JsonVariant src) {
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b086      	sub	sp, #24
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	1d3b      	adds	r3, r7, #4
 80038f0:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 80038f4:	1d3b      	adds	r3, r7, #4
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 f82c 	bl	8004954 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80038fc:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 80038fe:	1d3b      	adds	r3, r7, #4
 8003900:	4618      	mov	r0, r3
 8003902:	f001 f9cc 	bl	8004c9e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8003906:	6138      	str	r0, [r7, #16]
    return JsonObject(data != 0 ? data->asObject() : 0, resources);
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d004      	beq.n	8003918 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x32>
 800390e:	6978      	ldr	r0, [r7, #20]
 8003910:	f7ff f8b9 	bl	8002a86 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8003914:	4603      	mov	r3, r0
 8003916:	e000      	b.n	800391a <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x34>
 8003918:	2300      	movs	r3, #0
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4619      	mov	r1, r3
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f7ff fbce 	bl	80030c0 <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>
  }
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>:
  }

  return false;
}

inline void VariantData::clear(ResourceManager* resources) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  if (type_ & VariantTypeBits::OwnedStringBit)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	791b      	ldrb	r3, [r3, #4]
 800393a:	2101      	movs	r1, #1
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff f823 	bl	8002988 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d006      	beq.n	8003956 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x2a>
    resources->dereferenceString(content_.asOwnedString->data);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3308      	adds	r3, #8
 800394e:	4619      	mov	r1, r3
 8003950:	6838      	ldr	r0, [r7, #0]
 8003952:	f7ff fa4c 	bl	8002dee <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>

#if ARDUINOJSON_USE_EXTENSIONS
  if (type_ & VariantTypeBits::ExtensionBit)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	791b      	ldrb	r3, [r3, #4]
 800395a:	2110      	movs	r1, #16
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff f813 	bl	8002988 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x48>
    resources->freeExtension(content_.asSlotId);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	4619      	mov	r1, r3
 800396e:	6838      	ldr	r0, [r7, #0]
 8003970:	f7ff fe2c 	bl	80035cc <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>
#endif

  auto collection = asCollection();
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff f875 	bl	8002a64 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>
 800397a:	60f8      	str	r0, [r7, #12]
  if (collection)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x5e>
    collection->clear(resources);
 8003982:	6839      	ldr	r1, [r7, #0]
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f7ff fd2f 	bl	80033e8 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>

  type_ = VariantType::Null;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	711a      	strb	r2, [r3, #4]
}
 8003990:	bf00      	nop
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>:

#if ARDUINOJSON_USE_EXTENSIONS
inline const VariantExtension* VariantData::getExtension(
    const ResourceManager* resources) const {
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  return type_ & VariantTypeBits::ExtensionBit
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	791b      	ldrb	r3, [r3, #4]
 80039a6:	2110      	movs	r1, #16
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fe ffed 	bl	8002988 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80039ae:	4603      	mov	r3, r0
             ? resources->getExtension(content_.asSlotId)
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	4619      	mov	r1, r3
 80039ba:	6838      	ldr	r0, [r7, #0]
 80039bc:	f7ff fe27 	bl	800360e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 80039c0:	4603      	mov	r3, r0
             : nullptr;
 80039c2:	e000      	b.n	80039c6 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2e>
             ? resources->getExtension(content_.asSlotId)
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>:
    NoMemory,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : code_(c) {}
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	460b      	mov	r3, r1
 80039d8:	70fb      	strb	r3, [r7, #3]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>:
  explicit operator bool() const {
    return code_ != Ok;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
    return code_;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	781b      	ldrb	r3, [r3, #0]
  }
 80039fa:	4618      	mov	r0, r3
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>:

  const char* c_str() const {
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
    static const char* messages[] = {
        "Ok",           "EmptyInput", "IncompleteInput",
        "InvalidInput", "NoMemory",   "TooDeep"};
    ARDUINOJSON_ASSERT(static_cast<size_t>(code_) <
                       sizeof(messages) / sizeof(messages[0]));
    return messages[code_];
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	4b04      	ldr	r3, [pc, #16]	@ (8003a28 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv+0x20>)
 8003a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  }
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	24000004 	.word	0x24000004

08003a2c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>:
};
}  // namespace DeserializationOption

namespace detail {
struct AllowAllFilter {
  bool allow() const {
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
    return true;
 8003a34:	2301      	movs	r3, #1
  }
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>:

  bool allowArray() const {
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
    return true;
 8003a4a:	2301      	movs	r3, #1
  }
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>:

  bool allowObject() const {
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
    return true;
 8003a60:	2301      	movs	r3, #1
  }
 8003a62:	4618      	mov	r0, r3
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>:

  bool allowValue() const {
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
    return true;
 8003a76:	2301      	movs	r3, #1
  }
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

namespace DeserializationOption {
class NestingLimit {
 public:
  NestingLimit() : value_(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	220a      	movs	r2, #10
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>:
  explicit NestingLimit(uint8_t n) : value_(n) {}
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	70fb      	strb	r3, [r7, #3]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>:

  NestingLimit decrement() const {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(value_ > 0);
    return NestingLimit(static_cast<uint8_t>(value_ - 1));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	f107 030c 	add.w	r3, r7, #12
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff ffe2 	bl	8003aa0 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>
 8003adc:	7b3b      	ldrb	r3, [r7, #12]
  }
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>:

  bool reached() const {
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
    return value_ == 0;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	bf0c      	ite	eq
 8003af6:	2301      	moveq	r3, #1
 8003af8:	2300      	movne	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
  }
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>:
    DeserializationOption::NestingLimit nestingLimit, TFilter filter) {
  return {filter, nestingLimit};
}

inline DeserializationOptions<AllowAllFilter> makeDeserializationOptions(
    DeserializationOption::NestingLimit nestingLimit = {}) {
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	7138      	strb	r0, [r7, #4]
  return {{}, nestingLimit};
 8003b10:	793b      	ldrb	r3, [r7, #4]
 8003b12:	737b      	strb	r3, [r7, #13]
 8003b14:	2300      	movs	r3, #0
 8003b16:	7b3a      	ldrb	r2, [r7, #12]
 8003b18:	f362 0307 	bfi	r3, r2, #0, #8
 8003b1c:	7b7a      	ldrb	r2, [r7, #13]
 8003b1e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>:
inline void shrinkJsonDocument(TDestination&) {
  // no-op by default
}

#if ARDUINOJSON_AUTO_SHRINK
inline void shrinkJsonDocument(JsonDocument& doc) {
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  doc.shrinkToFit();
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff fb03 	bl	8003142 <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>
}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf16 {
inline bool isHighSurrogate(uint16_t codeunit) {
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xD800 && codeunit < 0xDC00;
 8003b4e:	88fb      	ldrh	r3, [r7, #6]
 8003b50:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8003b54:	d305      	bcc.n	8003b62 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8003b5c:	d201      	bcs.n	8003b62 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x20>
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>:

inline bool isLowSurrogate(uint16_t codeunit) {
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xDC00 && codeunit < 0xE000;
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8003b80:	d305      	bcc.n	8003b8e <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8003b88:	d201      	bcs.n	8003b8e <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x20>
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>:

class Codepoint {
 public:
  Codepoint() : highSurrogate_(0), codepoint_(0) {}
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	801a      	strh	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	605a      	str	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>:

  bool append(uint16_t codeunit) {
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	807b      	strh	r3, [r7, #2]
    if (isHighSurrogate(codeunit)) {
 8003bca:	887b      	ldrh	r3, [r7, #2]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff ffb9 	bl	8003b44 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d007      	beq.n	8003be8 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x2a>
      highSurrogate_ = codeunit & 0x3FF;
 8003bd8:	887b      	ldrh	r3, [r7, #2]
 8003bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	801a      	strh	r2, [r3, #0]
      return false;
 8003be4:	2300      	movs	r3, #0
 8003be6:	e018      	b.n	8003c1a <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    if (isLowSurrogate(codeunit)) {
 8003be8:	887b      	ldrh	r3, [r7, #2]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff ffc0 	bl	8003b70 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00d      	beq.n	8003c12 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x54>
      codepoint_ =
          uint32_t(0x10000 + ((highSurrogate_ << 10) | (codeunit & 0x3FF)));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	029a      	lsls	r2, r3, #10
 8003bfc:	887b      	ldrh	r3, [r7, #2]
 8003bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003c08:	461a      	mov	r2, r3
      codepoint_ =
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	605a      	str	r2, [r3, #4]
      return true;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e003      	b.n	8003c1a <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    codepoint_ = codeunit;
 8003c12:	887a      	ldrh	r2, [r7, #2]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	605a      	str	r2, [r3, #4]
    return true;
 8003c18:	2301      	movs	r3, #1
  }
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>:

  uint32_t value() const {
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
    return codepoint_;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
  }
 8003c2e:	4618      	mov	r0, r3
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>:
#include <ArduinoJson/Namespace.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

#ifndef isdigit
inline bool isdigit(char c) {
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	4603      	mov	r3, r0
 8003c42:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	2b2f      	cmp	r3, #47	@ 0x2f
 8003c48:	d904      	bls.n	8003c54 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	2b39      	cmp	r3, #57	@ 0x39
 8003c4e:	d801      	bhi.n	8003c54 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1c>
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>:
  Double,
#endif
};

union NumberValue {
  NumberValue() {}
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>:
  NumberValue(float x) : asFloat(x) {}
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	ed87 0a00 	vstr	s0, [r7]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>:
  NumberValue(JsonInteger x) : asSignedInteger(x) {}
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	e9c7 2300 	strd	r2, r3, [r7]
 8003ca4:	68f9      	ldr	r1, [r7, #12]
 8003ca6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003caa:	e9c1 2300 	strd	r2, r3, [r1]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>:
  NumberValue(JsonUInt x) : asUnsignedInteger(x) {}
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	e9c7 2300 	strd	r2, r3, [r7]
 8003cc8:	68f9      	ldr	r1, [r7, #12]
 8003cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cce:	e9c1 2300 	strd	r2, r3, [r1]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  NumberValue(double x) : asDouble(x) {}
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	ed87 0b00 	vstr	d0, [r7]
 8003cec:	68f9      	ldr	r1, [r7, #12]
 8003cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cf2:	e9c1 2300 	strd	r2, r3, [r1]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>:
class Number {
  NumberType type_;
  NumberValue value_;

 public:
  Number() : type_(NumberType::Invalid) {}
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3308      	adds	r3, #8
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff ffa3 	bl	8003c62 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>:
  Number(float value) : type_(NumberType::Float), value_(value) {}
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	ed87 0a00 	vstr	s0, [r7]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	ed97 0a00 	vldr	s0, [r7]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff ff99 	bl	8003c78 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>:
  Number(JsonInteger value) : type_(NumberType::SignedInteger), value_(value) {}
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	e9c7 2300 	strd	r2, r3, [r7]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	701a      	strb	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f103 0108 	add.w	r1, r3, #8
 8003d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	f7ff ff93 	bl	8003c98 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>:
  Number(JsonUInt value) : type_(NumberType::UnsignedInteger), value_(value) {}
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	e9c7 2300 	strd	r2, r3, [r7]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f103 0108 	add.w	r1, r3, #8
 8003d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d98:	4608      	mov	r0, r1
 8003d9a:	f7ff ff8f 	bl	8003cbc <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  Number(double value) : type_(NumberType::Double), value_(value) {}
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	ed87 0b00 	vstr	d0, [r7]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2204      	movs	r2, #4
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	ed97 0b00 	vldr	d0, [r7]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff ff8c 	bl	8003ce0 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>:
      default:
        return T();
    }
  }

  NumberType type() const {
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
    return type_;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
  }
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>:

  JsonInteger asSignedInteger() const {
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::SignedInteger);
    return value_.asSignedInteger;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 8003df8:	4610      	mov	r0, r2
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>:

  JsonUInt asUnsignedInteger() const {
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::UnsignedInteger);
    return value_.asUnsignedInteger;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 8003e14:	4610      	mov	r0, r2
 8003e16:	4619      	mov	r1, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>:

  float asFloat() const {
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Float);
    return value_.asFloat;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	ee07 3a90 	vmov	s15, r3
  }
 8003e32:	eeb0 0a67 	vmov.f32	s0, s15
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>:

#if ARDUINOJSON_USE_DOUBLE
  double asDouble() const {
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Double);
    return value_.asDouble;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003e4e:	ec43 2b17 	vmov	d7, r2, r3
  }
 8003e52:	eeb0 0b47 	vmov.f64	d0, d7
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>:
#endif
};

inline Number parseNumber(const char* s) {
 8003e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e64:	b0a6      	sub	sp, #152	@ 0x98
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8003e6a:	64b9      	str	r1, [r7, #72]	@ 0x48
  using mantissa_t = largest_type<traits::mantissa_type, JsonUInt>;
  using exponent_t = traits::exponent_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  switch (*s) {
 8003e72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b2b      	cmp	r3, #43	@ 0x2b
 8003e78:	d008      	beq.n	8003e8c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c>
 8003e7a:	2b2d      	cmp	r3, #45	@ 0x2d
 8003e7c:	d10a      	bne.n	8003e94 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '-':
      is_negative = true;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      s++;
 8003e84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e86:	3301      	adds	r3, #1
 8003e88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e8a:	e003      	b.n	8003e94 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '+':
      s++;
 8003e8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e8e:	3301      	adds	r3, #1
 8003e90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e92:	bf00      	nop
  if (*s == 'i' || *s == 'I') {
    return Number(is_negative ? -traits::inf() : traits::inf());
  }
#endif

  if (!isdigit(*s) && *s != '.')
 8003e94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff fece 	bl	8003c3a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	f083 0301 	eor.w	r3, r3, #1
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 8003eaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b2e      	cmp	r3, #46	@ 0x2e
 8003eb0:	d001      	beq.n	8003eb6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x58>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x64>
    return Number();
 8003ebc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003ebe:	f7ff ff21 	bl	8003d04 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 8003ec2:	e1f5      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

  mantissa_t mantissa = 0;
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
  exponent_t exponent_offset = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  const mantissa_t maxUint = JsonUInt(-1);
 8003ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eda:	f04f 33ff 	mov.w	r3, #4294967295
 8003ede:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  while (isdigit(*s)) {
 8003ee2:	e054      	b.n	8003f8e <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x12e>
    uint8_t digit = uint8_t(*s - '0');
 8003ee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	3b30      	subs	r3, #48	@ 0x30
 8003eea:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (mantissa > maxUint / 10)
 8003eee:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003ef2:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8003ef6:	49ae      	ldr	r1, [pc, #696]	@ (80041b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x350>)
 8003ef8:	418b      	sbcs	r3, r1
 8003efa:	d251      	bcs.n	8003fa0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x140>
      break;
    mantissa *= 10;
 8003efc:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8003f00:	4622      	mov	r2, r4
 8003f02:	462b      	mov	r3, r5
 8003f04:	f04f 0000 	mov.w	r0, #0
 8003f08:	f04f 0100 	mov.w	r1, #0
 8003f0c:	0099      	lsls	r1, r3, #2
 8003f0e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003f12:	0090      	lsls	r0, r2, #2
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	eb12 0804 	adds.w	r8, r2, r4
 8003f1c:	eb43 0905 	adc.w	r9, r3, r5
 8003f20:	eb18 0308 	adds.w	r3, r8, r8
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	eb49 0309 	adc.w	r3, r9, r9
 8003f2a:	61fb      	str	r3, [r7, #28]
 8003f2c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003f30:	e9c7 8922 	strd	r8, r9, [r7, #136]	@ 0x88
    if (mantissa > maxUint - digit)
 8003f34:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003f38:	2200      	movs	r2, #0
 8003f3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f3c:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f3e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003f42:	460b      	mov	r3, r1
 8003f44:	43db      	mvns	r3, r3
 8003f46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f48:	4613      	mov	r3, r2
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f4e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003f52:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8003f56:	4621      	mov	r1, r4
 8003f58:	4291      	cmp	r1, r2
 8003f5a:	4629      	mov	r1, r5
 8003f5c:	eb71 0303 	sbcs.w	r3, r1, r3
 8003f60:	d320      	bcc.n	8003fa4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x144>
      break;
    mantissa += digit;
 8003f62:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003f66:	2200      	movs	r2, #0
 8003f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f6a:	637a      	str	r2, [r7, #52]	@ 0x34
 8003f6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003f70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f74:	4621      	mov	r1, r4
 8003f76:	1851      	adds	r1, r2, r1
 8003f78:	6139      	str	r1, [r7, #16]
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	414b      	adcs	r3, r1
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003f84:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    s++;
 8003f88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 8003f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff fe51 	bl	8003c3a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1a2      	bne.n	8003ee4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x84>
 8003f9e:	e002      	b.n	8003fa6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 8003fa0:	bf00      	nop
 8003fa2:	e000      	b.n	8003fa6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 8003fa4:	bf00      	nop
  }

  if (*s == '\0') {
 8003fa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d136      	bne.n	800401c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
    if (is_negative) {
 8003fae:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d019      	beq.n	8003fea <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x18a>
      const mantissa_t sintMantissaMax = mantissa_t(1)
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003fbe:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
                                         << (sizeof(JsonInteger) * 8 - 1);
      if (mantissa <= sintMantissaMax) {
 8003fc2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003fc6:	2a01      	cmp	r2, #1
 8003fc8:	f173 4300 	sbcs.w	r3, r3, #2147483648	@ 0x80000000
 8003fcc:	d226      	bcs.n	800401c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
        return Number(JsonInteger(~mantissa + 1));
 8003fce:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4250      	negs	r0, r2
 8003fd6:	62b8      	str	r0, [r7, #40]	@ 0x28
 8003fd8:	eb61 0303 	sbc.w	r3, r1, r3
 8003fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fe2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003fe4:	f7ff feb4 	bl	8003d50 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>
 8003fe8:	e162      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
      }
    } else {
      return Number(JsonUInt(mantissa));
 8003fea:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003fee:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003ff0:	f7ff fec4 	bl	8003d7c <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>
 8003ff4:	e15c      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
    }
  }

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8003ff6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8003ffa:	f04f 020a 	mov.w	r2, #10
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	f7fc fc9f 	bl	8000944 <__aeabi_uldivmod>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    exponent_offset++;
 800400e:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8004012:	b29b      	uxth	r3, r3
 8004014:	3301      	adds	r3, #1
 8004016:	b29b      	uxth	r3, r3
 8004018:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  while (mantissa > traits::mantissa_max) {
 800401c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004020:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004024:	d2e7      	bcs.n	8003ff6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x196>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8004026:	e009      	b.n	800403c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1dc>
    exponent_offset++;
 8004028:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 800402c:	b29b      	uxth	r3, r3
 800402e:	3301      	adds	r3, #1
 8004030:	b29b      	uxth	r3, r3
 8004032:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    s++;
 8004036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004038:	3301      	adds	r3, #1
 800403a:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 800403c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff fdfa 	bl	8003c3a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1ed      	bne.n	8004028 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1c8>
  }

  if (*s == '.') {
 800404c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b2e      	cmp	r3, #46	@ 0x2e
 8004052:	d14c      	bne.n	80040ee <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x28e>
    s++;
 8004054:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004056:	3301      	adds	r3, #1
 8004058:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 800405a:	e040      	b.n	80040de <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x27e>
      if (mantissa < traits::mantissa_max / 10) {
 800405c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004060:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8004064:	4953      	ldr	r1, [pc, #332]	@ (80041b4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x354>)
 8004066:	418b      	sbcs	r3, r1
 8004068:	d236      	bcs.n	80040d8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x278>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 800406a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800406e:	4622      	mov	r2, r4
 8004070:	462b      	mov	r3, r5
 8004072:	f04f 0000 	mov.w	r0, #0
 8004076:	f04f 0100 	mov.w	r1, #0
 800407a:	0099      	lsls	r1, r3, #2
 800407c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8004080:	0090      	lsls	r0, r2, #2
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	eb12 0a04 	adds.w	sl, r2, r4
 800408a:	eb43 0b05 	adc.w	fp, r3, r5
 800408e:	eb1a 030a 	adds.w	r3, sl, sl
 8004092:	60bb      	str	r3, [r7, #8]
 8004094:	eb4b 030b 	adc.w	r3, fp, fp
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800409e:	4652      	mov	r2, sl
 80040a0:	465b      	mov	r3, fp
 80040a2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80040a4:	7809      	ldrb	r1, [r1, #0]
 80040a6:	3930      	subs	r1, #48	@ 0x30
 80040a8:	b2c9      	uxtb	r1, r1
 80040aa:	b2c9      	uxtb	r1, r1
 80040ac:	2000      	movs	r0, #0
 80040ae:	6239      	str	r1, [r7, #32]
 80040b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80040b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80040b6:	4621      	mov	r1, r4
 80040b8:	1851      	adds	r1, r2, r1
 80040ba:	6039      	str	r1, [r7, #0]
 80040bc:	4629      	mov	r1, r5
 80040be:	414b      	adcs	r3, r1
 80040c0:	607b      	str	r3, [r7, #4]
 80040c2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80040c6:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
        exponent_offset--;
 80040ca:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
      }
      s++;
 80040d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040da:	3301      	adds	r3, #1
 80040dc:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 80040de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff fda9 	bl	8003c3a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1b6      	bne.n	800405c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1fc>
    }
  }

  int exponent = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (*s == 'e' || *s == 'E') {
 80040f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b65      	cmp	r3, #101	@ 0x65
 80040fa:	d003      	beq.n	8004104 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2a4>
 80040fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b45      	cmp	r3, #69	@ 0x45
 8004102:	d171      	bne.n	80041e8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
    s++;
 8004104:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004106:	3301      	adds	r3, #1
 8004108:	64bb      	str	r3, [r7, #72]	@ 0x48
    bool negative_exponent = false;
 800410a:	2300      	movs	r3, #0
 800410c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (*s == '-') {
 8004110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b2d      	cmp	r3, #45	@ 0x2d
 8004116:	d106      	bne.n	8004126 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c6>
      negative_exponent = true;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 800411e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004120:	3301      	adds	r3, #1
 8004122:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004124:	e04f      	b.n	80041c6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
    } else if (*s == '+') {
 8004126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b2b      	cmp	r3, #43	@ 0x2b
 800412c:	d14b      	bne.n	80041c6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      s++;
 800412e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004130:	3301      	adds	r3, #1
 8004132:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    while (isdigit(*s)) {
 8004134:	e047      	b.n	80041c6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      exponent = exponent * 10 + (*s - '0');
 8004136:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	461a      	mov	r2, r3
 8004144:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	3b30      	subs	r3, #48	@ 0x30
 800414a:	4413      	add	r3, r2
 800414c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      if (exponent + exponent_offset > traits::exponent_max) {
 8004150:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	@ 0x86
 8004154:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004158:	4413      	add	r3, r2
 800415a:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800415e:	dd2f      	ble.n	80041c0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x360>
        if (negative_exponent)
 8004160:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00e      	beq.n	8004186 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x326>
          return Number(is_negative ? -0.0f : 0.0f);
 8004168:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x316>
 8004170:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80041b8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x358>
 8004174:	e001      	b.n	800417a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x31a>
 8004176:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80041bc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x35c>
 800417a:	eeb0 0a67 	vmov.f32	s0, s15
 800417e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004180:	f7ff fdd1 	bl	8003d26 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
 8004184:	e094      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
        else
          return Number(is_negative ? -traits::inf() : traits::inf());
 8004186:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800418a:	2b00      	cmp	r3, #0
 800418c:	d006      	beq.n	800419c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x33c>
 800418e:	f000 fda7 	bl	8004ce0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 8004192:	eeb0 7b40 	vmov.f64	d7, d0
 8004196:	eeb1 7b47 	vneg.f64	d7, d7
 800419a:	e003      	b.n	80041a4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x344>
 800419c:	f000 fda0 	bl	8004ce0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 80041a0:	eeb0 7b40 	vmov.f64	d7, d0
 80041a4:	eeb0 0b47 	vmov.f64	d0, d7
 80041a8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80041aa:	f7ff fdfd 	bl	8003da8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 80041ae:	e07f      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
 80041b0:	19999999 	.word	0x19999999
 80041b4:	00019999 	.word	0x00019999
 80041b8:	80000000 	.word	0x80000000
 80041bc:	00000000 	.word	0x00000000
      }
      s++;
 80041c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041c2:	3301      	adds	r3, #1
 80041c4:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 80041c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff fd35 	bl	8003c3a <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1af      	bne.n	8004136 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2d6>
    }
    if (negative_exponent)
 80041d6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d004      	beq.n	80041e8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
      exponent = -exponent;
 80041de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041e2:	425b      	negs	r3, r3
 80041e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  }
  exponent += exponent_offset;
 80041e8:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 80041ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041f0:	4413      	add	r3, r2
 80041f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0')
 80041f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3a6>
    return Number();
 80041fe:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004200:	f7ff fd80 	bl	8003d04 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 8004204:	e054      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

#if ARDUINOJSON_USE_DOUBLE
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
                  exponent > FloatTraits<float>::exponent_max ||
 8004206:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800420a:	f113 0f26 	cmn.w	r3, #38	@ 0x26
 800420e:	db0a      	blt.n	8004226 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8004210:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004214:	2b26      	cmp	r3, #38	@ 0x26
 8004216:	dc06      	bgt.n	8004226 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
                  exponent > FloatTraits<float>::exponent_max ||
 8004218:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800421c:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8004220:	f173 0300 	sbcs.w	r3, r3, #0
 8004224:	d301      	bcc.n	800422a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3ca>
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3cc>
 800422a:	2300      	movs	r3, #0
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 800422c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                  mantissa > FloatTraits<float>::mantissa_max;
  if (isDouble) {
 8004230:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01e      	beq.n	8004276 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x416>
    auto final_result = make_float(double(mantissa), exponent);
 8004238:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800423c:	f7fc fa3e 	bl	80006bc <__aeabi_ul2d>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8004248:	ec43 2b10 	vmov	d0, r2, r3
 800424c:	f000 fd56 	bl	8004cfc <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>
 8004250:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    return Number(is_negative ? -final_result : final_result);
 8004254:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004258:	2b00      	cmp	r3, #0
 800425a:	d004      	beq.n	8004266 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x406>
 800425c:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8004260:	eeb1 7b47 	vneg.f64	d7, d7
 8004264:	e001      	b.n	800426a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x40a>
 8004266:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 800426a:	eeb0 0b47 	vmov.f64	d0, d7
 800426e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004270:	f7ff fd9a 	bl	8003da8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 8004274:	e01c      	b.n	80042b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
  } else
#endif
  {
    auto final_result = make_float(float(mantissa), exponent);
 8004276:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800427a:	f7fc fb1d 	bl	80008b8 <__aeabi_ul2f>
 800427e:	4603      	mov	r3, r0
 8004280:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8004284:	ee00 3a10 	vmov	s0, r3
 8004288:	f000 fd79 	bl	8004d7e <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>
 800428c:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
    return Number(is_negative ? -final_result : final_result);
 8004290:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004294:	2b00      	cmp	r3, #0
 8004296:	d004      	beq.n	80042a2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x442>
 8004298:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800429c:	eef1 7a67 	vneg.f32	s15, s15
 80042a0:	e001      	b.n	80042a6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x446>
 80042a2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80042a6:	eeb0 0a67 	vmov.f32	s0, s15
 80042aa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80042ac:	f7ff fd3b 	bl	8003d26 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
  }
}
 80042b0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80042b2:	3798      	adds	r7, #152	@ 0x98
 80042b4:	46bd      	mov	sp, r7
 80042b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ba:	bf00      	nop

080042bc <_ZN6Remora11setBaseFreqEm>:

public:

	Remora();
	void run();
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	621a      	str	r2, [r3, #32]
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <_ZN6Remora12setServoFreqEm>:
    void setServoFreq(uint32_t freq) { servoFreq = freq; }
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <_ZN17JsonConfigHandlerC1EP6Remora>:

#include "jsonConfigHandler.h"
#include "../remora.h"


JsonConfigHandler::JsonConfigHandler(Remora* _remora) :
 80042f4:	b590      	push	{r4, r7, lr}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
	remoraInstance(_remora),
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	601a      	str	r2, [r3, #0]
	configError(false)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	1d1c      	adds	r4, r3, #4
 8004308:	f107 030c 	add.w	r3, r7, #12
 800430c:	4618      	mov	r0, r3
 800430e:	f018 fad8 	bl	801c8c2 <_ZNSaIcEC1Ev>
 8004312:	f107 030c 	add.w	r3, r7, #12
 8004316:	461a      	mov	r2, r3
 8004318:	4914      	ldr	r1, [pc, #80]	@ (800436c <_ZN17JsonConfigHandlerC1EP6Remora+0x78>)
 800431a:	4620      	mov	r0, r4
 800431c:	f000 fd70 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8004320:	f107 030c 	add.w	r3, r7, #12
 8004324:	4618      	mov	r0, r3
 8004326:	f018 facd 	bl	801c8c4 <_ZNSaIcED1Ev>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a10      	ldr	r2, [pc, #64]	@ (8004370 <_ZN17JsonConfigHandlerC1EP6Remora+0x7c>)
 800432e:	61da      	str	r2, [r3, #28]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f103 0420 	add.w	r4, r3, #32
 8004336:	f7fe f953 	bl	80025e0 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>
 800433a:	4603      	mov	r3, r0
 800433c:	4619      	mov	r1, r3
 800433e:	4620      	mov	r0, r4
 8004340:	f7fe feeb 	bl	800311a <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3360      	adds	r3, #96	@ 0x60
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe fea8 	bl	800309e <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
{
	loadConfiguration();
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f80c 	bl	8004374 <_ZN17JsonConfigHandler17loadConfigurationEv>
    updateThreadFreq();
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f82b 	bl	80043b8 <_ZN17JsonConfigHandler16updateThreadFreqEv>
}
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4618      	mov	r0, r3
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	bd90      	pop	{r4, r7, pc}
 800436c:	0801e160 	.word	0x0801e160
 8004370:	0801e164 	.word	0x0801e164

08004374 <_ZN17JsonConfigHandler17loadConfigurationEv>:

bool JsonConfigHandler::loadConfiguration() {
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	// Clear any existing configuration
    jsonContent.clear();
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	4618      	mov	r0, r3
 8004382:	f018 fbc9 	bl	801cb18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
    doc.clear();
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3320      	adds	r3, #32
 800438a:	4618      	mov	r0, r3
 800438c:	f7fe fee5 	bl	800315a <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Read and parse the configuration file
    if (!readFileContents()) {
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f903 	bl	800459c <_ZN17JsonConfigHandler16readFileContentsEv>
 8004396:	4603      	mov	r3, r0
 8004398:	f083 0301 	eor.w	r3, r3, #1
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <_ZN17JsonConfigHandler17loadConfigurationEv+0x32>
        return false;
 80043a2:	2300      	movs	r3, #0
 80043a4:	e003      	b.n	80043ae <_ZN17JsonConfigHandler17loadConfigurationEv+0x3a>
    }
    parseJson();
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f9c8 	bl	800473c <_ZN17JsonConfigHandler9parseJsonEv>
    return true;
 80043ac:	2301      	movs	r3, #1
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <_ZN17JsonConfigHandler16updateThreadFreqEv>:


void JsonConfigHandler::updateThreadFreq() {
 80043b8:	b590      	push	{r4, r7, lr}
 80043ba:	b0a1      	sub	sp, #132	@ 0x84
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
    if (configError) return;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f040 808e 	bne.w	80044e8 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x130>

    printf("\n5. Updating thread frequencies\n");
 80043cc:	4848      	ldr	r0, [pc, #288]	@ (80044f0 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x138>)
 80043ce:	f018 ff65 	bl	801d29c <puts>

    JsonArray Threads = doc["Threads"];
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f103 0120 	add.w	r1, r3, #32
 80043d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043dc:	4a45      	ldr	r2, [pc, #276]	@ (80044f4 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x13c>)
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fd38 	bl	8004e54 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 80043e4:	f107 031c 	add.w	r3, r7, #28
 80043e8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80043ec:	4611      	mov	r1, r2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fd49 	bl	8004e86 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 80043f4:	f107 0310 	add.w	r3, r7, #16
 80043f8:	f107 021c 	add.w	r2, r7, #28
 80043fc:	4611      	mov	r1, r2
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fe fe1e 	bl	8003040 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>
 8004404:	e05c      	b.n	80044c0 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x108>
        thread = *it;
 8004406:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800440a:	f107 0210 	add.w	r2, r7, #16
 800440e:	4611      	mov	r1, r2
 8004410:	4618      	mov	r0, r3
 8004412:	f7fe fdbd 	bl	8002f90 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>
 8004416:	68fc      	ldr	r4, [r7, #12]
 8004418:	463b      	mov	r3, r7
 800441a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800441e:	4611      	mov	r1, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fd3f 	bl	8004ea4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8004426:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 800442a:	463a      	mov	r2, r7
 800442c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004430:	e883 0003 	stmia.w	r3, {r0, r1}
        const char* configor = thread["Thread"];
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800443a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800443e:	4a2e      	ldr	r2, [pc, #184]	@ (80044f8 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x140>)
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fd3e 	bl	8004ec2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8004446:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fd5e 	bl	8004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8004450:	67f8      	str	r0, [r7, #124]	@ 0x7c
        uint32_t    freq = thread["Frequency"];
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8004458:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800445c:	4a27      	ldr	r2, [pc, #156]	@ (80044fc <_ZN17JsonConfigHandler16updateThreadFreqEv+0x144>)
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fd60 	bl	8004f24 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8004464:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fd80 	bl	8004f6e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 800446e:	67b8      	str	r0, [r7, #120]	@ 0x78
        if (!strcmp(configor,"Base")) {
 8004470:	4923      	ldr	r1, [pc, #140]	@ (8004500 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x148>)
 8004472:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004474:	f7fb ff34 	bl	80002e0 <strcmp>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xdc>
            printf("	Setting BASE thread frequency to %lu\n", freq);
 800447e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004480:	4820      	ldr	r0, [pc, #128]	@ (8004504 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x14c>)
 8004482:	f018 fe9b 	bl	801d1bc <iprintf>
            remoraInstance->setBaseFreq(freq);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff ff15 	bl	80042bc <_ZN6Remora11setBaseFreqEm>
 8004492:	e010      	b.n	80044b6 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
        }
        else if (!strcmp(configor,"Servo")) {
 8004494:	491c      	ldr	r1, [pc, #112]	@ (8004508 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x150>)
 8004496:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004498:	f7fb ff22 	bl	80002e0 <strcmp>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
            printf("	Setting SERVO thread frequency to %lu\n", freq);
 80044a2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80044a4:	4819      	ldr	r0, [pc, #100]	@ (800450c <_ZN17JsonConfigHandler16updateThreadFreqEv+0x154>)
 80044a6:	f018 fe89 	bl	801d1bc <iprintf>
            remoraInstance->setServoFreq(freq);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff ff11 	bl	80042d8 <_ZN6Remora12setServoFreqEm>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 80044b6:	f107 0310 	add.w	r3, r7, #16
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe fd8c 	bl	8002fd8 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>
 80044c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80044c4:	f107 021c 	add.w	r2, r7, #28
 80044c8:	4611      	mov	r1, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe fddb 	bl	8003086 <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>
 80044d0:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80044d4:	f107 0310 	add.w	r3, r7, #16
 80044d8:	4611      	mov	r1, r2
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fe fd6c 	bl	8002fb8 <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d18f      	bne.n	8004406 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x4e>
 80044e6:	e000      	b.n	80044ea <_ZN17JsonConfigHandler16updateThreadFreqEv+0x132>
    if (configError) return;
 80044e8:	bf00      	nop
        }
    }
}
 80044ea:	3784      	adds	r7, #132	@ 0x84
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd90      	pop	{r4, r7, pc}
 80044f0:	0801e170 	.word	0x0801e170
 80044f4:	0801e190 	.word	0x0801e190
 80044f8:	0801e198 	.word	0x0801e198
 80044fc:	0801e1a0 	.word	0x0801e1a0
 8004500:	0801e1ac 	.word	0x0801e1ac
 8004504:	0801e1b4 	.word	0x0801e1b4
 8004508:	0801e1dc 	.word	0x0801e1dc
 800450c:	0801e1e4 	.word	0x0801e1e4

08004510 <_ZN17JsonConfigHandler10getModulesEv>:


JsonArray JsonConfigHandler::getModules() {
 8004510:	b590      	push	{r4, r7, lr}
 8004512:	b08f      	sub	sp, #60	@ 0x3c
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
	if (doc["Modules"].is<JsonVariant>())
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f103 0120 	add.w	r1, r3, #32
 8004520:	f107 0308 	add.w	r3, r7, #8
 8004524:	4a1c      	ldr	r2, [pc, #112]	@ (8004598 <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fc94 	bl	8004e54 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 800452c:	f107 0308 	add.w	r3, r7, #8
 8004530:	637b      	str	r3, [r7, #52]	@ 0x34
 8004532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004534:	633b      	str	r3, [r7, #48]	@ 0x30
  return containsKey(key.template as<const char*>());
}

template <typename TDerived>
inline JsonVariant VariantRefBase<TDerived>::getVariant() const {
  return JsonVariant(getData(), getResourceManager());
 8004536:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004538:	f001 fc9a 	bl	8005e70 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 800453c:	4604      	mov	r4, r0
 800453e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004540:	f001 fca6 	bl	8005e90 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 8004544:	4602      	mov	r2, r0
 8004546:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800454a:	4621      	mov	r1, r4
 800454c:	4618      	mov	r0, r3
 800454e:	f7fe fcb9 	bl	8002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }

  template <typename T>
  FORCE_INLINE enable_if_t<is_same<T, JsonVariant>::value, T> getVariant()
      const {
    return getVariant();
 8004552:	bf00      	nop
template <typename TDerived>
template <typename T>
inline bool VariantRefBase<TDerived>::is() const {
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::checkJson)>::arg1_type;
  return Converter<T>::checkJson(getVariant<variant_type>());
 8004554:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004558:	e893 0003 	ldmia.w	r3, {r0, r1}
 800455c:	f7fe fcdd 	bl	8002f1a <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>
 8004560:	4603      	mov	r3, r0
 8004562:	bf00      	nop
 8004564:	2b00      	cmp	r3, #0
 8004566:	d010      	beq.n	800458a <_ZN17JsonConfigHandler10getModulesEv+0x7a>
        return doc["Modules"].as<JsonArray>();
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	f103 0120 	add.w	r1, r3, #32
 800456e:	f107 0318 	add.w	r3, r7, #24
 8004572:	4a09      	ldr	r2, [pc, #36]	@ (8004598 <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fc6d 	bl	8004e54 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f107 0218 	add.w	r2, r7, #24
 8004580:	4611      	mov	r1, r2
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fcff 	bl	8004f86 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 8004588:	e002      	b.n	8004590 <_ZN17JsonConfigHandler10getModulesEv+0x80>
    else
        return JsonArray();
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fe fd34 	bl	8002ff8 <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>
}
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	373c      	adds	r7, #60	@ 0x3c
 8004594:	46bd      	mov	sp, r7
 8004596:	bd90      	pop	{r4, r7, pc}
 8004598:	0801e20c 	.word	0x0801e20c

0800459c <_ZN17JsonConfigHandler16readFileContentsEv>:
    }
    return JsonObject(); // Return empty object if not found
}
*/

bool JsonConfigHandler::readFileContents() {
 800459c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045a0:	b08f      	sub	sp, #60	@ 0x3c
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]

	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 80045a6:	485a      	ldr	r0, [pc, #360]	@ (8004710 <_ZN17JsonConfigHandler16readFileContentsEv+0x174>)
 80045a8:	f018 fe78 	bl	801d29c <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 80045ac:	4859      	ldr	r0, [pc, #356]	@ (8004714 <_ZN17JsonConfigHandler16readFileContentsEv+0x178>)
 80045ae:	f018 fe75 	bl	801d29c <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80045b2:	2200      	movs	r2, #0
 80045b4:	4958      	ldr	r1, [pc, #352]	@ (8004718 <_ZN17JsonConfigHandler16readFileContentsEv+0x17c>)
 80045b6:	4859      	ldr	r0, [pc, #356]	@ (800471c <_ZN17JsonConfigHandler16readFileContentsEv+0x180>)
 80045b8:	f017 fd1e 	bl	801bff8 <f_mount>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	bf14      	ite	ne
 80045c2:	2301      	movne	r3, #1
 80045c4:	2300      	moveq	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <_ZN17JsonConfigHandler16readFileContentsEv+0x3c>
	{
    	printf("	Failed to mount SD card\n\r");
 80045cc:	4854      	ldr	r0, [pc, #336]	@ (8004720 <_ZN17JsonConfigHandler16readFileContentsEv+0x184>)
 80045ce:	f018 fdf5 	bl	801d1bc <iprintf>
    	Error_Handler();
 80045d2:	f003 fc4b 	bl	8007e6c <Error_Handler>
 80045d6:	e094      	b.n	8004702 <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
	}
    else
    {
		//Open file for reading
		if(f_open(&SDFile, filename, FA_READ) != FR_OK)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	2201      	movs	r2, #1
 80045de:	4619      	mov	r1, r3
 80045e0:	4850      	ldr	r0, [pc, #320]	@ (8004724 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 80045e2:	f017 fd4f 	bl	801c084 <f_open>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bf14      	ite	ne
 80045ec:	2301      	movne	r3, #1
 80045ee:	2300      	moveq	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <_ZN17JsonConfigHandler16readFileContentsEv+0x66>
		{
			printf("	Failed to open JSON config file\n");
 80045f6:	484c      	ldr	r0, [pc, #304]	@ (8004728 <_ZN17JsonConfigHandler16readFileContentsEv+0x18c>)
 80045f8:	f018 fe50 	bl	801d29c <puts>
			Error_Handler();
 80045fc:	f003 fc36 	bl	8007e6c <Error_Handler>
 8004600:	e07f      	b.n	8004702 <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
			    // Remove comments from next line to print out the JSON config file
			    printf("\n%s\n", jsonContent.c_str());
			}

			f_close(&SDFile);
		}
 8004602:	466b      	mov	r3, sp
 8004604:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 8004606:	4b47      	ldr	r3, [pc, #284]	@ (8004724 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	633b      	str	r3, [r7, #48]	@ 0x30
			printf("	JSON config file lenght = %2ld\n", length);
 800460c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800460e:	4847      	ldr	r0, [pc, #284]	@ (800472c <_ZN17JsonConfigHandler16readFileContentsEv+0x190>)
 8004610:	f018 fdd4 	bl	801d1bc <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 8004614:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004616:	1e4b      	subs	r3, r1, #1
 8004618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800461a:	460a      	mov	r2, r1
 800461c:	2300      	movs	r3, #0
 800461e:	4690      	mov	r8, r2
 8004620:	4699      	mov	r9, r3
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	f04f 0300 	mov.w	r3, #0
 800462a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800462e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004632:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004636:	460a      	mov	r2, r1
 8004638:	2300      	movs	r3, #0
 800463a:	4614      	mov	r4, r2
 800463c:	461d      	mov	r5, r3
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	00eb      	lsls	r3, r5, #3
 8004648:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800464c:	00e2      	lsls	r2, r4, #3
 800464e:	460b      	mov	r3, r1
 8004650:	3318      	adds	r3, #24
 8004652:	3307      	adds	r3, #7
 8004654:	08db      	lsrs	r3, r3, #3
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	ebad 0d03 	sub.w	sp, sp, r3
 800465c:	466b      	mov	r3, sp
 800465e:	331f      	adds	r3, #31
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	015b      	lsls	r3, r3, #5
 8004664:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 8004666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004668:	f107 030c 	add.w	r3, r7, #12
 800466c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800466e:	482d      	ldr	r0, [pc, #180]	@ (8004724 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8004670:	f017 fec2 	bl	801c3f8 <f_read>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	bf14      	ite	ne
 800467a:	2301      	movne	r3, #1
 800467c:	2300      	moveq	r3, #0
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <_ZN17JsonConfigHandler16readFileContentsEv+0xf0>
				printf("	JSON config file read FAILURE\n");
 8004684:	482a      	ldr	r0, [pc, #168]	@ (8004730 <_ZN17JsonConfigHandler16readFileContentsEv+0x194>)
 8004686:	f018 fe09 	bl	801d29c <puts>
 800468a:	e036      	b.n	80046fa <_ZN17JsonConfigHandler16readFileContentsEv+0x15e>
				printf("	JSON config file read SUCCESS!\n");
 800468c:	4829      	ldr	r0, [pc, #164]	@ (8004734 <_ZN17JsonConfigHandler16readFileContentsEv+0x198>)
 800468e:	f018 fe05 	bl	801d29c <puts>
				jsonContent.reserve(length + 1);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	1d1a      	adds	r2, r3, #4
 8004696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004698:	3301      	adds	r3, #1
 800469a:	4619      	mov	r1, r3
 800469c:	4610      	mov	r0, r2
 800469e:	f018 fa20 	bl	801cae2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 80046a2:	2300      	movs	r3, #0
 80046a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80046a6:	e01a      	b.n	80046de <_ZN17JsonConfigHandler16readFileContentsEv+0x142>
			    	jsonContent = jsonContent + rtext[i];
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	1d19      	adds	r1, r3, #4
 80046ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b0:	4413      	add	r3, r2
 80046b2:	781a      	ldrb	r2, [r3, #0]
 80046b4:	f107 0310 	add.w	r3, r7, #16
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fc88 	bl	8004fce <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3304      	adds	r3, #4
 80046c2:	f107 0210 	add.w	r2, r7, #16
 80046c6:	4611      	mov	r1, r2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f018 f99b 	bl	801ca04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80046ce:	f107 0310 	add.w	r3, r7, #16
 80046d2:	4618      	mov	r0, r3
 80046d4:	f018 f990 	bl	801c9f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 80046d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046da:	3301      	adds	r3, #1
 80046dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80046de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e2:	429a      	cmp	r2, r3
 80046e4:	dbe0      	blt.n	80046a8 <_ZN17JsonConfigHandler16readFileContentsEv+0x10c>
			    printf("\n%s\n", jsonContent.c_str());
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3304      	adds	r3, #4
 80046ea:	4618      	mov	r0, r3
 80046ec:	f018 fa64 	bl	801cbb8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80046f0:	4603      	mov	r3, r0
 80046f2:	4619      	mov	r1, r3
 80046f4:	4810      	ldr	r0, [pc, #64]	@ (8004738 <_ZN17JsonConfigHandler16readFileContentsEv+0x19c>)
 80046f6:	f018 fd61 	bl	801d1bc <iprintf>
			f_close(&SDFile);
 80046fa:	480a      	ldr	r0, [pc, #40]	@ (8004724 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 80046fc:	f018 f839 	bl	801c772 <f_close>
 8004700:	46b5      	mov	sp, r6
    }

	return true;
 8004702:	2301      	movs	r3, #1
}
 8004704:	4618      	mov	r0, r3
 8004706:	373c      	adds	r7, #60	@ 0x3c
 8004708:	46bd      	mov	sp, r7
 800470a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800470e:	bf00      	nop
 8004710:	0801e214 	.word	0x0801e214
 8004714:	0801e238 	.word	0x0801e238
 8004718:	24000464 	.word	0x24000464
 800471c:	24000468 	.word	0x24000468
 8004720:	0801e258 	.word	0x0801e258
 8004724:	24000698 	.word	0x24000698
 8004728:	0801e274 	.word	0x0801e274
 800472c:	0801e298 	.word	0x0801e298
 8004730:	0801e2bc 	.word	0x0801e2bc
 8004734:	0801e2dc 	.word	0x0801e2dc
 8004738:	0801e2fc 	.word	0x0801e2fc

0800473c <_ZN17JsonConfigHandler9parseJsonEv>:


bool JsonConfigHandler::parseJson() {
 800473c:	b590      	push	{r4, r7, lr}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	
	printf("\n3. Parsing json configuration file\n");
 8004744:	482a      	ldr	r0, [pc, #168]	@ (80047f0 <_ZN17JsonConfigHandler9parseJsonEv+0xb4>)
 8004746:	f018 fda9 	bl	801d29c <puts>
	
    // Clear any existing parsed data
    doc.clear();
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3320      	adds	r3, #32
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe fd03 	bl	800315a <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Parse JSON
    DeserializationError error = deserializeJson(doc, jsonContent.c_str());
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f103 0420 	add.w	r4, r3, #32
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3304      	adds	r3, #4
 800475e:	4618      	mov	r0, r3
 8004760:	f018 fa2a 	bl	801cbb8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004764:	4603      	mov	r3, r0
 8004766:	4619      	mov	r1, r3
 8004768:	4620      	mov	r0, r4
 800476a:	f000 fc46 	bl	8004ffa <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>
 800476e:	4603      	mov	r3, r0
 8004770:	733b      	strb	r3, [r7, #12]

    printf("	Config deserialisation - ");
 8004772:	4820      	ldr	r0, [pc, #128]	@ (80047f4 <_ZN17JsonConfigHandler9parseJsonEv+0xb8>)
 8004774:	f018 fd22 	bl	801d1bc <iprintf>

    switch (error.code())
 8004778:	f107 030c 	add.w	r3, r7, #12
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff f936 	bl	80039ee <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>
 8004782:	4603      	mov	r3, r0
 8004784:	2b04      	cmp	r3, #4
 8004786:	d012      	beq.n	80047ae <_ZN17JsonConfigHandler9parseJsonEv+0x72>
 8004788:	2b04      	cmp	r3, #4
 800478a:	dc18      	bgt.n	80047be <_ZN17JsonConfigHandler9parseJsonEv+0x82>
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <_ZN17JsonConfigHandler9parseJsonEv+0x5a>
 8004790:	2b03      	cmp	r3, #3
 8004792:	d004      	beq.n	800479e <_ZN17JsonConfigHandler9parseJsonEv+0x62>
 8004794:	e013      	b.n	80047be <_ZN17JsonConfigHandler9parseJsonEv+0x82>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 8004796:	4818      	ldr	r0, [pc, #96]	@ (80047f8 <_ZN17JsonConfigHandler9parseJsonEv+0xbc>)
 8004798:	f018 fd80 	bl	801d29c <puts>
            break;
 800479c:	e023      	b.n	80047e6 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 800479e:	4817      	ldr	r0, [pc, #92]	@ (80047fc <_ZN17JsonConfigHandler9parseJsonEv+0xc0>)
 80047a0:	f018 fd7c 	bl	801d29c <puts>
            configError = true;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 80047ac:	e01b      	b.n	80047e6 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 80047ae:	4814      	ldr	r0, [pc, #80]	@ (8004800 <_ZN17JsonConfigHandler9parseJsonEv+0xc4>)
 80047b0:	f018 fd74 	bl	801d29c <puts>
            configError = true;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 80047bc:	e013      	b.n	80047e6 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        default:
            printf("Deserialization failed: ");
 80047be:	4811      	ldr	r0, [pc, #68]	@ (8004804 <_ZN17JsonConfigHandler9parseJsonEv+0xc8>)
 80047c0:	f018 fcfc 	bl	801d1bc <iprintf>
            printf(error.c_str());
 80047c4:	f107 030c 	add.w	r3, r7, #12
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff f91d 	bl	8003a08 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>
 80047ce:	4603      	mov	r3, r0
 80047d0:	4618      	mov	r0, r3
 80047d2:	f018 fcf3 	bl	801d1bc <iprintf>
            printf("\n");
 80047d6:	200a      	movs	r0, #10
 80047d8:	f018 fd02 	bl	801d1e0 <putchar>
            configError = true;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 80047e4:	bf00      	nop
    }

    return true;
 80047e6:	2301      	movs	r3, #1
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd90      	pop	{r4, r7, pc}
 80047f0:	0801e304 	.word	0x0801e304
 80047f4:	0801e328 	.word	0x0801e328
 80047f8:	0801e344 	.word	0x0801e344
 80047fc:	0801e360 	.word	0x0801e360
 8004800:	0801e370 	.word	0x0801e370
 8004804:	0801e384 	.word	0x0801e384

08004808 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8004814:	e002      	b.n	800481c <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x14>
        ++__i;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3301      	adds	r3, #1
 800481a:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4413      	add	r3, r2
 8004822:	2200      	movs	r2, #0
 8004824:	72fa      	strb	r2, [r7, #11]
 8004826:	f107 020b 	add.w	r2, r7, #11
 800482a:	4611      	mov	r1, r2
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fbf7 	bl	8005020 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 8004832:	4603      	mov	r3, r0
 8004834:	f083 0301 	eor.w	r3, r3, #1
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1eb      	bne.n	8004816 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xe>
      return __i;
 800483e:	68fb      	ldr	r3, [r7, #12]
    }
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	4611      	mov	r1, r2
 8004854:	461a      	mov	r2, r3
 8004856:	460b      	mov	r3, r1
 8004858:	80fb      	strh	r3, [r7, #6]
 800485a:	4613      	mov	r3, r2
 800485c:	717b      	strb	r3, [r7, #5]
      : str_(data, size_t(sz), isStatic) {}
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	88fa      	ldrh	r2, [r7, #6]
 8004862:	797b      	ldrb	r3, [r7, #5]
 8004864:	68b9      	ldr	r1, [r7, #8]
 8004866:	f7fd ff3b 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>:
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
    ARDUINOJSON_ASSERT(poolIndex < count_);
    return pools_[poolIndex].getSlot(indexInPool);
  }

  void clear(Allocator* allocator) {
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
    for (PoolCount i = 0; i < count_; i++)
 800487e:	2300      	movs	r3, #0
 8004880:	81fb      	strh	r3, [r7, #14]
 8004882:	e00b      	b.n	800489c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x28>
      pools_[i].destroy(allocator);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1a      	ldr	r2, [r3, #32]
 8004888:	89fb      	ldrh	r3, [r7, #14]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4413      	add	r3, r2
 800488e:	6839      	ldr	r1, [r7, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fc40 	bl	8005116 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>
    for (PoolCount i = 0; i < count_; i++)
 8004896:	89fb      	ldrh	r3, [r7, #14]
 8004898:	3301      	adds	r3, #1
 800489a:	81fb      	strh	r3, [r7, #14]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80048a0:	89fa      	ldrh	r2, [r7, #14]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d3ee      	bcc.n	8004884 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x10>
    count_ = 0;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	849a      	strh	r2, [r3, #36]	@ 0x24
    freeList_ = NULL_SLOT;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (pools_ != preallocatedPools_) {
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1a      	ldr	r2, [r3, #32]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d00e      	beq.n	80048dc <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x68>
      allocator->deallocate(pools_);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3304      	adds	r3, #4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6a12      	ldr	r2, [r2, #32]
 80048ca:	4611      	mov	r1, r2
 80048cc:	6838      	ldr	r0, [r7, #0]
 80048ce:	4798      	blx	r3
      pools_ = preallocatedPools_;
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	621a      	str	r2, [r3, #32]
      capacity_ = ARDUINOJSON_INITIAL_POOL_COUNT;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2204      	movs	r2, #4
 80048da:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 80048dc:	bf00      	nop
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:

  size_t size() const {
    return Pool::slotsToBytes(usage());
  }

  void shrinkToFit(Allocator* allocator) {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
    if (count_ > 0)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00d      	beq.n	8004912 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x2e>
      pools_[count_ - 1].shrinkToFit(allocator);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1a      	ldr	r2, [r3, #32]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80048fe:	4619      	mov	r1, r3
 8004900:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8004904:	440b      	add	r3, r1
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	4413      	add	r3, r2
 800490a:	6839      	ldr	r1, [r7, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fc2e 	bl	800516e <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
    if (pools_ != preallocatedPools_ && count_ != capacity_) {
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1a      	ldr	r2, [r3, #32]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	429a      	cmp	r2, r3
 800491a:	d017      	beq.n	800494c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004924:	429a      	cmp	r2, r3
 8004926:	d011      	beq.n	800494c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
      pools_ = static_cast<Pool*>(
          allocator->reallocate(pools_, count_ * sizeof(Pool)));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3308      	adds	r3, #8
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6a11      	ldr	r1, [r2, #32]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8004938:	00d2      	lsls	r2, r2, #3
 800493a:	6838      	ldr	r0, [r7, #0]
 800493c:	4798      	blx	r3
 800493e:	4602      	mov	r2, r0
      pools_ = static_cast<Pool*>(
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	621a      	str	r2, [r3, #32]
      ARDUINOJSON_ASSERT(pools_ != nullptr);  // realloc to smaller can't fail
      capacity_ = count_;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
      -> decltype(client.getResourceManager()) {
    return client.getResourceManager();
  }

  template <typename TClient>
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
    return client.getData();
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7fe fad0 	bl	8002f02 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 8004962:	4603      	mov	r3, r0
  }
 8004964:	4618      	mov	r0, r3
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
    return client.getData();
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7fe fa8d 	bl	8002e94 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>
 800497a:	4603      	mov	r3, r0
  }
 800497c:	4618      	mov	r0, r3
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7fe fa8d 	bl	8002eac <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>
 8004992:	4603      	mov	r3, r0
  }
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
    ARDUINOJSON_ASSERT((p == nullptr) == (id == NULL_SLOT));
  }

  explicit operator bool() const {
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	bf14      	ite	ne
 80049ac:	2301      	movne	r3, #1
 80049ae:	2300      	moveq	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
  }
 80049b2:	4618      	mov	r0, r3
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>:

  SlotId id() const {
    return id_;
  }

  T* ptr() const {
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
    return ptr_;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
  }
 80049ca:	4618      	mov	r0, r3
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>:
  SlotId id() const {
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
    return id_;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	889b      	ldrh	r3, [r3, #4]
  }
 80049e2:	4618      	mov	r0, r3
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>:

  T* operator->() const {
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(ptr_ != nullptr);
    return ptr_;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
  }
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8004a06:	b480      	push	{r7}
 8004a08:	b085      	sub	sp, #20
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	60f8      	str	r0, [r7, #12]
 8004a0e:	60b9      	str	r1, [r7, #8]
 8004a10:	4613      	mov	r3, r2
 8004a12:	80fb      	strh	r3, [r7, #6]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	88fa      	ldrh	r2, [r7, #6]
 8004a1e:	809a      	strh	r2, [r3, #4]
  }
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a42:	809a      	strh	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4618      	mov	r0, r3
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>:
  Slot<T> allocSlot(Allocator* allocator) {
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b088      	sub	sp, #32
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	607a      	str	r2, [r7, #4]
    if (freeList_ != NULL_SLOT) {
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d005      	beq.n	8004a76 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x24>
      return allocFromFreeList();
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fbda 	bl	8005228 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>
 8004a74:	e02c      	b.n	8004ad0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    if (count_) {
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d016      	beq.n	8004aac <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
      auto slot = allocFromLastPool();
 8004a7e:	f107 0314 	add.w	r3, r7, #20
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fbec 	bl	8005262 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
      if (slot)
 8004a8a:	f107 0314 	add.w	r3, r7, #20
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 f822 	bl	8004ad8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d008      	beq.n	8004aac <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
        return slot;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	f107 0314 	add.w	r3, r7, #20
 8004aa2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004aa6:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 8004aaa:	e011      	b.n	8004ad0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    auto pool = addPool(allocator);
 8004aac:	6879      	ldr	r1, [r7, #4]
 8004aae:	68b8      	ldr	r0, [r7, #8]
 8004ab0:	f000 fc14 	bl	80052dc <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>
 8004ab4:	61f8      	str	r0, [r7, #28]
    if (!pool)
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d103      	bne.n	8004ac4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x72>
      return {};
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 fc49 	bl	8005354 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8004ac2:	e005      	b.n	8004ad0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    return allocFromLastPool();
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fbca 	bl	8005262 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
 8004ace:	bf00      	nop
  }
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	3720      	adds	r7, #32
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>:
  explicit operator bool() const {
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf14      	ite	ne
 8004ae8:	2301      	movne	r3, #1
 8004aea:	2300      	moveq	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
  }
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>:
  T* operator->() const {
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
    return ptr_;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
  }
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>:
  SlotId id() const {
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
    return id_;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	889b      	ldrh	r3, [r3, #4]
  }
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	60fb      	str	r3, [r7, #12]
  return ac.data;
 8004b36:	68fb      	ldr	r3, [r7, #12]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	80fb      	strh	r3, [r7, #6]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	809a      	strh	r2, [r3, #4]
  }
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>:
  void freeSlot(Slot<T> slot) {
 8004b6c:	b590      	push	{r4, r7, lr}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	1d3b      	adds	r3, r7, #4
 8004b76:	e883 0006 	stmia.w	r3, {r1, r2}
    reinterpret_cast<FreeSlot*>(slot.ptr())->next = freeList_;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d1c      	ldrh	r4, [r3, #40]	@ 0x28
 8004b7e:	1d3b      	adds	r3, r7, #4
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 fbf9 	bl	8005378 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 8004b86:	4603      	mov	r3, r0
 8004b88:	4622      	mov	r2, r4
 8004b8a:	801a      	strh	r2, [r3, #0]
    freeList_ = slot.id();
 8004b8c:	1d3b      	adds	r3, r7, #4
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff ffbf 	bl	8004b12 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8004b94:	4603      	mov	r3, r0
 8004b96:	461a      	mov	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }
 8004b9c:	bf00      	nop
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd90      	pop	{r4, r7, pc}

08004ba4 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	807b      	strh	r3, [r7, #2]
    if (id == NULL_SLOT)
 8004bb0:	887b      	ldrh	r3, [r7, #2]
 8004bb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d101      	bne.n	8004bbe <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x1a>
      return nullptr;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e012      	b.n	8004be4 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x40>
    auto poolIndex = SlotId(id / ARDUINOJSON_POOL_CAPACITY);
 8004bbe:	887b      	ldrh	r3, [r7, #2]
 8004bc0:	09db      	lsrs	r3, r3, #7
 8004bc2:	81fb      	strh	r3, [r7, #14]
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
 8004bc4:	887b      	ldrh	r3, [r7, #2]
 8004bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bca:	81bb      	strh	r3, [r7, #12]
    return pools_[poolIndex].getSlot(indexInPool);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1a      	ldr	r2, [r3, #32]
 8004bd0:	89fb      	ldrh	r3, [r7, #14]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	89ba      	ldrh	r2, [r7, #12]
 8004bd8:	4611      	mov	r1, r2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fbd8 	bl	8005390 <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8004be0:	4603      	mov	r3, r0
 8004be2:	bf00      	nop
  }
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c00:	809a      	strh	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	80fb      	strh	r3, [r7, #6]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	88fa      	ldrh	r2, [r7, #6]
 8004c28:	809a      	strh	r2, [r3, #4]
  }
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>:
AdaptedString<TChar*> adaptString(TChar* p) {
  return StringAdapter<TChar*>::adapt(p);
}

template <typename TChar>
AdaptedString<TChar*> adaptString(TChar* p, size_t n) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  return SizedStringAdapter<TChar*>::adapt(p, n);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fbe6 	bl	800541c <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>
 8004c50:	bf00      	nop
}
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* getString(const TAdaptedString& str) const {
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b082      	sub	sp, #8
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	6039      	str	r1, [r7, #0]
    return stringPool_.get(str);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3308      	adds	r3, #8
 8004c68:	6839      	ldr	r1, [r7, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fbe6 	bl	800543c <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 8004c70:	4603      	mov	r3, r0
  }
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
 8004c86:	70fb      	strb	r3, [r7, #3]
      : str_(data, size_t(sz), isStatic) {}
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	78fb      	ldrb	r3, [r7, #3]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	f7fd fd26 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b082      	sub	sp, #8
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fe f91f 	bl	8002eea <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 8004cac:	4603      	mov	r3, r0
  }
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>:
AdaptedString<TString> adaptString(TString&& s) {
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b082      	sub	sp, #8
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8004cc0:	6838      	ldr	r0, [r7, #0]
 8004cc2:	f000 fbf6 	bl	80054b2 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fd fdea 	bl	80028a2 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8004cd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>:

  static T nan() {
    return forge(0x7ff8000000000000);
  }

  static T inf() {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
    return forge(0x7ff0000000000000);
 8004ce4:	f04f 0000 	mov.w	r0, #0
 8004ce8:	4903      	ldr	r1, [pc, #12]	@ (8004cf8 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv+0x18>)
 8004cea:	f000 fc0d 	bl	8005508 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>
 8004cee:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8004cf2:	eeb0 0b47 	vmov.f64	d0, d7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	7ff00000 	.word	0x7ff00000

08004cfc <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>:
    return forge(0xFf7fffff);
  }
};

template <typename TFloat, typename TExponent>
inline TFloat make_float(TFloat m, TExponent e) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	ed87 0b02 	vstr	d0, [r7, #8]
 8004d06:	6078      	str	r0, [r7, #4]
  using traits = FloatTraits<TFloat>;

  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	dd04      	ble.n	8004d18 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x1c>
 8004d0e:	f000 fb51 	bl	80053b4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 8004d12:	4603      	mov	r3, r0
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	e003      	b.n	8004d20 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8004d18:	f000 fb70 	bl	80053fc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	613b      	str	r3, [r7, #16]
  if (e <= 0)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	dc02      	bgt.n	8004d2c <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x30>
    e = TExponent(-e);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	425b      	negs	r3, r3
 8004d2a:	607b      	str	r3, [r7, #4]

  for (uint8_t index = 0; e != 0; index++) {
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	75fb      	strb	r3, [r7, #23]
 8004d30:	e019      	b.n	8004d66 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x6a>
    if (e & 1)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00e      	beq.n	8004d5a <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 8004d3c:	7dfa      	ldrb	r2, [r7, #23]
 8004d3e:	f107 0310 	add.w	r3, r7, #16
 8004d42:	4611      	mov	r1, r2
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fb45 	bl	80053d4 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 8004d4a:	eeb0 6b40 	vmov.f64	d6, d0
 8004d4e:	ed97 7b02 	vldr	d7, [r7, #8]
 8004d52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004d56:	ed87 7b02 	vstr	d7, [r7, #8]
    e >>= 1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	105b      	asrs	r3, r3, #1
 8004d5e:	607b      	str	r3, [r7, #4]
  for (uint8_t index = 0; e != 0; index++) {
 8004d60:	7dfb      	ldrb	r3, [r7, #23]
 8004d62:	3301      	adds	r3, #1
 8004d64:	75fb      	strb	r3, [r7, #23]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e2      	bne.n	8004d32 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x36>
  }
  return m;
 8004d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d70:	ec43 2b17 	vmov	d7, r2, r3
}
 8004d74:	eeb0 0b47 	vmov.f64	d0, d7
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>:
inline TFloat make_float(TFloat m, TExponent e) {
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	ed87 0a01 	vstr	s0, [r7, #4]
 8004d88:	6038      	str	r0, [r7, #0]
  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	dd04      	ble.n	8004d9a <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x1c>
 8004d90:	f000 fbca 	bl	8005528 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>
 8004d94:	4603      	mov	r3, r0
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	e003      	b.n	8004da2 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8004d9a:	f000 fbd5 	bl	8005548 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	60bb      	str	r3, [r7, #8]
  if (e <= 0)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	dc02      	bgt.n	8004dae <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x30>
    e = TExponent(-e);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	425b      	negs	r3, r3
 8004dac:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 8004dae:	2300      	movs	r3, #0
 8004db0:	73fb      	strb	r3, [r7, #15]
 8004db2:	e019      	b.n	8004de8 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x6a>
    if (e & 1)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00e      	beq.n	8004ddc <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 8004dbe:	7bfa      	ldrb	r2, [r7, #15]
 8004dc0:	f107 0308 	add.w	r3, r7, #8
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fbce 	bl	8005568 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>
 8004dcc:	eeb0 7a40 	vmov.f32	s14, s0
 8004dd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dd8:	edc7 7a01 	vstr	s15, [r7, #4]
    e >>= 1;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	105b      	asrs	r3, r3, #1
 8004de0:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	3301      	adds	r3, #1
 8004de6:	73fb      	strb	r3, [r7, #15]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e2      	bne.n	8004db4 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x36>
  return m;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	ee07 3a90 	vmov	s15, r3
}
 8004df4:	eeb0 0a67 	vmov.f32	s0, s15
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      _GLIBCXX20_CONSTEXPR
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8004e00:	b5b0      	push	{r4, r5, r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 8004e0c:	68fc      	ldr	r4, [r7, #12]
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f017 fd76 	bl	801c900 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8004e14:	4603      	mov	r3, r0
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f017 fece 	bl	801cbbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
      {
	// NB: Not required, but considered best practice.
	if (__s == 0)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d102      	bne.n	8004e2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2c>
	  std::__throw_logic_error(__N("basic_string: "
 8004e26:	480a      	ldr	r0, [pc, #40]	@ (8004e50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
 8004e28:	f017 fd53 	bl	801c8d2 <_ZSt19__throw_logic_errorPKc>
				       "construction from null is not valid"));
	const _CharT* __end = __s + traits_type::length(__s);
 8004e2c:	68b8      	ldr	r0, [r7, #8]
 8004e2e:	f7fd fb97 	bl	8002560 <_ZNSt11char_traitsIcE6lengthEPKc>
 8004e32:	4602      	mov	r2, r0
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4413      	add	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]
	_M_construct(__s, __end, forward_iterator_tag());
 8004e3a:	462b      	mov	r3, r5
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f922 	bl	800508a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e50:	0801e3a0 	.word	0x0801e3a0

08004e54 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>:
  detail::MemberProxy<JsonDocument&, detail::AdaptedString<TString>> operator[](
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08a      	sub	sp, #40	@ 0x28
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8004e60:	f107 0314 	add.w	r3, r7, #20
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fb92 	bl	8005590 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	f107 0314 	add.w	r3, r7, #20
 8004e74:	cb0c      	ldmia	r3, {r2, r3}
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 fb9c 	bl	80055b6 <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>
  }
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	3720      	adds	r7, #32
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>:
  operator T() const {
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	6039      	str	r1, [r7, #0]
    return as<T>();
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6839      	ldr	r1, [r7, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 f876 	bl	8004f86 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 8004e9a:	bf00      	nop
  }
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>:
  operator T() const {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
    return as<T>();
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6839      	ldr	r1, [r7, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fb9b 	bl	80055ee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>
 8004eb8:	bf00      	nop
  }
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b08c      	sub	sp, #48	@ 0x30
 8004ec6:	af02      	add	r7, sp, #8
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	f107 0314 	add.w	r3, r7, #20
 8004ed4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ed8:	e883 0003 	stmia.w	r3, {r0, r1}
 8004edc:	f107 031c 	add.w	r3, r7, #28
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fba7 	bl	8005636 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8004ee8:	466a      	mov	r2, sp
 8004eea:	f107 0320 	add.w	r3, r7, #32
 8004eee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ef2:	e882 0003 	stmia.w	r2, {r0, r1}
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	f107 0214 	add.w	r2, r7, #20
 8004efc:	ca06      	ldmia	r2, {r1, r2}
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 f973 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	3728      	adds	r7, #40	@ 0x28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
    return as<T>();
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fba1 	bl	800565c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>
 8004f1a:	4603      	mov	r3, r0
  }
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08c      	sub	sp, #48	@ 0x30
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	f107 0314 	add.w	r3, r7, #20
 8004f36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f3a:	e883 0003 	stmia.w	r3, {r0, r1}
 8004f3e:	f107 031c 	add.w	r3, r7, #28
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fbab 	bl	80056a0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8004f4a:	466a      	mov	r2, sp
 8004f4c:	f107 0320 	add.w	r3, r7, #32
 8004f50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f54:	e882 0003 	stmia.w	r2, {r0, r1}
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	f107 0214 	add.w	r2, r7, #20
 8004f5e:	ca06      	ldmia	r2, {r1, r2}
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f942 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	3728      	adds	r7, #40	@ 0x28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>:
  operator T() const {
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
    return as<T>();
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fba5 	bl	80056c6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>
 8004f7c:	4603      	mov	r3, r0
  }
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8004f86:	b590      	push	{r4, r7, lr}
 8004f88:	b087      	sub	sp, #28
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 8004f98:	6938      	ldr	r0, [r7, #16]
 8004f9a:	f000 ff69 	bl	8005e70 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	6938      	ldr	r0, [r7, #16]
 8004fa2:	f000 ff75 	bl	8005e90 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	f107 0308 	add.w	r3, r7, #8
 8004fac:	4621      	mov	r1, r4
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fd ff88 	bl	8002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 8004fb4:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f107 0308 	add.w	r3, r7, #8
 8004fbc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004fc0:	f7fe fc6e 	bl	80038a0 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>
 8004fc4:	bf00      	nop
}
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd90      	pop	{r4, r7, pc}

08004fce <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
   *  @return  New string with @a __lhs followed by @a __rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	71fb      	strb	r3, [r7, #7]
    {
      typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
      typedef typename __string_type::size_type		__size_type;
      __string_type __str(__lhs);
 8004fdc:	68b9      	ldr	r1, [r7, #8]
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f017 fe09 	bl	801cbf6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	2101      	movs	r1, #1
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f017 fdda 	bl	801cba4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 8004ff0:	bf00      	nop
    }
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>:
// Parses a JSON input, filters, and puts the result in a JsonDocument.
// https://arduinojson.org/v7/api/json/deserializejson/
template <typename TDestination, typename TChar, typename... Args,
          detail::enable_if_t<
              detail::is_deserialize_destination<TDestination>::value, int> = 0>
inline DeserializationError deserializeJson(TDestination&& dst, TChar* input,
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
                                            Args&&... args) {
  using namespace detail;
  return deserialize<JsonDeserializer>(detail::forward<TDestination>(dst),
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fb80 	bl	800570a <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 800500a:	4602      	mov	r2, r0
 800500c:	463b      	mov	r3, r7
 800500e:	4619      	mov	r1, r3
 8005010:	4610      	mov	r0, r2
 8005012:	f000 fb85 	bl	8005720 <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>
 8005016:	4603      	mov	r3, r0
                                       input, detail::forward<Args>(args)...);
}
 8005018:	4618      	mov	r0, r3
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	781a      	ldrb	r2, [r3, #0]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	bf0c      	ite	eq
 8005036:	2301      	moveq	r3, #1
 8005038:	2300      	movne	r3, #0
 800503a:	b2db      	uxtb	r3, r3
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 8005066:	b580      	push	{r7, lr}
 8005068:	b082      	sub	sp, #8
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d004      	beq.n	8005080 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f017 fc72 	bl	801c964 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 800508a:	b580      	push	{r7, lr}
 800508c:	b088      	sub	sp, #32
 800508e:	af00      	add	r7, sp, #0
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	607a      	str	r2, [r7, #4]
 8005096:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	68b8      	ldr	r0, [r7, #8]
 800509c:	f000 fb61 	bl	8005762 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 80050a0:	4603      	mov	r3, r0
 80050a2:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	2b0f      	cmp	r3, #15
 80050a8:	d911      	bls.n	80050ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 80050aa:	f107 0318 	add.w	r3, r7, #24
 80050ae:	2200      	movs	r2, #0
 80050b0:	4619      	mov	r1, r3
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f017 fc34 	bl	801c920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80050b8:	4603      	mov	r3, r0
 80050ba:	4619      	mov	r1, r3
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f017 fc1b 	bl	801c8f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	4619      	mov	r1, r3
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f017 fc1c 	bl	801c904 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 80050cc:	e005      	b.n	80050da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x50>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 80050d2:	69f8      	ldr	r0, [r7, #28]
 80050d4:	f017 fc14 	bl	801c900 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80050d8:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 80050da:	f107 0314 	add.w	r3, r7, #20
 80050de:	68f9      	ldr	r1, [r7, #12]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7ff ffb1 	bl	8005048 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f017 fc08 	bl	801c8fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80050ec:	4603      	mov	r3, r0
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f017 fc7b 	bl	801c9ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	4619      	mov	r1, r3
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f017 fc01 	bl	801c908 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8005106:	f107 0314 	add.w	r3, r7, #20
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff ffab 	bl	8005066 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>:
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
    capacity_ = slots_ ? cap : 0;
    usage_ = 0;
  }

  void destroy(Allocator* allocator) {
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]
    if (slots_)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE+0x24>
      allocator->deallocate(slots_);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3304      	adds	r3, #4
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6852      	ldr	r2, [r2, #4]
 8005134:	4611      	mov	r1, r2
 8005136:	6838      	ldr	r0, [r7, #0]
 8005138:	4798      	blx	r3
    slots_ = nullptr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	605a      	str	r2, [r3, #4]
    capacity_ = 0;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	805a      	strh	r2, [r3, #2]
  }
 800514c:	bf00      	nop
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>:

  static SlotCount bytesToSlots(size_t n) {
    return static_cast<SlotCount>(n / sizeof(T));
  }

  static size_t slotsToBytes(SlotCount n) {
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	80fb      	strh	r3, [r7, #6]
    return n * sizeof(T);
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	00db      	lsls	r3, r3, #3
  }
 8005162:	4618      	mov	r0, r3
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:
  void shrinkToFit(Allocator* allocator) {
 800516e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005170:	b085      	sub	sp, #20
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	6039      	str	r1, [r7, #0]
        allocator->reallocate(slots_, slotsToBytes(usage_)));
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3308      	adds	r3, #8
 800517e:	681c      	ldr	r4, [r3, #0]
 8005180:	683d      	ldr	r5, [r7, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685e      	ldr	r6, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	885b      	ldrh	r3, [r3, #2]
 800518a:	4618      	mov	r0, r3
 800518c:	f7ff ffe2 	bl	8005154 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 8005190:	4603      	mov	r3, r0
 8005192:	461a      	mov	r2, r3
 8005194:	4631      	mov	r1, r6
 8005196:	4628      	mov	r0, r5
 8005198:	47a0      	blx	r4
 800519a:	60f8      	str	r0, [r7, #12]
    if (newSlots) {
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d006      	beq.n	80051b0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x42>
      slots_ = newSlots;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	605a      	str	r2, [r3, #4]
      capacity_ = usage_;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	885a      	ldrh	r2, [r3, #2]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	801a      	strh	r2, [r3, #0]
  }
 80051b0:	bf00      	nop
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051b8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>:
  template <typename TAdaptedString>
  VariantData* getMember(TAdaptedString key,
                         const ResourceManager* resources) const;

  template <typename TAdaptedString>
  static VariantData* getMember(const ObjectData* object, TAdaptedString key,
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	4638      	mov	r0, r7
 80051c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                const ResourceManager* resources) {
    if (!object)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x18>
      return nullptr;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e008      	b.n	80051e2 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return object->getMember(key, resources);
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	463b      	mov	r3, r7
 80051d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051da:	f000 fad6 	bl	800578a <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 80051de:	4603      	mov	r3, r0
 80051e0:	bf00      	nop
  }
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>:

  template <typename>
  friend class ElementProxy;

 public:
  MemberProxy(TUpstream upstream, AdaptedString key)
 80051ea:	b082      	sub	sp, #8
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	1d38      	adds	r0, r7, #4
 80051f6:	e880 0006 	stmia.w	r0, {r1, r2}
 80051fa:	61fb      	str	r3, [r7, #28]
      : upstream_(upstream), key_(key) {}
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3304      	adds	r3, #4
 8005200:	1d3a      	adds	r2, r7, #4
 8005202:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005206:	e883 0003 	stmia.w	r3, {r0, r1}
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	330c      	adds	r3, #12
 800520e:	f107 021c 	add.w	r2, r7, #28
 8005212:	ca07      	ldmia	r2, {r0, r1, r2}
 8005214:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	b002      	add	sp, #8
 8005226:	4770      	bx	lr

08005228 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>:

 private:
  Slot<T> allocFromFreeList() {
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(freeList_ != NULL_SLOT);
    auto id = freeList_;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005236:	81fb      	strh	r3, [r7, #14]
    auto slot = getSlot(freeList_);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800523c:	4619      	mov	r1, r3
 800523e:	6838      	ldr	r0, [r7, #0]
 8005240:	f7ff fcb0 	bl	8004ba4 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8005244:	60b8      	str	r0, [r7, #8]
    freeList_ = reinterpret_cast<FreeSlot*>(slot)->next;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	881a      	ldrh	r2, [r3, #0]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	851a      	strh	r2, [r3, #40]	@ 0x28
    return {slot, id};
 800524e:	89fb      	ldrh	r3, [r7, #14]
 8005250:	461a      	mov	r2, r3
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff fc75 	bl	8004b44 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>:

  Slot<T> allocFromLastPool() {
 8005262:	b5b0      	push	{r4, r5, r7, lr}
 8005264:	b086      	sub	sp, #24
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(count_ > 0);
    auto poolIndex = SlotId(count_ - 1);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005270:	3b01      	subs	r3, #1
 8005272:	82fb      	strh	r3, [r7, #22]
    auto slot = pools_[poolIndex].allocSlot();
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	6a1a      	ldr	r2, [r3, #32]
 8005278:	8afb      	ldrh	r3, [r7, #22]
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	441a      	add	r2, r3
 800527e:	f107 030c 	add.w	r3, r7, #12
 8005282:	4611      	mov	r1, r2
 8005284:	4618      	mov	r0, r3
 8005286:	f000 faad 	bl	80057e4 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>
    if (!slot)
 800528a:	f107 030c 	add.w	r3, r7, #12
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff fc22 	bl	8004ad8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8005294:	4603      	mov	r3, r0
 8005296:	f083 0301 	eor.w	r3, r3, #1
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x46>
      return {};
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f857 	bl	8005354 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 80052a6:	e015      	b.n	80052d4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x72>
    return {slot.ptr(),
            SlotId(poolIndex * ARDUINOJSON_POOL_CAPACITY + slot.id())};
 80052a8:	f107 030c 	add.w	r3, r7, #12
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 f863 	bl	8005378 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 80052b2:	4605      	mov	r5, r0
 80052b4:	8afb      	ldrh	r3, [r7, #22]
 80052b6:	01db      	lsls	r3, r3, #7
 80052b8:	b29c      	uxth	r4, r3
 80052ba:	f107 030c 	add.w	r3, r7, #12
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff fc27 	bl	8004b12 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 80052c4:	4603      	mov	r3, r0
 80052c6:	4423      	add	r3, r4
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	4629      	mov	r1, r5
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7ff fc38 	bl	8004b44 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bdb0      	pop	{r4, r5, r7, pc}

080052dc <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>:

  Pool* addPool(Allocator* allocator) {
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
    if (count_ == capacity_ && !increaseCapacity(allocator))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d10b      	bne.n	800530a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 80052f2:	6839      	ldr	r1, [r7, #0]
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 faa1 	bl	800583c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f083 0301 	eor.w	r3, r3, #1
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x30>
 800530a:	2300      	movs	r3, #0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x38>
      return nullptr;
 8005310:	2300      	movs	r3, #0
 8005312:	e01b      	b.n	800534c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x70>
    auto pool = &pools_[count_++];
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1a      	ldr	r2, [r3, #32]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800531c:	1c59      	adds	r1, r3, #1
 800531e:	b288      	uxth	r0, r1
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	8488      	strh	r0, [r1, #36]	@ 0x24
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	60bb      	str	r3, [r7, #8]
    SlotCount poolCapacity = ARDUINOJSON_POOL_CAPACITY;
 800532a:	2380      	movs	r3, #128	@ 0x80
 800532c:	81fb      	strh	r3, [r7, #14]
    if (count_ == maxPools)  // last pool is smaller because of NULL_SLOT
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005332:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005336:	d102      	bne.n	800533e <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x62>
      poolCapacity--;
 8005338:	89fb      	ldrh	r3, [r7, #14]
 800533a:	3b01      	subs	r3, #1
 800533c:	81fb      	strh	r3, [r7, #14]
    pool->create(poolCapacity, allocator);
 800533e:	89fb      	ldrh	r3, [r7, #14]
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	4619      	mov	r1, r3
 8005344:	68b8      	ldr	r0, [r7, #8]
 8005346:	f000 fabe 	bl	80058c6 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>
    return pool;
 800534a:	68bb      	ldr	r3, [r7, #8]
  }
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005368:	809a      	strh	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>:
  T* ptr() const {
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
    return ptr_;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
  }
 8005384:	4618      	mov	r0, r3
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	807b      	strh	r3, [r7, #2]
    return slots_ + id;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	887b      	ldrh	r3, [r7, #2]
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	4413      	add	r3, r2
  }
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 80053ba:	1d3b      	adds	r3, r7, #4
 80053bc:	4904      	ldr	r1, [pc, #16]	@ (80053d0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv+0x1c>)
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 faa7 	bl	8005912 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 80053c4:	687b      	ldr	r3, [r7, #4]
  }
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	0801e888 	.word	0x0801e888

080053d4 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>:
template <typename T>
class pgm_ptr {
 public:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}

  T operator[](intptr_t index) const {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	4413      	add	r3, r2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 faa1 	bl	8005930 <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>
 80053ee:	eeb0 7b40 	vmov.f64	d7, d0
  }
 80053f2:	eeb0 0b47 	vmov.f64	d0, d7
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8005402:	1d3b      	adds	r3, r7, #4
 8005404:	4904      	ldr	r1, [pc, #16]	@ (8005418 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv+0x1c>)
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fa83 	bl	8005912 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 800540c:	687b      	ldr	r3, [r7, #4]
  }
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	0801e8d0 	.word	0x0801e8d0

0800541c <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>:

template <typename TChar>
struct SizedStringAdapter<TChar*, enable_if_t<IsChar<TChar>::value>> {
  using AdaptedString = RamString;

  static AdaptedString adapt(const TChar* p, size_t n) {
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
    return AdaptedString(reinterpret_cast<const char*>(p), n);
 8005428:	2300      	movs	r3, #0
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f7fd f956 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* get(const TAdaptedString& str) const {
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b089      	sub	sp, #36	@ 0x24
 8005440:	af02      	add	r7, sp, #8
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
    for (auto node = strings_; node; node = node->next) {
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	e01e      	b.n	800548c <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x50>
      if (stringEquals(str, adaptString(node->data, node->length)))
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f103 0108 	add.w	r1, r3, #8
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	88db      	ldrh	r3, [r3, #6]
 8005458:	461a      	mov	r2, r3
 800545a:	f107 0308 	add.w	r3, r7, #8
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff fbea 	bl	8004c38 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	466c      	mov	r4, sp
 8005468:	f107 030c 	add.w	r3, r7, #12
 800546c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005470:	e884 0003 	stmia.w	r4, {r0, r1}
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	ca07      	ldmia	r2, {r0, r1, r2}
 8005478:	f000 fa6a 	bl	8005950 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x4a>
        return node;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	e006      	b.n	8005494 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x58>
    for (auto node = strings_; node; node = node->next) {
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1dd      	bne.n	800544e <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x12>
    return nullptr;
 8005492:	2300      	movs	r3, #0
  }
 8005494:	4618      	mov	r0, r3
 8005496:	371c      	adds	r7, #28
 8005498:	46bd      	mov	sp, r7
 800549a:	bd90      	pop	{r4, r7, pc}

0800549c <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

using nullptr_t = decltype(nullptr);

template <class T>
T&& forward(remove_reference_t<T>& t) noexcept {
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80054a4:	687b      	ldr	r3, [r7, #4]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80054ba:	687b      	ldr	r3, [r7, #4]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fa7f 	bl	80059d4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 80054d6:	4603      	mov	r3, r0
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fa86 	bl	80059ea <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 80054de:	4603      	mov	r3, r0
  }
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>:
  VariantData* getData() const {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fa6f 	bl	80059d4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 80054f6:	4603      	mov	r3, r0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fa82 	bl	8005a02 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80054fe:	4603      	mov	r3, r0
  }
 8005500:	4618      	mov	r0, r3
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>:
  static T forge(uint64_t bits) {
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	e9c7 0100 	strd	r0, r1, [r7]
    return alias_cast<T>(bits);
 8005512:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005516:	f000 fa80 	bl	8005a1a <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>
 800551a:	eeb0 7b40 	vmov.f64	d7, d0
  }
 800551e:	eeb0 0b47 	vmov.f64	d0, d7
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 800552e:	1d3b      	adds	r3, r7, #4
 8005530:	4904      	ldr	r1, [pc, #16]	@ (8005544 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv+0x1c>)
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fa85 	bl	8005a42 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 8005538:	687b      	ldr	r3, [r7, #4]
  }
 800553a:	4618      	mov	r0, r3
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	0801e918 	.word	0x0801e918

08005548 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 800554e:	1d3b      	adds	r3, r7, #4
 8005550:	4904      	ldr	r1, [pc, #16]	@ (8005564 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv+0x1c>)
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fa75 	bl	8005a42 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 8005558:	687b      	ldr	r3, [r7, #4]
  }
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	0801e930 	.word	0x0801e930

08005568 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>:
  T operator[](intptr_t index) const {
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	4618      	mov	r0, r3
 800557e:	f000 fa6f 	bl	8005a60 <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>
 8005582:	eef0 7a40 	vmov.f32	s15, s0
  }
 8005586:	eeb0 0a67 	vmov.f32	s0, s15
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800559a:	6838      	ldr	r0, [r7, #0]
 800559c:	f000 fa6f 	bl	8005a7e <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80055a0:	4602      	mov	r2, r0
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4611      	mov	r1, r2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fa74 	bl	8005a94 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>
 80055ac:	bf00      	nop
}
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 80055b6:	b082      	sub	sp, #8
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
 80055c2:	f107 0110 	add.w	r1, r7, #16
 80055c6:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3304      	adds	r3, #4
 80055d4:	f107 0210 	add.w	r2, r7, #16
 80055d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80055da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	b002      	add	sp, #8
 80055ec:	4770      	bx	lr

080055ee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80055ee:	b590      	push	{r4, r7, lr}
 80055f0:	b087      	sub	sp, #28
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 8005600:	6938      	ldr	r0, [r7, #16]
 8005602:	f7ff ff71 	bl	80054e8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>
 8005606:	4604      	mov	r4, r0
 8005608:	6938      	ldr	r0, [r7, #16]
 800560a:	f7ff ff5d 	bl	80054c8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 800560e:	4602      	mov	r2, r0
 8005610:	f107 0308 	add.w	r3, r7, #8
 8005614:	4621      	mov	r1, r4
 8005616:	4618      	mov	r0, r3
 8005618:	f7fd fc54 	bl	8002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 800561c:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f107 0308 	add.w	r3, r7, #8
 8005624:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005628:	f7fe f95d 	bl	80038e6 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>
 800562c:	bf00      	nop
}
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	bd90      	pop	{r4, r7, pc}

08005636 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8005640:	6838      	ldr	r0, [r7, #0]
 8005642:	f000 fa36 	bl	8005ab2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8005646:	4602      	mov	r2, r0
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4611      	mov	r1, r2
 800564c:	4618      	mov	r0, r3
 800564e:	f000 fa3b 	bl	8005ac8 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>
 8005652:	bf00      	nop
}
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800565c:	b590      	push	{r4, r7, lr}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800566c:	6938      	ldr	r0, [r7, #16]
 800566e:	f000 fcce 	bl	800600e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8005672:	4604      	mov	r4, r0
 8005674:	6938      	ldr	r0, [r7, #16]
 8005676:	f000 fb58 	bl	8005d2a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 800567a:	4602      	mov	r2, r0
 800567c:	f107 0308 	add.w	r3, r7, #8
 8005680:	4621      	mov	r1, r4
 8005682:	4618      	mov	r0, r3
 8005684:	f7fd fbf3 	bl	8002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8005688:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800568a:	f107 0308 	add.w	r3, r7, #8
 800568e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005692:	f7fe f8e5 	bl	8003860 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 8005696:	4603      	mov	r3, r0
}
 8005698:	4618      	mov	r0, r3
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	bd90      	pop	{r4, r7, pc}

080056a0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 80056aa:	6838      	ldr	r0, [r7, #0]
 80056ac:	f000 fa1b 	bl	8005ae6 <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80056b0:	4602      	mov	r2, r0
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4611      	mov	r1, r2
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fa20 	bl	8005afc <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>
 80056bc:	bf00      	nop
}
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80056c6:	b590      	push	{r4, r7, lr}
 80056c8:	b087      	sub	sp, #28
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 80056d6:	6938      	ldr	r0, [r7, #16]
 80056d8:	f000 fc99 	bl	800600e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 80056dc:	4604      	mov	r4, r0
 80056de:	6938      	ldr	r0, [r7, #16]
 80056e0:	f000 fb23 	bl	8005d2a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 80056e4:	4602      	mov	r2, r0
 80056e6:	f107 0308 	add.w	r3, r7, #8
 80056ea:	4621      	mov	r1, r4
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fd fbbe 	bl	8002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 80056f2:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 80056f4:	f107 0308 	add.w	r3, r7, #8
 80056f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80056fc:	f000 fa0d 	bl	8005b1a <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>
 8005700:	4603      	mov	r3, r0
}
 8005702:	4618      	mov	r0, r3
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	bd90      	pop	{r4, r7, pc}

0800570a <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005712:	687b      	ldr	r3, [r7, #4]
}
 8005714:	4618      	mov	r0, r3
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>:
template <
    template <typename> class TDeserializer, typename TDestination,
    typename TStream, typename... Args,
    enable_if_t<  // issue #1897
        !is_integral<typename first_or_void<Args...>::type>::value, int> = 0>
DeserializationError deserialize(TDestination&& dst, TStream&& input,
 8005720:	b590      	push	{r4, r7, lr}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
                                 Args... args) {
  return doDeserialize<TDeserializer>(
 800572a:	6838      	ldr	r0, [r7, #0]
 800572c:	f7ff feb6 	bl	800549c <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8005730:	4603      	mov	r3, r0
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fa0f 	bl	8005b56 <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>
 8005738:	4604      	mov	r4, r0
 800573a:	f107 0308 	add.w	r3, r7, #8
 800573e:	4618      	mov	r0, r3
 8005740:	f7fe f9a0 	bl	8003a84 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>
 8005744:	7a38      	ldrb	r0, [r7, #8]
 8005746:	f7fe f9df 	bl	8003b08 <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>
 800574a:	4603      	mov	r3, r0
 800574c:	81bb      	strh	r3, [r7, #12]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4621      	mov	r1, r4
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fa20 	bl	8005b98 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>
 8005758:	4603      	mov	r3, r0
      dst, makeReader(detail::forward<TStream>(input)),
      makeDeserializationOptions(args...));
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	bd90      	pop	{r4, r7, pc}

08005762 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8005762:	b5b0      	push	{r4, r5, r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800576c:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800576e:	1d3b      	adds	r3, r7, #4
 8005770:	4618      	mov	r0, r3
 8005772:	f000 fa4a 	bl	8005c0a <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8005776:	462a      	mov	r2, r5
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	4620      	mov	r0, r4
 800577c:	f000 fa4f 	bl	8005c1e <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8005780:	4603      	mov	r3, r0
    }
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bdb0      	pop	{r4, r5, r7, pc}

0800578a <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TAdaptedString>
inline VariantData* ObjectData::getMember(
 800578a:	b580      	push	{r7, lr}
 800578c:	b088      	sub	sp, #32
 800578e:	af02      	add	r7, sp, #8
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	4638      	mov	r0, r7
 8005794:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  auto it = findKey(key, resources);
 8005798:	f107 0010 	add.w	r0, r7, #16
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	9301      	str	r3, [sp, #4]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	463b      	mov	r3, r7
 80057a6:	cb0c      	ldmia	r3, {r2, r3}
 80057a8:	68f9      	ldr	r1, [r7, #12]
 80057aa:	f000 fa47 	bl	8005c3c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>
  if (it.done())
 80057ae:	f107 0310 	add.w	r3, r7, #16
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fd f892 	bl	80028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x38>
    return nullptr;
 80057be:	2300      	movs	r3, #0
 80057c0:	e00c      	b.n	80057dc <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x52>
  it.next(resources);
 80057c2:	f107 0310 	add.w	r3, r7, #16
 80057c6:	6a39      	ldr	r1, [r7, #32]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fd fd46 	bl	800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
  return it.data();
 80057ce:	f107 0310 	add.w	r3, r7, #16
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fd f8b3 	bl	800293e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 80057d8:	4603      	mov	r3, r0
 80057da:	bf00      	nop
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>:
  Slot<T> allocSlot() {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
    if (!slots_)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d103      	bne.n	80057fe <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x1a>
      return {};
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff fdac 	bl	8005354 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 80057fc:	e01a      	b.n	8005834 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    if (usage_ >= capacity_)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	885a      	ldrh	r2, [r3, #2]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d303      	bcc.n	8005812 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x2e>
      return {};
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff fda2 	bl	8005354 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8005810:	e010      	b.n	8005834 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    auto index = usage_++;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	885b      	ldrh	r3, [r3, #2]
 8005816:	1c5a      	adds	r2, r3, #1
 8005818:	b291      	uxth	r1, r2
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	8051      	strh	r1, [r2, #2]
 800581e:	81fb      	strh	r3, [r7, #14]
    return {slots_ + index, SlotId(index)};
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	89fb      	ldrh	r3, [r7, #14]
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	4413      	add	r3, r2
 800582a:	89fa      	ldrh	r2, [r7, #14]
 800582c:	4619      	mov	r1, r3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff f988 	bl	8004b44 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>:

  bool increaseCapacity(Allocator* allocator) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
    if (capacity_ == maxPools)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800584a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800584e:	d101      	bne.n	8005854 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x18>
      return false;
 8005850:	2300      	movs	r3, #0
 8005852:	e034      	b.n	80058be <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    void* newPools;
    auto newCapacity = PoolCount(capacity_ * 2);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	817b      	strh	r3, [r7, #10]

    if (pools_ == preallocatedPools_) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a1a      	ldr	r2, [r3, #32]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	429a      	cmp	r2, r3
 8005864:	d114      	bne.n	8005890 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x54>
      newPools = allocator->allocate(newCapacity * sizeof(Pool));
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	897a      	ldrh	r2, [r7, #10]
 800586e:	00d2      	lsls	r2, r2, #3
 8005870:	4611      	mov	r1, r2
 8005872:	6838      	ldr	r0, [r7, #0]
 8005874:	4798      	blx	r3
 8005876:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x46>
        return false;
 800587e:	2300      	movs	r3, #0
 8005880:	e01d      	b.n	80058be <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
      memcpy(newPools, preallocatedPools_, sizeof(preallocatedPools_));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	4619      	mov	r1, r3
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f017 fed0 	bl	801d62e <memcpy>
 800588e:	e00f      	b.n	80058b0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
    } else {
      newPools = allocator->reallocate(pools_, newCapacity * sizeof(Pool));
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3308      	adds	r3, #8
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6a11      	ldr	r1, [r2, #32]
 800589c:	897a      	ldrh	r2, [r7, #10]
 800589e:	00d2      	lsls	r2, r2, #3
 80058a0:	6838      	ldr	r0, [r7, #0]
 80058a2:	4798      	blx	r3
 80058a4:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
        return false;
 80058ac:	2300      	movs	r3, #0
 80058ae:	e006      	b.n	80058be <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    }

    pools_ = static_cast<Pool*>(newPools);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	621a      	str	r2, [r3, #32]
    capacity_ = newCapacity;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	897a      	ldrh	r2, [r7, #10]
 80058ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    return true;
 80058bc:	2301      	movs	r3, #1
  }
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>:
  void create(SlotCount cap, Allocator* allocator) {
 80058c6:	b5b0      	push	{r4, r5, r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	460b      	mov	r3, r1
 80058d0:	607a      	str	r2, [r7, #4]
 80058d2:	817b      	strh	r3, [r7, #10]
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681c      	ldr	r4, [r3, #0]
 80058da:	687d      	ldr	r5, [r7, #4]
 80058dc:	897b      	ldrh	r3, [r7, #10]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff fc38 	bl	8005154 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 80058e4:	4603      	mov	r3, r0
 80058e6:	4619      	mov	r1, r3
 80058e8:	4628      	mov	r0, r5
 80058ea:	47a0      	blx	r4
 80058ec:	4602      	mov	r2, r0
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	605a      	str	r2, [r3, #4]
    capacity_ = slots_ ? cap : 0;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x38>
 80058fa:	897a      	ldrh	r2, [r7, #10]
 80058fc:	e000      	b.n	8005900 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x3a>
 80058fe:	2200      	movs	r2, #0
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	805a      	strh	r2, [r3, #2]
  }
 800590a:	bf00      	nop
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bdb0      	pop	{r4, r5, r7, pc}

08005912 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>:
inline T pgm_read(const T* p) {
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  return *p;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	ec43 2b17 	vmov	d7, r2, r3
}
 8005942:	eeb0 0b47 	vmov.f64	d0, d7
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
  return -stringCompare(s2, s1);
}

template <typename TAdaptedString1, typename TAdaptedString2>
enable_if_t<TAdaptedString1::typeSortKey <= TAdaptedString2::typeSortKey, bool>
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8005950:	b082      	sub	sp, #8
 8005952:	b590      	push	{r4, r7, lr}
 8005954:	b089      	sub	sp, #36	@ 0x24
 8005956:	af00      	add	r7, sp, #0
 8005958:	1d3c      	adds	r4, r7, #4
 800595a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800595e:	637b      	str	r3, [r7, #52]	@ 0x34
  ARDUINOJSON_ASSERT(!s1.isNull());
  ARDUINOJSON_ASSERT(!s2.isNull());
  size_t size1 = s1.size();
 8005960:	1d3b      	adds	r3, r7, #4
 8005962:	4618      	mov	r0, r3
 8005964:	f7fc fee4 	bl	8002730 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 8005968:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 800596a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800596e:	4618      	mov	r0, r3
 8005970:	f7fc fede 	bl	8002730 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 8005974:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	429a      	cmp	r2, r3
 800597c:	d001      	beq.n	8005982 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x32>
    return false;
 800597e:	2300      	movs	r3, #0
 8005980:	e021      	b.n	80059c6 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 8005982:	2300      	movs	r3, #0
 8005984:	61fb      	str	r3, [r7, #28]
 8005986:	e019      	b.n	80059bc <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
    if (s1[i] != s2[i])
 8005988:	1d3b      	adds	r3, r7, #4
 800598a:	69f9      	ldr	r1, [r7, #28]
 800598c:	4618      	mov	r0, r3
 800598e:	f7fb f9bb 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 8005992:	4603      	mov	r3, r0
 8005994:	461c      	mov	r4, r3
 8005996:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800599a:	69f9      	ldr	r1, [r7, #28]
 800599c:	4618      	mov	r0, r3
 800599e:	f7fb f9b3 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 80059a2:	4603      	mov	r3, r0
 80059a4:	429c      	cmp	r4, r3
 80059a6:	bf14      	ite	ne
 80059a8:	2301      	movne	r3, #1
 80059aa:	2300      	moveq	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x66>
      return false;
 80059b2:	2300      	movs	r3, #0
 80059b4:	e007      	b.n	80059c6 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	3301      	adds	r3, #1
 80059ba:	61fb      	str	r3, [r7, #28]
 80059bc:	69fa      	ldr	r2, [r7, #28]
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d3e1      	bcc.n	8005988 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x38>
  }
  return true;
 80059c4:	2301      	movs	r3, #1
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3724      	adds	r7, #36	@ 0x24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80059d0:	b002      	add	sp, #8
 80059d2:	4770      	bx	lr

080059d4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>:
  const TDerived& derived() const {
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 80059dc:	687b      	ldr	r3, [r7, #4]
  }
 80059de:	4618      	mov	r0, r3
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b082      	sub	sp, #8
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7fd fa79 	bl	8002eea <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 80059f8:	4603      	mov	r3, r0
  }
 80059fa:	4618      	mov	r0, r3
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
    return client.getData();
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fd fa79 	bl	8002f02 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 8005a10:	4603      	mov	r3, r0
  }
 8005a12:	4618      	mov	r0, r3
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>:
T alias_cast(F raw_data) {
 8005a1a:	b480      	push	{r7}
 8005a1c:	b085      	sub	sp, #20
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	e9c7 0100 	strd	r0, r1, [r7]
  ac.raw = raw_data;
 8005a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a28:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 8005a2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a30:	ec43 2b17 	vmov	d7, r2, r3
}
 8005a34:	eeb0 0b47 	vmov.f64	d0, d7
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>:
inline T pgm_read(const T* p) {
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  return *p;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	ee07 3a90 	vmov	s15, r3
}
 8005a70:	eeb0 0a67 	vmov.f32	s0, s15
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005a86:	687b      	ldr	r3, [r7, #4]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	2207      	movs	r2, #7
 8005aa2:	6839      	ldr	r1, [r7, #0]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7fc fe1b 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005aba:	687b      	ldr	r3, [r7, #4]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	2206      	movs	r2, #6
 8005ad6:	6839      	ldr	r1, [r7, #0]
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7fc fe01 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005aee:	687b      	ldr	r3, [r7, #4]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8005b06:	2301      	movs	r3, #1
 8005b08:	2209      	movs	r2, #9
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7fc fde7 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	463b      	mov	r3, r7
 8005b22:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8005b26:	463b      	mov	r3, r7
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fe ff1f 	bl	800496c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8005b2e:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8005b30:	463b      	mov	r3, r7
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fe ff26 	bl	8004984 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8005b38:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d005      	beq.n	8005b4c <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x32>
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 f902 	bl	8005d4c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	e000      	b.n	8005b4e <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8005b4c:	2300      	movs	r3, #0
  }
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TInput>
Reader<remove_reference_t<TInput>> makeReader(TInput&& input) {
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  return Reader<remove_reference_t<TInput>>{detail::forward<TInput>(input)};
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7ff fc9c 	bl	800549c <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8005b64:	4603      	mov	r3, r0
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	f107 030c 	add.w	r3, r7, #12
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 f99e 	bl	8005eb0 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>
 8005b74:	68fb      	ldr	r3, [r7, #12]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>:
class JsonDeserializer {
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b082      	sub	sp, #8
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fd fd9e 	bl	80036ca <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>:
DeserializationError doDeserialize(TDestination&& dst, TReader reader,
 8005b98:	b590      	push	{r4, r7, lr}
 8005b9a:	b0a1      	sub	sp, #132	@ 0x84
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	80ba      	strh	r2, [r7, #4]
  auto data = VariantAttorney::getOrCreateData(dst);
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 f999 	bl	8005edc <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>
 8005baa:	67f8      	str	r0, [r7, #124]	@ 0x7c
  if (!data)
 8005bac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d107      	bne.n	8005bc2 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x2a>
    return DeserializationError::NoMemory;
 8005bb2:	f107 0318 	add.w	r3, r7, #24
 8005bb6:	2104      	movs	r1, #4
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fd ff08 	bl	80039ce <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8005bbe:	7e3b      	ldrb	r3, [r7, #24]
 8005bc0:	e01f      	b.n	8005c02 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x6a>
  auto resources = VariantAttorney::getResourceManager(dst);
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f996 	bl	8005ef4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8005bc8:	67b8      	str	r0, [r7, #120]	@ 0x78
  dst.clear();
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f7fd fac5 	bl	800315a <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>
  auto err = TDeserializer<TReader>(resources, reader)
 8005bd0:	f107 031c 	add.w	r3, r7, #28
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 f997 	bl	8005f0c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>
                 .parse(*data, options.filter, options.nestingLimit);
 8005bde:	f107 001c 	add.w	r0, r7, #28
 8005be2:	797b      	ldrb	r3, [r7, #5]
 8005be4:	4622      	mov	r2, r4
 8005be6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005be8:	f000 f9ac 	bl	8005f44 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8005bec:	4603      	mov	r3, r0
 8005bee:	753b      	strb	r3, [r7, #20]
  auto err = TDeserializer<TReader>(resources, reader)
 8005bf0:	f107 031c 	add.w	r3, r7, #28
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff ffc2 	bl	8005b7e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>
  shrinkJsonDocument(dst);
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f7fd ff97 	bl	8003b2e <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>
  return err;
 8005c00:	7d3b      	ldrb	r3, [r7, #20]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3784      	adds	r7, #132	@ 0x84
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd90      	pop	{r4, r7, pc}

08005c0a <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	60f8      	str	r0, [r7, #12]
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	1ad3      	subs	r3, r2, r3
    }
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>:
    return data;
  return addMember(key, resources);
}

template <typename TAdaptedString>
inline ObjectData::iterator ObjectData::findKey(
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b08e      	sub	sp, #56	@ 0x38
 8005c42:	af02      	add	r7, sp, #8
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	6039      	str	r1, [r7, #0]
 8005c48:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8005c4c:	e881 000c 	stmia.w	r1, {r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  if (key.isNull())
 8005c50:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8005c54:	f7fc fd5b 	bl	800270e <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x2a>
    return iterator();
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fc fe2a 	bl	80028b8 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 8005c64:	e05a      	b.n	8005d1c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
  bool isKey = true;
 8005c66:	2301      	movs	r3, #1
 8005c68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	f107 030c 	add.w	r3, r7, #12
 8005c72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fd fb13 	bl	80032a0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8005c7a:	e041      	b.n	8005d00 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xc4>
    if (isKey && stringEquals(key, adaptString(it->asString())))
 8005c7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d025      	beq.n	8005cd0 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8005c84:	f107 030c 	add.w	r3, r7, #12
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fc fe4c 	bl	8002926 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	f107 0314 	add.w	r3, r7, #20
 8005c94:	4611      	mov	r1, r2
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fc ff12 	bl	8002ac0 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8005c9c:	f107 0320 	add.w	r3, r7, #32
 8005ca0:	f107 0214 	add.w	r2, r7, #20
 8005ca4:	4611      	mov	r1, r2
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 f985 	bl	8005fb6 <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>
 8005cac:	466a      	mov	r2, sp
 8005cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cb2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005cb6:	e882 0003 	stmia.w	r2, {r0, r1}
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8005cc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005cc2:	f7ff fe45 	bl	8005950 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e000      	b.n	8005cd2 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x96>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d008      	beq.n	8005ce8 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xac>
      return it;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	f107 030c 	add.w	r3, r7, #12
 8005cde:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005ce2:	e882 0003 	stmia.w	r2, {r0, r1}
    isKey = !isKey;
  }
  return iterator();
}
 8005ce6:	e019      	b.n	8005d1c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
    isKey = !isKey;
 8005ce8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005cec:	f083 0301 	eor.w	r3, r3, #1
 8005cf0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 8005cf4:	f107 030c 	add.w	r3, r7, #12
 8005cf8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fd faad 	bl	800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 8005d00:	f107 030c 	add.w	r3, r7, #12
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fc fde9 	bl	80028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f083 0301 	eor.w	r3, r3, #1
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1b2      	bne.n	8005c7c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x40>
  return iterator();
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fc fdce 	bl	80028b8 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
}
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	3730      	adds	r7, #48	@ 0x30
 8005d20:	46bd      	mov	sp, r7
 8005d22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d26:	b002      	add	sp, #8
 8005d28:	4770      	bx	lr

08005d2a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f954 	bl	8005fe0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 f95b 	bl	8005ff6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 8005d40:	4603      	mov	r3, r0
  }
 8005d42:	4618      	mov	r0, r3
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
	...

08005d4c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8005d56:	6839      	ldr	r1, [r7, #0]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7fd fe1d 	bl	8003998 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8005d5e:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	791b      	ldrb	r3, [r3, #4]
 8005d64:	3b04      	subs	r3, #4
 8005d66:	2b1a      	cmp	r3, #26
 8005d68:	d87c      	bhi.n	8005e64 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x118>
 8005d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d70 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x24>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005e23 	.word	0x08005e23
 8005d74:	08005e31 	.word	0x08005e31
 8005d78:	08005ddd 	.word	0x08005ddd
 8005d7c:	08005e65 	.word	0x08005e65
 8005d80:	08005e65 	.word	0x08005e65
 8005d84:	08005e65 	.word	0x08005e65
 8005d88:	08005de3 	.word	0x08005de3
 8005d8c:	08005e65 	.word	0x08005e65
 8005d90:	08005df1 	.word	0x08005df1
 8005d94:	08005e65 	.word	0x08005e65
 8005d98:	08005e41 	.word	0x08005e41
 8005d9c:	08005e65 	.word	0x08005e65
 8005da0:	08005e65 	.word	0x08005e65
 8005da4:	08005e65 	.word	0x08005e65
 8005da8:	08005e65 	.word	0x08005e65
 8005dac:	08005e65 	.word	0x08005e65
 8005db0:	08005e65 	.word	0x08005e65
 8005db4:	08005e65 	.word	0x08005e65
 8005db8:	08005e65 	.word	0x08005e65
 8005dbc:	08005e65 	.word	0x08005e65
 8005dc0:	08005e65 	.word	0x08005e65
 8005dc4:	08005e65 	.word	0x08005e65
 8005dc8:	08005dff 	.word	0x08005dff
 8005dcc:	08005e65 	.word	0x08005e65
 8005dd0:	08005e11 	.word	0x08005e11
 8005dd4:	08005e65 	.word	0x08005e65
 8005dd8:	08005e53 	.word	0x08005e53
        return content_.asBoolean;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	e041      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 f921 	bl	800602e <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>
 8005dec:	4603      	mov	r3, r0
 8005dee:	e03a      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 f92b 	bl	8006050 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	e033      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	4610      	mov	r0, r2
 8005e06:	4619      	mov	r1, r3
 8005e08:	f000 f933 	bl	8006072 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	e02a      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	4610      	mov	r0, r2
 8005e18:	4619      	mov	r1, r3
 8005e1a:	f000 f93d 	bl	8006098 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	e021      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 f949 	bl	80060be <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	e01a      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3308      	adds	r3, #8
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 f941 	bl	80060be <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	e012      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	edd3 7a00 	vldr	s15, [r3]
 8005e46:	eeb0 0a67 	vmov.f32	s0, s15
 8005e4a:	f000 f94c 	bl	80060e6 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	e009      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	ed93 7b00 	vldr	d7, [r3]
 8005e58:	eeb0 0b47 	vmov.f64	d0, d7
 8005e5c:	f000 f95b 	bl	8006116 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 8005e60:	4603      	mov	r3, r0
 8005e62:	e000      	b.n	8005e66 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 8005e64:	2300      	movs	r3, #0
  }
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop

08005e70 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f964 	bl	8006146 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 f96b 	bl	800615c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 8005e86:	4603      	mov	r3, r0
  }
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f954 	bl	8006146 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 f967 	bl	8006174 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 8005ea6:	4603      	mov	r3, r0
  }
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>:
template <typename TSource>
struct Reader<TSource*, enable_if_t<IsCharOrVoid<TSource>::value>> {
  const char* ptr_;

 public:
  explicit Reader(const void* ptr)
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
      : ptr_(ptr ? reinterpret_cast<const char*>(ptr) : "") {}
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x14>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	e000      	b.n	8005ec6 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x16>
 8005ec4:	4b04      	ldr	r3, [pc, #16]	@ (8005ed8 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x28>)
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	0801e160 	.word	0x0801e160

08005edc <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>:

  template <typename TClient>
  static VariantData* getOrCreateData(TClient& client) {
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7fd f960 	bl	80031aa <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>
 8005eea:	4603      	mov	r3, r0
  }
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7fd f93d 	bl	800317c <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>
 8005f02:	4603      	mov	r3, r0
  }
 8005f04:	4618      	mov	r0, r3
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>:
  JsonDeserializer(ResourceManager* resources, TReader reader)
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
      : stringBuilder_(resources),
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	68b9      	ldr	r1, [r7, #8]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fd fbbf 	bl	80036a0 <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>
        foundSomething_(false),
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	731a      	strb	r2, [r3, #12]
        latch_(reader),
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3310      	adds	r3, #16
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 f92c 	bl	800618c <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>
        resources_(resources) {}
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	619a      	str	r2, [r3, #24]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError parse(VariantData& variant, TFilter filter,
 8005f44:	b590      	push	{r4, r7, lr}
 8005f46:	b089      	sub	sp, #36	@ 0x24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	713a      	strb	r2, [r7, #4]
 8005f50:	703b      	strb	r3, [r7, #0]
    err = parseVariant(variant, filter, nestingLimit);
 8005f52:	783b      	ldrb	r3, [r7, #0]
 8005f54:	4622      	mov	r2, r4
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f929 	bl	80061b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	75fb      	strb	r3, [r7, #23]
    if (!err && latch_.last() != 0 && variant.isFloat()) {
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10f      	bne.n	8005f88 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3310      	adds	r3, #16
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 fa0d 	bl	800638c <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d007      	beq.n	8005f88 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8005f78:	68b8      	ldr	r0, [r7, #8]
 8005f7a:	f7fc fde8 	bl	8002b4e <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8005f84:	2301      	movs	r3, #1
 8005f86:	e000      	b.n	8005f8a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x46>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d007      	beq.n	8005f9e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x5a>
      return DeserializationError::InvalidInput;
 8005f8e:	f107 0318 	add.w	r3, r7, #24
 8005f92:	2103      	movs	r1, #3
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fd fd1a 	bl	80039ce <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8005f9a:	7e3b      	ldrb	r3, [r7, #24]
 8005f9c:	e007      	b.n	8005fae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x6a>
    return err;
 8005f9e:	7dfa      	ldrb	r2, [r7, #23]
 8005fa0:	f107 031c 	add.w	r3, r7, #28
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fd fd11 	bl	80039ce <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8005fac:	7f3b      	ldrb	r3, [r7, #28]
  }
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3724      	adds	r7, #36	@ 0x24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd90      	pop	{r4, r7, pc}

08005fb6 <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>:
AdaptedString<TString> adaptString(TString&& s) {
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b082      	sub	sp, #8
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8005fc0:	6838      	ldr	r0, [r7, #0]
 8005fc2:	f000 f9ef 	bl	80063a4 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fc fc6a 	bl	80028a2 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8005fd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8005fe8:	687b      	ldr	r3, [r7, #4]
  }
 8005fea:	4618      	mov	r0, r3
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b082      	sub	sp, #8
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f9db 	bl	80063ba <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>
 8006004:	4603      	mov	r3, r0
  }
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 800600e:	b580      	push	{r7, lr}
 8006010:	b082      	sub	sp, #8
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff ffe2 	bl	8005fe0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 800601c:	4603      	mov	r3, r0
 800601e:	4618      	mov	r0, r3
 8006020:	f000 f9d9 	bl	80063d6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 8006024:	4603      	mov	r3, r0
  }
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>:
canConvertNumber(TIn) {
  return true;
}

template <typename TOut, typename TIn>
TOut convertNumber(TIn value) {
 800602e:	b580      	push	{r7, lr}
 8006030:	b082      	sub	sp, #8
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f9d9 	bl	80063ee <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x18>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	e000      	b.n	8006048 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x1a>
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>:
TOut convertNumber(TIn value) {
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f9d9 	bl	8006410 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x18>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	e000      	b.n	800606a <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x1a>
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>:
TOut convertNumber(TIn value) {
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800607c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006080:	f000 f9dc 	bl	800643c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1c>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	e000      	b.n	8006090 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1e>
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>:
TOut convertNumber(TIn value) {
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80060a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060a6:	f000 f9e1 	bl	800646c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1c>
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	e000      	b.n	80060b6 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1e>
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>:

template <typename T>
inline T parseNumber(const char* s) {
 80060be:	b580      	push	{r7, lr}
 80060c0:	b086      	sub	sp, #24
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 80060c6:	f107 0308 	add.w	r3, r7, #8
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fd fec7 	bl	8003e60 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 80060d2:	f107 0308 	add.w	r3, r7, #8
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 f9e6 	bl	80064a8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>
 80060dc:	4603      	mov	r3, r0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>:
TOut convertNumber(TIn value) {
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b082      	sub	sp, #8
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80060f0:	ed97 0a01 	vldr	s0, [r7, #4]
 80060f4:	f000 fa1e 	bl	8006534 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d006      	beq.n	800610c <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x26>
 80060fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8006102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006106:	ee17 3a90 	vmov	r3, s15
 800610a:	e000      	b.n	800610e <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x28>
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>:
TOut convertNumber(TIn value) {
 8006116:	b580      	push	{r7, lr}
 8006118:	b082      	sub	sp, #8
 800611a:	af00      	add	r7, sp, #0
 800611c:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006120:	ed97 0b00 	vldr	d0, [r7]
 8006124:	f000 fa34 	bl	8006590 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d006      	beq.n	800613c <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x26>
 800612e:	ed97 7b00 	vldr	d7, [r7]
 8006132:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006136:	ee17 3a90 	vmov	r3, s15
 800613a:	e000      	b.n	800613e <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x28>
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800614e:	687b      	ldr	r3, [r7, #4]
  }
 8006150:	4618      	mov	r0, r3
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
    return client.getData();
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fa39 	bl	80065dc <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>
 800616a:	4603      	mov	r3, r0
  }
 800616c:	4618      	mov	r0, r3
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fa49 	bl	8006614 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>
 8006182:	4603      	mov	r3, r0
  }
 8006184:	4618      	mov	r0, r3
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TReader>
class Latch {
 public:
  Latch(TReader reader) : reader_(reader), loaded_(false) {
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	715a      	strb	r2, [r3, #5]
#if ARDUINOJSON_DEBUG
    ended_ = false;
#endif
  }
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4618      	mov	r0, r3
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseVariant(
 80061b0:	b5b0      	push	{r4, r5, r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	713a      	strb	r2, [r7, #4]
 80061bc:	703b      	strb	r3, [r7, #0]
    err = skipSpacesAndComments();
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 fa36 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80061c4:	4603      	mov	r3, r0
 80061c6:	75fb      	strb	r3, [r7, #23]
    if (err)
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x22>
      return err;
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
 80061d0:	e0d2      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
    switch (current()) {
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 fa62 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b7b      	cmp	r3, #123	@ 0x7b
 80061dc:	f300 80ba 	bgt.w	8006354 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 80061e0:	2b5b      	cmp	r3, #91	@ 0x5b
 80061e2:	da04      	bge.n	80061ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x3e>
 80061e4:	2b22      	cmp	r3, #34	@ 0x22
 80061e6:	d07b      	beq.n	80062e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 80061e8:	2b27      	cmp	r3, #39	@ 0x27
 80061ea:	d079      	beq.n	80062e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 80061ec:	e0b2      	b.n	8006354 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 80061ee:	3b5b      	subs	r3, #91	@ 0x5b
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	f200 80af 	bhi.w	8006354 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 80061f6:	a201      	add	r2, pc, #4	@ (adr r2, 80061fc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>)
 80061f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fc:	08006281 	.word	0x08006281
 8006200:	08006355 	.word	0x08006355
 8006204:	08006355 	.word	0x08006355
 8006208:	08006355 	.word	0x08006355
 800620c:	08006355 	.word	0x08006355
 8006210:	08006355 	.word	0x08006355
 8006214:	08006355 	.word	0x08006355
 8006218:	08006355 	.word	0x08006355
 800621c:	08006355 	.word	0x08006355
 8006220:	08006355 	.word	0x08006355
 8006224:	08006355 	.word	0x08006355
 8006228:	08006327 	.word	0x08006327
 800622c:	08006355 	.word	0x08006355
 8006230:	08006355 	.word	0x08006355
 8006234:	08006355 	.word	0x08006355
 8006238:	08006355 	.word	0x08006355
 800623c:	08006355 	.word	0x08006355
 8006240:	08006355 	.word	0x08006355
 8006244:	08006355 	.word	0x08006355
 8006248:	08006349 	.word	0x08006349
 800624c:	08006355 	.word	0x08006355
 8006250:	08006355 	.word	0x08006355
 8006254:	08006355 	.word	0x08006355
 8006258:	08006355 	.word	0x08006355
 800625c:	08006355 	.word	0x08006355
 8006260:	08006305 	.word	0x08006305
 8006264:	08006355 	.word	0x08006355
 8006268:	08006355 	.word	0x08006355
 800626c:	08006355 	.word	0x08006355
 8006270:	08006355 	.word	0x08006355
 8006274:	08006355 	.word	0x08006355
 8006278:	08006355 	.word	0x08006355
 800627c:	080062b1 	.word	0x080062b1
        if (filter.allowArray())
 8006280:	1d3b      	adds	r3, r7, #4
 8006282:	4618      	mov	r0, r3
 8006284:	f7fd fbdd 	bl	8003a42 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0xf4>
          return parseArray(variant.toArray(), filter, nestingLimit);
 800628e:	68b8      	ldr	r0, [r7, #8]
 8006290:	f7fc fcdc 	bl	8002c4c <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 8006294:	4601      	mov	r1, r0
 8006296:	783b      	ldrb	r3, [r7, #0]
 8006298:	462a      	mov	r2, r5
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 fa15 	bl	80066ca <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>
 80062a0:	4603      	mov	r3, r0
 80062a2:	e069      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipArray(nestingLimit);
 80062a4:	7839      	ldrb	r1, [r7, #0]
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 fa95 	bl	80067d6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 80062ac:	4603      	mov	r3, r0
 80062ae:	e063      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowObject())
 80062b0:	1d3b      	adds	r3, r7, #4
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fd fbd0 	bl	8003a58 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
          return parseObject(variant.toObject(), filter, nestingLimit);
 80062be:	68b8      	ldr	r0, [r7, #8]
 80062c0:	f7fc fcec 	bl	8002c9c <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 80062c4:	4601      	mov	r1, r0
 80062c6:	783b      	ldrb	r3, [r7, #0]
 80062c8:	4622      	mov	r2, r4
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 fac6 	bl	800685c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>
 80062d0:	4603      	mov	r3, r0
 80062d2:	e051      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipObject(nestingLimit);
 80062d4:	7839      	ldrb	r1, [r7, #0]
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 fbac 	bl	8006a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 80062dc:	4603      	mov	r3, r0
 80062de:	e04b      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 80062e0:	1d3b      	adds	r3, r7, #4
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fd fbc3 	bl	8003a6e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d005      	beq.n	80062fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x14a>
          return parseStringValue(variant);
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 fc1f 	bl	8006b34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>
 80062f6:	4603      	mov	r3, r0
 80062f8:	e03e      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipQuotedString();
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 fc3b 	bl	8006b76 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8006300:	4603      	mov	r3, r0
 8006302:	e039      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8006304:	1d3b      	adds	r3, r7, #4
 8006306:	4618      	mov	r0, r3
 8006308:	f7fd fbb1 	bl	8003a6e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x16a>
          variant.setBoolean(true);
 8006312:	2101      	movs	r1, #1
 8006314:	68b8      	ldr	r0, [r7, #8]
 8006316:	f7fc fc47 	bl	8002ba8 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("true");
 800631a:	4919      	ldr	r1, [pc, #100]	@ (8006380 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>)
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 fc5f 	bl	8006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006322:	4603      	mov	r3, r0
 8006324:	e028      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8006326:	1d3b      	adds	r3, r7, #4
 8006328:	4618      	mov	r0, r3
 800632a:	f7fd fba0 	bl	8003a6e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
          variant.setBoolean(false);
 8006334:	2100      	movs	r1, #0
 8006336:	68b8      	ldr	r0, [r7, #8]
 8006338:	f7fc fc36 	bl	8002ba8 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("false");
 800633c:	4911      	ldr	r1, [pc, #68]	@ (8006384 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d4>)
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 fc4e 	bl	8006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006344:	4603      	mov	r3, r0
 8006346:	e017      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        return skipKeyword("null");
 8006348:	490f      	ldr	r1, [pc, #60]	@ (8006388 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d8>)
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 fc48 	bl	8006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006350:	4603      	mov	r3, r0
 8006352:	e011      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8006354:	1d3b      	adds	r3, r7, #4
 8006356:	4618      	mov	r0, r3
 8006358:	f7fd fb89 	bl	8003a6e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1be>
          return parseNumericValue(variant);
 8006362:	68b9      	ldr	r1, [r7, #8]
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 fc61 	bl	8006c2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>
 800636a:	4603      	mov	r3, r0
 800636c:	e004      	b.n	8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipNumericValue();
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 fd04 	bl	8006d7c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 8006374:	4603      	mov	r3, r0
 8006376:	bf00      	nop
  }
 8006378:	4618      	mov	r0, r3
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bdb0      	pop	{r4, r5, r7, pc}
 8006380:	0801e3d4 	.word	0x0801e3d4
 8006384:	0801e3dc 	.word	0x0801e3dc
 8006388:	0801e3e4 	.word	0x0801e3e4

0800638c <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>:

  void clear() {
    loaded_ = false;
  }

  int last() const {
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
    return current_;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	791b      	ldrb	r3, [r3, #4]
  }
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80063ac:	687b      	ldr	r3, [r7, #4]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>:
  // clang-format off
  MemberProxy(const MemberProxy& src) // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
      : upstream_(src.upstream_), key_(src.key_) {}
  // clang-format on

  ResourceManager* getResourceManager() const {
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b082      	sub	sp, #8
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3304      	adds	r3, #4
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fcf6 	bl	8006db8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 80063cc:	4603      	mov	r3, r0
  }
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
    return client.getData();
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fd04 	bl	8006dec <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>
 80063e4:	4603      	mov	r3, r0
  }
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b082      	sub	sp, #8
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 80063f6:	f000 f8c2 	bl	800657e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 80063fa:	4602      	mov	r2, r0
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4293      	cmp	r3, r2
 8006400:	bf94      	ite	ls
 8006402:	2301      	movls	r3, #1
 8006404:	2300      	movhi	r3, #0
 8006406:	b2db      	uxtb	r3, r3
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	da01      	bge.n	8006422 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x12>
    return false;
 800641e:	2300      	movs	r3, #0
 8006420:	e008      	b.n	8006434 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x24>
  return TOut(value) <= numeric_limits<TOut>::highest();
 8006422:	f000 f8ac 	bl	800657e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8006426:	4602      	mov	r2, r0
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	429a      	cmp	r2, r3
 800642c:	bf2c      	ite	cs
 800642e:	2301      	movcs	r3, #1
 8006430:	2300      	movcc	r3, #0
 8006432:	b2db      	uxtb	r3, r3
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800643c:	b5b0      	push	{r4, r5, r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8006446:	f000 f89a 	bl	800657e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 800644a:	4603      	mov	r3, r0
 800644c:	2200      	movs	r2, #0
 800644e:	461c      	mov	r4, r3
 8006450:	4615      	mov	r5, r2
 8006452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006456:	4294      	cmp	r4, r2
 8006458:	eb75 0303 	sbcs.w	r3, r5, r3
 800645c:	bf2c      	ite	cs
 800645e:	2301      	movcs	r3, #1
 8006460:	2300      	movcc	r3, #0
 8006462:	b2db      	uxtb	r3, r3
}
 8006464:	4618      	mov	r0, r3
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bdb0      	pop	{r4, r5, r7, pc}

0800646c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800646c:	b5b0      	push	{r4, r5, r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8006476:	e9d7 2300 	ldrd	r2, r3, [r7]
 800647a:	2b00      	cmp	r3, #0
 800647c:	da01      	bge.n	8006482 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 800647e:	2300      	movs	r3, #0
 8006480:	e00e      	b.n	80064a0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x34>
  return value <= TIn(numeric_limits<TOut>::highest());
 8006482:	f000 f87c 	bl	800657e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8006486:	4603      	mov	r3, r0
 8006488:	2200      	movs	r2, #0
 800648a:	461c      	mov	r4, r3
 800648c:	4615      	mov	r5, r2
 800648e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006492:	4294      	cmp	r4, r2
 8006494:	eb75 0303 	sbcs.w	r3, r5, r3
 8006498:	bfac      	ite	ge
 800649a:	2301      	movge	r3, #1
 800649c:	2300      	movlt	r3, #0
 800649e:	b2db      	uxtb	r3, r3
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bdb0      	pop	{r4, r5, r7, pc}

080064a8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>:
  T convertTo() const {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
    switch (type_) {
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d82e      	bhi.n	8006518 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x70>
 80064ba:	a201      	add	r2, pc, #4	@ (adr r2, 80064c0 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x18>)
 80064bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c0:	080064d1 	.word	0x080064d1
 80064c4:	080064e3 	.word	0x080064e3
 80064c8:	080064f5 	.word	0x080064f5
 80064cc:	08006507 	.word	0x08006507
        return convertNumber<T>(value_.asFloat);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80064d6:	eeb0 0a67 	vmov.f32	s0, s15
 80064da:	f7ff fe04 	bl	80060e6 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 80064de:	4603      	mov	r3, r0
 80064e0:	e01b      	b.n	800651a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80064e8:	4610      	mov	r0, r2
 80064ea:	4619      	mov	r1, r3
 80064ec:	f7ff fdd4 	bl	8006098 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 80064f0:	4603      	mov	r3, r0
 80064f2:	e012      	b.n	800651a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80064fa:	4610      	mov	r0, r2
 80064fc:	4619      	mov	r1, r3
 80064fe:	f7ff fdb8 	bl	8006072 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 8006502:	4603      	mov	r3, r0
 8006504:	e009      	b.n	800651a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	ed93 7b02 	vldr	d7, [r3, #8]
 800650c:	eeb0 0b47 	vmov.f64	d0, d7
 8006510:	f7ff fe01 	bl	8006116 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 8006514:	4603      	mov	r3, r0
 8006516:	e000      	b.n	800651a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return T();
 8006518:	2300      	movs	r3, #0
  }
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop

08006524 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>:
template <typename T, typename Enable = void>
struct numeric_limits;

template <typename T>
struct numeric_limits<T, enable_if_t<is_unsigned<T>::value>> {
  static constexpr T lowest() {
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
    return 0;
 8006528:	2300      	movs	r3, #0
  }
 800652a:	4618      	mov	r0, r3
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 800653e:	f7ff fff1 	bl	8006524 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 8006542:	ee07 0a90 	vmov	s15, r0
 8006546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654a:	ed97 7a01 	vldr	s14, [r7, #4]
 800654e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006556:	db0d      	blt.n	8006574 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 8006558:	2000      	movs	r0, #0
 800655a:	f000 fc63 	bl	8006e24 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>
 800655e:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 8006562:	edd7 7a01 	vldr	s15, [r7, #4]
 8006566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800656a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800656e:	d801      	bhi.n	8006574 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 8006570:	2301      	movs	r3, #1
 8006572:	e000      	b.n	8006576 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>:
  static constexpr T highest() {
 800657e:	b480      	push	{r7}
 8006580:	af00      	add	r7, sp, #0
    return T(-1);
 8006582:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8006586:	4618      	mov	r0, r3
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 800659a:	f7ff ffc3 	bl	8006524 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 800659e:	ee07 0a90 	vmov	s15, r0
 80065a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80065a6:	ed97 6b00 	vldr	d6, [r7]
 80065aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80065ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b2:	db0e      	blt.n	80065d2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 80065b4:	f7ff ffe3 	bl	800657e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 80065b8:	ee07 0a90 	vmov	s15, r0
 80065bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 80065c0:	ed97 6b00 	vldr	d6, [r7]
 80065c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80065c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065cc:	d801      	bhi.n	80065d2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>:

  VariantData* getData() const {
 80065dc:	b590      	push	{r4, r7, lr}
 80065de:	b085      	sub	sp, #20
 80065e0:	af02      	add	r7, sp, #8
 80065e2:	6078      	str	r0, [r7, #4]
    return VariantData::getMember(
        VariantAttorney::getData(upstream_), key_,
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fc2b 	bl	8006e44 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>
 80065ee:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff fc7d 	bl	8005ef4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 80065fa:	4602      	mov	r2, r0
    return VariantData::getMember(
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	9200      	str	r2, [sp, #0]
 8006600:	3304      	adds	r3, #4
 8006602:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006604:	4620      	mov	r0, r4
 8006606:	f000 fc29 	bl	8006e5c <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 800660a:	4603      	mov	r3, r0
  }
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	bd90      	pop	{r4, r7, pc}

08006614 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4618      	mov	r0, r3
 8006622:	f7ff fc67 	bl	8005ef4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8006626:	4603      	mov	r3, r0
  }
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>:
  DeserializationError::Code skipSpacesAndComments() {
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
      switch (current()) {
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f82f 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d013      	beq.n	800666c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x3c>
 8006644:	2b00      	cmp	r3, #0
 8006646:	db1d      	blt.n	8006684 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8006648:	2b20      	cmp	r3, #32
 800664a:	dc1b      	bgt.n	8006684 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 800664c:	2b09      	cmp	r3, #9
 800664e:	db19      	blt.n	8006684 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8006650:	3b09      	subs	r3, #9
 8006652:	4a11      	ldr	r2, [pc, #68]	@ (8006698 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x68>)
 8006654:	fa22 f303 	lsr.w	r3, r2, r3
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	bf14      	ite	ne
 8006660:	2301      	movne	r3, #1
 8006662:	2300      	moveq	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d108      	bne.n	800667c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x4c>
 800666a:	e00b      	b.n	8006684 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
          return foundSomething_ ? DeserializationError::IncompleteInput
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	7b1b      	ldrb	r3, [r3, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x48>
 8006674:	2302      	movs	r3, #2
                                 : DeserializationError::EmptyInput;
 8006676:	e00b      	b.n	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          return foundSomething_ ? DeserializationError::IncompleteInput
 8006678:	2301      	movs	r3, #1
                                 : DeserializationError::EmptyInput;
 800667a:	e009      	b.n	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          move();
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fc06 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          continue;
 8006682:	e004      	b.n	800668e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x5e>
          foundSomething_ = true;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	731a      	strb	r2, [r3, #12]
          return DeserializationError::Ok;
 800668a:	2300      	movs	r3, #0
 800668c:	e000      	b.n	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
      switch (current()) {
 800668e:	e7d3      	b.n	8006638 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x8>
  }
 8006690:	4618      	mov	r0, r3
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	00800013 	.word	0x00800013

0800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>:
  char current() {
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
    return latch_.current();
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	3310      	adds	r3, #16
 80066a8:	60fb      	str	r3, [r7, #12]

  FORCE_INLINE char current() {
    if (!loaded_) {
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	795b      	ldrb	r3, [r3, #5]
 80066ae:	f083 0301 	eor.w	r3, r3, #1
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv+0x22>
      load();
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 ff1a 	bl	80074f2 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>
    }
    return current_;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	791b      	ldrb	r3, [r3, #4]
  }
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseArray(
 80066ca:	b590      	push	{r4, r7, lr}
 80066cc:	b089      	sub	sp, #36	@ 0x24
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	713a      	strb	r2, [r7, #4]
 80066d6:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 80066d8:	463b      	mov	r3, r7
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fd fa03 	bl	8003ae6 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 80066e6:	2305      	movs	r3, #5
 80066e8:	e071      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    move();
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f000 fbcf 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7ff ff9d 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80066f6:	4603      	mov	r3, r0
 80066f8:	77fb      	strb	r3, [r7, #31]
    if (err)
 80066fa:	7ffb      	ldrb	r3, [r7, #31]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x3a>
      return err;
 8006700:	7ffb      	ldrb	r3, [r7, #31]
 8006702:	e064      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    if (eat(']'))
 8006704:	215d      	movs	r1, #93	@ 0x5d
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 fbce 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>
      return DeserializationError::Ok;
 8006712:	2300      	movs	r3, #0
 8006714:	e05b      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    TFilter elementFilter = filter[0UL];
 8006716:	2300      	movs	r3, #0
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	f107 0214 	add.w	r2, r7, #20
 800671e:	1d3b      	adds	r3, r7, #4
 8006720:	4611      	mov	r1, r2
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fbdd 	bl	8006ee2 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>
      if (elementFilter.allow()) {
 8006728:	f107 0310 	add.w	r3, r7, #16
 800672c:	4618      	mov	r0, r3
 800672e:	f7fd f97d 	bl	8003a2c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d01c      	beq.n	8006772 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xa8>
        VariantData* value = array.addElement(resources_);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	4619      	mov	r1, r3
 800673e:	68b8      	ldr	r0, [r7, #8]
 8006740:	f7fc fd3f 	bl	80031c2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 8006744:	61b8      	str	r0, [r7, #24]
        if (!value)
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
          return DeserializationError::NoMemory;
 800674c:	2304      	movs	r3, #4
 800674e:	e03e      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = parseVariant(*value, elementFilter, nestingLimit.decrement());
 8006750:	463b      	mov	r3, r7
 8006752:	4618      	mov	r0, r3
 8006754:	f7fd f9b4 	bl	8003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8006758:	4603      	mov	r3, r0
 800675a:	4622      	mov	r2, r4
 800675c:	69b9      	ldr	r1, [r7, #24]
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f7ff fd26 	bl	80061b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8006764:	4603      	mov	r3, r0
 8006766:	77fb      	strb	r3, [r7, #31]
        if (err)
 8006768:	7ffb      	ldrb	r3, [r7, #31]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d011      	beq.n	8006792 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 800676e:	7ffb      	ldrb	r3, [r7, #31]
 8006770:	e02d      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = skipVariant(nestingLimit.decrement());
 8006772:	463b      	mov	r3, r7
 8006774:	4618      	mov	r0, r3
 8006776:	f7fd f9a3 	bl	8003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800677a:	4603      	mov	r3, r0
 800677c:	4619      	mov	r1, r3
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 fbbc 	bl	8006efc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8006784:	4603      	mov	r3, r0
 8006786:	77fb      	strb	r3, [r7, #31]
        if (err)
 8006788:	7ffb      	ldrb	r3, [r7, #31]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 800678e:	7ffb      	ldrb	r3, [r7, #31]
 8006790:	e01d      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      err = skipSpacesAndComments();
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7ff ff4c 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006798:	4603      	mov	r3, r0
 800679a:	77fb      	strb	r3, [r7, #31]
      if (err)
 800679c:	7ffb      	ldrb	r3, [r7, #31]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xdc>
        return err;
 80067a2:	7ffb      	ldrb	r3, [r7, #31]
 80067a4:	e013      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (eat(']'))
 80067a6:	215d      	movs	r1, #93	@ 0x5d
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 fb7d 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xee>
        return DeserializationError::Ok;
 80067b4:	2300      	movs	r3, #0
 80067b6:	e00a      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (!eat(','))
 80067b8:	212c      	movs	r1, #44	@ 0x2c
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 fb74 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f083 0301 	eor.w	r3, r3, #1
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0ad      	beq.n	8006728 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x5e>
        return DeserializationError::InvalidInput;
 80067cc:	2303      	movs	r3, #3
  }
 80067ce:	4618      	mov	r0, r3
 80067d0:	3724      	adds	r7, #36	@ 0x24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd90      	pop	{r4, r7, pc}

080067d6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipArray(
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 80067e0:	463b      	mov	r3, r7
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fd f97f 	bl	8003ae6 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 80067ee:	2305      	movs	r3, #5
 80067f0:	e030      	b.n	8006854 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
    move();
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fb4b 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      err = skipVariant(nestingLimit.decrement());
 80067f8:	463b      	mov	r3, r7
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fd f960 	bl	8003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8006800:	4603      	mov	r3, r0
 8006802:	4619      	mov	r1, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fb79 	bl	8006efc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 800680a:	4603      	mov	r3, r0
 800680c:	73fb      	strb	r3, [r7, #15]
      if (err)
 800680e:	7bfb      	ldrb	r3, [r7, #15]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x42>
        return err;
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	e01d      	b.n	8006854 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      err = skipSpacesAndComments();
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff ff09 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800681e:	4603      	mov	r3, r0
 8006820:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006822:	7bfb      	ldrb	r3, [r7, #15]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x56>
        return err;
 8006828:	7bfb      	ldrb	r3, [r7, #15]
 800682a:	e013      	b.n	8006854 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (eat(']'))
 800682c:	215d      	movs	r1, #93	@ 0x5d
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fb3a 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x68>
        return DeserializationError::Ok;
 800683a:	2300      	movs	r3, #0
 800683c:	e00a      	b.n	8006854 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (!eat(','))
 800683e:	212c      	movs	r1, #44	@ 0x2c
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fb31 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006846:	4603      	mov	r3, r0
 8006848:	f083 0301 	eor.w	r3, r3, #1
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d0d2      	beq.n	80067f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x22>
        return DeserializationError::InvalidInput;
 8006852:	2303      	movs	r3, #3
  }
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseObject(
 800685c:	b590      	push	{r4, r7, lr}
 800685e:	b091      	sub	sp, #68	@ 0x44
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	713a      	strb	r2, [r7, #4]
 8006868:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 800686a:	463b      	mov	r3, r7
 800686c:	4618      	mov	r0, r3
 800686e:	f7fd f93a 	bl	8003ae6 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 8006878:	2305      	movs	r3, #5
 800687a:	e0d7      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    move();
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 fb06 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f7ff fed4 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006888:	4603      	mov	r3, r0
 800688a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (err)
 800688e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x40>
      return err;
 8006896:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800689a:	e0c7      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    if (eat('}'))
 800689c:	217d      	movs	r1, #125	@ 0x7d
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f000 fb02 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
      return DeserializationError::Ok;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e0be      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = parseKey();
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 fbba 	bl	8007028 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>
 80068b4:	4603      	mov	r3, r0
 80068b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 80068ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x6c>
        return err;
 80068c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80068c6:	e0b1      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f7ff feb1 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80068ce:	4603      	mov	r3, r0
 80068d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 80068d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
        return err;
 80068dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80068e0:	e0a4      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(':'))
 80068e2:	213a      	movs	r1, #58	@ 0x3a
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 fadf 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80068ea:	4603      	mov	r3, r0
 80068ec:	f083 0301 	eor.w	r3, r3, #1
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x9e>
        return DeserializationError::InvalidInput;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e098      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      JsonString key = stringBuilder_.str();
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	f107 0314 	add.w	r3, r7, #20
 8006900:	4611      	mov	r1, r2
 8006902:	4618      	mov	r0, r3
 8006904:	f7fc ff92 	bl	800382c <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>
      TFilter memberFilter = filter[key];
 8006908:	f107 0214 	add.w	r2, r7, #20
 800690c:	1d3b      	adds	r3, r7, #4
 800690e:	4611      	mov	r1, r2
 8006910:	4618      	mov	r0, r3
 8006912:	f000 fba9 	bl	8007068 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>
      if (memberFilter.allow()) {
 8006916:	f107 0310 	add.w	r3, r7, #16
 800691a:	4618      	mov	r0, r3
 800691c:	f7fd f886 	bl	8003a2c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d040      	beq.n	80069a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x14c>
        auto member = object.getMember(adaptString(key), resources_);
 8006926:	f107 0320 	add.w	r3, r7, #32
 800692a:	f107 0214 	add.w	r2, r7, #20
 800692e:	4611      	mov	r1, r2
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe f9c0 	bl	8004cb6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	f107 0320 	add.w	r3, r7, #32
 8006940:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006942:	68b8      	ldr	r0, [r7, #8]
 8006944:	f7fe ff21 	bl	800578a <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 8006948:	6378      	str	r0, [r7, #52]	@ 0x34
        if (!member) {
 800694a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800694c:	2b00      	cmp	r3, #0
 800694e:	d111      	bne.n	8006974 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x118>
          auto savedKey = stringBuilder_.save();
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4618      	mov	r0, r3
 8006954:	f7fc fee6 	bl	8003724 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 8006958:	62f8      	str	r0, [r7, #44]	@ 0x2c
          member = object.addMember(savedKey, resources_);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	461a      	mov	r2, r3
 8006960:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006962:	68b8      	ldr	r0, [r7, #8]
 8006964:	f000 fb8c 	bl	8007080 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 8006968:	6378      	str	r0, [r7, #52]	@ 0x34
          if (!member)
 800696a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800696c:	2b00      	cmp	r3, #0
 800696e:	d107      	bne.n	8006980 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
            return DeserializationError::NoMemory;
 8006970:	2304      	movs	r3, #4
 8006972:	e05b      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
          member->clear(resources_);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	4619      	mov	r1, r3
 800697a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800697c:	f7fc ffd6 	bl	800392c <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
        err = parseVariant(*member, memberFilter, nestingLimit.decrement());
 8006980:	463b      	mov	r3, r7
 8006982:	4618      	mov	r0, r3
 8006984:	f7fd f89c 	bl	8003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8006988:	4603      	mov	r3, r0
 800698a:	4622      	mov	r2, r4
 800698c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f7ff fc0e 	bl	80061b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8006994:	4603      	mov	r3, r0
 8006996:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 800699a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d015      	beq.n	80069ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 80069a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069a6:	e041      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
        err = skipVariant(nestingLimit.decrement());
 80069a8:	463b      	mov	r3, r7
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fd f888 	bl	8003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 80069b0:	4603      	mov	r3, r0
 80069b2:	4619      	mov	r1, r3
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 faa1 	bl	8006efc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 80069ba:	4603      	mov	r3, r0
 80069bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 80069c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 80069c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069cc:	e02e      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f7ff fe2e 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 80069da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
        return err;
 80069e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069e6:	e021      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (eat('}'))
 80069e8:	217d      	movs	r1, #125	@ 0x7d
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 fa5c 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x19e>
        return DeserializationError::Ok;
 80069f6:	2300      	movs	r3, #0
 80069f8:	e018      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(','))
 80069fa:	212c      	movs	r1, #44	@ 0x2c
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 fa53 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006a02:	4603      	mov	r3, r0
 8006a04:	f083 0301 	eor.w	r3, r3, #1
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1b6>
        return DeserializationError::InvalidInput;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e00c      	b.n	8006a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f7ff fe0c 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8006a1e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f43f af43 	beq.w	80068ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
        return err;
 8006a28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
  }
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	373c      	adds	r7, #60	@ 0x3c
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd90      	pop	{r4, r7, pc}

08006a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipObject(
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 8006a3e:	463b      	mov	r3, r7
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fd f850 	bl	8003ae6 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 8006a4c:	2305      	movs	r3, #5
 8006a4e:	e06d      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    move();
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fa1c 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7ff fdea 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73fb      	strb	r3, [r7, #15]
    if (err)
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x36>
      return err;
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
 8006a68:	e060      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    if (eat('}'))
 8006a6a:	217d      	movs	r1, #125	@ 0x7d
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fa1b 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
      return DeserializationError::Ok;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e057      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipKey();
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fb54 	bl	800712a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>
 8006a82:	4603      	mov	r3, r0
 8006a84:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x5c>
        return err;
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
 8006a8e:	e04d      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7ff fdcd 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006a96:	4603      	mov	r3, r0
 8006a98:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x70>
        return err;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	e043      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(':'))
 8006aa4:	213a      	movs	r1, #58	@ 0x3a
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f9fe 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006aac:	4603      	mov	r3, r0
 8006aae:	f083 0301 	eor.w	r3, r3, #1
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x88>
        return DeserializationError::InvalidInput;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e037      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipVariant(nestingLimit.decrement());
 8006abc:	463b      	mov	r3, r7
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fc fffe 	bl	8003ac0 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fa17 	bl	8006efc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xa8>
        return err;
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	e027      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff fda7 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xbc>
        return err;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	e01d      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (eat('}'))
 8006af0:	217d      	movs	r1, #125	@ 0x7d
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f9d8 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xce>
        return DeserializationError::Ok;
 8006afe:	2300      	movs	r3, #0
 8006b00:	e014      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(','))
 8006b02:	212c      	movs	r1, #44	@ 0x2c
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f9cf 	bl	8006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	f083 0301 	eor.w	r3, r3, #1
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xe6>
        return DeserializationError::InvalidInput;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e008      	b.n	8006b2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff fd88 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006b20:	4603      	mov	r3, r0
 8006b22:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0a8      	beq.n	8006a7c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
        return err;
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
  }
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>:
  DeserializationError::Code parseStringValue(VariantData& variant) {
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
    stringBuilder_.startString();
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fc fdd7 	bl	80036f4 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    err = parseQuotedString();
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fb0b 	bl	8007162 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	73fb      	strb	r3, [r7, #15]
    if (err)
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x26>
      return err;
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	e009      	b.n	8006b6e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x3a>
    variant.setOwnedString(stringBuilder_.save());
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fc fde1 	bl	8003724 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 8006b62:	4603      	mov	r3, r0
 8006b64:	4619      	mov	r1, r3
 8006b66:	6838      	ldr	r0, [r7, #0]
 8006b68:	f7fc f83f 	bl	8002bea <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return DeserializationError::Ok;
 8006b6c:	2300      	movs	r3, #0
  }
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>:
  DeserializationError::Code skipQuotedString() {
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
    const char stopChar = current();
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7ff fd8c 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006b84:	4603      	mov	r3, r0
 8006b86:	73fb      	strb	r3, [r7, #15]
    move();
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f980 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff fd84 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006b94:	4603      	mov	r3, r0
 8006b96:	73bb      	strb	r3, [r7, #14]
      move();
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f978 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 8006b9e:	7bba      	ldrb	r2, [r7, #14]
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d016      	beq.n	8006bd4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x5e>
      if (c == '\0')
 8006ba6:	7bbb      	ldrb	r3, [r7, #14]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x3a>
        return DeserializationError::IncompleteInput;
 8006bac:	2302      	movs	r3, #2
 8006bae:	e013      	b.n	8006bd8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x62>
      if (c == '\\') {
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	2b5c      	cmp	r3, #92	@ 0x5c
 8006bb4:	d1eb      	bne.n	8006b8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        if (current() != '\0')
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7ff fd70 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bf14      	ite	ne
 8006bc2:	2301      	movne	r3, #1
 8006bc4:	2300      	moveq	r3, #0
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0e0      	beq.n	8006b8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
          move();
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f95e 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (;;) {
 8006bd2:	e7dc      	b.n	8006b8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        break;
 8006bd4:	bf00      	nop
    return DeserializationError::Ok;
 8006bd6:	2300      	movs	r3, #0
  }
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>:
  DeserializationError::Code skipKeyword(const char* s) {
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
    while (*s) {
 8006bea:	e016      	b.n	8006c1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x3a>
      char c = current();
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7ff fd55 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	73fb      	strb	r3, [r7, #15]
      if (c == '\0')
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x20>
        return DeserializationError::IncompleteInput;
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	e011      	b.n	8006c24 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      if (*s != c)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	7bfa      	ldrb	r2, [r7, #15]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d001      	beq.n	8006c0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x2e>
        return DeserializationError::InvalidInput;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e00a      	b.n	8006c24 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      ++s;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	3301      	adds	r3, #1
 8006c12:	603b      	str	r3, [r7, #0]
      move();
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f93a 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    while (*s) {
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e4      	bne.n	8006bec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0xc>
    return DeserializationError::Ok;
 8006c22:	2300      	movs	r3, #0
  }
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>:
  DeserializationError::Code parseNumericValue(VariantData& result) {
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08a      	sub	sp, #40	@ 0x28
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	77fb      	strb	r3, [r7, #31]
    char c = current();
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7ff fd2e 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006c40:	4603      	mov	r3, r0
 8006c42:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 8006c44:	e00f      	b.n	8006c66 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x3a>
      move();
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f921 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      buffer_[n++] = c;
 8006c4c:	7fba      	ldrb	r2, [r7, #30]
 8006c4e:	7ffb      	ldrb	r3, [r7, #31]
 8006c50:	1c59      	adds	r1, r3, #1
 8006c52:	77f9      	strb	r1, [r7, #31]
 8006c54:	4619      	mov	r1, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	440b      	add	r3, r1
 8006c5a:	771a      	strb	r2, [r3, #28]
      c = current();
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff fd1d 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006c62:	4603      	mov	r3, r0
 8006c64:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 8006c66:	7fbb      	ldrb	r3, [r7, #30]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 fafb 	bl	8007264 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 8006c74:	7ffb      	ldrb	r3, [r7, #31]
 8006c76:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c78:	d801      	bhi.n	8006c7e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e000      	b.n	8006c80 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x54>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e0      	bne.n	8006c46 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x1a>
    buffer_[n] = 0;
 8006c84:	7ffb      	ldrb	r3, [r7, #31]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	4413      	add	r3, r2
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	771a      	strb	r2, [r3, #28]
    auto number = parseNumber(buffer_);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f103 021c 	add.w	r2, r3, #28
 8006c94:	f107 0308 	add.w	r3, r7, #8
 8006c98:	4611      	mov	r1, r2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fd f8e0 	bl	8003e60 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
    switch (number.type()) {
 8006ca0:	f107 0308 	add.w	r3, r7, #8
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fd f894 	bl	8003dd2 <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>
 8006caa:	4603      	mov	r3, r0
 8006cac:	3b01      	subs	r3, #1
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d85e      	bhi.n	8006d70 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x144>
 8006cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x8c>)
 8006cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb8:	08006d19 	.word	0x08006d19
 8006cbc:	08006cf1 	.word	0x08006cf1
 8006cc0:	08006cc9 	.word	0x08006cc9
 8006cc4:	08006d45 	.word	0x08006d45
        if (result.setInteger(number.asUnsignedInteger(), resources_))
 8006cc8:	f107 0308 	add.w	r3, r7, #8
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fd f89a 	bl	8003e06 <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	6989      	ldr	r1, [r1, #24]
 8006cda:	9100      	str	r1, [sp, #0]
 8006cdc:	6838      	ldr	r0, [r7, #0]
 8006cde:	f000 fae5 	bl	80072ac <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xc0>
          return DeserializationError::Ok;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	e042      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8006cec:	2304      	movs	r3, #4
 8006cee:	e040      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setInteger(number.asSignedInteger(), resources_))
 8006cf0:	f107 0308 	add.w	r3, r7, #8
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fd f878 	bl	8003dea <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	6989      	ldr	r1, [r1, #24]
 8006d02:	9100      	str	r1, [sp, #0]
 8006d04:	6838      	ldr	r0, [r7, #0]
 8006d06:	f000 fb13 	bl	8007330 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xe8>
          return DeserializationError::Ok;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e02e      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8006d14:	2304      	movs	r3, #4
 8006d16:	e02c      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asFloat(), resources_))
 8006d18:	f107 0308 	add.w	r3, r7, #8
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fd f880 	bl	8003e22 <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>
 8006d22:	eef0 7a40 	vmov.f32	s15, s0
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8006d30:	6838      	ldr	r0, [r7, #0]
 8006d32:	f000 fb3f 	bl	80073b4 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x114>
          return DeserializationError::Ok;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e018      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8006d40:	2304      	movs	r3, #4
 8006d42:	e016      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asDouble(), resources_))
 8006d44:	f107 0308 	add.w	r3, r7, #8
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fd f879 	bl	8003e40 <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>
 8006d4e:	eeb0 7b40 	vmov.f64	d7, d0
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	4619      	mov	r1, r3
 8006d58:	eeb0 0b47 	vmov.f64	d0, d7
 8006d5c:	6838      	ldr	r0, [r7, #0]
 8006d5e:	f000 fb3d 	bl	80073dc <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x140>
          return DeserializationError::Ok;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	e002      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8006d6c:	2304      	movs	r3, #4
 8006d6e:	e000      	b.n	8006d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        return DeserializationError::InvalidInput;
 8006d70:	2303      	movs	r3, #3
  }
 8006d72:	4618      	mov	r0, r3
 8006d74:	3720      	adds	r7, #32
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop

08006d7c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>:
  DeserializationError::Code skipNumericValue() {
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
    char c = current();
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff fc89 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 8006d8e:	e007      	b.n	8006da0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x24>
      move();
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f87c 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff fc80 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 fa5e 	bl	8007264 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1f0      	bne.n	8006d90 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x14>
    return DeserializationError::Ok;
 8006dae:	2300      	movs	r3, #0
  }
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7fc f990 	bl	80030e6 <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>
 8006dc6:	4603      	mov	r3, r0
  }
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>:
  static T forge(uint32_t bits) {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
    return alias_cast<T>(bits);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fb4c 	bl	8007476 <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>
 8006dde:	eef0 7a40 	vmov.f32	s15, s0
  }
 8006de2:	eeb0 0a67 	vmov.f32	s0, s15
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 8006dec:	b590      	push	{r4, r7, lr}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af02      	add	r7, sp, #8
 8006df2:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3304      	adds	r3, #4
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 fb4c 	bl	8007496 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>
 8006dfe:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3304      	adds	r3, #4
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff ffd7 	bl	8006db8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 8006e0a:	4602      	mov	r2, r0
    return VariantData::getMember(
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	9200      	str	r2, [sp, #0]
 8006e10:	330c      	adds	r3, #12
 8006e12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e14:	4620      	mov	r0, r4
 8006e16:	f000 f821 	bl	8006e5c <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 8006e1a:	4603      	mov	r3, r0
  }
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd90      	pop	{r4, r7, pc}

08006e24 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>:
  static T highest_for(
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
    return forge(0x4F7FFFFF);  // 4.29496704E9
 8006e2c:	4804      	ldr	r0, [pc, #16]	@ (8006e40 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE+0x1c>)
 8006e2e:	f7ff ffcf 	bl	8006dd0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 8006e32:	eef0 7a40 	vmov.f32	s15, s0
  }
 8006e36:	eeb0 0a67 	vmov.f32	s0, s15
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	4f7fffff 	.word	0x4f7fffff

08006e44 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
    return client.getData();
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7fc f9a0 	bl	8003192 <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>
 8006e52:	4603      	mov	r3, r0
  }
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>:
  static VariantData* getMember(const VariantData* var, TAdaptedString key,
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af02      	add	r7, sp, #8
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	4638      	mov	r0, r7
 8006e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!var)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x18>
      return 0;
 8006e70:	2300      	movs	r3, #0
 8006e72:	e008      	b.n	8006e86 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return var->getMember(key, resources);
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	463b      	mov	r3, r7
 8006e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e7e:	f000 fb16 	bl	80074ae <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>
 8006e82:	4603      	mov	r3, r0
 8006e84:	bf00      	nop
  }
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>:
  void move() {
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
    latch_.clear();
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3310      	adds	r3, #16
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fb1c 	bl	80074d8 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>
  }
 8006ea0:	bf00      	nop
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>:
  bool eat(char charToSkip) {
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	70fb      	strb	r3, [r7, #3]
    if (current() != charToSkip)
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7ff fbf1 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	78fb      	ldrb	r3, [r7, #3]
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	bf14      	ite	ne
 8006ec4:	2301      	movne	r3, #1
 8006ec6:	2300      	moveq	r3, #0
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x2a>
      return false;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	e003      	b.n	8006eda <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x32>
    move();
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7ff ffdb 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    return true;
 8006ed8:	2301      	movs	r3, #1
  }
 8006eda:	4618      	mov	r0, r3
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>:

  template <typename TKey>
  AllowAllFilter operator[](const TKey&) const {
 8006ee2:	b480      	push	{r7}
 8006ee4:	b083      	sub	sp, #12
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8006eec:	bf00      	nop
  }
 8006eee:	4618      	mov	r0, r3
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
	...

08006efc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipVariant(
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	7039      	strb	r1, [r7, #0]
    err = skipSpacesAndComments();
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff fb92 	bl	8006630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]
    if (err)
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x1e>
      return err;
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
 8006f18:	e07c      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
    switch (current()) {
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff fbbe 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b7b      	cmp	r3, #123	@ 0x7b
 8006f24:	dc71      	bgt.n	800700a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8006f26:	2b5b      	cmp	r3, #91	@ 0x5b
 8006f28:	da04      	bge.n	8006f34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x38>
 8006f2a:	2b22      	cmp	r3, #34	@ 0x22
 8006f2c:	d056      	beq.n	8006fdc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 8006f2e:	2b27      	cmp	r3, #39	@ 0x27
 8006f30:	d054      	beq.n	8006fdc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 8006f32:	e06a      	b.n	800700a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8006f34:	3b5b      	subs	r3, #91	@ 0x5b
 8006f36:	2b20      	cmp	r3, #32
 8006f38:	d867      	bhi.n	800700a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8006f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f40 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x44>)
 8006f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f40:	08006fc5 	.word	0x08006fc5
 8006f44:	0800700b 	.word	0x0800700b
 8006f48:	0800700b 	.word	0x0800700b
 8006f4c:	0800700b 	.word	0x0800700b
 8006f50:	0800700b 	.word	0x0800700b
 8006f54:	0800700b 	.word	0x0800700b
 8006f58:	0800700b 	.word	0x0800700b
 8006f5c:	0800700b 	.word	0x0800700b
 8006f60:	0800700b 	.word	0x0800700b
 8006f64:	0800700b 	.word	0x0800700b
 8006f68:	0800700b 	.word	0x0800700b
 8006f6c:	08006ff3 	.word	0x08006ff3
 8006f70:	0800700b 	.word	0x0800700b
 8006f74:	0800700b 	.word	0x0800700b
 8006f78:	0800700b 	.word	0x0800700b
 8006f7c:	0800700b 	.word	0x0800700b
 8006f80:	0800700b 	.word	0x0800700b
 8006f84:	0800700b 	.word	0x0800700b
 8006f88:	0800700b 	.word	0x0800700b
 8006f8c:	08006fff 	.word	0x08006fff
 8006f90:	0800700b 	.word	0x0800700b
 8006f94:	0800700b 	.word	0x0800700b
 8006f98:	0800700b 	.word	0x0800700b
 8006f9c:	0800700b 	.word	0x0800700b
 8006fa0:	0800700b 	.word	0x0800700b
 8006fa4:	08006fe7 	.word	0x08006fe7
 8006fa8:	0800700b 	.word	0x0800700b
 8006fac:	0800700b 	.word	0x0800700b
 8006fb0:	0800700b 	.word	0x0800700b
 8006fb4:	0800700b 	.word	0x0800700b
 8006fb8:	0800700b 	.word	0x0800700b
 8006fbc:	0800700b 	.word	0x0800700b
 8006fc0:	08006fd1 	.word	0x08006fd1
        return skipArray(nestingLimit);
 8006fc4:	7839      	ldrb	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7ff fc05 	bl	80067d6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	e021      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipObject(nestingLimit);
 8006fd0:	7839      	ldrb	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff fd2e 	bl	8006a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	e01b      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipQuotedString();
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7ff fdca 	bl	8006b76 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	e016      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("true");
 8006fe6:	490d      	ldr	r1, [pc, #52]	@ (800701c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x120>)
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff fdf9 	bl	8006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	e010      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("false");
 8006ff2:	490b      	ldr	r1, [pc, #44]	@ (8007020 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x124>)
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff fdf3 	bl	8006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	e00a      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("null");
 8006ffe:	4909      	ldr	r1, [pc, #36]	@ (8007024 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x128>)
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff fded 	bl	8006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8007006:	4603      	mov	r3, r0
 8007008:	e004      	b.n	8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipNumericValue();
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7ff feb6 	bl	8006d7c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 8007010:	4603      	mov	r3, r0
 8007012:	bf00      	nop
  }
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	0801e3d4 	.word	0x0801e3d4
 8007020:	0801e3dc 	.word	0x0801e3dc
 8007024:	0801e3e4 	.word	0x0801e3e4

08007028 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>:
  DeserializationError::Code parseKey() {
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
    stringBuilder_.startString();
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4618      	mov	r0, r3
 8007034:	f7fc fb5e 	bl	80036f4 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    if (isQuote(current())) {
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff fb2f 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800703e:	4603      	mov	r3, r0
 8007040:	4618      	mov	r0, r3
 8007042:	f000 fa6c 	bl	800751e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d004      	beq.n	8007056 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x2e>
      return parseQuotedString();
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f888 	bl	8007162 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 8007052:	4603      	mov	r3, r0
 8007054:	e004      	b.n	8007060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x38>
      return parseNonQuotedString();
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fa75 	bl	8007546 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>
 800705c:	4603      	mov	r3, r0
 800705e:	bf00      	nop
  }
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>:
  AllowAllFilter operator[](const TKey&) const {
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8007072:	bf00      	nop
  }
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 8007080:	b580      	push	{r7, lr}
 8007082:	b08a      	sub	sp, #40	@ 0x28
 8007084:	af02      	add	r7, sp, #8
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 800708c:	f107 0318 	add.w	r3, r7, #24
 8007090:	6879      	ldr	r1, [r7, #4]
 8007092:	4618      	mov	r0, r3
 8007094:	f7fc f9de 	bl	8003454 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 8007098:	f107 0318 	add.w	r3, r7, #24
 800709c:	4618      	mov	r0, r3
 800709e:	f7fd fc7d 	bl	800499c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 80070a2:	4603      	mov	r3, r0
 80070a4:	f083 0301 	eor.w	r3, r3, #1
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x32>
    return nullptr;
 80070ae:	2300      	movs	r3, #0
 80070b0:	e037      	b.n	8007122 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  auto valueSlot = resources->allocVariant();
 80070b2:	f107 0310 	add.w	r3, r7, #16
 80070b6:	6879      	ldr	r1, [r7, #4]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fc f9cb 	bl	8003454 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 80070be:	f107 0310 	add.w	r3, r7, #16
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fd fc6a 	bl	800499c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 80070c8:	4603      	mov	r3, r0
 80070ca:	f083 0301 	eor.w	r3, r3, #1
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x58>
    return nullptr;
 80070d4:	2300      	movs	r3, #0
 80070d6:	e024      	b.n	8007122 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  if (!keySlot->setString(key, resources))
 80070d8:	f107 0318 	add.w	r3, r7, #24
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fd fc86 	bl	80049ee <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 80070e2:	4603      	mov	r3, r0
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	68b9      	ldr	r1, [r7, #8]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fb fd6f 	bl	8002bcc <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>
 80070ee:	4603      	mov	r3, r0
 80070f0:	f083 0301 	eor.w	r3, r3, #1
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x7e>
    return nullptr;
 80070fa:	2300      	movs	r3, #0
 80070fc:	e011      	b.n	8007122 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	f107 0218 	add.w	r2, r7, #24
 800710e:	ca06      	ldmia	r2, {r1, r2}
 8007110:	f7fc f919 	bl	8003346 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 8007114:	f107 0310 	add.w	r3, r7, #16
 8007118:	4618      	mov	r0, r3
 800711a:	f7fd fc50 	bl	80049be <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800711e:	4603      	mov	r3, r0
 8007120:	bf00      	nop
}
 8007122:	4618      	mov	r0, r3
 8007124:	3720      	adds	r7, #32
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>:
  DeserializationError::Code skipKey() {
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
    if (isQuote(current())) {
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff fab2 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007138:	4603      	mov	r3, r0
 800713a:	4618      	mov	r0, r3
 800713c:	f000 f9ef 	bl	800751e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d004      	beq.n	8007150 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x26>
      return skipQuotedString();
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff fd15 	bl	8006b76 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 800714c:	4603      	mov	r3, r0
 800714e:	e004      	b.n	800715a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x30>
      return skipNonQuotedString();
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fa31 	bl	80075b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>
 8007156:	4603      	mov	r3, r0
 8007158:	bf00      	nop
  }
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>:
  DeserializationError::Code parseQuotedString() {
 8007162:	b580      	push	{r7, lr}
 8007164:	b086      	sub	sp, #24
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
    Utf16::Codepoint codepoint;
 800716a:	f107 030c 	add.w	r3, r7, #12
 800716e:	4618      	mov	r0, r3
 8007170:	f7fc fd14 	bl	8003b9c <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>
    const char stopChar = current();
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7ff fa91 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800717a:	4603      	mov	r3, r0
 800717c:	75bb      	strb	r3, [r7, #22]
    move();
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7ff fe85 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7ff fa89 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800718a:	4603      	mov	r3, r0
 800718c:	75fb      	strb	r3, [r7, #23]
      move();
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7ff fe7d 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 8007194:	7dfa      	ldrb	r2, [r7, #23]
 8007196:	7dbb      	ldrb	r3, [r7, #22]
 8007198:	429a      	cmp	r2, r3
 800719a:	d051      	beq.n	8007240 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xde>
      if (c == '\0')
 800719c:	7dfb      	ldrb	r3, [r7, #23]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x44>
        return DeserializationError::IncompleteInput;
 80071a2:	2302      	movs	r3, #2
 80071a4:	e05a      	b.n	800725c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
      if (c == '\\') {
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	2b5c      	cmp	r3, #92	@ 0x5c
 80071aa:	d140      	bne.n	800722e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xcc>
        c = current();
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff fa75 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80071b2:	4603      	mov	r3, r0
 80071b4:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x5e>
          return DeserializationError::IncompleteInput;
 80071bc:	2302      	movs	r3, #2
 80071be:	e04d      	b.n	800725c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        if (c == 'u') {
 80071c0:	7dfb      	ldrb	r3, [r7, #23]
 80071c2:	2b75      	cmp	r3, #117	@ 0x75
 80071c4:	d125      	bne.n	8007212 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xb0>
          move();
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7ff fe61 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          err = parseHex4(codeunit);
 80071cc:	f107 030a 	add.w	r3, r7, #10
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fa0e 	bl	80075f4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>
 80071d8:	4603      	mov	r3, r0
 80071da:	757b      	strb	r3, [r7, #21]
          if (err)
 80071dc:	7d7b      	ldrb	r3, [r7, #21]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x84>
            return err;
 80071e2:	7d7b      	ldrb	r3, [r7, #21]
 80071e4:	e03a      	b.n	800725c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
          if (codepoint.append(codeunit))
 80071e6:	897a      	ldrh	r2, [r7, #10]
 80071e8:	f107 030c 	add.w	r3, r7, #12
 80071ec:	4611      	mov	r1, r2
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fc fce5 	bl	8003bbe <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d020      	beq.n	800723c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xda>
            Utf8::encodeCodepoint(codepoint.value(), stringBuilder_);
 80071fa:	f107 030c 	add.w	r3, r7, #12
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fc fd0f 	bl	8003c22 <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>
 8007204:	4602      	mov	r2, r0
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4619      	mov	r1, r3
 800720a:	4610      	mov	r0, r2
 800720c:	f000 fa2b 	bl	8007666 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>
 8007210:	e7b8      	b.n	8007184 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        c = EscapeSequence::unescapeChar(c);
 8007212:	7dfb      	ldrb	r3, [r7, #23]
 8007214:	4618      	mov	r0, r3
 8007216:	f7fc fa0c 	bl	8003632 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>
 800721a:	4603      	mov	r3, r0
 800721c:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 800721e:	7dfb      	ldrb	r3, [r7, #23]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xc6>
          return DeserializationError::InvalidInput;
 8007224:	2303      	movs	r3, #3
 8007226:	e019      	b.n	800725c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        move();
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7ff fe30 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      stringBuilder_.append(c);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	7dfa      	ldrb	r2, [r7, #23]
 8007232:	4611      	mov	r1, r2
 8007234:	4618      	mov	r0, r3
 8007236:	f7fc fab6 	bl	80037a6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
 800723a:	e7a3      	b.n	8007184 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
          continue;
 800723c:	bf00      	nop
    for (;;) {
 800723e:	e7a1      	b.n	8007184 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        break;
 8007240:	bf00      	nop
    if (!stringBuilder_.isValid())
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4618      	mov	r0, r3
 8007246:	f7fc fae0 	bl	800380a <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 800724a:	4603      	mov	r3, r0
 800724c:	f083 0301 	eor.w	r3, r3, #1
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xf8>
      return DeserializationError::NoMemory;
 8007256:	2304      	movs	r3, #4
 8007258:	e000      	b.n	800725c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
    return DeserializationError::Ok;
 800725a:	2300      	movs	r3, #0
  }
 800725c:	4618      	mov	r0, r3
 800725e:	3718      	adds	r7, #24
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>:
  static inline bool canBeInNumber(char c) {
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	4603      	mov	r3, r0
 800726c:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 800726e:	79fb      	ldrb	r3, [r7, #7]
 8007270:	2239      	movs	r2, #57	@ 0x39
 8007272:	2130      	movs	r1, #48	@ 0x30
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fa7a 	bl	800776e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800727a:	4603      	mov	r3, r0
           c == 'e' || c == 'E';
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10e      	bne.n	800729e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8007280:	79fb      	ldrb	r3, [r7, #7]
 8007282:	2b2b      	cmp	r3, #43	@ 0x2b
 8007284:	d00b      	beq.n	800729e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8007286:	79fb      	ldrb	r3, [r7, #7]
 8007288:	2b2d      	cmp	r3, #45	@ 0x2d
 800728a:	d008      	beq.n	800729e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007290:	d005      	beq.n	800729e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8007292:	79fb      	ldrb	r3, [r7, #7]
 8007294:	2b65      	cmp	r3, #101	@ 0x65
 8007296:	d002      	beq.n	800729e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
           c == 'e' || c == 'E';
 8007298:	79fb      	ldrb	r3, [r7, #7]
 800729a:	2b45      	cmp	r3, #69	@ 0x45
 800729c:	d101      	bne.n	80072a2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3e>
 800729e:	2301      	movs	r3, #1
 80072a0:	e000      	b.n	80072a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x40>
 80072a2:	2300      	movs	r3, #0
  }
 80072a4:	4618      	mov	r0, r3
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 80072ac:	b5b0      	push	{r4, r5, r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	e9c7 2300 	strd	r2, r3, [r7]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 80072b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072bc:	f7ff f8be 	bl	800643c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d006      	beq.n	80072d4 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Uint32;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	220a      	movs	r2, #10
 80072ca:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	e028      	b.n	8007326 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 80072d4:	f107 0310 	add.w	r3, r7, #16
 80072d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fc f93f 	bl	800355e <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 80072e0:	f107 0310 	add.w	r3, r7, #16
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 fa5c 	bl	80077a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 80072ea:	4603      	mov	r3, r0
 80072ec:	f083 0301 	eor.w	r3, r3, #1
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 80072f6:	2300      	movs	r3, #0
 80072f8:	e016      	b.n	8007328 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Uint64;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	221a      	movs	r2, #26
 80072fe:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8007300:	f107 0310 	add.w	r3, r7, #16
 8007304:	4618      	mov	r0, r3
 8007306:	f000 fa5d 	bl	80077c4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800730a:	4603      	mov	r3, r0
 800730c:	461a      	mov	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 8007312:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007316:	f107 0310 	add.w	r3, r7, #16
 800731a:	4618      	mov	r0, r3
 800731c:	f000 fa5e 	bl	80077dc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8007320:	4603      	mov	r3, r0
 8007322:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 8007326:	2301      	movs	r3, #1
}
 8007328:	4618      	mov	r0, r3
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bdb0      	pop	{r4, r5, r7, pc}

08007330 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
enable_if_t<is_signed<T>::value, bool> VariantData::setInteger(
 8007330:	b5b0      	push	{r4, r5, r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	e9c7 2300 	strd	r2, r3, [r7]
  if (canConvertNumber<int32_t>(value)) {
 800733c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007340:	f000 fa58 	bl	80077f4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d006      	beq.n	8007358 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Int32;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	220c      	movs	r2, #12
 800734e:	711a      	strb	r2, [r3, #4]
    content_.asInt32 = static_cast<int32_t>(value);
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	e028      	b.n	80073aa <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
    auto extension = resources->allocExtension();
 8007358:	f107 0310 	add.w	r3, r7, #16
 800735c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800735e:	4618      	mov	r0, r3
 8007360:	f7fc f8fd 	bl	800355e <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8007364:	f107 0310 	add.w	r3, r7, #16
 8007368:	4618      	mov	r0, r3
 800736a:	f000 fa1a 	bl	80077a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 800736e:	4603      	mov	r3, r0
 8007370:	f083 0301 	eor.w	r3, r3, #1
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 800737a:	2300      	movs	r3, #0
 800737c:	e016      	b.n	80073ac <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Int64;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	221c      	movs	r2, #28
 8007382:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8007384:	f107 0310 	add.w	r3, r7, #16
 8007388:	4618      	mov	r0, r3
 800738a:	f000 fa1b 	bl	80077c4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800738e:	4603      	mov	r3, r0
 8007390:	461a      	mov	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	801a      	strh	r2, [r3, #0]
    extension->asInt64 = value;
 8007396:	e9d7 4500 	ldrd	r4, r5, [r7]
 800739a:	f107 0310 	add.w	r3, r7, #16
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 fa1c 	bl	80077dc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 80073a4:	4603      	mov	r3, r0
 80073a6:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 80073aa:	2301      	movs	r3, #1
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bdb0      	pop	{r4, r5, r7, pc}

080073b4 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>:
  enable_if_t<sizeof(T) == 4, bool> setFloat(T value, ResourceManager*) {
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80073c0:	6079      	str	r1, [r7, #4]
    type_ = VariantType::Float;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	220e      	movs	r2, #14
 80073c6:	711a      	strb	r2, [r3, #4]
    content_.asFloat = value;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	601a      	str	r2, [r3, #0]
    return true;
 80073ce:	2301      	movs	r3, #1
  }
 80073d0:	4618      	mov	r0, r3
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>:
enable_if_t<sizeof(T) == 8, bool> VariantData::setFloat(
 80073dc:	b5b0      	push	{r4, r5, r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	ed87 0b00 	vstr	d0, [r7]
 80073e8:	60b9      	str	r1, [r7, #8]
  float valueAsFloat = static_cast<float>(value);
 80073ea:	ed97 7b00 	vldr	d7, [r7]
 80073ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80073f2:	edc7 7a07 	vstr	s15, [r7, #28]
  if (value == valueAsFloat) {
 80073f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80073fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80073fe:	ed97 6b00 	vldr	d6, [r7]
 8007402:	eeb4 6b47 	vcmp.f64	d6, d7
 8007406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800740a:	d106      	bne.n	800741a <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x3e>
    type_ = VariantType::Float;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	220e      	movs	r2, #14
 8007410:	711a      	strb	r2, [r3, #4]
    content_.asFloat = valueAsFloat;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	69fa      	ldr	r2, [r7, #28]
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	e028      	b.n	800746c <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x90>
    auto extension = resources->allocExtension();
 800741a:	f107 0314 	add.w	r3, r7, #20
 800741e:	68b9      	ldr	r1, [r7, #8]
 8007420:	4618      	mov	r0, r3
 8007422:	f7fc f89c 	bl	800355e <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8007426:	f107 0314 	add.w	r3, r7, #20
 800742a:	4618      	mov	r0, r3
 800742c:	f000 f9b9 	bl	80077a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8007430:	4603      	mov	r3, r0
 8007432:	f083 0301 	eor.w	r3, r3, #1
 8007436:	b2db      	uxtb	r3, r3
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x64>
      return false;
 800743c:	2300      	movs	r3, #0
 800743e:	e016      	b.n	800746e <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x92>
    type_ = VariantType::Double;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	221e      	movs	r2, #30
 8007444:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8007446:	f107 0314 	add.w	r3, r7, #20
 800744a:	4618      	mov	r0, r3
 800744c:	f000 f9ba 	bl	80077c4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8007450:	4603      	mov	r3, r0
 8007452:	461a      	mov	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	801a      	strh	r2, [r3, #0]
    extension->asDouble = value;
 8007458:	e9d7 4500 	ldrd	r4, r5, [r7]
 800745c:	f107 0314 	add.w	r3, r7, #20
 8007460:	4618      	mov	r0, r3
 8007462:	f000 f9bb 	bl	80077dc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8007466:	4603      	mov	r3, r0
 8007468:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 800746c:	2301      	movs	r3, #1
}
 800746e:	4618      	mov	r0, r3
 8007470:	3720      	adds	r7, #32
 8007472:	46bd      	mov	sp, r7
 8007474:	bdb0      	pop	{r4, r5, r7, pc}

08007476 <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>:
T alias_cast(F raw_data) {
 8007476:	b480      	push	{r7}
 8007478:	b085      	sub	sp, #20
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  ac.raw = raw_data;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	60fb      	str	r3, [r7, #12]
  return ac.data;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	ee07 3a90 	vmov	s15, r3
}
 8007488:	eeb0 0a67 	vmov.f32	s0, s15
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8007496:	b580      	push	{r7, lr}
 8007498:	b082      	sub	sp, #8
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
    return client.getData();
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7fb fe2d 	bl	80030fe <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>
 80074a4:	4603      	mov	r3, r0
  }
 80074a6:	4618      	mov	r0, r3
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>:
  VariantData* getMember(TAdaptedString key,
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b086      	sub	sp, #24
 80074b2:	af02      	add	r7, sp, #8
 80074b4:	60f8      	str	r0, [r7, #12]
 80074b6:	4638      	mov	r0, r7
 80074b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    return ObjectData::getMember(asObject(), key, resources);
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f7fb faf3 	bl	8002aa8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	463b      	mov	r3, r7
 80074c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074ca:	f7fd fe75 	bl	80051b8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>
 80074ce:	4603      	mov	r3, r0
  }
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>:
  void clear() {
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
    loaded_ = false;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	715a      	strb	r2, [r3, #5]
  }
 80074e6:	bf00      	nop
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>:
  }

 private:
  void load() {
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(!ended_);
    int c = reader_.read();
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 f99f 	bl	8007840 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>
 8007502:	60f8      	str	r0, [r7, #12]
#if ARDUINOJSON_DEBUG
    if (c <= 0)
      ended_ = true;
#endif
    current_ = static_cast<char>(c > 0 ? c : 0);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800750a:	b2da      	uxtb	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	711a      	strb	r2, [r3, #4]
    loaded_ = true;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	715a      	strb	r2, [r3, #5]
  }
 8007516:	bf00      	nop
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	4603      	mov	r3, r0
 8007526:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 8007528:	79fb      	ldrb	r3, [r7, #7]
 800752a:	2b27      	cmp	r3, #39	@ 0x27
 800752c:	d002      	beq.n	8007534 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x16>
 800752e:	79fb      	ldrb	r3, [r7, #7]
 8007530:	2b22      	cmp	r3, #34	@ 0x22
 8007532:	d101      	bne.n	8007538 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1a>
 8007534:	2301      	movs	r3, #1
 8007536:	e000      	b.n	800753a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1c>
 8007538:	2300      	movs	r3, #0
  }
 800753a:	4618      	mov	r0, r3
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>:
  DeserializationError::Code parseNonQuotedString() {
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
    char c = current();
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff f8a4 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007554:	4603      	mov	r3, r0
 8007556:	73fb      	strb	r3, [r7, #15]
    if (canBeInNonQuotedString(c)) {  // no quotes
 8007558:	7bfb      	ldrb	r3, [r7, #15]
 800755a:	4618      	mov	r0, r3
 800755c:	f000 f980 	bl	8007860 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d015      	beq.n	8007592 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x4c>
        move();
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff fc91 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
        stringBuilder_.append(c);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	7bfa      	ldrb	r2, [r7, #15]
 8007570:	4611      	mov	r1, r2
 8007572:	4618      	mov	r0, r3
 8007574:	f7fc f917 	bl	80037a6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
        c = current();
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7ff f88f 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800757e:	4603      	mov	r3, r0
 8007580:	73fb      	strb	r3, [r7, #15]
      } while (canBeInNonQuotedString(c));
 8007582:	7bfb      	ldrb	r3, [r7, #15]
 8007584:	4618      	mov	r0, r3
 8007586:	f000 f96b 	bl	8007860 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1ea      	bne.n	8007566 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x20>
 8007590:	e001      	b.n	8007596 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x50>
      return DeserializationError::InvalidInput;
 8007592:	2303      	movs	r3, #3
 8007594:	e00c      	b.n	80075b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    if (!stringBuilder_.isValid())
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4618      	mov	r0, r3
 800759a:	f7fc f936 	bl	800380a <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 800759e:	4603      	mov	r3, r0
 80075a0:	f083 0301 	eor.w	r3, r3, #1
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x68>
      return DeserializationError::NoMemory;
 80075aa:	2304      	movs	r3, #4
 80075ac:	e000      	b.n	80075b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    return DeserializationError::Ok;
 80075ae:	2300      	movs	r3, #0
  }
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>:
  DeserializationError::Code skipNonQuotedString() {
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
    char c = current();
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff f86b 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80075c6:	4603      	mov	r3, r0
 80075c8:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 80075ca:	e007      	b.n	80075dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x24>
      move();
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7ff fc5e 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff f862 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80075d8:	4603      	mov	r3, r0
 80075da:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 f93e 	bl	8007860 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1f0      	bne.n	80075cc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x14>
    return DeserializationError::Ok;
 80075ea:	2300      	movs	r3, #0
  }
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>:
  DeserializationError::Code parseHex4(uint16_t& result) {
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
    result = 0;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2200      	movs	r2, #0
 8007602:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; ++i) {
 8007604:	2300      	movs	r3, #0
 8007606:	73fb      	strb	r3, [r7, #15]
 8007608:	e025      	b.n	8007656 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x62>
      char digit = current();
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff f846 	bl	800669c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007610:	4603      	mov	r3, r0
 8007612:	73bb      	strb	r3, [r7, #14]
      if (!digit)
 8007614:	7bbb      	ldrb	r3, [r7, #14]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x2a>
        return DeserializationError::IncompleteInput;
 800761a:	2302      	movs	r3, #2
 800761c:	e01f      	b.n	800765e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      uint8_t value = decodeHex(digit);
 800761e:	7bbb      	ldrb	r3, [r7, #14]
 8007620:	4618      	mov	r0, r3
 8007622:	f000 f944 	bl	80078ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>
 8007626:	4603      	mov	r3, r0
 8007628:	737b      	strb	r3, [r7, #13]
      if (value > 0x0F)
 800762a:	7b7b      	ldrb	r3, [r7, #13]
 800762c:	2b0f      	cmp	r3, #15
 800762e:	d901      	bls.n	8007634 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x40>
        return DeserializationError::InvalidInput;
 8007630:	2303      	movs	r3, #3
 8007632:	e014      	b.n	800765e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      result = uint16_t((result << 4) | value);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	b21a      	sxth	r2, r3
 800763c:	7b7b      	ldrb	r3, [r7, #13]
 800763e:	b21b      	sxth	r3, r3
 8007640:	4313      	orrs	r3, r2
 8007642:	b21b      	sxth	r3, r3
 8007644:	b29a      	uxth	r2, r3
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	801a      	strh	r2, [r3, #0]
      move();
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7ff fc1f 	bl	8006e8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (uint8_t i = 0; i < 4; ++i) {
 8007650:	7bfb      	ldrb	r3, [r7, #15]
 8007652:	3301      	adds	r3, #1
 8007654:	73fb      	strb	r3, [r7, #15]
 8007656:	7bfb      	ldrb	r3, [r7, #15]
 8007658:	2b03      	cmp	r3, #3
 800765a:	d9d6      	bls.n	800760a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x16>
    return DeserializationError::Ok;
 800765c:	2300      	movs	r3, #0
  }
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf8 {
template <typename TStringBuilder>
inline void encodeCodepoint(uint32_t codepoint32, TStringBuilder& str) {
 8007666:	b580      	push	{r7, lr}
 8007668:	b086      	sub	sp, #24
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	6039      	str	r1, [r7, #0]
  // this function was optimize for code size on AVR

  if (codepoint32 < 0x80) {
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b7f      	cmp	r3, #127	@ 0x7f
 8007674:	d806      	bhi.n	8007684 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x1e>
    str.append(char(codepoint32));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	4619      	mov	r1, r3
 800767c:	6838      	ldr	r0, [r7, #0]
 800767e:	f7fc f892 	bl	80037a6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>

    while (*(--p)) {
      str.append(*p);
    }
  }
}
 8007682:	e070      	b.n	8007766 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x100>
    char* p = buf;
 8007684:	f107 030c 	add.w	r3, r7, #12
 8007688:	617b      	str	r3, [r7, #20]
    *(p++) = 0;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	617a      	str	r2, [r7, #20]
 8007690:	2200      	movs	r2, #0
 8007692:	701a      	strb	r2, [r3, #0]
    *(p++) = char((codepoint32 | 0x80) & 0xBF);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	b2db      	uxtb	r3, r3
 8007698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800769c:	b2db      	uxtb	r3, r3
 800769e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80076a2:	b2d9      	uxtb	r1, r3
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	1c5a      	adds	r2, r3, #1
 80076a8:	617a      	str	r2, [r7, #20]
 80076aa:	460a      	mov	r2, r1
 80076ac:	701a      	strb	r2, [r3, #0]
    uint16_t codepoint16 = uint16_t(codepoint32 >> 6);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	099b      	lsrs	r3, r3, #6
 80076b2:	827b      	strh	r3, [r7, #18]
    if (codepoint16 < 0x20) {  // 0x800
 80076b4:	8a7b      	ldrh	r3, [r7, #18]
 80076b6:	2b1f      	cmp	r3, #31
 80076b8:	d80a      	bhi.n	80076d0 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x6a>
      *(p++) = char(codepoint16 | 0xC0);
 80076ba:	8a7b      	ldrh	r3, [r7, #18]
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80076c2:	b2d9      	uxtb	r1, r3
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	617a      	str	r2, [r7, #20]
 80076ca:	460a      	mov	r2, r1
 80076cc:	701a      	strb	r2, [r3, #0]
 80076ce:	e03e      	b.n	800774e <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      *(p++) = char((codepoint16 | 0x80) & 0xBF);
 80076d0:	8a7b      	ldrh	r3, [r7, #18]
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80076de:	b2d9      	uxtb	r1, r3
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	1c5a      	adds	r2, r3, #1
 80076e4:	617a      	str	r2, [r7, #20]
 80076e6:	460a      	mov	r2, r1
 80076e8:	701a      	strb	r2, [r3, #0]
      codepoint16 = uint16_t(codepoint16 >> 6);
 80076ea:	8a7b      	ldrh	r3, [r7, #18]
 80076ec:	099b      	lsrs	r3, r3, #6
 80076ee:	827b      	strh	r3, [r7, #18]
      if (codepoint16 < 0x10) {  // 0x10000
 80076f0:	8a7b      	ldrh	r3, [r7, #18]
 80076f2:	2b0f      	cmp	r3, #15
 80076f4:	d80a      	bhi.n	800770c <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xa6>
        *(p++) = char(codepoint16 | 0xE0);
 80076f6:	8a7b      	ldrh	r3, [r7, #18]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	f063 031f 	orn	r3, r3, #31
 80076fe:	b2d9      	uxtb	r1, r3
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	617a      	str	r2, [r7, #20]
 8007706:	460a      	mov	r2, r1
 8007708:	701a      	strb	r2, [r3, #0]
 800770a:	e020      	b.n	800774e <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
        *(p++) = char((codepoint16 | 0x80) & 0xBF);
 800770c:	8a7b      	ldrh	r3, [r7, #18]
 800770e:	b2db      	uxtb	r3, r3
 8007710:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007714:	b2db      	uxtb	r3, r3
 8007716:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800771a:	b2d9      	uxtb	r1, r3
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	1c5a      	adds	r2, r3, #1
 8007720:	617a      	str	r2, [r7, #20]
 8007722:	460a      	mov	r2, r1
 8007724:	701a      	strb	r2, [r3, #0]
        codepoint16 = uint16_t(codepoint16 >> 6);
 8007726:	8a7b      	ldrh	r3, [r7, #18]
 8007728:	099b      	lsrs	r3, r3, #6
 800772a:	827b      	strh	r3, [r7, #18]
        *(p++) = char(codepoint16 | 0xF0);
 800772c:	8a7b      	ldrh	r3, [r7, #18]
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f063 030f 	orn	r3, r3, #15
 8007734:	b2d9      	uxtb	r1, r3
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	617a      	str	r2, [r7, #20]
 800773c:	460a      	mov	r2, r1
 800773e:	701a      	strb	r2, [r3, #0]
    while (*(--p)) {
 8007740:	e005      	b.n	800774e <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      str.append(*p);
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	4619      	mov	r1, r3
 8007748:	6838      	ldr	r0, [r7, #0]
 800774a:	f7fc f82c 	bl	80037a6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
    while (*(--p)) {
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	3b01      	subs	r3, #1
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	bf14      	ite	ne
 800775c:	2301      	movne	r3, #1
 800775e:	2300      	moveq	r3, #0
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1ed      	bne.n	8007742 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xdc>
}
 8007766:	bf00      	nop
 8007768:	3718      	adds	r7, #24
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	4603      	mov	r3, r0
 8007776:	71fb      	strb	r3, [r7, #7]
 8007778:	460b      	mov	r3, r1
 800777a:	71bb      	strb	r3, [r7, #6]
 800777c:	4613      	mov	r3, r2
 800777e:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 8007780:	79ba      	ldrb	r2, [r7, #6]
 8007782:	79fb      	ldrb	r3, [r7, #7]
 8007784:	429a      	cmp	r2, r3
 8007786:	d805      	bhi.n	8007794 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 8007788:	79fa      	ldrb	r2, [r7, #7]
 800778a:	797b      	ldrb	r3, [r7, #5]
 800778c:	429a      	cmp	r2, r3
 800778e:	d801      	bhi.n	8007794 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 8007790:	2301      	movs	r3, #1
 8007792:	e000      	b.n	8007796 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x28>
 8007794:	2300      	movs	r3, #0
  }
 8007796:	4618      	mov	r0, r3
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>:
  explicit operator bool() const {
 80077a2:	b480      	push	{r7}
 80077a4:	b083      	sub	sp, #12
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	bf14      	ite	ne
 80077b2:	2301      	movne	r3, #1
 80077b4:	2300      	moveq	r3, #0
 80077b6:	b2db      	uxtb	r3, r3
  }
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>:
  SlotId id() const {
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
    return id_;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	889b      	ldrh	r3, [r3, #4]
  }
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>:
  T* operator->() const {
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
    return ptr_;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
  }
 80077e8:	4618      	mov	r0, r3
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80077f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80077f8:	b082      	sub	sp, #8
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 8007800:	f000 f86e 	bl	80078e0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 8007804:	4603      	mov	r3, r0
 8007806:	17da      	asrs	r2, r3, #31
 8007808:	4698      	mov	r8, r3
 800780a:	4691      	mov	r9, r2
 800780c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007810:	4542      	cmp	r2, r8
 8007812:	eb73 0309 	sbcs.w	r3, r3, r9
 8007816:	db0d      	blt.n	8007834 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 8007818:	f000 f86b 	bl	80078f2 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>
 800781c:	4603      	mov	r3, r0
 800781e:	17da      	asrs	r2, r3, #31
 8007820:	461c      	mov	r4, r3
 8007822:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 8007824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007828:	4294      	cmp	r4, r2
 800782a:	eb75 0303 	sbcs.w	r3, r5, r3
 800782e:	db01      	blt.n	8007834 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08007840 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>:

  int read() {
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
    return static_cast<unsigned char>(*ptr_++);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	1c59      	adds	r1, r3, #1
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	6011      	str	r1, [r2, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
  }
 8007854:	4618      	mov	r0, r3
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	4603      	mov	r3, r0
 8007868:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800786a:	79fb      	ldrb	r3, [r7, #7]
 800786c:	2239      	movs	r2, #57	@ 0x39
 800786e:	2130      	movs	r1, #48	@ 0x30
 8007870:	4618      	mov	r0, r3
 8007872:	f7ff ff7c 	bl	800776e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d111      	bne.n	80078a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
 800787c:	79fb      	ldrb	r3, [r7, #7]
 800787e:	227a      	movs	r2, #122	@ 0x7a
 8007880:	215f      	movs	r1, #95	@ 0x5f
 8007882:	4618      	mov	r0, r3
 8007884:	f7ff ff73 	bl	800776e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d108      	bne.n	80078a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
           isBetween(c, 'A', 'Z');
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	225a      	movs	r2, #90	@ 0x5a
 8007892:	2141      	movs	r1, #65	@ 0x41
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff ff6a 	bl	800776e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800789a:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x44>
 80078a0:	2301      	movs	r3, #1
 80078a2:	e000      	b.n	80078a6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x46>
 80078a4:	2300      	movs	r3, #0
  }
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>:
  static inline uint8_t decodeHex(char c) {
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	4603      	mov	r3, r0
 80078b6:	71fb      	strb	r3, [r7, #7]
    if (c < 'A')
 80078b8:	79fb      	ldrb	r3, [r7, #7]
 80078ba:	2b40      	cmp	r3, #64	@ 0x40
 80078bc:	d803      	bhi.n	80078c6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x18>
      return uint8_t(c - '0');
 80078be:	79fb      	ldrb	r3, [r7, #7]
 80078c0:	3b30      	subs	r3, #48	@ 0x30
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	e006      	b.n	80078d4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x26>
    c = char(c & ~0x20);  // uppercase
 80078c6:	79fb      	ldrb	r3, [r7, #7]
 80078c8:	f023 0320 	bic.w	r3, r3, #32
 80078cc:	71fb      	strb	r3, [r7, #7]
    return uint8_t(c - 'A' + 10);
 80078ce:	79fb      	ldrb	r3, [r7, #7]
 80078d0:	3b37      	subs	r3, #55	@ 0x37
 80078d2:	b2db      	uxtb	r3, r3
  }
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>:
};

template <typename T>
struct numeric_limits<
    T, enable_if_t<is_integral<T>::value && is_signed<T>::value>> {
  static constexpr T lowest() {
 80078e0:	b480      	push	{r7}
 80078e2:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 80078e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 80078e8:	4618      	mov	r0, r3
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>:
  static constexpr T highest() {
 80078f2:	b580      	push	{r7, lr}
 80078f4:	af00      	add	r7, sp, #0
    return T(~lowest());
 80078f6:	f7ff fff3 	bl	80078e0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 80078fa:	4603      	mov	r3, r0
 80078fc:	43db      	mvns	r3, r3
  }
 80078fe:	4618      	mov	r0, r3
 8007900:	bd80      	pop	{r7, pc}
	...

08007904 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800790c:	1d39      	adds	r1, r7, #4
 800790e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007912:	2201      	movs	r2, #1
 8007914:	4803      	ldr	r0, [pc, #12]	@ (8007924 <__io_putchar+0x20>)
 8007916:	f010 fcb0 	bl	801827a <HAL_UART_Transmit>
	  return ch;
 800791a:	687b      	ldr	r3, [r7, #4]
	}
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	24000374 	.word	0x24000374

08007928 <main>:
}

int main(void)
{
 8007928:	b590      	push	{r4, r7, lr}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
	MPU_Config();
 800792e:	f000 fa55 	bl	8007ddc <_ZL10MPU_Configv>
	//SCB->VTOR = 0x08000000;
	HAL_Init();
 8007932:	f008 fa19 	bl	800fd68 <HAL_Init>
	SystemClock_Config();
 8007936:	f000 f867 	bl	8007a08 <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 800793a:	f000 f92f 	bl	8007b9c <_Z24PeriphCommonClock_Configv>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800793e:	f3bf 8f4f 	dsb	sy
}
 8007942:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007944:	f3bf 8f6f 	isb	sy
}
 8007948:	bf00      	nop
__STATIC_FORCEINLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 800794a:	4b2d      	ldr	r3, [pc, #180]	@ (8007a00 <main+0xd8>)
 800794c:	2200      	movs	r2, #0
 800794e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8007952:	f3bf 8f4f 	dsb	sy
}
 8007956:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007958:	f3bf 8f6f 	isb	sy
}
 800795c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800795e:	bf00      	nop
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8007960:	4b27      	ldr	r3, [pc, #156]	@ (8007a00 <main+0xd8>)
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007968:	2b00      	cmp	r3, #0
 800796a:	bf14      	ite	ne
 800796c:	2301      	movne	r3, #1
 800796e:	2300      	moveq	r3, #0
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d11b      	bne.n	80079ae <main+0x86>
  __ASM volatile ("dsb 0xF":::"memory");
 8007976:	f3bf 8f4f 	dsb	sy
}
 800797a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800797c:	f3bf 8f6f 	isb	sy
}
 8007980:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8007982:	4b1f      	ldr	r3, [pc, #124]	@ (8007a00 <main+0xd8>)
 8007984:	2200      	movs	r2, #0
 8007986:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800798a:	f3bf 8f4f 	dsb	sy
}
 800798e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007990:	f3bf 8f6f 	isb	sy
}
 8007994:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8007996:	4b1a      	ldr	r3, [pc, #104]	@ (8007a00 <main+0xd8>)
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	4a19      	ldr	r2, [pc, #100]	@ (8007a00 <main+0xd8>)
 800799c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80079a2:	f3bf 8f4f 	dsb	sy
}
 80079a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80079a8:	f3bf 8f6f 	isb	sy
}
 80079ac:	e000      	b.n	80079b0 <main+0x88>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80079ae:	bf00      	nop
	SCB_EnableICache();
	//SCB_InvalidateDCache();
	//SCB_EnableDCache();

	/* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 80079b0:	4b14      	ldr	r3, [pc, #80]	@ (8007a04 <main+0xdc>)
 80079b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80079b6:	4a13      	ldr	r2, [pc, #76]	@ (8007a04 <main+0xdc>)
 80079b8:	f043 0301 	orr.w	r3, r3, #1
 80079bc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80079c0:	4b10      	ldr	r3, [pc, #64]	@ (8007a04 <main+0xdc>)
 80079c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	683b      	ldr	r3, [r7, #0]

	MX_GPIO_Init(); 			// used for SD card detect
 80079ce:	f000 f9a9 	bl	8007d24 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 80079d2:	f000 f947 	bl	8007c64 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();		// uncomment line 62 #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 in FATFT/Target/sd_diskio.c
 80079d6:	f000 f919 	bl	8007c0c <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 80079da:	f012 fb33 	bl	801a044 <MX_FATFS_Init>

	Remora *remora = new Remora();
 80079de:	2030      	movs	r0, #48	@ 0x30
 80079e0:	f014 ff5e 	bl	801c8a0 <_Znwj>
 80079e4:	4603      	mov	r3, r0
 80079e6:	461c      	mov	r4, r3
 80079e8:	4620      	mov	r0, r4
 80079ea:	f000 fe27 	bl	800863c <_ZN6RemoraC1Ev>
 80079ee:	607c      	str	r4, [r7, #4]
	remora->run();
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 ff33 	bl	800885c <_ZN6Remora3runEv>
}
 80079f6:	2300      	movs	r3, #0
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd90      	pop	{r4, r7, pc}
 8007a00:	e000ed00 	.word	0xe000ed00
 8007a04:	58024400 	.word	0x58024400

08007a08 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b09e      	sub	sp, #120	@ 0x78
 8007a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007a0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007a12:	224c      	movs	r2, #76	@ 0x4c
 8007a14:	2100      	movs	r1, #0
 8007a16:	4618      	mov	r0, r3
 8007a18:	f015 fd3a 	bl	801d490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007a1c:	f107 030c 	add.w	r3, r7, #12
 8007a20:	2220      	movs	r2, #32
 8007a22:	2100      	movs	r1, #0
 8007a24:	4618      	mov	r0, r3
 8007a26:	f015 fd33 	bl	801d490 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8007a2a:	2002      	movs	r0, #2
 8007a2c:	f00b f90a 	bl	8012c44 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a30:	2300      	movs	r3, #0
 8007a32:	60bb      	str	r3, [r7, #8]
 8007a34:	4b56      	ldr	r3, [pc, #344]	@ (8007b90 <_Z18SystemClock_Configv+0x188>)
 8007a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a38:	4a55      	ldr	r2, [pc, #340]	@ (8007b90 <_Z18SystemClock_Configv+0x188>)
 8007a3a:	f023 0301 	bic.w	r3, r3, #1
 8007a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a40:	4b53      	ldr	r3, [pc, #332]	@ (8007b90 <_Z18SystemClock_Configv+0x188>)
 8007a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	60bb      	str	r3, [r7, #8]
 8007a4a:	4b52      	ldr	r3, [pc, #328]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	4a51      	ldr	r2, [pc, #324]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007a50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a54:	6193      	str	r3, [r2, #24]
 8007a56:	4b4f      	ldr	r3, [pc, #316]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007a5e:	60bb      	str	r3, [r7, #8]
 8007a60:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007a62:	bf00      	nop
 8007a64:	4b4b      	ldr	r3, [pc, #300]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a70:	bf14      	ite	ne
 8007a72:	2301      	movne	r3, #1
 8007a74:	2300      	moveq	r3, #0
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1f3      	bne.n	8007a64 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a7c:	4b46      	ldr	r3, [pc, #280]	@ (8007b98 <_Z18SystemClock_Configv+0x190>)
 8007a7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a82:	4a45      	ldr	r2, [pc, #276]	@ (8007b98 <_Z18SystemClock_Configv+0x190>)
 8007a84:	f043 0302 	orr.w	r3, r3, #2
 8007a88:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007a8c:	4b42      	ldr	r3, [pc, #264]	@ (8007b98 <_Z18SystemClock_Configv+0x190>)
 8007a8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	607b      	str	r3, [r7, #4]
 8007a98:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	603b      	str	r3, [r7, #0]
 8007a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	4a3c      	ldr	r2, [pc, #240]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007aa4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007aa8:	6193      	str	r3, [r2, #24]
 8007aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	4b36      	ldr	r3, [pc, #216]	@ (8007b90 <_Z18SystemClock_Configv+0x188>)
 8007ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab8:	4a35      	ldr	r2, [pc, #212]	@ (8007b90 <_Z18SystemClock_Configv+0x188>)
 8007aba:	f043 0301 	orr.w	r3, r3, #1
 8007abe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ac0:	4b33      	ldr	r3, [pc, #204]	@ (8007b90 <_Z18SystemClock_Configv+0x188>)
 8007ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	603b      	str	r3, [r7, #0]
 8007aca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007acc:	bf00      	nop
 8007ace:	4b31      	ldr	r3, [pc, #196]	@ (8007b94 <_Z18SystemClock_Configv+0x18c>)
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ad6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ada:	bf14      	ite	ne
 8007adc:	2301      	movne	r3, #1
 8007ade:	2300      	moveq	r3, #0
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1f3      	bne.n	8007ace <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8007ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8007b98 <_Z18SystemClock_Configv+0x190>)
 8007ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	4a2a      	ldr	r2, [pc, #168]	@ (8007b98 <_Z18SystemClock_Configv+0x190>)
 8007af0:	f043 0302 	orr.w	r3, r3, #2
 8007af4:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007af6:	2301      	movs	r3, #1
 8007af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007afa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007afe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b00:	2302      	movs	r3, #2
 8007b02:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007b04:	2302      	movs	r3, #2
 8007b06:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8007b08:	2305      	movs	r3, #5
 8007b0a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8007b0c:	23c0      	movs	r3, #192	@ 0xc0
 8007b0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8007b10:	2302      	movs	r3, #2
 8007b12:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007b14:	2304      	movs	r3, #4
 8007b16:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007b18:	2302      	movs	r3, #2
 8007b1a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8007b1c:	2308      	movs	r3, #8
 8007b1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007b20:	2300      	movs	r3, #0
 8007b22:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8007b24:	2300      	movs	r3, #0
 8007b26:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f00b f8c3 	bl	8012cb8 <HAL_RCC_OscConfig>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	bf14      	ite	ne
 8007b38:	2301      	movne	r3, #1
 8007b3a:	2300      	moveq	r3, #0
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d001      	beq.n	8007b46 <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 8007b42:	f000 f993 	bl	8007e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b46:	233f      	movs	r3, #63	@ 0x3f
 8007b48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8007b52:	2308      	movs	r3, #8
 8007b54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8007b56:	2340      	movs	r3, #64	@ 0x40
 8007b58:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8007b5a:	2340      	movs	r3, #64	@ 0x40
 8007b5c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8007b5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b62:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8007b64:	2340      	movs	r3, #64	@ 0x40
 8007b66:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007b68:	f107 030c 	add.w	r3, r7, #12
 8007b6c:	2104      	movs	r1, #4
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f00b fcfc 	bl	801356c <HAL_RCC_ClockConfig>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	bf14      	ite	ne
 8007b7a:	2301      	movne	r3, #1
 8007b7c:	2300      	moveq	r3, #0
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 8007b84:	f000 f972 	bl	8007e6c <Error_Handler>
  }
}
 8007b88:	bf00      	nop
 8007b8a:	3778      	adds	r7, #120	@ 0x78
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	58000400 	.word	0x58000400
 8007b94:	58024800 	.word	0x58024800
 8007b98:	58024400 	.word	0x58024400

08007b9c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b0b0      	sub	sp, #192	@ 0xc0
 8007ba0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007ba2:	463b      	mov	r3, r7
 8007ba4:	22c0      	movs	r2, #192	@ 0xc0
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f015 fc71 	bl	801d490 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 8007bae:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 8007bb2:	f04f 0300 	mov.w	r3, #0
 8007bb6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8007bba:	2302      	movs	r3, #2
 8007bbc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8007bbe:	230c      	movs	r3, #12
 8007bc0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 8007bc6:	230a      	movs	r3, #10
 8007bc8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8007bca:	2302      	movs	r3, #2
 8007bcc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8007bce:	23c0      	movs	r3, #192	@ 0xc0
 8007bd0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8007bd2:	2320      	movs	r3, #32
 8007bd4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8007bda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007bde:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8007be0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007be4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007be6:	463b      	mov	r3, r7
 8007be8:	4618      	mov	r0, r3
 8007bea:	f00c f84b 	bl	8013c84 <HAL_RCCEx_PeriphCLKConfig>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	bf14      	ite	ne
 8007bf4:	2301      	movne	r3, #1
 8007bf6:	2300      	moveq	r3, #0
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 8007bfe:	f000 f935 	bl	8007e6c <Error_Handler>
  }
}
 8007c02:	bf00      	nop
 8007c04:	37c0      	adds	r7, #192	@ 0xc0
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8007c10:	4b11      	ldr	r3, [pc, #68]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c12:	4a12      	ldr	r2, [pc, #72]	@ (8007c5c <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 8007c14:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8007c16:	4b10      	ldr	r3, [pc, #64]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8007c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c1e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007c22:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8007c24:	4b0c      	ldr	r3, [pc, #48]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007c2a:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8007c32:	4b09      	ldr	r3, [pc, #36]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c34:	2208      	movs	r2, #8
 8007c36:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8007c38:	4807      	ldr	r0, [pc, #28]	@ (8007c58 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8007c3a:	f00e fd21 	bl	8016680 <HAL_SD_Init>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	bf14      	ite	ne
 8007c44:	2301      	movne	r3, #1
 8007c46:	2300      	moveq	r3, #0
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d002      	beq.n	8007c54 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 8007c4e:	4804      	ldr	r0, [pc, #16]	@ (8007c60 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 8007c50:	f015 fb24 	bl	801d29c <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 8007c54:	bf00      	nop
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	240002f8 	.word	0x240002f8
 8007c5c:	52007000 	.word	0x52007000
 8007c60:	0801e3ec 	.word	0x0801e3ec

08007c64 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007c68:	4b2c      	ldr	r3, [pc, #176]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c6a:	4a2d      	ldr	r2, [pc, #180]	@ (8007d20 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8007c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = Config::pcBaud;
 8007c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007c76:	4b29      	ldr	r3, [pc, #164]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007c7c:	4b27      	ldr	r3, [pc, #156]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007c82:	4b26      	ldr	r3, [pc, #152]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007c88:	4b24      	ldr	r3, [pc, #144]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c8a:	220c      	movs	r2, #12
 8007c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007c8e:	4b23      	ldr	r3, [pc, #140]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007c94:	4b21      	ldr	r3, [pc, #132]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007c9a:	4b20      	ldr	r3, [pc, #128]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007cac:	481b      	ldr	r0, [pc, #108]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007cae:	f010 fa94 	bl	80181da <HAL_UART_Init>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	bf14      	ite	ne
 8007cb8:	2301      	movne	r3, #1
 8007cba:	2300      	moveq	r3, #0
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8007cc2:	f000 f8d3 	bl	8007e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	4814      	ldr	r0, [pc, #80]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007cca:	f011 fb26 	bl	801931a <HAL_UARTEx_SetTxFifoThreshold>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	bf14      	ite	ne
 8007cd4:	2301      	movne	r3, #1
 8007cd6:	2300      	moveq	r3, #0
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8007cde:	f000 f8c5 	bl	8007e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	480d      	ldr	r0, [pc, #52]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007ce6:	f011 fb56 	bl	8019396 <HAL_UARTEx_SetRxFifoThreshold>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	bf14      	ite	ne
 8007cf0:	2301      	movne	r3, #1
 8007cf2:	2300      	moveq	r3, #0
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8007cfa:	f000 f8b7 	bl	8007e6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007cfe:	4807      	ldr	r0, [pc, #28]	@ (8007d1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8007d00:	f011 fad2 	bl	80192a8 <HAL_UARTEx_DisableFifoMode>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	bf14      	ite	ne
 8007d0a:	2301      	movne	r3, #1
 8007d0c:	2300      	moveq	r3, #0
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8007d14:	f000 f8aa 	bl	8007e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007d18:	bf00      	nop
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	24000374 	.word	0x24000374
 8007d20:	40011000 	.word	0x40011000

08007d24 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08a      	sub	sp, #40	@ 0x28
 8007d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d2a:	f107 0314 	add.w	r3, r7, #20
 8007d2e:	2200      	movs	r2, #0
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	605a      	str	r2, [r3, #4]
 8007d34:	609a      	str	r2, [r3, #8]
 8007d36:	60da      	str	r2, [r3, #12]
 8007d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007d3a:	4b26      	ldr	r3, [pc, #152]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d40:	4a24      	ldr	r2, [pc, #144]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007d4a:	4b22      	ldr	r3, [pc, #136]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d54:	613b      	str	r3, [r7, #16]
 8007d56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d58:	4b1e      	ldr	r3, [pc, #120]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d60:	f043 0304 	orr.w	r3, r3, #4
 8007d64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007d68:	4b1a      	ldr	r3, [pc, #104]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d6e:	f003 0304 	and.w	r3, r3, #4
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d76:	4b17      	ldr	r3, [pc, #92]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d7c:	4a15      	ldr	r2, [pc, #84]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d7e:	f043 0301 	orr.w	r3, r3, #1
 8007d82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007d86:	4b13      	ldr	r3, [pc, #76]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	60bb      	str	r3, [r7, #8]
 8007d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d94:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007d9c:	f043 0308 	orr.w	r3, r3, #8
 8007da0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007da4:	4b0b      	ldr	r3, [pc, #44]	@ (8007dd4 <_ZL12MX_GPIO_Initv+0xb0>)
 8007da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007daa:	f003 0308 	and.w	r3, r3, #8
 8007dae:	607b      	str	r3, [r7, #4]
 8007db0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007db2:	2310      	movs	r3, #16
 8007db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007db6:	2300      	movs	r3, #0
 8007db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dbe:	f107 0314 	add.w	r3, r7, #20
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4804      	ldr	r0, [pc, #16]	@ (8007dd8 <_ZL12MX_GPIO_Initv+0xb4>)
 8007dc6:	f00a fd73 	bl	80128b0 <HAL_GPIO_Init>

}
 8007dca:	bf00      	nop
 8007dcc:	3728      	adds	r7, #40	@ 0x28
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	58024400 	.word	0x58024400
 8007dd8:	58020800 	.word	0x58020800

08007ddc <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007de2:	463b      	mov	r3, r7
 8007de4:	2200      	movs	r2, #0
 8007de6:	601a      	str	r2, [r3, #0]
 8007de8:	605a      	str	r2, [r3, #4]
 8007dea:	609a      	str	r2, [r3, #8]
 8007dec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8007dee:	f008 f9a7 	bl	8010140 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007df2:	2301      	movs	r3, #1
 8007df4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8007dfe:	231f      	movs	r3, #31
 8007e00:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8007e02:	2387      	movs	r3, #135	@ 0x87
 8007e04:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007e12:	2301      	movs	r3, #1
 8007e14:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007e16:	2300      	movs	r3, #0
 8007e18:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007e1e:	463b      	mov	r3, r7
 8007e20:	4618      	mov	r0, r3
 8007e22:	f008 f9c5 	bl	80101b0 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for DMA buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007e26:	2301      	movs	r3, #1
 8007e28:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8007e2a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8007e2e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8007e30:	2307      	movs	r3, #7
 8007e32:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8007e34:	2303      	movs	r3, #3
 8007e36:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8007e40:	2300      	movs	r3, #0
 8007e42:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8007e44:	2301      	movs	r3, #1
 8007e46:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8007e50:	2300      	movs	r3, #0
 8007e52:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007e54:	463b      	mov	r3, r7
 8007e56:	4618      	mov	r0, r3
 8007e58:	f008 f9aa 	bl	80101b0 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007e5c:	2004      	movs	r0, #4
 8007e5e:	f008 f987 	bl	8010170 <HAL_MPU_Enable>

}
 8007e62:	bf00      	nop
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
	...

08007e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 8007e70:	4803      	ldr	r0, [pc, #12]	@ (8007e80 <Error_Handler+0x14>)
 8007e72:	f015 f9a3 	bl	801d1bc <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 8007e76:	b672      	cpsid	i
}
 8007e78:	bf00      	nop

  __disable_irq();
  while (1)
 8007e7a:	bf00      	nop
 8007e7c:	e7fd      	b.n	8007e7a <Error_Handler+0xe>
 8007e7e:	bf00      	nop
 8007e80:	0801e3fc 	.word	0x0801e3fc

08007e84 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	4618      	mov	r0, r3
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	605a      	str	r2, [r3, #4]
 8007eae:	bf00      	nop
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	1e5a      	subs	r2, r3, #1
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	605a      	str	r2, [r3, #4]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	bf0c      	ite	eq
 8007ed4:	2301      	moveq	r3, #1
 8007ed6:	2300      	movne	r3, #0
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d019      	beq.n	8007f12 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3308      	adds	r3, #8
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	1e5a      	subs	r2, r3, #1
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	609a      	str	r2, [r3, #8]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	bf0c      	ite	eq
 8007efc:	2301      	moveq	r3, #1
 8007efe:	2300      	movne	r3, #0
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d005      	beq.n	8007f12 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	330c      	adds	r3, #12
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	4798      	blx	r3
        }
    }
 8007f12:	bf00      	nop
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <_ZNSt19_Sp_make_shared_tag5_S_tiEv>:
  private:
    template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
      friend class _Sp_counted_ptr_inplace;

    static const type_info&
    _S_ti() noexcept _GLIBCXX_VISIBILITY(default)
 8007f1c:	b480      	push	{r7}
 8007f1e:	af00      	add	r7, sp, #0
    {
      alignas(type_info) static constexpr char __tag[sizeof(type_info)] = { };
      return reinterpret_cast<const type_info&>(__tag);
 8007f20:	4b02      	ldr	r3, [pc, #8]	@ (8007f2c <_ZNSt19_Sp_make_shared_tag5_S_tiEv+0x10>)
    }
 8007f22:	4618      	mov	r0, r3
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	0801e95c 	.word	0x0801e95c

08007f30 <_ZN8txData_tC1Ev>:
    int32_t jointFeedback[Config::joints];	  // Base thread feedback ??
    float processVariable[Config::variables];		     // Servo thread feedback ??
	uint16_t inputs;
  };

  txData_t() {
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
      header = 0;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	601a      	str	r2, [r3, #0]
      inputs = 0;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	879a      	strh	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 8007f44:	2300      	movs	r3, #0
 8007f46:	73fb      	strb	r3, [r7, #15]
 8007f48:	e008      	b.n	8007f5c <_ZN8txData_tC1Ev+0x2c>
         jointFeedback[i] = 0;
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	2200      	movs	r2, #0
 8007f54:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	73fb      	strb	r3, [r7, #15]
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	2b07      	cmp	r3, #7
 8007f60:	d9f3      	bls.n	8007f4a <_ZN8txData_tC1Ev+0x1a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 8007f62:	2300      	movs	r3, #0
 8007f64:	73bb      	strb	r3, [r7, #14]
 8007f66:	e00b      	b.n	8007f80 <_ZN8txData_tC1Ev+0x50>
         processVariable[i] = 0.0;
 8007f68:	7bbb      	ldrb	r3, [r7, #14]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	3308      	adds	r3, #8
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	3304      	adds	r3, #4
 8007f74:	f04f 0200 	mov.w	r2, #0
 8007f78:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	73bb      	strb	r3, [r7, #14]
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	2b05      	cmp	r3, #5
 8007f84:	d9f0      	bls.n	8007f68 <_ZN8txData_tC1Ev+0x38>
     }
  }
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>:
  bool isStatic() const {
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
    return static_;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	7a1b      	ldrb	r3, [r3, #8]
  }
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>:
  ~StringPool() {
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  }
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>:

  VariantData* getOrAddElement(size_t index, ResourceManager* resources);

  VariantData* getElement(size_t index, const ResourceManager* resources) const;

  static VariantData* getElement(const ArrayData* array, size_t index,
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	607a      	str	r2, [r7, #4]
                                 const ResourceManager* resources) {
    if (!array)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d101      	bne.n	8007fd8 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x16>
      return nullptr;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	e006      	b.n	8007fe6 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x24>
    return array->getElement(index, resources);
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	68b9      	ldr	r1, [r7, #8]
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 f9ab 	bl	8008338 <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	bf00      	nop
  }
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
  const ArrayData* asArray() const {
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asArray();
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7fa fd23 	bl	8002a42 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 8007ffc:	4603      	mov	r3, r0
  }
 8007ffe:	4618      	mov	r0, r3
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>:
  VariantData* getElement(size_t index,
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	60f8      	str	r0, [r7, #12]
 800800e:	60b9      	str	r1, [r7, #8]
 8008010:	607a      	str	r2, [r7, #4]
    return ArrayData::getElement(asArray(), index, resources);
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f7ff ffeb 	bl	8007fee <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 8008018:	4603      	mov	r3, r0
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	68b9      	ldr	r1, [r7, #8]
 800801e:	4618      	mov	r0, r3
 8008020:	f7ff ffcf 	bl	8007fc2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 8008024:	4603      	mov	r3, r0
  }
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>:
  static VariantData* getElement(const VariantData* var, size_t index,
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	60f8      	str	r0, [r7, #12]
 8008036:	60b9      	str	r1, [r7, #8]
 8008038:	607a      	str	r2, [r7, #4]
    return var != 0 ? var->getElement(index, resources) : 0;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d006      	beq.n	800804e <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x20>
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	68b9      	ldr	r1, [r7, #8]
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f7ff ffde 	bl	8008006 <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>
 800804a:	4603      	mov	r3, r0
 800804c:	e000      	b.n	8008050 <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x22>
 800804e:	2300      	movs	r3, #0
  }
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>:
  VariantData* getOrAddElement(size_t index, ResourceManager* resources) {
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
    auto array = isNull() ? &toArray() : asArray();
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f000 f81d 	bl	80080a4 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d004      	beq.n	800807a <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x22>
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7fa fdeb 	bl	8002c4c <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 8008076:	4603      	mov	r3, r0
 8008078:	e003      	b.n	8008082 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x2a>
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f7fa fce1 	bl	8002a42 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 8008080:	4603      	mov	r3, r0
 8008082:	617b      	str	r3, [r7, #20]
    if (!array)
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x36>
      return nullptr;
 800808a:	2300      	movs	r3, #0
 800808c:	e006      	b.n	800809c <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x44>
    return array->getOrAddElement(index, resources);
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	68b9      	ldr	r1, [r7, #8]
 8008092:	6978      	ldr	r0, [r7, #20]
 8008094:	f000 f8ff 	bl	8008296 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>
 8008098:	4603      	mov	r3, r0
 800809a:	bf00      	nop
  }
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>:
  bool isNull() const {
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Null;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	791b      	ldrb	r3, [r3, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	bf0c      	ite	eq
 80080b4:	2301      	moveq	r3, #1
 80080b6:	2300      	movne	r3, #0
 80080b8:	b2db      	uxtb	r3, r3
  }
 80080ba:	4618      	mov	r0, r3
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>:
  bool isString() const {
 80080c6:	b480      	push	{r7}
 80080c8:	b083      	sub	sp, #12
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::LinkedString ||
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	791b      	ldrb	r3, [r3, #4]
 80080d2:	2b04      	cmp	r3, #4
 80080d4:	d003      	beq.n	80080de <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x18>
           type_ == VariantType::OwnedString;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	791b      	ldrb	r3, [r3, #4]
    return type_ == VariantType::LinkedString ||
 80080da:	2b05      	cmp	r3, #5
 80080dc:	d101      	bne.n	80080e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1c>
 80080de:	2301      	movs	r3, #1
 80080e0:	e000      	b.n	80080e4 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1e>
 80080e2:	2300      	movs	r3, #0
  }
 80080e4:	4618      	mov	r0, r3
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>:
  void setLinkedString(const char* s) {
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
    type_ = VariantType::LinkedString;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2204      	movs	r2, #4
 80080fe:	711a      	strb	r2, [r3, #4]
    content_.asLinkedString = s;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	601a      	str	r2, [r3, #0]
  }
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>:
  ~ResourceManager() {
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
    stringPool_.clear(allocator_);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f103 0208 	add.w	r2, r3, #8
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4619      	mov	r1, r3
 8008126:	4610      	mov	r0, r2
 8008128:	f7fa fb1a 	bl	8002760 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
    variantPools_.clear(allocator_);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f103 020c 	add.w	r2, r3, #12
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4619      	mov	r1, r3
 8008138:	4610      	mov	r0, r2
 800813a:	f7fc fb9b 	bl	8004874 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
  }
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	330c      	adds	r3, #12
 8008142:	4618      	mov	r0, r3
 8008144:	f000 ff59 	bl	8008ffa <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3308      	adds	r3, #8
 800814c:	4618      	mov	r0, r3
 800814e:	f7ff ff2d 	bl	8007fac <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4618      	mov	r0, r3
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>:
  static JsonVariant fromJson(JsonVariant src) {
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	1d3b      	adds	r3, r7, #4
 8008166:	e883 0006 	stmia.w	r3, {r1, r2}
    return src;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	461a      	mov	r2, r3
 800816e:	1d3b      	adds	r3, r7, #4
 8008170:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008174:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>:
    return JsonVariantConst(collectionToVariant(data_), resources_);
  }

  // Returns true if the reference is unbound.
  // https://arduinojson.org/v7/api/jsonarray/isnull/
  bool isNull() const {
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
    return data_ == 0;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	bf0c      	ite	eq
 8008194:	2301      	moveq	r3, #1
 8008196:	2300      	movne	r3, #0
 8008198:	b2db      	uxtb	r3, r3
  }
 800819a:	4618      	mov	r0, r3
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>:
    return detail::VariantData::nesting(collectionToVariant(data_), resources_);
  }

  // Returns the number of elements in the array.
  // https://arduinojson.org/v7/api/jsonarray/size/
  size_t size() const {
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b082      	sub	sp, #8
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
    return data_ ? data_->size(resources_) : 0;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x26>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	461a      	mov	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	4619      	mov	r1, r3
 80081c2:	4610      	mov	r0, r2
 80081c4:	f000 f8cf 	bl	8008366 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>
 80081c8:	4603      	mov	r3, r0
 80081ca:	e000      	b.n	80081ce <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x28>
 80081cc:	2300      	movs	r3, #0
  }
 80081ce:	4618      	mov	r0, r3
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
    return resources_;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	685b      	ldr	r3, [r3, #4]
  }
 80081e2:	4618      	mov	r0, r3
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>:

  detail::VariantData* getData() const {
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b082      	sub	sp, #8
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fa fbb7 	bl	800296e <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8008200:	4603      	mov	r3, r0
  }
 8008202:	4618      	mov	r0, r3
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>:

  detail::VariantData* getOrCreateData() const {
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4618      	mov	r0, r3
 8008218:	f7fa fba9 	bl	800296e <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 800821c:	4603      	mov	r3, r0
  }
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>:

ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// A JSON document.
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
 8008226:	b580      	push	{r7, lr}
 8008228:	b082      	sub	sp, #8
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4618      	mov	r0, r3
 8008232:	f7ff ff6e 	bl	8008112 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4618      	mov	r0, r3
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline ArrayData::iterator ArrayData::at(
    size_t index, const ResourceManager* resources) const {
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]
 800824c:	603b      	str	r3, [r7, #0]
  auto it = createIterator(resources);
 800824e:	68b9      	ldr	r1, [r7, #8]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	4618      	mov	r0, r3
 8008256:	f7fb f823 	bl	80032a0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index) {
 800825a:	e006      	b.n	800826a <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x2a>
    it.next(resources);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f7fa fffb 	bl	800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    --index;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3b01      	subs	r3, #1
 8008268:	607b      	str	r3, [r7, #4]
  while (!it.done() && index) {
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f7fa fb36 	bl	80028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8008270:	4603      	mov	r3, r0
 8008272:	f083 0301 	eor.w	r3, r3, #1
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	d004      	beq.n	8008286 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 8008282:	2301      	movs	r3, #1
 8008284:	e000      	b.n	8008288 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x48>
 8008286:	2300      	movs	r3, #0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1e7      	bne.n	800825c <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x1c>
  }
  return it;
 800828c:	bf00      	nop
}
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>:
  CollectionData::appendOne(slot, resources);
  return slot.ptr();
}

inline VariantData* ArrayData::getOrAddElement(size_t index,
                                               ResourceManager* resources) {
 8008296:	b580      	push	{r7, lr}
 8008298:	b088      	sub	sp, #32
 800829a:	af00      	add	r7, sp, #0
 800829c:	60f8      	str	r0, [r7, #12]
 800829e:	60b9      	str	r1, [r7, #8]
 80082a0:	607a      	str	r2, [r7, #4]
  auto it = createIterator(resources);
 80082a2:	68f9      	ldr	r1, [r7, #12]
 80082a4:	f107 0314 	add.w	r3, r7, #20
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fa fff8 	bl	80032a0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index > 0) {
 80082b0:	e008      	b.n	80082c4 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x2e>
    it.next(resources);
 80082b2:	f107 0314 	add.w	r3, r7, #20
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fa ffce 	bl	800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    index--;
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	3b01      	subs	r3, #1
 80082c2:	60bb      	str	r3, [r7, #8]
  while (!it.done() && index > 0) {
 80082c4:	f107 0314 	add.w	r3, r7, #20
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fa fb07 	bl	80028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 80082ce:	4603      	mov	r3, r0
 80082d0:	f083 0301 	eor.w	r3, r3, #1
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d004      	beq.n	80082e4 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 80082e0:	2301      	movs	r3, #1
 80082e2:	e000      	b.n	80082e6 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x50>
 80082e4:	2300      	movs	r3, #0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e3      	bne.n	80082b2 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x1c>
  }
  if (it.done())
 80082ea:	f107 0314 	add.w	r3, r7, #20
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fa faf4 	bl	80028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d002      	beq.n	8008300 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x6a>
    index++;
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	3301      	adds	r3, #1
 80082fe:	60bb      	str	r3, [r7, #8]
  VariantData* element = it.data();
 8008300:	f107 0314 	add.w	r3, r7, #20
 8008304:	4618      	mov	r0, r3
 8008306:	f7fa fb1a 	bl	800293e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 800830a:	61f8      	str	r0, [r7, #28]
  while (index > 0) {
 800830c:	e00c      	b.n	8008328 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x92>
    element = addElement(resources);
 800830e:	6879      	ldr	r1, [r7, #4]
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f7fa ff56 	bl	80031c2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 8008316:	61f8      	str	r0, [r7, #28]
    if (!element)
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d101      	bne.n	8008322 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x8c>
      return nullptr;
 800831e:	2300      	movs	r3, #0
 8008320:	e006      	b.n	8008330 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x9a>
    index--;
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	3b01      	subs	r3, #1
 8008326:	60bb      	str	r3, [r7, #8]
  while (index > 0) {
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1ef      	bne.n	800830e <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x78>
  }
  return element;
 800832e:	69fb      	ldr	r3, [r7, #28]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3720      	adds	r7, #32
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>:

inline VariantData* ArrayData::getElement(
    size_t index, const ResourceManager* resources) const {
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
  return at(index, resources).data();
 8008344:	f107 0010 	add.w	r0, r7, #16
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	68f9      	ldr	r1, [r7, #12]
 800834e:	f7ff ff77 	bl	8008240 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>
 8008352:	f107 0310 	add.w	r3, r7, #16
 8008356:	4618      	mov	r0, r3
 8008358:	f7fa faf1 	bl	800293e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 800835c:	4603      	mov	r3, r0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3718      	adds	r7, #24
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>:
      maxChildNesting = childNesting;
  }
  return maxChildNesting + 1;
}

inline size_t CollectionData::size(const ResourceManager* resources) const {
 8008366:	b580      	push	{r7, lr}
 8008368:	b086      	sub	sp, #24
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	6039      	str	r1, [r7, #0]
  size_t count = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 8008374:	f107 030c 	add.w	r3, r7, #12
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	6879      	ldr	r1, [r7, #4]
 800837c:	4618      	mov	r0, r3
 800837e:	f7fa ff8f 	bl	80032a0 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8008382:	e008      	b.n	8008396 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x30>
    count++;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	3301      	adds	r3, #1
 8008388:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 800838a:	f107 030c 	add.w	r3, r7, #12
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	4618      	mov	r0, r3
 8008392:	f7fa ff62 	bl	800325a <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 8008396:	f107 030c 	add.w	r3, r7, #12
 800839a:	4618      	mov	r0, r3
 800839c:	f7fa fa9e 	bl	80028dc <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 80083a0:	4603      	mov	r3, r0
 80083a2:	f083 0301 	eor.w	r3, r3, #1
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1eb      	bne.n	8008384 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x1e>
  return count;
 80083ac:	697b      	ldr	r3, [r7, #20]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>:
  static const char* fromJson(JsonVariantConst src) {
    auto data = getData(src);
    return data ? data->asString().c_str() : 0;
  }

  static bool checkJson(JsonVariantConst src) {
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	463b      	mov	r3, r7
 80083be:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80083c2:	463b      	mov	r3, r7
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fc fad1 	bl	800496c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80083ca:	60f8      	str	r0, [r7, #12]
    return data && data->isString();
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d007      	beq.n	80083e2 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f7ff fe77 	bl	80080c6 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d001      	beq.n	80083e2 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 80083de:	2301      	movs	r3, #1
 80083e0:	e000      	b.n	80083e4 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2e>
 80083e2:	2300      	movs	r3, #0
  }
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	4611      	mov	r1, r2
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 fe12 	bl	8009026 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4611      	mov	r1, r2
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff ffe5 	bl	80083ec <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4618      	mov	r0, r3
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>:
	virtual ~CommsHandler();

	void update(void) override;
	void tasks();

    void setInterface(std::unique_ptr<CommsInterface> commsInterface) {
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
        interface = std::move(commsInterface);
 8008436:	6838      	ldr	r0, [r7, #0]
 8008438:	f000 fdea 	bl	8009010 <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800843c:	4602      	mov	r2, r0
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3318      	adds	r3, #24
 8008442:	4611      	mov	r1, r2
 8008444:	4618      	mov	r0, r3
 8008446:	f7ff ffe1 	bl	800840c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
    }
 800844a:	bf00      	nop
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <_ZNK12CommsHandler9getStatusEv>:
    void setNoDataCount(int count) { noDataCount = count; }
    void setStatus(bool value) { status = value; }

    bool getData() const { return data; }
    int getNoDataCount() const { return noDataCount; }
    bool getStatus() const { return status; }
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	7f9b      	ldrb	r3, [r3, #30]
 800845e:	4618      	mov	r0, r3
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 800846a:	b580      	push	{r7, lr}
 800846c:	af00      	add	r7, sp, #0
		// Chip select pin is PA_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 800846e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008476:	f003 0310 	and.w	r3, r3, #16
 800847a:	2b00      	cmp	r3, #0
 800847c:	bf14      	ite	ne
 800847e:	2301      	movne	r3, #1
 8008480:	2300      	moveq	r3, #0
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b00      	cmp	r3, #0
 8008486:	d006      	beq.n	8008496 <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8008488:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800848c:	2210      	movs	r2, #16
 800848e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 8008492:	f7fa f809 	bl	80024a8 <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 8008496:	bf00      	nop
 8008498:	bd80      	pop	{r7, pc}

0800849a <DMA1_Stream0_IRQHandler>:

	void DMA1_Stream0_IRQHandler()
	{
 800849a:	b580      	push	{r7, lr}
 800849c:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream0_Wrapper();
 800849e:	f7fa f811 	bl	80024c4 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>
	}
 80084a2:	bf00      	nop
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <DMA1_Stream1_IRQHandler>:

	void DMA1_Stream1_IRQHandler()
	{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream1_Wrapper();
 80084aa:	f7fa f819 	bl	80024e0 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>
	}
 80084ae:	bf00      	nop
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <TIM2_IRQHandler>:


	void TIM2_IRQHandler()
	{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	af00      	add	r7, sp, #0
	  if(TIM2->SR & TIM_SR_UIF) // if UIF flag is set
 80084b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	bf14      	ite	ne
 80084c4:	2301      	movne	r3, #1
 80084c6:	2300      	moveq	r3, #0
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d009      	beq.n	80084e2 <TIM2_IRQHandler+0x30>
	  {
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 80084ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80084d8:	f023 0301 	bic.w	r3, r3, #1
 80084dc:	6113      	str	r3, [r2, #16]

		Interrupt::TIM2_Wrapper();
 80084de:	f7fa f80d 	bl	80024fc <_ZN9Interrupt12TIM2_WrapperEv>
	  }
	}
 80084e2:	bf00      	nop
 80084e4:	bd80      	pop	{r7, pc}
	...

080084e8 <TIM3_IRQHandler>:


	void TIM3_IRQHandler()
	{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	af00      	add	r7, sp, #0
	  if(TIM3->SR & TIM_SR_UIF) // if UIF flag is set
 80084ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008518 <TIM3_IRQHandler+0x30>)
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	bf14      	ite	ne
 80084f8:	2301      	movne	r3, #1
 80084fa:	2300      	moveq	r3, #0
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d007      	beq.n	8008512 <TIM3_IRQHandler+0x2a>
	  {
		TIM3->SR &= ~TIM_SR_UIF; // clear UIF flag
 8008502:	4b05      	ldr	r3, [pc, #20]	@ (8008518 <TIM3_IRQHandler+0x30>)
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	4a04      	ldr	r2, [pc, #16]	@ (8008518 <TIM3_IRQHandler+0x30>)
 8008508:	f023 0301 	bic.w	r3, r3, #1
 800850c:	6113      	str	r3, [r2, #16]

		Interrupt::TIM3_Wrapper();
 800850e:	f7fa f803 	bl	8002518 <_ZN9Interrupt12TIM3_WrapperEv>
	  }
	}
 8008512:	bf00      	nop
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	40000400 	.word	0x40000400

0800851c <TIM4_IRQHandler>:

	void TIM4_IRQHandler()
	{
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
	  if(TIM4->SR & TIM_SR_UIF) // if UIF flag is set
 8008520:	4b0a      	ldr	r3, [pc, #40]	@ (800854c <TIM4_IRQHandler+0x30>)
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	2b00      	cmp	r3, #0
 800852a:	bf14      	ite	ne
 800852c:	2301      	movne	r3, #1
 800852e:	2300      	moveq	r3, #0
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d007      	beq.n	8008546 <TIM4_IRQHandler+0x2a>
	  {
		TIM4->SR &= ~TIM_SR_UIF; // clear UIF flag
 8008536:	4b05      	ldr	r3, [pc, #20]	@ (800854c <TIM4_IRQHandler+0x30>)
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	4a04      	ldr	r2, [pc, #16]	@ (800854c <TIM4_IRQHandler+0x30>)
 800853c:	f023 0301 	bic.w	r3, r3, #1
 8008540:	6113      	str	r3, [r2, #16]

		Interrupt::TIM4_Wrapper();
 8008542:	f7f9 fff7 	bl	8002534 <_ZN9Interrupt12TIM4_WrapperEv>
	  }
	}
 8008546:	bf00      	nop
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	40000800 	.word	0x40000800

08008550 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3304      	adds	r3, #4
 800855c:	4618      	mov	r0, r3
 800855e:	f000 fdd7 	bl	8009110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4618      	mov	r0, r3
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <_ZNSt10shared_ptrI12CommsHandlerED1Ev>:
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4618      	mov	r0, r3
 8008578:	f7ff ffea 	bl	8008550 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8008586:	b580      	push	{r7, lr}
 8008588:	b082      	sub	sp, #8
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	6039      	str	r1, [r7, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	4611      	mov	r1, r2
 8008596:	4618      	mov	r0, r3
 8008598:	f000 fe33 	bl	8009202 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4618      	mov	r0, r3
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b082      	sub	sp, #8
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	6039      	str	r1, [r7, #0]
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4611      	mov	r1, r2
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7ff ffe5 	bl	8008586 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b082      	sub	sp, #8
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	6039      	str	r1, [r7, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	4611      	mov	r1, r2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 ff52 	bl	8009480 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4618      	mov	r0, r3
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b082      	sub	sp, #8
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	6039      	str	r1, [r7, #0]
 80085f0:	683a      	ldr	r2, [r7, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4611      	mov	r1, r2
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7ff ffe5 	bl	80085c6 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8008606:	b580      	push	{r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	3304      	adds	r3, #4
 8008612:	4618      	mov	r0, r3
 8008614:	f000 fd7c 	bl	8009110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <_ZNSt10shared_ptrI6ModuleED1Ev>:
 8008622:	b580      	push	{r7, lr}
 8008624:	b082      	sub	sp, #8
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff ffea 	bl	8008606 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <_ZN6RemoraC1Ev>:
volatile float*   	ptrProcessVariable[Config::variables];
volatile uint16_t* 	ptrInputs;
volatile uint16_t* 	ptrOutputs;


Remora::Remora() :
 800863c:	b590      	push	{r4, r7, lr}
 800863e:	b095      	sub	sp, #84	@ 0x54
 8008640:	af02      	add	r7, sp, #8
 8008642:	6078      	str	r0, [r7, #4]
	baseFreq(Config::pruBaseFreq),
	servoFreq(Config::pruServoFreq),
	commsFreq(Config::pruCommsFreq)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3304      	adds	r3, #4
 8008648:	4618      	mov	r0, r3
 800864a:	f000 fd22 	bl	8009092 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3308      	adds	r3, #8
 8008652:	4618      	mov	r0, r3
 8008654:	f000 fd4f 	bl	80090f6 <_ZNSt10shared_ptrI12CommsHandlerEC1Ev>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3310      	adds	r3, #16
 800865c:	4618      	mov	r0, r3
 800865e:	f000 fd83 	bl	8009168 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	3314      	adds	r3, #20
 8008666:	4618      	mov	r0, r3
 8008668:	f000 fd7e 	bl	8009168 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
	baseFreq(Config::pruBaseFreq),
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8008672:	621a      	str	r2, [r3, #32]
	servoFreq(Config::pruServoFreq),
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800867a:	625a      	str	r2, [r3, #36]	@ 0x24
	commsFreq(Config::pruCommsFreq)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8008682:	629a      	str	r2, [r3, #40]	@ 0x28
{
	threadsRunning = false;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	currentState = ST_SETUP;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	701a      	strb	r2, [r3, #0]
	prevState = ST_RESET;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2205      	movs	r2, #5
 8008696:	705a      	strb	r2, [r3, #1]

	configHandler = std::make_unique<JsonConfigHandler>(this);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	617b      	str	r3, [r7, #20]
 800869c:	f107 0310 	add.w	r3, r7, #16
 80086a0:	f107 0214 	add.w	r2, r7, #20
 80086a4:	4611      	mov	r1, r2
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 fd90 	bl	80091cc <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	3304      	adds	r3, #4
 80086b0:	f107 0210 	add.w	r2, r7, #16
 80086b4:	4611      	mov	r1, r2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff ff75 	bl	80085a6 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 80086bc:	f107 0310 	add.w	r3, r7, #16
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 fcf6 	bl	80090b2 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>

    ptrTxData = &txData;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a5c      	ldr	r2, [pc, #368]	@ (800883c <_ZN6RemoraC1Ev+0x200>)
 80086ca:	619a      	str	r2, [r3, #24]
    ptrRxData = &rxData;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a5c      	ldr	r2, [pc, #368]	@ (8008840 <_ZN6RemoraC1Ev+0x204>)
 80086d0:	61da      	str	r2, [r3, #28]

	auto spiComms = std::make_unique<SPIComms>(ptrRxData, ptrTxData, SPI1);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f103 011c 	add.w	r1, r3, #28
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f103 0218 	add.w	r2, r3, #24
 80086de:	4b59      	ldr	r3, [pc, #356]	@ (8008844 <_ZN6RemoraC1Ev+0x208>)
 80086e0:	61bb      	str	r3, [r7, #24]
 80086e2:	f107 000c 	add.w	r0, r7, #12
 80086e6:	f107 0318 	add.w	r3, r7, #24
 80086ea:	f000 fda6 	bl	800923a <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>

	comms = std::make_shared<CommsHandler>();
 80086ee:	f107 031c 	add.w	r3, r7, #28
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 fdec 	bl	80092d0 <_ZSt11make_sharedI12CommsHandlerJEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueES4_E4typeEEDpOT0_>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	3308      	adds	r3, #8
 80086fc:	f107 021c 	add.w	r2, r7, #28
 8008700:	4611      	mov	r1, r2
 8008702:	4618      	mov	r0, r3
 8008704:	f000 fdf2 	bl	80092ec <_ZNSt10shared_ptrI12CommsHandlerEaSEOS1_>
 8008708:	f107 031c 	add.w	r3, r7, #28
 800870c:	4618      	mov	r0, r3
 800870e:	f7ff ff2d 	bl	800856c <_ZNSt10shared_ptrI12CommsHandlerED1Ev>
	comms->setInterface(std::move(spiComms));
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	3308      	adds	r3, #8
 8008716:	4618      	mov	r0, r3
 8008718:	f000 fdfb 	bl	8009312 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800871c:	4604      	mov	r4, r0
 800871e:	f107 030c 	add.w	r3, r7, #12
 8008722:	4618      	mov	r0, r3
 8008724:	f000 fe01 	bl	800932a <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8008728:	4602      	mov	r2, r0
 800872a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800872e:	4611      	mov	r1, r2
 8008730:	4618      	mov	r0, r3
 8008732:	f000 fe16 	bl	8009362 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>
 8008736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800873a:	4619      	mov	r1, r3
 800873c:	4620      	mov	r0, r4
 800873e:	f7ff fe75 	bl	800842c <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>
 8008742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008746:	4618      	mov	r0, r3
 8008748:	f000 fe27 	bl	800939a <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
	comms->init();
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	3308      	adds	r3, #8
 8008750:	4618      	mov	r0, r3
 8008752:	f000 fdde 	bl	8009312 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008756:	4603      	mov	r3, r0
 8008758:	4618      	mov	r0, r3
 800875a:	f004 fd8e 	bl	800d27a <_ZN12CommsHandler4initEv>
	comms->start();
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	3308      	adds	r3, #8
 8008762:	4618      	mov	r0, r3
 8008764:	f000 fdd5 	bl	8009312 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008768:	4603      	mov	r3, r0
 800876a:	4618      	mov	r0, r3
 800876c:	f004 fdb3 	bl	800d2d6 <_ZN12CommsHandler5startEv>

    baseThread = make_unique<pruThread>(
    									"Base",
										TIM3,
 8008770:	4b35      	ldr	r3, [pc, #212]	@ (8008848 <_ZN6RemoraC1Ev+0x20c>)
 8008772:	62fb      	str	r3, [r7, #44]	@ 0x2c
										TIM3_IRQn,
 8008774:	231d      	movs	r3, #29
 8008776:	867b      	strh	r3, [r7, #50]	@ 0x32
										baseFreq,
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3320      	adds	r3, #32
    baseThread = make_unique<pruThread>(
 800877c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8008780:	f107 0132 	add.w	r1, r7, #50	@ 0x32
 8008784:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008788:	4c30      	ldr	r4, [pc, #192]	@ (800884c <_ZN6RemoraC1Ev+0x210>)
 800878a:	9401      	str	r4, [sp, #4]
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	460b      	mov	r3, r1
 8008790:	492f      	ldr	r1, [pc, #188]	@ (8008850 <_ZN6RemoraC1Ev+0x214>)
 8008792:	f000 fe24 	bl	80093de <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::baseThreadIrqPriority
										);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	3310      	adds	r3, #16
 800879a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800879e:	4611      	mov	r1, r2
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7ff ff20 	bl	80085e6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    baseThread = make_unique<pruThread>(
 80087a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fcec 	bl	8009188 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
    servoThread = make_unique<pruThread>(
    									"Servo",
										TIM2,
 80087b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80087b4:	63bb      	str	r3, [r7, #56]	@ 0x38
										TIM2_IRQn,
 80087b6:	231c      	movs	r3, #28
 80087b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
										servoFreq,
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	3324      	adds	r3, #36	@ 0x24
    servoThread = make_unique<pruThread>(
 80087be:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80087c2:	f107 013e 	add.w	r1, r7, #62	@ 0x3e
 80087c6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80087ca:	4c22      	ldr	r4, [pc, #136]	@ (8008854 <_ZN6RemoraC1Ev+0x218>)
 80087cc:	9401      	str	r4, [sp, #4]
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	460b      	mov	r3, r1
 80087d2:	4921      	ldr	r1, [pc, #132]	@ (8008858 <_ZN6RemoraC1Ev+0x21c>)
 80087d4:	f000 fe70 	bl	80094b8 <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::servoThreadIrqPriority
										);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	3314      	adds	r3, #20
 80087dc:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80087e0:	4611      	mov	r1, r2
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7ff feff 	bl	80085e6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    servoThread = make_unique<pruThread>(
 80087e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 fccb 	bl	8009188 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
	commsThread = new pruThread(TIM4, TIM4_IRQn, PRU_COMMSFREQ, commsCount);
	NVIC_SetPriority(TIM4_IRQn, COMMS_THREAD_IRQ_PRIORITY);
	*/


    servoThread->registerModule(comms);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	3314      	adds	r3, #20
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 feaf 	bl	800955a <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 80087fc:	4604      	mov	r4, r0
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f103 0208 	add.w	r2, r3, #8
 8008804:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008808:	4611      	mov	r1, r2
 800880a:	4618      	mov	r0, r3
 800880c:	f000 feb1 	bl	8009572 <_ZNSt10shared_ptrI6ModuleEC1I12CommsHandlervEERKS_IT_E>
 8008810:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008814:	4619      	mov	r1, r3
 8008816:	4620      	mov	r0, r4
 8008818:	f006 fcfa 	bl	800f210 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800881c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008820:	4618      	mov	r0, r3
 8008822:	f7ff fefe 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 8008826:	f107 030c 	add.w	r3, r7, #12
 800882a:	4618      	mov	r0, r3
 800882c:	f000 fd2e 	bl	800928c <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4618      	mov	r0, r3
 8008834:	374c      	adds	r7, #76	@ 0x4c
 8008836:	46bd      	mov	sp, r7
 8008838:	bd90      	pop	{r4, r7, pc}
 800883a:	bf00      	nop
 800883c:	30000080 	.word	0x30000080
 8008840:	300000c0 	.word	0x300000c0
 8008844:	40013000 	.word	0x40013000
 8008848:	40000400 	.word	0x40000400
 800884c:	0801e964 	.word	0x0801e964
 8008850:	0801e404 	.word	0x0801e404
 8008854:	0801e968 	.word	0x0801e968
 8008858:	0801e40c 	.word	0x0801e40c

0800885c <_ZN6Remora3runEv>:

void Remora::run() {
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
	while (1)
		{
			switch(currentState){
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	2b06      	cmp	r3, #6
 800886a:	f200 80df 	bhi.w	8008a2c <_ZN6Remora3runEv+0x1d0>
 800886e:	a201      	add	r2, pc, #4	@ (adr r2, 8008874 <_ZN6Remora3runEv+0x18>)
 8008870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008874:	08008891 	.word	0x08008891
 8008878:	080088b9 	.word	0x080088b9
 800887c:	08008923 	.word	0x08008923
 8008880:	0800895d 	.word	0x0800895d
 8008884:	080089b1 	.word	0x080089b1
 8008888:	080089d3 	.word	0x080089d3
 800888c:	08008a21 	.word	0x08008a21
				          case ST_SETUP:
				              // do setup tasks
				              if (currentState != prevState)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	781a      	ldrb	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	785b      	ldrb	r3, [r3, #1]
 8008898:	429a      	cmp	r2, r3
 800889a:	d002      	beq.n	80088a2 <_ZN6Remora3runEv+0x46>
				              {
				                  printf("\n## Entering SETUP state\n\n");
 800889c:	4868      	ldr	r0, [pc, #416]	@ (8008a40 <_ZN6Remora3runEv+0x1e4>)
 800889e:	f014 fcfd 	bl	801d29c <puts>
				              }
				              prevState = currentState;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	781a      	ldrb	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	705a      	strb	r2, [r3, #1]

				              loadModules();
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f902 	bl	8008ab4 <_ZN6Remora11loadModulesEv>

				              currentState = ST_START;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	701a      	strb	r2, [r3, #0]
				              break;
 80088b6:	e0b9      	b.n	8008a2c <_ZN6Remora3runEv+0x1d0>

				          case ST_START:
				              // do start tasks
				              if (currentState != prevState)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	781a      	ldrb	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	785b      	ldrb	r3, [r3, #1]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d002      	beq.n	80088ca <_ZN6Remora3runEv+0x6e>
				              {
				                  printf("\n## Entering START state\n");
 80088c4:	485f      	ldr	r0, [pc, #380]	@ (8008a44 <_ZN6Remora3runEv+0x1e8>)
 80088c6:	f014 fce9 	bl	801d29c <puts>
				              }
				              prevState = currentState;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	781a      	ldrb	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	705a      	strb	r2, [r3, #1]

				              if (!threadsRunning)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80088d8:	f083 0301 	eor.w	r3, r3, #1
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d01b      	beq.n	800891a <_ZN6Remora3runEv+0xbe>
				              {
				                  // Start the threads
				                  printf("\nStarting the SERVO thread\n");
 80088e2:	4859      	ldr	r0, [pc, #356]	@ (8008a48 <_ZN6Remora3runEv+0x1ec>)
 80088e4:	f014 fcda 	bl	801d29c <puts>
				                  servoThread->startThread();
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	3314      	adds	r3, #20
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 fe34 	bl	800955a <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 80088f2:	4603      	mov	r3, r0
 80088f4:	4618      	mov	r0, r3
 80088f6:	f006 fcc7 	bl	800f288 <_ZN9pruThread11startThreadEv>

				                  printf("\nStarting the BASE thread\n");
 80088fa:	4854      	ldr	r0, [pc, #336]	@ (8008a4c <_ZN6Remora3runEv+0x1f0>)
 80088fc:	f014 fcce 	bl	801d29c <puts>
				                  baseThread->startThread();
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	3310      	adds	r3, #16
 8008904:	4618      	mov	r0, r3
 8008906:	f000 fe28 	bl	800955a <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800890a:	4603      	mov	r3, r0
 800890c:	4618      	mov	r0, r3
 800890e:	f006 fcbb 	bl	800f288 <_ZN9pruThread11startThreadEv>

				                  threadsRunning = true;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
				              }

				              currentState = ST_IDLE;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2202      	movs	r2, #2
 800891e:	701a      	strb	r2, [r3, #0]

				              break;
 8008920:	e084      	b.n	8008a2c <_ZN6Remora3runEv+0x1d0>


				          case ST_IDLE:
				              // do something when idle
				              if (currentState != prevState)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	781a      	ldrb	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	785b      	ldrb	r3, [r3, #1]
 800892a:	429a      	cmp	r2, r3
 800892c:	d002      	beq.n	8008934 <_ZN6Remora3runEv+0xd8>
				              {
				                  printf("\n## Entering IDLE state\n");
 800892e:	4848      	ldr	r0, [pc, #288]	@ (8008a50 <_ZN6Remora3runEv+0x1f4>)
 8008930:	f014 fcb4 	bl	801d29c <puts>
				              }
				              prevState = currentState;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	781a      	ldrb	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	705a      	strb	r2, [r3, #1]

				              //wait for data before changing to running state
				              if (comms->getStatus())
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	3308      	adds	r3, #8
 8008940:	4618      	mov	r0, r3
 8008942:	f000 fce6 	bl	8009312 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008946:	4603      	mov	r3, r0
 8008948:	4618      	mov	r0, r3
 800894a:	f7ff fd82 	bl	8008452 <_ZNK12CommsHandler9getStatusEv>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d068      	beq.n	8008a26 <_ZN6Remora3runEv+0x1ca>
				              {
				                  currentState = ST_RUNNING;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2203      	movs	r2, #3
 8008958:	701a      	strb	r2, [r3, #0]
				              }

				              break;
 800895a:	e064      	b.n	8008a26 <_ZN6Remora3runEv+0x1ca>

				          case ST_RUNNING:
				              // do running tasks
				              if (currentState != prevState)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	781a      	ldrb	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	785b      	ldrb	r3, [r3, #1]
 8008964:	429a      	cmp	r2, r3
 8008966:	d002      	beq.n	800896e <_ZN6Remora3runEv+0x112>
				              {
				                  printf("\n## Entering RUNNING state\n");
 8008968:	483a      	ldr	r0, [pc, #232]	@ (8008a54 <_ZN6Remora3runEv+0x1f8>)
 800896a:	f014 fc97 	bl	801d29c <puts>
				              }
				              prevState = currentState;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	781a      	ldrb	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	705a      	strb	r2, [r3, #1]

				              if (comms->getStatus() == false)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	3308      	adds	r3, #8
 800897a:	4618      	mov	r0, r3
 800897c:	f000 fcc9 	bl	8009312 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008980:	4603      	mov	r3, r0
 8008982:	4618      	mov	r0, r3
 8008984:	f7ff fd65 	bl	8008452 <_ZNK12CommsHandler9getStatusEv>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	bf0c      	ite	eq
 800898e:	2301      	moveq	r3, #1
 8008990:	2300      	movne	r3, #0
 8008992:	b2db      	uxtb	r3, r3
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <_ZN6Remora3runEv+0x142>
				              {
				                  currentState = ST_RESET;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2205      	movs	r2, #5
 800899c:	701a      	strb	r2, [r3, #0]
				              }

				              if (PRUreset)
 800899e:	4b2e      	ldr	r3, [pc, #184]	@ (8008a58 <_ZN6Remora3runEv+0x1fc>)
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d040      	beq.n	8008a2a <_ZN6Remora3runEv+0x1ce>
				              {
				                  currentState = ST_WDRESET;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2206      	movs	r2, #6
 80089ac:	701a      	strb	r2, [r3, #0]
				              }

				              break;
 80089ae:	e03c      	b.n	8008a2a <_ZN6Remora3runEv+0x1ce>

				          case ST_STOP:
				              // do stop tasks
				              if (currentState != prevState)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	781a      	ldrb	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	785b      	ldrb	r3, [r3, #1]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d002      	beq.n	80089c2 <_ZN6Remora3runEv+0x166>
				              {
				                  printf("\n## Entering STOP state\n");
 80089bc:	4827      	ldr	r0, [pc, #156]	@ (8008a5c <_ZN6Remora3runEv+0x200>)
 80089be:	f014 fc6d 	bl	801d29c <puts>
				              }
				              prevState = currentState;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	781a      	ldrb	r2, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	705a      	strb	r2, [r3, #1]


				              currentState = ST_STOP;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2204      	movs	r2, #4
 80089ce:	701a      	strb	r2, [r3, #0]
				              break;
 80089d0:	e02c      	b.n	8008a2c <_ZN6Remora3runEv+0x1d0>

				          case ST_RESET:
				              // do reset tasks
				              if (currentState != prevState)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	781a      	ldrb	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	785b      	ldrb	r3, [r3, #1]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d002      	beq.n	80089e4 <_ZN6Remora3runEv+0x188>
				              {
				                  printf("\n## Entering RESET state\n");
 80089de:	4820      	ldr	r0, [pc, #128]	@ (8008a60 <_ZN6Remora3runEv+0x204>)
 80089e0:	f014 fc5c 	bl	801d29c <puts>
				              }
				              prevState = currentState;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	781a      	ldrb	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	705a      	strb	r2, [r3, #1]

				              // set all of the rxData buffer to 0
				              printf("   Resetting rxBuffer\n");
 80089ec:	481d      	ldr	r0, [pc, #116]	@ (8008a64 <_ZN6Remora3runEv+0x208>)
 80089ee:	f014 fc55 	bl	801d29c <puts>
				              {
								  int n = Config::dataBuffSize;
 80089f2:	2340      	movs	r3, #64	@ 0x40
 80089f4:	60fb      	str	r3, [r7, #12]
								  while(n-- > 0)
 80089f6:	e005      	b.n	8008a04 <_ZN6Remora3runEv+0x1a8>
								  {
									  ptrRxData->rxBuffer[n] = 0;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	69da      	ldr	r2, [r3, #28]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4413      	add	r3, r2
 8008a00:	2200      	movs	r2, #0
 8008a02:	701a      	strb	r2, [r3, #0]
								  while(n-- > 0)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	1e5a      	subs	r2, r3, #1
 8008a08:	60fa      	str	r2, [r7, #12]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	bfcc      	ite	gt
 8008a0e:	2301      	movgt	r3, #1
 8008a10:	2300      	movle	r3, #0
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1ef      	bne.n	80089f8 <_ZN6Remora3runEv+0x19c>
								  }
				              }

				              currentState = ST_IDLE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	701a      	strb	r2, [r3, #0]
				              break;
 8008a1e:	e005      	b.n	8008a2c <_ZN6Remora3runEv+0x1d0>

				          case ST_WDRESET:
				        	  // force a reset
				        	  HAL_NVIC_SystemReset();
 8008a20:	f007 fb7d 	bl	801011e <HAL_NVIC_SystemReset>
				              break;
 8008a24:	e002      	b.n	8008a2c <_ZN6Remora3runEv+0x1d0>
				              break;
 8008a26:	bf00      	nop
 8008a28:	e000      	b.n	8008a2c <_ZN6Remora3runEv+0x1d0>
				              break;
 8008a2a:	bf00      	nop
				  }
			comms->tasks();
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	3308      	adds	r3, #8
 8008a30:	4618      	mov	r0, r3
 8008a32:	f000 fc6e 	bl	8009312 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008a36:	4603      	mov	r3, r0
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f004 fc5f 	bl	800d2fc <_ZN12CommsHandler5tasksEv>
		}
 8008a3e:	e711      	b.n	8008864 <_ZN6Remora3runEv+0x8>
 8008a40:	0801e414 	.word	0x0801e414
 8008a44:	0801e430 	.word	0x0801e430
 8008a48:	0801e44c 	.word	0x0801e44c
 8008a4c:	0801e468 	.word	0x0801e468
 8008a50:	0801e484 	.word	0x0801e484
 8008a54:	0801e49c 	.word	0x0801e49c
 8008a58:	24000408 	.word	0x24000408
 8008a5c:	0801e4b8 	.word	0x0801e4b8
 8008a60:	0801e4d0 	.word	0x0801e4d0
 8008a64:	0801e4ec 	.word	0x0801e4ec

08008a68 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	601a      	str	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	1d1a      	adds	r2, r3, #4
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	3304      	adds	r3, #4
 8008a82:	4619      	mov	r1, r3
 8008a84:	4610      	mov	r0, r2
 8008a86:	f000 fde6 	bl	8009656 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3708      	adds	r7, #8
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7ff ffdf 	bl	8008a68 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4618      	mov	r0, r3
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <_ZN6Remora11loadModulesEv>:
}

void Remora::loadModules() {
 8008ab4:	b5b0      	push	{r4, r5, r7, lr}
 8008ab6:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8008aba:	af02      	add	r7, sp, #8
 8008abc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008ac0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008ac4:	6018      	str	r0, [r3, #0]
    ModuleFactory* factory = ModuleFactory::getInstance();
 8008ac6:	f005 f8eb 	bl	800dca0 <_ZN13ModuleFactory11getInstanceEv>
 8008aca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
    JsonArray modules = configHandler->getModules();
 8008ace:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008ad2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 fd59 	bl	8009592 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008ae6:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8008aea:	4611      	mov	r1, r2
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7fb fd0f 	bl	8004510 <_ZN17JsonConfigHandler10getModulesEv>
    if (modules.isNull()) {
 8008af2:	f107 0318 	add.w	r3, r7, #24
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7ff fb44 	bl	8008184 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>
      //printf something here
    }

    for (size_t i = 0; i < modules.size(); i++) {
 8008afc:	2300      	movs	r3, #0
 8008afe:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8008b02:	e24e      	b.n	8008fa2 <_ZN6Remora11loadModulesEv+0x4ee>
        //if (modules[i].containsKey("Thread") && modules[i].containsKey("Type")) {
    	if (modules[i]["Thread"].is<const char*>() && modules[i]["Type"].is<const char*>()) {
 8008b04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008b08:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8008b0c:	f107 0118 	add.w	r1, r7, #24
 8008b10:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008b14:	4618      	mov	r0, r3
 8008b16:	f000 fd48 	bl	80095aa <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008b1a:	f107 0420 	add.w	r4, r7, #32

template <typename TDerived>
template <typename TString, enable_if_t<IsString<TString>::value, int>>
inline MemberProxy<TDerived, AdaptedString<TString>>
VariantRefBase<TDerived>::operator[](const TString& key) const {
  return {derived(), adaptString(key)};
 8008b1e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008b22:	4618      	mov	r0, r3
 8008b24:	f001 f9a3 	bl	8009e6e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8008b2e:	4611      	mov	r1, r2
 8008b30:	4618      	mov	r0, r3
 8008b32:	f001 f9a7 	bl	8009e84 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8008b36:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008b3a:	49c0      	ldr	r1, [pc, #768]	@ (8008e3c <_ZN6Remora11loadModulesEv+0x388>)
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fc fd7a 	bl	8005636 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8008b42:	f507 71ae 	add.w	r1, r7, #348	@ 0x15c
 8008b46:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008b50:	cb0c      	ldmia	r3, {r2, r3}
 8008b52:	4620      	mov	r0, r4
 8008b54:	f001 f9ae 	bl	8009eb4 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8008b58:	f107 0320 	add.w	r3, r7, #32
 8008b5c:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8008b60:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8008b64:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8008b68:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 8008b6c:	f001 fe39 	bl	800a7e2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 8008b70:	4604      	mov	r4, r0
 8008b72:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 8008b76:	f001 fe44 	bl	800a802 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8008b80:	4621      	mov	r1, r4
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fa f973 	bl	8002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8008b88:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 8008b8a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8008b8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b92:	f7ff fc10 	bl	80083b6 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 8008b96:	4603      	mov	r3, r0
 8008b98:	bf00      	nop
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d04e      	beq.n	8008c3c <_ZN6Remora11loadModulesEv+0x188>
 8008b9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008ba2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8008ba6:	f107 0118 	add.w	r1, r7, #24
 8008baa:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 fcfb 	bl	80095aa <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008bb4:	f107 0450 	add.w	r4, r7, #80	@ 0x50
  return {derived(), adaptString(key)};
 8008bb8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f001 f956 	bl	8009e6e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8008bc8:	4611      	mov	r1, r2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f001 f95a 	bl	8009e84 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8008bd0:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8008bd4:	499a      	ldr	r1, [pc, #616]	@ (8008e40 <_ZN6Remora11loadModulesEv+0x38c>)
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f001 f98b 	bl	8009ef2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8008bdc:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8008be0:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8008bea:	cb0c      	ldmia	r3, {r2, r3}
 8008bec:	4620      	mov	r0, r4
 8008bee:	f001 f961 	bl	8009eb4 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8008bf2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008bf6:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8008bfa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8008bfe:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8008c02:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 8008c06:	f001 fdec 	bl	800a7e2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 8008c10:	f001 fdf7 	bl	800a802 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 8008c14:	4602      	mov	r2, r0
 8008c16:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fa f926 	bl	8002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8008c22:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 8008c24:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8008c28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008c2c:	f7ff fbc3 	bl	80083b6 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 8008c30:	4603      	mov	r3, r0
 8008c32:	bf00      	nop
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d001      	beq.n	8008c3c <_ZN6Remora11loadModulesEv+0x188>
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e000      	b.n	8008c3e <_ZN6Remora11loadModulesEv+0x18a>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f000 81aa 	beq.w	8008f98 <_ZN6Remora11loadModulesEv+0x4e4>
            const char* threadName = modules[i]["Thread"];
 8008c44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008c48:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8008c4c:	f107 0118 	add.w	r1, r7, #24
 8008c50:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 fca8 	bl	80095aa <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008c5a:	f107 0480 	add.w	r4, r7, #128	@ 0x80
  return {derived(), adaptString(key)};
 8008c5e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8008c62:	4618      	mov	r0, r3
 8008c64:	f001 f903 	bl	8009e6e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8008c6e:	4611      	mov	r1, r2
 8008c70:	4618      	mov	r0, r3
 8008c72:	f001 f907 	bl	8009e84 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8008c76:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 8008c7a:	4970      	ldr	r1, [pc, #448]	@ (8008e3c <_ZN6Remora11loadModulesEv+0x388>)
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7fc fcda 	bl	8005636 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8008c82:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 8008c86:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 8008c90:	cb0c      	ldmia	r3, {r2, r3}
 8008c92:	4620      	mov	r0, r4
 8008c94:	f001 f90e 	bl	8009eb4 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8008c98:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 fc94 	bl	80095ca <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8008ca2:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
            const char* moduleType = modules[i]["Type"];
 8008ca6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008caa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008cae:	f107 0118 	add.w	r1, r7, #24
 8008cb2:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f000 fc77 	bl	80095aa <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008cbc:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 8008cc0:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f001 f8d2 	bl	8009e6e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f001 f8d6 	bl	8009e84 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8008cd8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008cdc:	4958      	ldr	r1, [pc, #352]	@ (8008e40 <_ZN6Remora11loadModulesEv+0x38c>)
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f001 f907 	bl	8009ef2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8008ce4:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 8008ce8:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8008cf2:	cb0c      	ldmia	r3, {r2, r3}
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f001 f8dd 	bl	8009eb4 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8008cfa:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f000 fc63 	bl	80095ca <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8008d04:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
            uint32_t threadFreq = 0;
 8008d08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008d0c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8008d10:	2200      	movs	r2, #0
 8008d12:	601a      	str	r2, [r3, #0]

            // Determine the thread frequency based on the thread name
            if (strcmp(threadName, "Servo") == 0) {
 8008d14:	494b      	ldr	r1, [pc, #300]	@ (8008e44 <_ZN6Remora11loadModulesEv+0x390>)
 8008d16:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 8008d1a:	f7f7 fae1 	bl	80002e0 <strcmp>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d10b      	bne.n	8008d3c <_ZN6Remora11loadModulesEv+0x288>
                threadFreq = servoFreq;
 8008d24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008d28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008d34:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8008d38:	601a      	str	r2, [r3, #0]
 8008d3a:	e012      	b.n	8008d62 <_ZN6Remora11loadModulesEv+0x2ae>
            } else if (strcmp(threadName, "Base") == 0) {
 8008d3c:	4942      	ldr	r1, [pc, #264]	@ (8008e48 <_ZN6Remora11loadModulesEv+0x394>)
 8008d3e:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 8008d42:	f7f7 facd 	bl	80002e0 <strcmp>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10a      	bne.n	8008d62 <_ZN6Remora11loadModulesEv+0x2ae>
                threadFreq = baseFreq;
 8008d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008d50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6a1a      	ldr	r2, [r3, #32]
 8008d58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008d5c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8008d60:	601a      	str	r2, [r3, #0]
            }

            // Add the "ThreadFreq" key and its value to the module's JSON object
            modules[i]["ThreadFreq"] = threadFreq;
 8008d62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008d66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d6a:	f107 0118 	add.w	r1, r7, #24
 8008d6e:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 fc19 	bl	80095aa <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008d78:	f107 04e0 	add.w	r4, r7, #224	@ 0xe0
 8008d7c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8008d80:	4618      	mov	r0, r3
 8008d82:	f001 f874 	bl	8009e6e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8008d86:	4602      	mov	r2, r0
 8008d88:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 8008d8c:	4611      	mov	r1, r2
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f001 f878 	bl	8009e84 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8008d94:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8008d98:	492c      	ldr	r1, [pc, #176]	@ (8008e4c <_ZN6Remora11loadModulesEv+0x398>)
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f001 f8de 	bl	8009f5c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8008da0:	f507 71ea 	add.w	r1, r7, #468	@ 0x1d4
 8008da4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8008dae:	cb0c      	ldmia	r3, {r2, r3}
 8008db0:	4620      	mov	r0, r4
 8008db2:	f001 f87f 	bl	8009eb4 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8008db6:	f107 0214 	add.w	r2, r7, #20
 8008dba:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 fc0e 	bl	80095e2 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>

            // Create module using factory
            std::shared_ptr<Module> _mod = factory->createModule(threadName, moduleType, modules[i]);
 8008dc6:	f8d7 5200 	ldr.w	r5, [r7, #512]	@ 0x200
 8008dca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dce:	f107 0118 	add.w	r1, r7, #24
 8008dd2:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 fbe7 	bl	80095aa <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8008ddc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008de0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8008de4:	4611      	mov	r1, r2
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 fc09 	bl	80095fe <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>
 8008dec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008df0:	f5a3 74fe 	sub.w	r4, r3, #508	@ 0x1fc
 8008df4:	466a      	mov	r2, sp
 8008df6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008dfa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008dfe:	e882 0003 	stmia.w	r2, {r0, r1}
 8008e02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8008e06:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f004 fee3 	bl	800dbd8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE>

            // Check if the module creation was successful
            if (!_mod) {
 8008e12:	f107 030c 	add.w	r3, r7, #12
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 fc00 	bl	800961c <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	f083 0301 	eor.w	r3, r3, #1
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d015      	beq.n	8008e54 <_ZN6Remora11loadModulesEv+0x3a0>
            	printf("Error: Failed to create module of type '%s' for thread '%s'. Skipping registration.\n",
 8008e28:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8008e2c:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 8008e30:	4807      	ldr	r0, [pc, #28]	@ (8008e50 <_ZN6Remora11loadModulesEv+0x39c>)
 8008e32:	f014 f9c3 	bl	801d1bc <iprintf>
						moduleType, threadName);
				continue; // Skip to the next iteration
 8008e36:	2400      	movs	r4, #0
 8008e38:	e0a8      	b.n	8008f8c <_ZN6Remora11loadModulesEv+0x4d8>
 8008e3a:	bf00      	nop
 8008e3c:	0801e504 	.word	0x0801e504
 8008e40:	0801e50c 	.word	0x0801e50c
 8008e44:	0801e40c 	.word	0x0801e40c
 8008e48:	0801e404 	.word	0x0801e404
 8008e4c:	0801e514 	.word	0x0801e514
 8008e50:	0801e520 	.word	0x0801e520
			}

            bool _modPost = _mod->getUsesModulePost();
 8008e54:	f107 030c 	add.w	r3, r7, #12
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 fbf0 	bl	800963e <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	3218      	adds	r2, #24
 8008e64:	6812      	ldr	r2, [r2, #0]
 8008e66:	4618      	mov	r0, r3
 8008e68:	4790      	blx	r2
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	f887 31f7 	strb.w	r3, [r7, #503]	@ 0x1f7

            if (strcmp(threadName, "Servo") == 0) {
 8008e70:	4957      	ldr	r1, [pc, #348]	@ (8008fd0 <_ZN6Remora11loadModulesEv+0x51c>)
 8008e72:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 8008e76:	f7f7 fa33 	bl	80002e0 <strcmp>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d13e      	bne.n	8008efe <_ZN6Remora11loadModulesEv+0x44a>
                servoThread->registerModule(_mod);
 8008e80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008e84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3314      	adds	r3, #20
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f000 fb64 	bl	800955a <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 8008e92:	4604      	mov	r4, r0
 8008e94:	f107 020c 	add.w	r2, r7, #12
 8008e98:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7ff fdf8 	bl	8008a94 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 8008ea4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f006 f9b0 	bl	800f210 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 8008eb0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7ff fbb4 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 8008eba:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d063      	beq.n	8008f8a <_ZN6Remora11loadModulesEv+0x4d6>
            		servoThread->registerModulePost(_mod);
 8008ec2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008ec6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	3314      	adds	r3, #20
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f000 fb43 	bl	800955a <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	f107 020c 	add.w	r2, r7, #12
 8008eda:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ede:	4611      	mov	r1, r2
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7ff fdd7 	bl	8008a94 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 8008ee6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008eea:	4619      	mov	r1, r3
 8008eec:	4620      	mov	r0, r4
 8008eee:	f006 f9ab 	bl	800f248 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 8008ef2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7ff fb93 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
 8008efc:	e045      	b.n	8008f8a <_ZN6Remora11loadModulesEv+0x4d6>
            	}
            }
            else if (strcmp(threadName, "Base") == 0) {
 8008efe:	4935      	ldr	r1, [pc, #212]	@ (8008fd4 <_ZN6Remora11loadModulesEv+0x520>)
 8008f00:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 8008f04:	f7f7 f9ec 	bl	80002e0 <strcmp>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d13d      	bne.n	8008f8a <_ZN6Remora11loadModulesEv+0x4d6>
                baseThread->registerModule(_mod);
 8008f0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008f12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	3310      	adds	r3, #16
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f000 fb1d 	bl	800955a <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 8008f20:	4604      	mov	r4, r0
 8008f22:	f107 020c 	add.w	r2, r7, #12
 8008f26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f2a:	4611      	mov	r1, r2
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7ff fdb1 	bl	8008a94 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 8008f32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f36:	4619      	mov	r1, r3
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f006 f969 	bl	800f210 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 8008f3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff fb6d 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 8008f48:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d01c      	beq.n	8008f8a <_ZN6Remora11loadModulesEv+0x4d6>
            		servoThread->registerModulePost(_mod);
 8008f50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008f54:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3314      	adds	r3, #20
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f000 fafc 	bl	800955a <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 8008f62:	4604      	mov	r4, r0
 8008f64:	f107 020c 	add.w	r2, r7, #12
 8008f68:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7ff fd90 	bl	8008a94 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 8008f74:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008f78:	4619      	mov	r1, r3
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f006 f964 	bl	800f248 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 8008f80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7ff fb4c 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	}
            }
            else {
                //onLoad.push_back(move(_mod));
            }
        }
 8008f8a:	2401      	movs	r4, #1
 8008f8c:	f107 030c 	add.w	r3, r7, #12
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7ff fb46 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
 8008f96:	2c01      	cmp	r4, #1
    for (size_t i = 0; i < modules.size(); i++) {
 8008f98:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8008fa2:	f107 0318 	add.w	r3, r7, #24
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7ff f8fd 	bl	80081a6 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>
 8008fac:	4602      	mov	r2, r0
 8008fae:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	bf34      	ite	cc
 8008fb6:	2301      	movcc	r3, #1
 8008fb8:	2300      	movcs	r3, #0
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f47f ada1 	bne.w	8008b04 <_ZN6Remora11loadModulesEv+0x50>
    }

}
 8008fc2:	bf00      	nop
 8008fc4:	bf00      	nop
 8008fc6:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	0801e40c 	.word	0x0801e40c
 8008fd4:	0801e404 	.word	0x0801e404

08008fd8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
      { delete this; }
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d005      	beq.n	8008ff2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	3304      	adds	r3, #4
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	4798      	blx	r3
 8008ff2:	bf00      	nop
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>:
  ~MemoryPoolList() {
 8008ffa:	b480      	push	{r7}
 8008ffc:	b083      	sub	sp, #12
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
  }
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4618      	mov	r0, r3
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8009030:	6838      	ldr	r0, [r7, #0]
 8009032:	f000 fb9d 	bl	8009770 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>
 8009036:	4603      	mov	r3, r0
 8009038:	4619      	mov	r1, r3
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fb78 	bl	8009730 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 8009040:	6838      	ldr	r0, [r7, #0]
 8009042:	f000 fbaa 	bl	800979a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 8009046:	4603      	mov	r3, r0
 8009048:	4618      	mov	r0, r3
 800904a:	f000 fbb3 	bl	80097b4 <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fba3 	bl	800979a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 8009054:	687b      	ldr	r3, [r7, #4]
      }
 8009056:	4618      	mov	r0, r3
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800905e:	b580      	push	{r7, lr}
 8009060:	b082      	sub	sp, #8
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4618      	mov	r0, r3
 800906a:	f000 fbae 	bl	80097ca <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4618      	mov	r0, r3
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4618      	mov	r0, r3
 8009084:	f7ff ffeb 	bl	800905e <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 8009092:	b580      	push	{r7, lr}
 8009094:	b082      	sub	sp, #8
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
	: _M_t()
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	601a      	str	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7ff ffe8 	bl	8009078 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4618      	mov	r0, r3
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80090b2:	b590      	push	{r4, r7, lr}
 80090b4:	b085      	sub	sp, #20
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4618      	mov	r0, r3
 80090be:	f000 fb91 	bl	80097e4 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 80090c2:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00c      	beq.n	80090e6 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fb96 	bl	80097fe <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>
 80090d2:	4604      	mov	r4, r0
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f000 fb9f 	bl	8009818 <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 80090da:	4603      	mov	r3, r0
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4619      	mov	r1, r3
 80090e0:	4620      	mov	r0, r4
 80090e2:	f000 fbb7 	bl	8009854 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
	__ptr = pointer();
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2200      	movs	r2, #0
 80090ea:	601a      	str	r2, [r3, #0]
      }
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4618      	mov	r0, r3
 80090f0:	3714      	adds	r7, #20
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd90      	pop	{r4, r7, pc}

080090f6 <_ZNSt10shared_ptrI12CommsHandlerEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b082      	sub	sp, #8
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4618      	mov	r0, r3
 8009102:	f000 fbba 	bl	800987a <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4618      	mov	r0, r3
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d004      	beq.n	800912a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4618      	mov	r0, r3
 8009126:	f7fe fec8 	bl	8007eba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4618      	mov	r0, r3
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4618      	mov	r0, r3
 8009140:	f000 fbac 	bl	800989c <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4618      	mov	r0, r3
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800914e:	b580      	push	{r7, lr}
 8009150:	b082      	sub	sp, #8
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4618      	mov	r0, r3
 800915a:	f7ff ffeb 	bl	8009134 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4618      	mov	r0, r3
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
	: _M_t()
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	601a      	str	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4618      	mov	r0, r3
 800917a:	f7ff ffe8 	bl	800914e <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4618      	mov	r0, r3
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8009188:	b590      	push	{r4, r7, lr}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4618      	mov	r0, r3
 8009194:	f000 fb8f 	bl	80098b6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8009198:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00c      	beq.n	80091bc <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 fb94 	bl	80098d0 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>
 80091a8:	4604      	mov	r4, r0
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f000 fb9d 	bl	80098ea <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>
 80091b0:	4603      	mov	r3, r0
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4619      	mov	r1, r3
 80091b6:	4620      	mov	r0, r4
 80091b8:	f000 fbb9 	bl	800992e <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
	__ptr = pointer();
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	601a      	str	r2, [r3, #0]
      }
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4618      	mov	r0, r3
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd90      	pop	{r4, r7, pc}

080091cc <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 80091cc:	b590      	push	{r4, r7, lr}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80091d6:	206c      	movs	r0, #108	@ 0x6c
 80091d8:	f013 fb62 	bl	801c8a0 <_Znwj>
 80091dc:	4603      	mov	r3, r0
 80091de:	461c      	mov	r4, r3
 80091e0:	6838      	ldr	r0, [r7, #0]
 80091e2:	f000 fbb7 	bl	8009954 <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>
 80091e6:	4603      	mov	r3, r0
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4619      	mov	r1, r3
 80091ec:	4620      	mov	r0, r4
 80091ee:	f7fb f881 	bl	80042f4 <_ZN17JsonConfigHandlerC1EP6Remora>
 80091f2:	4621      	mov	r1, r4
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fbc8 	bl	800998a <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	370c      	adds	r7, #12
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd90      	pop	{r4, r7, pc}

08009202 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 8009202:	b580      	push	{r7, lr}
 8009204:	b082      	sub	sp, #8
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800920c:	6838      	ldr	r0, [r7, #0]
 800920e:	f000 fbeb 	bl	80099e8 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>
 8009212:	4603      	mov	r3, r0
 8009214:	4619      	mov	r1, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fbc6 	bl	80099a8 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800921c:	6838      	ldr	r0, [r7, #0]
 800921e:	f000 fbf8 	bl	8009a12 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 8009222:	4603      	mov	r3, r0
 8009224:	4618      	mov	r0, r3
 8009226:	f000 fc01 	bl	8009a2c <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fbf1 	bl	8009a12 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 8009230:	687b      	ldr	r3, [r7, #4]
      }
 8009232:	4618      	mov	r0, r3
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800923a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800923c:	b085      	sub	sp, #20
 800923e:	af00      	add	r7, sp, #0
 8009240:	60f8      	str	r0, [r7, #12]
 8009242:	60b9      	str	r1, [r7, #8]
 8009244:	607a      	str	r2, [r7, #4]
 8009246:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8009248:	f44f 7011 	mov.w	r0, #580	@ 0x244
 800924c:	f013 fb28 	bl	801c8a0 <_Znwj>
 8009250:	4603      	mov	r3, r0
 8009252:	461e      	mov	r6, r3
 8009254:	68b8      	ldr	r0, [r7, #8]
 8009256:	f000 fbf4 	bl	8009a42 <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 800925a:	4603      	mov	r3, r0
 800925c:	681c      	ldr	r4, [r3, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fbfa 	bl	8009a58 <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 8009264:	4603      	mov	r3, r0
 8009266:	681d      	ldr	r5, [r3, #0]
 8009268:	6838      	ldr	r0, [r7, #0]
 800926a:	f000 fc00 	bl	8009a6e <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800926e:	4603      	mov	r3, r0
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	462a      	mov	r2, r5
 8009274:	4621      	mov	r1, r4
 8009276:	4630      	mov	r0, r6
 8009278:	f7f7 fda0 	bl	8000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>
 800927c:	4631      	mov	r1, r6
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 fc10 	bl	8009aa4 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800928c <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800928c:	b590      	push	{r4, r7, lr}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4618      	mov	r0, r3
 8009298:	f000 fc13 	bl	8009ac2 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800929c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00c      	beq.n	80092c0 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fc18 	bl	8009adc <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 80092ac:	4604      	mov	r4, r0
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f000 fc21 	bl	8009af6 <_ZSt4moveIRP8SPICommsEONSt16remove_referenceIT_E4typeEOS4_>
 80092b4:	4603      	mov	r3, r0
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4619      	mov	r1, r3
 80092ba:	4620      	mov	r0, r4
 80092bc:	f000 fc26 	bl	8009b0c <_ZNKSt14default_deleteI8SPICommsEclEPS0_>
	__ptr = pointer();
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	601a      	str	r2, [r3, #0]
      }
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4618      	mov	r0, r3
 80092ca:	3714      	adds	r7, #20
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd90      	pop	{r4, r7, pc}

080092d0 <_ZSt11make_sharedI12CommsHandlerJEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueES4_E4typeEEDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_NonArray<_Tp>>
    make_shared(_Args&&... __args)
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
    {
      using _Alloc = allocator<void>;
      _Alloc __a;
      return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
			     std::forward<_Args>(__args)...);
 80092d8:	f107 030c 	add.w	r3, r7, #12
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fc25 	bl	8009b2e <_ZNSt10shared_ptrI12CommsHandlerEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <_ZNSt10shared_ptrI12CommsHandlerEaSEOS1_>:
      operator=(shared_ptr&& __r) noexcept
 80092ec:	b590      	push	{r4, r7, lr}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 80092f6:	687c      	ldr	r4, [r7, #4]
 80092f8:	6838      	ldr	r0, [r7, #0]
 80092fa:	f000 fc27 	bl	8009b4c <_ZSt4moveIRSt10shared_ptrI12CommsHandlerEEONSt16remove_referenceIT_E4typeEOS5_>
 80092fe:	4603      	mov	r3, r0
 8009300:	4619      	mov	r1, r3
 8009302:	4620      	mov	r0, r4
 8009304:	f000 fc2d 	bl	8009b62 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 8009308:	687b      	ldr	r3, [r7, #4]
      }
 800930a:	4618      	mov	r0, r3
 800930c:	370c      	adds	r7, #12
 800930e:	46bd      	mov	sp, r7
 8009310:	bd90      	pop	{r4, r7, pc}

08009312 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8009312:	b580      	push	{r7, lr}
 8009314:	b082      	sub	sp, #8
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
	return _M_get();
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fc40 	bl	8009ba0 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8009320:	4603      	mov	r3, r0
      }
 8009322:	4618      	mov	r0, r3
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800932a:	b480      	push	{r7}
 800932c:	b083      	sub	sp, #12
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4618      	mov	r0, r3
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	68b9      	ldr	r1, [r7, #8]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	4618      	mov	r0, r3
 8009354:	f000 fc48 	bl	8009be8 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 8009362:	b5b0      	push	{r4, r5, r7, lr}
 8009364:	b082      	sub	sp, #8
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	6039      	str	r1, [r7, #0]
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 800936c:	687c      	ldr	r4, [r7, #4]
 800936e:	6838      	ldr	r0, [r7, #0]
 8009370:	f000 fc22 	bl	8009bb8 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 8009374:	4605      	mov	r5, r0
 8009376:	6838      	ldr	r0, [r7, #0]
 8009378:	f000 fbb0 	bl	8009adc <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 800937c:	4603      	mov	r3, r0
 800937e:	4618      	mov	r0, r3
 8009380:	f000 fc27 	bl	8009bd2 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009384:	4603      	mov	r3, r0
 8009386:	461a      	mov	r2, r3
 8009388:	4629      	mov	r1, r5
 800938a:	4620      	mov	r0, r4
 800938c:	f7ff ffd8 	bl	8009340 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>
	{ }
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4618      	mov	r0, r3
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bdb0      	pop	{r4, r5, r7, pc}

0800939a <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800939a:	b590      	push	{r4, r7, lr}
 800939c:	b085      	sub	sp, #20
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4618      	mov	r0, r3
 80093a6:	f000 fc35 	bl	8009c14 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 80093aa:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00c      	beq.n	80093ce <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fc3a 	bl	8009c2e <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>
 80093ba:	4604      	mov	r4, r0
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f000 fc43 	bl	8009c48 <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 80093c2:	4603      	mov	r3, r0
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4619      	mov	r1, r3
 80093c8:	4620      	mov	r0, r4
 80093ca:	f000 fc48 	bl	8009c5e <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
	__ptr = pointer();
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	601a      	str	r2, [r3, #0]
      }
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4618      	mov	r0, r3
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd90      	pop	{r4, r7, pc}

080093de <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80093de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093e2:	b08e      	sub	sp, #56	@ 0x38
 80093e4:	af02      	add	r7, sp, #8
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80093ee:	2044      	movs	r0, #68	@ 0x44
 80093f0:	f013 fa56 	bl	801c8a0 <_Znwj>
 80093f4:	4603      	mov	r3, r0
 80093f6:	4698      	mov	r8, r3
 80093f8:	68b8      	ldr	r0, [r7, #8]
 80093fa:	f000 fc41 	bl	8009c80 <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80093fe:	4604      	mov	r4, r0
 8009400:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009404:	4618      	mov	r0, r3
 8009406:	f013 fa5c 	bl	801c8c2 <_ZNSaIcEC1Ev>
 800940a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800940e:	f107 0314 	add.w	r3, r7, #20
 8009412:	4621      	mov	r1, r4
 8009414:	4618      	mov	r0, r3
 8009416:	f7fb fcf3 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fc3b 	bl	8009c96 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8009420:	4603      	mov	r3, r0
 8009422:	681d      	ldr	r5, [r3, #0]
 8009424:	6838      	ldr	r0, [r7, #0]
 8009426:	f000 fc41 	bl	8009cac <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 800942a:	4603      	mov	r3, r0
 800942c:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009430:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8009432:	f000 fc46 	bl	8009cc2 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 8009436:	4603      	mov	r3, r0
 8009438:	681c      	ldr	r4, [r3, #0]
 800943a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800943c:	f000 fc4c 	bl	8009cd8 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8009440:	4603      	mov	r3, r0
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	b2db      	uxtb	r3, r3
 8009446:	f107 0114 	add.w	r1, r7, #20
 800944a:	9301      	str	r3, [sp, #4]
 800944c:	9400      	str	r4, [sp, #0]
 800944e:	4633      	mov	r3, r6
 8009450:	462a      	mov	r2, r5
 8009452:	4640      	mov	r0, r8
 8009454:	f005 fe20 	bl	800f098 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 8009458:	4641      	mov	r1, r8
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 fc57 	bl	8009d0e <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8009460:	f107 0314 	add.w	r3, r7, #20
 8009464:	4618      	mov	r0, r3
 8009466:	f013 fac7 	bl	801c9f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800946a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800946e:	4618      	mov	r0, r3
 8009470:	f013 fa28 	bl	801c8c4 <_ZNSaIcED1Ev>
 8009474:	bf00      	nop
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	3730      	adds	r7, #48	@ 0x30
 800947a:	46bd      	mov	sp, r7
 800947c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009480 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800948a:	6838      	ldr	r0, [r7, #0]
 800948c:	f000 fc6e 	bl	8009d6c <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>
 8009490:	4603      	mov	r3, r0
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fc49 	bl	8009d2c <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800949a:	6838      	ldr	r0, [r7, #0]
 800949c:	f000 fc7b 	bl	8009d96 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 80094a0:	4603      	mov	r3, r0
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 fc84 	bl	8009db0 <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fc74 	bl	8009d96 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 80094ae:	687b      	ldr	r3, [r7, #4]
      }
 80094b0:	4618      	mov	r0, r3
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80094b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094bc:	b08e      	sub	sp, #56	@ 0x38
 80094be:	af02      	add	r7, sp, #8
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	607a      	str	r2, [r7, #4]
 80094c6:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80094c8:	2044      	movs	r0, #68	@ 0x44
 80094ca:	f013 f9e9 	bl	801c8a0 <_Znwj>
 80094ce:	4603      	mov	r3, r0
 80094d0:	4698      	mov	r8, r3
 80094d2:	68b8      	ldr	r0, [r7, #8]
 80094d4:	f000 fc77 	bl	8009dc6 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80094d8:	4604      	mov	r4, r0
 80094da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80094de:	4618      	mov	r0, r3
 80094e0:	f013 f9ef 	bl	801c8c2 <_ZNSaIcEC1Ev>
 80094e4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80094e8:	f107 0314 	add.w	r3, r7, #20
 80094ec:	4621      	mov	r1, r4
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7fb fc86 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fbce 	bl	8009c96 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80094fa:	4603      	mov	r3, r0
 80094fc:	681d      	ldr	r5, [r3, #0]
 80094fe:	6838      	ldr	r0, [r7, #0]
 8009500:	f000 fbd4 	bl	8009cac <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8009504:	4603      	mov	r3, r0
 8009506:	f9b3 6000 	ldrsh.w	r6, [r3]
 800950a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800950c:	f000 fbd9 	bl	8009cc2 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 8009510:	4603      	mov	r3, r0
 8009512:	681c      	ldr	r4, [r3, #0]
 8009514:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8009516:	f000 fbdf 	bl	8009cd8 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800951a:	4603      	mov	r3, r0
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	b2db      	uxtb	r3, r3
 8009520:	f107 0114 	add.w	r1, r7, #20
 8009524:	9301      	str	r3, [sp, #4]
 8009526:	9400      	str	r4, [sp, #0]
 8009528:	4633      	mov	r3, r6
 800952a:	462a      	mov	r2, r5
 800952c:	4640      	mov	r0, r8
 800952e:	f005 fdb3 	bl	800f098 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 8009532:	4641      	mov	r1, r8
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f000 fbea 	bl	8009d0e <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800953a:	f107 0314 	add.w	r3, r7, #20
 800953e:	4618      	mov	r0, r3
 8009540:	f013 fa5a 	bl	801c9f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009544:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009548:	4618      	mov	r0, r3
 800954a:	f013 f9bb 	bl	801c8c4 <_ZNSaIcED1Ev>
 800954e:	bf00      	nop
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	3730      	adds	r7, #48	@ 0x30
 8009554:	46bd      	mov	sp, r7
 8009556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800955a <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800955a:	b580      	push	{r7, lr}
 800955c:	b082      	sub	sp, #8
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
	return get();
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fc3a 	bl	8009ddc <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>
 8009568:	4603      	mov	r3, r0
      }
 800956a:	4618      	mov	r0, r3
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <_ZNSt10shared_ptrI6ModuleEC1I12CommsHandlervEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 8009572:	b580      	push	{r7, lr}
 8009574:	b082      	sub	sp, #8
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	4611      	mov	r1, r2
 8009582:	4618      	mov	r0, r3
 8009584:	f000 fc37 	bl	8009df6 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlervEERKS_IT_LS2_0EE>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4618      	mov	r0, r3
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8009592:	b580      	push	{r7, lr}
 8009594:	b082      	sub	sp, #8
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
	return get();
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fc41 	bl	8009e22 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>
 80095a0:	4603      	mov	r3, r0
      }
 80095a2:	4618      	mov	r0, r3
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>:
  detail::ElementProxy<JsonArray> operator[](T index) const {
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b084      	sub	sp, #16
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	60f8      	str	r0, [r7, #12]
 80095b2:	60b9      	str	r1, [r7, #8]
 80095b4:	607a      	str	r2, [r7, #4]
    return {*this, size_t(index)};
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	ca06      	ldmia	r2, {r1, r2}
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 fc3d 	bl	8009e3c <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>
  }
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b082      	sub	sp, #8
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
    return as<T>();
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fca0 	bl	8009f18 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>
 80095d8:	4603      	mov	r3, r0
  }
 80095da:	4618      	mov	r0, r3
 80095dc:	3708      	adds	r7, #8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b082      	sub	sp, #8
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	6039      	str	r1, [r7, #0]
    this->set(src);
 80095ec:	6839      	ldr	r1, [r7, #0]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fcc7 	bl	8009f82 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>
    return *this;
 80095f4:	687b      	ldr	r3, [r7, #4]
  }
 80095f6:	4618      	mov	r0, r3
 80095f8:	3708      	adds	r7, #8
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>:
  operator T() const {
 80095fe:	b580      	push	{r7, lr}
 8009600:	b082      	sub	sp, #8
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	6039      	str	r1, [r7, #0]
    return as<T>();
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	4618      	mov	r0, r3
 800960e:	f000 fcc6 	bl	8009f9e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>
 8009612:	bf00      	nop
  }
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>:
      element_type*
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const noexcept
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
      { return _M_ptr != nullptr; }
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	bf14      	ite	ne
 800962c:	2301      	movne	r3, #1
 800962e:	2300      	moveq	r3, #0
 8009630:	b2db      	uxtb	r3, r3
 8009632:	4618      	mov	r0, r3
 8009634:	370c      	adds	r7, #12
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr

0800963e <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800963e:	b580      	push	{r7, lr}
 8009640:	b082      	sub	sp, #8
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
	return _M_get();
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fccd 	bl	8009fe6 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800964c:	4603      	mov	r3, r0
      }
 800964e:	4618      	mov	r0, r3
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 8009656:	b580      	push	{r7, lr}
 8009658:	b082      	sub	sp, #8
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d004      	beq.n	800967a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4618      	mov	r0, r3
 8009676:	f7fe fc11 	bl	8007e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4618      	mov	r0, r3
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
      { }
 800968c:	4a04      	ldr	r2, [pc, #16]	@ (80096a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	601a      	str	r2, [r3, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4618      	mov	r0, r3
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr
 80096a0:	0801e990 	.word	0x0801e990

080096a4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
      { }
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7ff ffe9 	bl	8009684 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80096b2:	210c      	movs	r1, #12
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f013 f8e2 	bl	801c87e <_ZdlPvj>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4618      	mov	r0, r3
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>:
  if (dup)
    setRawString(dup);
}

template <typename TAdaptedString>
inline bool VariantData::setString(TAdaptedString value,
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	4638      	mov	r0, r7
 80096ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                   ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first

  if (value.isNull())
 80096d2:	463b      	mov	r3, r7
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7f9 f81a 	bl	800270e <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d001      	beq.n	80096e4 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x20>
    return false;
 80096e0:	2300      	movs	r3, #0
 80096e2:	e021      	b.n	8009728 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>

  if (value.isStatic()) {
 80096e4:	463b      	mov	r3, r7
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fe fc54 	bl	8007f94 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00a      	beq.n	8009708 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x44>
    setLinkedString(value.data());
 80096f2:	463b      	mov	r3, r7
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7f9 f827 	bl	8002748 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 80096fa:	4603      	mov	r3, r0
 80096fc:	4619      	mov	r1, r3
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f7fe fcf6 	bl	80080f0 <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>
    return true;
 8009704:	2301      	movs	r3, #1
 8009706:	e00f      	b.n	8009728 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  auto dup = resources->saveString(value);
 8009708:	6a38      	ldr	r0, [r7, #32]
 800970a:	463b      	mov	r3, r7
 800970c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800970e:	f000 fc76 	bl	8009ffe <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>
 8009712:	6178      	str	r0, [r7, #20]
  if (dup) {
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d005      	beq.n	8009726 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x62>
    setOwnedString(dup);
 800971a:	6979      	ldr	r1, [r7, #20]
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f7f9 fa64 	bl	8002bea <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 8009722:	2301      	movs	r3, #1
 8009724:	e000      	b.n	8009728 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  return false;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3718      	adds	r7, #24
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8009730:	b590      	push	{r4, r7, lr}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fa6a 	bl	8009c14 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 8009740:	4603      	mov	r3, r0
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8009746:	683c      	ldr	r4, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fa63 	bl	8009c14 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800974e:	4603      	mov	r3, r0
 8009750:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d007      	beq.n	8009768 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 f81e 	bl	800979a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800975e:	4603      	mov	r3, r0
 8009760:	68f9      	ldr	r1, [r7, #12]
 8009762:	4618      	mov	r0, r3
 8009764:	f000 fa7b 	bl	8009c5e <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
      }
 8009768:	bf00      	nop
 800976a:	3714      	adds	r7, #20
 800976c:	46bd      	mov	sp, r7
 800976e:	bd90      	pop	{r4, r7, pc}

08009770 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fa4b 	bl	8009c14 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800977e:	4603      	mov	r3, r0
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fa45 	bl	8009c14 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800978a:	4603      	mov	r3, r0
 800978c:	2200      	movs	r2, #0
 800978e:	601a      	str	r2, [r3, #0]
	return __p;
 8009790:	68fb      	ldr	r3, [r7, #12]
      }
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800979a:	b580      	push	{r7, lr}
 800979c:	b082      	sub	sp, #8
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 fc50 	bl	800a04a <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80097aa:	4603      	mov	r3, r0
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4618      	mov	r0, r3
 80097c0:	370c      	adds	r7, #12
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr

080097ca <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b082      	sub	sp, #8
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4618      	mov	r0, r3
 80097d6:	f000 fc44 	bl	800a062 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f000 fc47 	bl	800a082 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80097f4:	4603      	mov	r3, r0
 80097f6:	4618      	mov	r0, r3
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80097fe:	b580      	push	{r7, lr}
 8009800:	b082      	sub	sp, #8
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4618      	mov	r0, r3
 800980a:	f000 f902 	bl	8009a12 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800980e:	4603      	mov	r3, r0
 8009810:	4618      	mov	r0, r3
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4618      	mov	r0, r3
 8009824:	370c      	adds	r7, #12
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <_ZN17JsonConfigHandlerD1Ev>:
#include "../lib/ArduinoJson7/ArduinoJson.h"
#include "fatfs.h"

class Remora; //forward declaration

class JsonConfigHandler {
 800982e:	b580      	push	{r7, lr}
 8009830:	b082      	sub	sp, #8
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	3320      	adds	r3, #32
 800983a:	4618      	mov	r0, r3
 800983c:	f7fe fcf3 	bl	8008226 <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	3304      	adds	r3, #4
 8009844:	4618      	mov	r0, r3
 8009846:	f013 f8d7 	bl	801c9f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4618      	mov	r0, r3
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>:
      operator()(_Tp* __ptr) const
 8009854:	b590      	push	{r4, r7, lr}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800985e:	683c      	ldr	r4, [r7, #0]
 8009860:	2c00      	cmp	r4, #0
 8009862:	d006      	beq.n	8009872 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_+0x1e>
 8009864:	4620      	mov	r0, r4
 8009866:	f7ff ffe2 	bl	800982e <_ZN17JsonConfigHandlerD1Ev>
 800986a:	216c      	movs	r1, #108	@ 0x6c
 800986c:	4620      	mov	r0, r4
 800986e:	f013 f806 	bl	801c87e <_ZdlPvj>
      }
 8009872:	bf00      	nop
 8009874:	370c      	adds	r7, #12
 8009876:	46bd      	mov	sp, r7
 8009878:	bd90      	pop	{r4, r7, pc}

0800987a <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 800987a:	b580      	push	{r7, lr}
 800987c:	b082      	sub	sp, #8
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	601a      	str	r2, [r3, #0]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	3304      	adds	r3, #4
 800988c:	4618      	mov	r0, r3
 800988e:	f000 fc05 	bl	800a09c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4618      	mov	r0, r3
 8009896:	3708      	adds	r7, #8
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 fc06 	bl	800a0b8 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4618      	mov	r0, r3
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b082      	sub	sp, #8
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 fc09 	bl	800a0d8 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80098c6:	4603      	mov	r3, r0
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 fa5b 	bl	8009d96 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 80098e0:	4603      	mov	r3, r0
 80098e2:	4618      	mov	r0, r3
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80098ea:	b480      	push	{r7}
 80098ec:	b083      	sub	sp, #12
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4618      	mov	r0, r3
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <_ZN9pruThreadD1Ev>:

using namespace std;

class Module;

class pruThread
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	3338      	adds	r3, #56	@ 0x38
 800990c:	4618      	mov	r0, r3
 800990e:	f000 fbf0 	bl	800a0f2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	332c      	adds	r3, #44	@ 0x2c
 8009916:	4618      	mov	r0, r3
 8009918:	f000 fbeb 	bl	800a0f2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4618      	mov	r0, r3
 8009920:	f013 f86a 	bl	801c9f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4618      	mov	r0, r3
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <_ZNKSt14default_deleteI9pruThreadEclEPS0_>:
      operator()(_Tp* __ptr) const
 800992e:	b590      	push	{r4, r7, lr}
 8009930:	b083      	sub	sp, #12
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8009938:	683c      	ldr	r4, [r7, #0]
 800993a:	2c00      	cmp	r4, #0
 800993c:	d006      	beq.n	800994c <_ZNKSt14default_deleteI9pruThreadEclEPS0_+0x1e>
 800993e:	4620      	mov	r0, r4
 8009940:	f7ff ffde 	bl	8009900 <_ZN9pruThreadD1Ev>
 8009944:	2144      	movs	r1, #68	@ 0x44
 8009946:	4620      	mov	r0, r4
 8009948:	f012 ff99 	bl	801c87e <_ZdlPvj>
      }
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	bd90      	pop	{r4, r7, pc}

08009954 <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4618      	mov	r0, r3
 8009960:	370c      	adds	r7, #12
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr

0800996a <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800996a:	b580      	push	{r7, lr}
 800996c:	b082      	sub	sp, #8
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
 8009972:	6039      	str	r1, [r7, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	683a      	ldr	r2, [r7, #0]
 8009978:	4611      	mov	r1, r2
 800997a:	4618      	mov	r0, r3
 800997c:	f000 fbd4 	bl	800a128 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4618      	mov	r0, r3
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800998a:	b580      	push	{r7, lr}
 800998c:	b082      	sub	sp, #8
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6839      	ldr	r1, [r7, #0]
 8009998:	4618      	mov	r0, r3
 800999a:	f7ff ffe6 	bl	800996a <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4618      	mov	r0, r3
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 80099a8:	b590      	push	{r4, r7, lr}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7ff ff16 	bl	80097e4 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 80099b8:	4603      	mov	r3, r0
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 80099be:	683c      	ldr	r4, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7ff ff0f 	bl	80097e4 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 80099c6:	4603      	mov	r3, r0
 80099c8:	601c      	str	r4, [r3, #0]
	if (__old_p)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d007      	beq.n	80099e0 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f81e 	bl	8009a12 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 80099d6:	4603      	mov	r3, r0
 80099d8:	68f9      	ldr	r1, [r7, #12]
 80099da:	4618      	mov	r0, r3
 80099dc:	f7ff ff3a 	bl	8009854 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
      }
 80099e0:	bf00      	nop
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd90      	pop	{r4, r7, pc}

080099e8 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f7ff fef7 	bl	80097e4 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 80099f6:	4603      	mov	r3, r0
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7ff fef1 	bl	80097e4 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2200      	movs	r2, #0
 8009a06:	601a      	str	r2, [r3, #0]
	return __p;
 8009a08:	68fb      	ldr	r3, [r7, #12]
      }
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b082      	sub	sp, #8
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 fb97 	bl	800a150 <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009a22:	4603      	mov	r3, r0
 8009a24:	4618      	mov	r0, r3
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4618      	mov	r0, r3
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009a42:	b480      	push	{r7}
 8009a44:	b083      	sub	sp, #12
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4618      	mov	r0, r3
 8009a64:	370c      	adds	r7, #12
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009a6e:	b480      	push	{r7}
 8009a70:	b083      	sub	sp, #12
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	683a      	ldr	r2, [r7, #0]
 8009a92:	4611      	mov	r1, r2
 8009a94:	4618      	mov	r0, r3
 8009a96:	f000 fb67 	bl	800a168 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6839      	ldr	r1, [r7, #0]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7ff ffe6 	bl	8009a84 <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4618      	mov	r0, r3
 8009abc:	3708      	adds	r7, #8
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b082      	sub	sp, #8
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f000 fb5f 	bl	800a190 <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f000 fb5f 	bl	800a1aa <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>
 8009aec:	4603      	mov	r3, r0
 8009aee:	4618      	mov	r0, r3
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <_ZSt4moveIRP8SPICommsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009af6:	b480      	push	{r7}
 8009af8:	b083      	sub	sp, #12
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4618      	mov	r0, r3
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <_ZNKSt14default_deleteI8SPICommsEclEPS0_>:
      operator()(_Tp* __ptr) const
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d004      	beq.n	8009b26 <_ZNKSt14default_deleteI8SPICommsEclEPS0_+0x1a>
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	3204      	adds	r2, #4
 8009b20:	6812      	ldr	r2, [r2, #0]
 8009b22:	4618      	mov	r0, r3
 8009b24:	4790      	blx	r2
      }
 8009b26:	bf00      	nop
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <_ZNSt10shared_ptrI12CommsHandlerEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b082      	sub	sp, #8
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
 8009b36:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6839      	ldr	r1, [r7, #0]
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f000 fb41 	bl	800a1c4 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4618      	mov	r0, r3
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <_ZSt4moveIRSt10shared_ptrI12CommsHandlerEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4618      	mov	r0, r3
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr

08009b62 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
      operator=(__shared_ptr&& __r) noexcept
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 8009b6c:	6838      	ldr	r0, [r7, #0]
 8009b6e:	f000 fb43 	bl	800a1f8 <_ZSt4moveIRSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 8009b72:	4602      	mov	r2, r0
 8009b74:	f107 0308 	add.w	r3, r7, #8
 8009b78:	4611      	mov	r1, r2
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f000 fb47 	bl	800a20e <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 8009b80:	f107 0308 	add.w	r3, r7, #8
 8009b84:	6879      	ldr	r1, [r7, #4]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 fb5f 	bl	800a24a <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 8009b8c:	f107 0308 	add.w	r3, r7, #8
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fe fcdd 	bl	8008550 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8009b96:	687b      	ldr	r3, [r7, #4]
      }
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 fb65 	bl	800a278 <_ZNKSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 fb64 	bl	800a290 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009bd2:	b480      	push	{r7}
 8009bd4:	b083      	sub	sp, #12
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>:
	__uniq_ptr_impl(pointer __p, _Del&& __d)
 8009be8:	b590      	push	{r4, r7, lr}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8009bf4:	68fc      	ldr	r4, [r7, #12]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f7ff ffeb 	bl	8009bd2 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	f107 0308 	add.w	r3, r7, #8
 8009c02:	4619      	mov	r1, r3
 8009c04:	4620      	mov	r0, r4
 8009c06:	f000 fb58 	bl	800a2ba <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3714      	adds	r7, #20
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd90      	pop	{r4, r7, pc}

08009c14 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 fb64 	bl	800a2ec <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009c24:	4603      	mov	r3, r0
 8009c26:	4618      	mov	r0, r3
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b082      	sub	sp, #8
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7ff fdae 	bl	800979a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	4618      	mov	r0, r3
 8009c42:	3708      	adds	r7, #8
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4618      	mov	r0, r3
 8009c54:	370c      	adds	r7, #12
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr

08009c5e <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>:
      operator()(_Tp* __ptr) const
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b082      	sub	sp, #8
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d004      	beq.n	8009c78 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_+0x1a>
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	3204      	adds	r2, #4
 8009c72:	6812      	ldr	r2, [r2, #0]
 8009c74:	4618      	mov	r0, r3
 8009c76:	4790      	blx	r2
      }
 8009c78:	bf00      	nop
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	370c      	adds	r7, #12
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009c96:	b480      	push	{r7}
 8009c98:	b083      	sub	sp, #12
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	370c      	adds	r7, #12
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009cc2:	b480      	push	{r7}
 8009cc4:	b083      	sub	sp, #12
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4618      	mov	r0, r3
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	370c      	adds	r7, #12
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b082      	sub	sp, #8
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	6039      	str	r1, [r7, #0]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	4611      	mov	r1, r2
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f000 fb01 	bl	800a306 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4618      	mov	r0, r3
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b082      	sub	sp, #8
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
 8009d16:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6839      	ldr	r1, [r7, #0]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7ff ffe6 	bl	8009cee <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4618      	mov	r0, r3
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8009d2c:	b590      	push	{r4, r7, lr}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7ff fdbd 	bl	80098b6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8009d42:	683c      	ldr	r4, [r7, #0]
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7ff fdb6 	bl	80098b6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	601c      	str	r4, [r3, #0]
	if (__old_p)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d007      	beq.n	8009d64 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f81e 	bl	8009d96 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	68f9      	ldr	r1, [r7, #12]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7ff fde5 	bl	800992e <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
      }
 8009d64:	bf00      	nop
 8009d66:	3714      	adds	r7, #20
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd90      	pop	{r4, r7, pc}

08009d6c <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f7ff fd9e 	bl	80098b6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7ff fd98 	bl	80098b6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2200      	movs	r2, #0
 8009d8a:	601a      	str	r2, [r3, #0]
	return __p;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
      }
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b082      	sub	sp, #8
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 fac4 	bl	800a32e <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009da6:	4603      	mov	r3, r0
 8009da8:	4618      	mov	r0, r3
 8009daa:	3708      	adds	r7, #8
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4618      	mov	r0, r3
 8009dbc:	370c      	adds	r7, #12
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr

08009dc6 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009dc6:	b480      	push	{r7}
 8009dc8:	b083      	sub	sp, #12
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f000 faad 	bl	800a346 <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8009dec:	4603      	mov	r3, r0
 8009dee:	4618      	mov	r0, r3
 8009df0:	3708      	adds	r7, #8
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlervEERKS_IT_LS2_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b082      	sub	sp, #8
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
 8009dfe:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	1d1a      	adds	r2, r3, #4
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	3304      	adds	r3, #4
 8009e10:	4619      	mov	r1, r3
 8009e12:	4610      	mov	r0, r2
 8009e14:	f7ff fc1f 	bl	8009656 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b082      	sub	sp, #8
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 fa98 	bl	800a362 <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8009e32:	4603      	mov	r3, r0
 8009e34:	4618      	mov	r0, r3
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>:

  template <typename>
  friend class ElementProxy;

 public:
  ElementProxy(TUpstream upstream, size_t index)
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	1d38      	adds	r0, r7, #4
 8009e46:	e880 0006 	stmia.w	r0, {r1, r2}
 8009e4a:	603b      	str	r3, [r7, #0]
      : upstream_(upstream), index_(index) {}
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	3304      	adds	r3, #4
 8009e50:	1d3a      	adds	r2, r7, #4
 8009e52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e56:	e883 0003 	stmia.w	r3, {r0, r1}
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	683a      	ldr	r2, [r7, #0]
 8009e5e:	60da      	str	r2, [r3, #12]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4618      	mov	r0, r3
 8009e64:	3714      	adds	r7, #20
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>:
  const TDerived& derived() const {
 8009e6e:	b480      	push	{r7}
 8009e70:	b083      	sub	sp, #12
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8009e76:	687b      	ldr	r3, [r7, #4]
  }
 8009e78:	4618      	mov	r0, r3
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>:
    return *this;
  }

 private:
  // clang-format off
  ElementProxy(const ElementProxy& src)  // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
      : upstream_(src.upstream_), index_(src.index_) {}
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	683a      	ldr	r2, [r7, #0]
 8009e92:	3304      	adds	r3, #4
 8009e94:	3204      	adds	r2, #4
 8009e96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e9a:	e883 0003 	stmia.w	r3, {r0, r1}
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	68da      	ldr	r2, [r3, #12]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	60da      	str	r2, [r3, #12]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 8009eb4:	b082      	sub	sp, #8
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b082      	sub	sp, #8
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	6039      	str	r1, [r7, #0]
 8009ec0:	f107 0110 	add.w	r1, r7, #16
 8009ec4:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	3304      	adds	r3, #4
 8009ecc:	6839      	ldr	r1, [r7, #0]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7ff ffd8 	bl	8009e84 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	3314      	adds	r3, #20
 8009ed8:	f107 0210 	add.w	r2, r7, #16
 8009edc:	ca07      	ldmia	r2, {r0, r1, r2}
 8009ede:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009eee:	b002      	add	sp, #8
 8009ef0:	4770      	bx	lr

08009ef2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b082      	sub	sp, #8
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8009efc:	6838      	ldr	r0, [r7, #0]
 8009efe:	f000 fa3e 	bl	800a37e <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8009f02:	4602      	mov	r2, r0
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4611      	mov	r1, r2
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 fa43 	bl	800a394 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>
 8009f0e:	bf00      	nop
}
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8009f18:	b590      	push	{r4, r7, lr}
 8009f1a:	b087      	sub	sp, #28
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	617b      	str	r3, [r7, #20]
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8009f28:	6938      	ldr	r0, [r7, #16]
 8009f2a:	f000 fc5a 	bl	800a7e2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 8009f2e:	4604      	mov	r4, r0
 8009f30:	6938      	ldr	r0, [r7, #16]
 8009f32:	f000 fc66 	bl	800a802 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 8009f36:	4602      	mov	r2, r0
 8009f38:	f107 0308 	add.w	r3, r7, #8
 8009f3c:	4621      	mov	r1, r4
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7f8 ff95 	bl	8002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8009f44:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8009f46:	f107 0308 	add.w	r3, r7, #8
 8009f4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009f4e:	f7f9 fc87 	bl	8003860 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 8009f52:	4603      	mov	r3, r0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	371c      	adds	r7, #28
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd90      	pop	{r4, r7, pc}

08009f5c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8009f66:	6838      	ldr	r0, [r7, #0]
 8009f68:	f000 fa23 	bl	800a3b2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4611      	mov	r1, r2
 8009f72:	4618      	mov	r0, r3
 8009f74:	f000 fa28 	bl	800a3c8 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>
 8009f78:	bf00      	nop
}
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>:
  bool set(const T& value) const {
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b082      	sub	sp, #8
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	6039      	str	r1, [r7, #0]
    return doSet<Converter<TypeForConverter>>(value);
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fa29 	bl	800a3e6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>
 8009f94:	4603      	mov	r3, r0
  }
 8009f96:	4618      	mov	r0, r3
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8009f9e:	b590      	push	{r4, r7, lr}
 8009fa0:	b087      	sub	sp, #28
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	6039      	str	r1, [r7, #0]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	617b      	str	r3, [r7, #20]
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 8009fb0:	6938      	ldr	r0, [r7, #16]
 8009fb2:	f000 fe59 	bl	800ac68 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	6938      	ldr	r0, [r7, #16]
 8009fba:	f000 fe65 	bl	800ac88 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	f107 0308 	add.w	r3, r7, #8
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7f8 ff7c 	bl	8002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 8009fcc:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f107 0308 	add.w	r3, r7, #8
 8009fd4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009fd8:	f7fe f8c0 	bl	800815c <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>
 8009fdc:	bf00      	nop
}
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	371c      	adds	r7, #28
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd90      	pop	{r4, r7, pc}

08009fe6 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b082      	sub	sp, #8
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 fa08 	bl	800a404 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>:
  StringNode* saveString(TAdaptedString str) {
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b088      	sub	sp, #32
 800a002:	af02      	add	r7, sp, #8
 800a004:	60f8      	str	r0, [r7, #12]
 800a006:	4638      	mov	r0, r7
 800a008:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (str.isNull())
 800a00c:	463b      	mov	r3, r7
 800a00e:	4618      	mov	r0, r3
 800a010:	f7f8 fb7d 	bl	800270e <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d001      	beq.n	800a01e <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x20>
      return 0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	e011      	b.n	800a042 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x44>
    auto node = stringPool_.add(str, allocator_);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f103 0008 	add.w	r0, r3, #8
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	463b      	mov	r3, r7
 800a02c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a02e:	f000 f9f5 	bl	800a41c <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>
 800a032:	6178      	str	r0, [r7, #20]
    if (!node)
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d102      	bne.n	800a040 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x42>
      overflowed_ = true;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2201      	movs	r2, #1
 800a03e:	711a      	strb	r2, [r3, #4]
    return node;
 800a040:	697b      	ldr	r3, [r7, #20]
  }
 800a042:	4618      	mov	r0, r3
 800a044:	3718      	adds	r7, #24
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b082      	sub	sp, #8
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 fa22 	bl	800a49c <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a058:	4603      	mov	r3, r0
 800a05a:	4618      	mov	r0, r3
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800a062:	b580      	push	{r7, lr}
 800a064:	b082      	sub	sp, #8
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 fa22 	bl	800a4b4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4618      	mov	r0, r3
 800a074:	f000 fa2a 	bl	800a4cc <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4618      	mov	r0, r3
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a082:	b580      	push	{r7, lr}
 800a084:	b082      	sub	sp, #8
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4618      	mov	r0, r3
 800a08e:	f000 fa2b 	bl	800a4e8 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a092:	4603      	mov	r3, r0
 800a094:	4618      	mov	r0, r3
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	601a      	str	r2, [r3, #0]
      { }
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fa1d 	bl	800a500 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f000 fa25 	bl	800a518 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f000 fa26 	bl	800a534 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 800a0f2:	b5b0      	push	{r4, r5, r7, lr}
 800a0f4:	b082      	sub	sp, #8
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681c      	ldr	r4, [r3, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4618      	mov	r0, r3
 800a106:	f000 fa46 	bl	800a596 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800a10a:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a10c:	461a      	mov	r2, r3
 800a10e:	4629      	mov	r1, r5
 800a110:	4620      	mov	r0, r4
 800a112:	f000 fa4b 	bl	800a5ac <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4618      	mov	r0, r3
 800a11a:	f000 fa23 	bl	800a564 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4618      	mov	r0, r3
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bdb0      	pop	{r4, r5, r7, pc}

0800a128 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800a128:	b590      	push	{r4, r7, lr}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4618      	mov	r0, r3
 800a136:	f7ff fb48 	bl	80097ca <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800a13a:	683c      	ldr	r4, [r7, #0]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f7ff fb51 	bl	80097e4 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800a142:	4603      	mov	r3, r0
 800a144:	601c      	str	r4, [r3, #0]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4618      	mov	r0, r3
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd90      	pop	{r4, r7, pc}

0800a150 <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fa35 	bl	800a5c8 <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a15e:	4603      	mov	r3, r0
 800a160:	4618      	mov	r0, r3
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>:
 800a168:	b590      	push	{r4, r7, lr}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4618      	mov	r0, r3
 800a176:	f000 fa33 	bl	800a5e0 <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800a17a:	683c      	ldr	r4, [r7, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f7ff fca0 	bl	8009ac2 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800a182:	4603      	mov	r3, r0
 800a184:	601c      	str	r4, [r3, #0]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4618      	mov	r0, r3
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd90      	pop	{r4, r7, pc}

0800a190 <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f000 fa2d 	bl	800a5fa <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3708      	adds	r7, #8
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b082      	sub	sp, #8
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f000 fa2c 	bl	800a612 <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
      /// @}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	601a      	str	r2, [r3, #0]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	3304      	adds	r3, #4
 800a1d8:	6879      	ldr	r1, [r7, #4]
 800a1da:	683a      	ldr	r2, [r7, #0]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f000 fa24 	bl	800a62a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlerSaIvEJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 fa62 	bl	800a6b2 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <_ZSt4moveIRSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4618      	mov	r0, r3
 800a204:	370c      	adds	r7, #12
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr

0800a20e <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800a20e:	b580      	push	{r7, lr}
 800a210:	b082      	sub	sp, #8
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	601a      	str	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	3304      	adds	r3, #4
 800a224:	4618      	mov	r0, r3
 800a226:	f7ff ff39 	bl	800a09c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	1d1a      	adds	r2, r3, #4
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	3304      	adds	r3, #4
 800a232:	4619      	mov	r1, r3
 800a234:	4610      	mov	r0, r2
 800a236:	f000 fa47 	bl	800a6c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	2200      	movs	r2, #0
 800a23e:	601a      	str	r2, [r3, #0]
      }
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	4618      	mov	r0, r3
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b082      	sub	sp, #8
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
 800a252:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	683a      	ldr	r2, [r7, #0]
 800a258:	4611      	mov	r1, r2
 800a25a:	4618      	mov	r0, r3
 800a25c:	f000 fa49 	bl	800a6f2 <_ZSt4swapIP12CommsHandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	1d1a      	adds	r2, r3, #4
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	3304      	adds	r3, #4
 800a268:	4619      	mov	r1, r3
 800a26a:	4610      	mov	r0, r2
 800a26c:	f000 fa2c 	bl	800a6c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 800a270:	bf00      	nop
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <_ZNKSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4618      	mov	r0, r3
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f7ff fc12 	bl	8009ac2 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f7ff fc0c 	bl	8009ac2 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	601a      	str	r2, [r3, #0]
	return __p;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
      }
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 800a2ba:	b5b0      	push	{r4, r5, r7, lr}
 800a2bc:	b084      	sub	sp, #16
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	60f8      	str	r0, [r7, #12]
 800a2c2:	60b9      	str	r1, [r7, #8]
 800a2c4:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a2c6:	68fc      	ldr	r4, [r7, #12]
 800a2c8:	68b8      	ldr	r0, [r7, #8]
 800a2ca:	f000 fa31 	bl	800a730 <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800a2ce:	4605      	mov	r5, r0
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7ff fc7e 	bl	8009bd2 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	461a      	mov	r2, r3
 800a2da:	4629      	mov	r1, r5
 800a2dc:	4620      	mov	r0, r4
 800a2de:	f000 fa32 	bl	800a746 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bdb0      	pop	{r4, r5, r7, pc}

0800a2ec <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f000 fa41 	bl	800a77e <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	4618      	mov	r0, r3
 800a300:	3708      	adds	r7, #8
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800a306:	b590      	push	{r4, r7, lr}
 800a308:	b083      	sub	sp, #12
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
 800a30e:	6039      	str	r1, [r7, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	4618      	mov	r0, r3
 800a314:	f7ff fac2 	bl	800989c <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800a318:	683c      	ldr	r4, [r7, #0]
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f7ff facb 	bl	80098b6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800a320:	4603      	mov	r3, r0
 800a322:	601c      	str	r4, [r3, #0]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4618      	mov	r0, r3
 800a328:	370c      	adds	r7, #12
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd90      	pop	{r4, r7, pc}

0800a32e <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a32e:	b580      	push	{r7, lr}
 800a330:	b082      	sub	sp, #8
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fa2d 	bl	800a796 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a33c:	4603      	mov	r3, r0
 800a33e:	4618      	mov	r0, r3
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800a346:	b580      	push	{r7, lr}
 800a348:	b082      	sub	sp, #8
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4618      	mov	r0, r3
 800a352:	f000 fa2c 	bl	800a7ae <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800a356:	4603      	mov	r3, r0
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4618      	mov	r0, r3
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 fa2b 	bl	800a7c8 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800a372:	4603      	mov	r3, r0
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4618      	mov	r0, r3
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800a37e:	b480      	push	{r7}
 800a380:	b083      	sub	sp, #12
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800a386:	687b      	ldr	r3, [r7, #4]
}
 800a388:	4618      	mov	r0, r3
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800a39e:	2301      	movs	r3, #1
 800a3a0:	2204      	movs	r2, #4
 800a3a2:	6839      	ldr	r1, [r7, #0]
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f7f8 f99b 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800a3b2:	b480      	push	{r7}
 800a3b4:	b083      	sub	sp, #12
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800a3ba:	687b      	ldr	r3, [r7, #4]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	220a      	movs	r2, #10
 800a3d6:	6839      	ldr	r1, [r7, #0]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f7f8 f981 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>:
  }

  template <typename TConverter, typename T>
  bool doSet(const T& value) const {
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b084      	sub	sp, #16
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
 800a3ee:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	6839      	ldr	r1, [r7, #0]
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 fa14 	bl	800a822 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>
 800a3fa:	4603      	mov	r3, r0
        value, is_same<typename function_traits<
                           decltype(&TConverter::toJson)>::return_type,
                       bool>{});
  }
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4618      	mov	r0, r3
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>:
  StringNode* add(TAdaptedString str, Allocator* allocator) {
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b088      	sub	sp, #32
 800a420:	af02      	add	r7, sp, #8
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	4638      	mov	r0, r7
 800a426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    auto node = get(str);
 800a42a:	463b      	mov	r3, r7
 800a42c:	4619      	mov	r1, r3
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f7fb f804 	bl	800543c <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 800a434:	6178      	str	r0, [r7, #20]
    if (node) {
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d007      	beq.n	800a44c <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x30>
      node->references++;
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	889b      	ldrh	r3, [r3, #4]
 800a440:	3301      	adds	r3, #1
 800a442:	b29a      	uxth	r2, r3
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	809a      	strh	r2, [r3, #4]
      return node;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	e023      	b.n	800a494 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    size_t n = str.size();
 800a44c:	463b      	mov	r3, r7
 800a44e:	4618      	mov	r0, r3
 800a450:	f7f8 f96e 	bl	8002730 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 800a454:	6138      	str	r0, [r7, #16]
    node = StringNode::create(n, allocator);
 800a456:	6a39      	ldr	r1, [r7, #32]
 800a458:	6938      	ldr	r0, [r7, #16]
 800a45a:	f7f8 f8d7 	bl	800260c <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 800a45e:	6178      	str	r0, [r7, #20]
    if (!node)
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d101      	bne.n	800a46a <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x4e>
      return nullptr;
 800a466:	2300      	movs	r3, #0
 800a468:	e014      	b.n	800a494 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    stringGetChars(str, node->data, n);
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	f103 0208 	add.w	r2, r3, #8
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	4613      	mov	r3, r2
 800a476:	463a      	mov	r2, r7
 800a478:	ca07      	ldmia	r2, {r0, r1, r2}
 800a47a:	f000 f9ec 	bl	800a856 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>
    node->data[n] = 0;  // force NUL terminator
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	4413      	add	r3, r2
 800a484:	3308      	adds	r3, #8
 800a486:	2200      	movs	r2, #0
 800a488:	701a      	strb	r2, [r3, #0]
    add(node);
 800a48a:	6979      	ldr	r1, [r7, #20]
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f7f8 f981 	bl	8002794 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
    return node;
 800a492:	697b      	ldr	r3, [r7, #20]
  }
 800a494:	4618      	mov	r0, r3
 800a496:	3718      	adds	r7, #24
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f9f6 	bl	800a896 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>:
      _Tuple_impl()
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 f9f6 	bl	800a8ae <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>:
      constexpr _Head_base()
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	601a      	str	r2, [r3, #0]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 f9e7 	bl	800a8c4 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>:
      _Tuple_impl()
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f9e8 	bl	800a8de <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4618      	mov	r0, r3
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>:
      constexpr _Head_base()
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	601a      	str	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4618      	mov	r0, r3
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f9d9 	bl	800a8f4 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>
 800a542:	4603      	mov	r3, r0
 800a544:	4618      	mov	r0, r3
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 f9da 	bl	800a90e <_ZNSaISt10shared_ptrI6ModuleEED1Ev>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4618      	mov	r0, r3
 800a55e:	3708      	adds	r7, #8
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	689a      	ldr	r2, [r3, #8]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	1ad3      	subs	r3, r2, r3
 800a57a:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800a57c:	461a      	mov	r2, r3
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f9d1 	bl	800a926 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      }
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4618      	mov	r0, r3
 800a588:	f7ff ffe0 	bl	800a54c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4618      	mov	r0, r3
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800a596:	b480      	push	{r7}
 800a598:	b083      	sub	sp, #12
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800a5b8:	68b9      	ldr	r1, [r7, #8]
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f000 f9c6 	bl	800a94c <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>
    }
 800a5c0:	bf00      	nop
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 f9c8 	bl	800a966 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3708      	adds	r7, #8
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f000 f9c7 	bl	800a97e <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b082      	sub	sp, #8
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f9cb 	bl	800a99e <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>
 800a608:	4603      	mov	r3, r0
 800a60a:	4618      	mov	r0, r3
 800a60c:	3708      	adds	r7, #8
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a612:	b580      	push	{r7, lr}
 800a614:	b082      	sub	sp, #8
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 f9cc 	bl	800a9b8 <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a620:	4603      	mov	r3, r0
 800a622:	4618      	mov	r0, r3
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlerSaIvEJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 800a62a:	b5b0      	push	{r4, r5, r7, lr}
 800a62c:	b08a      	sub	sp, #40	@ 0x28
 800a62e:	af00      	add	r7, sp, #0
 800a630:	60f8      	str	r0, [r7, #12]
 800a632:	60b9      	str	r1, [r7, #8]
 800a634:	607a      	str	r2, [r7, #4]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	f107 031c 	add.w	r3, r7, #28
 800a63c:	4611      	mov	r1, r2
 800a63e:	4618      	mov	r0, r3
 800a640:	f000 f9c6 	bl	800a9d0 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 800a644:	f107 0314 	add.w	r3, r7, #20
 800a648:	f107 021c 	add.w	r2, r7, #28
 800a64c:	4611      	mov	r1, r2
 800a64e:	4618      	mov	r0, r3
 800a650:	f000 f9d7 	bl	800aa02 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 800a654:	f107 0314 	add.w	r3, r7, #20
 800a658:	4618      	mov	r0, r3
 800a65a:	f000 f9fa 	bl	800aa52 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 800a65e:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 800a660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a662:	4619      	mov	r1, r3
 800a664:	202c      	movs	r0, #44	@ 0x2c
 800a666:	f7fd fc0d 	bl	8007e84 <_ZnwjPv>
 800a66a:	4604      	mov	r4, r0
 800a66c:	4629      	mov	r1, r5
 800a66e:	4620      	mov	r0, r4
 800a670:	f000 f9fe 	bl	800aa70 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>
 800a674:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 800a676:	f107 0314 	add.w	r3, r7, #20
 800a67a:	2100      	movs	r1, #0
 800a67c:	4618      	mov	r0, r3
 800a67e:	f000 fa19 	bl	800aab4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6a3a      	ldr	r2, [r7, #32]
 800a686:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 800a688:	6a38      	ldr	r0, [r7, #32]
 800a68a:	f000 fa22 	bl	800aad2 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800a68e:	4602      	mov	r2, r0
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	601a      	str	r2, [r3, #0]
	}
 800a694:	f107 0314 	add.w	r3, r7, #20
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 f9c5 	bl	800aa28 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800a69e:	f107 031c 	add.w	r3, r7, #28
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f000 f9a1 	bl	800a9ea <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3728      	adds	r7, #40	@ 0x28
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bdb0      	pop	{r4, r5, r7, pc}

0800a6b2 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800a6b2:	b480      	push	{r7}
 800a6b4:	b083      	sub	sp, #12
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
 800a6ba:	6039      	str	r1, [r7, #0]
	{ }
 800a6bc:	bf00      	nop
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	601a      	str	r2, [r3, #0]
      }
 800a6e6:	bf00      	nop
 800a6e8:	3714      	adds	r7, #20
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr

0800a6f2 <_ZSt4swapIP12CommsHandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b084      	sub	sp, #16
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
 800a6fa:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f9f6 	bl	800aaee <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800a702:	4603      	mov	r3, r0
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800a708:	6838      	ldr	r0, [r7, #0]
 800a70a:	f000 f9f0 	bl	800aaee <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800a70e:	4603      	mov	r3, r0
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800a716:	f107 030c 	add.w	r3, r7, #12
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 f9e7 	bl	800aaee <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800a720:	4603      	mov	r3, r0
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	601a      	str	r2, [r3, #0]
    }
 800a728:	bf00      	nop
 800a72a:	3710      	adds	r7, #16
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4618      	mov	r0, r3
 800a73c:	370c      	adds	r7, #12
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr

0800a746 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800a746:	b590      	push	{r4, r7, lr}
 800a748:	b085      	sub	sp, #20
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	60f8      	str	r0, [r7, #12]
 800a74e:	60b9      	str	r1, [r7, #8]
 800a750:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f7ff fa3d 	bl	8009bd2 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a758:	4603      	mov	r3, r0
 800a75a:	4619      	mov	r1, r3
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f000 f9d1 	bl	800ab04 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>
 800a762:	68fc      	ldr	r4, [r7, #12]
 800a764:	68b8      	ldr	r0, [r7, #8]
 800a766:	f7ff ffe3 	bl	800a730 <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800a76a:	4603      	mov	r3, r0
 800a76c:	4619      	mov	r1, r3
 800a76e:	4620      	mov	r0, r4
 800a770:	f000 f9da 	bl	800ab28 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>
	{ }
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	4618      	mov	r0, r3
 800a778:	3714      	adds	r7, #20
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd90      	pop	{r4, r7, pc}

0800a77e <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a77e:	b580      	push	{r7, lr}
 800a780:	b082      	sub	sp, #8
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 f9df 	bl	800ab4a <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>
 800a78c:	4603      	mov	r3, r0
 800a78e:	4618      	mov	r0, r3
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a796:	b580      	push	{r7, lr}
 800a798:	b082      	sub	sp, #8
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 f9e0 	bl	800ab64 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b082      	sub	sp, #8
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f000 f9df 	bl	800ab7c <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f000 f9de 	bl	800ab94 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b082      	sub	sp, #8
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 f9de 	bl	800abac <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 f9e5 	bl	800abc2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 800a7f8:	4603      	mov	r3, r0
  }
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3708      	adds	r7, #8
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800a802:	b580      	push	{r7, lr}
 800a804:	b082      	sub	sp, #8
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 f9ce 	bl	800abac <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800a810:	4603      	mov	r3, r0
 800a812:	4618      	mov	r0, r3
 800a814:	f000 f9e1 	bl	800abda <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 800a818:	4603      	mov	r3, r0
  }
 800a81a:	4618      	mov	r0, r3
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>:
  return resources && !resources->overflowed();
}

template <typename TDerived>
template <typename TConverter, typename T>
inline bool VariantRefBase<TDerived>::doSet(const T& value, true_type) const {
 800a822:	b590      	push	{r4, r7, lr}
 800a824:	b087      	sub	sp, #28
 800a826:	af00      	add	r7, sp, #0
 800a828:	60f8      	str	r0, [r7, #12]
 800a82a:	60b9      	str	r1, [r7, #8]
 800a82c:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	681c      	ldr	r4, [r3, #0]
 800a832:	f107 0310 	add.w	r3, r7, #16
 800a836:	68f9      	ldr	r1, [r7, #12]
 800a838:	4618      	mov	r0, r3
 800a83a:	f000 f9da 	bl	800abf2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>
 800a83e:	f107 0310 	add.w	r3, r7, #16
 800a842:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a846:	4620      	mov	r0, r4
 800a848:	f000 f9e9 	bl	800ac1e <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>
 800a84c:	4603      	mov	r3, r0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	371c      	adds	r7, #28
 800a852:	46bd      	mov	sp, r7
 800a854:	bd90      	pop	{r4, r7, pc}

0800a856 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
  return stringEquals(s2, s1);
}

template <typename TAdaptedString>
static void stringGetChars(TAdaptedString s, char* p, size_t n) {
 800a856:	b590      	push	{r4, r7, lr}
 800a858:	b087      	sub	sp, #28
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	1d3c      	adds	r4, r7, #4
 800a85e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a862:	603b      	str	r3, [r7, #0]
  ARDUINOJSON_ASSERT(s.size() <= n);
  for (size_t i = 0; i < n; i++) {
 800a864:	2300      	movs	r3, #0
 800a866:	617b      	str	r3, [r7, #20]
 800a868:	e00c      	b.n	800a884 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x2e>
    p[i] = s[i];
 800a86a:	683a      	ldr	r2, [r7, #0]
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	18d4      	adds	r4, r2, r3
 800a870:	1d3b      	adds	r3, r7, #4
 800a872:	6979      	ldr	r1, [r7, #20]
 800a874:	4618      	mov	r0, r3
 800a876:	f7f6 fa47 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 800a87a:	4603      	mov	r3, r0
 800a87c:	7023      	strb	r3, [r4, #0]
  for (size_t i = 0; i < n; i++) {
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	3301      	adds	r3, #1
 800a882:	617b      	str	r3, [r7, #20]
 800a884:	697a      	ldr	r2, [r7, #20]
 800a886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a888:	429a      	cmp	r2, r3
 800a88a:	d3ee      	bcc.n	800a86a <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x14>
  }
}
 800a88c:	bf00      	nop
 800a88e:	bf00      	nop
 800a890:	371c      	adds	r7, #28
 800a892:	46bd      	mov	sp, r7
 800a894:	bd90      	pop	{r4, r7, pc}

0800a896 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a896:	b580      	push	{r7, lr}
 800a898:	b082      	sub	sp, #8
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fa02 	bl	800aca8 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>:
      constexpr _Head_base()
 800a8ae:	b480      	push	{r7}
 800a8b0:	b083      	sub	sp, #12
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 f9f5 	bl	800acbe <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>:
      constexpr _Head_base()
 800a8de:	b480      	push	{r7}
 800a8e0:	b083      	sub	sp, #12
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4618      	mov	r0, r3
 800a900:	f000 f9e8 	bl	800acd4 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>
 800a904:	4603      	mov	r3, r0
 800a906:	4618      	mov	r0, r3
 800a908:	3708      	adds	r7, #8
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <_ZNSaISt10shared_ptrI6ModuleEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800a90e:	b580      	push	{r7, lr}
 800a910:	b082      	sub	sp, #8
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f9e7 	bl	800acea <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4618      	mov	r0, r3
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 800a926:	b580      	push	{r7, lr}
 800a928:	b084      	sub	sp, #16
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	60f8      	str	r0, [r7, #12]
 800a92e:	60b9      	str	r1, [r7, #8]
 800a930:	607a      	str	r2, [r7, #4]
	if (__p)
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d005      	beq.n	800a944 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	68b9      	ldr	r1, [r7, #8]
 800a93e:	4618      	mov	r0, r3
 800a940:	f000 f9de 	bl	800ad00 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>
      }
 800a944:	bf00      	nop
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800a956:	6839      	ldr	r1, [r7, #0]
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 f9e0 	bl	800ad1e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>
    }
 800a95e:	bf00      	nop
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a966:	b580      	push	{r7, lr}
 800a968:	b082      	sub	sp, #8
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f9ee 	bl	800ad50 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>
 800a974:	4603      	mov	r3, r0
 800a976:	4618      	mov	r0, r3
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800a97e:	b580      	push	{r7, lr}
 800a980:	b082      	sub	sp, #8
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f9ed 	bl	800ad66 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4618      	mov	r0, r3
 800a990:	f000 f9f5 	bl	800ad7e <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4618      	mov	r0, r3
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b082      	sub	sp, #8
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f000 f9f6 	bl	800ad9a <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 f9f5 	bl	800adb0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3708      	adds	r7, #8
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f9f4 	bl	800adc8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b082      	sub	sp, #8
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 f9f3 	bl	800adde <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3708      	adds	r7, #8
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b082      	sub	sp, #8
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
 800aa0a:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800aa0c:	2101      	movs	r1, #1
 800aa0e:	6838      	ldr	r0, [r7, #0]
 800aa10:	f000 f9f0 	bl	800adf4 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 800aa14:	4603      	mov	r3, r0
 800aa16:	461a      	mov	r2, r3
 800aa18:	6839      	ldr	r1, [r7, #0]
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 f9f9 	bl	800ae12 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d007      	beq.n	800aa48 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6818      	ldr	r0, [r3, #0]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	2201      	movs	r2, #1
 800aa42:	4619      	mov	r1, r3
 800aa44:	f000 f9f9 	bl	800ae3a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b082      	sub	sp, #8
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 f9fa 	bl	800ae58 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 800aa64:	4603      	mov	r3, r0
 800aa66:	4618      	mov	r0, r3
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
	...

0800aa70 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 800aa70:	b590      	push	{r4, r7, lr}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	7039      	strb	r1, [r7, #0]
	: _M_impl(__a)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f000 f9f7 	bl	800ae70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800aa82:	4a0b      	ldr	r2, [pc, #44]	@ (800aab0 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_+0x40>)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	601a      	str	r2, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	330c      	adds	r3, #12
 800aa8c:	4621      	mov	r1, r4
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f000 fa04 	bl	800ae9c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 f81c 	bl	800aad2 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	463b      	mov	r3, r7
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f000 fa0a 	bl	800aeba <_ZNSt16allocator_traitsISaIvEE9constructI12CommsHandlerJEEEvRS0_PT_DpOT0_>
	}
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd90      	pop	{r4, r7, pc}
 800aab0:	0801e974 	.word	0x0801e974

0800aab4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	605a      	str	r2, [r3, #4]
	return *this;
 800aac4:	687b      	ldr	r3, [r7, #4]
      }
 800aac6:	4618      	mov	r0, r3
 800aac8:	370c      	adds	r7, #12
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr

0800aad2 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b082      	sub	sp, #8
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	330c      	adds	r3, #12
 800aade:	4618      	mov	r0, r3
 800aae0:	f000 f9f7 	bl	800aed2 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE6_M_ptrEv>
 800aae4:	4603      	mov	r3, r0
 800aae6:	4618      	mov	r0, r3
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800aaee:	b480      	push	{r7}
 800aaf0:	b083      	sub	sp, #12
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4618      	mov	r0, r3
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>:
	_Tuple_impl(_UHead&& __head)
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800ab0e:	6838      	ldr	r0, [r7, #0]
 800ab10:	f7ff f85f 	bl	8009bd2 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800ab14:	4603      	mov	r3, r0
 800ab16:	4619      	mov	r1, r3
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 f9e6 	bl	800aeea <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>
	{ }
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4618      	mov	r0, r3
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800ab32:	6838      	ldr	r0, [r7, #0]
 800ab34:	f7ff fdfc 	bl	800a730 <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	601a      	str	r2, [r3, #0]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4618      	mov	r0, r3
 800ab44:	3708      	adds	r7, #8
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b082      	sub	sp, #8
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f000 f9db 	bl	800af10 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 f9da 	bl	800af26 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>
 800ab72:	4603      	mov	r3, r0
 800ab74:	4618      	mov	r0, r3
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 f9d9 	bl	800af3c <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 f9da 	bl	800af56 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>
 800aba2:	4603      	mov	r3, r0
 800aba4:	4618      	mov	r0, r3
 800aba6:	3708      	adds	r7, #8
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800abb4:	687b      	ldr	r3, [r7, #4]
  }
 800abb6:	4618      	mov	r0, r3
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b082      	sub	sp, #8
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
    return client.getData();
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 f9d0 	bl	800af70 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>
 800abd0:	4603      	mov	r3, r0
  }
 800abd2:	4618      	mov	r0, r3
 800abd4:	3708      	adds	r7, #8
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800abda:	b580      	push	{r7, lr}
 800abdc:	b082      	sub	sp, #8
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 f9e0 	bl	800afa8 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>
 800abe8:	4603      	mov	r3, r0
  }
 800abea:	4618      	mov	r0, r3
 800abec:	3708      	adds	r7, #8
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>:
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
 800abf2:	b590      	push	{r4, r7, lr}
 800abf4:	b083      	sub	sp, #12
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
 800abfa:	6039      	str	r1, [r7, #0]
  return JsonVariant(getOrCreateData(), getResourceManager());
 800abfc:	6838      	ldr	r0, [r7, #0]
 800abfe:	f000 f9e1 	bl	800afc4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>
 800ac02:	4604      	mov	r4, r0
 800ac04:	6838      	ldr	r0, [r7, #0]
 800ac06:	f7ff fdfc 	bl	800a802 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	4621      	mov	r1, r4
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f7f8 f957 	bl	8002ec4 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
}
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	370c      	adds	r7, #12
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd90      	pop	{r4, r7, pc}

0800ac1e <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b086      	sub	sp, #24
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	60f8      	str	r0, [r7, #12]
 800ac26:	1d3b      	adds	r3, r7, #4
 800ac28:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(dst);
 800ac2c:	1d3b      	adds	r3, r7, #4
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7f9 fe90 	bl	8004954 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 800ac34:	6178      	str	r0, [r7, #20]
    if (!data)
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d101      	bne.n	800ac40 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x22>
      return false;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	e00f      	b.n	800ac60 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x42>
    auto resources = getResourceManager(dst);
 800ac40:	1d3b      	adds	r3, r7, #4
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7fa f82b 	bl	8004c9e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 800ac48:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 800ac4a:	6939      	ldr	r1, [r7, #16]
 800ac4c:	6978      	ldr	r0, [r7, #20]
 800ac4e:	f7f8 fe6d 	bl	800392c <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setInteger(src, resources);
 800ac52:	693a      	ldr	r2, [r7, #16]
 800ac54:	68f9      	ldr	r1, [r7, #12]
 800ac56:	6978      	ldr	r0, [r7, #20]
 800ac58:	f000 f9c4 	bl	800afe4 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	bf00      	nop
  }
 800ac60:	4618      	mov	r0, r3
 800ac62:	3718      	adds	r7, #24
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>:
  VariantData* getData() const {
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f7ff f8fc 	bl	8009e6e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800ac76:	4603      	mov	r3, r0
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f000 f9f6 	bl	800b06a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800ac7e:	4603      	mov	r3, r0
  }
 800ac80:	4618      	mov	r0, r3
 800ac82:	3708      	adds	r7, #8
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f7ff f8ec 	bl	8009e6e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800ac96:	4603      	mov	r3, r0
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f000 fa05 	bl	800b0a8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800ac9e:	4603      	mov	r3, r0
  }
 800aca0:	4618      	mov	r0, r3
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4618      	mov	r0, r3
 800acb4:	370c      	adds	r7, #12
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr

0800acbe <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800acbe:	b480      	push	{r7}
 800acc0:	b083      	sub	sp, #12
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4618      	mov	r0, r3
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>:
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4618      	mov	r0, r3
 800ace0:	370c      	adds	r7, #12
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800acea:	b480      	push	{r7}
 800acec:	b083      	sub	sp, #12
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4618      	mov	r0, r3
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	68b9      	ldr	r1, [r7, #8]
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f000 f9d5 	bl	800b0c0 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>
 800ad16:	bf00      	nop
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b082      	sub	sp, #8
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
 800ad26:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800ad28:	e009      	b.n	800ad3e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f9d7 	bl	800b0de <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800ad30:	4603      	mov	r3, r0
 800ad32:	4618      	mov	r0, r3
 800ad34:	f000 f9de 	bl	800b0f4 <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>
	  for (; __first != __last; ++__first)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	3308      	adds	r3, #8
 800ad3c:	607b      	str	r3, [r7, #4]
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d1f1      	bne.n	800ad2a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0xc>
	}
 800ad46:	bf00      	nop
 800ad48:	bf00      	nop
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ad50:	b480      	push	{r7}
 800ad52:	b083      	sub	sp, #12
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	370c      	adds	r7, #12
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr

0800ad66 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>:
      _Tuple_impl()
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b082      	sub	sp, #8
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 f9cb 	bl	800b10a <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4618      	mov	r0, r3
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>:
      constexpr _Head_base()
 800ad7e:	b480      	push	{r7}
 800ad80:	b083      	sub	sp, #12
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	601a      	str	r2, [r3, #0]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	370c      	adds	r7, #12
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr

0800ad9a <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ad9a:	b480      	push	{r7}
 800ad9c:	b083      	sub	sp, #12
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4618      	mov	r0, r3
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 f9b1 	bl	800b120 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>
 800adbe:	4603      	mov	r3, r0
 800adc0:	4618      	mov	r0, r3
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4618      	mov	r0, r3
 800add4:	370c      	adds	r7, #12
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr

0800adde <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800adde:	b480      	push	{r7}
 800ade0:	b083      	sub	sp, #12
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4618      	mov	r0, r3
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800adfe:	2200      	movs	r2, #0
 800ae00:	6839      	ldr	r1, [r7, #0]
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 f998 	bl	800b138 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3708      	adds	r7, #8
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b084      	sub	sp, #16
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	60f8      	str	r0, [r7, #12]
 800ae1a:	60b9      	str	r1, [r7, #8]
 800ae1c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800ae1e:	68b8      	ldr	r0, [r7, #8]
 800ae20:	f000 f9b8 	bl	800b194 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 800ae24:	4602      	mov	r2, r0
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	601a      	str	r2, [r3, #0]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	605a      	str	r2, [r3, #4]
      { }
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	4618      	mov	r0, r3
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b084      	sub	sp, #16
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	60f8      	str	r0, [r7, #12]
 800ae42:	60b9      	str	r1, [r7, #8]
 800ae44:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	68b9      	ldr	r1, [r7, #8]
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	f000 f9ad 	bl	800b1aa <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 800ae50:	bf00      	nop
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 800ae60:	687b      	ldr	r3, [r7, #4]
    }
 800ae62:	4618      	mov	r0, r3
 800ae64:	370c      	adds	r7, #12
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr
	...

0800ae70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 800ae78:	4a07      	ldr	r2, [pc, #28]	@ (800ae98 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	601a      	str	r2, [r3, #0]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2201      	movs	r2, #1
 800ae82:	605a      	str	r2, [r3, #4]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2201      	movs	r2, #1
 800ae88:	609a      	str	r2, [r3, #8]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	370c      	adds	r7, #12
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr
 800ae98:	0801e990 	.word	0x0801e990

0800ae9c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	7039      	strb	r1, [r7, #0]
 800aea6:	463b      	mov	r3, r7
 800aea8:	4619      	mov	r1, r3
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f98e 	bl	800b1cc <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3708      	adds	r7, #8
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <_ZNSt16allocator_traitsISaIvEE9constructI12CommsHandlerJEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b082      	sub	sp, #8
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
 800aec2:	6039      	str	r1, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 800aec4:	6838      	ldr	r0, [r7, #0]
 800aec6:	f000 f98d 	bl	800b1e4 <_ZSt10_ConstructI12CommsHandlerJEEvPT_DpOT0_>
 800aeca:	bf00      	nop
 800aecc:	3708      	adds	r7, #8
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b082      	sub	sp, #8
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 f993 	bl	800b206 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE7_M_addrEv>
 800aee0:	4603      	mov	r3, r0
 800aee2:	4618      	mov	r0, r3
 800aee4:	3708      	adds	r7, #8
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>:
	constexpr _Head_base(_UHead&& __h)
 800aeea:	b590      	push	{r4, r7, lr}
 800aeec:	b083      	sub	sp, #12
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
 800aef2:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800aef4:	687c      	ldr	r4, [r7, #4]
 800aef6:	6838      	ldr	r0, [r7, #0]
 800aef8:	f7fe fe6b 	bl	8009bd2 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800aefc:	4603      	mov	r3, r0
 800aefe:	4619      	mov	r1, r3
 800af00:	4620      	mov	r0, r4
 800af02:	f000 f98b 	bl	800b21c <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4618      	mov	r0, r3
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd90      	pop	{r4, r7, pc}

0800af10 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800af10:	b480      	push	{r7}
 800af12:	b083      	sub	sp, #12
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4618      	mov	r0, r3
 800af1c:	370c      	adds	r7, #12
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr

0800af26 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800af26:	b480      	push	{r7}
 800af28:	b083      	sub	sp, #12
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4618      	mov	r0, r3
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4618      	mov	r0, r3
 800af48:	f000 f974 	bl	800b234 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>
 800af4c:	4603      	mov	r3, r0
 800af4e:	4618      	mov	r0, r3
 800af50:	3708      	adds	r7, #8
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>:
 800af56:	b580      	push	{r7, lr}
 800af58:	b082      	sub	sp, #8
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4618      	mov	r0, r3
 800af62:	f000 f972 	bl	800b24a <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>
 800af66:	4603      	mov	r3, r0
 800af68:	4618      	mov	r0, r3
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 800af70:	b590      	push	{r4, r7, lr}
 800af72:	b085      	sub	sp, #20
 800af74:	af02      	add	r7, sp, #8
 800af76:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	3304      	adds	r3, #4
 800af7c:	4618      	mov	r0, r3
 800af7e:	f000 f874 	bl	800b06a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800af82:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	3304      	adds	r3, #4
 800af88:	4618      	mov	r0, r3
 800af8a:	f000 f88d 	bl	800b0a8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800af8e:	4602      	mov	r2, r0
    return VariantData::getMember(
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	9200      	str	r2, [sp, #0]
 800af94:	3314      	adds	r3, #20
 800af96:	cb0e      	ldmia	r3, {r1, r2, r3}
 800af98:	4620      	mov	r0, r4
 800af9a:	f7fb ff5f 	bl	8006e5c <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 800af9e:	4603      	mov	r3, r0
  }
 800afa0:	4618      	mov	r0, r3
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd90      	pop	{r4, r7, pc}

0800afa8 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	3304      	adds	r3, #4
 800afb4:	4618      	mov	r0, r3
 800afb6:	f000 f877 	bl	800b0a8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800afba:	4603      	mov	r3, r0
  }
 800afbc:	4618      	mov	r0, r3
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>:
  VariantData* getOrCreateData() const {
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getOrCreateData(derived());
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f7ff fded 	bl	800abac <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800afd2:	4603      	mov	r3, r0
 800afd4:	4618      	mov	r0, r3
 800afd6:	f000 f943 	bl	800b260 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>
 800afda:	4603      	mov	r3, r0
  }
 800afdc:	4618      	mov	r0, r3
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 800afe4:	b5b0      	push	{r4, r5, r7, lr}
 800afe6:	b086      	sub	sp, #24
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 800aff0:	68b8      	ldr	r0, [r7, #8]
 800aff2:	f7fb f9fc 	bl	80063ee <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d006      	beq.n	800b00a <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x26>
    type_ = VariantType::Uint32;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	220a      	movs	r2, #10
 800b000:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	68ba      	ldr	r2, [r7, #8]
 800b006:	601a      	str	r2, [r3, #0]
 800b008:	e02a      	b.n	800b060 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 800b00a:	f107 0310 	add.w	r3, r7, #16
 800b00e:	6879      	ldr	r1, [r7, #4]
 800b010:	4618      	mov	r0, r3
 800b012:	f7f8 faa4 	bl	800355e <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 800b016:	f107 0310 	add.w	r3, r7, #16
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fc fbc1 	bl	80077a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 800b020:	4603      	mov	r3, r0
 800b022:	f083 0301 	eor.w	r3, r3, #1
 800b026:	b2db      	uxtb	r3, r3
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d001      	beq.n	800b030 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4c>
      return false;
 800b02c:	2300      	movs	r3, #0
 800b02e:	e018      	b.n	800b062 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7e>
    type_ = VariantType::Uint64;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	221a      	movs	r2, #26
 800b034:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 800b036:	f107 0310 	add.w	r3, r7, #16
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7fc fbc2 	bl	80077c4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800b040:	4603      	mov	r3, r0
 800b042:	461a      	mov	r2, r3
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	2200      	movs	r2, #0
 800b04c:	461c      	mov	r4, r3
 800b04e:	4615      	mov	r5, r2
 800b050:	f107 0310 	add.w	r3, r7, #16
 800b054:	4618      	mov	r0, r3
 800b056:	f7fc fbc1 	bl	80077dc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 800b05a:	4603      	mov	r3, r0
 800b05c:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 800b060:	2301      	movs	r3, #1
}
 800b062:	4618      	mov	r0, r3
 800b064:	3718      	adds	r7, #24
 800b066:	46bd      	mov	sp, r7
 800b068:	bdb0      	pop	{r4, r5, r7, pc}

0800b06a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800b06a:	b5b0      	push	{r4, r5, r7, lr}
 800b06c:	b084      	sub	sp, #16
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	60fb      	str	r3, [r7, #12]
    return VariantAttorney::getResourceManager(upstream_);
  }

  FORCE_INLINE VariantData* getData() const {
    return VariantData::getElement(
        VariantAttorney::getData(upstream_), index_,
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	3304      	adds	r3, #4
 800b07a:	4618      	mov	r0, r3
 800b07c:	f000 f96d 	bl	800b35a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>
 800b080:	4605      	mov	r5, r0
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	68dc      	ldr	r4, [r3, #12]
        VariantAttorney::getResourceManager(upstream_));
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	3304      	adds	r3, #4
 800b08a:	4618      	mov	r0, r3
 800b08c:	f000 f971 	bl	800b372 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800b090:	4603      	mov	r3, r0
    return VariantData::getElement(
 800b092:	461a      	mov	r2, r3
 800b094:	4621      	mov	r1, r4
 800b096:	4628      	mov	r0, r5
 800b098:	f7fc ffc9 	bl	800802e <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 800b09c:	4603      	mov	r3, r0
        VariantAttorney::getResourceManager(upstream_));
 800b09e:	bf00      	nop
  }
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3710      	adds	r7, #16
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bdb0      	pop	{r4, r5, r7, pc}

0800b0a8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 f8e1 	bl	800b278 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>
 800b0b6:	4603      	mov	r3, r0
  }
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	00db      	lsls	r3, r3, #3
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	68b8      	ldr	r0, [r7, #8]
 800b0d4:	f011 fbd3 	bl	801c87e <_ZdlPvj>
      }
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b0de:	b480      	push	{r7}
 800b0e0:	b083      	sub	sp, #12
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>:
    _Destroy(_Tp* __pointer)
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f7fd fa90 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
    }
 800b102:	bf00      	nop
 800b104:	3708      	adds	r7, #8
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>:
      constexpr _Head_base()
 800b10a:	b480      	push	{r7}
 800b10c:	b083      	sub	sp, #12
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4618      	mov	r0, r3
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4618      	mov	r0, r3
 800b12c:	370c      	adds	r7, #12
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr
	...

0800b138 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	f000 f8d7 	bl	800b2f8 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800b14a:	4602      	mov	r2, r0
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	4293      	cmp	r3, r2
 800b150:	bf8c      	ite	hi
 800b152:	2301      	movhi	r3, #1
 800b154:	2300      	movls	r3, #0
 800b156:	b2db      	uxtb	r3, r3
 800b158:	2b00      	cmp	r3, #0
 800b15a:	bf14      	ite	ne
 800b15c:	2301      	movne	r3, #1
 800b15e:	2300      	moveq	r3, #0
 800b160:	b2db      	uxtb	r3, r3
 800b162:	2b00      	cmp	r3, #0
 800b164:	d007      	beq.n	800b176 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	4a09      	ldr	r2, [pc, #36]	@ (800b190 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d901      	bls.n	800b172 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800b16e:	f011 fbad 	bl	801c8cc <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800b172:	f011 fba8 	bl	801c8c6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	222c      	movs	r2, #44	@ 0x2c
 800b17a:	fb02 f303 	mul.w	r3, r2, r3
 800b17e:	4618      	mov	r0, r3
 800b180:	f011 fb8e 	bl	801c8a0 <_Znwj>
 800b184:	4603      	mov	r3, r0
 800b186:	bf00      	nop
      }
 800b188:	4618      	mov	r0, r3
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	05d1745d 	.word	0x05d1745d

0800b194 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	370c      	adds	r7, #12
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr

0800b1aa <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b084      	sub	sp, #16
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	60f8      	str	r0, [r7, #12]
 800b1b2:	60b9      	str	r1, [r7, #8]
 800b1b4:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	222c      	movs	r2, #44	@ 0x2c
 800b1ba:	fb02 f303 	mul.w	r3, r2, r3
 800b1be:	4619      	mov	r1, r3
 800b1c0:	68b8      	ldr	r0, [r7, #8]
 800b1c2:	f011 fb5c 	bl	801c87e <_ZdlPvj>
      }
 800b1c6:	3710      	adds	r7, #16
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <_ZSt10_ConstructI12CommsHandlerJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	2020      	movs	r0, #32
 800b1f2:	f7fc fe47 	bl	8007e84 <_ZnwjPv>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f001 ffe5 	bl	800d1c8 <_ZN12CommsHandlerC1Ev>
    }
 800b1fe:	bf00      	nop
 800b200:	3708      	adds	r7, #8
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE7_M_addrEv>:
      _M_addr() noexcept
 800b206:	b480      	push	{r7}
 800b208:	b083      	sub	sp, #12
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800b20e:	687b      	ldr	r3, [r7, #4]
      }
 800b210:	4618      	mov	r0, r3
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4618      	mov	r0, r3
 800b22a:	370c      	adds	r7, #12
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4618      	mov	r0, r3
 800b240:	370c      	adds	r7, #12
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr

0800b24a <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>:
 800b24a:	b480      	push	{r7}
 800b24c:	b083      	sub	sp, #12
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	4618      	mov	r0, r3
 800b256:	370c      	adds	r7, #12
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 f853 	bl	800b314 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>
 800b26e:	4603      	mov	r3, r0
  }
 800b270:	4618      	mov	r0, r3
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	3304      	adds	r3, #4
 800b284:	4618      	mov	r0, r3
 800b286:	f000 f874 	bl	800b372 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800b28a:	4603      	mov	r3, r0
  }
 800b28c:	4618      	mov	r0, r3
 800b28e:	3708      	adds	r7, #8
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>:
  VariantData* getOrAddMember(TAdaptedString key, ResourceManager* resources) {
 800b294:	b580      	push	{r7, lr}
 800b296:	b088      	sub	sp, #32
 800b298:	af02      	add	r7, sp, #8
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	4638      	mov	r0, r7
 800b29e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (key.isNull())
 800b2a2:	463b      	mov	r3, r7
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7f7 fa32 	bl	800270e <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d001      	beq.n	800b2b4 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x20>
      return nullptr;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	e01d      	b.n	800b2f0 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    auto obj = isNull() ? &toObject() : asObject();
 800b2b4:	68f8      	ldr	r0, [r7, #12]
 800b2b6:	f7fc fef5 	bl	80080a4 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d004      	beq.n	800b2ca <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x36>
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f7f7 fceb 	bl	8002c9c <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	e003      	b.n	800b2d2 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x3e>
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f7f7 fbdb 	bl	8002a86 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	617b      	str	r3, [r7, #20]
    if (!obj)
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d101      	bne.n	800b2de <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x4a>
      return nullptr;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	e008      	b.n	800b2f0 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    return obj->getOrAddMember(key, resources);
 800b2de:	6978      	ldr	r0, [r7, #20]
 800b2e0:	6a3b      	ldr	r3, [r7, #32]
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	463b      	mov	r3, r7
 800b2e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b2e8:	f000 f84f 	bl	800b38a <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	bf00      	nop
  }
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3718      	adds	r7, #24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800b300:	4b03      	ldr	r3, [pc, #12]	@ (800b310 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800b302:	4618      	mov	r0, r3
 800b304:	370c      	adds	r7, #12
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop
 800b310:	02e8ba2e 	.word	0x02e8ba2e

0800b314 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>:

  VariantData* getOrCreateData() const {
 800b314:	b590      	push	{r4, r7, lr}
 800b316:	b087      	sub	sp, #28
 800b318:	af02      	add	r7, sp, #8
 800b31a:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	3304      	adds	r3, #4
 800b320:	4618      	mov	r0, r3
 800b322:	f000 f853 	bl	800b3cc <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>
 800b326:	60f8      	str	r0, [r7, #12]
    if (!data)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d101      	bne.n	800b332 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800b32e:	2300      	movs	r3, #0
 800b330:	e00f      	b.n	800b352 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x3e>
    return data->getOrAddMember(key_,
 800b332:	68fc      	ldr	r4, [r7, #12]
                                VariantAttorney::getResourceManager(upstream_));
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	3304      	adds	r3, #4
    return data->getOrAddMember(key_,
 800b338:	4618      	mov	r0, r3
 800b33a:	f7ff feb5 	bl	800b0a8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800b33e:	4602      	mov	r2, r0
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	9200      	str	r2, [sp, #0]
 800b344:	3314      	adds	r3, #20
 800b346:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b348:	4620      	mov	r0, r4
 800b34a:	f7ff ffa3 	bl	800b294 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>
 800b34e:	4603      	mov	r3, r0
                                VariantAttorney::getResourceManager(upstream_));
 800b350:	bf00      	nop
  }
 800b352:	4618      	mov	r0, r3
 800b354:	3714      	adds	r7, #20
 800b356:	46bd      	mov	sp, r7
 800b358:	bd90      	pop	{r4, r7, pc}

0800b35a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b082      	sub	sp, #8
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
    return client.getData();
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f7fc ff43 	bl	80081ee <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>
 800b368:	4603      	mov	r3, r0
  }
 800b36a:	4618      	mov	r0, r3
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800b372:	b580      	push	{r7, lr}
 800b374:	b082      	sub	sp, #8
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7fc ff2b 	bl	80081d6 <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>
 800b380:	4603      	mov	r3, r0
  }
 800b382:	4618      	mov	r0, r3
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
  it.next(resources);
  return it.data();
}

template <typename TAdaptedString>
VariantData* ObjectData::getOrAddMember(TAdaptedString key,
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b088      	sub	sp, #32
 800b38e:	af02      	add	r7, sp, #8
 800b390:	60f8      	str	r0, [r7, #12]
 800b392:	4638      	mov	r0, r7
 800b394:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                        ResourceManager* resources) {
  auto data = getMember(key, resources);
 800b398:	6a3b      	ldr	r3, [r7, #32]
 800b39a:	9300      	str	r3, [sp, #0]
 800b39c:	463b      	mov	r3, r7
 800b39e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f7fa f9f2 	bl	800578a <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 800b3a6:	6178      	str	r0, [r7, #20]
  if (data)
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d001      	beq.n	800b3b2 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x28>
    return data;
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	e008      	b.n	800b3c4 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x3a>
  return addMember(key, resources);
 800b3b2:	6a3b      	ldr	r3, [r7, #32]
 800b3b4:	9300      	str	r3, [sp, #0]
 800b3b6:	463b      	mov	r3, r7
 800b3b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	f000 f812 	bl	800b3e4 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	bf00      	nop
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3718      	adds	r7, #24
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 f85b 	bl	800b490 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>
 800b3da:	4603      	mov	r3, r0
  }
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3708      	adds	r7, #8
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b08a      	sub	sp, #40	@ 0x28
 800b3e8:	af02      	add	r7, sp, #8
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	4638      	mov	r0, r7
 800b3ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 800b3f2:	f107 0318 	add.w	r3, r7, #24
 800b3f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7f8 f82b 	bl	8003454 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 800b3fe:	f107 0318 	add.w	r3, r7, #24
 800b402:	4618      	mov	r0, r3
 800b404:	f7f9 faca 	bl	800499c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800b408:	4603      	mov	r3, r0
 800b40a:	f083 0301 	eor.w	r3, r3, #1
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	2b00      	cmp	r3, #0
 800b412:	d001      	beq.n	800b418 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x34>
    return nullptr;
 800b414:	2300      	movs	r3, #0
 800b416:	e037      	b.n	800b488 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  auto valueSlot = resources->allocVariant();
 800b418:	f107 0310 	add.w	r3, r7, #16
 800b41c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b41e:	4618      	mov	r0, r3
 800b420:	f7f8 f818 	bl	8003454 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 800b424:	f107 0310 	add.w	r3, r7, #16
 800b428:	4618      	mov	r0, r3
 800b42a:	f7f9 fab7 	bl	800499c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800b42e:	4603      	mov	r3, r0
 800b430:	f083 0301 	eor.w	r3, r3, #1
 800b434:	b2db      	uxtb	r3, r3
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x5a>
    return nullptr;
 800b43a:	2300      	movs	r3, #0
 800b43c:	e024      	b.n	800b488 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  if (!keySlot->setString(key, resources))
 800b43e:	f107 0318 	add.w	r3, r7, #24
 800b442:	4618      	mov	r0, r3
 800b444:	f7f9 fad3 	bl	80049ee <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 800b448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	463b      	mov	r3, r7
 800b44e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b450:	f7fe f938 	bl	80096c4 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>
 800b454:	4603      	mov	r3, r0
 800b456:	f083 0301 	eor.w	r3, r3, #1
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d001      	beq.n	800b464 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x80>
    return nullptr;
 800b460:	2300      	movs	r3, #0
 800b462:	e011      	b.n	800b488 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b468:	9301      	str	r3, [sp, #4]
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	f107 0218 	add.w	r2, r7, #24
 800b474:	ca06      	ldmia	r2, {r1, r2}
 800b476:	f7f7 ff66 	bl	8003346 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 800b47a:	f107 0310 	add.w	r3, r7, #16
 800b47e:	4618      	mov	r0, r3
 800b480:	f7f9 fa9d 	bl	80049be <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800b484:	4603      	mov	r3, r0
 800b486:	bf00      	nop
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3720      	adds	r7, #32
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>:
  }

  VariantData* getOrCreateData() const {
 800b490:	b5b0      	push	{r4, r5, r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	3304      	adds	r3, #4
 800b49c:	4618      	mov	r0, r3
 800b49e:	f000 f81a 	bl	800b4d6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>
 800b4a2:	60f8      	str	r0, [r7, #12]
    if (!data)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d101      	bne.n	800b4ae <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	e00f      	b.n	800b4ce <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x3e>
    return data->getOrAddElement(
 800b4ae:	68fc      	ldr	r4, [r7, #12]
        index_, VariantAttorney::getResourceManager(upstream_));
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	68dd      	ldr	r5, [r3, #12]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	3304      	adds	r3, #4
    return data->getOrAddElement(
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7ff ff5a 	bl	800b372 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	f7fc fdc7 	bl	8008058 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>
 800b4ca:	4603      	mov	r3, r0
        index_, VariantAttorney::getResourceManager(upstream_));
 800b4cc:	bf00      	nop
  }
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bdb0      	pop	{r4, r5, r7, pc}

0800b4d6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b082      	sub	sp, #8
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f7fc fe93 	bl	800820a <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>
 800b4e4:	4603      	mov	r3, r0
  }
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
	...

0800b4f0 <_Z41__static_initialization_and_destruction_0ii>:
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d10a      	bne.n	800b516 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b506:	4293      	cmp	r3, r2
 800b508:	d105      	bne.n	800b516 <_Z41__static_initialization_and_destruction_0ii+0x26>
__attribute__((section(".DmaSection"))) volatile txData_t txData;
 800b50a:	4805      	ldr	r0, [pc, #20]	@ (800b520 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800b50c:	f7fc fd10 	bl	8007f30 <_ZN8txData_tC1Ev>
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;
 800b510:	4804      	ldr	r0, [pc, #16]	@ (800b524 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800b512:	f7f5 fb8f 	bl	8000c34 <_ZN8rxData_tC1Ev>
}
 800b516:	bf00      	nop
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	30000080 	.word	0x30000080
 800b524:	300000c0 	.word	0x300000c0

0800b528 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	4a05      	ldr	r2, [pc, #20]	@ (800b548 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	601a      	str	r2, [r3, #0]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4618      	mov	r0, r3
 800b53a:	f7fe f8a3 	bl	8009684 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	4618      	mov	r0, r3
 800b542:	3708      	adds	r7, #8
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	0801e974 	.word	0x0801e974

0800b54c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f7ff ffe7 	bl	800b528 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b55a:	212c      	movs	r1, #44	@ 0x2c
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f011 f98e 	bl	801c87e <_ZdlPvj>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	4618      	mov	r0, r3
 800b566:	3708      	adds	r7, #8
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800b56c:	b590      	push	{r4, r7, lr}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	330c      	adds	r3, #12
 800b578:	4618      	mov	r0, r3
 800b57a:	f000 f856 	bl	800b62a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800b57e:	4604      	mov	r4, r0
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f7ff faa6 	bl	800aad2 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800b586:	4603      	mov	r3, r0
 800b588:	4619      	mov	r1, r3
 800b58a:	4620      	mov	r0, r4
 800b58c:	f000 f859 	bl	800b642 <_ZNSt16allocator_traitsISaIvEE7destroyI12CommsHandlerEEvRS0_PT_>
      }
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	bd90      	pop	{r4, r7, pc}

0800b598 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800b598:	b580      	push	{r7, lr}
 800b59a:	b086      	sub	sp, #24
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	330c      	adds	r3, #12
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f000 f840 	bl	800b62a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	f107 0314 	add.w	r3, r7, #20
 800b5b0:	4611      	mov	r1, r2
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7ff fa0c 	bl	800a9d0 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800b5b8:	f107 0114 	add.w	r1, r7, #20
 800b5bc:	f107 030c 	add.w	r3, r7, #12
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7ff fc25 	bl	800ae12 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f7ff ffad 	bl	800b528 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800b5ce:	f107 030c 	add.w	r3, r7, #12
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7ff fa28 	bl	800aa28 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800b5d8:	f107 0314 	add.w	r3, r7, #20
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7ff fa04 	bl	800a9ea <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800b5e2:	3718      	adds	r7, #24
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f7ff fa6d 	bl	800aad2 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800b5f8:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800b5fa:	f7fc fc8f 	bl	8007f1c <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 800b5fe:	4602      	mov	r2, r0
	    ||
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	4293      	cmp	r3, r2
 800b604:	d005      	beq.n	800b612 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 800b606:	6838      	ldr	r0, [r7, #0]
 800b608:	f011 f96c 	bl	801c8e4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 800b60c:	4603      	mov	r3, r0
	    ||
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d001      	beq.n	800b616 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 800b612:	2301      	movs	r3, #1
 800b614:	e000      	b.n	800b618 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 800b616:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d001      	beq.n	800b620 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	e000      	b.n	800b622 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 800b620:	2300      	movs	r3, #0
      }
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 800b62a:	b580      	push	{r7, lr}
 800b62c:	b082      	sub	sp, #8
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 f811 	bl	800b65a <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 800b638:	4603      	mov	r3, r0
 800b63a:	4618      	mov	r0, r3
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <_ZNSt16allocator_traitsISaIvEE7destroyI12CommsHandlerEEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 800b642:	b580      	push	{r7, lr}
 800b644:	b082      	sub	sp, #8
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
 800b64a:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 800b64c:	6838      	ldr	r0, [r7, #0]
 800b64e:	f000 f80f 	bl	800b670 <_ZSt8_DestroyI12CommsHandlerEvPT_>
 800b652:	bf00      	nop
 800b654:	3708      	adds	r7, #8
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800b65a:	b480      	push	{r7}
 800b65c:	b083      	sub	sp, #12
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4618      	mov	r0, r3
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <_ZSt8_DestroyI12CommsHandlerEvPT_>:
    _Destroy(_Tp* __pointer)
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	4798      	blx	r3
    }
 800b682:	bf00      	nop
 800b684:	3708      	adds	r7, #8
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 800b68a:	b580      	push	{r7, lr}
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800b692:	2001      	movs	r0, #1
 800b694:	f7ff ff2c 	bl	800b4f0 <_Z41__static_initialization_and_destruction_0ii>
 800b698:	bd80      	pop	{r7, pc}
	...

0800b69c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b6a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b6cc <HAL_MspInit+0x30>)
 800b6a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b6a8:	4a08      	ldr	r2, [pc, #32]	@ (800b6cc <HAL_MspInit+0x30>)
 800b6aa:	f043 0302 	orr.w	r3, r3, #2
 800b6ae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b6b2:	4b06      	ldr	r3, [pc, #24]	@ (800b6cc <HAL_MspInit+0x30>)
 800b6b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b6b8:	f003 0302 	and.w	r3, r3, #2
 800b6bc:	607b      	str	r3, [r7, #4]
 800b6be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b6c0:	bf00      	nop
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr
 800b6cc:	58024400 	.word	0x58024400

0800b6d0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b0bc      	sub	sp, #240	@ 0xf0
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800b6dc:	2200      	movs	r2, #0
 800b6de:	601a      	str	r2, [r3, #0]
 800b6e0:	605a      	str	r2, [r3, #4]
 800b6e2:	609a      	str	r2, [r3, #8]
 800b6e4:	60da      	str	r2, [r3, #12]
 800b6e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b6e8:	f107 0318 	add.w	r3, r7, #24
 800b6ec:	22c0      	movs	r2, #192	@ 0xc0
 800b6ee:	2100      	movs	r1, #0
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f011 fecd 	bl	801d490 <memset>
  if(hsd->Instance==SDMMC1)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a3c      	ldr	r2, [pc, #240]	@ (800b7ec <HAL_SD_MspInit+0x11c>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d171      	bne.n	800b7e4 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800b700:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800b704:	f04f 0300 	mov.w	r3, #0
 800b708:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800b70c:	2300      	movs	r3, #0
 800b70e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b710:	f107 0318 	add.w	r3, r7, #24
 800b714:	4618      	mov	r0, r3
 800b716:	f008 fab5 	bl	8013c84 <HAL_RCCEx_PeriphCLKConfig>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d001      	beq.n	800b724 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800b720:	f7fc fba4 	bl	8007e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b724:	4b32      	ldr	r3, [pc, #200]	@ (800b7f0 <HAL_SD_MspInit+0x120>)
 800b726:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b72a:	4a31      	ldr	r2, [pc, #196]	@ (800b7f0 <HAL_SD_MspInit+0x120>)
 800b72c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b730:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800b734:	4b2e      	ldr	r3, [pc, #184]	@ (800b7f0 <HAL_SD_MspInit+0x120>)
 800b736:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b73a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b73e:	617b      	str	r3, [r7, #20]
 800b740:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b742:	4b2b      	ldr	r3, [pc, #172]	@ (800b7f0 <HAL_SD_MspInit+0x120>)
 800b744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b748:	4a29      	ldr	r2, [pc, #164]	@ (800b7f0 <HAL_SD_MspInit+0x120>)
 800b74a:	f043 0304 	orr.w	r3, r3, #4
 800b74e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b752:	4b27      	ldr	r3, [pc, #156]	@ (800b7f0 <HAL_SD_MspInit+0x120>)
 800b754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b758:	f003 0304 	and.w	r3, r3, #4
 800b75c:	613b      	str	r3, [r7, #16]
 800b75e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b760:	4b23      	ldr	r3, [pc, #140]	@ (800b7f0 <HAL_SD_MspInit+0x120>)
 800b762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b766:	4a22      	ldr	r2, [pc, #136]	@ (800b7f0 <HAL_SD_MspInit+0x120>)
 800b768:	f043 0308 	orr.w	r3, r3, #8
 800b76c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b770:	4b1f      	ldr	r3, [pc, #124]	@ (800b7f0 <HAL_SD_MspInit+0x120>)
 800b772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b776:	f003 0308 	and.w	r3, r3, #8
 800b77a:	60fb      	str	r3, [r7, #12]
 800b77c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800b77e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800b782:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b786:	2302      	movs	r3, #2
 800b788:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b78c:	2300      	movs	r3, #0
 800b78e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b792:	2303      	movs	r3, #3
 800b794:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800b798:	230c      	movs	r3, #12
 800b79a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b79e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	4813      	ldr	r0, [pc, #76]	@ (800b7f4 <HAL_SD_MspInit+0x124>)
 800b7a6:	f007 f883 	bl	80128b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b7aa:	2304      	movs	r3, #4
 800b7ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7b0:	2302      	movs	r3, #2
 800b7b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7bc:	2303      	movs	r3, #3
 800b7be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800b7c2:	230c      	movs	r3, #12
 800b7c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b7c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	480a      	ldr	r0, [pc, #40]	@ (800b7f8 <HAL_SD_MspInit+0x128>)
 800b7d0:	f007 f86e 	bl	80128b0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	2031      	movs	r0, #49	@ 0x31
 800b7da:	f004 fc78 	bl	80100ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800b7de:	2031      	movs	r0, #49	@ 0x31
 800b7e0:	f004 fc8f 	bl	8010102 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800b7e4:	bf00      	nop
 800b7e6:	37f0      	adds	r7, #240	@ 0xf0
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	52007000 	.word	0x52007000
 800b7f0:	58024400 	.word	0x58024400
 800b7f4:	58020800 	.word	0x58020800
 800b7f8:	58020c00 	.word	0x58020c00

0800b7fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b0ba      	sub	sp, #232	@ 0xe8
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b804:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800b808:	2200      	movs	r2, #0
 800b80a:	601a      	str	r2, [r3, #0]
 800b80c:	605a      	str	r2, [r3, #4]
 800b80e:	609a      	str	r2, [r3, #8]
 800b810:	60da      	str	r2, [r3, #12]
 800b812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b814:	f107 0310 	add.w	r3, r7, #16
 800b818:	22c0      	movs	r2, #192	@ 0xc0
 800b81a:	2100      	movs	r1, #0
 800b81c:	4618      	mov	r0, r3
 800b81e:	f011 fe37 	bl	801d490 <memset>
  if(huart->Instance==USART1)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a27      	ldr	r2, [pc, #156]	@ (800b8c4 <HAL_UART_MspInit+0xc8>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d146      	bne.n	800b8ba <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800b82c:	f04f 0201 	mov.w	r2, #1
 800b830:	f04f 0300 	mov.w	r3, #0
 800b834:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800b838:	2300      	movs	r3, #0
 800b83a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b83e:	f107 0310 	add.w	r3, r7, #16
 800b842:	4618      	mov	r0, r3
 800b844:	f008 fa1e 	bl	8013c84 <HAL_RCCEx_PeriphCLKConfig>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d001      	beq.n	800b852 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800b84e:	f7fc fb0d 	bl	8007e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b852:	4b1d      	ldr	r3, [pc, #116]	@ (800b8c8 <HAL_UART_MspInit+0xcc>)
 800b854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b858:	4a1b      	ldr	r2, [pc, #108]	@ (800b8c8 <HAL_UART_MspInit+0xcc>)
 800b85a:	f043 0310 	orr.w	r3, r3, #16
 800b85e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b862:	4b19      	ldr	r3, [pc, #100]	@ (800b8c8 <HAL_UART_MspInit+0xcc>)
 800b864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b868:	f003 0310 	and.w	r3, r3, #16
 800b86c:	60fb      	str	r3, [r7, #12]
 800b86e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b870:	4b15      	ldr	r3, [pc, #84]	@ (800b8c8 <HAL_UART_MspInit+0xcc>)
 800b872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b876:	4a14      	ldr	r2, [pc, #80]	@ (800b8c8 <HAL_UART_MspInit+0xcc>)
 800b878:	f043 0301 	orr.w	r3, r3, #1
 800b87c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b880:	4b11      	ldr	r3, [pc, #68]	@ (800b8c8 <HAL_UART_MspInit+0xcc>)
 800b882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b886:	f003 0301 	and.w	r3, r3, #1
 800b88a:	60bb      	str	r3, [r7, #8]
 800b88c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b88e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800b892:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b896:	2302      	movs	r3, #2
 800b898:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b89c:	2300      	movs	r3, #0
 800b89e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b8a8:	2307      	movs	r3, #7
 800b8aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	4805      	ldr	r0, [pc, #20]	@ (800b8cc <HAL_UART_MspInit+0xd0>)
 800b8b6:	f006 fffb 	bl	80128b0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800b8ba:	bf00      	nop
 800b8bc:	37e8      	adds	r7, #232	@ 0xe8
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	40011000 	.word	0x40011000
 800b8c8:	58024400 	.word	0x58024400
 800b8cc:	58020000 	.word	0x58020000

0800b8d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b8d4:	bf00      	nop
 800b8d6:	e7fd      	b.n	800b8d4 <NMI_Handler+0x4>

0800b8d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b8dc:	bf00      	nop
 800b8de:	e7fd      	b.n	800b8dc <HardFault_Handler+0x4>

0800b8e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b8e4:	bf00      	nop
 800b8e6:	e7fd      	b.n	800b8e4 <MemManage_Handler+0x4>

0800b8e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b8ec:	bf00      	nop
 800b8ee:	e7fd      	b.n	800b8ec <BusFault_Handler+0x4>

0800b8f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b8f4:	bf00      	nop
 800b8f6:	e7fd      	b.n	800b8f4 <UsageFault_Handler+0x4>

0800b8f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b8fc:	bf00      	nop
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr

0800b906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b906:	b480      	push	{r7}
 800b908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b90a:	bf00      	nop
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b914:	b480      	push	{r7}
 800b916:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b918:	bf00      	nop
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr

0800b922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b926:	f004 fa91 	bl	800fe4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b92a:	bf00      	nop
 800b92c:	bd80      	pop	{r7, pc}
	...

0800b930 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800b934:	4802      	ldr	r0, [pc, #8]	@ (800b940 <SDMMC1_IRQHandler+0x10>)
 800b936:	f00b f913 	bl	8016b60 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800b93a:	bf00      	nop
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	240002f8 	.word	0x240002f8

0800b944 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b944:	b480      	push	{r7}
 800b946:	af00      	add	r7, sp, #0
	return 1;
 800b948:	2301      	movs	r3, #1
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <_kill>:

int _kill(int pid, int sig)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b95e:	f011 fe39 	bl	801d5d4 <__errno>
 800b962:	4603      	mov	r3, r0
 800b964:	2216      	movs	r2, #22
 800b966:	601a      	str	r2, [r3, #0]
	return -1;
 800b968:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3708      	adds	r7, #8
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <_exit>:

void _exit (int status)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b97c:	f04f 31ff 	mov.w	r1, #4294967295
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f7ff ffe7 	bl	800b954 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b986:	bf00      	nop
 800b988:	e7fd      	b.n	800b986 <_exit+0x12>

0800b98a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b086      	sub	sp, #24
 800b98e:	af00      	add	r7, sp, #0
 800b990:	60f8      	str	r0, [r7, #12]
 800b992:	60b9      	str	r1, [r7, #8]
 800b994:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b996:	2300      	movs	r3, #0
 800b998:	617b      	str	r3, [r7, #20]
 800b99a:	e00a      	b.n	800b9b2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b99c:	f3af 8000 	nop.w
 800b9a0:	4601      	mov	r1, r0
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	1c5a      	adds	r2, r3, #1
 800b9a6:	60ba      	str	r2, [r7, #8]
 800b9a8:	b2ca      	uxtb	r2, r1
 800b9aa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	617b      	str	r3, [r7, #20]
 800b9b2:	697a      	ldr	r2, [r7, #20]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	dbf0      	blt.n	800b99c <_read+0x12>
	}

return len;
 800b9ba:	687b      	ldr	r3, [r7, #4]
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3718      	adds	r7, #24
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b086      	sub	sp, #24
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	617b      	str	r3, [r7, #20]
 800b9d4:	e009      	b.n	800b9ea <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	1c5a      	adds	r2, r3, #1
 800b9da:	60ba      	str	r2, [r7, #8]
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7fb ff90 	bl	8007904 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	617b      	str	r3, [r7, #20]
 800b9ea:	697a      	ldr	r2, [r7, #20]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	dbf1      	blt.n	800b9d6 <_write+0x12>
	}
	return len;
 800b9f2:	687b      	ldr	r3, [r7, #4]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3718      	adds	r7, #24
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <_close>:

int _close(int file)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
	return -1;
 800ba04:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ba24:	605a      	str	r2, [r3, #4]
	return 0;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	370c      	adds	r7, #12
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <_isatty>:

int _isatty(int file)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b083      	sub	sp, #12
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
	return 1;
 800ba3c:	2301      	movs	r3, #1
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	370c      	adds	r7, #12
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr

0800ba4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ba4a:	b480      	push	{r7}
 800ba4c:	b085      	sub	sp, #20
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	60f8      	str	r0, [r7, #12]
 800ba52:	60b9      	str	r1, [r7, #8]
 800ba54:	607a      	str	r2, [r7, #4]
	return 0;
 800ba56:	2300      	movs	r3, #0
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3714      	adds	r7, #20
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b086      	sub	sp, #24
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ba6c:	4a14      	ldr	r2, [pc, #80]	@ (800bac0 <_sbrk+0x5c>)
 800ba6e:	4b15      	ldr	r3, [pc, #84]	@ (800bac4 <_sbrk+0x60>)
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ba78:	4b13      	ldr	r3, [pc, #76]	@ (800bac8 <_sbrk+0x64>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d102      	bne.n	800ba86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ba80:	4b11      	ldr	r3, [pc, #68]	@ (800bac8 <_sbrk+0x64>)
 800ba82:	4a12      	ldr	r2, [pc, #72]	@ (800bacc <_sbrk+0x68>)
 800ba84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ba86:	4b10      	ldr	r3, [pc, #64]	@ (800bac8 <_sbrk+0x64>)
 800ba88:	681a      	ldr	r2, [r3, #0]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	693a      	ldr	r2, [r7, #16]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d207      	bcs.n	800baa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ba94:	f011 fd9e 	bl	801d5d4 <__errno>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	220c      	movs	r2, #12
 800ba9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ba9e:	f04f 33ff 	mov.w	r3, #4294967295
 800baa2:	e009      	b.n	800bab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800baa4:	4b08      	ldr	r3, [pc, #32]	@ (800bac8 <_sbrk+0x64>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800baaa:	4b07      	ldr	r3, [pc, #28]	@ (800bac8 <_sbrk+0x64>)
 800baac:	681a      	ldr	r2, [r3, #0]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	4413      	add	r3, r2
 800bab2:	4a05      	ldr	r2, [pc, #20]	@ (800bac8 <_sbrk+0x64>)
 800bab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800bab6:	68fb      	ldr	r3, [r7, #12]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3718      	adds	r7, #24
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	24080000 	.word	0x24080000
 800bac4:	00000400 	.word	0x00000400
 800bac8:	24000450 	.word	0x24000450
 800bacc:	24000c58 	.word	0x24000c58

0800bad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800bad0:	b480      	push	{r7}
 800bad2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800bad4:	4b37      	ldr	r3, [pc, #220]	@ (800bbb4 <SystemInit+0xe4>)
 800bad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bada:	4a36      	ldr	r2, [pc, #216]	@ (800bbb4 <SystemInit+0xe4>)
 800badc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bae0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800bae4:	4b34      	ldr	r3, [pc, #208]	@ (800bbb8 <SystemInit+0xe8>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f003 030f 	and.w	r3, r3, #15
 800baec:	2b06      	cmp	r3, #6
 800baee:	d807      	bhi.n	800bb00 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800baf0:	4b31      	ldr	r3, [pc, #196]	@ (800bbb8 <SystemInit+0xe8>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f023 030f 	bic.w	r3, r3, #15
 800baf8:	4a2f      	ldr	r2, [pc, #188]	@ (800bbb8 <SystemInit+0xe8>)
 800bafa:	f043 0307 	orr.w	r3, r3, #7
 800bafe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800bb00:	4b2e      	ldr	r3, [pc, #184]	@ (800bbbc <SystemInit+0xec>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a2d      	ldr	r2, [pc, #180]	@ (800bbbc <SystemInit+0xec>)
 800bb06:	f043 0301 	orr.w	r3, r3, #1
 800bb0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800bb0c:	4b2b      	ldr	r3, [pc, #172]	@ (800bbbc <SystemInit+0xec>)
 800bb0e:	2200      	movs	r2, #0
 800bb10:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800bb12:	4b2a      	ldr	r3, [pc, #168]	@ (800bbbc <SystemInit+0xec>)
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	4929      	ldr	r1, [pc, #164]	@ (800bbbc <SystemInit+0xec>)
 800bb18:	4b29      	ldr	r3, [pc, #164]	@ (800bbc0 <SystemInit+0xf0>)
 800bb1a:	4013      	ands	r3, r2
 800bb1c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800bb1e:	4b26      	ldr	r3, [pc, #152]	@ (800bbb8 <SystemInit+0xe8>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f003 0308 	and.w	r3, r3, #8
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d007      	beq.n	800bb3a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800bb2a:	4b23      	ldr	r3, [pc, #140]	@ (800bbb8 <SystemInit+0xe8>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f023 030f 	bic.w	r3, r3, #15
 800bb32:	4a21      	ldr	r2, [pc, #132]	@ (800bbb8 <SystemInit+0xe8>)
 800bb34:	f043 0307 	orr.w	r3, r3, #7
 800bb38:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800bb3a:	4b20      	ldr	r3, [pc, #128]	@ (800bbbc <SystemInit+0xec>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800bb40:	4b1e      	ldr	r3, [pc, #120]	@ (800bbbc <SystemInit+0xec>)
 800bb42:	2200      	movs	r2, #0
 800bb44:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800bb46:	4b1d      	ldr	r3, [pc, #116]	@ (800bbbc <SystemInit+0xec>)
 800bb48:	2200      	movs	r2, #0
 800bb4a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800bb4c:	4b1b      	ldr	r3, [pc, #108]	@ (800bbbc <SystemInit+0xec>)
 800bb4e:	4a1d      	ldr	r2, [pc, #116]	@ (800bbc4 <SystemInit+0xf4>)
 800bb50:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800bb52:	4b1a      	ldr	r3, [pc, #104]	@ (800bbbc <SystemInit+0xec>)
 800bb54:	4a1c      	ldr	r2, [pc, #112]	@ (800bbc8 <SystemInit+0xf8>)
 800bb56:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800bb58:	4b18      	ldr	r3, [pc, #96]	@ (800bbbc <SystemInit+0xec>)
 800bb5a:	4a1c      	ldr	r2, [pc, #112]	@ (800bbcc <SystemInit+0xfc>)
 800bb5c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800bb5e:	4b17      	ldr	r3, [pc, #92]	@ (800bbbc <SystemInit+0xec>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800bb64:	4b15      	ldr	r3, [pc, #84]	@ (800bbbc <SystemInit+0xec>)
 800bb66:	4a19      	ldr	r2, [pc, #100]	@ (800bbcc <SystemInit+0xfc>)
 800bb68:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800bb6a:	4b14      	ldr	r3, [pc, #80]	@ (800bbbc <SystemInit+0xec>)
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800bb70:	4b12      	ldr	r3, [pc, #72]	@ (800bbbc <SystemInit+0xec>)
 800bb72:	4a16      	ldr	r2, [pc, #88]	@ (800bbcc <SystemInit+0xfc>)
 800bb74:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800bb76:	4b11      	ldr	r3, [pc, #68]	@ (800bbbc <SystemInit+0xec>)
 800bb78:	2200      	movs	r2, #0
 800bb7a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800bb7c:	4b0f      	ldr	r3, [pc, #60]	@ (800bbbc <SystemInit+0xec>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a0e      	ldr	r2, [pc, #56]	@ (800bbbc <SystemInit+0xec>)
 800bb82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bb86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800bb88:	4b0c      	ldr	r3, [pc, #48]	@ (800bbbc <SystemInit+0xec>)
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800bb8e:	4b10      	ldr	r3, [pc, #64]	@ (800bbd0 <SystemInit+0x100>)
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	4b10      	ldr	r3, [pc, #64]	@ (800bbd4 <SystemInit+0x104>)
 800bb94:	4013      	ands	r3, r2
 800bb96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb9a:	d202      	bcs.n	800bba2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800bb9c:	4b0e      	ldr	r3, [pc, #56]	@ (800bbd8 <SystemInit+0x108>)
 800bb9e:	2201      	movs	r2, #1
 800bba0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800bba2:	4b0e      	ldr	r3, [pc, #56]	@ (800bbdc <SystemInit+0x10c>)
 800bba4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800bba8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800bbaa:	bf00      	nop
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr
 800bbb4:	e000ed00 	.word	0xe000ed00
 800bbb8:	52002000 	.word	0x52002000
 800bbbc:	58024400 	.word	0x58024400
 800bbc0:	eaf6ed7f 	.word	0xeaf6ed7f
 800bbc4:	02020200 	.word	0x02020200
 800bbc8:	01ff0000 	.word	0x01ff0000
 800bbcc:	01010280 	.word	0x01010280
 800bbd0:	5c001000 	.word	0x5c001000
 800bbd4:	ffff0000 	.word	0xffff0000
 800bbd8:	51008108 	.word	0x51008108
 800bbdc:	52004000 	.word	0x52004000

0800bbe0 <_ZN3Pin3setEb>:
        inline bool get()
        {
            return HAL_GPIO_ReadPin(this->GPIOx, this->pin);
        }

        inline void set(bool value)
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	460b      	mov	r3, r1
 800bbea:	70fb      	strb	r3, [r7, #3]
        {
            if (value)
 800bbec:	78fb      	ldrb	r3, [r7, #3]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d008      	beq.n	800bc04 <_ZN3Pin3setEb+0x24>
            {
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_SET);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	8bdb      	ldrh	r3, [r3, #30]
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	f007 f807 	bl	8012c10 <HAL_GPIO_WritePin>
            }
            else
            {
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
            }
        }
 800bc02:	e007      	b.n	800bc14 <_ZN3Pin3setEb+0x34>
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	8bdb      	ldrh	r3, [r3, #30]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	4619      	mov	r1, r3
 800bc10:	f006 fffe 	bl	8012c10 <HAL_GPIO_WritePin>
        }
 800bc14:	bf00      	nop
 800bc16:	3708      	adds	r7, #8
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <_Z11createBlinkRKN11ArduinoJson8V730HB2210JsonObjectE>:

/***********************************************************************
                MODULE CONFIGURATION AND CREATION FROM JSON     
************************************************************************/

shared_ptr<Module> createBlink(const JsonObject& config) {
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b098      	sub	sp, #96	@ 0x60
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
    const char* pin = config["Pin"];
 800bc26:	f107 0314 	add.w	r3, r7, #20
 800bc2a:	4a24      	ldr	r2, [pc, #144]	@ (800bcbc <_Z11createBlinkRKN11ArduinoJson8V730HB2210JsonObjectE+0xa0>)
 800bc2c:	6839      	ldr	r1, [r7, #0]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f000 f8b8 	bl	800bda4 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800bc34:	f107 0314 	add.w	r3, r7, #20
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7f9 f967 	bl	8004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	613b      	str	r3, [r7, #16]
    int frequency = config["Frequency"];
 800bc42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bc46:	4a1e      	ldr	r2, [pc, #120]	@ (800bcc0 <_Z11createBlinkRKN11ArduinoJson8V730HB2210JsonObjectE+0xa4>)
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7f9 f96a 	bl	8004f24 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800bc50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bc54:	4618      	mov	r0, r3
 800bc56:	f000 f8ca 	bl	800bdee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	60fb      	str	r3, [r7, #12]
    uint32_t threadFreq = config["ThreadFreq"];
 800bc5e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800bc62:	4a18      	ldr	r2, [pc, #96]	@ (800bcc4 <_Z11createBlinkRKN11ArduinoJson8V730HB2210JsonObjectE+0xa8>)
 800bc64:	6839      	ldr	r1, [r7, #0]
 800bc66:	4618      	mov	r0, r3
 800bc68:	f000 f8cd 	bl	800be06 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800bc6c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7f9 f97c 	bl	8004f6e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 800bc76:	4603      	mov	r3, r0
 800bc78:	60bb      	str	r3, [r7, #8]
    
    printf("Creating Blink module on pin %s with frequency %d Hz\n", pin, frequency);
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	4619      	mov	r1, r3
 800bc80:	4811      	ldr	r0, [pc, #68]	@ (800bcc8 <_Z11createBlinkRKN11ArduinoJson8V730HB2210JsonObjectE+0xac>)
 800bc82:	f011 fa9b 	bl	801d1bc <iprintf>
	return std::make_unique<Blink>(pin, threadFreq, frequency);
 800bc86:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800bc8a:	f107 030c 	add.w	r3, r7, #12
 800bc8e:	f107 0208 	add.w	r2, r7, #8
 800bc92:	f107 0110 	add.w	r1, r7, #16
 800bc96:	f000 f8db 	bl	800be50 <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800bc9a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800bc9e:	4619      	mov	r1, r3
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 f938 	bl	800bf16 <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 800bca6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f000 f911 	bl	800bed2 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>
 800bcb0:	bf00      	nop
}
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	3760      	adds	r7, #96	@ 0x60
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	0801e5ac 	.word	0x0801e5ac
 800bcc0:	0801e5b0 	.word	0x0801e5b0
 800bcc4:	0801e5bc 	.word	0x0801e5bc
 800bcc8:	0801e5c8 	.word	0x0801e5c8

0800bccc <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>:
 * @brief Constructs a Blink module.
 * 
 * Initializes the blink pin and sets up the toggle period based on the 
 * servo thread frequency and desired blink frequency.
 */
Blink::Blink(std::string _portAndPin, uint32_t _threadFreq, uint32_t _freq) :
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b086      	sub	sp, #24
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
 800bcd8:	603b      	str	r3, [r7, #0]
	bState(false),
    periodCount(_threadFreq / _freq),
    blinkCount(0),
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f001 fead 	bl	800da3c <_ZN6ModuleC1Ev>
 800bce2:	4a15      	ldr	r2, [pc, #84]	@ (800bd38 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm+0x6c>)
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	601a      	str	r2, [r3, #0]
	bState(false),
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2200      	movs	r2, #0
 800bcec:	755a      	strb	r2, [r3, #21]
    periodCount(_threadFreq / _freq),
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	fbb2 f2f3 	udiv	r2, r2, r3
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	619a      	str	r2, [r3, #24]
    blinkCount(0),
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	61da      	str	r2, [r3, #28]
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800bd00:	2301      	movs	r3, #1
 800bd02:	617b      	str	r3, [r7, #20]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	3320      	adds	r3, #32
 800bd08:	f107 0214 	add.w	r2, r7, #20
 800bd0c:	68b9      	ldr	r1, [r7, #8]
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f000 f914 	bl	800bf3c <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
{
	blinkPin->set(bState);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	3320      	adds	r3, #32
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f000 f95f 	bl	800bfdc <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	7d5b      	ldrb	r3, [r3, #21]
 800bd24:	4619      	mov	r1, r3
 800bd26:	4610      	mov	r0, r2
 800bd28:	f7ff ff5a 	bl	800bbe0 <_ZN3Pin3setEb>
}
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3718      	adds	r7, #24
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	0801e9d8 	.word	0x0801e9d8

0800bd3c <_ZN5Blink6updateEv>:

void Blink::update(void)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
	++blinkCount;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	69db      	ldr	r3, [r3, #28]
 800bd48:	1c5a      	adds	r2, r3, #1
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	61da      	str	r2, [r3, #28]
	if (blinkCount >= periodCount / 2)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	69da      	ldr	r2, [r3, #28]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	699b      	ldr	r3, [r3, #24]
 800bd56:	085b      	lsrs	r3, r3, #1
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d315      	bcc.n	800bd88 <_ZN5Blink6updateEv+0x4c>
	{
        bState = !bState;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	7d5b      	ldrb	r3, [r3, #21]
 800bd60:	f083 0301 	eor.w	r3, r3, #1
 800bd64:	b2da      	uxtb	r2, r3
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	755a      	strb	r2, [r3, #21]
        blinkPin->set(bState);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	3320      	adds	r3, #32
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f000 f934 	bl	800bfdc <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800bd74:	4602      	mov	r2, r0
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	7d5b      	ldrb	r3, [r3, #21]
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	f7ff ff2f 	bl	800bbe0 <_ZN3Pin3setEb>
        blinkCount = 0;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2200      	movs	r2, #0
 800bd86:	61da      	str	r2, [r3, #28]
	}
}
 800bd88:	bf00      	nop
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <_ZN5Blink10slowUpdateEv>:

void Blink::slowUpdate(void)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
	return;
 800bd98:	bf00      	nop
}
 800bd9a:	370c      	adds	r7, #12
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b08c      	sub	sp, #48	@ 0x30
 800bda8:	af02      	add	r7, sp, #8
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800bdb0:	68ba      	ldr	r2, [r7, #8]
 800bdb2:	f107 0314 	add.w	r3, r7, #20
 800bdb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bdba:	e883 0003 	stmia.w	r3, {r0, r1}
 800bdbe:	f107 031c 	add.w	r3, r7, #28
 800bdc2:	6879      	ldr	r1, [r7, #4]
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f000 f920 	bl	800c00a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800bdca:	466a      	mov	r2, sp
 800bdcc:	f107 0320 	add.w	r3, r7, #32
 800bdd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bdd4:	e882 0003 	stmia.w	r2, {r0, r1}
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	f107 0214 	add.w	r2, r7, #20
 800bdde:	ca06      	ldmia	r2, {r1, r2}
 800bde0:	68f8      	ldr	r0, [r7, #12]
 800bde2:	f7f9 fa02 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	3728      	adds	r7, #40	@ 0x28
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>:
  operator T() const {
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b082      	sub	sp, #8
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
    return as<T>();
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 f91a 	bl	800c030 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>
 800bdfc:	4603      	mov	r3, r0
  }
 800bdfe:	4618      	mov	r0, r3
 800be00:	3708      	adds	r7, #8
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800be06:	b580      	push	{r7, lr}
 800be08:	b08c      	sub	sp, #48	@ 0x30
 800be0a:	af02      	add	r7, sp, #8
 800be0c:	60f8      	str	r0, [r7, #12]
 800be0e:	60b9      	str	r1, [r7, #8]
 800be10:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800be12:	68ba      	ldr	r2, [r7, #8]
 800be14:	f107 0314 	add.w	r3, r7, #20
 800be18:	e892 0003 	ldmia.w	r2, {r0, r1}
 800be1c:	e883 0003 	stmia.w	r3, {r0, r1}
 800be20:	f107 031c 	add.w	r3, r7, #28
 800be24:	6879      	ldr	r1, [r7, #4]
 800be26:	4618      	mov	r0, r3
 800be28:	f7fe f898 	bl	8009f5c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800be2c:	466a      	mov	r2, sp
 800be2e:	f107 0320 	add.w	r3, r7, #32
 800be32:	e893 0003 	ldmia.w	r3, {r0, r1}
 800be36:	e882 0003 	stmia.w	r2, {r0, r1}
 800be3a:	69fb      	ldr	r3, [r7, #28]
 800be3c:	f107 0214 	add.w	r2, r7, #20
 800be40:	ca06      	ldmia	r2, {r1, r2}
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f7f9 f9d1 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800be48:	68f8      	ldr	r0, [r7, #12]
 800be4a:	3728      	adds	r7, #40	@ 0x28
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800be50:	b5b0      	push	{r4, r5, r7, lr}
 800be52:	b08c      	sub	sp, #48	@ 0x30
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	607a      	str	r2, [r7, #4]
 800be5c:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800be5e:	2024      	movs	r0, #36	@ 0x24
 800be60:	f010 fd1e 	bl	801c8a0 <_Znwj>
 800be64:	4603      	mov	r3, r0
 800be66:	461d      	mov	r5, r3
 800be68:	68b8      	ldr	r0, [r7, #8]
 800be6a:	f000 f903 	bl	800c074 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800be6e:	4603      	mov	r3, r0
 800be70:	681c      	ldr	r4, [r3, #0]
 800be72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800be76:	4618      	mov	r0, r3
 800be78:	f010 fd23 	bl	801c8c2 <_ZNSaIcEC1Ev>
 800be7c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800be80:	f107 0314 	add.w	r3, r7, #20
 800be84:	4621      	mov	r1, r4
 800be86:	4618      	mov	r0, r3
 800be88:	f7f8 ffba 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f7fd ff18 	bl	8009cc2 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800be92:	4603      	mov	r3, r0
 800be94:	681c      	ldr	r4, [r3, #0]
 800be96:	6838      	ldr	r0, [r7, #0]
 800be98:	f000 f8f7 	bl	800c08a <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800be9c:	4603      	mov	r3, r0
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f107 0114 	add.w	r1, r7, #20
 800bea4:	4622      	mov	r2, r4
 800bea6:	4628      	mov	r0, r5
 800bea8:	f7ff ff10 	bl	800bccc <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>
 800beac:	4629      	mov	r1, r5
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	f000 f906 	bl	800c0c0 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800beb4:	f107 0314 	add.w	r3, r7, #20
 800beb8:	4618      	mov	r0, r3
 800beba:	f010 fd9d 	bl	801c9f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800bebe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bec2:	4618      	mov	r0, r3
 800bec4:	f010 fcfe 	bl	801c8c4 <_ZNSaIcED1Ev>
 800bec8:	bf00      	nop
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	3730      	adds	r7, #48	@ 0x30
 800bece:	46bd      	mov	sp, r7
 800bed0:	bdb0      	pop	{r4, r5, r7, pc}

0800bed2 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800bed2:	b590      	push	{r4, r7, lr}
 800bed4:	b085      	sub	sp, #20
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	4618      	mov	r0, r3
 800bede:	f000 f8fe 	bl	800c0de <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800bee2:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d00c      	beq.n	800bf06 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 f903 	bl	800c0f8 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800bef2:	4604      	mov	r4, r0
 800bef4:	68f8      	ldr	r0, [r7, #12]
 800bef6:	f000 f90c 	bl	800c112 <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>
 800befa:	4603      	mov	r3, r0
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4619      	mov	r1, r3
 800bf00:	4620      	mov	r0, r4
 800bf02:	f000 f939 	bl	800c178 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
	__ptr = pointer();
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	601a      	str	r2, [r3, #0]
      }
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3714      	adds	r7, #20
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd90      	pop	{r4, r7, pc}

0800bf16 <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800bf16:	b590      	push	{r4, r7, lr}
 800bf18:	b083      	sub	sp, #12
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
 800bf1e:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800bf20:	687c      	ldr	r4, [r7, #4]
 800bf22:	6838      	ldr	r0, [r7, #0]
 800bf24:	f000 f939 	bl	800c19a <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f000 f93f 	bl	800c1b0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	4618      	mov	r0, r3
 800bf36:	370c      	adds	r7, #12
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd90      	pop	{r4, r7, pc}

0800bf3c <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800bf3c:	b590      	push	{r4, r7, lr}
 800bf3e:	b08b      	sub	sp, #44	@ 0x2c
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800bf48:	2044      	movs	r0, #68	@ 0x44
 800bf4a:	f010 fca9 	bl	801c8a0 <_Znwj>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	461c      	mov	r4, r3
 800bf52:	68b8      	ldr	r0, [r7, #8]
 800bf54:	f000 f964 	bl	800c220 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	f107 0310 	add.w	r3, r7, #16
 800bf5e:	4611      	mov	r1, r2
 800bf60:	4618      	mov	r0, r3
 800bf62:	f010 fe48 	bl	801cbf6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 f844 	bl	800bff4 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	f107 0310 	add.w	r3, r7, #16
 800bf74:	4619      	mov	r1, r3
 800bf76:	4620      	mov	r0, r4
 800bf78:	f7f6 f935 	bl	80021e6 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f000 f969 	bl	800c256 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800bf84:	f107 0310 	add.w	r3, r7, #16
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f010 fd35 	bl	801c9f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800bf8e:	bf00      	nop
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	372c      	adds	r7, #44	@ 0x2c
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd90      	pop	{r4, r7, pc}

0800bf98 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800bf98:	b590      	push	{r4, r7, lr}
 800bf9a:	b085      	sub	sp, #20
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f000 f966 	bl	800c274 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800bfa8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d00c      	beq.n	800bfcc <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 f96b 	bl	800c28e <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>
 800bfb8:	4604      	mov	r4, r0
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f000 f974 	bl	800c2a8 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f000 f986 	bl	800c2d8 <_ZNKSt14default_deleteI3PinEclEPS0_>
	__ptr = pointer();
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	601a      	str	r2, [r3, #0]
      }
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3714      	adds	r7, #20
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd90      	pop	{r4, r7, pc}

0800bfdc <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
	return get();
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 f98a 	bl	800c2fe <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>
 800bfea:	4603      	mov	r3, r0
      }
 800bfec:	4618      	mov	r0, r3
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bff4:	b480      	push	{r7}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	4618      	mov	r0, r3
 800c000:	370c      	adds	r7, #12
 800c002:	46bd      	mov	sp, r7
 800c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c008:	4770      	bx	lr

0800c00a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b082      	sub	sp, #8
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
 800c012:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800c014:	6838      	ldr	r0, [r7, #0]
 800c016:	f000 f97f 	bl	800c318 <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800c01a:	4602      	mov	r2, r0
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4611      	mov	r1, r2
 800c020:	4618      	mov	r0, r3
 800c022:	f000 f984 	bl	800c32e <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>
 800c026:	bf00      	nop
}
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	3708      	adds	r7, #8
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>:
  return add<JsonVariant>();
}

template <typename TDerived>
template <typename T>
inline T VariantRefBase<TDerived>::as() const {
 800c030:	b590      	push	{r4, r7, lr}
 800c032:	b087      	sub	sp, #28
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	617b      	str	r3, [r7, #20]
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800c040:	6938      	ldr	r0, [r7, #16]
 800c042:	f7f9 ffe4 	bl	800600e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 800c046:	4604      	mov	r4, r0
 800c048:	6938      	ldr	r0, [r7, #16]
 800c04a:	f7f9 fe6e 	bl	8005d2a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 800c04e:	4602      	mov	r2, r0
 800c050:	f107 0308 	add.w	r3, r7, #8
 800c054:	4621      	mov	r1, r4
 800c056:	4618      	mov	r0, r3
 800c058:	f7f6 ff09 	bl	8002e6e <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800c05c:	bf00      	nop
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::fromJson)>::arg1_type;
  return Converter<T>::fromJson(getVariant<variant_type>());
 800c05e:	f107 0308 	add.w	r3, r7, #8
 800c062:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c066:	f000 f971 	bl	800c34c <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>
 800c06a:	4603      	mov	r3, r0
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	371c      	adds	r7, #28
 800c070:	46bd      	mov	sp, r7
 800c072:	bd90      	pop	{r4, r7, pc}

0800c074 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4618      	mov	r0, r3
 800c080:	370c      	adds	r7, #12
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr

0800c08a <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c08a:	b480      	push	{r7}
 800c08c:	b083      	sub	sp, #12
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	4618      	mov	r0, r3
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	683a      	ldr	r2, [r7, #0]
 800c0ae:	4611      	mov	r1, r2
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f000 f969 	bl	800c388 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3708      	adds	r7, #8
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6839      	ldr	r1, [r7, #0]
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7ff ffe6 	bl	800c0a0 <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3708      	adds	r7, #8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b082      	sub	sp, #8
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f000 f961 	bl	800c3b0 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	4618      	mov	r0, r3
 800c104:	f000 f961 	bl	800c3ca <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>
 800c108:	4603      	mov	r3, r0
 800c10a:	4618      	mov	r0, r3
 800c10c:	3708      	adds	r7, #8
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c112:	b480      	push	{r7}
 800c114:	b083      	sub	sp, #12
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	4618      	mov	r0, r3
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <_ZN5BlinkD1Ev>:
 * @class Blink
 * @brief A module for toggling a pin at a specific frequency.
 * 
 * The Blink class controls a GPIO pin, toggling its state at a specified frequency.
 */
class Blink : public Module
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	4a08      	ldr	r2, [pc, #32]	@ (800c154 <_ZN5BlinkD1Ev+0x2c>)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	601a      	str	r2, [r3, #0]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	3320      	adds	r3, #32
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7ff ff2c 	bl	800bf98 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	4618      	mov	r0, r3
 800c144:	f001 fc96 	bl	800da74 <_ZN6ModuleD1Ev>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	4618      	mov	r0, r3
 800c14c:	3708      	adds	r7, #8
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	0801e9d8 	.word	0x0801e9d8

0800c158 <_ZN5BlinkD0Ev>:
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f7ff ffe1 	bl	800c128 <_ZN5BlinkD1Ev>
 800c166:	2124      	movs	r1, #36	@ 0x24
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f010 fb88 	bl	801c87e <_ZdlPvj>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4618      	mov	r0, r3
 800c172:	3708      	adds	r7, #8
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <_ZNKSt14default_deleteI5BlinkEclEPS0_>:
      operator()(_Tp* __ptr) const
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d004      	beq.n	800c192 <_ZNKSt14default_deleteI5BlinkEclEPS0_+0x1a>
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	3204      	adds	r2, #4
 800c18c:	6812      	ldr	r2, [r2, #0]
 800c18e:	4618      	mov	r0, r3
 800c190:	4790      	blx	r2
      }
 800c192:	bf00      	nop
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800c19a:	b480      	push	{r7}
 800c19c:	b083      	sub	sp, #12
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	370c      	adds	r7, #12
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 800c1ba:	6838      	ldr	r0, [r7, #0]
 800c1bc:	f000 f912 	bl	800c3e4 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	601a      	str	r2, [r3, #0]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	3304      	adds	r3, #4
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7fd ff66 	bl	800a09c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 800c1d0:	6838      	ldr	r0, [r7, #0]
 800c1d2:	f000 f907 	bl	800c3e4 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 f910 	bl	800c3fe <_ZSt12__to_addressI5BlinkEPT_S2_>
 800c1de:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 800c1e0:	6838      	ldr	r0, [r7, #0]
 800c1e2:	f7ff ffda 	bl	800c19a <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	f107 0308 	add.w	r3, r7, #8
 800c1ec:	4611      	mov	r1, r2
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f000 f910 	bl	800c414 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	3304      	adds	r3, #4
 800c1f8:	f107 0208 	add.w	r2, r7, #8
 800c1fc:	4611      	mov	r1, r2
 800c1fe:	4618      	mov	r0, r3
 800c200:	f000 f94a 	bl	800c498 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800c204:	f107 0308 	add.w	r3, r7, #8
 800c208:	4618      	mov	r0, r3
 800c20a:	f7fc ff81 	bl	8009110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 800c20e:	68f9      	ldr	r1, [r7, #12]
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 f965 	bl	800c4e0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4618      	mov	r0, r3
 800c21a:	3710      	adds	r7, #16
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4618      	mov	r0, r3
 800c22c:	370c      	adds	r7, #12
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr

0800c236 <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800c236:	b580      	push	{r7, lr}
 800c238:	b082      	sub	sp, #8
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
 800c23e:	6039      	str	r1, [r7, #0]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	683a      	ldr	r2, [r7, #0]
 800c244:	4611      	mov	r1, r2
 800c246:	4618      	mov	r0, r3
 800c248:	f000 f955 	bl	800c4f6 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4618      	mov	r0, r3
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}

0800c256 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800c256:	b580      	push	{r7, lr}
 800c258:	b082      	sub	sp, #8
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
 800c25e:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6839      	ldr	r1, [r7, #0]
 800c264:	4618      	mov	r0, r3
 800c266:	f7ff ffe6 	bl	800c236 <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4618      	mov	r0, r3
 800c26e:	3708      	adds	r7, #8
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 f94d 	bl	800c51e <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c284:	4603      	mov	r3, r0
 800c286:	4618      	mov	r0, r3
 800c288:	3708      	adds	r7, #8
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800c28e:	b580      	push	{r7, lr}
 800c290:	b082      	sub	sp, #8
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4618      	mov	r0, r3
 800c29a:	f000 f94d 	bl	800c538 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	370c      	adds	r7, #12
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr

0800c2be <_ZN3PinD1Ev>:
class Pin
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b082      	sub	sp, #8
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f010 fb95 	bl	801c9f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <_ZNKSt14default_deleteI3PinEclEPS0_>:
      operator()(_Tp* __ptr) const
 800c2d8:	b590      	push	{r4, r7, lr}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c2e2:	683c      	ldr	r4, [r7, #0]
 800c2e4:	2c00      	cmp	r4, #0
 800c2e6:	d006      	beq.n	800c2f6 <_ZNKSt14default_deleteI3PinEclEPS0_+0x1e>
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	f7ff ffe8 	bl	800c2be <_ZN3PinD1Ev>
 800c2ee:	2144      	movs	r1, #68	@ 0x44
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	f010 fac4 	bl	801c87e <_ZdlPvj>
      }
 800c2f6:	bf00      	nop
 800c2f8:	370c      	adds	r7, #12
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd90      	pop	{r4, r7, pc}

0800c2fe <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b082      	sub	sp, #8
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4618      	mov	r0, r3
 800c30a:	f000 f922 	bl	800c552 <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800c30e:	4603      	mov	r3, r0
 800c310:	4618      	mov	r0, r3
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800c320:	687b      	ldr	r3, [r7, #4]
}
 800c322:	4618      	mov	r0, r3
 800c324:	370c      	adds	r7, #12
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr

0800c32e <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800c32e:	b580      	push	{r7, lr}
 800c330:	b082      	sub	sp, #8
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
 800c336:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800c338:	2301      	movs	r3, #1
 800c33a:	2203      	movs	r2, #3
 800c33c:	6839      	ldr	r1, [r7, #0]
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f7f6 f9ce 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	3708      	adds	r7, #8
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>:
    auto resources = getResourceManager(dst);
    data->clear(resources);
    return data->setInteger(src, resources);
  }

  static T fromJson(JsonVariantConst src) {
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	463b      	mov	r3, r7
 800c354:	e883 0003 	stmia.w	r3, {r0, r1}
    ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED(T);
    auto data = getData(src);
 800c358:	463b      	mov	r3, r7
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7f8 fb06 	bl	800496c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800c360:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 800c362:	463b      	mov	r3, r7
 800c364:	4618      	mov	r0, r3
 800c366:	f7f8 fb0d 	bl	8004984 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 800c36a:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d005      	beq.n	800c37e <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x32>
 800c372:	68b9      	ldr	r1, [r7, #8]
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f000 f8fb 	bl	800c570 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>
 800c37a:	4603      	mov	r3, r0
 800c37c:	e000      	b.n	800c380 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x34>
 800c37e:	2300      	movs	r3, #0
  }
 800c380:	4618      	mov	r0, r3
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c388:	b590      	push	{r4, r7, lr}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	4618      	mov	r0, r3
 800c396:	f000 f97d 	bl	800c694 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800c39a:	683c      	ldr	r4, [r7, #0]
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f7ff fe9e 	bl	800c0de <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	601c      	str	r4, [r3, #0]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd90      	pop	{r4, r7, pc}

0800c3b0 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f000 f977 	bl	800c6ae <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3708      	adds	r7, #8
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800c3ca:	b580      	push	{r7, lr}
 800c3cc:	b082      	sub	sp, #8
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f000 f976 	bl	800c6c6 <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3708      	adds	r7, #8
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f000 f975 	bl	800c6de <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3708      	adds	r7, #8
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <_ZSt12__to_addressI5BlinkEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 800c3fe:	b480      	push	{r7}
 800c400:	b083      	sub	sp, #12
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
      return __ptr;
 800c406:	687b      	ldr	r3, [r7, #4]
    }
 800c408:	4618      	mov	r0, r3
 800c40a:	370c      	adds	r7, #12
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr

0800c414 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 800c414:	b580      	push	{r7, lr}
 800c416:	b086      	sub	sp, #24
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 800c424:	6838      	ldr	r0, [r7, #0]
 800c426:	f7ff ffdd 	bl	800c3e4 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	bf0c      	ite	eq
 800c430:	2301      	moveq	r3, #1
 800c432:	2300      	movne	r3, #0
 800c434:	b2db      	uxtb	r3, r3
 800c436:	2b00      	cmp	r3, #0
 800c438:	d128      	bne.n	800c48c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 800c43a:	f107 030c 	add.w	r3, r7, #12
 800c43e:	4618      	mov	r0, r3
 800c440:	f000 f95b 	bl	800c6fa <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 800c444:	f107 030c 	add.w	r3, r7, #12
 800c448:	2101      	movs	r1, #1
 800c44a:	4618      	mov	r0, r3
 800c44c:	f000 f96d 	bl	800c72a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 800c450:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800c452:	6838      	ldr	r0, [r7, #0]
 800c454:	f000 f978 	bl	800c748 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800c458:	4603      	mov	r3, r0
 800c45a:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 800c45c:	6838      	ldr	r0, [r7, #0]
 800c45e:	f7ff fe4b 	bl	800c0f8 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800c462:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800c464:	4618      	mov	r0, r3
 800c466:	f000 f97c 	bl	800c762 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c46a:	4603      	mov	r3, r0
 800c46c:	f107 0210 	add.w	r2, r7, #16
 800c470:	f107 000c 	add.w	r0, r7, #12
 800c474:	6979      	ldr	r1, [r7, #20]
 800c476:	f000 f97f 	bl	800c778 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	697a      	ldr	r2, [r7, #20]
 800c47e:	601a      	str	r2, [r3, #0]
	}
 800c480:	f107 030c 	add.w	r3, r7, #12
 800c484:	4618      	mov	r0, r3
 800c486:	f000 f944 	bl	800c712 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800c48a:	e000      	b.n	800c48e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 800c48c:	bf00      	nop
	}
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4618      	mov	r0, r3
 800c492:	3718      	adds	r7, #24
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
      operator=(const __shared_count& __r) noexcept
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	60fb      	str	r3, [r7, #12]
	if (__tmp != _M_pi)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d011      	beq.n	800c4d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x3e>
	    if (__tmp != nullptr)
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d002      	beq.n	800c4be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	      __tmp->_M_add_ref_copy();
 800c4b8:	68f8      	ldr	r0, [r7, #12]
 800c4ba:	f7fb fcef 	bl	8007e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
	    if (_M_pi != nullptr)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d004      	beq.n	800c4d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x38>
	      _M_pi->_M_release();
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7fb fcf5 	bl	8007eba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	68fa      	ldr	r2, [r7, #12]
 800c4d4:	601a      	str	r2, [r3, #0]
	return *this;
 800c4d6:	687b      	ldr	r3, [r7, #4]
      }
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3710      	adds	r7, #16
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
	{ }
 800c4ea:	bf00      	nop
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr

0800c4f6 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c4f6:	b590      	push	{r4, r7, lr}
 800c4f8:	b083      	sub	sp, #12
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
 800c4fe:	6039      	str	r1, [r7, #0]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	4618      	mov	r0, r3
 800c504:	f000 f950 	bl	800c7a8 <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800c508:	683c      	ldr	r4, [r7, #0]
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f7ff feb2 	bl	800c274 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800c510:	4603      	mov	r3, r0
 800c512:	601c      	str	r4, [r3, #0]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	4618      	mov	r0, r3
 800c518:	370c      	adds	r7, #12
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd90      	pop	{r4, r7, pc}

0800c51e <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c51e:	b580      	push	{r7, lr}
 800c520:	b082      	sub	sp, #8
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	4618      	mov	r0, r3
 800c52a:	f000 f94a 	bl	800c7c2 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c52e:	4603      	mov	r3, r0
 800c530:	4618      	mov	r0, r3
 800c532:	3708      	adds	r7, #8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	4618      	mov	r0, r3
 800c544:	f000 f949 	bl	800c7da <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c548:	4603      	mov	r3, r0
 800c54a:	4618      	mov	r0, r3
 800c54c:	3708      	adds	r7, #8
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800c552:	b580      	push	{r7, lr}
 800c554:	b082      	sub	sp, #8
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4618      	mov	r0, r3
 800c55e:	f000 f948 	bl	800c7f2 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800c562:	4603      	mov	r3, r0
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4618      	mov	r0, r3
 800c568:	3708      	adds	r7, #8
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
	...

0800c570 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 800c57a:	6839      	ldr	r1, [r7, #0]
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7f7 fa0b 	bl	8003998 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 800c582:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	791b      	ldrb	r3, [r3, #4]
 800c588:	3b04      	subs	r3, #4
 800c58a:	2b1a      	cmp	r3, #26
 800c58c:	d87c      	bhi.n	800c688 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x118>
 800c58e:	a201      	add	r2, pc, #4	@ (adr r2, 800c594 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x24>)
 800c590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c594:	0800c647 	.word	0x0800c647
 800c598:	0800c655 	.word	0x0800c655
 800c59c:	0800c601 	.word	0x0800c601
 800c5a0:	0800c689 	.word	0x0800c689
 800c5a4:	0800c689 	.word	0x0800c689
 800c5a8:	0800c689 	.word	0x0800c689
 800c5ac:	0800c607 	.word	0x0800c607
 800c5b0:	0800c689 	.word	0x0800c689
 800c5b4:	0800c615 	.word	0x0800c615
 800c5b8:	0800c689 	.word	0x0800c689
 800c5bc:	0800c665 	.word	0x0800c665
 800c5c0:	0800c689 	.word	0x0800c689
 800c5c4:	0800c689 	.word	0x0800c689
 800c5c8:	0800c689 	.word	0x0800c689
 800c5cc:	0800c689 	.word	0x0800c689
 800c5d0:	0800c689 	.word	0x0800c689
 800c5d4:	0800c689 	.word	0x0800c689
 800c5d8:	0800c689 	.word	0x0800c689
 800c5dc:	0800c689 	.word	0x0800c689
 800c5e0:	0800c689 	.word	0x0800c689
 800c5e4:	0800c689 	.word	0x0800c689
 800c5e8:	0800c689 	.word	0x0800c689
 800c5ec:	0800c623 	.word	0x0800c623
 800c5f0:	0800c689 	.word	0x0800c689
 800c5f4:	0800c635 	.word	0x0800c635
 800c5f8:	0800c689 	.word	0x0800c689
 800c5fc:	0800c677 	.word	0x0800c677
        return content_.asBoolean;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	e041      	b.n	800c68a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4618      	mov	r0, r3
 800c60c:	f000 f8fe 	bl	800c80c <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>
 800c610:	4603      	mov	r3, r0
 800c612:	e03a      	b.n	800c68a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4618      	mov	r0, r3
 800c61a:	f000 f908 	bl	800c82e <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>
 800c61e:	4603      	mov	r3, r0
 800c620:	e033      	b.n	800c68a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c628:	4610      	mov	r0, r2
 800c62a:	4619      	mov	r1, r3
 800c62c:	f000 f910 	bl	800c850 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 800c630:	4603      	mov	r3, r0
 800c632:	e02a      	b.n	800c68a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63a:	4610      	mov	r0, r2
 800c63c:	4619      	mov	r1, r3
 800c63e:	f000 f91a 	bl	800c876 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 800c642:	4603      	mov	r3, r0
 800c644:	e021      	b.n	800c68a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4618      	mov	r0, r3
 800c64c:	f000 f926 	bl	800c89c <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800c650:	4603      	mov	r3, r0
 800c652:	e01a      	b.n	800c68a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	3308      	adds	r3, #8
 800c65a:	4618      	mov	r0, r3
 800c65c:	f000 f91e 	bl	800c89c <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800c660:	4603      	mov	r3, r0
 800c662:	e012      	b.n	800c68a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	edd3 7a00 	vldr	s15, [r3]
 800c66a:	eeb0 0a67 	vmov.f32	s0, s15
 800c66e:	f000 f929 	bl	800c8c4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800c672:	4603      	mov	r3, r0
 800c674:	e009      	b.n	800c68a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	ed93 7b00 	vldr	d7, [r3]
 800c67c:	eeb0 0b47 	vmov.f64	d0, d7
 800c680:	f000 f938 	bl	800c8f4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 800c684:	4603      	mov	r3, r0
 800c686:	e000      	b.n	800c68a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 800c688:	2300      	movs	r3, #0
  }
 800c68a:	4618      	mov	r0, r3
 800c68c:	3710      	adds	r7, #16
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop

0800c694 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f000 f940 	bl	800c924 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3708      	adds	r7, #8
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}

0800c6ae <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c6ae:	b580      	push	{r7, lr}
 800c6b0:	b082      	sub	sp, #8
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 f944 	bl	800c944 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b082      	sub	sp, #8
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 f945 	bl	800c95e <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3708      	adds	r7, #8
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}

0800c6de <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
 800c6de:	b580      	push	{r7, lr}
 800c6e0:	b082      	sub	sp, #8
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f000 f944 	bl	800c976 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}

0800c6fa <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c6fa:	b580      	push	{r7, lr}
 800c6fc:	b082      	sub	sp, #8
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	6078      	str	r0, [r7, #4]
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 f944 	bl	800c990 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	4618      	mov	r0, r3
 800c70c:	3708      	adds	r7, #8
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c712:	b580      	push	{r7, lr}
 800c714:	b082      	sub	sp, #8
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 f943 	bl	800c9a6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	4618      	mov	r0, r3
 800c724:	3708      	adds	r7, #8
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}

0800c72a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800c72a:	b580      	push	{r7, lr}
 800c72c:	b082      	sub	sp, #8
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
 800c732:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800c734:	2200      	movs	r2, #0
 800c736:	6839      	ldr	r1, [r7, #0]
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 f93f 	bl	800c9bc <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800c73e:	4603      	mov	r3, r0
 800c740:	4618      	mov	r0, r3
 800c742:	3708      	adds	r7, #8
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	4618      	mov	r0, r3
 800c754:	f000 f95c 	bl	800ca10 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800c758:	4603      	mov	r3, r0
 800c75a:	4618      	mov	r0, r3
 800c75c:	3708      	adds	r7, #8
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}

0800c762 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c762:	b480      	push	{r7}
 800c764:	b083      	sub	sp, #12
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	4618      	mov	r0, r3
 800c76e:	370c      	adds	r7, #12
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800c778:	b590      	push	{r4, r7, lr}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	607a      	str	r2, [r7, #4]
 800c784:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f957 	bl	800ca3a <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 800c78c:	4604      	mov	r4, r0
 800c78e:	6838      	ldr	r0, [r7, #0]
 800c790:	f7ff ffe7 	bl	800c762 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c794:	4603      	mov	r3, r0
 800c796:	4622      	mov	r2, r4
 800c798:	68b9      	ldr	r1, [r7, #8]
 800c79a:	68f8      	ldr	r0, [r7, #12]
 800c79c:	f000 f958 	bl	800ca50 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 800c7a0:	bf00      	nop
 800c7a2:	3714      	adds	r7, #20
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd90      	pop	{r4, r7, pc}

0800c7a8 <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b082      	sub	sp, #8
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f000 f96a 	bl	800ca8c <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3708      	adds	r7, #8
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b082      	sub	sp, #8
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 f96e 	bl	800caac <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3708      	adds	r7, #8
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}

0800c7da <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c7da:	b580      	push	{r7, lr}
 800c7dc:	b082      	sub	sp, #8
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 f96f 	bl	800cac6 <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3708      	adds	r7, #8
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b082      	sub	sp, #8
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f000 f96e 	bl	800cade <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c802:	4603      	mov	r3, r0
 800c804:	4618      	mov	r0, r3
 800c806:	3708      	adds	r7, #8
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>:
TOut convertNumber(TIn value) {
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 f96e 	bl	800caf6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d001      	beq.n	800c824 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x18>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	e000      	b.n	800c826 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x1a>
 800c824:	2300      	movs	r3, #0
}
 800c826:	4618      	mov	r0, r3
 800c828:	3708      	adds	r7, #8
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}

0800c82e <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>:
TOut convertNumber(TIn value) {
 800c82e:	b580      	push	{r7, lr}
 800c830:	b082      	sub	sp, #8
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 f96f 	bl	800cb1a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 800c83c:	4603      	mov	r3, r0
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d001      	beq.n	800c846 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x18>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	e000      	b.n	800c848 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x1a>
 800c846:	2300      	movs	r3, #0
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3708      	adds	r7, #8
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>:
TOut convertNumber(TIn value) {
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800c85a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c85e:	f000 f967 	bl	800cb30 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800c862:	4603      	mov	r3, r0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d001      	beq.n	800c86c <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1c>
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	e000      	b.n	800c86e <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1e>
 800c86c:	2300      	movs	r3, #0
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3708      	adds	r7, #8
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>:
TOut convertNumber(TIn value) {
 800c876:	b580      	push	{r7, lr}
 800c878:	b082      	sub	sp, #8
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800c880:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c884:	f000 f96c 	bl	800cb60 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d001      	beq.n	800c892 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1c>
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	e000      	b.n	800c894 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1e>
 800c892:	2300      	movs	r3, #0
}
 800c894:	4618      	mov	r0, r3
 800c896:	3708      	adds	r7, #8
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>:
inline T parseNumber(const char* s) {
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b086      	sub	sp, #24
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 800c8a4:	f107 0308 	add.w	r3, r7, #8
 800c8a8:	6879      	ldr	r1, [r7, #4]
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7f7 fad8 	bl	8003e60 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 800c8b0:	f107 0308 	add.w	r3, r7, #8
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f000 f979 	bl	800cbac <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>
 800c8ba:	4603      	mov	r3, r0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3718      	adds	r7, #24
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>:
TOut convertNumber(TIn value) {
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800c8ce:	ed97 0a01 	vldr	s0, [r7, #4]
 800c8d2:	f000 f9b2 	bl	800cc3a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d006      	beq.n	800c8ea <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x26>
 800c8dc:	edd7 7a01 	vldr	s15, [r7, #4]
 800c8e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8e4:	ee17 3a90 	vmov	r3, s15
 800c8e8:	e000      	b.n	800c8ec <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x28>
 800c8ea:	2300      	movs	r3, #0
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3708      	adds	r7, #8
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>:
TOut convertNumber(TIn value) {
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b082      	sub	sp, #8
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800c8fe:	ed97 0b00 	vldr	d0, [r7]
 800c902:	f000 f9c7 	bl	800cc94 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d006      	beq.n	800c91a <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x26>
 800c90c:	ed97 7b00 	vldr	d7, [r7]
 800c910:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c914:	ee17 3a90 	vmov	r3, s15
 800c918:	e000      	b.n	800c91c <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x28>
 800c91a:	2300      	movs	r3, #0
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3708      	adds	r7, #8
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f000 f9d7 	bl	800cce0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	4618      	mov	r0, r3
 800c936:	f000 f9df 	bl	800ccf8 <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	4618      	mov	r0, r3
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	4618      	mov	r0, r3
 800c950:	f000 f9e0 	bl	800cd14 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>
 800c954:	4603      	mov	r3, r0
 800c956:	4618      	mov	r0, r3
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c95e:	b580      	push	{r7, lr}
 800c960:	b082      	sub	sp, #8
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 f9df 	bl	800cd2a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>
 800c96c:	4603      	mov	r3, r0
 800c96e:	4618      	mov	r0, r3
 800c970:	3708      	adds	r7, #8
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800c976:	b580      	push	{r7, lr}
 800c978:	b082      	sub	sp, #8
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	4618      	mov	r0, r3
 800c982:	f000 f9de 	bl	800cd42 <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c986:	4603      	mov	r3, r0
 800c988:	4618      	mov	r0, r3
 800c98a:	3708      	adds	r7, #8
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c990:	b480      	push	{r7}
 800c992:	b083      	sub	sp, #12
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	4618      	mov	r0, r3
 800c99c:	370c      	adds	r7, #12
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr

0800c9a6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c9a6:	b480      	push	{r7}
 800c9a8:	b083      	sub	sp, #12
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800c9c8:	68f8      	ldr	r0, [r7, #12]
 800c9ca:	f000 f9c6 	bl	800cd5a <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	bf8c      	ite	hi
 800c9d6:	2301      	movhi	r3, #1
 800c9d8:	2300      	movls	r3, #0
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	bf14      	ite	ne
 800c9e0:	2301      	movne	r3, #1
 800c9e2:	2300      	moveq	r3, #0
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d007      	beq.n	800c9fa <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9f0:	d301      	bcc.n	800c9f6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800c9f2:	f00f ff6b 	bl	801c8cc <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800c9f6:	f00f ff66 	bl	801c8c6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	011b      	lsls	r3, r3, #4
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f00f ff4e 	bl	801c8a0 <_Znwj>
 800ca04:	4603      	mov	r3, r0
 800ca06:	bf00      	nop
      }
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f7ff fb60 	bl	800c0de <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f7ff fb5a 	bl	800c0de <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	601a      	str	r2, [r3, #0]
	return __p;
 800ca30:	68fb      	ldr	r3, [r7, #12]
      }
 800ca32:	4618      	mov	r0, r3
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ca3a:	b480      	push	{r7}
 800ca3c:	b083      	sub	sp, #12
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	4618      	mov	r0, r3
 800ca46:	370c      	adds	r7, #12
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800ca50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	607a      	str	r2, [r7, #4]
 800ca5c:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	4619      	mov	r1, r3
 800ca62:	2010      	movs	r0, #16
 800ca64:	f7fb fa0e 	bl	8007e84 <_ZnwjPv>
 800ca68:	4605      	mov	r5, r0
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f7ff ffe5 	bl	800ca3a <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 800ca70:	4603      	mov	r3, r0
 800ca72:	681c      	ldr	r4, [r3, #0]
 800ca74:	6838      	ldr	r0, [r7, #0]
 800ca76:	f7ff fe74 	bl	800c762 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800ca7a:	4632      	mov	r2, r6
 800ca7c:	4621      	mov	r1, r4
 800ca7e:	4628      	mov	r0, r5
 800ca80:	f000 f978 	bl	800cd74 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 800ca84:	bf00      	nop
 800ca86:	3714      	adds	r7, #20
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ca8c <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 f98f 	bl	800cdb8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f000 f997 	bl	800cdd0 <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	4618      	mov	r0, r3
 800caa6:	3708      	adds	r7, #8
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	4618      	mov	r0, r3
 800cab8:	f000 f998 	bl	800cdec <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>
 800cabc:	4603      	mov	r3, r0
 800cabe:	4618      	mov	r0, r3
 800cac0:	3708      	adds	r7, #8
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}

0800cac6 <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800cac6:	b580      	push	{r7, lr}
 800cac8:	b082      	sub	sp, #8
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 f997 	bl	800ce02 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>
 800cad4:	4603      	mov	r3, r0
 800cad6:	4618      	mov	r0, r3
 800cad8:	3708      	adds	r7, #8
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800cade:	b580      	push	{r7, lr}
 800cae0:	b082      	sub	sp, #8
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 f997 	bl	800ce1a <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>
 800caec:	4603      	mov	r3, r0
 800caee:	4618      	mov	r0, r3
 800caf0:	3708      	adds	r7, #8
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800caf6:	b580      	push	{r7, lr}
 800caf8:	b082      	sub	sp, #8
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 800cafe:	f000 f8c1 	bl	800cc84 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800cb02:	4603      	mov	r3, r0
 800cb04:	461a      	mov	r2, r3
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	bf94      	ite	ls
 800cb0c:	2301      	movls	r3, #1
 800cb0e:	2300      	movhi	r3, #0
 800cb10:	b2db      	uxtb	r3, r3
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>:
canConvertNumber(TIn) {
 800cb1a:	b480      	push	{r7}
 800cb1c:	b083      	sub	sp, #12
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
  return true;
 800cb22:	2301      	movs	r3, #1
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800cb30:	b5b0      	push	{r4, r5, r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 800cb3a:	f000 f8a3 	bl	800cc84 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	17da      	asrs	r2, r3, #31
 800cb42:	461c      	mov	r4, r3
 800cb44:	4615      	mov	r5, r2
 800cb46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb4a:	4294      	cmp	r4, r2
 800cb4c:	eb75 0303 	sbcs.w	r3, r5, r3
 800cb50:	bf2c      	ite	cs
 800cb52:	2301      	movcs	r3, #1
 800cb54:	2300      	movcc	r3, #0
 800cb56:	b2db      	uxtb	r3, r3
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3708      	adds	r7, #8
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bdb0      	pop	{r4, r5, r7, pc}

0800cb60 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800cb60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800cb64:	b082      	sub	sp, #8
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800cb6c:	f000 f85c 	bl	800cc28 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800cb70:	4603      	mov	r3, r0
 800cb72:	17da      	asrs	r2, r3, #31
 800cb74:	4698      	mov	r8, r3
 800cb76:	4691      	mov	r9, r2
 800cb78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb7c:	4542      	cmp	r2, r8
 800cb7e:	eb73 0309 	sbcs.w	r3, r3, r9
 800cb82:	db0d      	blt.n	800cba0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 800cb84:	f000 f87e 	bl	800cc84 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	17da      	asrs	r2, r3, #31
 800cb8c:	461c      	mov	r4, r3
 800cb8e:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800cb90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb94:	4294      	cmp	r4, r2
 800cb96:	eb75 0303 	sbcs.w	r3, r5, r3
 800cb9a:	db01      	blt.n	800cba0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	e000      	b.n	800cba2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 800cba0:	2300      	movs	r3, #0
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3708      	adds	r7, #8
 800cba6:	46bd      	mov	sp, r7
 800cba8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800cbac <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>:
  T convertTo() const {
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
    switch (type_) {
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	3b01      	subs	r3, #1
 800cbba:	2b03      	cmp	r3, #3
 800cbbc:	d82e      	bhi.n	800cc1c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x70>
 800cbbe:	a201      	add	r2, pc, #4	@ (adr r2, 800cbc4 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x18>)
 800cbc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc4:	0800cbd5 	.word	0x0800cbd5
 800cbc8:	0800cbe7 	.word	0x0800cbe7
 800cbcc:	0800cbf9 	.word	0x0800cbf9
 800cbd0:	0800cc0b 	.word	0x0800cc0b
        return convertNumber<T>(value_.asFloat);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	edd3 7a02 	vldr	s15, [r3, #8]
 800cbda:	eeb0 0a67 	vmov.f32	s0, s15
 800cbde:	f7ff fe71 	bl	800c8c4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	e01b      	b.n	800cc1e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800cbec:	4610      	mov	r0, r2
 800cbee:	4619      	mov	r1, r3
 800cbf0:	f7ff fe41 	bl	800c876 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	e012      	b.n	800cc1e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800cbfe:	4610      	mov	r0, r2
 800cc00:	4619      	mov	r1, r3
 800cc02:	f7ff fe25 	bl	800c850 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 800cc06:	4603      	mov	r3, r0
 800cc08:	e009      	b.n	800cc1e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	ed93 7b02 	vldr	d7, [r3, #8]
 800cc10:	eeb0 0b47 	vmov.f64	d0, d7
 800cc14:	f7ff fe6e 	bl	800c8f4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	e000      	b.n	800cc1e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return T();
 800cc1c:	2300      	movs	r3, #0
  }
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop

0800cc28 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>:
  static constexpr T lowest() {
 800cc28:	b480      	push	{r7}
 800cc2a:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 800cc2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 800cc30:	4618      	mov	r0, r3
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr

0800cc3a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800cc3a:	b580      	push	{r7, lr}
 800cc3c:	b082      	sub	sp, #8
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 800cc44:	f7ff fff0 	bl	800cc28 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800cc48:	ee07 0a90 	vmov	s15, r0
 800cc4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc50:	ed97 7a01 	vldr	s14, [r7, #4]
 800cc54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc5c:	db0d      	blt.n	800cc7a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 800cc5e:	2000      	movs	r0, #0
 800cc60:	f000 f8e8 	bl	800ce34 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>
 800cc64:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 800cc68:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cc70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc74:	d801      	bhi.n	800cc7a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 800cc76:	2301      	movs	r3, #1
 800cc78:	e000      	b.n	800cc7c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 800cc7a:	2300      	movs	r3, #0
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3708      	adds	r7, #8
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>:
  static constexpr T highest() {
 800cc84:	b580      	push	{r7, lr}
 800cc86:	af00      	add	r7, sp, #0
    return T(~lowest());
 800cc88:	f7ff ffce 	bl	800cc28 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	43db      	mvns	r3, r3
  }
 800cc90:	4618      	mov	r0, r3
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b082      	sub	sp, #8
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 800cc9e:	f7ff ffc3 	bl	800cc28 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800cca2:	ee07 0a90 	vmov	s15, r0
 800cca6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ccaa:	ed97 6b00 	vldr	d6, [r7]
 800ccae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ccb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccb6:	db0e      	blt.n	800ccd6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 800ccb8:	f7ff ffe4 	bl	800cc84 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800ccbc:	ee07 0a90 	vmov	s15, r0
 800ccc0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 800ccc4:	ed97 6b00 	vldr	d6, [r7]
 800ccc8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd0:	d801      	bhi.n	800ccd6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	e000      	b.n	800ccd8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 800ccd6:	2300      	movs	r3, #0
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3708      	adds	r7, #8
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>:
      _Tuple_impl()
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f000 f8b2 	bl	800ce52 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>:
      constexpr _Head_base()
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2200      	movs	r2, #0
 800cd04:	601a      	str	r2, [r3, #0]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	370c      	adds	r7, #12
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr

0800cd14 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cd14:	b480      	push	{r7}
 800cd16:	b083      	sub	sp, #12
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	4618      	mov	r0, r3
 800cd20:	370c      	adds	r7, #12
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr

0800cd2a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cd2a:	b580      	push	{r7, lr}
 800cd2c:	b082      	sub	sp, #8
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f000 f898 	bl	800ce68 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3708      	adds	r7, #8
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}

0800cd42 <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800cd42:	b580      	push	{r7, lr}
 800cd44:	b082      	sub	sp, #8
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 f897 	bl	800ce7e <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>
 800cd50:	4603      	mov	r3, r0
 800cd52:	4618      	mov	r0, r3
 800cd54:	3708      	adds	r7, #8
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800cd5a:	b480      	push	{r7}
 800cd5c:	b083      	sub	sp, #12
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800cd62:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 800cd66:	4618      	mov	r0, r3
 800cd68:	370c      	adds	r7, #12
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr
	...

0800cd74 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 800cd74:	b5b0      	push	{r4, r5, r7, lr}
 800cd76:	b086      	sub	sp, #24
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7fe f874 	bl	800ae70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800cd88:	4a0a      	ldr	r2, [pc, #40]	@ (800cdb4 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	601a      	str	r2, [r3, #0]
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f103 040c 	add.w	r4, r3, #12
 800cd94:	1d3b      	adds	r3, r7, #4
 800cd96:	4618      	mov	r0, r3
 800cd98:	f000 f87e 	bl	800ce98 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800cd9c:	f107 0314 	add.w	r3, r7, #20
 800cda0:	462a      	mov	r2, r5
 800cda2:	68b9      	ldr	r1, [r7, #8]
 800cda4:	4620      	mov	r0, r4
 800cda6:	f000 f882 	bl	800ceae <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	4618      	mov	r0, r3
 800cdae:	3718      	adds	r7, #24
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bdb0      	pop	{r4, r5, r7, pc}
 800cdb4:	0801e9bc 	.word	0x0801e9bc

0800cdb8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>:
      _Tuple_impl()
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 f890 	bl	800cee6 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3708      	adds	r7, #8
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>:
      constexpr _Head_base()
 800cdd0:	b480      	push	{r7}
 800cdd2:	b083      	sub	sp, #12
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	601a      	str	r2, [r3, #0]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	4618      	mov	r0, r3
 800cde2:	370c      	adds	r7, #12
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr

0800cdec <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cdec:	b480      	push	{r7}
 800cdee:	b083      	sub	sp, #12
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	370c      	adds	r7, #12
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr

0800ce02 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b082      	sub	sp, #8
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 f876 	bl	800cefc <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>
 800ce10:	4603      	mov	r3, r0
 800ce12:	4618      	mov	r0, r3
 800ce14:	3708      	adds	r7, #8
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}

0800ce1a <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ce1a:	b580      	push	{r7, lr}
 800ce1c:	b082      	sub	sp, #8
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	4618      	mov	r0, r3
 800ce26:	f000 f874 	bl	800cf12 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3708      	adds	r7, #8
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}

0800ce34 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>:
  static T highest_for(
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
    return forge(0x4EFFFFFF);  // 2.14748352E9
 800ce3c:	f06f 4031 	mvn.w	r0, #2969567232	@ 0xb1000000
 800ce40:	f7f9 ffc6 	bl	8006dd0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 800ce44:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ce48:	eeb0 0a67 	vmov.f32	s0, s15
 800ce4c:	3708      	adds	r7, #8
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}

0800ce52 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>:
      constexpr _Head_base()
 800ce52:	b480      	push	{r7}
 800ce54:	b083      	sub	sp, #12
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	370c      	adds	r7, #12
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr

0800ce68 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ce68:	b480      	push	{r7}
 800ce6a:	b083      	sub	sp, #12
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	4618      	mov	r0, r3
 800ce74:	370c      	adds	r7, #12
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr

0800ce7e <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b082      	sub	sp, #8
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f000 f84d 	bl	800cf28 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	4618      	mov	r0, r3
 800ce92:	3708      	adds	r7, #8
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}

0800ce98 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	4618      	mov	r0, r3
 800cea4:	370c      	adds	r7, #12
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr

0800ceae <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800ceae:	b580      	push	{r7, lr}
 800ceb0:	b084      	sub	sp, #16
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	60f8      	str	r0, [r7, #12]
 800ceb6:	60b9      	str	r1, [r7, #8]
 800ceb8:	713a      	strb	r2, [r7, #4]
 800ceba:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 800cebc:	1d3b      	adds	r3, r7, #4
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7ff ffea 	bl	800ce98 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800cec4:	4603      	mov	r3, r0
 800cec6:	4619      	mov	r1, r3
 800cec8:	68f8      	ldr	r0, [r7, #12]
 800ceca:	f000 f838 	bl	800cf3e <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>
 800cece:	6839      	ldr	r1, [r7, #0]
 800ced0:	68f8      	ldr	r0, [r7, #12]
 800ced2:	f000 f841 	bl	800cf58 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	68ba      	ldr	r2, [r7, #8]
 800ceda:	601a      	str	r2, [r3, #0]
	{ }
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	4618      	mov	r0, r3
 800cee0:	3710      	adds	r7, #16
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}

0800cee6 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>:
      constexpr _Head_base()
 800cee6:	b480      	push	{r7}
 800cee8:	b083      	sub	sp, #12
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	4618      	mov	r0, r3
 800cef2:	370c      	adds	r7, #12
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr

0800cefc <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	4618      	mov	r0, r3
 800cf08:	370c      	adds	r7, #12
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr

0800cf12 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800cf12:	b480      	push	{r7}
 800cf14:	b083      	sub	sp, #12
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	370c      	adds	r7, #12
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr

0800cf28 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>:
 800cf28:	b480      	push	{r7}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	4618      	mov	r0, r3
 800cf34:	370c      	adds	r7, #12
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr

0800cf3e <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b082      	sub	sp, #8
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
 800cf46:	6039      	str	r1, [r7, #0]
 800cf48:	6838      	ldr	r0, [r7, #0]
 800cf4a:	f7ff ffa5 	bl	800ce98 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	4618      	mov	r0, r3
 800cf52:	3708      	adds	r7, #8
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	4618      	mov	r0, r3
 800cf66:	370c      	adds	r7, #12
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr

0800cf70 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	4a05      	ldr	r2, [pc, #20]	@ (800cf90 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	601a      	str	r2, [r3, #0]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7fc fb7f 	bl	8009684 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	0801e9bc 	.word	0x0801e9bc

0800cf94 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f7ff ffe7 	bl	800cf70 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800cfa2:	2110      	movs	r1, #16
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f00f fc6a 	bl	801c87e <_ZdlPvj>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	4618      	mov	r0, r3
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	330c      	adds	r3, #12
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f000 f83f 	bl	800d044 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	68db      	ldr	r3, [r3, #12]
 800cfcc:	4619      	mov	r1, r3
 800cfce:	4610      	mov	r0, r2
 800cfd0:	f7ff f8d2 	bl	800c178 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
 800cfd4:	bf00      	nop
 800cfd6:	3708      	adds	r7, #8
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b086      	sub	sp, #24
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	330c      	adds	r3, #12
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f000 f837 	bl	800d05c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800cfee:	4602      	mov	r2, r0
 800cff0:	f107 0314 	add.w	r3, r7, #20
 800cff4:	4611      	mov	r1, r2
 800cff6:	4618      	mov	r0, r3
 800cff8:	f000 f83c 	bl	800d074 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800cffc:	f107 0114 	add.w	r1, r7, #20
 800d000:	f107 030c 	add.w	r3, r7, #12
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	4618      	mov	r0, r3
 800d008:	f000 f841 	bl	800d08e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f7ff ffaf 	bl	800cf70 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800d012:	f107 030c 	add.w	r3, r7, #12
 800d016:	4618      	mov	r0, r3
 800d018:	f000 f84d 	bl	800d0b6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800d01c:	f107 0314 	add.w	r3, r7, #20
 800d020:	4618      	mov	r0, r3
 800d022:	f7ff fb76 	bl	800c712 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800d026:	3718      	adds	r7, #24
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
        return nullptr;
 800d036:	2300      	movs	r3, #0
      }
 800d038:	4618      	mov	r0, r3
 800d03a:	370c      	adds	r7, #12
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr

0800d044 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 f847 	bl	800d0e0 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>
 800d052:	4603      	mov	r3, r0
 800d054:	4618      	mov	r0, r3
 800d056:	3708      	adds	r7, #8
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}

0800d05c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 f846 	bl	800d0f6 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 800d06a:	4603      	mov	r3, r0
 800d06c:	4618      	mov	r0, r3
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f7ff fc86 	bl	800c990 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	4618      	mov	r0, r3
 800d088:	3708      	adds	r7, #8
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}

0800d08e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800d08e:	b580      	push	{r7, lr}
 800d090:	b084      	sub	sp, #16
 800d092:	af00      	add	r7, sp, #0
 800d094:	60f8      	str	r0, [r7, #12]
 800d096:	60b9      	str	r1, [r7, #8]
 800d098:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800d09a:	68b8      	ldr	r0, [r7, #8]
 800d09c:	f000 f836 	bl	800d10c <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	601a      	str	r2, [r3, #0]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	605a      	str	r2, [r3, #4]
      { }
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3710      	adds	r7, #16
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}

0800d0b6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800d0b6:	b580      	push	{r7, lr}
 800d0b8:	b082      	sub	sp, #8
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d007      	beq.n	800d0d6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6818      	ldr	r0, [r3, #0]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	f000 f826 	bl	800d122 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3708      	adds	r7, #8
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800d0e0:	b480      	push	{r7}
 800d0e2:	b083      	sub	sp, #12
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	370c      	adds	r7, #12
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>:
 800d0f6:	b480      	push	{r7}
 800d0f8:	b083      	sub	sp, #12
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	4618      	mov	r0, r3
 800d102:	370c      	adds	r7, #12
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	4618      	mov	r0, r3
 800d118:	370c      	adds	r7, #12
 800d11a:	46bd      	mov	sp, r7
 800d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d120:	4770      	bx	lr

0800d122 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d122:	b580      	push	{r7, lr}
 800d124:	b084      	sub	sp, #16
 800d126:	af00      	add	r7, sp, #0
 800d128:	60f8      	str	r0, [r7, #12]
 800d12a:	60b9      	str	r1, [r7, #8]
 800d12c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d12e:	687a      	ldr	r2, [r7, #4]
 800d130:	68b9      	ldr	r1, [r7, #8]
 800d132:	68f8      	ldr	r0, [r7, #12]
 800d134:	f000 f804 	bl	800d140 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 800d138:	bf00      	nop
 800d13a:	3710      	adds	r7, #16
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	011b      	lsls	r3, r3, #4
 800d150:	4619      	mov	r1, r3
 800d152:	68b8      	ldr	r0, [r7, #8]
 800d154:	f00f fb93 	bl	801c87e <_ZdlPvj>
      }
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 800d15e:	b480      	push	{r7}
 800d160:	b083      	sub	sp, #12
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	4618      	mov	r0, r3
 800d16a:	370c      	adds	r7, #12
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	4618      	mov	r0, r3
 800d180:	370c      	adds	r7, #12
 800d182:	46bd      	mov	sp, r7
 800d184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d188:	4770      	bx	lr

0800d18a <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>:

	virtual void init(void);
	virtual void start(void);
	virtual void tasks(void);

    void setDataCallback(const std::function<void(bool)>& callback) {
 800d18a:	b580      	push	{r7, lr}
 800d18c:	b082      	sub	sp, #8
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
 800d192:	6039      	str	r1, [r7, #0]
        dataCallback = callback;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	3318      	adds	r3, #24
 800d198:	6839      	ldr	r1, [r7, #0]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f000 f8e9 	bl	800d372 <_ZNSt8functionIFvbEEaSERKS1_>
    }
 800d1a0:	bf00      	nop
 800d1a2:	3708      	adds	r7, #8
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <_ZN12CommsHandler7setDataEb>:
    void setData(bool value) { data = value; }
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	70fb      	strb	r3, [r7, #3]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	78fa      	ldrb	r2, [r7, #3]
 800d1b8:	771a      	strb	r2, [r3, #28]
 800d1ba:	bf00      	nop
 800d1bc:	370c      	adds	r7, #12
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr
	...

0800d1c8 <_ZN12CommsHandlerC1Ev>:
#include "commsHandler.h"
#include "../../remora.h"

CommsHandler::CommsHandler() : data(false), noDataCount(0), status(false) {
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f000 fc32 	bl	800da3c <_ZN6ModuleC1Ev>
 800d1d8:	4a0a      	ldr	r2, [pc, #40]	@ (800d204 <_ZN12CommsHandlerC1Ev+0x3c>)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	601a      	str	r2, [r3, #0]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	3318      	adds	r3, #24
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f000 f8fa 	bl	800d3dc <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	771a      	strb	r2, [r3, #28]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	775a      	strb	r2, [r3, #29]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	779a      	strb	r2, [r3, #30]

}
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3708      	adds	r7, #8
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	0801e9fc 	.word	0x0801e9fc

0800d208 <_ZN12CommsHandlerD1Ev>:

CommsHandler::~CommsHandler() {}
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	4a08      	ldr	r2, [pc, #32]	@ (800d234 <_ZN12CommsHandlerD1Ev+0x2c>)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	601a      	str	r2, [r3, #0]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	3318      	adds	r3, #24
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fc f8bd 	bl	800939a <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	4618      	mov	r0, r3
 800d224:	f000 fc26 	bl	800da74 <_ZN6ModuleD1Ev>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	4618      	mov	r0, r3
 800d22c:	3708      	adds	r7, #8
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	0801e9fc 	.word	0x0801e9fc

0800d238 <_ZN12CommsHandlerD0Ev>:
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f7ff ffe1 	bl	800d208 <_ZN12CommsHandlerD1Ev>
 800d246:	2120      	movs	r1, #32
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f00f fb18 	bl	801c87e <_ZdlPvj>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	4618      	mov	r0, r3
 800d252:	3708      	adds	r7, #8
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <_ZZN12CommsHandler4initEvENKUlbE_clEb>:

void CommsHandler::init() {
    interface->setDataCallback([this](bool dataReceived) {
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	460b      	mov	r3, r1
 800d262:	70fb      	strb	r3, [r7, #3]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
        this->setData(dataReceived);
 800d268:	78fa      	ldrb	r2, [r7, #3]
 800d26a:	4611      	mov	r1, r2
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7ff ff9b 	bl	800d1a8 <_ZN12CommsHandler7setDataEb>
    });
 800d272:	bf00      	nop
 800d274:	3708      	adds	r7, #8
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}

0800d27a <_ZN12CommsHandler4initEv>:
void CommsHandler::init() {
 800d27a:	b590      	push	{r4, r7, lr}
 800d27c:	b089      	sub	sp, #36	@ 0x24
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
    interface->setDataCallback([this](bool dataReceived) {
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	3318      	adds	r3, #24
 800d286:	4618      	mov	r0, r3
 800d288:	f000 f8b8 	bl	800d3fc <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800d28c:	4604      	mov	r4, r0
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	61fb      	str	r3, [r7, #28]
 800d292:	f107 021c 	add.w	r2, r7, #28
 800d296:	f107 030c 	add.w	r3, r7, #12
 800d29a:	4611      	mov	r1, r2
 800d29c:	4618      	mov	r0, r3
 800d29e:	f000 f8b9 	bl	800d414 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>
 800d2a2:	f107 030c 	add.w	r3, r7, #12
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	f7ff ff6e 	bl	800d18a <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>
 800d2ae:	f107 030c 	add.w	r3, r7, #12
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7f3 fd4c 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>

    interface->init();
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	3318      	adds	r3, #24
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f000 f89d 	bl	800d3fc <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	321c      	adds	r2, #28
 800d2c8:	6812      	ldr	r2, [r2, #0]
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	4790      	blx	r2
}
 800d2ce:	bf00      	nop
 800d2d0:	3724      	adds	r7, #36	@ 0x24
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd90      	pop	{r4, r7, pc}

0800d2d6 <_ZN12CommsHandler5startEv>:

void CommsHandler::start() {
 800d2d6:	b580      	push	{r7, lr}
 800d2d8:	b082      	sub	sp, #8
 800d2da:	af00      	add	r7, sp, #0
 800d2dc:	6078      	str	r0, [r7, #4]
	interface->start();
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	3318      	adds	r3, #24
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f000 f88a 	bl	800d3fc <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	3220      	adds	r2, #32
 800d2ee:	6812      	ldr	r2, [r2, #0]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	4790      	blx	r2
}
 800d2f4:	bf00      	nop
 800d2f6:	3708      	adds	r7, #8
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <_ZN12CommsHandler5tasksEv>:

// tasks is run in the main loop to do polling tasks, eg Ethernet, processing data etc
void CommsHandler::tasks() {
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
	interface->tasks();
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	3318      	adds	r3, #24
 800d308:	4618      	mov	r0, r3
 800d30a:	f000 f877 	bl	800d3fc <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800d30e:	4603      	mov	r3, r0
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	3224      	adds	r2, #36	@ 0x24
 800d314:	6812      	ldr	r2, [r2, #0]
 800d316:	4618      	mov	r0, r3
 800d318:	4790      	blx	r2
}
 800d31a:	bf00      	nop
 800d31c:	3708      	adds	r7, #8
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}

0800d322 <_ZN12CommsHandler6updateEv>:

// update it run in the servo thread to monitor communications
void CommsHandler::update() {
 800d322:	b480      	push	{r7}
 800d324:	b083      	sub	sp, #12
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
	if (data)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	7f1b      	ldrb	r3, [r3, #28]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d006      	beq.n	800d340 <_ZN12CommsHandler6updateEv+0x1e>
	{
		noDataCount = 0;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2200      	movs	r2, #0
 800d336:	775a      	strb	r2, [r3, #29]
		status = true;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2201      	movs	r2, #1
 800d33c:	779a      	strb	r2, [r3, #30]
 800d33e:	e005      	b.n	800d34c <_ZN12CommsHandler6updateEv+0x2a>
	}
	else
	{
		noDataCount++;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	7f5b      	ldrb	r3, [r3, #29]
 800d344:	3301      	adds	r3, #1
 800d346:	b2da      	uxtb	r2, r3
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	775a      	strb	r2, [r3, #29]
	}

	if (noDataCount > Config::dataErrMax)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	7f5b      	ldrb	r3, [r3, #29]
 800d350:	2b64      	cmp	r3, #100	@ 0x64
 800d352:	d905      	bls.n	800d360 <_ZN12CommsHandler6updateEv+0x3e>
	{
		noDataCount = 0;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	775a      	strb	r2, [r3, #29]
		status = false;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2200      	movs	r2, #0
 800d35e:	779a      	strb	r2, [r3, #30]
	}

	data = false;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2200      	movs	r2, #0
 800d364:	771a      	strb	r2, [r3, #28]
}
 800d366:	bf00      	nop
 800d368:	370c      	adds	r7, #12
 800d36a:	46bd      	mov	sp, r7
 800d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d370:	4770      	bx	lr

0800d372 <_ZNSt8functionIFvbEEaSERKS1_>:
      operator=(const function& __x)
 800d372:	b580      	push	{r7, lr}
 800d374:	b086      	sub	sp, #24
 800d376:	af00      	add	r7, sp, #0
 800d378:	6078      	str	r0, [r7, #4]
 800d37a:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800d37c:	f107 0308 	add.w	r3, r7, #8
 800d380:	6839      	ldr	r1, [r7, #0]
 800d382:	4618      	mov	r0, r3
 800d384:	f000 f876 	bl	800d474 <_ZNSt8functionIFvbEEC1ERKS1_>
 800d388:	f107 0308 	add.w	r3, r7, #8
 800d38c:	6879      	ldr	r1, [r7, #4]
 800d38e:	4618      	mov	r0, r3
 800d390:	f000 f89b 	bl	800d4ca <_ZNSt8functionIFvbEE4swapERS1_>
 800d394:	f107 0308 	add.w	r3, r7, #8
 800d398:	4618      	mov	r0, r3
 800d39a:	f7f3 fcd9 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
	return *this;
 800d39e:	687b      	ldr	r3, [r7, #4]
      }
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3718      	adds	r7, #24
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f000 f8aa 	bl	800d50c <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3708      	adds	r7, #8
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}

0800d3c2 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b082      	sub	sp, #8
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7ff ffeb 	bl	800d3a8 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3708      	adds	r7, #8
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
	: _M_t()
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	601a      	str	r2, [r3, #0]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7ff ffe8 	bl	800d3c2 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
	return get();
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 f88e 	bl	800d526 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>
 800d40a:	4603      	mov	r3, r0
      }
 800d40c:	4618      	mov	r0, r3
 800d40e:	3708      	adds	r7, #8
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>:
	function(_Functor&& __f)
 800d414:	b590      	push	{r4, r7, lr}
 800d416:	b083      	sub	sp, #12
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	461a      	mov	r2, r3
 800d422:	2300      	movs	r3, #0
 800d424:	6013      	str	r3, [r2, #0]
 800d426:	6053      	str	r3, [r2, #4]
 800d428:	6093      	str	r3, [r2, #8]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7f4 feb1 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2200      	movs	r2, #0
 800d436:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800d438:	6838      	ldr	r0, [r7, #0]
 800d43a:	f000 f881 	bl	800d540 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d00e      	beq.n	800d462 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 800d444:	687c      	ldr	r4, [r7, #4]
 800d446:	6838      	ldr	r0, [r7, #0]
 800d448:	f000 f885 	bl	800d556 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800d44c:	4603      	mov	r3, r0
 800d44e:	4619      	mov	r1, r3
 800d450:	4620      	mov	r0, r4
 800d452:	f000 f88b 	bl	800d56c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4a04      	ldr	r2, [pc, #16]	@ (800d46c <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x58>)
 800d45a:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	4a04      	ldr	r2, [pc, #16]	@ (800d470 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x5c>)
 800d460:	609a      	str	r2, [r3, #8]
	}
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4618      	mov	r0, r3
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd90      	pop	{r4, r7, pc}
 800d46c:	0800d591 	.word	0x0800d591
 800d470:	0800d5bb 	.word	0x0800d5bb

0800d474 <_ZNSt8functionIFvbEEC1ERKS1_>:
      function(const function& __x)
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	461a      	mov	r2, r3
 800d482:	2300      	movs	r3, #0
 800d484:	6013      	str	r3, [r2, #0]
 800d486:	6053      	str	r3, [r2, #4]
 800d488:	6093      	str	r3, [r2, #8]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7f4 fe81 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2200      	movs	r2, #0
 800d496:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 800d498:	6838      	ldr	r0, [r7, #0]
 800d49a:	f000 f8ad 	bl	800d5f8 <_ZNKSt8functionIFvbEEcvbEv>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d00d      	beq.n	800d4c0 <_ZNSt8functionIFvbEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	689b      	ldr	r3, [r3, #8]
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	6839      	ldr	r1, [r7, #0]
 800d4ac:	2202      	movs	r2, #2
 800d4ae:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	68da      	ldr	r2, [r3, #12]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	689a      	ldr	r2, [r3, #8]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	609a      	str	r2, [r3, #8]
      }
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}

0800d4ca <_ZNSt8functionIFvbEE4swapERS1_>:
      void swap(function& __x) noexcept
 800d4ca:	b580      	push	{r7, lr}
 800d4cc:	b082      	sub	sp, #8
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
 800d4d2:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	683a      	ldr	r2, [r7, #0]
 800d4d8:	4611      	mov	r1, r2
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f000 f89c 	bl	800d618 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f103 0208 	add.w	r2, r3, #8
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	3308      	adds	r3, #8
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	4610      	mov	r0, r2
 800d4ee:	f000 f8ba 	bl	800d666 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f103 020c 	add.w	r2, r3, #12
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	330c      	adds	r3, #12
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	4610      	mov	r0, r2
 800d500:	f000 f8d0 	bl	800d6a4 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 800d504:	bf00      	nop
 800d506:	3708      	adds	r7, #8
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	4618      	mov	r0, r3
 800d518:	f000 f8e3 	bl	800d6e2 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	4618      	mov	r0, r3
 800d520:	3708      	adds	r7, #8
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800d526:	b580      	push	{r7, lr}
 800d528:	b082      	sub	sp, #8
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	4618      	mov	r0, r3
 800d532:	f000 f8e6 	bl	800d702 <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800d536:	4603      	mov	r3, r0
 800d538:	4618      	mov	r0, r3
 800d53a:	3708      	adds	r7, #8
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 800d540:	b480      	push	{r7}
 800d542:	b083      	sub	sp, #12
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
	  { return true; }
 800d548:	2301      	movs	r3, #1
 800d54a:	4618      	mov	r0, r3
 800d54c:	370c      	adds	r7, #12
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr

0800d556 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d556:	b480      	push	{r7}
 800d558:	b083      	sub	sp, #12
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	4618      	mov	r0, r3
 800d562:	370c      	adds	r7, #12
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr

0800d56c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800d56c:	b590      	push	{r4, r7, lr}
 800d56e:	b083      	sub	sp, #12
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800d576:	6838      	ldr	r0, [r7, #0]
 800d578:	f7ff ffed 	bl	800d556 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800d57c:	4603      	mov	r3, r0
 800d57e:	4622      	mov	r2, r4
 800d580:	4619      	mov	r1, r3
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f000 f8cb 	bl	800d71e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800d588:	bf00      	nop
 800d58a:	370c      	adds	r7, #12
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd90      	pop	{r4, r7, pc}

0800d590 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800d590:	b590      	push	{r4, r7, lr}
 800d592:	b083      	sub	sp, #12
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f000 f8d8 	bl	800d750 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800d5a0:	4604      	mov	r4, r0
 800d5a2:	6838      	ldr	r0, [r7, #0]
 800d5a4:	f7f4 fd34 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	f000 f8df 	bl	800d770 <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 800d5b2:	bf00      	nop
      }
 800d5b4:	370c      	adds	r7, #12
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd90      	pop	{r4, r7, pc}

0800d5ba <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800d5ba:	b590      	push	{r4, r7, lr}
 800d5bc:	b085      	sub	sp, #20
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	60f8      	str	r0, [r7, #12]
 800d5c2:	60b9      	str	r1, [r7, #8]
 800d5c4:	4613      	mov	r3, r2
 800d5c6:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800d5c8:	79fb      	ldrb	r3, [r7, #7]
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	d109      	bne.n	800d5e2 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800d5ce:	68b8      	ldr	r0, [r7, #8]
 800d5d0:	f000 f8be 	bl	800d750 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800d5d4:	4604      	mov	r4, r0
 800d5d6:	68f8      	ldr	r0, [r7, #12]
 800d5d8:	f000 f8e0 	bl	800d79c <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	601c      	str	r4, [r3, #0]
	    break;
 800d5e0:	e005      	b.n	800d5ee <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800d5e2:	79fb      	ldrb	r3, [r7, #7]
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	68b9      	ldr	r1, [r7, #8]
 800d5e8:	68f8      	ldr	r0, [r7, #12]
 800d5ea:	f000 f8e3 	bl	800d7b4 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 800d5ee:	2300      	movs	r3, #0
      }
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3714      	adds	r7, #20
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd90      	pop	{r4, r7, pc}

0800d5f8 <_ZNKSt8functionIFvbEEcvbEv>:
      explicit operator bool() const noexcept
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	4618      	mov	r0, r3
 800d604:	f7f3 fb63 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 800d608:	4603      	mov	r3, r0
 800d60a:	f083 0301 	eor.w	r3, r3, #1
 800d60e:	b2db      	uxtb	r3, r3
 800d610:	4618      	mov	r0, r3
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f000 f900 	bl	800d828 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800d628:	4602      	mov	r2, r0
 800d62a:	f107 0308 	add.w	r3, r7, #8
 800d62e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d632:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800d636:	6838      	ldr	r0, [r7, #0]
 800d638:	f000 f8f6 	bl	800d828 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800d63c:	4602      	mov	r2, r0
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d644:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800d648:	f107 0308 	add.w	r3, r7, #8
 800d64c:	4618      	mov	r0, r3
 800d64e:	f000 f8eb 	bl	800d828 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800d652:	4602      	mov	r2, r0
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d65a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800d65e:	bf00      	nop
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}

0800d666 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800d666:	b580      	push	{r7, lr}
 800d668:	b084      	sub	sp, #16
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
 800d66e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f000 f8e4 	bl	800d83e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800d676:	4603      	mov	r3, r0
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800d67c:	6838      	ldr	r0, [r7, #0]
 800d67e:	f000 f8de 	bl	800d83e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800d682:	4603      	mov	r3, r0
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800d68a:	f107 030c 	add.w	r3, r7, #12
 800d68e:	4618      	mov	r0, r3
 800d690:	f000 f8d5 	bl	800d83e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800d694:	4603      	mov	r3, r0
 800d696:	681a      	ldr	r2, [r3, #0]
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	601a      	str	r2, [r3, #0]
    }
 800d69c:	bf00      	nop
 800d69e:	3710      	adds	r7, #16
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b084      	sub	sp, #16
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 f8d0 	bl	800d854 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800d6ba:	6838      	ldr	r0, [r7, #0]
 800d6bc:	f000 f8ca 	bl	800d854 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	681a      	ldr	r2, [r3, #0]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800d6c8:	f107 030c 	add.w	r3, r7, #12
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f000 f8c1 	bl	800d854 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	601a      	str	r2, [r3, #0]
    }
 800d6da:	bf00      	nop
 800d6dc:	3710      	adds	r7, #16
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}

0800d6e2 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b082      	sub	sp, #8
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 f8bd 	bl	800d86a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f000 f8c5 	bl	800d882 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3708      	adds	r7, #8
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}

0800d702 <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800d702:	b580      	push	{r7, lr}
 800d704:	b082      	sub	sp, #8
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	4618      	mov	r0, r3
 800d70e:	f000 f8c6 	bl	800d89e <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800d712:	4603      	mov	r3, r0
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4618      	mov	r0, r3
 800d718:	3708      	adds	r7, #8
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}

0800d71e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800d71e:	b590      	push	{r4, r7, lr}
 800d720:	b085      	sub	sp, #20
 800d722:	af00      	add	r7, sp, #0
 800d724:	60f8      	str	r0, [r7, #12]
 800d726:	60b9      	str	r1, [r7, #8]
 800d728:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800d72a:	68f8      	ldr	r0, [r7, #12]
 800d72c:	f7ff fd17 	bl	800d15e <_ZNSt9_Any_data9_M_accessEv>
 800d730:	4603      	mov	r3, r0
 800d732:	4619      	mov	r1, r3
 800d734:	2004      	movs	r0, #4
 800d736:	f7fa fba5 	bl	8007e84 <_ZnwjPv>
 800d73a:	4604      	mov	r4, r0
 800d73c:	68b8      	ldr	r0, [r7, #8]
 800d73e:	f7ff ff0a 	bl	800d556 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800d742:	4603      	mov	r3, r0
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	6023      	str	r3, [r4, #0]
	  }
 800d748:	bf00      	nop
 800d74a:	3714      	adds	r7, #20
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd90      	pop	{r4, r7, pc}

0800d750 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f000 f8ad 	bl	800d8b8 <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>
 800d75e:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	f000 f8b5 	bl	800d8d0 <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>
 800d766:	4603      	mov	r3, r0
	}
 800d768:	4618      	mov	r0, r3
 800d76a:	3710      	adds	r7, #16
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800d770:	b5b0      	push	{r4, r5, r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f000 f8b3 	bl	800d8e6 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800d780:	4604      	mov	r4, r0
 800d782:	6838      	ldr	r0, [r7, #0]
 800d784:	f7f4 fc44 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800d788:	4603      	mov	r3, r0
 800d78a:	461a      	mov	r2, r3
 800d78c:	4621      	mov	r1, r4
 800d78e:	4628      	mov	r0, r5
 800d790:	f000 f8b4 	bl	800d8fc <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 800d794:	bf00      	nop
 800d796:	3708      	adds	r7, #8
 800d798:	46bd      	mov	sp, r7
 800d79a:	bdb0      	pop	{r4, r5, r7, pc}

0800d79c <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f7ff fcda 	bl	800d15e <_ZNSt9_Any_data9_M_accessEv>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3708      	adds	r7, #8
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800d7b4:	b590      	push	{r4, r7, lr}
 800d7b6:	b085      	sub	sp, #20
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	60f8      	str	r0, [r7, #12]
 800d7bc:	60b9      	str	r1, [r7, #8]
 800d7be:	4613      	mov	r3, r2
 800d7c0:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800d7c2:	79fb      	ldrb	r3, [r7, #7]
 800d7c4:	2b03      	cmp	r3, #3
 800d7c6:	d82a      	bhi.n	800d81e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 800d7c8:	a201      	add	r2, pc, #4	@ (adr r2, 800d7d0 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 800d7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ce:	bf00      	nop
 800d7d0:	0800d7e1 	.word	0x0800d7e1
 800d7d4:	0800d7ef 	.word	0x0800d7ef
 800d7d8:	0800d803 	.word	0x0800d803
 800d7dc:	0800d815 	.word	0x0800d815
	      __dest._M_access<const type_info*>() = nullptr;
 800d7e0:	68f8      	ldr	r0, [r7, #12]
 800d7e2:	f000 f8a2 	bl	800d92a <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	601a      	str	r2, [r3, #0]
	      break;
 800d7ec:	e017      	b.n	800d81e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800d7ee:	68b8      	ldr	r0, [r7, #8]
 800d7f0:	f7ff ffae 	bl	800d750 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	68f8      	ldr	r0, [r7, #12]
 800d7f8:	f7ff ffd0 	bl	800d79c <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	601c      	str	r4, [r3, #0]
	      break;
 800d800:	e00d      	b.n	800d81e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800d802:	68b8      	ldr	r0, [r7, #8]
 800d804:	f7ff ffa4 	bl	800d750 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800d808:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800d80a:	4619      	mov	r1, r3
 800d80c:	68f8      	ldr	r0, [r7, #12]
 800d80e:	f000 f898 	bl	800d942 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 800d812:	e004      	b.n	800d81e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800d814:	4621      	mov	r1, r4
 800d816:	68f8      	ldr	r0, [r7, #12]
 800d818:	f000 f8a5 	bl	800d966 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800d81c:	bf00      	nop
	  return false;
 800d81e:	2300      	movs	r3, #0
	}
 800d820:	4618      	mov	r0, r3
 800d822:	3714      	adds	r7, #20
 800d824:	46bd      	mov	sp, r7
 800d826:	bd90      	pop	{r4, r7, pc}

0800d828 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800d828:	b480      	push	{r7}
 800d82a:	b083      	sub	sp, #12
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	4618      	mov	r0, r3
 800d834:	370c      	adds	r7, #12
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr

0800d83e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800d83e:	b480      	push	{r7}
 800d840:	b083      	sub	sp, #12
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	4618      	mov	r0, r3
 800d84a:	370c      	adds	r7, #12
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr

0800d854 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 800d854:	b480      	push	{r7}
 800d856:	b083      	sub	sp, #12
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	4618      	mov	r0, r3
 800d860:	370c      	adds	r7, #12
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr

0800d86a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>:
      _Tuple_impl()
 800d86a:	b580      	push	{r7, lr}
 800d86c:	b082      	sub	sp, #8
 800d86e:	af00      	add	r7, sp, #0
 800d870:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 f883 	bl	800d97e <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	4618      	mov	r0, r3
 800d87c:	3708      	adds	r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>:
      constexpr _Head_base()
 800d882:	b480      	push	{r7}
 800d884:	b083      	sub	sp, #12
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2200      	movs	r2, #0
 800d88e:	601a      	str	r2, [r3, #0]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	4618      	mov	r0, r3
 800d894:	370c      	adds	r7, #12
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr

0800d89e <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800d89e:	b580      	push	{r7, lr}
 800d8a0:	b082      	sub	sp, #8
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f000 f873 	bl	800d994 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3708      	adds	r7, #8
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>:
      _M_access() const noexcept
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f7ff fc57 	bl	800d174 <_ZNKSt9_Any_data9_M_accessEv>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	4618      	mov	r0, r3
 800d8dc:	370c      	adds	r7, #12
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e4:	4770      	bx	lr

0800d8e6 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d8e6:	b480      	push	{r7}
 800d8e8:	b083      	sub	sp, #12
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	370c      	adds	r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr

0800d8fc <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800d8fc:	b590      	push	{r4, r7, lr}
 800d8fe:	b085      	sub	sp, #20
 800d900:	af00      	add	r7, sp, #0
 800d902:	7338      	strb	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800d908:	68b8      	ldr	r0, [r7, #8]
 800d90a:	f7ff ffec 	bl	800d8e6 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800d90e:	4604      	mov	r4, r0
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f7f4 fb7d 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800d916:	4603      	mov	r3, r0
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	4619      	mov	r1, r3
 800d91c:	4620      	mov	r0, r4
 800d91e:	f7ff fc9b 	bl	800d258 <_ZZN12CommsHandler4initEvENKUlbE_clEb>
 800d922:	bf00      	nop
 800d924:	3714      	adds	r7, #20
 800d926:	46bd      	mov	sp, r7
 800d928:	bd90      	pop	{r4, r7, pc}

0800d92a <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b082      	sub	sp, #8
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f7ff fc13 	bl	800d15e <_ZNSt9_Any_data9_M_accessEv>
 800d938:	4603      	mov	r3, r0
 800d93a:	4618      	mov	r0, r3
 800d93c:	3708      	adds	r7, #8
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}

0800d942 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800d942:	b590      	push	{r4, r7, lr}
 800d944:	b083      	sub	sp, #12
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
 800d94a:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800d94c:	6838      	ldr	r0, [r7, #0]
 800d94e:	f000 f82d 	bl	800d9ac <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800d952:	4603      	mov	r3, r0
 800d954:	4622      	mov	r2, r4
 800d956:	4619      	mov	r1, r3
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f000 f832 	bl	800d9c2 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800d95e:	bf00      	nop
 800d960:	370c      	adds	r7, #12
 800d962:	46bd      	mov	sp, r7
 800d964:	bd90      	pop	{r4, r7, pc}

0800d966 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800d966:	b580      	push	{r7, lr}
 800d968:	b082      	sub	sp, #8
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	6078      	str	r0, [r7, #4]
 800d96e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f000 f83f 	bl	800d9f4 <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>
	}
 800d976:	bf00      	nop
 800d978:	3708      	adds	r7, #8
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}

0800d97e <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>:
      constexpr _Head_base()
 800d97e:	b480      	push	{r7}
 800d980:	b083      	sub	sp, #12
 800d982:	af00      	add	r7, sp, #0
 800d984:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	4618      	mov	r0, r3
 800d98a:	370c      	adds	r7, #12
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr

0800d994 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f000 f835 	bl	800da0c <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3708      	adds	r7, #8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d9ac:	b480      	push	{r7}
 800d9ae:	b083      	sub	sp, #12
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr

0800d9c2 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800d9c2:	b590      	push	{r4, r7, lr}
 800d9c4:	b085      	sub	sp, #20
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	60f8      	str	r0, [r7, #12]
 800d9ca:	60b9      	str	r1, [r7, #8]
 800d9cc:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800d9ce:	68f8      	ldr	r0, [r7, #12]
 800d9d0:	f7ff fbc5 	bl	800d15e <_ZNSt9_Any_data9_M_accessEv>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	2004      	movs	r0, #4
 800d9da:	f7fa fa53 	bl	8007e84 <_ZnwjPv>
 800d9de:	4604      	mov	r4, r0
 800d9e0:	68b8      	ldr	r0, [r7, #8]
 800d9e2:	f7ff ffe3 	bl	800d9ac <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	6023      	str	r3, [r4, #0]
	  }
 800d9ec:	bf00      	nop
 800d9ee:	3714      	adds	r7, #20
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd90      	pop	{r4, r7, pc}

0800d9f4 <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f7ff fbae 	bl	800d15e <_ZNSt9_Any_data9_M_accessEv>
 800da02:	4603      	mov	r3, r0
 800da04:	4618      	mov	r0, r3
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	4618      	mov	r0, r3
 800da18:	f000 f805 	bl	800da26 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>
 800da1c:	4603      	mov	r3, r0
 800da1e:	4618      	mov	r0, r3
 800da20:	3708      	adds	r7, #8
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}

0800da26 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800da26:	b480      	push	{r7}
 800da28:	b083      	sub	sp, #12
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	4618      	mov	r0, r3
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr

0800da3c <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b082      	sub	sp, #8
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	4a09      	ldr	r2, [pc, #36]	@ (800da6c <_ZN6ModuleC1Ev+0x30>)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	601a      	str	r2, [r3, #0]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2200      	movs	r2, #0
 800da4e:	751a      	strb	r2, [r3, #20]
{
	this->counter = 0;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2200      	movs	r2, #0
 800da54:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2201      	movs	r2, #1
 800da5a:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 800da5c:	4804      	ldr	r0, [pc, #16]	@ (800da70 <_ZN6ModuleC1Ev+0x34>)
 800da5e:	f00f fc1d 	bl	801d29c <puts>
}
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	4618      	mov	r0, r3
 800da66:	3708      	adds	r7, #8
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	0801ea20 	.word	0x0801ea20
 800da70:	0801e634 	.word	0x0801e634

0800da74 <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	4a04      	ldr	r2, [pc, #16]	@ (800da90 <_ZN6ModuleD1Ev+0x1c>)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	601a      	str	r2, [r3, #0]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	4618      	mov	r0, r3
 800da86:	370c      	adds	r7, #12
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr
 800da90:	0801ea20 	.word	0x0801ea20

0800da94 <_ZN6ModuleD0Ev>:
 800da94:	b580      	push	{r7, lr}
 800da96:	b082      	sub	sp, #8
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f7ff ffe9 	bl	800da74 <_ZN6ModuleD1Ev>
 800daa2:	2118      	movs	r1, #24
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f00e feea 	bl	801c87e <_ZdlPvj>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	4618      	mov	r0, r3
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
	++this->counter;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	691b      	ldr	r3, [r3, #16]
 800dac0:	1c5a      	adds	r2, r3, #1
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	691a      	ldr	r2, [r3, #16]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	68db      	ldr	r3, [r3, #12]
 800dace:	429a      	cmp	r2, r3
 800dad0:	db08      	blt.n	800dae4 <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	3310      	adds	r3, #16
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	4798      	blx	r3
		this->counter = 0;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2200      	movs	r2, #0
 800dae2:	611a      	str	r2, [r3, #16]
	}

	this->update();
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	3308      	adds	r3, #8
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	4798      	blx	r3
}
 800daf0:	bf00      	nop
 800daf2:	3708      	adds	r7, #8
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <_ZN6Module6updateEv>:
void Module::runModulePost()
{
	this->updatePost();
}

void Module::update(){}
 800daf8:	b480      	push	{r7}
 800dafa:	b083      	sub	sp, #12
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	bf00      	nop
 800db02:	370c      	adds	r7, #12
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr

0800db0c <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 800db0c:	b480      	push	{r7}
 800db0e:	b083      	sub	sp, #12
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	bf00      	nop
 800db16:	370c      	adds	r7, #12
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr

0800db20 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	bf00      	nop
 800db2a:	370c      	adds	r7, #12
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr

0800db34 <_ZN6Module9configureEv>:
void Module::configure(){}
 800db34:	b480      	push	{r7}
 800db36:	b083      	sub	sp, #12
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	bf00      	nop
 800db3e:	370c      	adds	r7, #12
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr

0800db48 <_ZN13ModuleFactoryC1Ev>:
    ModuleCreator createServoModule(const char* modN);
    ModuleCreator createBaseModule(const char* modN);
    //unordered_map<const char*, unordered_map<const char*, ModuleCreator>> moduleCreators;

    // Private constructor for singleton
    ModuleFactory() {};
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	4618      	mov	r0, r3
 800db54:	370c      	adds	r7, #12
 800db56:	46bd      	mov	sp, r7
 800db58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5c:	4770      	bx	lr
	...

0800db60 <_ZN13ModuleFactory16createBaseModuleEPKc>:

#include "moduleList.h"
#include "moduleFactory.h"


ModuleCreator ModuleFactory::createBaseModule(const char* modN) {
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]

    if (strcmp(modN,"Stepgen") == 0)
 800db6a:	4907      	ldr	r1, [pc, #28]	@ (800db88 <_ZN13ModuleFactory16createBaseModuleEPKc+0x28>)
 800db6c:	6838      	ldr	r0, [r7, #0]
 800db6e:	f7f2 fbb7 	bl	80002e0 <strcmp>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d101      	bne.n	800db7c <_ZN13ModuleFactory16createBaseModuleEPKc+0x1c>
        return createStepgen;
 800db78:	4b04      	ldr	r3, [pc, #16]	@ (800db8c <_ZN13ModuleFactory16createBaseModuleEPKc+0x2c>)
 800db7a:	e000      	b.n	800db7e <_ZN13ModuleFactory16createBaseModuleEPKc+0x1e>

    if (strcmp(modN,"RCServo") == 0)
        return createRCServo;
*/

    return nullptr;
 800db7c:	2300      	movs	r3, #0
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3708      	adds	r7, #8
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	0801e68c 	.word	0x0801e68c
 800db8c:	0800dd59 	.word	0x0800dd59

0800db90 <_ZN13ModuleFactory17createServoModuleEPKc>:

// Servo thread modules
ModuleCreator ModuleFactory::createServoModule(const char* modN) {
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	6039      	str	r1, [r7, #0]

    if (strcmp(modN,"Blink") == 0)
 800db9a:	4907      	ldr	r1, [pc, #28]	@ (800dbb8 <_ZN13ModuleFactory17createServoModuleEPKc+0x28>)
 800db9c:	6838      	ldr	r0, [r7, #0]
 800db9e:	f7f2 fb9f 	bl	80002e0 <strcmp>
 800dba2:	4603      	mov	r3, r0
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d101      	bne.n	800dbac <_ZN13ModuleFactory17createServoModuleEPKc+0x1c>
        return createBlink;
 800dba8:	4b04      	ldr	r3, [pc, #16]	@ (800dbbc <_ZN13ModuleFactory17createServoModuleEPKc+0x2c>)
 800dbaa:	e000      	b.n	800dbae <_ZN13ModuleFactory17createServoModuleEPKc+0x1e>
        return createQEI;

    if (strcmp(modN,"Reset Pin") == 0)
        return createResetPin;
*/
    return nullptr;
 800dbac:	2300      	movs	r3, #0
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	0801e694 	.word	0x0801e694
 800dbbc:	0800bc1d 	.word	0x0800bc1d

0800dbc0 <_ZN13ModuleFactory18createOnLoadModuleEPKc>:

    // On load modules
ModuleCreator ModuleFactory::createOnLoadModule(const char* modN) {
 800dbc0:	b480      	push	{r7}
 800dbc2:	b083      	sub	sp, #12
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
        return createTMC2209;

    if (strcmp(modN,"TMC5160") == 0)
        return createTMC5160;
*/
    return nullptr;
 800dbca:	2300      	movs	r3, #0
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	370c      	adds	r7, #12
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr

0800dbd8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE>:

// Create module based on thread and type
std::shared_ptr<Module> ModuleFactory::createModule(const char* _tname,
                                   const char* _mtype,
                                   const JsonVariant config) {
 800dbd8:	b590      	push	{r4, r7, lr}
 800dbda:	b08b      	sub	sp, #44	@ 0x2c
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	60f8      	str	r0, [r7, #12]
 800dbe0:	60b9      	str	r1, [r7, #8]
 800dbe2:	607a      	str	r2, [r7, #4]
 800dbe4:	603b      	str	r3, [r7, #0]
    if (strcmp(_tname,"Base") == 0)
 800dbe6:	492b      	ldr	r1, [pc, #172]	@ (800dc94 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xbc>)
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f7f2 fb79 	bl	80002e0 <strcmp>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d112      	bne.n	800dc1a <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0x42>
        return createBaseModule(_mtype)(config);
 800dbf4:	6839      	ldr	r1, [r7, #0]
 800dbf6:	68b8      	ldr	r0, [r7, #8]
 800dbf8:	f7ff ffb2 	bl	800db60 <_ZN13ModuleFactory16createBaseModuleEPKc>
 800dbfc:	4604      	mov	r4, r0
 800dbfe:	f107 0310 	add.w	r3, r7, #16
 800dc02:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7f7 f94c 	bl	8004ea4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	f107 0210 	add.w	r2, r7, #16
 800dc12:	4611      	mov	r1, r2
 800dc14:	4618      	mov	r0, r3
 800dc16:	47a0      	blx	r4
        return createServoModule(_mtype)(config);
    if (strcmp(_tname,"On load") == 0)
        return createOnLoadModule(_mtype)(config); // Dont return On Load modules

    return nullptr;
}
 800dc18:	e037      	b.n	800dc8a <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xb2>
    if (strcmp(_tname,"Servo") == 0)
 800dc1a:	491f      	ldr	r1, [pc, #124]	@ (800dc98 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xc0>)
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f7f2 fb5f 	bl	80002e0 <strcmp>
 800dc22:	4603      	mov	r3, r0
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d112      	bne.n	800dc4e <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0x76>
        return createServoModule(_mtype)(config);
 800dc28:	6839      	ldr	r1, [r7, #0]
 800dc2a:	68b8      	ldr	r0, [r7, #8]
 800dc2c:	f7ff ffb0 	bl	800db90 <_ZN13ModuleFactory17createServoModuleEPKc>
 800dc30:	4604      	mov	r4, r0
 800dc32:	f107 0318 	add.w	r3, r7, #24
 800dc36:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7f7 f932 	bl	8004ea4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f107 0218 	add.w	r2, r7, #24
 800dc46:	4611      	mov	r1, r2
 800dc48:	4618      	mov	r0, r3
 800dc4a:	47a0      	blx	r4
}
 800dc4c:	e01d      	b.n	800dc8a <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xb2>
    if (strcmp(_tname,"On load") == 0)
 800dc4e:	4913      	ldr	r1, [pc, #76]	@ (800dc9c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xc4>)
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f7f2 fb45 	bl	80002e0 <strcmp>
 800dc56:	4603      	mov	r3, r0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d112      	bne.n	800dc82 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xaa>
        return createOnLoadModule(_mtype)(config); // Dont return On Load modules
 800dc5c:	6839      	ldr	r1, [r7, #0]
 800dc5e:	68b8      	ldr	r0, [r7, #8]
 800dc60:	f7ff ffae 	bl	800dbc0 <_ZN13ModuleFactory18createOnLoadModuleEPKc>
 800dc64:	4604      	mov	r4, r0
 800dc66:	f107 0320 	add.w	r3, r7, #32
 800dc6a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7f7 f918 	bl	8004ea4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f107 0220 	add.w	r2, r7, #32
 800dc7a:	4611      	mov	r1, r2
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	47a0      	blx	r4
}
 800dc80:	e003      	b.n	800dc8a <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xb2>
    return nullptr;
 800dc82:	2100      	movs	r1, #0
 800dc84:	68f8      	ldr	r0, [r7, #12]
 800dc86:	f000 f83b 	bl	800dd00 <_ZNSt10shared_ptrI6ModuleEC1EDn>
}
 800dc8a:	68f8      	ldr	r0, [r7, #12]
 800dc8c:	372c      	adds	r7, #44	@ 0x2c
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd90      	pop	{r4, r7, pc}
 800dc92:	bf00      	nop
 800dc94:	0801e69c 	.word	0x0801e69c
 800dc98:	0801e6a4 	.word	0x0801e6a4
 800dc9c:	0801e6ac 	.word	0x0801e6ac

0800dca0 <_ZN13ModuleFactory11getInstanceEv>:

// Static instance accessor
ModuleFactory* ModuleFactory::getInstance() {
 800dca0:	b598      	push	{r3, r4, r7, lr}
 800dca2:	af00      	add	r7, sp, #0
    static ModuleFactory* instance = new ModuleFactory();
 800dca4:	4b14      	ldr	r3, [pc, #80]	@ (800dcf8 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f3bf 8f5b 	dmb	ish
 800dcac:	f003 0301 	and.w	r3, r3, #1
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	bf0c      	ite	eq
 800dcb4:	2301      	moveq	r3, #1
 800dcb6:	2300      	movne	r3, #0
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d017      	beq.n	800dcee <_ZN13ModuleFactory11getInstanceEv+0x4e>
 800dcbe:	480e      	ldr	r0, [pc, #56]	@ (800dcf8 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 800dcc0:	f00e fddf 	bl	801c882 <__cxa_guard_acquire>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	bf14      	ite	ne
 800dcca:	2301      	movne	r3, #1
 800dccc:	2300      	moveq	r3, #0
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d00c      	beq.n	800dcee <_ZN13ModuleFactory11getInstanceEv+0x4e>
 800dcd4:	2001      	movs	r0, #1
 800dcd6:	f00e fde3 	bl	801c8a0 <_Znwj>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	461c      	mov	r4, r3
 800dcde:	4620      	mov	r0, r4
 800dce0:	f7ff ff32 	bl	800db48 <_ZN13ModuleFactoryC1Ev>
 800dce4:	4b05      	ldr	r3, [pc, #20]	@ (800dcfc <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 800dce6:	601c      	str	r4, [r3, #0]
 800dce8:	4803      	ldr	r0, [pc, #12]	@ (800dcf8 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 800dcea:	f00e fdd6 	bl	801c89a <__cxa_guard_release>
    return instance;
 800dcee:	4b03      	ldr	r3, [pc, #12]	@ (800dcfc <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	bd98      	pop	{r3, r4, r7, pc}
 800dcf6:	bf00      	nop
 800dcf8:	24000458 	.word	0x24000458
 800dcfc:	24000454 	.word	0x24000454

0800dd00 <_ZNSt10shared_ptrI6ModuleEC1EDn>:
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b082      	sub	sp, #8
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	6039      	str	r1, [r7, #0]
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 f805 	bl	800dd1a <_ZNSt10shared_ptrI6ModuleEC1Ev>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	4618      	mov	r0, r3
 800dd14:	3708      	adds	r7, #8
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}

0800dd1a <_ZNSt10shared_ptrI6ModuleEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 800dd1a:	b580      	push	{r7, lr}
 800dd1c:	b082      	sub	sp, #8
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	6078      	str	r0, [r7, #4]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	4618      	mov	r0, r3
 800dd26:	f000 f805 	bl	800dd34 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3708      	adds	r7, #8
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}

0800dd34 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	601a      	str	r2, [r3, #0]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	3304      	adds	r3, #4
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7fc f9a8 	bl	800a09c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3708      	adds	r7, #8
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}
	...

0800dd58 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE>:
 * 
 * @param config The JSON object containing the configuration for the Stepgen.
 * @return A unique pointer to the created Stepgen module.
 */
shared_ptr<Module> createStepgen(const JsonObject& config)
{
 800dd58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd5a:	b0b7      	sub	sp, #220	@ 0xdc
 800dd5c:	af08      	add	r7, sp, #32
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
    const char* comment = config["Comment"];
 800dd62:	f107 0320 	add.w	r3, r7, #32
 800dd66:	4a51      	ldr	r2, [pc, #324]	@ (800deac <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x154>)
 800dd68:	6839      	ldr	r1, [r7, #0]
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f000 fa4a 	bl	800e204 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800dd70:	f107 0320 	add.w	r3, r7, #32
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7f7 f8c9 	bl	8004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800dd7a:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
    uint32_t threadFreq = config["ThreadFreq"];
 800dd7e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800dd82:	4a4b      	ldr	r2, [pc, #300]	@ (800deb0 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x158>)
 800dd84:	6839      	ldr	r1, [r7, #0]
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7fe f83d 	bl	800be06 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800dd8c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800dd90:	4618      	mov	r0, r3
 800dd92:	f7f7 f8ec 	bl	8004f6e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 800dd96:	4603      	mov	r3, r0
 800dd98:	61fb      	str	r3, [r7, #28]

    printf("%s\n", comment);
 800dd9a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 800dd9e:	f00f fa7d 	bl	801d29c <puts>

    int joint = config["Joint Number"];
 800dda2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800dda6:	4a43      	ldr	r2, [pc, #268]	@ (800deb4 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x15c>)
 800dda8:	6839      	ldr	r1, [r7, #0]
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f000 fa4f 	bl	800e24e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800ddb0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7fe f81a 	bl	800bdee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	61bb      	str	r3, [r7, #24]
    const char* enable = config["Enable Pin"];
 800ddbe:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ddc2:	4a3d      	ldr	r2, [pc, #244]	@ (800deb8 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x160>)
 800ddc4:	6839      	ldr	r1, [r7, #0]
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7fe f81d 	bl	800be06 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800ddcc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7f7 f89b 	bl	8004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	617b      	str	r3, [r7, #20]
    const char* step = config["Step Pin"];
 800ddda:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800ddde:	4a37      	ldr	r2, [pc, #220]	@ (800debc <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x164>)
 800dde0:	6839      	ldr	r1, [r7, #0]
 800dde2:	4618      	mov	r0, r3
 800dde4:	f000 fa58 	bl	800e298 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800dde8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7f7 f88d 	bl	8004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	613b      	str	r3, [r7, #16]
    const char* dir = config["Direction Pin"];
 800ddf6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800ddfa:	4a31      	ldr	r2, [pc, #196]	@ (800dec0 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x168>)
 800ddfc:	6839      	ldr	r1, [r7, #0]
 800ddfe:	4618      	mov	r0, r3
 800de00:	f000 fa6f 	bl	800e2e2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800de04:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800de08:	4618      	mov	r0, r3
 800de0a:	f7f7 f87f 	bl	8004f0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800de0e:	4603      	mov	r3, r0
 800de10:	60fb      	str	r3, [r7, #12]

    // Configure pointers to data source and feedback location
    ptrJointFreqCmd[joint] = &rxData.jointFreqCmd[joint];
 800de12:	69ba      	ldr	r2, [r7, #24]
 800de14:	69bb      	ldr	r3, [r7, #24]
 800de16:	0092      	lsls	r2, r2, #2
 800de18:	492a      	ldr	r1, [pc, #168]	@ (800dec4 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x16c>)
 800de1a:	440a      	add	r2, r1
 800de1c:	3204      	adds	r2, #4
 800de1e:	492a      	ldr	r1, [pc, #168]	@ (800dec8 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x170>)
 800de20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ptrJointFeedback[joint] = &txData.jointFeedback[joint];
 800de24:	69ba      	ldr	r2, [r7, #24]
 800de26:	69bb      	ldr	r3, [r7, #24]
 800de28:	0092      	lsls	r2, r2, #2
 800de2a:	4928      	ldr	r1, [pc, #160]	@ (800decc <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x174>)
 800de2c:	440a      	add	r2, r1
 800de2e:	3204      	adds	r2, #4
 800de30:	4927      	ldr	r1, [pc, #156]	@ (800ded0 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x178>)
 800de32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ptrJointEnable = &rxData.jointEnable;
 800de36:	4b27      	ldr	r3, [pc, #156]	@ (800ded4 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x17c>)
 800de38:	4a27      	ldr	r2, [pc, #156]	@ (800ded8 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x180>)
 800de3a:	601a      	str	r2, [r3, #0]

    bool usesModulePost = true;		// stepgen uses the thread modulesPost vector
 800de3c:	2301      	movs	r3, #1
 800de3e:	72fb      	strb	r3, [r7, #11]

    // Create the step generator and register it in the thread
    return make_unique<Stepgen>(threadFreq, joint, enable, step, dir, Config::stepBit, *ptrJointFreqCmd[joint], *ptrJointFeedback[joint], *ptrJointEnable, usesModulePost);
 800de40:	69bb      	ldr	r3, [r7, #24]
 800de42:	4a21      	ldr	r2, [pc, #132]	@ (800dec8 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x170>)
 800de44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de48:	69ba      	ldr	r2, [r7, #24]
 800de4a:	4921      	ldr	r1, [pc, #132]	@ (800ded0 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x178>)
 800de4c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800de50:	4920      	ldr	r1, [pc, #128]	@ (800ded4 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x17c>)
 800de52:	6809      	ldr	r1, [r1, #0]
 800de54:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 800de58:	f107 0c14 	add.w	ip, r7, #20
 800de5c:	f107 0618 	add.w	r6, r7, #24
 800de60:	f107 051c 	add.w	r5, r7, #28
 800de64:	f107 000b 	add.w	r0, r7, #11
 800de68:	9006      	str	r0, [sp, #24]
 800de6a:	9105      	str	r1, [sp, #20]
 800de6c:	9204      	str	r2, [sp, #16]
 800de6e:	9303      	str	r3, [sp, #12]
 800de70:	4b1a      	ldr	r3, [pc, #104]	@ (800dedc <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x184>)
 800de72:	9302      	str	r3, [sp, #8]
 800de74:	f107 030c 	add.w	r3, r7, #12
 800de78:	9301      	str	r3, [sp, #4]
 800de7a:	f107 0310 	add.w	r3, r7, #16
 800de7e:	9300      	str	r3, [sp, #0]
 800de80:	4663      	mov	r3, ip
 800de82:	4632      	mov	r2, r6
 800de84:	4629      	mov	r1, r5
 800de86:	4620      	mov	r0, r4
 800de88:	f000 fa50 	bl	800e32c <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800de8c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800de90:	4619      	mov	r1, r3
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f000 fac6 	bl	800e424 <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 800de98:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800de9c:	4618      	mov	r0, r3
 800de9e:	f000 fa9f 	bl	800e3e0 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>
 800dea2:	bf00      	nop
}
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	37bc      	adds	r7, #188	@ 0xbc
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deac:	0801e6b4 	.word	0x0801e6b4
 800deb0:	0801e6bc 	.word	0x0801e6bc
 800deb4:	0801e6c8 	.word	0x0801e6c8
 800deb8:	0801e6d8 	.word	0x0801e6d8
 800debc:	0801e6e4 	.word	0x0801e6e4
 800dec0:	0801e6f0 	.word	0x0801e6f0
 800dec4:	300000c0 	.word	0x300000c0
 800dec8:	2400040c 	.word	0x2400040c
 800decc:	30000080 	.word	0x30000080
 800ded0:	2400042c 	.word	0x2400042c
 800ded4:	2400044c 	.word	0x2400044c
 800ded8:	300000fc 	.word	0x300000fc
 800dedc:	0801ea3c 	.word	0x0801ea3c

0800dee0 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>:
 * @param _stepBit The number of bits used for the step value.
 * @param _ptrFrequencyCommand A reference to the frequency command data for the joint.
 * @param _ptrFeedback A reference to the feedback data for the joint.
 * @param _ptrJointEnable A reference to the joint enable data.
 */
Stepgen::Stepgen(int32_t _threadFreq, int _jointNumber, const char* _enable, const char* _step, const char* _direction, int _stepBit, volatile int32_t& _ptrFrequencyCommand, volatile int32_t& _ptrFeedback,  volatile uint8_t& _ptrJointEnable, bool _usesModulePost)
 800dee0:	b590      	push	{r4, r7, lr}
 800dee2:	b09b      	sub	sp, #108	@ 0x6c
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
 800deec:	603b      	str	r3, [r7, #0]
      DDSaccumulator(0),
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
      mask(1 << _jointNumber),  // Mask for checking the joint number
      isEnabled(false),
      isForward(false),
      isStepping(false)
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	4618      	mov	r0, r3
 800def2:	f7ff fda3 	bl	800da3c <_ZN6ModuleC1Ev>
 800def6:	4a5c      	ldr	r2, [pc, #368]	@ (800e068 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb+0x188>)
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	601a      	str	r2, [r3, #0]
    : jointNumber(_jointNumber),
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	687a      	ldr	r2, [r7, #4]
 800df00:	619a      	str	r2, [r3, #24]
      enable(_enable),
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	683a      	ldr	r2, [r7, #0]
 800df06:	61da      	str	r2, [r3, #28]
      step(_step),
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800df0c:	621a      	str	r2, [r3, #32]
      direction(_direction),
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800df12:	625a      	str	r2, [r3, #36]	@ 0x24
      stepBit(_stepBit),
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800df1a:	629a      	str	r2, [r3, #40]	@ 0x28
      ptrFrequencyCommand(&_ptrFrequencyCommand),
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800df22:	62da      	str	r2, [r3, #44]	@ 0x2c
      ptrFeedback(&_ptrFeedback),
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800df2a:	631a      	str	r2, [r3, #48]	@ 0x30
      ptrJointEnable(&_ptrJointEnable),
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800df32:	635a      	str	r2, [r3, #52]	@ 0x34
	  enablePin(_enable, OUTPUT),
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 800df3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800df3e:	4618      	mov	r0, r3
 800df40:	f00e fcbf 	bl	801c8c2 <_ZNSaIcEC1Ev>
 800df44:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800df48:	f107 0314 	add.w	r3, r7, #20
 800df4c:	6839      	ldr	r1, [r7, #0]
 800df4e:	4618      	mov	r0, r3
 800df50:	f7f6 ff56 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800df54:	f107 0314 	add.w	r3, r7, #20
 800df58:	2201      	movs	r2, #1
 800df5a:	4619      	mov	r1, r3
 800df5c:	4620      	mov	r0, r4
 800df5e:	f7f4 f942 	bl	80021e6 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800df62:	f107 0314 	add.w	r3, r7, #20
 800df66:	4618      	mov	r0, r3
 800df68:	f00e fd46 	bl	801c9f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800df6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800df70:	4618      	mov	r0, r3
 800df72:	f00e fca7 	bl	801c8c4 <_ZNSaIcED1Ev>
      stepPin(_step, OUTPUT),
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f103 047c 	add.w	r4, r3, #124	@ 0x7c
 800df7c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800df80:	4618      	mov	r0, r3
 800df82:	f00e fc9e 	bl	801c8c2 <_ZNSaIcEC1Ev>
 800df86:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800df8a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800df8e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800df90:	4618      	mov	r0, r3
 800df92:	f7f6 ff35 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800df96:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800df9a:	2201      	movs	r2, #1
 800df9c:	4619      	mov	r1, r3
 800df9e:	4620      	mov	r0, r4
 800dfa0:	f7f4 f921 	bl	80021e6 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800dfa4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f00e fd25 	bl	801c9f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800dfae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f00e fc86 	bl	801c8c4 <_ZNSaIcED1Ev>
      directionPin(_direction, OUTPUT),
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f103 04c0 	add.w	r4, r3, #192	@ 0xc0
 800dfbe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f00e fc7d 	bl	801c8c2 <_ZNSaIcEC1Ev>
 800dfc8:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800dfcc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800dfd0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7f6 ff14 	bl	8004e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800dfd8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800dfdc:	2201      	movs	r2, #1
 800dfde:	4619      	mov	r1, r3
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	f7f4 f900 	bl	80021e6 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800dfe6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800dfea:	4618      	mov	r0, r3
 800dfec:	f00e fd04 	bl	801c9f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800dff0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800dff4:	4618      	mov	r0, r3
 800dff6:	f00e fc65 	bl	801c8c4 <_ZNSaIcED1Ev>
      rawCount(0),
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2200      	movs	r2, #0
 800dffe:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      DDSaccumulator(0),
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2200      	movs	r2, #0
 800e006:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
 800e00a:	2201      	movs	r2, #1
 800e00c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e010:	fa02 f303 	lsl.w	r3, r2, r3
 800e014:	ee07 3a90 	vmov	s15, r3
 800e018:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	ee07 3a90 	vmov	s15, r3
 800e022:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	edc3 7a43 	vstr	s15, [r3, #268]	@ 0x10c
      mask(1 << _jointNumber),  // Mask for checking the joint number
 800e030:	2201      	movs	r2, #1
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	409a      	lsls	r2, r3
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
      isEnabled(false),
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2200      	movs	r2, #0
 800e040:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
      isForward(false),
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	2200      	movs	r2, #0
 800e048:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
      isStepping(false)
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	2200      	movs	r2, #0
 800e050:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
{
	usesModulePost = _usesModulePost;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 800e05a:	751a      	strb	r2, [r3, #20]
}
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	4618      	mov	r0, r3
 800e060:	376c      	adds	r7, #108	@ 0x6c
 800e062:	46bd      	mov	sp, r7
 800e064:	bd90      	pop	{r4, r7, pc}
 800e066:	bf00      	nop
 800e068:	0801ea64 	.word	0x0801ea64

0800e06c <_ZN7Stepgen6updateEv>:
 * 
 * This method generates pulses for stepping according to the current
 * frequency command and direction.
 */
void Stepgen::update()
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
    makePulses();  // Generate pulses for stepping and direction
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f000 f819 	bl	800e0ac <_ZN7Stepgen10makePulsesEv>
}
 800e07a:	bf00      	nop
 800e07c:	3708      	adds	r7, #8
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}

0800e082 <_ZN7Stepgen10updatePostEv>:
 * @brief Post-update method for the Stepgen.
 * 
 * This method stops any ongoing pulses after the update phase.
 */
void Stepgen::updatePost()
{
 800e082:	b580      	push	{r7, lr}
 800e084:	b082      	sub	sp, #8
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
    stopPulses();  // Stop pulse generation after update
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f000 f8a8 	bl	800e1e0 <_ZN7Stepgen10stopPulsesEv>
}
 800e090:	bf00      	nop
 800e092:	3708      	adds	r7, #8
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <_ZN7Stepgen10slowUpdateEv>:
 * 
 * This is a placeholder for performing any slow or low-priority updates,
 * though it currently does nothing.
 */
void Stepgen::slowUpdate()
{
 800e098:	b480      	push	{r7}
 800e09a:	b083      	sub	sp, #12
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
    // Currently no operation for slow update
}
 800e0a0:	bf00      	nop
 800e0a2:	370c      	adds	r7, #12
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0aa:	4770      	bx	lr

0800e0ac <_ZN7Stepgen10makePulsesEv>:
 * This method calculates the next step and updates the step and direction
 * pins accordingly. It uses the DDS (Direct Digital Synthesis) technique
 * to generate precise frequency-based stepping.
 */
void Stepgen::makePulses()
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b084      	sub	sp, #16
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
    isEnabled = ((*(ptrJointEnable) & mask) != 0);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	461a      	mov	r2, r3
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800e0c4:	4013      	ands	r3, r2
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	bf14      	ite	ne
 800e0ca:	2301      	movne	r3, #1
 800e0cc:	2300      	moveq	r3, #0
 800e0ce:	b2da      	uxtb	r2, r3
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    if (!isEnabled)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800e0dc:	f083 0301 	eor.w	r3, r3, #1
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d006      	beq.n	800e0f4 <_ZN7Stepgen10makePulsesEv+0x48>
    {
        enablePin.set(true);  	// Disable the driver if not enabled
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	3338      	adds	r3, #56	@ 0x38
 800e0ea:	2101      	movs	r1, #1
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7fd fd77 	bl	800bbe0 <_ZN3Pin3setEb>
        return;  				// Exit early if the generator is disabled
 800e0f2:	e072      	b.n	800e1da <_ZN7Stepgen10makePulsesEv+0x12e>
    }

    enablePin.set(false); 		// Enable the driver
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	3338      	adds	r3, #56	@ 0x38
 800e0f8:	2100      	movs	r1, #0
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f7fd fd70 	bl	800bbe0 <_ZN3Pin3setEb>

    // Get the current frequency command and scale it using the frequency scale
    frequencyCommand = *ptrFrequencyCommand;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e104:	681a      	ldr	r2, [r3, #0]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
    DDSaddValue = frequencyCommand * frequencyScale;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e112:	ee07 3a90 	vmov	s15, r3
 800e116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	edd3 7a43 	vldr	s15, [r3, #268]	@ 0x10c
 800e120:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e128:	ee17 2a90 	vmov	r2, s15
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

    // Save the current DDS accumulator value and update it
    int32_t stepNow = DDSaccumulator;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e138:	60fb      	str	r3, [r7, #12]
    DDSaccumulator += DDSaddValue;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800e146:	441a      	add	r2, r3
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

    // Check for changes in the low half of the DDS accumulator
    stepNow ^= DDSaccumulator;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800e154:	68fa      	ldr	r2, [r7, #12]
 800e156:	4053      	eors	r3, r2
 800e158:	60fb      	str	r3, [r7, #12]
    stepNow &= (1L << stepBit);  // Check for the step bit
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e15e:	2201      	movs	r2, #1
 800e160:	fa02 f303 	lsl.w	r3, r2, r3
 800e164:	68fa      	ldr	r2, [r7, #12]
 800e166:	4013      	ands	r3, r2
 800e168:	60fb      	str	r3, [r7, #12]

    // Determine direction based on the sign of DDSaddValue
    isForward = DDSaddValue > 0;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800e170:	2b00      	cmp	r3, #0
 800e172:	bfcc      	ite	gt
 800e174:	2301      	movgt	r3, #1
 800e176:	2300      	movle	r3, #0
 800e178:	b2da      	uxtb	r2, r3
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d

    // If a step is to be made, set the direction and step pins accordingly
    if (stepNow)
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d029      	beq.n	800e1da <_ZN7Stepgen10makePulsesEv+0x12e>
    {
        directionPin.set(isForward);  // Set direction pin
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 800e192:	4619      	mov	r1, r3
 800e194:	4610      	mov	r0, r2
 800e196:	f7fd fd23 	bl	800bbe0 <_ZN3Pin3setEb>
        stepPin.set(true);  // Set the step pin
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	337c      	adds	r3, #124	@ 0x7c
 800e19e:	2101      	movs	r1, #1
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7fd fd1d 	bl	800bbe0 <_ZN3Pin3setEb>
        rawCount += (isForward ? 1 : -1);  // Update rawCount based on direction
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800e1ac:	687a      	ldr	r2, [r7, #4]
 800e1ae:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 800e1b2:	2a00      	cmp	r2, #0
 800e1b4:	d001      	beq.n	800e1ba <_ZN7Stepgen10makePulsesEv+0x10e>
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	e001      	b.n	800e1be <_ZN7Stepgen10makePulsesEv+0x112>
 800e1ba:	f04f 32ff 	mov.w	r2, #4294967295
 800e1be:	441a      	add	r2, r3
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
        *ptrFeedback = rawCount;  // Update the feedback with the raw count
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	f8d2 2104 	ldr.w	r2, [r2, #260]	@ 0x104
 800e1d0:	601a      	str	r2, [r3, #0]
        isStepping = true;  // Indicate that stepping is occurring
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
    }
}
 800e1da:	3710      	adds	r7, #16
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}

0800e1e0 <_ZN7Stepgen10stopPulsesEv>:
 * @brief Stops the pulse generation.
 * 
 * This method resets the step pin to low and stops any ongoing stepping.
 */
void Stepgen::stopPulses()
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
    stepPin.set(false);  // Reset step pin to low
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	337c      	adds	r3, #124	@ 0x7c
 800e1ec:	2100      	movs	r1, #0
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fd fcf6 	bl	800bbe0 <_ZN3Pin3setEb>
    isStepping = false;  // Indicate that stepping has stopped
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
}
 800e1fc:	bf00      	nop
 800e1fe:	3708      	adds	r7, #8
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800e204:	b580      	push	{r7, lr}
 800e206:	b08c      	sub	sp, #48	@ 0x30
 800e208:	af02      	add	r7, sp, #8
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800e210:	68ba      	ldr	r2, [r7, #8]
 800e212:	f107 0314 	add.w	r3, r7, #20
 800e216:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e21a:	e883 0003 	stmia.w	r3, {r0, r1}
 800e21e:	f107 031c 	add.w	r3, r7, #28
 800e222:	6879      	ldr	r1, [r7, #4]
 800e224:	4618      	mov	r0, r3
 800e226:	f7f7 f9b3 	bl	8005590 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800e22a:	466a      	mov	r2, sp
 800e22c:	f107 0320 	add.w	r3, r7, #32
 800e230:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e234:	e882 0003 	stmia.w	r2, {r0, r1}
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	f107 0214 	add.w	r2, r7, #20
 800e23e:	ca06      	ldmia	r2, {r1, r2}
 800e240:	68f8      	ldr	r0, [r7, #12]
 800e242:	f7f6 ffd2 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800e246:	68f8      	ldr	r0, [r7, #12]
 800e248:	3728      	adds	r7, #40	@ 0x28
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}

0800e24e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800e24e:	b580      	push	{r7, lr}
 800e250:	b08c      	sub	sp, #48	@ 0x30
 800e252:	af02      	add	r7, sp, #8
 800e254:	60f8      	str	r0, [r7, #12]
 800e256:	60b9      	str	r1, [r7, #8]
 800e258:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800e25a:	68ba      	ldr	r2, [r7, #8]
 800e25c:	f107 0314 	add.w	r3, r7, #20
 800e260:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e264:	e883 0003 	stmia.w	r3, {r0, r1}
 800e268:	f107 031c 	add.w	r3, r7, #28
 800e26c:	6879      	ldr	r1, [r7, #4]
 800e26e:	4618      	mov	r0, r3
 800e270:	f000 f8eb 	bl	800e44a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800e274:	466a      	mov	r2, sp
 800e276:	f107 0320 	add.w	r3, r7, #32
 800e27a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e27e:	e882 0003 	stmia.w	r2, {r0, r1}
 800e282:	69fb      	ldr	r3, [r7, #28]
 800e284:	f107 0214 	add.w	r2, r7, #20
 800e288:	ca06      	ldmia	r2, {r1, r2}
 800e28a:	68f8      	ldr	r0, [r7, #12]
 800e28c:	f7f6 ffad 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800e290:	68f8      	ldr	r0, [r7, #12]
 800e292:	3728      	adds	r7, #40	@ 0x28
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800e298:	b580      	push	{r7, lr}
 800e29a:	b08c      	sub	sp, #48	@ 0x30
 800e29c:	af02      	add	r7, sp, #8
 800e29e:	60f8      	str	r0, [r7, #12]
 800e2a0:	60b9      	str	r1, [r7, #8]
 800e2a2:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800e2a4:	68ba      	ldr	r2, [r7, #8]
 800e2a6:	f107 0314 	add.w	r3, r7, #20
 800e2aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e2ae:	e883 0003 	stmia.w	r3, {r0, r1}
 800e2b2:	f107 031c 	add.w	r3, r7, #28
 800e2b6:	6879      	ldr	r1, [r7, #4]
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f000 f8d9 	bl	800e470 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800e2be:	466a      	mov	r2, sp
 800e2c0:	f107 0320 	add.w	r3, r7, #32
 800e2c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e2c8:	e882 0003 	stmia.w	r2, {r0, r1}
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	f107 0214 	add.w	r2, r7, #20
 800e2d2:	ca06      	ldmia	r2, {r1, r2}
 800e2d4:	68f8      	ldr	r0, [r7, #12]
 800e2d6:	f7f6 ff88 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	3728      	adds	r7, #40	@ 0x28
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}

0800e2e2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800e2e2:	b580      	push	{r7, lr}
 800e2e4:	b08c      	sub	sp, #48	@ 0x30
 800e2e6:	af02      	add	r7, sp, #8
 800e2e8:	60f8      	str	r0, [r7, #12]
 800e2ea:	60b9      	str	r1, [r7, #8]
 800e2ec:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800e2ee:	68ba      	ldr	r2, [r7, #8]
 800e2f0:	f107 0314 	add.w	r3, r7, #20
 800e2f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e2f8:	e883 0003 	stmia.w	r3, {r0, r1}
 800e2fc:	f107 031c 	add.w	r3, r7, #28
 800e300:	6879      	ldr	r1, [r7, #4]
 800e302:	4618      	mov	r0, r3
 800e304:	f000 f8c7 	bl	800e496 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800e308:	466a      	mov	r2, sp
 800e30a:	f107 0320 	add.w	r3, r7, #32
 800e30e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e312:	e882 0003 	stmia.w	r2, {r0, r1}
 800e316:	69fb      	ldr	r3, [r7, #28]
 800e318:	f107 0214 	add.w	r2, r7, #20
 800e31c:	ca06      	ldmia	r2, {r1, r2}
 800e31e:	68f8      	ldr	r0, [r7, #12]
 800e320:	f7f6 ff63 	bl	80051ea <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800e324:	68f8      	ldr	r0, [r7, #12]
 800e326:	3728      	adds	r7, #40	@ 0x28
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800e32c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e330:	b093      	sub	sp, #76	@ 0x4c
 800e332:	af08      	add	r7, sp, #32
 800e334:	6278      	str	r0, [r7, #36]	@ 0x24
 800e336:	6239      	str	r1, [r7, #32]
 800e338:	61fa      	str	r2, [r7, #28]
 800e33a:	61bb      	str	r3, [r7, #24]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800e33c:	f44f 7090 	mov.w	r0, #288	@ 0x120
 800e340:	f00e faae 	bl	801c8a0 <_Znwj>
 800e344:	4603      	mov	r3, r0
 800e346:	4698      	mov	r8, r3
 800e348:	6a38      	ldr	r0, [r7, #32]
 800e34a:	f7fb fcba 	bl	8009cc2 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800e34e:	4603      	mov	r3, r0
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	4699      	mov	r9, r3
 800e354:	69f8      	ldr	r0, [r7, #28]
 800e356:	f7fd fe98 	bl	800c08a <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800e35a:	4603      	mov	r3, r0
 800e35c:	681e      	ldr	r6, [r3, #0]
 800e35e:	69b8      	ldr	r0, [r7, #24]
 800e360:	f7fd fe88 	bl	800c074 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800e364:	4603      	mov	r3, r0
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	617b      	str	r3, [r7, #20]
 800e36a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800e36c:	f7fd fe82 	bl	800c074 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800e370:	4603      	mov	r3, r0
 800e372:	681c      	ldr	r4, [r3, #0]
 800e374:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800e376:	f7fd fe7d 	bl	800c074 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800e37a:	4603      	mov	r3, r0
 800e37c:	681d      	ldr	r5, [r3, #0]
 800e37e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800e380:	f7fb fcaa 	bl	8009cd8 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800e384:	4603      	mov	r3, r0
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	613b      	str	r3, [r7, #16]
 800e38a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800e38c:	f000 f896 	bl	800e4bc <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 800e390:	60f8      	str	r0, [r7, #12]
 800e392:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e394:	f000 f892 	bl	800e4bc <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 800e398:	60b8      	str	r0, [r7, #8]
 800e39a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800e39c:	f000 f899 	bl	800e4d2 <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>
 800e3a0:	6078      	str	r0, [r7, #4]
 800e3a2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800e3a4:	f000 f8a0 	bl	800e4e8 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	9306      	str	r3, [sp, #24]
 800e3ae:	687a      	ldr	r2, [r7, #4]
 800e3b0:	9205      	str	r2, [sp, #20]
 800e3b2:	68ba      	ldr	r2, [r7, #8]
 800e3b4:	9204      	str	r2, [sp, #16]
 800e3b6:	68fa      	ldr	r2, [r7, #12]
 800e3b8:	9203      	str	r2, [sp, #12]
 800e3ba:	693a      	ldr	r2, [r7, #16]
 800e3bc:	9202      	str	r2, [sp, #8]
 800e3be:	9501      	str	r5, [sp, #4]
 800e3c0:	9400      	str	r4, [sp, #0]
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	4632      	mov	r2, r6
 800e3c6:	4649      	mov	r1, r9
 800e3c8:	4640      	mov	r0, r8
 800e3ca:	f7ff fd89 	bl	800dee0 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>
 800e3ce:	4641      	mov	r1, r8
 800e3d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e3d2:	f000 f8a4 	bl	800e51e <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800e3d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e3d8:	372c      	adds	r7, #44	@ 0x2c
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e3e0 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800e3e0:	b590      	push	{r4, r7, lr}
 800e3e2:	b085      	sub	sp, #20
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f000 f8a6 	bl	800e53c <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 800e3f0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d00c      	beq.n	800e414 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f000 f8ab 	bl	800e556 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 800e400:	4604      	mov	r4, r0
 800e402:	68f8      	ldr	r0, [r7, #12]
 800e404:	f000 f8b4 	bl	800e570 <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>
 800e408:	4603      	mov	r3, r0
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	4619      	mov	r1, r3
 800e40e:	4620      	mov	r0, r4
 800e410:	f000 f8ed 	bl	800e5ee <_ZNKSt14default_deleteI7StepgenEclEPS0_>
	__ptr = pointer();
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2200      	movs	r2, #0
 800e418:	601a      	str	r2, [r3, #0]
      }
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	4618      	mov	r0, r3
 800e41e:	3714      	adds	r7, #20
 800e420:	46bd      	mov	sp, r7
 800e422:	bd90      	pop	{r4, r7, pc}

0800e424 <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800e424:	b590      	push	{r4, r7, lr}
 800e426:	b083      	sub	sp, #12
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800e42e:	687c      	ldr	r4, [r7, #4]
 800e430:	6838      	ldr	r0, [r7, #0]
 800e432:	f000 f8ed 	bl	800e610 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800e436:	4603      	mov	r3, r0
 800e438:	4619      	mov	r1, r3
 800e43a:	4620      	mov	r0, r4
 800e43c:	f000 f8f3 	bl	800e626 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	4618      	mov	r0, r3
 800e444:	370c      	adds	r7, #12
 800e446:	46bd      	mov	sp, r7
 800e448:	bd90      	pop	{r4, r7, pc}

0800e44a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b082      	sub	sp, #8
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
 800e452:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800e454:	6838      	ldr	r0, [r7, #0]
 800e456:	f000 f91e 	bl	800e696 <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800e45a:	4602      	mov	r2, r0
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	4611      	mov	r1, r2
 800e460:	4618      	mov	r0, r3
 800e462:	f000 f923 	bl	800e6ac <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>
 800e466:	bf00      	nop
}
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	3708      	adds	r7, #8
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800e470:	b580      	push	{r7, lr}
 800e472:	b082      	sub	sp, #8
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800e47a:	6838      	ldr	r0, [r7, #0]
 800e47c:	f000 f925 	bl	800e6ca <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800e480:	4602      	mov	r2, r0
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	4611      	mov	r1, r2
 800e486:	4618      	mov	r0, r3
 800e488:	f000 f92a 	bl	800e6e0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>
 800e48c:	bf00      	nop
}
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	3708      	adds	r7, #8
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}

0800e496 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800e496:	b580      	push	{r7, lr}
 800e498:	b082      	sub	sp, #8
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	6078      	str	r0, [r7, #4]
 800e49e:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800e4a0:	6838      	ldr	r0, [r7, #0]
 800e4a2:	f000 f92c 	bl	800e6fe <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	4611      	mov	r1, r2
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f000 f931 	bl	800e714 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>
 800e4b2:	bf00      	nop
}
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	3708      	adds	r7, #8
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e4bc:	b480      	push	{r7}
 800e4be:	b083      	sub	sp, #12
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	370c      	adds	r7, #12
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr

0800e4d2 <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e4d2:	b480      	push	{r7}
 800e4d4:	b083      	sub	sp, #12
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	370c      	adds	r7, #12
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e6:	4770      	bx	lr

0800e4e8 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e4e8:	b480      	push	{r7}
 800e4ea:	b083      	sub	sp, #12
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	370c      	adds	r7, #12
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fc:	4770      	bx	lr

0800e4fe <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800e4fe:	b580      	push	{r7, lr}
 800e500:	b082      	sub	sp, #8
 800e502:	af00      	add	r7, sp, #0
 800e504:	6078      	str	r0, [r7, #4]
 800e506:	6039      	str	r1, [r7, #0]
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	683a      	ldr	r2, [r7, #0]
 800e50c:	4611      	mov	r1, r2
 800e50e:	4618      	mov	r0, r3
 800e510:	f000 f90f 	bl	800e732 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	4618      	mov	r0, r3
 800e518:	3708      	adds	r7, #8
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}

0800e51e <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800e51e:	b580      	push	{r7, lr}
 800e520:	b082      	sub	sp, #8
 800e522:	af00      	add	r7, sp, #0
 800e524:	6078      	str	r0, [r7, #4]
 800e526:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6839      	ldr	r1, [r7, #0]
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7ff ffe6 	bl	800e4fe <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	4618      	mov	r0, r3
 800e536:	3708      	adds	r7, #8
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	4618      	mov	r0, r3
 800e548:	f000 f907 	bl	800e75a <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800e54c:	4603      	mov	r3, r0
 800e54e:	4618      	mov	r0, r3
 800e550:	3708      	adds	r7, #8
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}

0800e556 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800e556:	b580      	push	{r7, lr}
 800e558:	b082      	sub	sp, #8
 800e55a:	af00      	add	r7, sp, #0
 800e55c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	4618      	mov	r0, r3
 800e562:	f000 f907 	bl	800e774 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>
 800e566:	4603      	mov	r3, r0
 800e568:	4618      	mov	r0, r3
 800e56a:	3708      	adds	r7, #8
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800e570:	b480      	push	{r7}
 800e572:	b083      	sub	sp, #12
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	4618      	mov	r0, r3
 800e57c:	370c      	adds	r7, #12
 800e57e:	46bd      	mov	sp, r7
 800e580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e584:	4770      	bx	lr
	...

0800e588 <_ZN7StepgenD1Ev>:
 *
 * The Stepgen class is responsible for controlling a stepper motor by generating
 * pulses based on frequency commands received from a controller, as well as managing
 * the motor's direction and enable states.
 */
class Stepgen : public Module
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	4a0d      	ldr	r2, [pc, #52]	@ (800e5c8 <_ZN7StepgenD1Ev+0x40>)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	601a      	str	r2, [r3, #0]
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	33c0      	adds	r3, #192	@ 0xc0
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7fd fe8f 	bl	800c2be <_ZN3PinD1Ev>
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	337c      	adds	r3, #124	@ 0x7c
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7fd fe8a 	bl	800c2be <_ZN3PinD1Ev>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	3338      	adds	r3, #56	@ 0x38
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7fd fe85 	bl	800c2be <_ZN3PinD1Ev>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7ff fa5c 	bl	800da74 <_ZN6ModuleD1Ev>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3708      	adds	r7, #8
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	bf00      	nop
 800e5c8:	0801ea64 	.word	0x0801ea64

0800e5cc <_ZN7StepgenD0Ev>:
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f7ff ffd7 	bl	800e588 <_ZN7StepgenD1Ev>
 800e5da:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f00e f94d 	bl	801c87e <_ZdlPvj>
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3708      	adds	r7, #8
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}

0800e5ee <_ZNKSt14default_deleteI7StepgenEclEPS0_>:
      operator()(_Tp* __ptr) const
 800e5ee:	b580      	push	{r7, lr}
 800e5f0:	b082      	sub	sp, #8
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	6078      	str	r0, [r7, #4]
 800e5f6:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d004      	beq.n	800e608 <_ZNKSt14default_deleteI7StepgenEclEPS0_+0x1a>
 800e5fe:	681a      	ldr	r2, [r3, #0]
 800e600:	3204      	adds	r2, #4
 800e602:	6812      	ldr	r2, [r2, #0]
 800e604:	4618      	mov	r0, r3
 800e606:	4790      	blx	r2
      }
 800e608:	bf00      	nop
 800e60a:	3708      	adds	r7, #8
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}

0800e610 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800e610:	b480      	push	{r7}
 800e612:	b083      	sub	sp, #12
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	4618      	mov	r0, r3
 800e61c:	370c      	adds	r7, #12
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr

0800e626 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800e626:	b580      	push	{r7, lr}
 800e628:	b084      	sub	sp, #16
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	6078      	str	r0, [r7, #4]
 800e62e:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 800e630:	6838      	ldr	r0, [r7, #0]
 800e632:	f000 f8ac 	bl	800e78e <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 800e636:	4602      	mov	r2, r0
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	601a      	str	r2, [r3, #0]
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	3304      	adds	r3, #4
 800e640:	4618      	mov	r0, r3
 800e642:	f7fb fd2b 	bl	800a09c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 800e646:	6838      	ldr	r0, [r7, #0]
 800e648:	f000 f8a1 	bl	800e78e <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 800e64c:	4603      	mov	r3, r0
 800e64e:	4618      	mov	r0, r3
 800e650:	f000 f8aa 	bl	800e7a8 <_ZSt12__to_addressI7StepgenEPT_S2_>
 800e654:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 800e656:	6838      	ldr	r0, [r7, #0]
 800e658:	f7ff ffda 	bl	800e610 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800e65c:	4602      	mov	r2, r0
 800e65e:	f107 0308 	add.w	r3, r7, #8
 800e662:	4611      	mov	r1, r2
 800e664:	4618      	mov	r0, r3
 800e666:	f000 f8aa 	bl	800e7be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	3304      	adds	r3, #4
 800e66e:	f107 0208 	add.w	r2, r7, #8
 800e672:	4611      	mov	r1, r2
 800e674:	4618      	mov	r0, r3
 800e676:	f7fd ff0f 	bl	800c498 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800e67a:	f107 0308 	add.w	r3, r7, #8
 800e67e:	4618      	mov	r0, r3
 800e680:	f7fa fd46 	bl	8009110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 800e684:	68f9      	ldr	r1, [r7, #12]
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f000 f8db 	bl	800e842 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	4618      	mov	r0, r3
 800e690:	3710      	adds	r7, #16
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800e696:	b480      	push	{r7}
 800e698:	b083      	sub	sp, #12
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800e69e:	687b      	ldr	r3, [r7, #4]
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	370c      	adds	r7, #12
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6aa:	4770      	bx	lr

0800e6ac <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b082      	sub	sp, #8
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
 800e6b4:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	220c      	movs	r2, #12
 800e6ba:	6839      	ldr	r1, [r7, #0]
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f7f4 f80f 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	3708      	adds	r7, #8
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}

0800e6ca <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800e6ca:	b480      	push	{r7}
 800e6cc:	b083      	sub	sp, #12
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800e6d2:	687b      	ldr	r3, [r7, #4]
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	370c      	adds	r7, #12
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6de:	4770      	bx	lr

0800e6e0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	2208      	movs	r2, #8
 800e6ee:	6839      	ldr	r1, [r7, #0]
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f7f3 fff5 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	3708      	adds	r7, #8
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}

0800e6fe <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800e6fe:	b480      	push	{r7}
 800e700:	b083      	sub	sp, #12
 800e702:	af00      	add	r7, sp, #0
 800e704:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800e706:	687b      	ldr	r3, [r7, #4]
}
 800e708:	4618      	mov	r0, r3
 800e70a:	370c      	adds	r7, #12
 800e70c:	46bd      	mov	sp, r7
 800e70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e712:	4770      	bx	lr

0800e714 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800e714:	b580      	push	{r7, lr}
 800e716:	b082      	sub	sp, #8
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800e71e:	2301      	movs	r3, #1
 800e720:	220d      	movs	r2, #13
 800e722:	6839      	ldr	r1, [r7, #0]
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f7f3 ffdb 	bl	80026e0 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	3708      	adds	r7, #8
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}

0800e732 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800e732:	b590      	push	{r4, r7, lr}
 800e734:	b083      	sub	sp, #12
 800e736:	af00      	add	r7, sp, #0
 800e738:	6078      	str	r0, [r7, #4]
 800e73a:	6039      	str	r1, [r7, #0]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	4618      	mov	r0, r3
 800e740:	f000 f88a 	bl	800e858 <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800e744:	683c      	ldr	r4, [r7, #0]
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f7ff fef8 	bl	800e53c <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 800e74c:	4603      	mov	r3, r0
 800e74e:	601c      	str	r4, [r3, #0]
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	4618      	mov	r0, r3
 800e754:	370c      	adds	r7, #12
 800e756:	46bd      	mov	sp, r7
 800e758:	bd90      	pop	{r4, r7, pc}

0800e75a <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b082      	sub	sp, #8
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	4618      	mov	r0, r3
 800e766:	f000 f884 	bl	800e872 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800e76a:	4603      	mov	r3, r0
 800e76c:	4618      	mov	r0, r3
 800e76e:	3708      	adds	r7, #8
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	4618      	mov	r0, r3
 800e780:	f000 f883 	bl	800e88a <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800e784:	4603      	mov	r3, r0
 800e786:	4618      	mov	r0, r3
 800e788:	3708      	adds	r7, #8
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}

0800e78e <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800e78e:	b580      	push	{r7, lr}
 800e790:	b082      	sub	sp, #8
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	4618      	mov	r0, r3
 800e79a:	f000 f882 	bl	800e8a2 <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3708      	adds	r7, #8
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}

0800e7a8 <_ZSt12__to_addressI7StepgenEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
      return __ptr;
 800e7b0:	687b      	ldr	r3, [r7, #4]
    }
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	370c      	adds	r7, #12
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr

0800e7be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 800e7be:	b580      	push	{r7, lr}
 800e7c0:	b086      	sub	sp, #24
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	6078      	str	r0, [r7, #4]
 800e7c6:	6039      	str	r1, [r7, #0]
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 800e7ce:	6838      	ldr	r0, [r7, #0]
 800e7d0:	f7ff ffdd 	bl	800e78e <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	bf0c      	ite	eq
 800e7da:	2301      	moveq	r3, #1
 800e7dc:	2300      	movne	r3, #0
 800e7de:	b2db      	uxtb	r3, r3
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d128      	bne.n	800e836 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 800e7e4:	f107 030c 	add.w	r3, r7, #12
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f000 f868 	bl	800e8be <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 800e7ee:	f107 030c 	add.w	r3, r7, #12
 800e7f2:	2101      	movs	r1, #1
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f000 f87a 	bl	800e8ee <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 800e7fa:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800e7fc:	6838      	ldr	r0, [r7, #0]
 800e7fe:	f000 f885 	bl	800e90c <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>
 800e802:	4603      	mov	r3, r0
 800e804:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 800e806:	6838      	ldr	r0, [r7, #0]
 800e808:	f7ff fea5 	bl	800e556 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 800e80c:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800e80e:	4618      	mov	r0, r3
 800e810:	f000 f889 	bl	800e926 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e814:	4603      	mov	r3, r0
 800e816:	f107 0210 	add.w	r2, r7, #16
 800e81a:	f107 000c 	add.w	r0, r7, #12
 800e81e:	6979      	ldr	r1, [r7, #20]
 800e820:	f000 f88c 	bl	800e93c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	697a      	ldr	r2, [r7, #20]
 800e828:	601a      	str	r2, [r3, #0]
	}
 800e82a:	f107 030c 	add.w	r3, r7, #12
 800e82e:	4618      	mov	r0, r3
 800e830:	f000 f851 	bl	800e8d6 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800e834:	e000      	b.n	800e838 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 800e836:	bf00      	nop
	}
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	4618      	mov	r0, r3
 800e83c:	3718      	adds	r7, #24
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}

0800e842 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800e842:	b480      	push	{r7}
 800e844:	b083      	sub	sp, #12
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
 800e84a:	6039      	str	r1, [r7, #0]
	{ }
 800e84c:	bf00      	nop
 800e84e:	370c      	adds	r7, #12
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr

0800e858 <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800e858:	b580      	push	{r7, lr}
 800e85a:	b082      	sub	sp, #8
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	4618      	mov	r0, r3
 800e864:	f000 f882 	bl	800e96c <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	4618      	mov	r0, r3
 800e86c:	3708      	adds	r7, #8
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}

0800e872 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e872:	b580      	push	{r7, lr}
 800e874:	b082      	sub	sp, #8
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f000 f886 	bl	800e98c <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>
 800e880:	4603      	mov	r3, r0
 800e882:	4618      	mov	r0, r3
 800e884:	3708      	adds	r7, #8
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}

0800e88a <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800e88a:	b580      	push	{r7, lr}
 800e88c:	b082      	sub	sp, #8
 800e88e:	af00      	add	r7, sp, #0
 800e890:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f000 f887 	bl	800e9a6 <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800e898:	4603      	mov	r3, r0
 800e89a:	4618      	mov	r0, r3
 800e89c:	3708      	adds	r7, #8
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b082      	sub	sp, #8
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	6078      	str	r0, [r7, #4]
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f000 f886 	bl	800e9be <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3708      	adds	r7, #8
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}

0800e8be <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800e8be:	b580      	push	{r7, lr}
 800e8c0:	b082      	sub	sp, #8
 800e8c2:	af00      	add	r7, sp, #0
 800e8c4:	6078      	str	r0, [r7, #4]
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 f886 	bl	800e9d8 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3708      	adds	r7, #8
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}

0800e8d6 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800e8d6:	b580      	push	{r7, lr}
 800e8d8:	b082      	sub	sp, #8
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	6078      	str	r0, [r7, #4]
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f000 f885 	bl	800e9ee <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3708      	adds	r7, #8
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}

0800e8ee <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800e8ee:	b580      	push	{r7, lr}
 800e8f0:	b082      	sub	sp, #8
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	6078      	str	r0, [r7, #4]
 800e8f6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	6839      	ldr	r1, [r7, #0]
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f000 f881 	bl	800ea04 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800e902:	4603      	mov	r3, r0
 800e904:	4618      	mov	r0, r3
 800e906:	3708      	adds	r7, #8
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}

0800e90c <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	4618      	mov	r0, r3
 800e918:	f000 f89e 	bl	800ea58 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>
 800e91c:	4603      	mov	r3, r0
 800e91e:	4618      	mov	r0, r3
 800e920:	3708      	adds	r7, #8
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}

0800e926 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e926:	b480      	push	{r7}
 800e928:	b083      	sub	sp, #12
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	4618      	mov	r0, r3
 800e932:	370c      	adds	r7, #12
 800e934:	46bd      	mov	sp, r7
 800e936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93a:	4770      	bx	lr

0800e93c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800e93c:	b590      	push	{r4, r7, lr}
 800e93e:	b085      	sub	sp, #20
 800e940:	af00      	add	r7, sp, #0
 800e942:	60f8      	str	r0, [r7, #12]
 800e944:	60b9      	str	r1, [r7, #8]
 800e946:	607a      	str	r2, [r7, #4]
 800e948:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f000 f899 	bl	800ea82 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 800e950:	4604      	mov	r4, r0
 800e952:	6838      	ldr	r0, [r7, #0]
 800e954:	f7ff ffe7 	bl	800e926 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e958:	4603      	mov	r3, r0
 800e95a:	4622      	mov	r2, r4
 800e95c:	68b9      	ldr	r1, [r7, #8]
 800e95e:	68f8      	ldr	r0, [r7, #12]
 800e960:	f000 f89a 	bl	800ea98 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 800e964:	bf00      	nop
 800e966:	3714      	adds	r7, #20
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd90      	pop	{r4, r7, pc}

0800e96c <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f000 f8ad 	bl	800ead4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4618      	mov	r0, r3
 800e97e:	f000 f8b5 	bl	800eaec <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	4618      	mov	r0, r3
 800e986:	3708      	adds	r7, #8
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	4618      	mov	r0, r3
 800e998:	f000 f8b6 	bl	800eb08 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>
 800e99c:	4603      	mov	r3, r0
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3708      	adds	r7, #8
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}

0800e9a6 <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e9a6:	b580      	push	{r7, lr}
 800e9a8:	b082      	sub	sp, #8
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f000 f8b5 	bl	800eb1e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3708      	adds	r7, #8
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}

0800e9be <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800e9be:	b580      	push	{r7, lr}
 800e9c0:	b082      	sub	sp, #8
 800e9c2:	af00      	add	r7, sp, #0
 800e9c4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f000 f8b4 	bl	800eb36 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e9d8:	b480      	push	{r7}
 800e9da:	b083      	sub	sp, #12
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	370c      	adds	r7, #12
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr

0800e9ee <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e9ee:	b480      	push	{r7}
 800e9f0:	b083      	sub	sp, #12
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	370c      	adds	r7, #12
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr

0800ea04 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b084      	sub	sp, #16
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	60f8      	str	r0, [r7, #12]
 800ea0c:	60b9      	str	r1, [r7, #8]
 800ea0e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800ea10:	68f8      	ldr	r0, [r7, #12]
 800ea12:	f000 f89c 	bl	800eb4e <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800ea16:	4602      	mov	r2, r0
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	4293      	cmp	r3, r2
 800ea1c:	bf8c      	ite	hi
 800ea1e:	2301      	movhi	r3, #1
 800ea20:	2300      	movls	r3, #0
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	bf14      	ite	ne
 800ea28:	2301      	movne	r3, #1
 800ea2a:	2300      	moveq	r3, #0
 800ea2c:	b2db      	uxtb	r3, r3
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d007      	beq.n	800ea42 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea38:	d301      	bcc.n	800ea3e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800ea3a:	f00d ff47 	bl	801c8cc <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800ea3e:	f00d ff42 	bl	801c8c6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	011b      	lsls	r3, r3, #4
 800ea46:	4618      	mov	r0, r3
 800ea48:	f00d ff2a 	bl	801c8a0 <_Znwj>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	bf00      	nop
      }
 800ea50:	4618      	mov	r0, r3
 800ea52:	3710      	adds	r7, #16
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b084      	sub	sp, #16
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f7ff fd6b 	bl	800e53c <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 800ea66:	4603      	mov	r3, r0
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f7ff fd65 	bl	800e53c <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 800ea72:	4603      	mov	r3, r0
 800ea74:	2200      	movs	r2, #0
 800ea76:	601a      	str	r2, [r3, #0]
	return __p;
 800ea78:	68fb      	ldr	r3, [r7, #12]
      }
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3710      	adds	r7, #16
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}

0800ea82 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ea82:	b480      	push	{r7}
 800ea84:	b083      	sub	sp, #12
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	370c      	adds	r7, #12
 800ea90:	46bd      	mov	sp, r7
 800ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea96:	4770      	bx	lr

0800ea98 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800ea98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea9a:	b085      	sub	sp, #20
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	60f8      	str	r0, [r7, #12]
 800eaa0:	60b9      	str	r1, [r7, #8]
 800eaa2:	607a      	str	r2, [r7, #4]
 800eaa4:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	2010      	movs	r0, #16
 800eaac:	f7f9 f9ea 	bl	8007e84 <_ZnwjPv>
 800eab0:	4605      	mov	r5, r0
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f7ff ffe5 	bl	800ea82 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 800eab8:	4603      	mov	r3, r0
 800eaba:	681c      	ldr	r4, [r3, #0]
 800eabc:	6838      	ldr	r0, [r7, #0]
 800eabe:	f7ff ff32 	bl	800e926 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 800eac2:	4632      	mov	r2, r6
 800eac4:	4621      	mov	r1, r4
 800eac6:	4628      	mov	r0, r5
 800eac8:	f000 f84e 	bl	800eb68 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 800eacc:	bf00      	nop
 800eace:	3714      	adds	r7, #20
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ead4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>:
      _Tuple_impl()
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f000 f865 	bl	800ebac <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	4618      	mov	r0, r3
 800eae6:	3708      	adds	r7, #8
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>:
      constexpr _Head_base()
 800eaec:	b480      	push	{r7}
 800eaee:	b083      	sub	sp, #12
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	601a      	str	r2, [r3, #0]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	4618      	mov	r0, r3
 800eafe:	370c      	adds	r7, #12
 800eb00:	46bd      	mov	sp, r7
 800eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb06:	4770      	bx	lr

0800eb08 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800eb08:	b480      	push	{r7}
 800eb0a:	b083      	sub	sp, #12
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	4618      	mov	r0, r3
 800eb14:	370c      	adds	r7, #12
 800eb16:	46bd      	mov	sp, r7
 800eb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1c:	4770      	bx	lr

0800eb1e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800eb1e:	b580      	push	{r7, lr}
 800eb20:	b082      	sub	sp, #8
 800eb22:	af00      	add	r7, sp, #0
 800eb24:	6078      	str	r0, [r7, #4]
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f000 f84b 	bl	800ebc2 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3708      	adds	r7, #8
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}

0800eb36 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800eb36:	b580      	push	{r7, lr}
 800eb38:	b082      	sub	sp, #8
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f000 f84a 	bl	800ebd8 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>
 800eb44:	4603      	mov	r3, r0
 800eb46:	4618      	mov	r0, r3
 800eb48:	3708      	adds	r7, #8
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}

0800eb4e <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800eb4e:	b480      	push	{r7}
 800eb50:	b083      	sub	sp, #12
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800eb56:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	370c      	adds	r7, #12
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb64:	4770      	bx	lr
	...

0800eb68 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 800eb68:	b5b0      	push	{r4, r5, r7, lr}
 800eb6a:	b086      	sub	sp, #24
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	60b9      	str	r1, [r7, #8]
 800eb72:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	4618      	mov	r0, r3
 800eb78:	f7fc f97a 	bl	800ae70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800eb7c:	4a0a      	ldr	r2, [pc, #40]	@ (800eba8 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	601a      	str	r2, [r3, #0]
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f103 040c 	add.w	r4, r3, #12
 800eb88:	1d3b      	adds	r3, r7, #4
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f000 f831 	bl	800ebf2 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 800eb90:	f107 0314 	add.w	r3, r7, #20
 800eb94:	462a      	mov	r2, r5
 800eb96:	68b9      	ldr	r1, [r7, #8]
 800eb98:	4620      	mov	r0, r4
 800eb9a:	f000 f835 	bl	800ec08 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	4618      	mov	r0, r3
 800eba2:	3718      	adds	r7, #24
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bdb0      	pop	{r4, r5, r7, pc}
 800eba8:	0801ea48 	.word	0x0801ea48

0800ebac <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>:
      constexpr _Head_base()
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	370c      	adds	r7, #12
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr

0800ebc2 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ebc2:	b480      	push	{r7}
 800ebc4:	b083      	sub	sp, #12
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	4618      	mov	r0, r3
 800ebce:	370c      	adds	r7, #12
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr

0800ebd8 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f000 f82c 	bl	800ec40 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	4618      	mov	r0, r3
 800ebec:	3708      	adds	r7, #8
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}

0800ebf2 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800ebf2:	b480      	push	{r7}
 800ebf4:	b083      	sub	sp, #12
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	370c      	adds	r7, #12
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr

0800ec08 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	60f8      	str	r0, [r7, #12]
 800ec10:	60b9      	str	r1, [r7, #8]
 800ec12:	713a      	strb	r2, [r7, #4]
 800ec14:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 800ec16:	1d3b      	adds	r3, r7, #4
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f7ff ffea 	bl	800ebf2 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	4619      	mov	r1, r3
 800ec22:	68f8      	ldr	r0, [r7, #12]
 800ec24:	f000 f817 	bl	800ec56 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>
 800ec28:	6839      	ldr	r1, [r7, #0]
 800ec2a:	68f8      	ldr	r0, [r7, #12]
 800ec2c:	f7fe f994 	bl	800cf58 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	68ba      	ldr	r2, [r7, #8]
 800ec34:	601a      	str	r2, [r3, #0]
	{ }
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3710      	adds	r7, #16
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800ec40:	b480      	push	{r7}
 800ec42:	b083      	sub	sp, #12
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	370c      	adds	r7, #12
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec54:	4770      	bx	lr

0800ec56 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 800ec56:	b580      	push	{r7, lr}
 800ec58:	b082      	sub	sp, #8
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	6078      	str	r0, [r7, #4]
 800ec5e:	6039      	str	r1, [r7, #0]
 800ec60:	6838      	ldr	r0, [r7, #0]
 800ec62:	f7ff ffc6 	bl	800ebf2 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3708      	adds	r7, #8
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b082      	sub	sp, #8
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	4a05      	ldr	r2, [pc, #20]	@ (800ec90 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	601a      	str	r2, [r3, #0]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7fa fcff 	bl	8009684 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3708      	adds	r7, #8
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}
 800ec90:	0801ea48 	.word	0x0801ea48

0800ec94 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f7ff ffe7 	bl	800ec70 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800eca2:	2110      	movs	r1, #16
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f00d fdea 	bl	801c87e <_ZdlPvj>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4618      	mov	r0, r3
 800ecae:	3708      	adds	r7, #8
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	330c      	adds	r3, #12
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f000 f83f 	bl	800ed44 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 800ecc6:	4602      	mov	r2, r0
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	68db      	ldr	r3, [r3, #12]
 800eccc:	4619      	mov	r1, r3
 800ecce:	4610      	mov	r0, r2
 800ecd0:	f7ff fc8d 	bl	800e5ee <_ZNKSt14default_deleteI7StepgenEclEPS0_>
 800ecd4:	bf00      	nop
 800ecd6:	3708      	adds	r7, #8
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}

0800ecdc <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b086      	sub	sp, #24
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	330c      	adds	r3, #12
 800ece8:	4618      	mov	r0, r3
 800ecea:	f000 f837 	bl	800ed5c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	f107 0314 	add.w	r3, r7, #20
 800ecf4:	4611      	mov	r1, r2
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f000 f83c 	bl	800ed74 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800ecfc:	f107 0114 	add.w	r1, r7, #20
 800ed00:	f107 030c 	add.w	r3, r7, #12
 800ed04:	687a      	ldr	r2, [r7, #4]
 800ed06:	4618      	mov	r0, r3
 800ed08:	f000 f841 	bl	800ed8e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f7ff ffaf 	bl	800ec70 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800ed12:	f107 030c 	add.w	r3, r7, #12
 800ed16:	4618      	mov	r0, r3
 800ed18:	f000 f84d 	bl	800edb6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800ed1c:	f107 0314 	add.w	r3, r7, #20
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7ff fdd8 	bl	800e8d6 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800ed26:	3718      	adds	r7, #24
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}

0800ed2c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 800ed2c:	b480      	push	{r7}
 800ed2e:	b083      	sub	sp, #12
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	6039      	str	r1, [r7, #0]
        return nullptr;
 800ed36:	2300      	movs	r3, #0
      }
 800ed38:	4618      	mov	r0, r3
 800ed3a:	370c      	adds	r7, #12
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr

0800ed44 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f000 f847 	bl	800ede0 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>
 800ed52:	4603      	mov	r3, r0
 800ed54:	4618      	mov	r0, r3
 800ed56:	3708      	adds	r7, #8
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b082      	sub	sp, #8
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f7fe f9c6 	bl	800d0f6 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3708      	adds	r7, #8
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}

0800ed74 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b082      	sub	sp, #8
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f7ff fe2a 	bl	800e9d8 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	4618      	mov	r0, r3
 800ed88:	3708      	adds	r7, #8
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}

0800ed8e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800ed8e:	b580      	push	{r7, lr}
 800ed90:	b084      	sub	sp, #16
 800ed92:	af00      	add	r7, sp, #0
 800ed94:	60f8      	str	r0, [r7, #12]
 800ed96:	60b9      	str	r1, [r7, #8]
 800ed98:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800ed9a:	68b8      	ldr	r0, [r7, #8]
 800ed9c:	f000 f82b 	bl	800edf6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 800eda0:	4602      	mov	r2, r0
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	601a      	str	r2, [r3, #0]
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	687a      	ldr	r2, [r7, #4]
 800edaa:	605a      	str	r2, [r3, #4]
      { }
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	4618      	mov	r0, r3
 800edb0:	3710      	adds	r7, #16
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}

0800edb6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800edb6:	b580      	push	{r7, lr}
 800edb8:	b082      	sub	sp, #8
 800edba:	af00      	add	r7, sp, #0
 800edbc:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	685b      	ldr	r3, [r3, #4]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d007      	beq.n	800edd6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6818      	ldr	r0, [r3, #0]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	2201      	movs	r2, #1
 800edd0:	4619      	mov	r1, r3
 800edd2:	f000 f81b 	bl	800ee0c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	4618      	mov	r0, r3
 800edda:	3708      	adds	r7, #8
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}

0800ede0 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800ede0:	b480      	push	{r7}
 800ede2:	b083      	sub	sp, #12
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	4618      	mov	r0, r3
 800edec:	370c      	adds	r7, #12
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr

0800edf6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800edf6:	b480      	push	{r7}
 800edf8:	b083      	sub	sp, #12
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	4618      	mov	r0, r3
 800ee02:	370c      	adds	r7, #12
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr

0800ee0c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	60b9      	str	r1, [r7, #8]
 800ee16:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800ee18:	687a      	ldr	r2, [r7, #4]
 800ee1a:	68b9      	ldr	r1, [r7, #8]
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f000 f804 	bl	800ee2a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 800ee22:	bf00      	nop
 800ee24:	3710      	adds	r7, #16
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}

0800ee2a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800ee2a:	b580      	push	{r7, lr}
 800ee2c:	b084      	sub	sp, #16
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	60f8      	str	r0, [r7, #12]
 800ee32:	60b9      	str	r1, [r7, #8]
 800ee34:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	011b      	lsls	r3, r3, #4
 800ee3a:	4619      	mov	r1, r3
 800ee3c:	68b8      	ldr	r0, [r7, #8]
 800ee3e:	f00d fd1e 	bl	801c87e <_ZdlPvj>
      }
 800ee42:	3710      	adds	r7, #16
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <__NVIC_SetPriority>:
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b083      	sub	sp, #12
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	4603      	mov	r3, r0
 800ee50:	6039      	str	r1, [r7, #0]
 800ee52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ee54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	db0a      	blt.n	800ee72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	b2da      	uxtb	r2, r3
 800ee60:	490c      	ldr	r1, [pc, #48]	@ (800ee94 <__NVIC_SetPriority+0x4c>)
 800ee62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ee66:	0112      	lsls	r2, r2, #4
 800ee68:	b2d2      	uxtb	r2, r2
 800ee6a:	440b      	add	r3, r1
 800ee6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ee70:	e00a      	b.n	800ee88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	b2da      	uxtb	r2, r3
 800ee76:	4908      	ldr	r1, [pc, #32]	@ (800ee98 <__NVIC_SetPriority+0x50>)
 800ee78:	88fb      	ldrh	r3, [r7, #6]
 800ee7a:	f003 030f 	and.w	r3, r3, #15
 800ee7e:	3b04      	subs	r3, #4
 800ee80:	0112      	lsls	r2, r2, #4
 800ee82:	b2d2      	uxtb	r2, r2
 800ee84:	440b      	add	r3, r1
 800ee86:	761a      	strb	r2, [r3, #24]
}
 800ee88:	bf00      	nop
 800ee8a:	370c      	adds	r7, #12
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee92:	4770      	bx	lr
 800ee94:	e000e100 	.word	0xe000e100
 800ee98:	e000ed00 	.word	0xe000ed00

0800ee9c <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 800ee9c:	b480      	push	{r7}
 800ee9e:	b083      	sub	sp, #12
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	4603      	mov	r3, r0
 800eea4:	6039      	str	r1, [r7, #0]
 800eea6:	71fb      	strb	r3, [r7, #7]
    return memory_order(int(__m) & int(__mod));
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	b25a      	sxtb	r2, r3
 800eeac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eeb0:	4013      	ands	r3, r2
 800eeb2:	b25b      	sxtb	r3, r3
 800eeb4:	b2db      	uxtb	r3, r3
  }
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	370c      	adds	r7, #12
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr

0800eec2 <_ZNSt6atomicIbEC1Eb>:
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }
 800eec2:	b580      	push	{r7, lr}
 800eec4:	b082      	sub	sp, #8
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
 800eeca:	460b      	mov	r3, r1
 800eecc:	70fb      	strb	r3, [r7, #3]
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	78fa      	ldrb	r2, [r7, #3]
 800eed2:	4611      	mov	r1, r2
 800eed4:	4618      	mov	r0, r3
 800eed6:	f000 fa2e 	bl	800f336 <_ZNSt13__atomic_baseIbEC1Eb>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	4618      	mov	r0, r3
 800eede:	3708      	adds	r7, #8
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}

0800eee4 <_ZNSt6atomicIbE5storeEbSt12memory_order>:
#if __cplusplus >= 201703L
    static constexpr bool is_always_lock_free = ATOMIC_BOOL_LOCK_FREE == 2;
#endif

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b084      	sub	sp, #16
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	460b      	mov	r3, r1
 800eeee:	70fb      	strb	r3, [r7, #3]
 800eef0:	4613      	mov	r3, r2
 800eef2:	70bb      	strb	r3, [r7, #2]
    { _M_base.store(__i, __m); }
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	60fb      	str	r3, [r7, #12]
 800eef8:	78fb      	ldrb	r3, [r7, #3]
 800eefa:	72fb      	strb	r3, [r7, #11]
 800eefc:	78bb      	ldrb	r3, [r7, #2]
 800eefe:	72bb      	strb	r3, [r7, #10]

      _GLIBCXX_ALWAYS_INLINE void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 800ef00:	7abb      	ldrb	r3, [r7, #10]
 800ef02:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7ff ffc8 	bl	800ee9c <_ZStanSt12memory_orderSt23__memory_order_modifier>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	727b      	strb	r3, [r7, #9]
	__glibcxx_assert(__b != memory_order_acquire);
 800ef10:	f7f3 fb1e 	bl	8002550 <_ZSt23__is_constant_evaluatedv>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d004      	beq.n	800ef24 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 800ef1a:	7a7b      	ldrb	r3, [r7, #9]
 800ef1c:	2b02      	cmp	r3, #2
 800ef1e:	d101      	bne.n	800ef24 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 800ef20:	2301      	movs	r3, #1
 800ef22:	e000      	b.n	800ef26 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x42>
 800ef24:	2300      	movs	r3, #0
 800ef26:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 800ef28:	f7f3 fb12 	bl	8002550 <_ZSt23__is_constant_evaluatedv>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d004      	beq.n	800ef3c <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 800ef32:	7a7b      	ldrb	r3, [r7, #9]
 800ef34:	2b04      	cmp	r3, #4
 800ef36:	d101      	bne.n	800ef3c <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 800ef38:	2301      	movs	r3, #1
 800ef3a:	e000      	b.n	800ef3e <_ZNSt6atomicIbE5storeEbSt12memory_order+0x5a>
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_consume);
 800ef40:	f7f3 fb06 	bl	8002550 <_ZSt23__is_constant_evaluatedv>
 800ef44:	4603      	mov	r3, r0
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d004      	beq.n	800ef54 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 800ef4a:	7a7b      	ldrb	r3, [r7, #9]
 800ef4c:	2b01      	cmp	r3, #1
 800ef4e:	d101      	bne.n	800ef54 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 800ef50:	2301      	movs	r3, #1
 800ef52:	e000      	b.n	800ef56 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x72>
 800ef54:	2300      	movs	r3, #0
 800ef56:	2b00      	cmp	r3, #0

	__atomic_store_n(&_M_i, __i, int(__m));
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	7afa      	ldrb	r2, [r7, #11]
 800ef5c:	f3bf 8f5b 	dmb	ish
 800ef60:	701a      	strb	r2, [r3, #0]
 800ef62:	f3bf 8f5b 	dmb	ish
      }
 800ef66:	bf00      	nop
 800ef68:	bf00      	nop
 800ef6a:	3710      	adds	r7, #16
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <_ZNKSt6atomicIbE4loadESt12memory_order>:
    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
    { _M_base.store(__i, __m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b084      	sub	sp, #16
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	460b      	mov	r3, r1
 800ef7a:	70fb      	strb	r3, [r7, #3]
    { return _M_base.load(__m); }
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	60fb      	str	r3, [r7, #12]
 800ef80:	78fb      	ldrb	r3, [r7, #3]
 800ef82:	72fb      	strb	r3, [r7, #11]

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 800ef84:	7afb      	ldrb	r3, [r7, #11]
 800ef86:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7ff ff86 	bl	800ee9c <_ZStanSt12memory_orderSt23__memory_order_modifier>
 800ef90:	4603      	mov	r3, r0
 800ef92:	72bb      	strb	r3, [r7, #10]
	__glibcxx_assert(__b != memory_order_release);
 800ef94:	f7f3 fadc 	bl	8002550 <_ZSt23__is_constant_evaluatedv>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d004      	beq.n	800efa8 <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 800ef9e:	7abb      	ldrb	r3, [r7, #10]
 800efa0:	2b03      	cmp	r3, #3
 800efa2:	d101      	bne.n	800efa8 <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 800efa4:	2301      	movs	r3, #1
 800efa6:	e000      	b.n	800efaa <_ZNKSt6atomicIbE4loadESt12memory_order+0x3a>
 800efa8:	2300      	movs	r3, #0
 800efaa:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 800efac:	f7f3 fad0 	bl	8002550 <_ZSt23__is_constant_evaluatedv>
 800efb0:	4603      	mov	r3, r0
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d004      	beq.n	800efc0 <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 800efb6:	7abb      	ldrb	r3, [r7, #10]
 800efb8:	2b04      	cmp	r3, #4
 800efba:	d101      	bne.n	800efc0 <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 800efbc:	2301      	movs	r3, #1
 800efbe:	e000      	b.n	800efc2 <_ZNKSt6atomicIbE4loadESt12memory_order+0x52>
 800efc0:	2300      	movs	r3, #0
 800efc2:	2b00      	cmp	r3, #0

	return __atomic_load_n(&_M_i, int(__m));
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f3bf 8f5b 	dmb	ish
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	f3bf 8f5b 	dmb	ish
 800efd0:	b2db      	uxtb	r3, r3
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	bf14      	ite	ne
 800efd6:	2301      	movne	r3, #1
 800efd8:	2300      	moveq	r3, #0
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	4618      	mov	r0, r3
 800efde:	3710      	adds	r7, #16
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <_ZN9pruThread16setThreadRunningEb>:
    atomic<bool> threadPaused{false};

    vector<shared_ptr<Module>> modules;
    vector<shared_ptr<Module>> modulesPost;

    void setThreadRunning(bool val) { threadRunning.store(val, std::memory_order_release); }
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b082      	sub	sp, #8
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	460b      	mov	r3, r1
 800efee:	70fb      	strb	r3, [r7, #3]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	3329      	adds	r3, #41	@ 0x29
 800eff4:	78f9      	ldrb	r1, [r7, #3]
 800eff6:	2203      	movs	r2, #3
 800eff8:	4618      	mov	r0, r3
 800effa:	f7ff ff73 	bl	800eee4 <_ZNSt6atomicIbE5storeEbSt12memory_order>
 800effe:	bf00      	nop
 800f000:	3708      	adds	r7, #8
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}

0800f006 <_ZN9pruThread15setThreadPausedEb>:
    void setThreadPaused(bool val) { threadPaused.store(val, std::memory_order_release); }
 800f006:	b580      	push	{r7, lr}
 800f008:	b082      	sub	sp, #8
 800f00a:	af00      	add	r7, sp, #0
 800f00c:	6078      	str	r0, [r7, #4]
 800f00e:	460b      	mov	r3, r1
 800f010:	70fb      	strb	r3, [r7, #3]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	332a      	adds	r3, #42	@ 0x2a
 800f016:	78f9      	ldrb	r1, [r7, #3]
 800f018:	2203      	movs	r2, #3
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7ff ff62 	bl	800eee4 <_ZNSt6atomicIbE5storeEbSt12memory_order>
 800f020:	bf00      	nop
 800f022:	3708      	adds	r7, #8
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}

0800f028 <_ZNK9pruThread9isRunningEv>:
	pruThread(const string& _name, TIM_TypeDef *_timer, IRQn_Type _irq, uint32_t _freq, uint8_t _prio);

	bool registerModule(shared_ptr<Module> module);
	bool registerModulePost(shared_ptr<Module> module);

    [[nodiscard]] bool isRunning() const { return threadRunning.load(std::memory_order_acquire);  }
 800f028:	b580      	push	{r7, lr}
 800f02a:	b082      	sub	sp, #8
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	3329      	adds	r3, #41	@ 0x29
 800f034:	2102      	movs	r1, #2
 800f036:	4618      	mov	r0, r3
 800f038:	f7ff ff9a 	bl	800ef70 <_ZNKSt6atomicIbE4loadESt12memory_order>
 800f03c:	4603      	mov	r3, r0
 800f03e:	4618      	mov	r0, r3
 800f040:	3708      	adds	r7, #8
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}

0800f046 <_ZNK9pruThread8isPausedEv>:
    [[nodiscard]] bool isPaused() const { return threadPaused.load(std::memory_order_acquire); }
 800f046:	b580      	push	{r7, lr}
 800f048:	b082      	sub	sp, #8
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	6078      	str	r0, [r7, #4]
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	332a      	adds	r3, #42	@ 0x2a
 800f052:	2102      	movs	r1, #2
 800f054:	4618      	mov	r0, r3
 800f056:	f7ff ff8b 	bl	800ef70 <_ZNKSt6atomicIbE4loadESt12memory_order>
 800f05a:	4603      	mov	r3, r0
 800f05c:	4618      	mov	r0, r3
 800f05e:	3708      	adds	r7, #8
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:
      _Vector_base() = default;
 800f064:	b580      	push	{r7, lr}
 800f066:	b082      	sub	sp, #8
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	4618      	mov	r0, r3
 800f070:	f000 f971 	bl	800f356 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	4618      	mov	r0, r3
 800f078:	3708      	adds	r7, #8
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}

0800f07e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:
      vector() = default;
 800f07e:	b580      	push	{r7, lr}
 800f080:	b082      	sub	sp, #8
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	4618      	mov	r0, r3
 800f08a:	f7ff ffeb 	bl	800f064 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	4618      	mov	r0, r3
 800f092:	3708      	adds	r7, #8
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>:

#include "pruThread.h"
#include "../modules/module.h"


pruThread::pruThread(const string& _name, TIM_TypeDef *_timer, IRQn_Type _irq, uint32_t _freq, uint8_t _prio)
 800f098:	b580      	push	{r7, lr}
 800f09a:	b084      	sub	sp, #16
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	60f8      	str	r0, [r7, #12]
 800f0a0:	60b9      	str	r1, [r7, #8]
 800f0a2:	607a      	str	r2, [r7, #4]
 800f0a4:	807b      	strh	r3, [r7, #2]
    : threadName(_name),
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	68b9      	ldr	r1, [r7, #8]
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f00d fda3 	bl	801cbf6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      timer(_timer),
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	687a      	ldr	r2, [r7, #4]
 800f0b4:	619a      	str	r2, [r3, #24]
      irq(_irq),
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	887a      	ldrh	r2, [r7, #2]
 800f0ba:	839a      	strh	r2, [r3, #28]
      frequency(_freq),
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	69ba      	ldr	r2, [r7, #24]
 800f0c0:	621a      	str	r2, [r3, #32]
	  hasModulesPost(false)
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	3329      	adds	r3, #41	@ 0x29
 800f0ce:	2100      	movs	r1, #0
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7ff fef6 	bl	800eec2 <_ZNSt6atomicIbEC1Eb>
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	332a      	adds	r3, #42	@ 0x2a
 800f0da:	2100      	movs	r1, #0
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f7ff fef0 	bl	800eec2 <_ZNSt6atomicIbEC1Eb>
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	332c      	adds	r3, #44	@ 0x2c
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f7ff ffc9 	bl	800f07e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	3338      	adds	r3, #56	@ 0x38
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7ff ffc4 	bl	800f07e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
{
	printf("Creating %s thread at %lu hz\n", threadName.c_str(), (unsigned long)frequency);
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f00d fd5d 	bl	801cbb8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800f0fe:	4601      	mov	r1, r0
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	6a1b      	ldr	r3, [r3, #32]
 800f104:	461a      	mov	r2, r3
 800f106:	4808      	ldr	r0, [pc, #32]	@ (800f128 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh+0x90>)
 800f108:	f00e f858 	bl	801d1bc <iprintf>
    NVIC_SetPriority(irq, _prio);
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800f112:	7f3a      	ldrb	r2, [r7, #28]
 800f114:	4611      	mov	r1, r2
 800f116:	4618      	mov	r0, r3
 800f118:	f7ff fe96 	bl	800ee48 <__NVIC_SetPriority>
}
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	4618      	mov	r0, r3
 800f120:	3710      	adds	r7, #16
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}
 800f126:	bf00      	nop
 800f128:	0801e734 	.word	0x0801e734

0800f12c <_ZN9pruThread14executeModulesEv>:


bool pruThread::executeModules() {
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b08a      	sub	sp, #40	@ 0x28
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
    for (const auto& module : modules) {
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	332c      	adds	r3, #44	@ 0x2c
 800f138:	627b      	str	r3, [r7, #36]	@ 0x24
 800f13a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f13c:	f000 f91b 	bl	800f376 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 800f140:	4603      	mov	r3, r0
 800f142:	617b      	str	r3, [r7, #20]
 800f144:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f146:	f000 f926 	bl	800f396 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800f14a:	4603      	mov	r3, r0
 800f14c:	613b      	str	r3, [r7, #16]
 800f14e:	e018      	b.n	800f182 <_ZN9pruThread14executeModulesEv+0x56>
 800f150:	f107 0314 	add.w	r3, r7, #20
 800f154:	4618      	mov	r0, r3
 800f156:	f000 f958 	bl	800f40a <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 800f15a:	61b8      	str	r0, [r7, #24]
        if (module) {
 800f15c:	69bb      	ldr	r3, [r7, #24]
 800f15e:	4618      	mov	r0, r3
 800f160:	f7fa fa5c 	bl	800961c <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800f164:	4603      	mov	r3, r0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d006      	beq.n	800f178 <_ZN9pruThread14executeModulesEv+0x4c>
            module->runModule();
 800f16a:	69b8      	ldr	r0, [r7, #24]
 800f16c:	f7fa fa67 	bl	800963e <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800f170:	4603      	mov	r3, r0
 800f172:	4618      	mov	r0, r3
 800f174:	f7fe fc9e 	bl	800dab4 <_ZN6Module9runModuleEv>
    for (const auto& module : modules) {
 800f178:	f107 0314 	add.w	r3, r7, #20
 800f17c:	4618      	mov	r0, r3
 800f17e:	f000 f933 	bl	800f3e8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 800f182:	f107 0210 	add.w	r2, r7, #16
 800f186:	f107 0314 	add.w	r3, r7, #20
 800f18a:	4611      	mov	r1, r2
 800f18c:	4618      	mov	r0, r3
 800f18e:	f000 f913 	bl	800f3b8 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d1db      	bne.n	800f150 <_ZN9pruThread14executeModulesEv+0x24>
        }
    }

    if (hasModulesPost) {
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d031      	beq.n	800f206 <_ZN9pruThread14executeModulesEv+0xda>
		for (const auto& module : modulesPost) {
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	3338      	adds	r3, #56	@ 0x38
 800f1a6:	623b      	str	r3, [r7, #32]
 800f1a8:	6a38      	ldr	r0, [r7, #32]
 800f1aa:	f000 f8e4 	bl	800f376 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	60fb      	str	r3, [r7, #12]
 800f1b2:	6a38      	ldr	r0, [r7, #32]
 800f1b4:	f000 f8ef 	bl	800f396 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	60bb      	str	r3, [r7, #8]
 800f1bc:	e018      	b.n	800f1f0 <_ZN9pruThread14executeModulesEv+0xc4>
 800f1be:	f107 030c 	add.w	r3, r7, #12
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f000 f921 	bl	800f40a <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 800f1c8:	61f8      	str	r0, [r7, #28]
			if (module) {
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7fa fa25 	bl	800961c <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d006      	beq.n	800f1e6 <_ZN9pruThread14executeModulesEv+0xba>
				module->runModule();
 800f1d8:	69f8      	ldr	r0, [r7, #28]
 800f1da:	f7fa fa30 	bl	800963e <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7fe fc67 	bl	800dab4 <_ZN6Module9runModuleEv>
		for (const auto& module : modulesPost) {
 800f1e6:	f107 030c 	add.w	r3, r7, #12
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f000 f8fc 	bl	800f3e8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 800f1f0:	f107 0208 	add.w	r2, r7, #8
 800f1f4:	f107 030c 	add.w	r3, r7, #12
 800f1f8:	4611      	mov	r1, r2
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f000 f8dc 	bl	800f3b8 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800f200:	4603      	mov	r3, r0
 800f202:	2b00      	cmp	r3, #0
 800f204:	d1db      	bne.n	800f1be <_ZN9pruThread14executeModulesEv+0x92>
			}
		}
    }

    return true;
 800f206:	2301      	movs	r3, #1
}
 800f208:	4618      	mov	r0, r3
 800f20a:	3728      	adds	r7, #40	@ 0x28
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>:

bool pruThread::registerModule(shared_ptr<Module> module) {
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
    if (!module) {
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7fa f9fd 	bl	800961c <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800f222:	4603      	mov	r3, r0
 800f224:	f083 0301 	eor.w	r3, r3, #1
 800f228:	b2db      	uxtb	r3, r3
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d001      	beq.n	800f232 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x22>
        return false;
 800f22e:	2300      	movs	r3, #0
 800f230:	e006      	b.n	800f240 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x30>
    }
    modules.push_back(module);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	332c      	adds	r3, #44	@ 0x2c
 800f236:	6839      	ldr	r1, [r7, #0]
 800f238:	4618      	mov	r0, r3
 800f23a:	f000 f8f2 	bl	800f422 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 800f23e:	2301      	movs	r3, #1
}
 800f240:	4618      	mov	r0, r3
 800f242:	3708      	adds	r7, #8
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}

0800f248 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>:

bool pruThread::registerModulePost(shared_ptr<Module> module) {
 800f248:	b580      	push	{r7, lr}
 800f24a:	b082      	sub	sp, #8
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	6039      	str	r1, [r7, #0]
    if (!module) {
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	4618      	mov	r0, r3
 800f256:	f7fa f9e1 	bl	800961c <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800f25a:	4603      	mov	r3, r0
 800f25c:	f083 0301 	eor.w	r3, r3, #1
 800f260:	b2db      	uxtb	r3, r3
 800f262:	2b00      	cmp	r3, #0
 800f264:	d001      	beq.n	800f26a <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x22>
        return false;
 800f266:	2300      	movs	r3, #0
 800f268:	e00a      	b.n	800f280 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x38>
    }
    hasModulesPost = true;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2201      	movs	r2, #1
 800f26e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    modulesPost.push_back(module);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	3338      	adds	r3, #56	@ 0x38
 800f276:	6839      	ldr	r1, [r7, #0]
 800f278:	4618      	mov	r0, r3
 800f27a:	f000 f8d2 	bl	800f422 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 800f27e:	2301      	movs	r3, #1
}
 800f280:	4618      	mov	r0, r3
 800f282:	3708      	adds	r7, #8
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}

0800f288 <_ZN9pruThread11startThreadEv>:

// For baremetal, this is just initialization
bool pruThread::startThread() {
 800f288:	b590      	push	{r4, r7, lr}
 800f28a:	b085      	sub	sp, #20
 800f28c:	af02      	add	r7, sp, #8
 800f28e:	6078      	str	r0, [r7, #4]
    if (isRunning()) {
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f7ff fec9 	bl	800f028 <_ZNK9pruThread9isRunningEv>
 800f296:	4603      	mov	r3, r0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d001      	beq.n	800f2a0 <_ZN9pruThread11startThreadEv+0x18>
        return true;
 800f29c:	2301      	movs	r3, #1
 800f29e:	e01c      	b.n	800f2da <_ZN9pruThread11startThreadEv+0x52>
    }

    setThreadRunning(true);
 800f2a0:	2101      	movs	r1, #1
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f7ff fe9e 	bl	800efe4 <_ZN9pruThread16setThreadRunningEb>
    setThreadPaused(false);
 800f2a8:	2100      	movs	r1, #0
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f7ff feab 	bl	800f006 <_ZN9pruThread15setThreadPausedEb>

    timerPtr = new pruTimer(timer, irq, frequency, this);
 800f2b0:	2014      	movs	r0, #20
 800f2b2:	f00d faf5 	bl	801c8a0 <_Znwj>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	461c      	mov	r4, r3
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6999      	ldr	r1, [r3, #24]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6a18      	ldr	r0, [r3, #32]
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	9300      	str	r3, [sp, #0]
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	f000 fc26 	bl	800fb20 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	625c      	str	r4, [r3, #36]	@ 0x24
    return true;
 800f2d8:	2301      	movs	r3, #1
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	370c      	adds	r7, #12
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd90      	pop	{r4, r7, pc}

0800f2e2 <_ZN9pruThread6updateEv>:
    setThreadRunning(false);
    setThreadPaused(false);
}

// This is the main function that should be called periodically
bool pruThread::update() {
 800f2e2:	b580      	push	{r7, lr}
 800f2e4:	b082      	sub	sp, #8
 800f2e6:	af00      	add	r7, sp, #0
 800f2e8:	6078      	str	r0, [r7, #4]
    if (!isRunning() || isPaused()) {
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f7ff fe9c 	bl	800f028 <_ZNK9pruThread9isRunningEv>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	f083 0301 	eor.w	r3, r3, #1
 800f2f6:	b2db      	uxtb	r3, r3
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d105      	bne.n	800f308 <_ZN9pruThread6updateEv+0x26>
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f7ff fea2 	bl	800f046 <_ZNK9pruThread8isPausedEv>
 800f302:	4603      	mov	r3, r0
 800f304:	2b00      	cmp	r3, #0
 800f306:	d001      	beq.n	800f30c <_ZN9pruThread6updateEv+0x2a>
 800f308:	2301      	movs	r3, #1
 800f30a:	e000      	b.n	800f30e <_ZN9pruThread6updateEv+0x2c>
 800f30c:	2300      	movs	r3, #0
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d001      	beq.n	800f316 <_ZN9pruThread6updateEv+0x34>
        return true;
 800f312:	2301      	movs	r3, #1
 800f314:	e00b      	b.n	800f32e <_ZN9pruThread6updateEv+0x4c>
    }

    // Execute all modules
    if (!executeModules()) {
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f7ff ff08 	bl	800f12c <_ZN9pruThread14executeModulesEv>
 800f31c:	4603      	mov	r3, r0
 800f31e:	f083 0301 	eor.w	r3, r3, #1
 800f322:	b2db      	uxtb	r3, r3
 800f324:	2b00      	cmp	r3, #0
 800f326:	d001      	beq.n	800f32c <_ZN9pruThread6updateEv+0x4a>
        return false;
 800f328:	2300      	movs	r3, #0
 800f32a:	e000      	b.n	800f32e <_ZN9pruThread6updateEv+0x4c>
    }

    return true;
 800f32c:	2301      	movs	r3, #1
}
 800f32e:	4618      	mov	r0, r3
 800f330:	3708      	adds	r7, #8
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}

0800f336 <_ZNSt13__atomic_baseIbEC1Eb>:
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 800f336:	b480      	push	{r7}
 800f338:	b083      	sub	sp, #12
 800f33a:	af00      	add	r7, sp, #0
 800f33c:	6078      	str	r0, [r7, #4]
 800f33e:	460b      	mov	r3, r1
 800f340:	70fb      	strb	r3, [r7, #3]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	78fa      	ldrb	r2, [r7, #3]
 800f346:	701a      	strb	r2, [r3, #0]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	4618      	mov	r0, r3
 800f34c:	370c      	adds	r7, #12
 800f34e:	46bd      	mov	sp, r7
 800f350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f354:	4770      	bx	lr

0800f356 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800f356:	b580      	push	{r7, lr}
 800f358:	b082      	sub	sp, #8
 800f35a:	af00      	add	r7, sp, #0
 800f35c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f000 f895 	bl	800f48e <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	4618      	mov	r0, r3
 800f368:	f000 f89d 	bl	800f4a6 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	4618      	mov	r0, r3
 800f370:	3708      	adds	r7, #8
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}

0800f376 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800f376:	b580      	push	{r7, lr}
 800f378:	b084      	sub	sp, #16
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800f37e:	687a      	ldr	r2, [r7, #4]
 800f380:	f107 030c 	add.w	r3, r7, #12
 800f384:	4611      	mov	r1, r2
 800f386:	4618      	mov	r0, r3
 800f388:	f000 f8a1 	bl	800f4ce <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	4618      	mov	r0, r3
 800f390:	3710      	adds	r7, #16
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}

0800f396 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 800f396:	b580      	push	{r7, lr}
 800f398:	b084      	sub	sp, #16
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	1d1a      	adds	r2, r3, #4
 800f3a2:	f107 030c 	add.w	r3, r7, #12
 800f3a6:	4611      	mov	r1, r2
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f000 f890 	bl	800f4ce <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3710      	adds	r7, #16
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}

0800f3b8 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800f3b8:	b590      	push	{r4, r7, lr}
 800f3ba:	b083      	sub	sp, #12
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
 800f3c0:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f000 f893 	bl	800f4ee <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	681c      	ldr	r4, [r3, #0]
 800f3cc:	6838      	ldr	r0, [r7, #0]
 800f3ce:	f000 f88e 	bl	800f4ee <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	429c      	cmp	r4, r3
 800f3d8:	bf14      	ite	ne
 800f3da:	2301      	movne	r3, #1
 800f3dc:	2300      	moveq	r3, #0
 800f3de:	b2db      	uxtb	r3, r3
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	370c      	adds	r7, #12
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd90      	pop	{r4, r7, pc}

0800f3e8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800f3e8:	b480      	push	{r7}
 800f3ea:	b083      	sub	sp, #12
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
	++_M_current;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	f103 0208 	add.w	r2, r3, #8
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	601a      	str	r2, [r3, #0]
	return *this;
 800f3fc:	687b      	ldr	r3, [r7, #4]
      }
 800f3fe:	4618      	mov	r0, r3
 800f400:	370c      	adds	r7, #12
 800f402:	46bd      	mov	sp, r7
 800f404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f408:	4770      	bx	lr

0800f40a <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800f40a:	b480      	push	{r7}
 800f40c:	b083      	sub	sp, #12
 800f40e:	af00      	add	r7, sp, #0
 800f410:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	4618      	mov	r0, r3
 800f418:	370c      	adds	r7, #12
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr

0800f422 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 800f422:	b580      	push	{r7, lr}
 800f424:	b082      	sub	sp, #8
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
 800f42a:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	685a      	ldr	r2, [r3, #4]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	689b      	ldr	r3, [r3, #8]
 800f434:	429a      	cmp	r2, r3
 800f436:	d00d      	beq.n	800f454 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	683a      	ldr	r2, [r7, #0]
 800f440:	4619      	mov	r1, r3
 800f442:	f000 f85f 	bl	800f504 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	685b      	ldr	r3, [r3, #4]
 800f44a:	f103 0208 	add.w	r2, r3, #8
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800f452:	e008      	b.n	800f466 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x44>
	  _M_realloc_insert(end(), __x);
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f7ff ff9e 	bl	800f396 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800f45a:	4603      	mov	r3, r0
 800f45c:	683a      	ldr	r2, [r7, #0]
 800f45e:	4619      	mov	r1, r3
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f000 f863 	bl	800f52c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
 800f466:	bf00      	nop
 800f468:	3708      	adds	r7, #8
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}

0800f46e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800f46e:	b480      	push	{r7}
 800f470:	b083      	sub	sp, #12
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	685a      	ldr	r2, [r3, #4]
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	1ad3      	subs	r3, r2, r3
 800f480:	10db      	asrs	r3, r3, #3
 800f482:	4618      	mov	r0, r3
 800f484:	370c      	adds	r7, #12
 800f486:	46bd      	mov	sp, r7
 800f488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48c:	4770      	bx	lr

0800f48e <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800f48e:	b580      	push	{r7, lr}
 800f490:	b082      	sub	sp, #8
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f000 f8c4 	bl	800f624 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3708      	adds	r7, #8
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}

0800f4a6 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800f4a6:	b480      	push	{r7}
 800f4a8:	b083      	sub	sp, #12
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	601a      	str	r2, [r3, #0]
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	605a      	str	r2, [r3, #4]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	609a      	str	r2, [r3, #8]
	{ }
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	370c      	adds	r7, #12
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4cc:	4770      	bx	lr

0800f4ce <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800f4ce:	b480      	push	{r7}
 800f4d0:	b083      	sub	sp, #12
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	6078      	str	r0, [r7, #4]
 800f4d6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	681a      	ldr	r2, [r3, #0]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	601a      	str	r2, [r3, #0]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	370c      	adds	r7, #12
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ec:	4770      	bx	lr

0800f4ee <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800f4ee:	b480      	push	{r7}
 800f4f0:	b083      	sub	sp, #12
 800f4f2:	af00      	add	r7, sp, #0
 800f4f4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	370c      	adds	r7, #12
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr

0800f504 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800f504:	b580      	push	{r7, lr}
 800f506:	b084      	sub	sp, #16
 800f508:	af00      	add	r7, sp, #0
 800f50a:	60f8      	str	r0, [r7, #12]
 800f50c:	60b9      	str	r1, [r7, #8]
 800f50e:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f000 f892 	bl	800f63a <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 800f516:	4603      	mov	r3, r0
 800f518:	461a      	mov	r2, r3
 800f51a:	68b9      	ldr	r1, [r7, #8]
 800f51c:	68f8      	ldr	r0, [r7, #12]
 800f51e:	f000 f897 	bl	800f650 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 800f522:	bf00      	nop
 800f524:	3710      	adds	r7, #16
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
	...

0800f52c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 800f52c:	b5b0      	push	{r4, r5, r7, lr}
 800f52e:	b08c      	sub	sp, #48	@ 0x30
 800f530:	af00      	add	r7, sp, #0
 800f532:	60f8      	str	r0, [r7, #12]
 800f534:	60b9      	str	r1, [r7, #8]
 800f536:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800f538:	4a39      	ldr	r2, [pc, #228]	@ (800f620 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 800f53a:	2101      	movs	r1, #1
 800f53c:	68f8      	ldr	r0, [r7, #12]
 800f53e:	f000 f89f 	bl	800f680 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>
 800f542:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	685b      	ldr	r3, [r3, #4]
 800f54e:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 800f550:	68f8      	ldr	r0, [r7, #12]
 800f552:	f7ff ff10 	bl	800f376 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 800f556:	4603      	mov	r3, r0
 800f558:	617b      	str	r3, [r7, #20]
 800f55a:	f107 0214 	add.w	r2, r7, #20
 800f55e:	f107 0308 	add.w	r3, r7, #8
 800f562:	4611      	mov	r1, r2
 800f564:	4618      	mov	r0, r3
 800f566:	f000 f8d2 	bl	800f70e <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 800f56a:	4603      	mov	r3, r0
 800f56c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f572:	4618      	mov	r0, r3
 800f574:	f000 f8e0 	bl	800f738 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>
 800f578:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800f57a:	69fb      	ldr	r3, [r7, #28]
 800f57c:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800f57e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800f580:	6a3b      	ldr	r3, [r7, #32]
 800f582:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 800f584:	69fa      	ldr	r2, [r7, #28]
 800f586:	18d5      	adds	r5, r2, r3
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f000 f856 	bl	800f63a <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 800f58e:	4603      	mov	r3, r0
 800f590:	461a      	mov	r2, r3
 800f592:	4629      	mov	r1, r5
 800f594:	4620      	mov	r0, r4
 800f596:	f7ff ffb5 	bl	800f504 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800f59a:	2300      	movs	r3, #0
 800f59c:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800f59e:	f107 0308 	add.w	r3, r7, #8
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7ff ffa3 	bl	800f4ee <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7fa fff1 	bl	800a596 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800f5b4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800f5b6:	69fa      	ldr	r2, [r7, #28]
 800f5b8:	4621      	mov	r1, r4
 800f5ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f5bc:	f000 f8d0 	bl	800f760 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 800f5c0:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800f5c2:	69bb      	ldr	r3, [r7, #24]
 800f5c4:	3308      	adds	r3, #8
 800f5c6:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800f5c8:	f107 0308 	add.w	r3, r7, #8
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7ff ff8e 	bl	800f4ee <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7fa ffdc 	bl	800a596 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800f5de:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800f5e0:	69ba      	ldr	r2, [r7, #24]
 800f5e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	f000 f8bb 	bl	800f760 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 800f5ea:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800f5ec:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	689a      	ldr	r2, [r3, #8]
 800f5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5f4:	1ad3      	subs	r3, r2, r3
 800f5f6:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 800f5f8:	461a      	mov	r2, r3
 800f5fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f5fc:	f7fb f993 	bl	800a926 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	69fa      	ldr	r2, [r7, #28]
 800f604:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	69ba      	ldr	r2, [r7, #24]
 800f60a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f60e:	00db      	lsls	r3, r3, #3
 800f610:	69fa      	ldr	r2, [r7, #28]
 800f612:	441a      	add	r2, r3
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	609a      	str	r2, [r3, #8]
    }
 800f618:	bf00      	nop
 800f61a:	3730      	adds	r7, #48	@ 0x30
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bdb0      	pop	{r4, r5, r7, pc}
 800f620:	0801e754 	.word	0x0801e754

0800f624 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800f624:	b480      	push	{r7}
 800f626:	b083      	sub	sp, #12
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	4618      	mov	r0, r3
 800f630:	370c      	adds	r7, #12
 800f632:	46bd      	mov	sp, r7
 800f634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f638:	4770      	bx	lr

0800f63a <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f63a:	b480      	push	{r7}
 800f63c:	b083      	sub	sp, #12
 800f63e:	af00      	add	r7, sp, #0
 800f640:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	4618      	mov	r0, r3
 800f646:	370c      	adds	r7, #12
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr

0800f650 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800f650:	b590      	push	{r4, r7, lr}
 800f652:	b085      	sub	sp, #20
 800f654:	af00      	add	r7, sp, #0
 800f656:	60f8      	str	r0, [r7, #12]
 800f658:	60b9      	str	r1, [r7, #8]
 800f65a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f65c:	68bb      	ldr	r3, [r7, #8]
 800f65e:	4619      	mov	r1, r3
 800f660:	2008      	movs	r0, #8
 800f662:	f7f8 fc0f 	bl	8007e84 <_ZnwjPv>
 800f666:	4604      	mov	r4, r0
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f7ff ffe6 	bl	800f63a <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 800f66e:	4603      	mov	r3, r0
 800f670:	4619      	mov	r1, r3
 800f672:	4620      	mov	r0, r4
 800f674:	f7f9 fa0e 	bl	8008a94 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800f678:	bf00      	nop
 800f67a:	3714      	adds	r7, #20
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd90      	pop	{r4, r7, pc}

0800f680 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800f680:	b590      	push	{r4, r7, lr}
 800f682:	b087      	sub	sp, #28
 800f684:	af00      	add	r7, sp, #0
 800f686:	60f8      	str	r0, [r7, #12]
 800f688:	60b9      	str	r1, [r7, #8]
 800f68a:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800f68c:	68f8      	ldr	r0, [r7, #12]
 800f68e:	f000 f886 	bl	800f79e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800f692:	4604      	mov	r4, r0
 800f694:	68f8      	ldr	r0, [r7, #12]
 800f696:	f7ff feea 	bl	800f46e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800f69a:	4603      	mov	r3, r0
 800f69c:	1ae2      	subs	r2, r4, r3
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	bf34      	ite	cc
 800f6a4:	2301      	movcc	r3, #1
 800f6a6:	2300      	movcs	r3, #0
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d002      	beq.n	800f6b4 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f00d f912 	bl	801c8d8 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800f6b4:	68f8      	ldr	r0, [r7, #12]
 800f6b6:	f7ff feda 	bl	800f46e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800f6ba:	4604      	mov	r4, r0
 800f6bc:	68f8      	ldr	r0, [r7, #12]
 800f6be:	f7ff fed6 	bl	800f46e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	613b      	str	r3, [r7, #16]
 800f6c6:	f107 0208 	add.w	r2, r7, #8
 800f6ca:	f107 0310 	add.w	r3, r7, #16
 800f6ce:	4611      	mov	r1, r2
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f000 f875 	bl	800f7c0 <_ZSt3maxIjERKT_S2_S2_>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	4423      	add	r3, r4
 800f6dc:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f6de:	68f8      	ldr	r0, [r7, #12]
 800f6e0:	f7ff fec5 	bl	800f46e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800f6e4:	4602      	mov	r2, r0
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d306      	bcc.n	800f6fa <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x7a>
 800f6ec:	68f8      	ldr	r0, [r7, #12]
 800f6ee:	f000 f856 	bl	800f79e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800f6f2:	4602      	mov	r2, r0
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d904      	bls.n	800f704 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x84>
 800f6fa:	68f8      	ldr	r0, [r7, #12]
 800f6fc:	f000 f84f 	bl	800f79e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800f700:	4603      	mov	r3, r0
 800f702:	e000      	b.n	800f706 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x86>
 800f704:	697b      	ldr	r3, [r7, #20]
      }
 800f706:	4618      	mov	r0, r3
 800f708:	371c      	adds	r7, #28
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd90      	pop	{r4, r7, pc}

0800f70e <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800f70e:	b590      	push	{r4, r7, lr}
 800f710:	b083      	sub	sp, #12
 800f712:	af00      	add	r7, sp, #0
 800f714:	6078      	str	r0, [r7, #4]
 800f716:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f7ff fee8 	bl	800f4ee <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800f71e:	4603      	mov	r3, r0
 800f720:	681c      	ldr	r4, [r3, #0]
 800f722:	6838      	ldr	r0, [r7, #0]
 800f724:	f7ff fee3 	bl	800f4ee <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800f728:	4603      	mov	r3, r0
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	1ae3      	subs	r3, r4, r3
 800f72e:	10db      	asrs	r3, r3, #3
 800f730:	4618      	mov	r0, r3
 800f732:	370c      	adds	r7, #12
 800f734:	46bd      	mov	sp, r7
 800f736:	bd90      	pop	{r4, r7, pc}

0800f738 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800f738:	b580      	push	{r7, lr}
 800f73a:	b082      	sub	sp, #8
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d006      	beq.n	800f756 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x1e>
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6839      	ldr	r1, [r7, #0]
 800f74c:	4618      	mov	r0, r3
 800f74e:	f000 f84b 	bl	800f7e8 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>
 800f752:	4603      	mov	r3, r0
 800f754:	e000      	b.n	800f758 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x20>
 800f756:	2300      	movs	r3, #0
      }
 800f758:	4618      	mov	r0, r3
 800f75a:	3708      	adds	r7, #8
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}

0800f760 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800f760:	b580      	push	{r7, lr}
 800f762:	b084      	sub	sp, #16
 800f764:	af00      	add	r7, sp, #0
 800f766:	60f8      	str	r0, [r7, #12]
 800f768:	60b9      	str	r1, [r7, #8]
 800f76a:	607a      	str	r2, [r7, #4]
 800f76c:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	687a      	ldr	r2, [r7, #4]
 800f772:	68b9      	ldr	r1, [r7, #8]
 800f774:	68f8      	ldr	r0, [r7, #12]
 800f776:	f000 f846 	bl	800f806 <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 800f77a:	4603      	mov	r3, r0
      }
 800f77c:	4618      	mov	r0, r3
 800f77e:	3710      	adds	r7, #16
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}

0800f784 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800f784:	b580      	push	{r7, lr}
 800f786:	b082      	sub	sp, #8
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800f78e:	6839      	ldr	r1, [r7, #0]
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f000 f855 	bl	800f840 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>
	}
 800f796:	bf00      	nop
 800f798:	3708      	adds	r7, #8
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}

0800f79e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800f79e:	b580      	push	{r7, lr}
 800f7a0:	b082      	sub	sp, #8
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f000 f86f 	bl	800f88c <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f000 f851 	bl	800f858 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3708      	adds	r7, #8
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800f7c0:	b480      	push	{r7}
 800f7c2:	b083      	sub	sp, #12
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d201      	bcs.n	800f7da <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	e000      	b.n	800f7dc <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800f7da:	687b      	ldr	r3, [r7, #4]
    }
 800f7dc:	4618      	mov	r0, r3
 800f7de:	370c      	adds	r7, #12
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e6:	4770      	bx	lr

0800f7e8 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	6839      	ldr	r1, [r7, #0]
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f000 f853 	bl	800f8a2 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	4618      	mov	r0, r3
 800f800:	3708      	adds	r7, #8
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}

0800f806 <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800f806:	b5b0      	push	{r4, r5, r7, lr}
 800f808:	b084      	sub	sp, #16
 800f80a:	af00      	add	r7, sp, #0
 800f80c:	60f8      	str	r0, [r7, #12]
 800f80e:	60b9      	str	r1, [r7, #8]
 800f810:	607a      	str	r2, [r7, #4]
 800f812:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 800f814:	68f8      	ldr	r0, [r7, #12]
 800f816:	f000 f86e 	bl	800f8f6 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800f81a:	4604      	mov	r4, r0
 800f81c:	68b8      	ldr	r0, [r7, #8]
 800f81e:	f000 f86a 	bl	800f8f6 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800f822:	4605      	mov	r5, r0
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f000 f866 	bl	800f8f6 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800f82a:	4602      	mov	r2, r0
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	4629      	mov	r1, r5
 800f830:	4620      	mov	r0, r4
 800f832:	f000 f86b 	bl	800f90c <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 800f836:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 800f838:	4618      	mov	r0, r3
 800f83a:	3710      	adds	r7, #16
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bdb0      	pop	{r4, r5, r7, pc}

0800f840 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 800f840:	b580      	push	{r7, lr}
 800f842:	b082      	sub	sp, #8
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800f84a:	6838      	ldr	r0, [r7, #0]
 800f84c:	f7f8 fee9 	bl	8008622 <_ZNSt10shared_ptrI6ModuleED1Ev>
 800f850:	bf00      	nop
 800f852:	3708      	adds	r7, #8
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}

0800f858 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800f858:	b580      	push	{r7, lr}
 800f85a:	b084      	sub	sp, #16
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800f860:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 800f864:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f000 f876 	bl	800f958 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>
 800f86c:	4603      	mov	r3, r0
 800f86e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800f870:	f107 0208 	add.w	r2, r7, #8
 800f874:	f107 030c 	add.w	r3, r7, #12
 800f878:	4611      	mov	r1, r2
 800f87a:	4618      	mov	r0, r3
 800f87c:	f000 f878 	bl	800f970 <_ZSt3minIjERKT_S2_S2_>
 800f880:	4603      	mov	r3, r0
 800f882:	681b      	ldr	r3, [r3, #0]
      }
 800f884:	4618      	mov	r0, r3
 800f886:	3710      	adds	r7, #16
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800f88c:	b480      	push	{r7}
 800f88e:	b083      	sub	sp, #12
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4618      	mov	r0, r3
 800f898:	370c      	adds	r7, #12
 800f89a:	46bd      	mov	sp, r7
 800f89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a0:	4770      	bx	lr

0800f8a2 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800f8a2:	b580      	push	{r7, lr}
 800f8a4:	b084      	sub	sp, #16
 800f8a6:	af00      	add	r7, sp, #0
 800f8a8:	60f8      	str	r0, [r7, #12]
 800f8aa:	60b9      	str	r1, [r7, #8]
 800f8ac:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800f8ae:	68f8      	ldr	r0, [r7, #12]
 800f8b0:	f000 f872 	bl	800f998 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 800f8b4:	4602      	mov	r2, r0
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	bf8c      	ite	hi
 800f8bc:	2301      	movhi	r3, #1
 800f8be:	2300      	movls	r3, #0
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	bf14      	ite	ne
 800f8c6:	2301      	movne	r3, #1
 800f8c8:	2300      	moveq	r3, #0
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d007      	beq.n	800f8e0 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f8d6:	d301      	bcc.n	800f8dc <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800f8d8:	f00c fff8 	bl	801c8cc <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800f8dc:	f00c fff3 	bl	801c8c6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800f8e0:	68bb      	ldr	r3, [r7, #8]
 800f8e2:	00db      	lsls	r3, r3, #3
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f00c ffdb 	bl	801c8a0 <_Znwj>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	bf00      	nop
      }
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	3710      	adds	r7, #16
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}

0800f8f6 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>:
    __niter_base(_Iterator __it)
 800f8f6:	b480      	push	{r7}
 800f8f8:	b083      	sub	sp, #12
 800f8fa:	af00      	add	r7, sp, #0
 800f8fc:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	4618      	mov	r0, r3
 800f902:	370c      	adds	r7, #12
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800f90c:	b590      	push	{r4, r7, lr}
 800f90e:	b087      	sub	sp, #28
 800f910:	af00      	add	r7, sp, #0
 800f912:	60f8      	str	r0, [r7, #12]
 800f914:	60b9      	str	r1, [r7, #8]
 800f916:	607a      	str	r2, [r7, #4]
 800f918:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800f91e:	e012      	b.n	800f946 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800f920:	6978      	ldr	r0, [r7, #20]
 800f922:	f7fb fbdc 	bl	800b0de <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800f926:	4604      	mov	r4, r0
 800f928:	68f8      	ldr	r0, [r7, #12]
 800f92a:	f7fb fbd8 	bl	800b0de <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800f92e:	4603      	mov	r3, r0
 800f930:	683a      	ldr	r2, [r7, #0]
 800f932:	4619      	mov	r1, r3
 800f934:	4620      	mov	r0, r4
 800f936:	f000 f83b 	bl	800f9b0 <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	3308      	adds	r3, #8
 800f93e:	60fb      	str	r3, [r7, #12]
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	3308      	adds	r3, #8
 800f944:	617b      	str	r3, [r7, #20]
 800f946:	68fa      	ldr	r2, [r7, #12]
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d1e8      	bne.n	800f920 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x14>
      return __cur;
 800f94e:	697b      	ldr	r3, [r7, #20]
    }
 800f950:	4618      	mov	r0, r3
 800f952:	371c      	adds	r7, #28
 800f954:	46bd      	mov	sp, r7
 800f956:	bd90      	pop	{r4, r7, pc}

0800f958 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800f958:	b580      	push	{r7, lr}
 800f95a:	b082      	sub	sp, #8
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f000 f840 	bl	800f9e6 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>
 800f966:	4603      	mov	r3, r0
      }
 800f968:	4618      	mov	r0, r3
 800f96a:	3708      	adds	r7, #8
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}

0800f970 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800f970:	b480      	push	{r7}
 800f972:	b083      	sub	sp, #12
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	681a      	ldr	r2, [r3, #0]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	429a      	cmp	r2, r3
 800f984:	d201      	bcs.n	800f98a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	e000      	b.n	800f98c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800f98a:	687b      	ldr	r3, [r7, #4]
    }
 800f98c:	4618      	mov	r0, r3
 800f98e:	370c      	adds	r7, #12
 800f990:	46bd      	mov	sp, r7
 800f992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f996:	4770      	bx	lr

0800f998 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800f998:	b480      	push	{r7}
 800f99a:	b083      	sub	sp, #12
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800f9a0:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
      }
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	370c      	adds	r7, #12
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr

0800f9b0 <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b084      	sub	sp, #16
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	60f8      	str	r0, [r7, #12]
 800f9b8:	60b9      	str	r1, [r7, #8]
 800f9ba:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800f9bc:	68b8      	ldr	r0, [r7, #8]
 800f9be:	f000 f81e 	bl	800f9fe <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	68f9      	ldr	r1, [r7, #12]
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f000 f823 	bl	800fa14 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800f9ce:	68b8      	ldr	r0, [r7, #8]
 800f9d0:	f7fb fb85 	bl	800b0de <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f7ff fed3 	bl	800f784 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>
    }
 800f9de:	bf00      	nop
 800f9e0:	3710      	adds	r7, #16
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}

0800f9e6 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800f9e6:	b580      	push	{r7, lr}
 800f9e8:	b082      	sub	sp, #8
 800f9ea:	af00      	add	r7, sp, #0
 800f9ec:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f7ff ffd2 	bl	800f998 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3708      	adds	r7, #8
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}

0800f9fe <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800f9fe:	b480      	push	{r7}
 800fa00:	b083      	sub	sp, #12
 800fa02:	af00      	add	r7, sp, #0
 800fa04:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	4618      	mov	r0, r3
 800fa0a:	370c      	adds	r7, #12
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr

0800fa14 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b084      	sub	sp, #16
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	60f8      	str	r0, [r7, #12]
 800fa1c:	60b9      	str	r1, [r7, #8]
 800fa1e:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f000 f80a 	bl	800fa3a <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800fa26:	4603      	mov	r3, r0
 800fa28:	461a      	mov	r2, r3
 800fa2a:	68b9      	ldr	r1, [r7, #8]
 800fa2c:	68f8      	ldr	r0, [r7, #12]
 800fa2e:	f000 f80f 	bl	800fa50 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 800fa32:	bf00      	nop
 800fa34:	3710      	adds	r7, #16
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}

0800fa3a <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fa3a:	b480      	push	{r7}
 800fa3c:	b083      	sub	sp, #12
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	4618      	mov	r0, r3
 800fa46:	370c      	adds	r7, #12
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr

0800fa50 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800fa50:	b590      	push	{r4, r7, lr}
 800fa52:	b085      	sub	sp, #20
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	60f8      	str	r0, [r7, #12]
 800fa58:	60b9      	str	r1, [r7, #8]
 800fa5a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	4619      	mov	r1, r3
 800fa60:	2008      	movs	r0, #8
 800fa62:	f7f8 fa0f 	bl	8007e84 <_ZnwjPv>
 800fa66:	4604      	mov	r4, r0
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f7ff ffe6 	bl	800fa3a <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	4619      	mov	r1, r3
 800fa72:	4620      	mov	r0, r4
 800fa74:	f000 f804 	bl	800fa80 <_ZNSt10shared_ptrI6ModuleEC1EOS1_>
 800fa78:	bf00      	nop
 800fa7a:	3714      	adds	r7, #20
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd90      	pop	{r4, r7, pc}

0800fa80 <_ZNSt10shared_ptrI6ModuleEC1EOS1_>:
      shared_ptr(shared_ptr&& __r) noexcept
 800fa80:	b590      	push	{r4, r7, lr}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 800fa8a:	687c      	ldr	r4, [r7, #4]
 800fa8c:	6838      	ldr	r0, [r7, #0]
 800fa8e:	f7ff ffb6 	bl	800f9fe <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800fa92:	4603      	mov	r3, r0
 800fa94:	4619      	mov	r1, r3
 800fa96:	4620      	mov	r0, r4
 800fa98:	f000 f805 	bl	800faa6 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	4618      	mov	r0, r3
 800faa0:	370c      	adds	r7, #12
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd90      	pop	{r4, r7, pc}

0800faa6 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800faa6:	b580      	push	{r7, lr}
 800faa8:	b082      	sub	sp, #8
 800faaa:	af00      	add	r7, sp, #0
 800faac:	6078      	str	r0, [r7, #4]
 800faae:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	681a      	ldr	r2, [r3, #0]
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	601a      	str	r2, [r3, #0]
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	3304      	adds	r3, #4
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7fa faed 	bl	800a09c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	1d1a      	adds	r2, r3, #4
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	3304      	adds	r3, #4
 800faca:	4619      	mov	r1, r3
 800facc:	4610      	mov	r0, r2
 800face:	f7fa fdfb 	bl	800a6c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	2200      	movs	r2, #0
 800fad6:	601a      	str	r2, [r3, #0]
      }
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	4618      	mov	r0, r3
 800fadc:	3708      	adds	r7, #8
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}
	...

0800fae4 <__NVIC_EnableIRQ>:
{
 800fae4:	b480      	push	{r7}
 800fae6:	b083      	sub	sp, #12
 800fae8:	af00      	add	r7, sp, #0
 800faea:	4603      	mov	r3, r0
 800faec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800faee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	db0b      	blt.n	800fb0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800faf6:	88fb      	ldrh	r3, [r7, #6]
 800faf8:	f003 021f 	and.w	r2, r3, #31
 800fafc:	4907      	ldr	r1, [pc, #28]	@ (800fb1c <__NVIC_EnableIRQ+0x38>)
 800fafe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fb02:	095b      	lsrs	r3, r3, #5
 800fb04:	2001      	movs	r0, #1
 800fb06:	fa00 f202 	lsl.w	r2, r0, r2
 800fb0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800fb0e:	bf00      	nop
 800fb10:	370c      	adds	r7, #12
 800fb12:	46bd      	mov	sp, r7
 800fb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb18:	4770      	bx	lr
 800fb1a:	bf00      	nop
 800fb1c:	e000e100 	.word	0xe000e100

0800fb20 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* _timer, IRQn_Type _irq, uint32_t _frequency, pruThread* _ownerPtr):
 800fb20:	b590      	push	{r4, r7, lr}
 800fb22:	b085      	sub	sp, #20
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	603b      	str	r3, [r7, #0]
 800fb2c:	4613      	mov	r3, r2
 800fb2e:	80fb      	strh	r3, [r7, #6]
	timer(_timer),
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	68ba      	ldr	r2, [r7, #8]
 800fb34:	605a      	str	r2, [r3, #4]
	irq(_irq),
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	88fa      	ldrh	r2, [r7, #6]
 800fb3a:	811a      	strh	r2, [r3, #8]
	frequency(_frequency),
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	683a      	ldr	r2, [r7, #0]
 800fb40:	60da      	str	r2, [r3, #12]
	timerOwnerPtr(_ownerPtr)
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	6a3a      	ldr	r2, [r7, #32]
 800fb46:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 800fb48:	2008      	movs	r0, #8
 800fb4a:	f00c fea9 	bl	801c8a0 <_Znwj>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	461c      	mov	r4, r3
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fb58:	68fa      	ldr	r2, [r7, #12]
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	4620      	mov	r0, r4
 800fb5e:	f000 f8af 	bl	800fcc0 <_ZN14TimerInterruptC1EiP8pruTimer>
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	601c      	str	r4, [r3, #0]

	startTimer();
 800fb66:	68f8      	ldr	r0, [r7, #12]
 800fb68:	f000 f812 	bl	800fb90 <_ZN8pruTimer10startTimerEv>
}
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3714      	adds	r7, #20
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd90      	pop	{r4, r7, pc}

0800fb76 <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 800fb76:	b580      	push	{r7, lr}
 800fb78:	b082      	sub	sp, #8
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
	//Do something here
	timerOwnerPtr->update();
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	691b      	ldr	r3, [r3, #16]
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7ff fbad 	bl	800f2e2 <_ZN9pruThread6updateEv>
}
 800fb88:	bf00      	nop
 800fb8a:	3708      	adds	r7, #8
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}

0800fb90 <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b086      	sub	sp, #24
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (timer == TIM2)
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fba0:	d116      	bne.n	800fbd0 <_ZN8pruTimer10startTimerEv+0x40>
    {
        printf("	power on Timer 2\n\r");
 800fba2:	483f      	ldr	r0, [pc, #252]	@ (800fca0 <_ZN8pruTimer10startTimerEv+0x110>)
 800fba4:	f00d fb0a 	bl	801d1bc <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 800fba8:	4b3e      	ldr	r3, [pc, #248]	@ (800fca4 <_ZN8pruTimer10startTimerEv+0x114>)
 800fbaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fbae:	4a3d      	ldr	r2, [pc, #244]	@ (800fca4 <_ZN8pruTimer10startTimerEv+0x114>)
 800fbb0:	f043 0301 	orr.w	r3, r3, #1
 800fbb4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800fbb8:	4b3a      	ldr	r3, [pc, #232]	@ (800fca4 <_ZN8pruTimer10startTimerEv+0x114>)
 800fbba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fbbe:	f003 0301 	and.w	r3, r3, #1
 800fbc2:	613b      	str	r3, [r7, #16]
 800fbc4:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB1CLK;
 800fbc6:	4b38      	ldr	r3, [pc, #224]	@ (800fca8 <_ZN8pruTimer10startTimerEv+0x118>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	085b      	lsrs	r3, r3, #1
 800fbcc:	617b      	str	r3, [r7, #20]
 800fbce:	e036      	b.n	800fc3e <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (timer == TIM3)
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	685b      	ldr	r3, [r3, #4]
 800fbd4:	4a35      	ldr	r2, [pc, #212]	@ (800fcac <_ZN8pruTimer10startTimerEv+0x11c>)
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d116      	bne.n	800fc08 <_ZN8pruTimer10startTimerEv+0x78>
    {
        printf("	power on Timer 3\n\r");
 800fbda:	4835      	ldr	r0, [pc, #212]	@ (800fcb0 <_ZN8pruTimer10startTimerEv+0x120>)
 800fbdc:	f00d faee 	bl	801d1bc <iprintf>
        __HAL_RCC_TIM3_CLK_ENABLE();
 800fbe0:	4b30      	ldr	r3, [pc, #192]	@ (800fca4 <_ZN8pruTimer10startTimerEv+0x114>)
 800fbe2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fbe6:	4a2f      	ldr	r2, [pc, #188]	@ (800fca4 <_ZN8pruTimer10startTimerEv+0x114>)
 800fbe8:	f043 0302 	orr.w	r3, r3, #2
 800fbec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800fbf0:	4b2c      	ldr	r3, [pc, #176]	@ (800fca4 <_ZN8pruTimer10startTimerEv+0x114>)
 800fbf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fbf6:	f003 0302 	and.w	r3, r3, #2
 800fbfa:	60fb      	str	r3, [r7, #12]
 800fbfc:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 800fbfe:	4b2a      	ldr	r3, [pc, #168]	@ (800fca8 <_ZN8pruTimer10startTimerEv+0x118>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	085b      	lsrs	r3, r3, #1
 800fc04:	617b      	str	r3, [r7, #20]
 800fc06:	e01a      	b.n	800fc3e <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (timer == TIM4)
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	685b      	ldr	r3, [r3, #4]
 800fc0c:	4a29      	ldr	r2, [pc, #164]	@ (800fcb4 <_ZN8pruTimer10startTimerEv+0x124>)
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d115      	bne.n	800fc3e <_ZN8pruTimer10startTimerEv+0xae>
    {
        printf("	power on Timer 4\n\r");
 800fc12:	4829      	ldr	r0, [pc, #164]	@ (800fcb8 <_ZN8pruTimer10startTimerEv+0x128>)
 800fc14:	f00d fad2 	bl	801d1bc <iprintf>
        __HAL_RCC_TIM4_CLK_ENABLE();
 800fc18:	4b22      	ldr	r3, [pc, #136]	@ (800fca4 <_ZN8pruTimer10startTimerEv+0x114>)
 800fc1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fc1e:	4a21      	ldr	r2, [pc, #132]	@ (800fca4 <_ZN8pruTimer10startTimerEv+0x114>)
 800fc20:	f043 0304 	orr.w	r3, r3, #4
 800fc24:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800fc28:	4b1e      	ldr	r3, [pc, #120]	@ (800fca4 <_ZN8pruTimer10startTimerEv+0x114>)
 800fc2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800fc2e:	f003 0304 	and.w	r3, r3, #4
 800fc32:	60bb      	str	r3, [r7, #8]
 800fc34:	68bb      	ldr	r3, [r7, #8]
        TIM_CLK = APB1CLK;
 800fc36:	4b1c      	ldr	r3, [pc, #112]	@ (800fca8 <_ZN8pruTimer10startTimerEv+0x118>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	085b      	lsrs	r3, r3, #1
 800fc3c:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    timer->CR2 &= 0;                                            // UG used as trigg output
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	685b      	ldr	r3, [r3, #4]
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	685b      	ldr	r3, [r3, #4]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	605a      	str	r2, [r3, #4]
    timer->PSC = TIM_PSC-1;                                     // prescaler
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	2200      	movs	r2, #0
 800fc52:	629a      	str	r2, [r3, #40]	@ 0x28
    timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	68db      	ldr	r3, [r3, #12]
 800fc58:	697a      	ldr	r2, [r7, #20]
 800fc5a:	fbb2 f2f3 	udiv	r2, r2, r3
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	685b      	ldr	r3, [r3, #4]
 800fc62:	3a01      	subs	r2, #1
 800fc64:	62da      	str	r2, [r3, #44]	@ 0x2c
    timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	685b      	ldr	r3, [r3, #4]
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	615a      	str	r2, [r3, #20]
    timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	685b      	ldr	r3, [r3, #4]
 800fc72:	2201      	movs	r2, #1
 800fc74:	60da      	str	r2, [r3, #12]

    timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	685b      	ldr	r3, [r3, #4]
 800fc7a:	681a      	ldr	r2, [r3, #0]
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	685b      	ldr	r3, [r3, #4]
 800fc80:	f042 0201 	orr.w	r2, r2, #1
 800fc84:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(irq);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7ff ff29 	bl	800fae4 <__NVIC_EnableIRQ>

    printf("	timer started\n");
 800fc92:	480a      	ldr	r0, [pc, #40]	@ (800fcbc <_ZN8pruTimer10startTimerEv+0x12c>)
 800fc94:	f00d fb02 	bl	801d29c <puts>
}
 800fc98:	bf00      	nop
 800fc9a:	3718      	adds	r7, #24
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}
 800fca0:	0801e770 	.word	0x0801e770
 800fca4:	58024400 	.word	0x58024400
 800fca8:	2400001c 	.word	0x2400001c
 800fcac:	40000400 	.word	0x40000400
 800fcb0:	0801e784 	.word	0x0801e784
 800fcb4:	40000800 	.word	0x40000800
 800fcb8:	0801e798 	.word	0x0801e798
 800fcbc:	0801e7ac 	.word	0x0801e7ac

0800fcc0 <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b084      	sub	sp, #16
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	60f8      	str	r0, [r7, #12]
 800fcc8:	60b9      	str	r1, [r7, #8]
 800fcca:	607a      	str	r2, [r7, #4]
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7f2 fbc4 	bl	800245c <_ZN9InterruptC1Ev>
 800fcd4:	4a07      	ldr	r2, [pc, #28]	@ (800fcf4 <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	687a      	ldr	r2, [r7, #4]
 800fcde:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	4619      	mov	r1, r3
 800fce4:	68b8      	ldr	r0, [r7, #8]
 800fce6:	f7f2 fbc9 	bl	800247c <_ZN9Interrupt8RegisterEiPS_>
}
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	4618      	mov	r0, r3
 800fcee:	3710      	adds	r7, #16
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}
 800fcf4:	0801ea88 	.word	0x0801ea88

0800fcf8 <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	685b      	ldr	r3, [r3, #4]
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7ff ff36 	bl	800fb76 <_ZN8pruTimer9timerTickEv>
}
 800fd0a:	bf00      	nop
 800fd0c:	3708      	adds	r7, #8
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
	...

0800fd14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800fd14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800fd4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800fd18:	f7fb feda 	bl	800bad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800fd1c:	480c      	ldr	r0, [pc, #48]	@ (800fd50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800fd1e:	490d      	ldr	r1, [pc, #52]	@ (800fd54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800fd20:	4a0d      	ldr	r2, [pc, #52]	@ (800fd58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800fd22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800fd24:	e002      	b.n	800fd2c <LoopCopyDataInit>

0800fd26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800fd26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800fd28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800fd2a:	3304      	adds	r3, #4

0800fd2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800fd2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800fd2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800fd30:	d3f9      	bcc.n	800fd26 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800fd32:	4a0a      	ldr	r2, [pc, #40]	@ (800fd5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800fd34:	4c0a      	ldr	r4, [pc, #40]	@ (800fd60 <LoopFillZerobss+0x22>)
  movs r3, #0
 800fd36:	2300      	movs	r3, #0
  b LoopFillZerobss
 800fd38:	e001      	b.n	800fd3e <LoopFillZerobss>

0800fd3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800fd3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800fd3c:	3204      	adds	r2, #4

0800fd3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800fd3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800fd40:	d3fb      	bcc.n	800fd3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800fd42:	f00d fc4d 	bl	801d5e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800fd46:	f7f7 fdef 	bl	8007928 <main>
  bx  lr
 800fd4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800fd4c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800fd50:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800fd54:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 800fd58:	0801ecc4 	.word	0x0801ecc4
  ldr r2, =_sbss
 800fd5c:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 800fd60:	24000c54 	.word	0x24000c54

0800fd64 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800fd64:	e7fe      	b.n	800fd64 <ADC3_IRQHandler>
	...

0800fd68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b082      	sub	sp, #8
 800fd6c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800fd6e:	2003      	movs	r0, #3
 800fd70:	f000 f9a2 	bl	80100b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800fd74:	f003 fdb0 	bl	80138d8 <HAL_RCC_GetSysClockFreq>
 800fd78:	4602      	mov	r2, r0
 800fd7a:	4b15      	ldr	r3, [pc, #84]	@ (800fdd0 <HAL_Init+0x68>)
 800fd7c:	699b      	ldr	r3, [r3, #24]
 800fd7e:	0a1b      	lsrs	r3, r3, #8
 800fd80:	f003 030f 	and.w	r3, r3, #15
 800fd84:	4913      	ldr	r1, [pc, #76]	@ (800fdd4 <HAL_Init+0x6c>)
 800fd86:	5ccb      	ldrb	r3, [r1, r3]
 800fd88:	f003 031f 	and.w	r3, r3, #31
 800fd8c:	fa22 f303 	lsr.w	r3, r2, r3
 800fd90:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fd92:	4b0f      	ldr	r3, [pc, #60]	@ (800fdd0 <HAL_Init+0x68>)
 800fd94:	699b      	ldr	r3, [r3, #24]
 800fd96:	f003 030f 	and.w	r3, r3, #15
 800fd9a:	4a0e      	ldr	r2, [pc, #56]	@ (800fdd4 <HAL_Init+0x6c>)
 800fd9c:	5cd3      	ldrb	r3, [r2, r3]
 800fd9e:	f003 031f 	and.w	r3, r3, #31
 800fda2:	687a      	ldr	r2, [r7, #4]
 800fda4:	fa22 f303 	lsr.w	r3, r2, r3
 800fda8:	4a0b      	ldr	r2, [pc, #44]	@ (800fdd8 <HAL_Init+0x70>)
 800fdaa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800fdac:	4a0b      	ldr	r2, [pc, #44]	@ (800fddc <HAL_Init+0x74>)
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800fdb2:	200f      	movs	r0, #15
 800fdb4:	f000 f814 	bl	800fde0 <HAL_InitTick>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d001      	beq.n	800fdc2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	e002      	b.n	800fdc8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800fdc2:	f7fb fc6b 	bl	800b69c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800fdc6:	2300      	movs	r3, #0
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3708      	adds	r7, #8
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}
 800fdd0:	58024400 	.word	0x58024400
 800fdd4:	0801e9a4 	.word	0x0801e9a4
 800fdd8:	24000020 	.word	0x24000020
 800fddc:	2400001c 	.word	0x2400001c

0800fde0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b082      	sub	sp, #8
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800fde8:	4b15      	ldr	r3, [pc, #84]	@ (800fe40 <HAL_InitTick+0x60>)
 800fdea:	781b      	ldrb	r3, [r3, #0]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d101      	bne.n	800fdf4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	e021      	b.n	800fe38 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800fdf4:	4b13      	ldr	r3, [pc, #76]	@ (800fe44 <HAL_InitTick+0x64>)
 800fdf6:	681a      	ldr	r2, [r3, #0]
 800fdf8:	4b11      	ldr	r3, [pc, #68]	@ (800fe40 <HAL_InitTick+0x60>)
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	4619      	mov	r1, r3
 800fdfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe02:	fbb3 f3f1 	udiv	r3, r3, r1
 800fe06:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f000 f98b 	bl	8010126 <HAL_SYSTICK_Config>
 800fe10:	4603      	mov	r3, r0
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d001      	beq.n	800fe1a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800fe16:	2301      	movs	r3, #1
 800fe18:	e00e      	b.n	800fe38 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2b0f      	cmp	r3, #15
 800fe1e:	d80a      	bhi.n	800fe36 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800fe20:	2200      	movs	r2, #0
 800fe22:	6879      	ldr	r1, [r7, #4]
 800fe24:	f04f 30ff 	mov.w	r0, #4294967295
 800fe28:	f000 f951 	bl	80100ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800fe2c:	4a06      	ldr	r2, [pc, #24]	@ (800fe48 <HAL_InitTick+0x68>)
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800fe32:	2300      	movs	r3, #0
 800fe34:	e000      	b.n	800fe38 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800fe36:	2301      	movs	r3, #1
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3708      	adds	r7, #8
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}
 800fe40:	24000028 	.word	0x24000028
 800fe44:	2400001c 	.word	0x2400001c
 800fe48:	24000024 	.word	0x24000024

0800fe4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800fe4c:	b480      	push	{r7}
 800fe4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800fe50:	4b06      	ldr	r3, [pc, #24]	@ (800fe6c <HAL_IncTick+0x20>)
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	461a      	mov	r2, r3
 800fe56:	4b06      	ldr	r3, [pc, #24]	@ (800fe70 <HAL_IncTick+0x24>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	4413      	add	r3, r2
 800fe5c:	4a04      	ldr	r2, [pc, #16]	@ (800fe70 <HAL_IncTick+0x24>)
 800fe5e:	6013      	str	r3, [r2, #0]
}
 800fe60:	bf00      	nop
 800fe62:	46bd      	mov	sp, r7
 800fe64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe68:	4770      	bx	lr
 800fe6a:	bf00      	nop
 800fe6c:	24000028 	.word	0x24000028
 800fe70:	2400045c 	.word	0x2400045c

0800fe74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800fe74:	b480      	push	{r7}
 800fe76:	af00      	add	r7, sp, #0
  return uwTick;
 800fe78:	4b03      	ldr	r3, [pc, #12]	@ (800fe88 <HAL_GetTick+0x14>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe84:	4770      	bx	lr
 800fe86:	bf00      	nop
 800fe88:	2400045c 	.word	0x2400045c

0800fe8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b084      	sub	sp, #16
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800fe94:	f7ff ffee 	bl	800fe74 <HAL_GetTick>
 800fe98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fea4:	d005      	beq.n	800feb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800fea6:	4b0a      	ldr	r3, [pc, #40]	@ (800fed0 <HAL_Delay+0x44>)
 800fea8:	781b      	ldrb	r3, [r3, #0]
 800feaa:	461a      	mov	r2, r3
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	4413      	add	r3, r2
 800feb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800feb2:	bf00      	nop
 800feb4:	f7ff ffde 	bl	800fe74 <HAL_GetTick>
 800feb8:	4602      	mov	r2, r0
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	1ad3      	subs	r3, r2, r3
 800febe:	68fa      	ldr	r2, [r7, #12]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d8f7      	bhi.n	800feb4 <HAL_Delay+0x28>
  {
  }
}
 800fec4:	bf00      	nop
 800fec6:	bf00      	nop
 800fec8:	3710      	adds	r7, #16
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}
 800fece:	bf00      	nop
 800fed0:	24000028 	.word	0x24000028

0800fed4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800fed4:	b480      	push	{r7}
 800fed6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800fed8:	4b03      	ldr	r3, [pc, #12]	@ (800fee8 <HAL_GetREVID+0x14>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	0c1b      	lsrs	r3, r3, #16
}
 800fede:	4618      	mov	r0, r3
 800fee0:	46bd      	mov	sp, r7
 800fee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee6:	4770      	bx	lr
 800fee8:	5c001000 	.word	0x5c001000

0800feec <__NVIC_SetPriorityGrouping>:
{
 800feec:	b480      	push	{r7}
 800feee:	b085      	sub	sp, #20
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f003 0307 	and.w	r3, r3, #7
 800fefa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800fefc:	4b0b      	ldr	r3, [pc, #44]	@ (800ff2c <__NVIC_SetPriorityGrouping+0x40>)
 800fefe:	68db      	ldr	r3, [r3, #12]
 800ff00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ff02:	68ba      	ldr	r2, [r7, #8]
 800ff04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800ff08:	4013      	ands	r3, r2
 800ff0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800ff14:	4b06      	ldr	r3, [pc, #24]	@ (800ff30 <__NVIC_SetPriorityGrouping+0x44>)
 800ff16:	4313      	orrs	r3, r2
 800ff18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ff1a:	4a04      	ldr	r2, [pc, #16]	@ (800ff2c <__NVIC_SetPriorityGrouping+0x40>)
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	60d3      	str	r3, [r2, #12]
}
 800ff20:	bf00      	nop
 800ff22:	3714      	adds	r7, #20
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr
 800ff2c:	e000ed00 	.word	0xe000ed00
 800ff30:	05fa0000 	.word	0x05fa0000

0800ff34 <__NVIC_GetPriorityGrouping>:
{
 800ff34:	b480      	push	{r7}
 800ff36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ff38:	4b04      	ldr	r3, [pc, #16]	@ (800ff4c <__NVIC_GetPriorityGrouping+0x18>)
 800ff3a:	68db      	ldr	r3, [r3, #12]
 800ff3c:	0a1b      	lsrs	r3, r3, #8
 800ff3e:	f003 0307 	and.w	r3, r3, #7
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr
 800ff4c:	e000ed00 	.word	0xe000ed00

0800ff50 <__NVIC_EnableIRQ>:
{
 800ff50:	b480      	push	{r7}
 800ff52:	b083      	sub	sp, #12
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	4603      	mov	r3, r0
 800ff58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ff5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	db0b      	blt.n	800ff7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ff62:	88fb      	ldrh	r3, [r7, #6]
 800ff64:	f003 021f 	and.w	r2, r3, #31
 800ff68:	4907      	ldr	r1, [pc, #28]	@ (800ff88 <__NVIC_EnableIRQ+0x38>)
 800ff6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ff6e:	095b      	lsrs	r3, r3, #5
 800ff70:	2001      	movs	r0, #1
 800ff72:	fa00 f202 	lsl.w	r2, r0, r2
 800ff76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ff7a:	bf00      	nop
 800ff7c:	370c      	adds	r7, #12
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff84:	4770      	bx	lr
 800ff86:	bf00      	nop
 800ff88:	e000e100 	.word	0xe000e100

0800ff8c <__NVIC_SetPriority>:
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b083      	sub	sp, #12
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	4603      	mov	r3, r0
 800ff94:	6039      	str	r1, [r7, #0]
 800ff96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ff98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	db0a      	blt.n	800ffb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	b2da      	uxtb	r2, r3
 800ffa4:	490c      	ldr	r1, [pc, #48]	@ (800ffd8 <__NVIC_SetPriority+0x4c>)
 800ffa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ffaa:	0112      	lsls	r2, r2, #4
 800ffac:	b2d2      	uxtb	r2, r2
 800ffae:	440b      	add	r3, r1
 800ffb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ffb4:	e00a      	b.n	800ffcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	b2da      	uxtb	r2, r3
 800ffba:	4908      	ldr	r1, [pc, #32]	@ (800ffdc <__NVIC_SetPriority+0x50>)
 800ffbc:	88fb      	ldrh	r3, [r7, #6]
 800ffbe:	f003 030f 	and.w	r3, r3, #15
 800ffc2:	3b04      	subs	r3, #4
 800ffc4:	0112      	lsls	r2, r2, #4
 800ffc6:	b2d2      	uxtb	r2, r2
 800ffc8:	440b      	add	r3, r1
 800ffca:	761a      	strb	r2, [r3, #24]
}
 800ffcc:	bf00      	nop
 800ffce:	370c      	adds	r7, #12
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr
 800ffd8:	e000e100 	.word	0xe000e100
 800ffdc:	e000ed00 	.word	0xe000ed00

0800ffe0 <NVIC_EncodePriority>:
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	b089      	sub	sp, #36	@ 0x24
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	60f8      	str	r0, [r7, #12]
 800ffe8:	60b9      	str	r1, [r7, #8]
 800ffea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	f003 0307 	and.w	r3, r3, #7
 800fff2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800fff4:	69fb      	ldr	r3, [r7, #28]
 800fff6:	f1c3 0307 	rsb	r3, r3, #7
 800fffa:	2b04      	cmp	r3, #4
 800fffc:	bf28      	it	cs
 800fffe:	2304      	movcs	r3, #4
 8010000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010002:	69fb      	ldr	r3, [r7, #28]
 8010004:	3304      	adds	r3, #4
 8010006:	2b06      	cmp	r3, #6
 8010008:	d902      	bls.n	8010010 <NVIC_EncodePriority+0x30>
 801000a:	69fb      	ldr	r3, [r7, #28]
 801000c:	3b03      	subs	r3, #3
 801000e:	e000      	b.n	8010012 <NVIC_EncodePriority+0x32>
 8010010:	2300      	movs	r3, #0
 8010012:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010014:	f04f 32ff 	mov.w	r2, #4294967295
 8010018:	69bb      	ldr	r3, [r7, #24]
 801001a:	fa02 f303 	lsl.w	r3, r2, r3
 801001e:	43da      	mvns	r2, r3
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	401a      	ands	r2, r3
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010028:	f04f 31ff 	mov.w	r1, #4294967295
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	fa01 f303 	lsl.w	r3, r1, r3
 8010032:	43d9      	mvns	r1, r3
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010038:	4313      	orrs	r3, r2
}
 801003a:	4618      	mov	r0, r3
 801003c:	3724      	adds	r7, #36	@ 0x24
 801003e:	46bd      	mov	sp, r7
 8010040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010044:	4770      	bx	lr
	...

08010048 <__NVIC_SystemReset>:
{
 8010048:	b480      	push	{r7}
 801004a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 801004c:	f3bf 8f4f 	dsb	sy
}
 8010050:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8010052:	4b06      	ldr	r3, [pc, #24]	@ (801006c <__NVIC_SystemReset+0x24>)
 8010054:	68db      	ldr	r3, [r3, #12]
 8010056:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801005a:	4904      	ldr	r1, [pc, #16]	@ (801006c <__NVIC_SystemReset+0x24>)
 801005c:	4b04      	ldr	r3, [pc, #16]	@ (8010070 <__NVIC_SystemReset+0x28>)
 801005e:	4313      	orrs	r3, r2
 8010060:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8010062:	f3bf 8f4f 	dsb	sy
}
 8010066:	bf00      	nop
    __NOP();
 8010068:	bf00      	nop
 801006a:	e7fd      	b.n	8010068 <__NVIC_SystemReset+0x20>
 801006c:	e000ed00 	.word	0xe000ed00
 8010070:	05fa0004 	.word	0x05fa0004

08010074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b082      	sub	sp, #8
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	3b01      	subs	r3, #1
 8010080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010084:	d301      	bcc.n	801008a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010086:	2301      	movs	r3, #1
 8010088:	e00f      	b.n	80100aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801008a:	4a0a      	ldr	r2, [pc, #40]	@ (80100b4 <SysTick_Config+0x40>)
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	3b01      	subs	r3, #1
 8010090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010092:	210f      	movs	r1, #15
 8010094:	f04f 30ff 	mov.w	r0, #4294967295
 8010098:	f7ff ff78 	bl	800ff8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801009c:	4b05      	ldr	r3, [pc, #20]	@ (80100b4 <SysTick_Config+0x40>)
 801009e:	2200      	movs	r2, #0
 80100a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80100a2:	4b04      	ldr	r3, [pc, #16]	@ (80100b4 <SysTick_Config+0x40>)
 80100a4:	2207      	movs	r2, #7
 80100a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80100a8:	2300      	movs	r3, #0
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3708      	adds	r7, #8
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}
 80100b2:	bf00      	nop
 80100b4:	e000e010 	.word	0xe000e010

080100b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b082      	sub	sp, #8
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f7ff ff13 	bl	800feec <__NVIC_SetPriorityGrouping>
}
 80100c6:	bf00      	nop
 80100c8:	3708      	adds	r7, #8
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}

080100ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80100ce:	b580      	push	{r7, lr}
 80100d0:	b086      	sub	sp, #24
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	4603      	mov	r3, r0
 80100d6:	60b9      	str	r1, [r7, #8]
 80100d8:	607a      	str	r2, [r7, #4]
 80100da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80100dc:	f7ff ff2a 	bl	800ff34 <__NVIC_GetPriorityGrouping>
 80100e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80100e2:	687a      	ldr	r2, [r7, #4]
 80100e4:	68b9      	ldr	r1, [r7, #8]
 80100e6:	6978      	ldr	r0, [r7, #20]
 80100e8:	f7ff ff7a 	bl	800ffe0 <NVIC_EncodePriority>
 80100ec:	4602      	mov	r2, r0
 80100ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80100f2:	4611      	mov	r1, r2
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7ff ff49 	bl	800ff8c <__NVIC_SetPriority>
}
 80100fa:	bf00      	nop
 80100fc:	3718      	adds	r7, #24
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}

08010102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010102:	b580      	push	{r7, lr}
 8010104:	b082      	sub	sp, #8
 8010106:	af00      	add	r7, sp, #0
 8010108:	4603      	mov	r3, r0
 801010a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801010c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010110:	4618      	mov	r0, r3
 8010112:	f7ff ff1d 	bl	800ff50 <__NVIC_EnableIRQ>
}
 8010116:	bf00      	nop
 8010118:	3708      	adds	r7, #8
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}

0801011e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 801011e:	b580      	push	{r7, lr}
 8010120:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8010122:	f7ff ff91 	bl	8010048 <__NVIC_SystemReset>

08010126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010126:	b580      	push	{r7, lr}
 8010128:	b082      	sub	sp, #8
 801012a:	af00      	add	r7, sp, #0
 801012c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f7ff ffa0 	bl	8010074 <SysTick_Config>
 8010134:	4603      	mov	r3, r0
}
 8010136:	4618      	mov	r0, r3
 8010138:	3708      	adds	r7, #8
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
	...

08010140 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8010140:	b480      	push	{r7}
 8010142:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8010144:	f3bf 8f5f 	dmb	sy
}
 8010148:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801014a:	4b07      	ldr	r3, [pc, #28]	@ (8010168 <HAL_MPU_Disable+0x28>)
 801014c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801014e:	4a06      	ldr	r2, [pc, #24]	@ (8010168 <HAL_MPU_Disable+0x28>)
 8010150:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010154:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8010156:	4b05      	ldr	r3, [pc, #20]	@ (801016c <HAL_MPU_Disable+0x2c>)
 8010158:	2200      	movs	r2, #0
 801015a:	605a      	str	r2, [r3, #4]
}
 801015c:	bf00      	nop
 801015e:	46bd      	mov	sp, r7
 8010160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010164:	4770      	bx	lr
 8010166:	bf00      	nop
 8010168:	e000ed00 	.word	0xe000ed00
 801016c:	e000ed90 	.word	0xe000ed90

08010170 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8010170:	b480      	push	{r7}
 8010172:	b083      	sub	sp, #12
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8010178:	4a0b      	ldr	r2, [pc, #44]	@ (80101a8 <HAL_MPU_Enable+0x38>)
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f043 0301 	orr.w	r3, r3, #1
 8010180:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8010182:	4b0a      	ldr	r3, [pc, #40]	@ (80101ac <HAL_MPU_Enable+0x3c>)
 8010184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010186:	4a09      	ldr	r2, [pc, #36]	@ (80101ac <HAL_MPU_Enable+0x3c>)
 8010188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801018c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801018e:	f3bf 8f4f 	dsb	sy
}
 8010192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010194:	f3bf 8f6f 	isb	sy
}
 8010198:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801019a:	bf00      	nop
 801019c:	370c      	adds	r7, #12
 801019e:	46bd      	mov	sp, r7
 80101a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a4:	4770      	bx	lr
 80101a6:	bf00      	nop
 80101a8:	e000ed90 	.word	0xe000ed90
 80101ac:	e000ed00 	.word	0xe000ed00

080101b0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80101b0:	b480      	push	{r7}
 80101b2:	b083      	sub	sp, #12
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	785a      	ldrb	r2, [r3, #1]
 80101bc:	4b1b      	ldr	r3, [pc, #108]	@ (801022c <HAL_MPU_ConfigRegion+0x7c>)
 80101be:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80101c0:	4b1a      	ldr	r3, [pc, #104]	@ (801022c <HAL_MPU_ConfigRegion+0x7c>)
 80101c2:	691b      	ldr	r3, [r3, #16]
 80101c4:	4a19      	ldr	r2, [pc, #100]	@ (801022c <HAL_MPU_ConfigRegion+0x7c>)
 80101c6:	f023 0301 	bic.w	r3, r3, #1
 80101ca:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80101cc:	4a17      	ldr	r2, [pc, #92]	@ (801022c <HAL_MPU_ConfigRegion+0x7c>)
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	7b1b      	ldrb	r3, [r3, #12]
 80101d8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	7adb      	ldrb	r3, [r3, #11]
 80101de:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80101e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	7a9b      	ldrb	r3, [r3, #10]
 80101e6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80101e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	7b5b      	ldrb	r3, [r3, #13]
 80101ee:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80101f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	7b9b      	ldrb	r3, [r3, #14]
 80101f6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80101f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	7bdb      	ldrb	r3, [r3, #15]
 80101fe:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8010200:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	7a5b      	ldrb	r3, [r3, #9]
 8010206:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8010208:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	7a1b      	ldrb	r3, [r3, #8]
 801020e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8010210:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8010212:	687a      	ldr	r2, [r7, #4]
 8010214:	7812      	ldrb	r2, [r2, #0]
 8010216:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8010218:	4a04      	ldr	r2, [pc, #16]	@ (801022c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801021a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801021c:	6113      	str	r3, [r2, #16]
}
 801021e:	bf00      	nop
 8010220:	370c      	adds	r7, #12
 8010222:	46bd      	mov	sp, r7
 8010224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010228:	4770      	bx	lr
 801022a:	bf00      	nop
 801022c:	e000ed90 	.word	0xe000ed90

08010230 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b086      	sub	sp, #24
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8010238:	f7ff fe1c 	bl	800fe74 <HAL_GetTick>
 801023c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d101      	bne.n	8010248 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8010244:	2301      	movs	r3, #1
 8010246:	e316      	b.n	8010876 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	4a66      	ldr	r2, [pc, #408]	@ (80103e8 <HAL_DMA_Init+0x1b8>)
 801024e:	4293      	cmp	r3, r2
 8010250:	d04a      	beq.n	80102e8 <HAL_DMA_Init+0xb8>
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	4a65      	ldr	r2, [pc, #404]	@ (80103ec <HAL_DMA_Init+0x1bc>)
 8010258:	4293      	cmp	r3, r2
 801025a:	d045      	beq.n	80102e8 <HAL_DMA_Init+0xb8>
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	4a63      	ldr	r2, [pc, #396]	@ (80103f0 <HAL_DMA_Init+0x1c0>)
 8010262:	4293      	cmp	r3, r2
 8010264:	d040      	beq.n	80102e8 <HAL_DMA_Init+0xb8>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	4a62      	ldr	r2, [pc, #392]	@ (80103f4 <HAL_DMA_Init+0x1c4>)
 801026c:	4293      	cmp	r3, r2
 801026e:	d03b      	beq.n	80102e8 <HAL_DMA_Init+0xb8>
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	4a60      	ldr	r2, [pc, #384]	@ (80103f8 <HAL_DMA_Init+0x1c8>)
 8010276:	4293      	cmp	r3, r2
 8010278:	d036      	beq.n	80102e8 <HAL_DMA_Init+0xb8>
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	4a5f      	ldr	r2, [pc, #380]	@ (80103fc <HAL_DMA_Init+0x1cc>)
 8010280:	4293      	cmp	r3, r2
 8010282:	d031      	beq.n	80102e8 <HAL_DMA_Init+0xb8>
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	4a5d      	ldr	r2, [pc, #372]	@ (8010400 <HAL_DMA_Init+0x1d0>)
 801028a:	4293      	cmp	r3, r2
 801028c:	d02c      	beq.n	80102e8 <HAL_DMA_Init+0xb8>
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	4a5c      	ldr	r2, [pc, #368]	@ (8010404 <HAL_DMA_Init+0x1d4>)
 8010294:	4293      	cmp	r3, r2
 8010296:	d027      	beq.n	80102e8 <HAL_DMA_Init+0xb8>
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	4a5a      	ldr	r2, [pc, #360]	@ (8010408 <HAL_DMA_Init+0x1d8>)
 801029e:	4293      	cmp	r3, r2
 80102a0:	d022      	beq.n	80102e8 <HAL_DMA_Init+0xb8>
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	4a59      	ldr	r2, [pc, #356]	@ (801040c <HAL_DMA_Init+0x1dc>)
 80102a8:	4293      	cmp	r3, r2
 80102aa:	d01d      	beq.n	80102e8 <HAL_DMA_Init+0xb8>
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	4a57      	ldr	r2, [pc, #348]	@ (8010410 <HAL_DMA_Init+0x1e0>)
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d018      	beq.n	80102e8 <HAL_DMA_Init+0xb8>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	4a56      	ldr	r2, [pc, #344]	@ (8010414 <HAL_DMA_Init+0x1e4>)
 80102bc:	4293      	cmp	r3, r2
 80102be:	d013      	beq.n	80102e8 <HAL_DMA_Init+0xb8>
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	4a54      	ldr	r2, [pc, #336]	@ (8010418 <HAL_DMA_Init+0x1e8>)
 80102c6:	4293      	cmp	r3, r2
 80102c8:	d00e      	beq.n	80102e8 <HAL_DMA_Init+0xb8>
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	4a53      	ldr	r2, [pc, #332]	@ (801041c <HAL_DMA_Init+0x1ec>)
 80102d0:	4293      	cmp	r3, r2
 80102d2:	d009      	beq.n	80102e8 <HAL_DMA_Init+0xb8>
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	4a51      	ldr	r2, [pc, #324]	@ (8010420 <HAL_DMA_Init+0x1f0>)
 80102da:	4293      	cmp	r3, r2
 80102dc:	d004      	beq.n	80102e8 <HAL_DMA_Init+0xb8>
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	4a50      	ldr	r2, [pc, #320]	@ (8010424 <HAL_DMA_Init+0x1f4>)
 80102e4:	4293      	cmp	r3, r2
 80102e6:	d101      	bne.n	80102ec <HAL_DMA_Init+0xbc>
 80102e8:	2301      	movs	r3, #1
 80102ea:	e000      	b.n	80102ee <HAL_DMA_Init+0xbe>
 80102ec:	2300      	movs	r3, #0
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	f000 813b 	beq.w	801056a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2202      	movs	r2, #2
 80102f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2200      	movs	r2, #0
 8010300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	4a37      	ldr	r2, [pc, #220]	@ (80103e8 <HAL_DMA_Init+0x1b8>)
 801030a:	4293      	cmp	r3, r2
 801030c:	d04a      	beq.n	80103a4 <HAL_DMA_Init+0x174>
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	4a36      	ldr	r2, [pc, #216]	@ (80103ec <HAL_DMA_Init+0x1bc>)
 8010314:	4293      	cmp	r3, r2
 8010316:	d045      	beq.n	80103a4 <HAL_DMA_Init+0x174>
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	4a34      	ldr	r2, [pc, #208]	@ (80103f0 <HAL_DMA_Init+0x1c0>)
 801031e:	4293      	cmp	r3, r2
 8010320:	d040      	beq.n	80103a4 <HAL_DMA_Init+0x174>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	4a33      	ldr	r2, [pc, #204]	@ (80103f4 <HAL_DMA_Init+0x1c4>)
 8010328:	4293      	cmp	r3, r2
 801032a:	d03b      	beq.n	80103a4 <HAL_DMA_Init+0x174>
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	4a31      	ldr	r2, [pc, #196]	@ (80103f8 <HAL_DMA_Init+0x1c8>)
 8010332:	4293      	cmp	r3, r2
 8010334:	d036      	beq.n	80103a4 <HAL_DMA_Init+0x174>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4a30      	ldr	r2, [pc, #192]	@ (80103fc <HAL_DMA_Init+0x1cc>)
 801033c:	4293      	cmp	r3, r2
 801033e:	d031      	beq.n	80103a4 <HAL_DMA_Init+0x174>
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	4a2e      	ldr	r2, [pc, #184]	@ (8010400 <HAL_DMA_Init+0x1d0>)
 8010346:	4293      	cmp	r3, r2
 8010348:	d02c      	beq.n	80103a4 <HAL_DMA_Init+0x174>
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	4a2d      	ldr	r2, [pc, #180]	@ (8010404 <HAL_DMA_Init+0x1d4>)
 8010350:	4293      	cmp	r3, r2
 8010352:	d027      	beq.n	80103a4 <HAL_DMA_Init+0x174>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	4a2b      	ldr	r2, [pc, #172]	@ (8010408 <HAL_DMA_Init+0x1d8>)
 801035a:	4293      	cmp	r3, r2
 801035c:	d022      	beq.n	80103a4 <HAL_DMA_Init+0x174>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	4a2a      	ldr	r2, [pc, #168]	@ (801040c <HAL_DMA_Init+0x1dc>)
 8010364:	4293      	cmp	r3, r2
 8010366:	d01d      	beq.n	80103a4 <HAL_DMA_Init+0x174>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	4a28      	ldr	r2, [pc, #160]	@ (8010410 <HAL_DMA_Init+0x1e0>)
 801036e:	4293      	cmp	r3, r2
 8010370:	d018      	beq.n	80103a4 <HAL_DMA_Init+0x174>
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	4a27      	ldr	r2, [pc, #156]	@ (8010414 <HAL_DMA_Init+0x1e4>)
 8010378:	4293      	cmp	r3, r2
 801037a:	d013      	beq.n	80103a4 <HAL_DMA_Init+0x174>
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	4a25      	ldr	r2, [pc, #148]	@ (8010418 <HAL_DMA_Init+0x1e8>)
 8010382:	4293      	cmp	r3, r2
 8010384:	d00e      	beq.n	80103a4 <HAL_DMA_Init+0x174>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	4a24      	ldr	r2, [pc, #144]	@ (801041c <HAL_DMA_Init+0x1ec>)
 801038c:	4293      	cmp	r3, r2
 801038e:	d009      	beq.n	80103a4 <HAL_DMA_Init+0x174>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	4a22      	ldr	r2, [pc, #136]	@ (8010420 <HAL_DMA_Init+0x1f0>)
 8010396:	4293      	cmp	r3, r2
 8010398:	d004      	beq.n	80103a4 <HAL_DMA_Init+0x174>
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	4a21      	ldr	r2, [pc, #132]	@ (8010424 <HAL_DMA_Init+0x1f4>)
 80103a0:	4293      	cmp	r3, r2
 80103a2:	d108      	bne.n	80103b6 <HAL_DMA_Init+0x186>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	681a      	ldr	r2, [r3, #0]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	f022 0201 	bic.w	r2, r2, #1
 80103b2:	601a      	str	r2, [r3, #0]
 80103b4:	e007      	b.n	80103c6 <HAL_DMA_Init+0x196>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	681a      	ldr	r2, [r3, #0]
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	f022 0201 	bic.w	r2, r2, #1
 80103c4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80103c6:	e02f      	b.n	8010428 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80103c8:	f7ff fd54 	bl	800fe74 <HAL_GetTick>
 80103cc:	4602      	mov	r2, r0
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	1ad3      	subs	r3, r2, r3
 80103d2:	2b05      	cmp	r3, #5
 80103d4:	d928      	bls.n	8010428 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2220      	movs	r2, #32
 80103da:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2203      	movs	r2, #3
 80103e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80103e4:	2301      	movs	r3, #1
 80103e6:	e246      	b.n	8010876 <HAL_DMA_Init+0x646>
 80103e8:	40020010 	.word	0x40020010
 80103ec:	40020028 	.word	0x40020028
 80103f0:	40020040 	.word	0x40020040
 80103f4:	40020058 	.word	0x40020058
 80103f8:	40020070 	.word	0x40020070
 80103fc:	40020088 	.word	0x40020088
 8010400:	400200a0 	.word	0x400200a0
 8010404:	400200b8 	.word	0x400200b8
 8010408:	40020410 	.word	0x40020410
 801040c:	40020428 	.word	0x40020428
 8010410:	40020440 	.word	0x40020440
 8010414:	40020458 	.word	0x40020458
 8010418:	40020470 	.word	0x40020470
 801041c:	40020488 	.word	0x40020488
 8010420:	400204a0 	.word	0x400204a0
 8010424:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	f003 0301 	and.w	r3, r3, #1
 8010432:	2b00      	cmp	r3, #0
 8010434:	d1c8      	bne.n	80103c8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801043e:	697a      	ldr	r2, [r7, #20]
 8010440:	4b83      	ldr	r3, [pc, #524]	@ (8010650 <HAL_DMA_Init+0x420>)
 8010442:	4013      	ands	r3, r2
 8010444:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 801044e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	691b      	ldr	r3, [r3, #16]
 8010454:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801045a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	699b      	ldr	r3, [r3, #24]
 8010460:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010466:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6a1b      	ldr	r3, [r3, #32]
 801046c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 801046e:	697a      	ldr	r2, [r7, #20]
 8010470:	4313      	orrs	r3, r2
 8010472:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010478:	2b04      	cmp	r3, #4
 801047a:	d107      	bne.n	801048c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010484:	4313      	orrs	r3, r2
 8010486:	697a      	ldr	r2, [r7, #20]
 8010488:	4313      	orrs	r3, r2
 801048a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 801048c:	4b71      	ldr	r3, [pc, #452]	@ (8010654 <HAL_DMA_Init+0x424>)
 801048e:	681a      	ldr	r2, [r3, #0]
 8010490:	4b71      	ldr	r3, [pc, #452]	@ (8010658 <HAL_DMA_Init+0x428>)
 8010492:	4013      	ands	r3, r2
 8010494:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010498:	d328      	bcc.n	80104ec <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	2b28      	cmp	r3, #40	@ 0x28
 80104a0:	d903      	bls.n	80104aa <HAL_DMA_Init+0x27a>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	685b      	ldr	r3, [r3, #4]
 80104a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80104a8:	d917      	bls.n	80104da <HAL_DMA_Init+0x2aa>
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	685b      	ldr	r3, [r3, #4]
 80104ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80104b0:	d903      	bls.n	80104ba <HAL_DMA_Init+0x28a>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	685b      	ldr	r3, [r3, #4]
 80104b6:	2b42      	cmp	r3, #66	@ 0x42
 80104b8:	d90f      	bls.n	80104da <HAL_DMA_Init+0x2aa>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	2b46      	cmp	r3, #70	@ 0x46
 80104c0:	d903      	bls.n	80104ca <HAL_DMA_Init+0x29a>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	685b      	ldr	r3, [r3, #4]
 80104c6:	2b48      	cmp	r3, #72	@ 0x48
 80104c8:	d907      	bls.n	80104da <HAL_DMA_Init+0x2aa>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	2b4e      	cmp	r3, #78	@ 0x4e
 80104d0:	d905      	bls.n	80104de <HAL_DMA_Init+0x2ae>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	685b      	ldr	r3, [r3, #4]
 80104d6:	2b52      	cmp	r3, #82	@ 0x52
 80104d8:	d801      	bhi.n	80104de <HAL_DMA_Init+0x2ae>
 80104da:	2301      	movs	r3, #1
 80104dc:	e000      	b.n	80104e0 <HAL_DMA_Init+0x2b0>
 80104de:	2300      	movs	r3, #0
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d003      	beq.n	80104ec <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80104ea:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	697a      	ldr	r2, [r7, #20]
 80104f2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	695b      	ldr	r3, [r3, #20]
 80104fa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	f023 0307 	bic.w	r3, r3, #7
 8010502:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010508:	697a      	ldr	r2, [r7, #20]
 801050a:	4313      	orrs	r3, r2
 801050c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010512:	2b04      	cmp	r3, #4
 8010514:	d117      	bne.n	8010546 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801051a:	697a      	ldr	r2, [r7, #20]
 801051c:	4313      	orrs	r3, r2
 801051e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010524:	2b00      	cmp	r3, #0
 8010526:	d00e      	beq.n	8010546 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8010528:	6878      	ldr	r0, [r7, #4]
 801052a:	f001 fc23 	bl	8011d74 <DMA_CheckFifoParam>
 801052e:	4603      	mov	r3, r0
 8010530:	2b00      	cmp	r3, #0
 8010532:	d008      	beq.n	8010546 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2240      	movs	r2, #64	@ 0x40
 8010538:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	2201      	movs	r2, #1
 801053e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8010542:	2301      	movs	r3, #1
 8010544:	e197      	b.n	8010876 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	697a      	ldr	r2, [r7, #20]
 801054c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f001 fb5e 	bl	8011c10 <DMA_CalcBaseAndBitshift>
 8010554:	4603      	mov	r3, r0
 8010556:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801055c:	f003 031f 	and.w	r3, r3, #31
 8010560:	223f      	movs	r2, #63	@ 0x3f
 8010562:	409a      	lsls	r2, r3
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	609a      	str	r2, [r3, #8]
 8010568:	e0cd      	b.n	8010706 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	4a3b      	ldr	r2, [pc, #236]	@ (801065c <HAL_DMA_Init+0x42c>)
 8010570:	4293      	cmp	r3, r2
 8010572:	d022      	beq.n	80105ba <HAL_DMA_Init+0x38a>
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	4a39      	ldr	r2, [pc, #228]	@ (8010660 <HAL_DMA_Init+0x430>)
 801057a:	4293      	cmp	r3, r2
 801057c:	d01d      	beq.n	80105ba <HAL_DMA_Init+0x38a>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	4a38      	ldr	r2, [pc, #224]	@ (8010664 <HAL_DMA_Init+0x434>)
 8010584:	4293      	cmp	r3, r2
 8010586:	d018      	beq.n	80105ba <HAL_DMA_Init+0x38a>
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	4a36      	ldr	r2, [pc, #216]	@ (8010668 <HAL_DMA_Init+0x438>)
 801058e:	4293      	cmp	r3, r2
 8010590:	d013      	beq.n	80105ba <HAL_DMA_Init+0x38a>
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	4a35      	ldr	r2, [pc, #212]	@ (801066c <HAL_DMA_Init+0x43c>)
 8010598:	4293      	cmp	r3, r2
 801059a:	d00e      	beq.n	80105ba <HAL_DMA_Init+0x38a>
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	4a33      	ldr	r2, [pc, #204]	@ (8010670 <HAL_DMA_Init+0x440>)
 80105a2:	4293      	cmp	r3, r2
 80105a4:	d009      	beq.n	80105ba <HAL_DMA_Init+0x38a>
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	4a32      	ldr	r2, [pc, #200]	@ (8010674 <HAL_DMA_Init+0x444>)
 80105ac:	4293      	cmp	r3, r2
 80105ae:	d004      	beq.n	80105ba <HAL_DMA_Init+0x38a>
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	4a30      	ldr	r2, [pc, #192]	@ (8010678 <HAL_DMA_Init+0x448>)
 80105b6:	4293      	cmp	r3, r2
 80105b8:	d101      	bne.n	80105be <HAL_DMA_Init+0x38e>
 80105ba:	2301      	movs	r3, #1
 80105bc:	e000      	b.n	80105c0 <HAL_DMA_Init+0x390>
 80105be:	2300      	movs	r3, #0
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	f000 8097 	beq.w	80106f4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	4a24      	ldr	r2, [pc, #144]	@ (801065c <HAL_DMA_Init+0x42c>)
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d021      	beq.n	8010614 <HAL_DMA_Init+0x3e4>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	4a22      	ldr	r2, [pc, #136]	@ (8010660 <HAL_DMA_Init+0x430>)
 80105d6:	4293      	cmp	r3, r2
 80105d8:	d01c      	beq.n	8010614 <HAL_DMA_Init+0x3e4>
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	4a21      	ldr	r2, [pc, #132]	@ (8010664 <HAL_DMA_Init+0x434>)
 80105e0:	4293      	cmp	r3, r2
 80105e2:	d017      	beq.n	8010614 <HAL_DMA_Init+0x3e4>
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	4a1f      	ldr	r2, [pc, #124]	@ (8010668 <HAL_DMA_Init+0x438>)
 80105ea:	4293      	cmp	r3, r2
 80105ec:	d012      	beq.n	8010614 <HAL_DMA_Init+0x3e4>
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	4a1e      	ldr	r2, [pc, #120]	@ (801066c <HAL_DMA_Init+0x43c>)
 80105f4:	4293      	cmp	r3, r2
 80105f6:	d00d      	beq.n	8010614 <HAL_DMA_Init+0x3e4>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	4a1c      	ldr	r2, [pc, #112]	@ (8010670 <HAL_DMA_Init+0x440>)
 80105fe:	4293      	cmp	r3, r2
 8010600:	d008      	beq.n	8010614 <HAL_DMA_Init+0x3e4>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	4a1b      	ldr	r2, [pc, #108]	@ (8010674 <HAL_DMA_Init+0x444>)
 8010608:	4293      	cmp	r3, r2
 801060a:	d003      	beq.n	8010614 <HAL_DMA_Init+0x3e4>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	4a19      	ldr	r2, [pc, #100]	@ (8010678 <HAL_DMA_Init+0x448>)
 8010612:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2202      	movs	r2, #2
 8010618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2200      	movs	r2, #0
 8010620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 801062c:	697a      	ldr	r2, [r7, #20]
 801062e:	4b13      	ldr	r3, [pc, #76]	@ (801067c <HAL_DMA_Init+0x44c>)
 8010630:	4013      	ands	r3, r2
 8010632:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	689b      	ldr	r3, [r3, #8]
 8010638:	2b40      	cmp	r3, #64	@ 0x40
 801063a:	d021      	beq.n	8010680 <HAL_DMA_Init+0x450>
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	689b      	ldr	r3, [r3, #8]
 8010640:	2b80      	cmp	r3, #128	@ 0x80
 8010642:	d102      	bne.n	801064a <HAL_DMA_Init+0x41a>
 8010644:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010648:	e01b      	b.n	8010682 <HAL_DMA_Init+0x452>
 801064a:	2300      	movs	r3, #0
 801064c:	e019      	b.n	8010682 <HAL_DMA_Init+0x452>
 801064e:	bf00      	nop
 8010650:	fe10803f 	.word	0xfe10803f
 8010654:	5c001000 	.word	0x5c001000
 8010658:	ffff0000 	.word	0xffff0000
 801065c:	58025408 	.word	0x58025408
 8010660:	5802541c 	.word	0x5802541c
 8010664:	58025430 	.word	0x58025430
 8010668:	58025444 	.word	0x58025444
 801066c:	58025458 	.word	0x58025458
 8010670:	5802546c 	.word	0x5802546c
 8010674:	58025480 	.word	0x58025480
 8010678:	58025494 	.word	0x58025494
 801067c:	fffe000f 	.word	0xfffe000f
 8010680:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8010682:	687a      	ldr	r2, [r7, #4]
 8010684:	68d2      	ldr	r2, [r2, #12]
 8010686:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8010688:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	691b      	ldr	r3, [r3, #16]
 801068e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8010690:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	695b      	ldr	r3, [r3, #20]
 8010696:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8010698:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	699b      	ldr	r3, [r3, #24]
 801069e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80106a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	69db      	ldr	r3, [r3, #28]
 80106a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80106a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	6a1b      	ldr	r3, [r3, #32]
 80106ae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80106b0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80106b2:	697a      	ldr	r2, [r7, #20]
 80106b4:	4313      	orrs	r3, r2
 80106b6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	697a      	ldr	r2, [r7, #20]
 80106be:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	461a      	mov	r2, r3
 80106c6:	4b6e      	ldr	r3, [pc, #440]	@ (8010880 <HAL_DMA_Init+0x650>)
 80106c8:	4413      	add	r3, r2
 80106ca:	4a6e      	ldr	r2, [pc, #440]	@ (8010884 <HAL_DMA_Init+0x654>)
 80106cc:	fba2 2303 	umull	r2, r3, r2, r3
 80106d0:	091b      	lsrs	r3, r3, #4
 80106d2:	009a      	lsls	r2, r3, #2
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f001 fa99 	bl	8011c10 <DMA_CalcBaseAndBitshift>
 80106de:	4603      	mov	r3, r0
 80106e0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80106e6:	f003 031f 	and.w	r3, r3, #31
 80106ea:	2201      	movs	r2, #1
 80106ec:	409a      	lsls	r2, r3
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	605a      	str	r2, [r3, #4]
 80106f2:	e008      	b.n	8010706 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2240      	movs	r2, #64	@ 0x40
 80106f8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2203      	movs	r2, #3
 80106fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8010702:	2301      	movs	r3, #1
 8010704:	e0b7      	b.n	8010876 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	4a5f      	ldr	r2, [pc, #380]	@ (8010888 <HAL_DMA_Init+0x658>)
 801070c:	4293      	cmp	r3, r2
 801070e:	d072      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	4a5d      	ldr	r2, [pc, #372]	@ (801088c <HAL_DMA_Init+0x65c>)
 8010716:	4293      	cmp	r3, r2
 8010718:	d06d      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	4a5c      	ldr	r2, [pc, #368]	@ (8010890 <HAL_DMA_Init+0x660>)
 8010720:	4293      	cmp	r3, r2
 8010722:	d068      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	4a5a      	ldr	r2, [pc, #360]	@ (8010894 <HAL_DMA_Init+0x664>)
 801072a:	4293      	cmp	r3, r2
 801072c:	d063      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	4a59      	ldr	r2, [pc, #356]	@ (8010898 <HAL_DMA_Init+0x668>)
 8010734:	4293      	cmp	r3, r2
 8010736:	d05e      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	4a57      	ldr	r2, [pc, #348]	@ (801089c <HAL_DMA_Init+0x66c>)
 801073e:	4293      	cmp	r3, r2
 8010740:	d059      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	4a56      	ldr	r2, [pc, #344]	@ (80108a0 <HAL_DMA_Init+0x670>)
 8010748:	4293      	cmp	r3, r2
 801074a:	d054      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	4a54      	ldr	r2, [pc, #336]	@ (80108a4 <HAL_DMA_Init+0x674>)
 8010752:	4293      	cmp	r3, r2
 8010754:	d04f      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	4a53      	ldr	r2, [pc, #332]	@ (80108a8 <HAL_DMA_Init+0x678>)
 801075c:	4293      	cmp	r3, r2
 801075e:	d04a      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	4a51      	ldr	r2, [pc, #324]	@ (80108ac <HAL_DMA_Init+0x67c>)
 8010766:	4293      	cmp	r3, r2
 8010768:	d045      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	4a50      	ldr	r2, [pc, #320]	@ (80108b0 <HAL_DMA_Init+0x680>)
 8010770:	4293      	cmp	r3, r2
 8010772:	d040      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	4a4e      	ldr	r2, [pc, #312]	@ (80108b4 <HAL_DMA_Init+0x684>)
 801077a:	4293      	cmp	r3, r2
 801077c:	d03b      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	4a4d      	ldr	r2, [pc, #308]	@ (80108b8 <HAL_DMA_Init+0x688>)
 8010784:	4293      	cmp	r3, r2
 8010786:	d036      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	4a4b      	ldr	r2, [pc, #300]	@ (80108bc <HAL_DMA_Init+0x68c>)
 801078e:	4293      	cmp	r3, r2
 8010790:	d031      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	4a4a      	ldr	r2, [pc, #296]	@ (80108c0 <HAL_DMA_Init+0x690>)
 8010798:	4293      	cmp	r3, r2
 801079a:	d02c      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	4a48      	ldr	r2, [pc, #288]	@ (80108c4 <HAL_DMA_Init+0x694>)
 80107a2:	4293      	cmp	r3, r2
 80107a4:	d027      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	4a47      	ldr	r2, [pc, #284]	@ (80108c8 <HAL_DMA_Init+0x698>)
 80107ac:	4293      	cmp	r3, r2
 80107ae:	d022      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	4a45      	ldr	r2, [pc, #276]	@ (80108cc <HAL_DMA_Init+0x69c>)
 80107b6:	4293      	cmp	r3, r2
 80107b8:	d01d      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	4a44      	ldr	r2, [pc, #272]	@ (80108d0 <HAL_DMA_Init+0x6a0>)
 80107c0:	4293      	cmp	r3, r2
 80107c2:	d018      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	4a42      	ldr	r2, [pc, #264]	@ (80108d4 <HAL_DMA_Init+0x6a4>)
 80107ca:	4293      	cmp	r3, r2
 80107cc:	d013      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	4a41      	ldr	r2, [pc, #260]	@ (80108d8 <HAL_DMA_Init+0x6a8>)
 80107d4:	4293      	cmp	r3, r2
 80107d6:	d00e      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	4a3f      	ldr	r2, [pc, #252]	@ (80108dc <HAL_DMA_Init+0x6ac>)
 80107de:	4293      	cmp	r3, r2
 80107e0:	d009      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	4a3e      	ldr	r2, [pc, #248]	@ (80108e0 <HAL_DMA_Init+0x6b0>)
 80107e8:	4293      	cmp	r3, r2
 80107ea:	d004      	beq.n	80107f6 <HAL_DMA_Init+0x5c6>
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	4a3c      	ldr	r2, [pc, #240]	@ (80108e4 <HAL_DMA_Init+0x6b4>)
 80107f2:	4293      	cmp	r3, r2
 80107f4:	d101      	bne.n	80107fa <HAL_DMA_Init+0x5ca>
 80107f6:	2301      	movs	r3, #1
 80107f8:	e000      	b.n	80107fc <HAL_DMA_Init+0x5cc>
 80107fa:	2300      	movs	r3, #0
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d032      	beq.n	8010866 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f001 fb33 	bl	8011e6c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	689b      	ldr	r3, [r3, #8]
 801080a:	2b80      	cmp	r3, #128	@ 0x80
 801080c:	d102      	bne.n	8010814 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2200      	movs	r2, #0
 8010812:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	685a      	ldr	r2, [r3, #4]
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801081c:	b2d2      	uxtb	r2, r2
 801081e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010824:	687a      	ldr	r2, [r7, #4]
 8010826:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8010828:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	685b      	ldr	r3, [r3, #4]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d010      	beq.n	8010854 <HAL_DMA_Init+0x624>
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	685b      	ldr	r3, [r3, #4]
 8010836:	2b08      	cmp	r3, #8
 8010838:	d80c      	bhi.n	8010854 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f001 fbb0 	bl	8011fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010844:	2200      	movs	r2, #0
 8010846:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801084c:	687a      	ldr	r2, [r7, #4]
 801084e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8010850:	605a      	str	r2, [r3, #4]
 8010852:	e008      	b.n	8010866 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2200      	movs	r2, #0
 8010858:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2200      	movs	r2, #0
 801085e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2200      	movs	r2, #0
 8010864:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2200      	movs	r2, #0
 801086a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2201      	movs	r2, #1
 8010870:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8010874:	2300      	movs	r3, #0
}
 8010876:	4618      	mov	r0, r3
 8010878:	3718      	adds	r7, #24
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}
 801087e:	bf00      	nop
 8010880:	a7fdabf8 	.word	0xa7fdabf8
 8010884:	cccccccd 	.word	0xcccccccd
 8010888:	40020010 	.word	0x40020010
 801088c:	40020028 	.word	0x40020028
 8010890:	40020040 	.word	0x40020040
 8010894:	40020058 	.word	0x40020058
 8010898:	40020070 	.word	0x40020070
 801089c:	40020088 	.word	0x40020088
 80108a0:	400200a0 	.word	0x400200a0
 80108a4:	400200b8 	.word	0x400200b8
 80108a8:	40020410 	.word	0x40020410
 80108ac:	40020428 	.word	0x40020428
 80108b0:	40020440 	.word	0x40020440
 80108b4:	40020458 	.word	0x40020458
 80108b8:	40020470 	.word	0x40020470
 80108bc:	40020488 	.word	0x40020488
 80108c0:	400204a0 	.word	0x400204a0
 80108c4:	400204b8 	.word	0x400204b8
 80108c8:	58025408 	.word	0x58025408
 80108cc:	5802541c 	.word	0x5802541c
 80108d0:	58025430 	.word	0x58025430
 80108d4:	58025444 	.word	0x58025444
 80108d8:	58025458 	.word	0x58025458
 80108dc:	5802546c 	.word	0x5802546c
 80108e0:	58025480 	.word	0x58025480
 80108e4:	58025494 	.word	0x58025494

080108e8 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b086      	sub	sp, #24
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	60f8      	str	r0, [r7, #12]
 80108f0:	60b9      	str	r1, [r7, #8]
 80108f2:	607a      	str	r2, [r7, #4]
 80108f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80108f6:	2300      	movs	r3, #0
 80108f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d101      	bne.n	8010904 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 8010900:	2301      	movs	r3, #1
 8010902:	e0ec      	b.n	8010ade <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801090a:	2b01      	cmp	r3, #1
 801090c:	d101      	bne.n	8010912 <HAL_DMA_Start+0x2a>
 801090e:	2302      	movs	r3, #2
 8010910:	e0e5      	b.n	8010ade <HAL_DMA_Start+0x1f6>
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	2201      	movs	r2, #1
 8010916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8010920:	b2db      	uxtb	r3, r3
 8010922:	2b01      	cmp	r3, #1
 8010924:	f040 80d0 	bne.w	8010ac8 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	2202      	movs	r2, #2
 801092c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	2200      	movs	r2, #0
 8010934:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	4a6b      	ldr	r2, [pc, #428]	@ (8010ae8 <HAL_DMA_Start+0x200>)
 801093c:	4293      	cmp	r3, r2
 801093e:	d04a      	beq.n	80109d6 <HAL_DMA_Start+0xee>
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	4a69      	ldr	r2, [pc, #420]	@ (8010aec <HAL_DMA_Start+0x204>)
 8010946:	4293      	cmp	r3, r2
 8010948:	d045      	beq.n	80109d6 <HAL_DMA_Start+0xee>
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	4a68      	ldr	r2, [pc, #416]	@ (8010af0 <HAL_DMA_Start+0x208>)
 8010950:	4293      	cmp	r3, r2
 8010952:	d040      	beq.n	80109d6 <HAL_DMA_Start+0xee>
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	4a66      	ldr	r2, [pc, #408]	@ (8010af4 <HAL_DMA_Start+0x20c>)
 801095a:	4293      	cmp	r3, r2
 801095c:	d03b      	beq.n	80109d6 <HAL_DMA_Start+0xee>
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	4a65      	ldr	r2, [pc, #404]	@ (8010af8 <HAL_DMA_Start+0x210>)
 8010964:	4293      	cmp	r3, r2
 8010966:	d036      	beq.n	80109d6 <HAL_DMA_Start+0xee>
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	4a63      	ldr	r2, [pc, #396]	@ (8010afc <HAL_DMA_Start+0x214>)
 801096e:	4293      	cmp	r3, r2
 8010970:	d031      	beq.n	80109d6 <HAL_DMA_Start+0xee>
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	4a62      	ldr	r2, [pc, #392]	@ (8010b00 <HAL_DMA_Start+0x218>)
 8010978:	4293      	cmp	r3, r2
 801097a:	d02c      	beq.n	80109d6 <HAL_DMA_Start+0xee>
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	4a60      	ldr	r2, [pc, #384]	@ (8010b04 <HAL_DMA_Start+0x21c>)
 8010982:	4293      	cmp	r3, r2
 8010984:	d027      	beq.n	80109d6 <HAL_DMA_Start+0xee>
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	4a5f      	ldr	r2, [pc, #380]	@ (8010b08 <HAL_DMA_Start+0x220>)
 801098c:	4293      	cmp	r3, r2
 801098e:	d022      	beq.n	80109d6 <HAL_DMA_Start+0xee>
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	4a5d      	ldr	r2, [pc, #372]	@ (8010b0c <HAL_DMA_Start+0x224>)
 8010996:	4293      	cmp	r3, r2
 8010998:	d01d      	beq.n	80109d6 <HAL_DMA_Start+0xee>
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	4a5c      	ldr	r2, [pc, #368]	@ (8010b10 <HAL_DMA_Start+0x228>)
 80109a0:	4293      	cmp	r3, r2
 80109a2:	d018      	beq.n	80109d6 <HAL_DMA_Start+0xee>
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	4a5a      	ldr	r2, [pc, #360]	@ (8010b14 <HAL_DMA_Start+0x22c>)
 80109aa:	4293      	cmp	r3, r2
 80109ac:	d013      	beq.n	80109d6 <HAL_DMA_Start+0xee>
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	4a59      	ldr	r2, [pc, #356]	@ (8010b18 <HAL_DMA_Start+0x230>)
 80109b4:	4293      	cmp	r3, r2
 80109b6:	d00e      	beq.n	80109d6 <HAL_DMA_Start+0xee>
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	4a57      	ldr	r2, [pc, #348]	@ (8010b1c <HAL_DMA_Start+0x234>)
 80109be:	4293      	cmp	r3, r2
 80109c0:	d009      	beq.n	80109d6 <HAL_DMA_Start+0xee>
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	4a56      	ldr	r2, [pc, #344]	@ (8010b20 <HAL_DMA_Start+0x238>)
 80109c8:	4293      	cmp	r3, r2
 80109ca:	d004      	beq.n	80109d6 <HAL_DMA_Start+0xee>
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	4a54      	ldr	r2, [pc, #336]	@ (8010b24 <HAL_DMA_Start+0x23c>)
 80109d2:	4293      	cmp	r3, r2
 80109d4:	d108      	bne.n	80109e8 <HAL_DMA_Start+0x100>
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	681a      	ldr	r2, [r3, #0]
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	f022 0201 	bic.w	r2, r2, #1
 80109e4:	601a      	str	r2, [r3, #0]
 80109e6:	e007      	b.n	80109f8 <HAL_DMA_Start+0x110>
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	681a      	ldr	r2, [r3, #0]
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	f022 0201 	bic.w	r2, r2, #1
 80109f6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	687a      	ldr	r2, [r7, #4]
 80109fc:	68b9      	ldr	r1, [r7, #8]
 80109fe:	68f8      	ldr	r0, [r7, #12]
 8010a00:	f000 ff5a 	bl	80118b8 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	4a37      	ldr	r2, [pc, #220]	@ (8010ae8 <HAL_DMA_Start+0x200>)
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	d04a      	beq.n	8010aa4 <HAL_DMA_Start+0x1bc>
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	4a36      	ldr	r2, [pc, #216]	@ (8010aec <HAL_DMA_Start+0x204>)
 8010a14:	4293      	cmp	r3, r2
 8010a16:	d045      	beq.n	8010aa4 <HAL_DMA_Start+0x1bc>
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	4a34      	ldr	r2, [pc, #208]	@ (8010af0 <HAL_DMA_Start+0x208>)
 8010a1e:	4293      	cmp	r3, r2
 8010a20:	d040      	beq.n	8010aa4 <HAL_DMA_Start+0x1bc>
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	4a33      	ldr	r2, [pc, #204]	@ (8010af4 <HAL_DMA_Start+0x20c>)
 8010a28:	4293      	cmp	r3, r2
 8010a2a:	d03b      	beq.n	8010aa4 <HAL_DMA_Start+0x1bc>
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	4a31      	ldr	r2, [pc, #196]	@ (8010af8 <HAL_DMA_Start+0x210>)
 8010a32:	4293      	cmp	r3, r2
 8010a34:	d036      	beq.n	8010aa4 <HAL_DMA_Start+0x1bc>
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	4a30      	ldr	r2, [pc, #192]	@ (8010afc <HAL_DMA_Start+0x214>)
 8010a3c:	4293      	cmp	r3, r2
 8010a3e:	d031      	beq.n	8010aa4 <HAL_DMA_Start+0x1bc>
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	4a2e      	ldr	r2, [pc, #184]	@ (8010b00 <HAL_DMA_Start+0x218>)
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d02c      	beq.n	8010aa4 <HAL_DMA_Start+0x1bc>
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	4a2d      	ldr	r2, [pc, #180]	@ (8010b04 <HAL_DMA_Start+0x21c>)
 8010a50:	4293      	cmp	r3, r2
 8010a52:	d027      	beq.n	8010aa4 <HAL_DMA_Start+0x1bc>
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	4a2b      	ldr	r2, [pc, #172]	@ (8010b08 <HAL_DMA_Start+0x220>)
 8010a5a:	4293      	cmp	r3, r2
 8010a5c:	d022      	beq.n	8010aa4 <HAL_DMA_Start+0x1bc>
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	4a2a      	ldr	r2, [pc, #168]	@ (8010b0c <HAL_DMA_Start+0x224>)
 8010a64:	4293      	cmp	r3, r2
 8010a66:	d01d      	beq.n	8010aa4 <HAL_DMA_Start+0x1bc>
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	4a28      	ldr	r2, [pc, #160]	@ (8010b10 <HAL_DMA_Start+0x228>)
 8010a6e:	4293      	cmp	r3, r2
 8010a70:	d018      	beq.n	8010aa4 <HAL_DMA_Start+0x1bc>
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	4a27      	ldr	r2, [pc, #156]	@ (8010b14 <HAL_DMA_Start+0x22c>)
 8010a78:	4293      	cmp	r3, r2
 8010a7a:	d013      	beq.n	8010aa4 <HAL_DMA_Start+0x1bc>
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	4a25      	ldr	r2, [pc, #148]	@ (8010b18 <HAL_DMA_Start+0x230>)
 8010a82:	4293      	cmp	r3, r2
 8010a84:	d00e      	beq.n	8010aa4 <HAL_DMA_Start+0x1bc>
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	4a24      	ldr	r2, [pc, #144]	@ (8010b1c <HAL_DMA_Start+0x234>)
 8010a8c:	4293      	cmp	r3, r2
 8010a8e:	d009      	beq.n	8010aa4 <HAL_DMA_Start+0x1bc>
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	4a22      	ldr	r2, [pc, #136]	@ (8010b20 <HAL_DMA_Start+0x238>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d004      	beq.n	8010aa4 <HAL_DMA_Start+0x1bc>
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	4a21      	ldr	r2, [pc, #132]	@ (8010b24 <HAL_DMA_Start+0x23c>)
 8010aa0:	4293      	cmp	r3, r2
 8010aa2:	d108      	bne.n	8010ab6 <HAL_DMA_Start+0x1ce>
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	681a      	ldr	r2, [r3, #0]
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	f042 0201 	orr.w	r2, r2, #1
 8010ab2:	601a      	str	r2, [r3, #0]
 8010ab4:	e012      	b.n	8010adc <HAL_DMA_Start+0x1f4>
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	f042 0201 	orr.w	r2, r2, #1
 8010ac4:	601a      	str	r2, [r3, #0]
 8010ac6:	e009      	b.n	8010adc <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010ace:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8010ad8:	2301      	movs	r3, #1
 8010ada:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8010adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3718      	adds	r7, #24
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}
 8010ae6:	bf00      	nop
 8010ae8:	40020010 	.word	0x40020010
 8010aec:	40020028 	.word	0x40020028
 8010af0:	40020040 	.word	0x40020040
 8010af4:	40020058 	.word	0x40020058
 8010af8:	40020070 	.word	0x40020070
 8010afc:	40020088 	.word	0x40020088
 8010b00:	400200a0 	.word	0x400200a0
 8010b04:	400200b8 	.word	0x400200b8
 8010b08:	40020410 	.word	0x40020410
 8010b0c:	40020428 	.word	0x40020428
 8010b10:	40020440 	.word	0x40020440
 8010b14:	40020458 	.word	0x40020458
 8010b18:	40020470 	.word	0x40020470
 8010b1c:	40020488 	.word	0x40020488
 8010b20:	400204a0 	.word	0x400204a0
 8010b24:	400204b8 	.word	0x400204b8

08010b28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b086      	sub	sp, #24
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8010b30:	f7ff f9a0 	bl	800fe74 <HAL_GetTick>
 8010b34:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d101      	bne.n	8010b40 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	e2dc      	b.n	80110fa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8010b46:	b2db      	uxtb	r3, r3
 8010b48:	2b02      	cmp	r3, #2
 8010b4a:	d008      	beq.n	8010b5e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2280      	movs	r2, #128	@ 0x80
 8010b50:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	2200      	movs	r2, #0
 8010b56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8010b5a:	2301      	movs	r3, #1
 8010b5c:	e2cd      	b.n	80110fa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	4a76      	ldr	r2, [pc, #472]	@ (8010d3c <HAL_DMA_Abort+0x214>)
 8010b64:	4293      	cmp	r3, r2
 8010b66:	d04a      	beq.n	8010bfe <HAL_DMA_Abort+0xd6>
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	4a74      	ldr	r2, [pc, #464]	@ (8010d40 <HAL_DMA_Abort+0x218>)
 8010b6e:	4293      	cmp	r3, r2
 8010b70:	d045      	beq.n	8010bfe <HAL_DMA_Abort+0xd6>
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	4a73      	ldr	r2, [pc, #460]	@ (8010d44 <HAL_DMA_Abort+0x21c>)
 8010b78:	4293      	cmp	r3, r2
 8010b7a:	d040      	beq.n	8010bfe <HAL_DMA_Abort+0xd6>
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	4a71      	ldr	r2, [pc, #452]	@ (8010d48 <HAL_DMA_Abort+0x220>)
 8010b82:	4293      	cmp	r3, r2
 8010b84:	d03b      	beq.n	8010bfe <HAL_DMA_Abort+0xd6>
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	4a70      	ldr	r2, [pc, #448]	@ (8010d4c <HAL_DMA_Abort+0x224>)
 8010b8c:	4293      	cmp	r3, r2
 8010b8e:	d036      	beq.n	8010bfe <HAL_DMA_Abort+0xd6>
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	4a6e      	ldr	r2, [pc, #440]	@ (8010d50 <HAL_DMA_Abort+0x228>)
 8010b96:	4293      	cmp	r3, r2
 8010b98:	d031      	beq.n	8010bfe <HAL_DMA_Abort+0xd6>
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	4a6d      	ldr	r2, [pc, #436]	@ (8010d54 <HAL_DMA_Abort+0x22c>)
 8010ba0:	4293      	cmp	r3, r2
 8010ba2:	d02c      	beq.n	8010bfe <HAL_DMA_Abort+0xd6>
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	4a6b      	ldr	r2, [pc, #428]	@ (8010d58 <HAL_DMA_Abort+0x230>)
 8010baa:	4293      	cmp	r3, r2
 8010bac:	d027      	beq.n	8010bfe <HAL_DMA_Abort+0xd6>
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	4a6a      	ldr	r2, [pc, #424]	@ (8010d5c <HAL_DMA_Abort+0x234>)
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d022      	beq.n	8010bfe <HAL_DMA_Abort+0xd6>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	4a68      	ldr	r2, [pc, #416]	@ (8010d60 <HAL_DMA_Abort+0x238>)
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	d01d      	beq.n	8010bfe <HAL_DMA_Abort+0xd6>
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	4a67      	ldr	r2, [pc, #412]	@ (8010d64 <HAL_DMA_Abort+0x23c>)
 8010bc8:	4293      	cmp	r3, r2
 8010bca:	d018      	beq.n	8010bfe <HAL_DMA_Abort+0xd6>
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	4a65      	ldr	r2, [pc, #404]	@ (8010d68 <HAL_DMA_Abort+0x240>)
 8010bd2:	4293      	cmp	r3, r2
 8010bd4:	d013      	beq.n	8010bfe <HAL_DMA_Abort+0xd6>
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	4a64      	ldr	r2, [pc, #400]	@ (8010d6c <HAL_DMA_Abort+0x244>)
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	d00e      	beq.n	8010bfe <HAL_DMA_Abort+0xd6>
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	4a62      	ldr	r2, [pc, #392]	@ (8010d70 <HAL_DMA_Abort+0x248>)
 8010be6:	4293      	cmp	r3, r2
 8010be8:	d009      	beq.n	8010bfe <HAL_DMA_Abort+0xd6>
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	4a61      	ldr	r2, [pc, #388]	@ (8010d74 <HAL_DMA_Abort+0x24c>)
 8010bf0:	4293      	cmp	r3, r2
 8010bf2:	d004      	beq.n	8010bfe <HAL_DMA_Abort+0xd6>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	4a5f      	ldr	r2, [pc, #380]	@ (8010d78 <HAL_DMA_Abort+0x250>)
 8010bfa:	4293      	cmp	r3, r2
 8010bfc:	d101      	bne.n	8010c02 <HAL_DMA_Abort+0xda>
 8010bfe:	2301      	movs	r3, #1
 8010c00:	e000      	b.n	8010c04 <HAL_DMA_Abort+0xdc>
 8010c02:	2300      	movs	r3, #0
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d013      	beq.n	8010c30 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	681a      	ldr	r2, [r3, #0]
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	f022 021e 	bic.w	r2, r2, #30
 8010c16:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	695a      	ldr	r2, [r3, #20]
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010c26:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	617b      	str	r3, [r7, #20]
 8010c2e:	e00a      	b.n	8010c46 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	681a      	ldr	r2, [r3, #0]
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	f022 020e 	bic.w	r2, r2, #14
 8010c3e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	4a3c      	ldr	r2, [pc, #240]	@ (8010d3c <HAL_DMA_Abort+0x214>)
 8010c4c:	4293      	cmp	r3, r2
 8010c4e:	d072      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	4a3a      	ldr	r2, [pc, #232]	@ (8010d40 <HAL_DMA_Abort+0x218>)
 8010c56:	4293      	cmp	r3, r2
 8010c58:	d06d      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	4a39      	ldr	r2, [pc, #228]	@ (8010d44 <HAL_DMA_Abort+0x21c>)
 8010c60:	4293      	cmp	r3, r2
 8010c62:	d068      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	4a37      	ldr	r2, [pc, #220]	@ (8010d48 <HAL_DMA_Abort+0x220>)
 8010c6a:	4293      	cmp	r3, r2
 8010c6c:	d063      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	4a36      	ldr	r2, [pc, #216]	@ (8010d4c <HAL_DMA_Abort+0x224>)
 8010c74:	4293      	cmp	r3, r2
 8010c76:	d05e      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	4a34      	ldr	r2, [pc, #208]	@ (8010d50 <HAL_DMA_Abort+0x228>)
 8010c7e:	4293      	cmp	r3, r2
 8010c80:	d059      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	4a33      	ldr	r2, [pc, #204]	@ (8010d54 <HAL_DMA_Abort+0x22c>)
 8010c88:	4293      	cmp	r3, r2
 8010c8a:	d054      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	4a31      	ldr	r2, [pc, #196]	@ (8010d58 <HAL_DMA_Abort+0x230>)
 8010c92:	4293      	cmp	r3, r2
 8010c94:	d04f      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	4a30      	ldr	r2, [pc, #192]	@ (8010d5c <HAL_DMA_Abort+0x234>)
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d04a      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	4a2e      	ldr	r2, [pc, #184]	@ (8010d60 <HAL_DMA_Abort+0x238>)
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d045      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	4a2d      	ldr	r2, [pc, #180]	@ (8010d64 <HAL_DMA_Abort+0x23c>)
 8010cb0:	4293      	cmp	r3, r2
 8010cb2:	d040      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	4a2b      	ldr	r2, [pc, #172]	@ (8010d68 <HAL_DMA_Abort+0x240>)
 8010cba:	4293      	cmp	r3, r2
 8010cbc:	d03b      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	4a2a      	ldr	r2, [pc, #168]	@ (8010d6c <HAL_DMA_Abort+0x244>)
 8010cc4:	4293      	cmp	r3, r2
 8010cc6:	d036      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	4a28      	ldr	r2, [pc, #160]	@ (8010d70 <HAL_DMA_Abort+0x248>)
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d031      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	4a27      	ldr	r2, [pc, #156]	@ (8010d74 <HAL_DMA_Abort+0x24c>)
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	d02c      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	4a25      	ldr	r2, [pc, #148]	@ (8010d78 <HAL_DMA_Abort+0x250>)
 8010ce2:	4293      	cmp	r3, r2
 8010ce4:	d027      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	4a24      	ldr	r2, [pc, #144]	@ (8010d7c <HAL_DMA_Abort+0x254>)
 8010cec:	4293      	cmp	r3, r2
 8010cee:	d022      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	4a22      	ldr	r2, [pc, #136]	@ (8010d80 <HAL_DMA_Abort+0x258>)
 8010cf6:	4293      	cmp	r3, r2
 8010cf8:	d01d      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	4a21      	ldr	r2, [pc, #132]	@ (8010d84 <HAL_DMA_Abort+0x25c>)
 8010d00:	4293      	cmp	r3, r2
 8010d02:	d018      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	4a1f      	ldr	r2, [pc, #124]	@ (8010d88 <HAL_DMA_Abort+0x260>)
 8010d0a:	4293      	cmp	r3, r2
 8010d0c:	d013      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	4a1e      	ldr	r2, [pc, #120]	@ (8010d8c <HAL_DMA_Abort+0x264>)
 8010d14:	4293      	cmp	r3, r2
 8010d16:	d00e      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	4a1c      	ldr	r2, [pc, #112]	@ (8010d90 <HAL_DMA_Abort+0x268>)
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	d009      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	4a1b      	ldr	r2, [pc, #108]	@ (8010d94 <HAL_DMA_Abort+0x26c>)
 8010d28:	4293      	cmp	r3, r2
 8010d2a:	d004      	beq.n	8010d36 <HAL_DMA_Abort+0x20e>
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	4a19      	ldr	r2, [pc, #100]	@ (8010d98 <HAL_DMA_Abort+0x270>)
 8010d32:	4293      	cmp	r3, r2
 8010d34:	d132      	bne.n	8010d9c <HAL_DMA_Abort+0x274>
 8010d36:	2301      	movs	r3, #1
 8010d38:	e031      	b.n	8010d9e <HAL_DMA_Abort+0x276>
 8010d3a:	bf00      	nop
 8010d3c:	40020010 	.word	0x40020010
 8010d40:	40020028 	.word	0x40020028
 8010d44:	40020040 	.word	0x40020040
 8010d48:	40020058 	.word	0x40020058
 8010d4c:	40020070 	.word	0x40020070
 8010d50:	40020088 	.word	0x40020088
 8010d54:	400200a0 	.word	0x400200a0
 8010d58:	400200b8 	.word	0x400200b8
 8010d5c:	40020410 	.word	0x40020410
 8010d60:	40020428 	.word	0x40020428
 8010d64:	40020440 	.word	0x40020440
 8010d68:	40020458 	.word	0x40020458
 8010d6c:	40020470 	.word	0x40020470
 8010d70:	40020488 	.word	0x40020488
 8010d74:	400204a0 	.word	0x400204a0
 8010d78:	400204b8 	.word	0x400204b8
 8010d7c:	58025408 	.word	0x58025408
 8010d80:	5802541c 	.word	0x5802541c
 8010d84:	58025430 	.word	0x58025430
 8010d88:	58025444 	.word	0x58025444
 8010d8c:	58025458 	.word	0x58025458
 8010d90:	5802546c 	.word	0x5802546c
 8010d94:	58025480 	.word	0x58025480
 8010d98:	58025494 	.word	0x58025494
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d007      	beq.n	8010db2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010da6:	681a      	ldr	r2, [r3, #0]
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010dac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010db0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	4a6d      	ldr	r2, [pc, #436]	@ (8010f6c <HAL_DMA_Abort+0x444>)
 8010db8:	4293      	cmp	r3, r2
 8010dba:	d04a      	beq.n	8010e52 <HAL_DMA_Abort+0x32a>
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	4a6b      	ldr	r2, [pc, #428]	@ (8010f70 <HAL_DMA_Abort+0x448>)
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	d045      	beq.n	8010e52 <HAL_DMA_Abort+0x32a>
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	4a6a      	ldr	r2, [pc, #424]	@ (8010f74 <HAL_DMA_Abort+0x44c>)
 8010dcc:	4293      	cmp	r3, r2
 8010dce:	d040      	beq.n	8010e52 <HAL_DMA_Abort+0x32a>
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	4a68      	ldr	r2, [pc, #416]	@ (8010f78 <HAL_DMA_Abort+0x450>)
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	d03b      	beq.n	8010e52 <HAL_DMA_Abort+0x32a>
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	4a67      	ldr	r2, [pc, #412]	@ (8010f7c <HAL_DMA_Abort+0x454>)
 8010de0:	4293      	cmp	r3, r2
 8010de2:	d036      	beq.n	8010e52 <HAL_DMA_Abort+0x32a>
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	4a65      	ldr	r2, [pc, #404]	@ (8010f80 <HAL_DMA_Abort+0x458>)
 8010dea:	4293      	cmp	r3, r2
 8010dec:	d031      	beq.n	8010e52 <HAL_DMA_Abort+0x32a>
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	4a64      	ldr	r2, [pc, #400]	@ (8010f84 <HAL_DMA_Abort+0x45c>)
 8010df4:	4293      	cmp	r3, r2
 8010df6:	d02c      	beq.n	8010e52 <HAL_DMA_Abort+0x32a>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	4a62      	ldr	r2, [pc, #392]	@ (8010f88 <HAL_DMA_Abort+0x460>)
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	d027      	beq.n	8010e52 <HAL_DMA_Abort+0x32a>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	4a61      	ldr	r2, [pc, #388]	@ (8010f8c <HAL_DMA_Abort+0x464>)
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	d022      	beq.n	8010e52 <HAL_DMA_Abort+0x32a>
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	4a5f      	ldr	r2, [pc, #380]	@ (8010f90 <HAL_DMA_Abort+0x468>)
 8010e12:	4293      	cmp	r3, r2
 8010e14:	d01d      	beq.n	8010e52 <HAL_DMA_Abort+0x32a>
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	4a5e      	ldr	r2, [pc, #376]	@ (8010f94 <HAL_DMA_Abort+0x46c>)
 8010e1c:	4293      	cmp	r3, r2
 8010e1e:	d018      	beq.n	8010e52 <HAL_DMA_Abort+0x32a>
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	4a5c      	ldr	r2, [pc, #368]	@ (8010f98 <HAL_DMA_Abort+0x470>)
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d013      	beq.n	8010e52 <HAL_DMA_Abort+0x32a>
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	4a5b      	ldr	r2, [pc, #364]	@ (8010f9c <HAL_DMA_Abort+0x474>)
 8010e30:	4293      	cmp	r3, r2
 8010e32:	d00e      	beq.n	8010e52 <HAL_DMA_Abort+0x32a>
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	4a59      	ldr	r2, [pc, #356]	@ (8010fa0 <HAL_DMA_Abort+0x478>)
 8010e3a:	4293      	cmp	r3, r2
 8010e3c:	d009      	beq.n	8010e52 <HAL_DMA_Abort+0x32a>
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	4a58      	ldr	r2, [pc, #352]	@ (8010fa4 <HAL_DMA_Abort+0x47c>)
 8010e44:	4293      	cmp	r3, r2
 8010e46:	d004      	beq.n	8010e52 <HAL_DMA_Abort+0x32a>
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	4a56      	ldr	r2, [pc, #344]	@ (8010fa8 <HAL_DMA_Abort+0x480>)
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	d108      	bne.n	8010e64 <HAL_DMA_Abort+0x33c>
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	681a      	ldr	r2, [r3, #0]
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	f022 0201 	bic.w	r2, r2, #1
 8010e60:	601a      	str	r2, [r3, #0]
 8010e62:	e007      	b.n	8010e74 <HAL_DMA_Abort+0x34c>
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	681a      	ldr	r2, [r3, #0]
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	f022 0201 	bic.w	r2, r2, #1
 8010e72:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8010e74:	e013      	b.n	8010e9e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010e76:	f7fe fffd 	bl	800fe74 <HAL_GetTick>
 8010e7a:	4602      	mov	r2, r0
 8010e7c:	693b      	ldr	r3, [r7, #16]
 8010e7e:	1ad3      	subs	r3, r2, r3
 8010e80:	2b05      	cmp	r3, #5
 8010e82:	d90c      	bls.n	8010e9e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2220      	movs	r2, #32
 8010e88:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2203      	movs	r2, #3
 8010e8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2200      	movs	r2, #0
 8010e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	e12d      	b.n	80110fa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8010e9e:	697b      	ldr	r3, [r7, #20]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	f003 0301 	and.w	r3, r3, #1
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d1e5      	bne.n	8010e76 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	4a2f      	ldr	r2, [pc, #188]	@ (8010f6c <HAL_DMA_Abort+0x444>)
 8010eb0:	4293      	cmp	r3, r2
 8010eb2:	d04a      	beq.n	8010f4a <HAL_DMA_Abort+0x422>
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	4a2d      	ldr	r2, [pc, #180]	@ (8010f70 <HAL_DMA_Abort+0x448>)
 8010eba:	4293      	cmp	r3, r2
 8010ebc:	d045      	beq.n	8010f4a <HAL_DMA_Abort+0x422>
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	4a2c      	ldr	r2, [pc, #176]	@ (8010f74 <HAL_DMA_Abort+0x44c>)
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	d040      	beq.n	8010f4a <HAL_DMA_Abort+0x422>
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	4a2a      	ldr	r2, [pc, #168]	@ (8010f78 <HAL_DMA_Abort+0x450>)
 8010ece:	4293      	cmp	r3, r2
 8010ed0:	d03b      	beq.n	8010f4a <HAL_DMA_Abort+0x422>
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	4a29      	ldr	r2, [pc, #164]	@ (8010f7c <HAL_DMA_Abort+0x454>)
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	d036      	beq.n	8010f4a <HAL_DMA_Abort+0x422>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	4a27      	ldr	r2, [pc, #156]	@ (8010f80 <HAL_DMA_Abort+0x458>)
 8010ee2:	4293      	cmp	r3, r2
 8010ee4:	d031      	beq.n	8010f4a <HAL_DMA_Abort+0x422>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	4a26      	ldr	r2, [pc, #152]	@ (8010f84 <HAL_DMA_Abort+0x45c>)
 8010eec:	4293      	cmp	r3, r2
 8010eee:	d02c      	beq.n	8010f4a <HAL_DMA_Abort+0x422>
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	4a24      	ldr	r2, [pc, #144]	@ (8010f88 <HAL_DMA_Abort+0x460>)
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	d027      	beq.n	8010f4a <HAL_DMA_Abort+0x422>
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	4a23      	ldr	r2, [pc, #140]	@ (8010f8c <HAL_DMA_Abort+0x464>)
 8010f00:	4293      	cmp	r3, r2
 8010f02:	d022      	beq.n	8010f4a <HAL_DMA_Abort+0x422>
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	4a21      	ldr	r2, [pc, #132]	@ (8010f90 <HAL_DMA_Abort+0x468>)
 8010f0a:	4293      	cmp	r3, r2
 8010f0c:	d01d      	beq.n	8010f4a <HAL_DMA_Abort+0x422>
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	4a20      	ldr	r2, [pc, #128]	@ (8010f94 <HAL_DMA_Abort+0x46c>)
 8010f14:	4293      	cmp	r3, r2
 8010f16:	d018      	beq.n	8010f4a <HAL_DMA_Abort+0x422>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8010f98 <HAL_DMA_Abort+0x470>)
 8010f1e:	4293      	cmp	r3, r2
 8010f20:	d013      	beq.n	8010f4a <HAL_DMA_Abort+0x422>
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	4a1d      	ldr	r2, [pc, #116]	@ (8010f9c <HAL_DMA_Abort+0x474>)
 8010f28:	4293      	cmp	r3, r2
 8010f2a:	d00e      	beq.n	8010f4a <HAL_DMA_Abort+0x422>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	4a1b      	ldr	r2, [pc, #108]	@ (8010fa0 <HAL_DMA_Abort+0x478>)
 8010f32:	4293      	cmp	r3, r2
 8010f34:	d009      	beq.n	8010f4a <HAL_DMA_Abort+0x422>
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8010fa4 <HAL_DMA_Abort+0x47c>)
 8010f3c:	4293      	cmp	r3, r2
 8010f3e:	d004      	beq.n	8010f4a <HAL_DMA_Abort+0x422>
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	4a18      	ldr	r2, [pc, #96]	@ (8010fa8 <HAL_DMA_Abort+0x480>)
 8010f46:	4293      	cmp	r3, r2
 8010f48:	d101      	bne.n	8010f4e <HAL_DMA_Abort+0x426>
 8010f4a:	2301      	movs	r3, #1
 8010f4c:	e000      	b.n	8010f50 <HAL_DMA_Abort+0x428>
 8010f4e:	2300      	movs	r3, #0
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d02b      	beq.n	8010fac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f58:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010f5e:	f003 031f 	and.w	r3, r3, #31
 8010f62:	223f      	movs	r2, #63	@ 0x3f
 8010f64:	409a      	lsls	r2, r3
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	609a      	str	r2, [r3, #8]
 8010f6a:	e02a      	b.n	8010fc2 <HAL_DMA_Abort+0x49a>
 8010f6c:	40020010 	.word	0x40020010
 8010f70:	40020028 	.word	0x40020028
 8010f74:	40020040 	.word	0x40020040
 8010f78:	40020058 	.word	0x40020058
 8010f7c:	40020070 	.word	0x40020070
 8010f80:	40020088 	.word	0x40020088
 8010f84:	400200a0 	.word	0x400200a0
 8010f88:	400200b8 	.word	0x400200b8
 8010f8c:	40020410 	.word	0x40020410
 8010f90:	40020428 	.word	0x40020428
 8010f94:	40020440 	.word	0x40020440
 8010f98:	40020458 	.word	0x40020458
 8010f9c:	40020470 	.word	0x40020470
 8010fa0:	40020488 	.word	0x40020488
 8010fa4:	400204a0 	.word	0x400204a0
 8010fa8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010fb0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010fb6:	f003 031f 	and.w	r3, r3, #31
 8010fba:	2201      	movs	r2, #1
 8010fbc:	409a      	lsls	r2, r3
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	4a4f      	ldr	r2, [pc, #316]	@ (8011104 <HAL_DMA_Abort+0x5dc>)
 8010fc8:	4293      	cmp	r3, r2
 8010fca:	d072      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	4a4d      	ldr	r2, [pc, #308]	@ (8011108 <HAL_DMA_Abort+0x5e0>)
 8010fd2:	4293      	cmp	r3, r2
 8010fd4:	d06d      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	4a4c      	ldr	r2, [pc, #304]	@ (801110c <HAL_DMA_Abort+0x5e4>)
 8010fdc:	4293      	cmp	r3, r2
 8010fde:	d068      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	4a4a      	ldr	r2, [pc, #296]	@ (8011110 <HAL_DMA_Abort+0x5e8>)
 8010fe6:	4293      	cmp	r3, r2
 8010fe8:	d063      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	4a49      	ldr	r2, [pc, #292]	@ (8011114 <HAL_DMA_Abort+0x5ec>)
 8010ff0:	4293      	cmp	r3, r2
 8010ff2:	d05e      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	4a47      	ldr	r2, [pc, #284]	@ (8011118 <HAL_DMA_Abort+0x5f0>)
 8010ffa:	4293      	cmp	r3, r2
 8010ffc:	d059      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	4a46      	ldr	r2, [pc, #280]	@ (801111c <HAL_DMA_Abort+0x5f4>)
 8011004:	4293      	cmp	r3, r2
 8011006:	d054      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	4a44      	ldr	r2, [pc, #272]	@ (8011120 <HAL_DMA_Abort+0x5f8>)
 801100e:	4293      	cmp	r3, r2
 8011010:	d04f      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	4a43      	ldr	r2, [pc, #268]	@ (8011124 <HAL_DMA_Abort+0x5fc>)
 8011018:	4293      	cmp	r3, r2
 801101a:	d04a      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	4a41      	ldr	r2, [pc, #260]	@ (8011128 <HAL_DMA_Abort+0x600>)
 8011022:	4293      	cmp	r3, r2
 8011024:	d045      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	4a40      	ldr	r2, [pc, #256]	@ (801112c <HAL_DMA_Abort+0x604>)
 801102c:	4293      	cmp	r3, r2
 801102e:	d040      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	4a3e      	ldr	r2, [pc, #248]	@ (8011130 <HAL_DMA_Abort+0x608>)
 8011036:	4293      	cmp	r3, r2
 8011038:	d03b      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	4a3d      	ldr	r2, [pc, #244]	@ (8011134 <HAL_DMA_Abort+0x60c>)
 8011040:	4293      	cmp	r3, r2
 8011042:	d036      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	4a3b      	ldr	r2, [pc, #236]	@ (8011138 <HAL_DMA_Abort+0x610>)
 801104a:	4293      	cmp	r3, r2
 801104c:	d031      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	4a3a      	ldr	r2, [pc, #232]	@ (801113c <HAL_DMA_Abort+0x614>)
 8011054:	4293      	cmp	r3, r2
 8011056:	d02c      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	4a38      	ldr	r2, [pc, #224]	@ (8011140 <HAL_DMA_Abort+0x618>)
 801105e:	4293      	cmp	r3, r2
 8011060:	d027      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	4a37      	ldr	r2, [pc, #220]	@ (8011144 <HAL_DMA_Abort+0x61c>)
 8011068:	4293      	cmp	r3, r2
 801106a:	d022      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	4a35      	ldr	r2, [pc, #212]	@ (8011148 <HAL_DMA_Abort+0x620>)
 8011072:	4293      	cmp	r3, r2
 8011074:	d01d      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	4a34      	ldr	r2, [pc, #208]	@ (801114c <HAL_DMA_Abort+0x624>)
 801107c:	4293      	cmp	r3, r2
 801107e:	d018      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	4a32      	ldr	r2, [pc, #200]	@ (8011150 <HAL_DMA_Abort+0x628>)
 8011086:	4293      	cmp	r3, r2
 8011088:	d013      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	4a31      	ldr	r2, [pc, #196]	@ (8011154 <HAL_DMA_Abort+0x62c>)
 8011090:	4293      	cmp	r3, r2
 8011092:	d00e      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	4a2f      	ldr	r2, [pc, #188]	@ (8011158 <HAL_DMA_Abort+0x630>)
 801109a:	4293      	cmp	r3, r2
 801109c:	d009      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	4a2e      	ldr	r2, [pc, #184]	@ (801115c <HAL_DMA_Abort+0x634>)
 80110a4:	4293      	cmp	r3, r2
 80110a6:	d004      	beq.n	80110b2 <HAL_DMA_Abort+0x58a>
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	4a2c      	ldr	r2, [pc, #176]	@ (8011160 <HAL_DMA_Abort+0x638>)
 80110ae:	4293      	cmp	r3, r2
 80110b0:	d101      	bne.n	80110b6 <HAL_DMA_Abort+0x58e>
 80110b2:	2301      	movs	r3, #1
 80110b4:	e000      	b.n	80110b8 <HAL_DMA_Abort+0x590>
 80110b6:	2300      	movs	r3, #0
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d015      	beq.n	80110e8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80110c0:	687a      	ldr	r2, [r7, #4]
 80110c2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80110c4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d00c      	beq.n	80110e8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110d2:	681a      	ldr	r2, [r3, #0]
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80110dc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110e2:	687a      	ldr	r2, [r7, #4]
 80110e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80110e6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2201      	movs	r2, #1
 80110ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2200      	movs	r2, #0
 80110f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80110f8:	2300      	movs	r3, #0
}
 80110fa:	4618      	mov	r0, r3
 80110fc:	3718      	adds	r7, #24
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}
 8011102:	bf00      	nop
 8011104:	40020010 	.word	0x40020010
 8011108:	40020028 	.word	0x40020028
 801110c:	40020040 	.word	0x40020040
 8011110:	40020058 	.word	0x40020058
 8011114:	40020070 	.word	0x40020070
 8011118:	40020088 	.word	0x40020088
 801111c:	400200a0 	.word	0x400200a0
 8011120:	400200b8 	.word	0x400200b8
 8011124:	40020410 	.word	0x40020410
 8011128:	40020428 	.word	0x40020428
 801112c:	40020440 	.word	0x40020440
 8011130:	40020458 	.word	0x40020458
 8011134:	40020470 	.word	0x40020470
 8011138:	40020488 	.word	0x40020488
 801113c:	400204a0 	.word	0x400204a0
 8011140:	400204b8 	.word	0x400204b8
 8011144:	58025408 	.word	0x58025408
 8011148:	5802541c 	.word	0x5802541c
 801114c:	58025430 	.word	0x58025430
 8011150:	58025444 	.word	0x58025444
 8011154:	58025458 	.word	0x58025458
 8011158:	5802546c 	.word	0x5802546c
 801115c:	58025480 	.word	0x58025480
 8011160:	58025494 	.word	0x58025494

08011164 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b08a      	sub	sp, #40	@ 0x28
 8011168:	af00      	add	r7, sp, #0
 801116a:	60f8      	str	r0, [r7, #12]
 801116c:	460b      	mov	r3, r1
 801116e:	607a      	str	r2, [r7, #4]
 8011170:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8011172:	2300      	movs	r3, #0
 8011174:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
 8011176:	f7fe fe7d 	bl	800fe74 <HAL_GetTick>
 801117a:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d101      	bne.n	8011186 <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
 8011182:	2301      	movs	r3, #1
 8011184:	e374      	b.n	8011870 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801118c:	b2db      	uxtb	r3, r3
 801118e:	2b02      	cmp	r3, #2
 8011190:	d008      	beq.n	80111a4 <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	2280      	movs	r2, #128	@ 0x80
 8011196:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	2200      	movs	r2, #0
 801119c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80111a0:	2301      	movs	r3, #1
 80111a2:	e365      	b.n	8011870 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	4a7b      	ldr	r2, [pc, #492]	@ (8011398 <HAL_DMA_PollForTransfer+0x234>)
 80111aa:	4293      	cmp	r3, r2
 80111ac:	d04a      	beq.n	8011244 <HAL_DMA_PollForTransfer+0xe0>
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	4a7a      	ldr	r2, [pc, #488]	@ (801139c <HAL_DMA_PollForTransfer+0x238>)
 80111b4:	4293      	cmp	r3, r2
 80111b6:	d045      	beq.n	8011244 <HAL_DMA_PollForTransfer+0xe0>
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	4a78      	ldr	r2, [pc, #480]	@ (80113a0 <HAL_DMA_PollForTransfer+0x23c>)
 80111be:	4293      	cmp	r3, r2
 80111c0:	d040      	beq.n	8011244 <HAL_DMA_PollForTransfer+0xe0>
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	4a77      	ldr	r2, [pc, #476]	@ (80113a4 <HAL_DMA_PollForTransfer+0x240>)
 80111c8:	4293      	cmp	r3, r2
 80111ca:	d03b      	beq.n	8011244 <HAL_DMA_PollForTransfer+0xe0>
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	4a75      	ldr	r2, [pc, #468]	@ (80113a8 <HAL_DMA_PollForTransfer+0x244>)
 80111d2:	4293      	cmp	r3, r2
 80111d4:	d036      	beq.n	8011244 <HAL_DMA_PollForTransfer+0xe0>
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	4a74      	ldr	r2, [pc, #464]	@ (80113ac <HAL_DMA_PollForTransfer+0x248>)
 80111dc:	4293      	cmp	r3, r2
 80111de:	d031      	beq.n	8011244 <HAL_DMA_PollForTransfer+0xe0>
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	4a72      	ldr	r2, [pc, #456]	@ (80113b0 <HAL_DMA_PollForTransfer+0x24c>)
 80111e6:	4293      	cmp	r3, r2
 80111e8:	d02c      	beq.n	8011244 <HAL_DMA_PollForTransfer+0xe0>
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	4a71      	ldr	r2, [pc, #452]	@ (80113b4 <HAL_DMA_PollForTransfer+0x250>)
 80111f0:	4293      	cmp	r3, r2
 80111f2:	d027      	beq.n	8011244 <HAL_DMA_PollForTransfer+0xe0>
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	4a6f      	ldr	r2, [pc, #444]	@ (80113b8 <HAL_DMA_PollForTransfer+0x254>)
 80111fa:	4293      	cmp	r3, r2
 80111fc:	d022      	beq.n	8011244 <HAL_DMA_PollForTransfer+0xe0>
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	4a6e      	ldr	r2, [pc, #440]	@ (80113bc <HAL_DMA_PollForTransfer+0x258>)
 8011204:	4293      	cmp	r3, r2
 8011206:	d01d      	beq.n	8011244 <HAL_DMA_PollForTransfer+0xe0>
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	4a6c      	ldr	r2, [pc, #432]	@ (80113c0 <HAL_DMA_PollForTransfer+0x25c>)
 801120e:	4293      	cmp	r3, r2
 8011210:	d018      	beq.n	8011244 <HAL_DMA_PollForTransfer+0xe0>
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	4a6b      	ldr	r2, [pc, #428]	@ (80113c4 <HAL_DMA_PollForTransfer+0x260>)
 8011218:	4293      	cmp	r3, r2
 801121a:	d013      	beq.n	8011244 <HAL_DMA_PollForTransfer+0xe0>
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	4a69      	ldr	r2, [pc, #420]	@ (80113c8 <HAL_DMA_PollForTransfer+0x264>)
 8011222:	4293      	cmp	r3, r2
 8011224:	d00e      	beq.n	8011244 <HAL_DMA_PollForTransfer+0xe0>
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	4a68      	ldr	r2, [pc, #416]	@ (80113cc <HAL_DMA_PollForTransfer+0x268>)
 801122c:	4293      	cmp	r3, r2
 801122e:	d009      	beq.n	8011244 <HAL_DMA_PollForTransfer+0xe0>
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	4a66      	ldr	r2, [pc, #408]	@ (80113d0 <HAL_DMA_PollForTransfer+0x26c>)
 8011236:	4293      	cmp	r3, r2
 8011238:	d004      	beq.n	8011244 <HAL_DMA_PollForTransfer+0xe0>
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	4a65      	ldr	r2, [pc, #404]	@ (80113d4 <HAL_DMA_PollForTransfer+0x270>)
 8011240:	4293      	cmp	r3, r2
 8011242:	d101      	bne.n	8011248 <HAL_DMA_PollForTransfer+0xe4>
 8011244:	2301      	movs	r3, #1
 8011246:	e000      	b.n	801124a <HAL_DMA_PollForTransfer+0xe6>
 8011248:	2300      	movs	r3, #0
 801124a:	2b00      	cmp	r3, #0
 801124c:	d028      	beq.n	80112a0 <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011258:	2b00      	cmp	r3, #0
 801125a:	d005      	beq.n	8011268 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011262:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8011264:	2301      	movs	r3, #1
 8011266:	e303      	b.n	8011870 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8011268:	7afb      	ldrb	r3, [r7, #11]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d108      	bne.n	8011280 <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011272:	f003 031f 	and.w	r3, r3, #31
 8011276:	2220      	movs	r2, #32
 8011278:	fa02 f303 	lsl.w	r3, r2, r3
 801127c:	627b      	str	r3, [r7, #36]	@ 0x24
 801127e:	e007      	b.n	8011290 <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011284:	f003 031f 	and.w	r3, r3, #31
 8011288:	2210      	movs	r2, #16
 801128a:	fa02 f303 	lsl.w	r3, r2, r3
 801128e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011294:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801129a:	3308      	adds	r3, #8
 801129c:	61fb      	str	r3, [r7, #28]
 801129e:	e1d5      	b.n	801164c <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	f003 0320 	and.w	r3, r3, #32
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d005      	beq.n	80112ba <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80112b4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 80112b6:	2301      	movs	r3, #1
 80112b8:	e2da      	b.n	8011870 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80112ba:	7afb      	ldrb	r3, [r7, #11]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d108      	bne.n	80112d2 <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80112c4:	f003 031f 	and.w	r3, r3, #31
 80112c8:	2202      	movs	r2, #2
 80112ca:	fa02 f303 	lsl.w	r3, r2, r3
 80112ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80112d0:	e007      	b.n	80112e2 <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80112d6:	f003 031f 	and.w	r3, r3, #31
 80112da:	2204      	movs	r2, #4
 80112dc:	fa02 f303 	lsl.w	r3, r2, r3
 80112e0:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80112e6:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80112ec:	3304      	adds	r3, #4
 80112ee:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
 80112f0:	e1ac      	b.n	801164c <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	4a28      	ldr	r2, [pc, #160]	@ (8011398 <HAL_DMA_PollForTransfer+0x234>)
 80112f8:	4293      	cmp	r3, r2
 80112fa:	d04a      	beq.n	8011392 <HAL_DMA_PollForTransfer+0x22e>
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	4a26      	ldr	r2, [pc, #152]	@ (801139c <HAL_DMA_PollForTransfer+0x238>)
 8011302:	4293      	cmp	r3, r2
 8011304:	d045      	beq.n	8011392 <HAL_DMA_PollForTransfer+0x22e>
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	4a25      	ldr	r2, [pc, #148]	@ (80113a0 <HAL_DMA_PollForTransfer+0x23c>)
 801130c:	4293      	cmp	r3, r2
 801130e:	d040      	beq.n	8011392 <HAL_DMA_PollForTransfer+0x22e>
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	4a23      	ldr	r2, [pc, #140]	@ (80113a4 <HAL_DMA_PollForTransfer+0x240>)
 8011316:	4293      	cmp	r3, r2
 8011318:	d03b      	beq.n	8011392 <HAL_DMA_PollForTransfer+0x22e>
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	4a22      	ldr	r2, [pc, #136]	@ (80113a8 <HAL_DMA_PollForTransfer+0x244>)
 8011320:	4293      	cmp	r3, r2
 8011322:	d036      	beq.n	8011392 <HAL_DMA_PollForTransfer+0x22e>
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	4a20      	ldr	r2, [pc, #128]	@ (80113ac <HAL_DMA_PollForTransfer+0x248>)
 801132a:	4293      	cmp	r3, r2
 801132c:	d031      	beq.n	8011392 <HAL_DMA_PollForTransfer+0x22e>
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	4a1f      	ldr	r2, [pc, #124]	@ (80113b0 <HAL_DMA_PollForTransfer+0x24c>)
 8011334:	4293      	cmp	r3, r2
 8011336:	d02c      	beq.n	8011392 <HAL_DMA_PollForTransfer+0x22e>
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	4a1d      	ldr	r2, [pc, #116]	@ (80113b4 <HAL_DMA_PollForTransfer+0x250>)
 801133e:	4293      	cmp	r3, r2
 8011340:	d027      	beq.n	8011392 <HAL_DMA_PollForTransfer+0x22e>
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	4a1c      	ldr	r2, [pc, #112]	@ (80113b8 <HAL_DMA_PollForTransfer+0x254>)
 8011348:	4293      	cmp	r3, r2
 801134a:	d022      	beq.n	8011392 <HAL_DMA_PollForTransfer+0x22e>
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	4a1a      	ldr	r2, [pc, #104]	@ (80113bc <HAL_DMA_PollForTransfer+0x258>)
 8011352:	4293      	cmp	r3, r2
 8011354:	d01d      	beq.n	8011392 <HAL_DMA_PollForTransfer+0x22e>
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	4a19      	ldr	r2, [pc, #100]	@ (80113c0 <HAL_DMA_PollForTransfer+0x25c>)
 801135c:	4293      	cmp	r3, r2
 801135e:	d018      	beq.n	8011392 <HAL_DMA_PollForTransfer+0x22e>
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	4a17      	ldr	r2, [pc, #92]	@ (80113c4 <HAL_DMA_PollForTransfer+0x260>)
 8011366:	4293      	cmp	r3, r2
 8011368:	d013      	beq.n	8011392 <HAL_DMA_PollForTransfer+0x22e>
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	4a16      	ldr	r2, [pc, #88]	@ (80113c8 <HAL_DMA_PollForTransfer+0x264>)
 8011370:	4293      	cmp	r3, r2
 8011372:	d00e      	beq.n	8011392 <HAL_DMA_PollForTransfer+0x22e>
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	4a14      	ldr	r2, [pc, #80]	@ (80113cc <HAL_DMA_PollForTransfer+0x268>)
 801137a:	4293      	cmp	r3, r2
 801137c:	d009      	beq.n	8011392 <HAL_DMA_PollForTransfer+0x22e>
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	4a13      	ldr	r2, [pc, #76]	@ (80113d0 <HAL_DMA_PollForTransfer+0x26c>)
 8011384:	4293      	cmp	r3, r2
 8011386:	d004      	beq.n	8011392 <HAL_DMA_PollForTransfer+0x22e>
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	4a11      	ldr	r2, [pc, #68]	@ (80113d4 <HAL_DMA_PollForTransfer+0x270>)
 801138e:	4293      	cmp	r3, r2
 8011390:	d122      	bne.n	80113d8 <HAL_DMA_PollForTransfer+0x274>
 8011392:	2301      	movs	r3, #1
 8011394:	e021      	b.n	80113da <HAL_DMA_PollForTransfer+0x276>
 8011396:	bf00      	nop
 8011398:	40020010 	.word	0x40020010
 801139c:	40020028 	.word	0x40020028
 80113a0:	40020040 	.word	0x40020040
 80113a4:	40020058 	.word	0x40020058
 80113a8:	40020070 	.word	0x40020070
 80113ac:	40020088 	.word	0x40020088
 80113b0:	400200a0 	.word	0x400200a0
 80113b4:	400200b8 	.word	0x400200b8
 80113b8:	40020410 	.word	0x40020410
 80113bc:	40020428 	.word	0x40020428
 80113c0:	40020440 	.word	0x40020440
 80113c4:	40020458 	.word	0x40020458
 80113c8:	40020470 	.word	0x40020470
 80113cc:	40020488 	.word	0x40020488
 80113d0:	400204a0 	.word	0x400204a0
 80113d4:	400204b8 	.word	0x400204b8
 80113d8:	2300      	movs	r3, #0
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d057      	beq.n	801148e <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80113de:	6a3b      	ldr	r3, [r7, #32]
 80113e0:	681a      	ldr	r2, [r3, #0]
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80113e6:	f003 031f 	and.w	r3, r3, #31
 80113ea:	fa22 f303 	lsr.w	r3, r2, r3
 80113ee:	f003 0301 	and.w	r3, r3, #1
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d00d      	beq.n	8011412 <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80113fa:	f043 0202 	orr.w	r2, r3, #2
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011406:	f003 031f 	and.w	r3, r3, #31
 801140a:	2201      	movs	r2, #1
 801140c:	409a      	lsls	r2, r3
 801140e:	69fb      	ldr	r3, [r7, #28]
 8011410:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8011412:	6a3b      	ldr	r3, [r7, #32]
 8011414:	681a      	ldr	r2, [r3, #0]
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801141a:	f003 031f 	and.w	r3, r3, #31
 801141e:	2104      	movs	r1, #4
 8011420:	fa01 f303 	lsl.w	r3, r1, r3
 8011424:	4013      	ands	r3, r2
 8011426:	2b00      	cmp	r3, #0
 8011428:	d00d      	beq.n	8011446 <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801142e:	f043 0204 	orr.w	r2, r3, #4
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801143a:	f003 031f 	and.w	r3, r3, #31
 801143e:	2204      	movs	r2, #4
 8011440:	409a      	lsls	r2, r3
 8011442:	69fb      	ldr	r3, [r7, #28]
 8011444:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8011446:	6a3b      	ldr	r3, [r7, #32]
 8011448:	681a      	ldr	r2, [r3, #0]
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801144e:	f003 031f 	and.w	r3, r3, #31
 8011452:	2108      	movs	r1, #8
 8011454:	fa01 f303 	lsl.w	r3, r1, r3
 8011458:	4013      	ands	r3, r2
 801145a:	2b00      	cmp	r3, #0
 801145c:	d038      	beq.n	80114d0 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011462:	f043 0201 	orr.w	r2, r3, #1
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801146e:	f003 031f 	and.w	r3, r3, #31
 8011472:	2208      	movs	r2, #8
 8011474:	409a      	lsls	r2, r3
 8011476:	69fb      	ldr	r3, [r7, #28]
 8011478:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	2201      	movs	r2, #1
 801147e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	2200      	movs	r2, #0
 8011486:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 801148a:	2301      	movs	r3, #1
 801148c:	e1f0      	b.n	8011870 <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801148e:	6a3b      	ldr	r3, [r7, #32]
 8011490:	681a      	ldr	r2, [r3, #0]
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011496:	f003 031f 	and.w	r3, r3, #31
 801149a:	2108      	movs	r1, #8
 801149c:	fa01 f303 	lsl.w	r3, r1, r3
 80114a0:	4013      	ands	r3, r2
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d014      	beq.n	80114d0 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80114aa:	f003 031f 	and.w	r3, r3, #31
 80114ae:	2201      	movs	r2, #1
 80114b0:	409a      	lsls	r2, r3
 80114b2:	6a3b      	ldr	r3, [r7, #32]
 80114b4:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	2201      	movs	r2, #1
 80114ba:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	2201      	movs	r2, #1
 80114c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	2200      	movs	r2, #0
 80114c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80114cc:	2301      	movs	r3, #1
 80114ce:	e1cf      	b.n	8011870 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114d6:	d012      	beq.n	80114fe <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80114d8:	f7fe fccc 	bl	800fe74 <HAL_GetTick>
 80114dc:	4602      	mov	r2, r0
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	1ad3      	subs	r3, r2, r3
 80114e2:	687a      	ldr	r2, [r7, #4]
 80114e4:	429a      	cmp	r2, r3
 80114e6:	d302      	bcc.n	80114ee <HAL_DMA_PollForTransfer+0x38a>
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d107      	bne.n	80114fe <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	2220      	movs	r2, #32
 80114f2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
 80114f4:	68f8      	ldr	r0, [r7, #12]
 80114f6:	f7ff fb17 	bl	8010b28 <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
 80114fa:	2301      	movs	r3, #1
 80114fc:	e1b8      	b.n	8011870 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	4a81      	ldr	r2, [pc, #516]	@ (8011708 <HAL_DMA_PollForTransfer+0x5a4>)
 8011504:	4293      	cmp	r3, r2
 8011506:	d072      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	4a7f      	ldr	r2, [pc, #508]	@ (801170c <HAL_DMA_PollForTransfer+0x5a8>)
 801150e:	4293      	cmp	r3, r2
 8011510:	d06d      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	4a7e      	ldr	r2, [pc, #504]	@ (8011710 <HAL_DMA_PollForTransfer+0x5ac>)
 8011518:	4293      	cmp	r3, r2
 801151a:	d068      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	4a7c      	ldr	r2, [pc, #496]	@ (8011714 <HAL_DMA_PollForTransfer+0x5b0>)
 8011522:	4293      	cmp	r3, r2
 8011524:	d063      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	4a7b      	ldr	r2, [pc, #492]	@ (8011718 <HAL_DMA_PollForTransfer+0x5b4>)
 801152c:	4293      	cmp	r3, r2
 801152e:	d05e      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	4a79      	ldr	r2, [pc, #484]	@ (801171c <HAL_DMA_PollForTransfer+0x5b8>)
 8011536:	4293      	cmp	r3, r2
 8011538:	d059      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	4a78      	ldr	r2, [pc, #480]	@ (8011720 <HAL_DMA_PollForTransfer+0x5bc>)
 8011540:	4293      	cmp	r3, r2
 8011542:	d054      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	4a76      	ldr	r2, [pc, #472]	@ (8011724 <HAL_DMA_PollForTransfer+0x5c0>)
 801154a:	4293      	cmp	r3, r2
 801154c:	d04f      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	4a75      	ldr	r2, [pc, #468]	@ (8011728 <HAL_DMA_PollForTransfer+0x5c4>)
 8011554:	4293      	cmp	r3, r2
 8011556:	d04a      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	4a73      	ldr	r2, [pc, #460]	@ (801172c <HAL_DMA_PollForTransfer+0x5c8>)
 801155e:	4293      	cmp	r3, r2
 8011560:	d045      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	4a72      	ldr	r2, [pc, #456]	@ (8011730 <HAL_DMA_PollForTransfer+0x5cc>)
 8011568:	4293      	cmp	r3, r2
 801156a:	d040      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	4a70      	ldr	r2, [pc, #448]	@ (8011734 <HAL_DMA_PollForTransfer+0x5d0>)
 8011572:	4293      	cmp	r3, r2
 8011574:	d03b      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	4a6f      	ldr	r2, [pc, #444]	@ (8011738 <HAL_DMA_PollForTransfer+0x5d4>)
 801157c:	4293      	cmp	r3, r2
 801157e:	d036      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	4a6d      	ldr	r2, [pc, #436]	@ (801173c <HAL_DMA_PollForTransfer+0x5d8>)
 8011586:	4293      	cmp	r3, r2
 8011588:	d031      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	4a6c      	ldr	r2, [pc, #432]	@ (8011740 <HAL_DMA_PollForTransfer+0x5dc>)
 8011590:	4293      	cmp	r3, r2
 8011592:	d02c      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	4a6a      	ldr	r2, [pc, #424]	@ (8011744 <HAL_DMA_PollForTransfer+0x5e0>)
 801159a:	4293      	cmp	r3, r2
 801159c:	d027      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	4a69      	ldr	r2, [pc, #420]	@ (8011748 <HAL_DMA_PollForTransfer+0x5e4>)
 80115a4:	4293      	cmp	r3, r2
 80115a6:	d022      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	4a67      	ldr	r2, [pc, #412]	@ (801174c <HAL_DMA_PollForTransfer+0x5e8>)
 80115ae:	4293      	cmp	r3, r2
 80115b0:	d01d      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	4a66      	ldr	r2, [pc, #408]	@ (8011750 <HAL_DMA_PollForTransfer+0x5ec>)
 80115b8:	4293      	cmp	r3, r2
 80115ba:	d018      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	4a64      	ldr	r2, [pc, #400]	@ (8011754 <HAL_DMA_PollForTransfer+0x5f0>)
 80115c2:	4293      	cmp	r3, r2
 80115c4:	d013      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	4a63      	ldr	r2, [pc, #396]	@ (8011758 <HAL_DMA_PollForTransfer+0x5f4>)
 80115cc:	4293      	cmp	r3, r2
 80115ce:	d00e      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	4a61      	ldr	r2, [pc, #388]	@ (801175c <HAL_DMA_PollForTransfer+0x5f8>)
 80115d6:	4293      	cmp	r3, r2
 80115d8:	d009      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	4a60      	ldr	r2, [pc, #384]	@ (8011760 <HAL_DMA_PollForTransfer+0x5fc>)
 80115e0:	4293      	cmp	r3, r2
 80115e2:	d004      	beq.n	80115ee <HAL_DMA_PollForTransfer+0x48a>
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	4a5e      	ldr	r2, [pc, #376]	@ (8011764 <HAL_DMA_PollForTransfer+0x600>)
 80115ea:	4293      	cmp	r3, r2
 80115ec:	d101      	bne.n	80115f2 <HAL_DMA_PollForTransfer+0x48e>
 80115ee:	2301      	movs	r3, #1
 80115f0:	e000      	b.n	80115f4 <HAL_DMA_PollForTransfer+0x490>
 80115f2:	2300      	movs	r3, #0
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d029      	beq.n	801164c <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d012      	beq.n	8011626 <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011604:	681a      	ldr	r2, [r3, #0]
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801160a:	4013      	ands	r3, r2
 801160c:	2b00      	cmp	r3, #0
 801160e:	d00a      	beq.n	8011626 <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011614:	68fa      	ldr	r2, [r7, #12]
 8011616:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8011618:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801161e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801162a:	681a      	ldr	r2, [r3, #0]
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011630:	4013      	ands	r3, r2
 8011632:	2b00      	cmp	r3, #0
 8011634:	d00a      	beq.n	801164c <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801163a:	68fa      	ldr	r2, [r7, #12]
 801163c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801163e:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011644:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	655a      	str	r2, [r3, #84]	@ 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
 801164c:	6a3b      	ldr	r3, [r7, #32]
 801164e:	681a      	ldr	r2, [r3, #0]
 8011650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011652:	4013      	ands	r3, r2
 8011654:	2b00      	cmp	r3, #0
 8011656:	f43f ae4c 	beq.w	80112f2 <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 801165a:	7afb      	ldrb	r3, [r7, #11]
 801165c:	2b00      	cmp	r3, #0
 801165e:	f040 80a0 	bne.w	80117a2 <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	4a28      	ldr	r2, [pc, #160]	@ (8011708 <HAL_DMA_PollForTransfer+0x5a4>)
 8011668:	4293      	cmp	r3, r2
 801166a:	d04a      	beq.n	8011702 <HAL_DMA_PollForTransfer+0x59e>
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	4a26      	ldr	r2, [pc, #152]	@ (801170c <HAL_DMA_PollForTransfer+0x5a8>)
 8011672:	4293      	cmp	r3, r2
 8011674:	d045      	beq.n	8011702 <HAL_DMA_PollForTransfer+0x59e>
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	4a25      	ldr	r2, [pc, #148]	@ (8011710 <HAL_DMA_PollForTransfer+0x5ac>)
 801167c:	4293      	cmp	r3, r2
 801167e:	d040      	beq.n	8011702 <HAL_DMA_PollForTransfer+0x59e>
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	4a23      	ldr	r2, [pc, #140]	@ (8011714 <HAL_DMA_PollForTransfer+0x5b0>)
 8011686:	4293      	cmp	r3, r2
 8011688:	d03b      	beq.n	8011702 <HAL_DMA_PollForTransfer+0x59e>
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	4a22      	ldr	r2, [pc, #136]	@ (8011718 <HAL_DMA_PollForTransfer+0x5b4>)
 8011690:	4293      	cmp	r3, r2
 8011692:	d036      	beq.n	8011702 <HAL_DMA_PollForTransfer+0x59e>
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	4a20      	ldr	r2, [pc, #128]	@ (801171c <HAL_DMA_PollForTransfer+0x5b8>)
 801169a:	4293      	cmp	r3, r2
 801169c:	d031      	beq.n	8011702 <HAL_DMA_PollForTransfer+0x59e>
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	4a1f      	ldr	r2, [pc, #124]	@ (8011720 <HAL_DMA_PollForTransfer+0x5bc>)
 80116a4:	4293      	cmp	r3, r2
 80116a6:	d02c      	beq.n	8011702 <HAL_DMA_PollForTransfer+0x59e>
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	4a1d      	ldr	r2, [pc, #116]	@ (8011724 <HAL_DMA_PollForTransfer+0x5c0>)
 80116ae:	4293      	cmp	r3, r2
 80116b0:	d027      	beq.n	8011702 <HAL_DMA_PollForTransfer+0x59e>
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	4a1c      	ldr	r2, [pc, #112]	@ (8011728 <HAL_DMA_PollForTransfer+0x5c4>)
 80116b8:	4293      	cmp	r3, r2
 80116ba:	d022      	beq.n	8011702 <HAL_DMA_PollForTransfer+0x59e>
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	4a1a      	ldr	r2, [pc, #104]	@ (801172c <HAL_DMA_PollForTransfer+0x5c8>)
 80116c2:	4293      	cmp	r3, r2
 80116c4:	d01d      	beq.n	8011702 <HAL_DMA_PollForTransfer+0x59e>
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	4a19      	ldr	r2, [pc, #100]	@ (8011730 <HAL_DMA_PollForTransfer+0x5cc>)
 80116cc:	4293      	cmp	r3, r2
 80116ce:	d018      	beq.n	8011702 <HAL_DMA_PollForTransfer+0x59e>
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	4a17      	ldr	r2, [pc, #92]	@ (8011734 <HAL_DMA_PollForTransfer+0x5d0>)
 80116d6:	4293      	cmp	r3, r2
 80116d8:	d013      	beq.n	8011702 <HAL_DMA_PollForTransfer+0x59e>
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	4a16      	ldr	r2, [pc, #88]	@ (8011738 <HAL_DMA_PollForTransfer+0x5d4>)
 80116e0:	4293      	cmp	r3, r2
 80116e2:	d00e      	beq.n	8011702 <HAL_DMA_PollForTransfer+0x59e>
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	4a14      	ldr	r2, [pc, #80]	@ (801173c <HAL_DMA_PollForTransfer+0x5d8>)
 80116ea:	4293      	cmp	r3, r2
 80116ec:	d009      	beq.n	8011702 <HAL_DMA_PollForTransfer+0x59e>
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	4a13      	ldr	r2, [pc, #76]	@ (8011740 <HAL_DMA_PollForTransfer+0x5dc>)
 80116f4:	4293      	cmp	r3, r2
 80116f6:	d004      	beq.n	8011702 <HAL_DMA_PollForTransfer+0x59e>
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	4a11      	ldr	r2, [pc, #68]	@ (8011744 <HAL_DMA_PollForTransfer+0x5e0>)
 80116fe:	4293      	cmp	r3, r2
 8011700:	d132      	bne.n	8011768 <HAL_DMA_PollForTransfer+0x604>
 8011702:	2301      	movs	r3, #1
 8011704:	e031      	b.n	801176a <HAL_DMA_PollForTransfer+0x606>
 8011706:	bf00      	nop
 8011708:	40020010 	.word	0x40020010
 801170c:	40020028 	.word	0x40020028
 8011710:	40020040 	.word	0x40020040
 8011714:	40020058 	.word	0x40020058
 8011718:	40020070 	.word	0x40020070
 801171c:	40020088 	.word	0x40020088
 8011720:	400200a0 	.word	0x400200a0
 8011724:	400200b8 	.word	0x400200b8
 8011728:	40020410 	.word	0x40020410
 801172c:	40020428 	.word	0x40020428
 8011730:	40020440 	.word	0x40020440
 8011734:	40020458 	.word	0x40020458
 8011738:	40020470 	.word	0x40020470
 801173c:	40020488 	.word	0x40020488
 8011740:	400204a0 	.word	0x400204a0
 8011744:	400204b8 	.word	0x400204b8
 8011748:	58025408 	.word	0x58025408
 801174c:	5802541c 	.word	0x5802541c
 8011750:	58025430 	.word	0x58025430
 8011754:	58025444 	.word	0x58025444
 8011758:	58025458 	.word	0x58025458
 801175c:	5802546c 	.word	0x5802546c
 8011760:	58025480 	.word	0x58025480
 8011764:	58025494 	.word	0x58025494
 8011768:	2300      	movs	r3, #0
 801176a:	2b00      	cmp	r3, #0
 801176c:	d008      	beq.n	8011780 <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011772:	f003 031f 	and.w	r3, r3, #31
 8011776:	2230      	movs	r2, #48	@ 0x30
 8011778:	409a      	lsls	r2, r3
 801177a:	69fb      	ldr	r3, [r7, #28]
 801177c:	601a      	str	r2, [r3, #0]
 801177e:	e007      	b.n	8011790 <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011784:	f003 031f 	and.w	r3, r3, #31
 8011788:	2202      	movs	r2, #2
 801178a:	409a      	lsls	r2, r3
 801178c:	69fb      	ldr	r3, [r7, #28]
 801178e:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	2201      	movs	r2, #1
 8011794:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	2200      	movs	r2, #0
 801179c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80117a0:	e065      	b.n	801186e <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	4a34      	ldr	r2, [pc, #208]	@ (8011878 <HAL_DMA_PollForTransfer+0x714>)
 80117a8:	4293      	cmp	r3, r2
 80117aa:	d04a      	beq.n	8011842 <HAL_DMA_PollForTransfer+0x6de>
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	4a32      	ldr	r2, [pc, #200]	@ (801187c <HAL_DMA_PollForTransfer+0x718>)
 80117b2:	4293      	cmp	r3, r2
 80117b4:	d045      	beq.n	8011842 <HAL_DMA_PollForTransfer+0x6de>
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	4a31      	ldr	r2, [pc, #196]	@ (8011880 <HAL_DMA_PollForTransfer+0x71c>)
 80117bc:	4293      	cmp	r3, r2
 80117be:	d040      	beq.n	8011842 <HAL_DMA_PollForTransfer+0x6de>
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	4a2f      	ldr	r2, [pc, #188]	@ (8011884 <HAL_DMA_PollForTransfer+0x720>)
 80117c6:	4293      	cmp	r3, r2
 80117c8:	d03b      	beq.n	8011842 <HAL_DMA_PollForTransfer+0x6de>
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	4a2e      	ldr	r2, [pc, #184]	@ (8011888 <HAL_DMA_PollForTransfer+0x724>)
 80117d0:	4293      	cmp	r3, r2
 80117d2:	d036      	beq.n	8011842 <HAL_DMA_PollForTransfer+0x6de>
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	4a2c      	ldr	r2, [pc, #176]	@ (801188c <HAL_DMA_PollForTransfer+0x728>)
 80117da:	4293      	cmp	r3, r2
 80117dc:	d031      	beq.n	8011842 <HAL_DMA_PollForTransfer+0x6de>
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	4a2b      	ldr	r2, [pc, #172]	@ (8011890 <HAL_DMA_PollForTransfer+0x72c>)
 80117e4:	4293      	cmp	r3, r2
 80117e6:	d02c      	beq.n	8011842 <HAL_DMA_PollForTransfer+0x6de>
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	4a29      	ldr	r2, [pc, #164]	@ (8011894 <HAL_DMA_PollForTransfer+0x730>)
 80117ee:	4293      	cmp	r3, r2
 80117f0:	d027      	beq.n	8011842 <HAL_DMA_PollForTransfer+0x6de>
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	4a28      	ldr	r2, [pc, #160]	@ (8011898 <HAL_DMA_PollForTransfer+0x734>)
 80117f8:	4293      	cmp	r3, r2
 80117fa:	d022      	beq.n	8011842 <HAL_DMA_PollForTransfer+0x6de>
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	4a26      	ldr	r2, [pc, #152]	@ (801189c <HAL_DMA_PollForTransfer+0x738>)
 8011802:	4293      	cmp	r3, r2
 8011804:	d01d      	beq.n	8011842 <HAL_DMA_PollForTransfer+0x6de>
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	4a25      	ldr	r2, [pc, #148]	@ (80118a0 <HAL_DMA_PollForTransfer+0x73c>)
 801180c:	4293      	cmp	r3, r2
 801180e:	d018      	beq.n	8011842 <HAL_DMA_PollForTransfer+0x6de>
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	4a23      	ldr	r2, [pc, #140]	@ (80118a4 <HAL_DMA_PollForTransfer+0x740>)
 8011816:	4293      	cmp	r3, r2
 8011818:	d013      	beq.n	8011842 <HAL_DMA_PollForTransfer+0x6de>
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	4a22      	ldr	r2, [pc, #136]	@ (80118a8 <HAL_DMA_PollForTransfer+0x744>)
 8011820:	4293      	cmp	r3, r2
 8011822:	d00e      	beq.n	8011842 <HAL_DMA_PollForTransfer+0x6de>
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	4a20      	ldr	r2, [pc, #128]	@ (80118ac <HAL_DMA_PollForTransfer+0x748>)
 801182a:	4293      	cmp	r3, r2
 801182c:	d009      	beq.n	8011842 <HAL_DMA_PollForTransfer+0x6de>
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	4a1f      	ldr	r2, [pc, #124]	@ (80118b0 <HAL_DMA_PollForTransfer+0x74c>)
 8011834:	4293      	cmp	r3, r2
 8011836:	d004      	beq.n	8011842 <HAL_DMA_PollForTransfer+0x6de>
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	4a1d      	ldr	r2, [pc, #116]	@ (80118b4 <HAL_DMA_PollForTransfer+0x750>)
 801183e:	4293      	cmp	r3, r2
 8011840:	d101      	bne.n	8011846 <HAL_DMA_PollForTransfer+0x6e2>
 8011842:	2301      	movs	r3, #1
 8011844:	e000      	b.n	8011848 <HAL_DMA_PollForTransfer+0x6e4>
 8011846:	2300      	movs	r3, #0
 8011848:	2b00      	cmp	r3, #0
 801184a:	d008      	beq.n	801185e <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011850:	f003 031f 	and.w	r3, r3, #31
 8011854:	2210      	movs	r2, #16
 8011856:	409a      	lsls	r2, r3
 8011858:	69fb      	ldr	r3, [r7, #28]
 801185a:	601a      	str	r2, [r3, #0]
 801185c:	e007      	b.n	801186e <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011862:	f003 031f 	and.w	r3, r3, #31
 8011866:	2204      	movs	r2, #4
 8011868:	409a      	lsls	r2, r3
 801186a:	69fb      	ldr	r3, [r7, #28]
 801186c:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 801186e:	7efb      	ldrb	r3, [r7, #27]
}
 8011870:	4618      	mov	r0, r3
 8011872:	3728      	adds	r7, #40	@ 0x28
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}
 8011878:	40020010 	.word	0x40020010
 801187c:	40020028 	.word	0x40020028
 8011880:	40020040 	.word	0x40020040
 8011884:	40020058 	.word	0x40020058
 8011888:	40020070 	.word	0x40020070
 801188c:	40020088 	.word	0x40020088
 8011890:	400200a0 	.word	0x400200a0
 8011894:	400200b8 	.word	0x400200b8
 8011898:	40020410 	.word	0x40020410
 801189c:	40020428 	.word	0x40020428
 80118a0:	40020440 	.word	0x40020440
 80118a4:	40020458 	.word	0x40020458
 80118a8:	40020470 	.word	0x40020470
 80118ac:	40020488 	.word	0x40020488
 80118b0:	400204a0 	.word	0x400204a0
 80118b4:	400204b8 	.word	0x400204b8

080118b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80118b8:	b480      	push	{r7}
 80118ba:	b087      	sub	sp, #28
 80118bc:	af00      	add	r7, sp, #0
 80118be:	60f8      	str	r0, [r7, #12]
 80118c0:	60b9      	str	r1, [r7, #8]
 80118c2:	607a      	str	r2, [r7, #4]
 80118c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80118ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80118d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	4a7f      	ldr	r2, [pc, #508]	@ (8011ad4 <DMA_SetConfig+0x21c>)
 80118d8:	4293      	cmp	r3, r2
 80118da:	d072      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	4a7d      	ldr	r2, [pc, #500]	@ (8011ad8 <DMA_SetConfig+0x220>)
 80118e2:	4293      	cmp	r3, r2
 80118e4:	d06d      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	4a7c      	ldr	r2, [pc, #496]	@ (8011adc <DMA_SetConfig+0x224>)
 80118ec:	4293      	cmp	r3, r2
 80118ee:	d068      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	4a7a      	ldr	r2, [pc, #488]	@ (8011ae0 <DMA_SetConfig+0x228>)
 80118f6:	4293      	cmp	r3, r2
 80118f8:	d063      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	4a79      	ldr	r2, [pc, #484]	@ (8011ae4 <DMA_SetConfig+0x22c>)
 8011900:	4293      	cmp	r3, r2
 8011902:	d05e      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	4a77      	ldr	r2, [pc, #476]	@ (8011ae8 <DMA_SetConfig+0x230>)
 801190a:	4293      	cmp	r3, r2
 801190c:	d059      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	4a76      	ldr	r2, [pc, #472]	@ (8011aec <DMA_SetConfig+0x234>)
 8011914:	4293      	cmp	r3, r2
 8011916:	d054      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	4a74      	ldr	r2, [pc, #464]	@ (8011af0 <DMA_SetConfig+0x238>)
 801191e:	4293      	cmp	r3, r2
 8011920:	d04f      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	4a73      	ldr	r2, [pc, #460]	@ (8011af4 <DMA_SetConfig+0x23c>)
 8011928:	4293      	cmp	r3, r2
 801192a:	d04a      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	4a71      	ldr	r2, [pc, #452]	@ (8011af8 <DMA_SetConfig+0x240>)
 8011932:	4293      	cmp	r3, r2
 8011934:	d045      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	4a70      	ldr	r2, [pc, #448]	@ (8011afc <DMA_SetConfig+0x244>)
 801193c:	4293      	cmp	r3, r2
 801193e:	d040      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	4a6e      	ldr	r2, [pc, #440]	@ (8011b00 <DMA_SetConfig+0x248>)
 8011946:	4293      	cmp	r3, r2
 8011948:	d03b      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	4a6d      	ldr	r2, [pc, #436]	@ (8011b04 <DMA_SetConfig+0x24c>)
 8011950:	4293      	cmp	r3, r2
 8011952:	d036      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	4a6b      	ldr	r2, [pc, #428]	@ (8011b08 <DMA_SetConfig+0x250>)
 801195a:	4293      	cmp	r3, r2
 801195c:	d031      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	4a6a      	ldr	r2, [pc, #424]	@ (8011b0c <DMA_SetConfig+0x254>)
 8011964:	4293      	cmp	r3, r2
 8011966:	d02c      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	4a68      	ldr	r2, [pc, #416]	@ (8011b10 <DMA_SetConfig+0x258>)
 801196e:	4293      	cmp	r3, r2
 8011970:	d027      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	4a67      	ldr	r2, [pc, #412]	@ (8011b14 <DMA_SetConfig+0x25c>)
 8011978:	4293      	cmp	r3, r2
 801197a:	d022      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	4a65      	ldr	r2, [pc, #404]	@ (8011b18 <DMA_SetConfig+0x260>)
 8011982:	4293      	cmp	r3, r2
 8011984:	d01d      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	4a64      	ldr	r2, [pc, #400]	@ (8011b1c <DMA_SetConfig+0x264>)
 801198c:	4293      	cmp	r3, r2
 801198e:	d018      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	4a62      	ldr	r2, [pc, #392]	@ (8011b20 <DMA_SetConfig+0x268>)
 8011996:	4293      	cmp	r3, r2
 8011998:	d013      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	4a61      	ldr	r2, [pc, #388]	@ (8011b24 <DMA_SetConfig+0x26c>)
 80119a0:	4293      	cmp	r3, r2
 80119a2:	d00e      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	4a5f      	ldr	r2, [pc, #380]	@ (8011b28 <DMA_SetConfig+0x270>)
 80119aa:	4293      	cmp	r3, r2
 80119ac:	d009      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	4a5e      	ldr	r2, [pc, #376]	@ (8011b2c <DMA_SetConfig+0x274>)
 80119b4:	4293      	cmp	r3, r2
 80119b6:	d004      	beq.n	80119c2 <DMA_SetConfig+0x10a>
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	4a5c      	ldr	r2, [pc, #368]	@ (8011b30 <DMA_SetConfig+0x278>)
 80119be:	4293      	cmp	r3, r2
 80119c0:	d101      	bne.n	80119c6 <DMA_SetConfig+0x10e>
 80119c2:	2301      	movs	r3, #1
 80119c4:	e000      	b.n	80119c8 <DMA_SetConfig+0x110>
 80119c6:	2300      	movs	r3, #0
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d00d      	beq.n	80119e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80119d0:	68fa      	ldr	r2, [r7, #12]
 80119d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80119d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d004      	beq.n	80119e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80119e2:	68fa      	ldr	r2, [r7, #12]
 80119e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80119e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	4a39      	ldr	r2, [pc, #228]	@ (8011ad4 <DMA_SetConfig+0x21c>)
 80119ee:	4293      	cmp	r3, r2
 80119f0:	d04a      	beq.n	8011a88 <DMA_SetConfig+0x1d0>
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	4a38      	ldr	r2, [pc, #224]	@ (8011ad8 <DMA_SetConfig+0x220>)
 80119f8:	4293      	cmp	r3, r2
 80119fa:	d045      	beq.n	8011a88 <DMA_SetConfig+0x1d0>
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	4a36      	ldr	r2, [pc, #216]	@ (8011adc <DMA_SetConfig+0x224>)
 8011a02:	4293      	cmp	r3, r2
 8011a04:	d040      	beq.n	8011a88 <DMA_SetConfig+0x1d0>
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	4a35      	ldr	r2, [pc, #212]	@ (8011ae0 <DMA_SetConfig+0x228>)
 8011a0c:	4293      	cmp	r3, r2
 8011a0e:	d03b      	beq.n	8011a88 <DMA_SetConfig+0x1d0>
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	4a33      	ldr	r2, [pc, #204]	@ (8011ae4 <DMA_SetConfig+0x22c>)
 8011a16:	4293      	cmp	r3, r2
 8011a18:	d036      	beq.n	8011a88 <DMA_SetConfig+0x1d0>
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	4a32      	ldr	r2, [pc, #200]	@ (8011ae8 <DMA_SetConfig+0x230>)
 8011a20:	4293      	cmp	r3, r2
 8011a22:	d031      	beq.n	8011a88 <DMA_SetConfig+0x1d0>
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	4a30      	ldr	r2, [pc, #192]	@ (8011aec <DMA_SetConfig+0x234>)
 8011a2a:	4293      	cmp	r3, r2
 8011a2c:	d02c      	beq.n	8011a88 <DMA_SetConfig+0x1d0>
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	4a2f      	ldr	r2, [pc, #188]	@ (8011af0 <DMA_SetConfig+0x238>)
 8011a34:	4293      	cmp	r3, r2
 8011a36:	d027      	beq.n	8011a88 <DMA_SetConfig+0x1d0>
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	4a2d      	ldr	r2, [pc, #180]	@ (8011af4 <DMA_SetConfig+0x23c>)
 8011a3e:	4293      	cmp	r3, r2
 8011a40:	d022      	beq.n	8011a88 <DMA_SetConfig+0x1d0>
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	4a2c      	ldr	r2, [pc, #176]	@ (8011af8 <DMA_SetConfig+0x240>)
 8011a48:	4293      	cmp	r3, r2
 8011a4a:	d01d      	beq.n	8011a88 <DMA_SetConfig+0x1d0>
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	4a2a      	ldr	r2, [pc, #168]	@ (8011afc <DMA_SetConfig+0x244>)
 8011a52:	4293      	cmp	r3, r2
 8011a54:	d018      	beq.n	8011a88 <DMA_SetConfig+0x1d0>
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	4a29      	ldr	r2, [pc, #164]	@ (8011b00 <DMA_SetConfig+0x248>)
 8011a5c:	4293      	cmp	r3, r2
 8011a5e:	d013      	beq.n	8011a88 <DMA_SetConfig+0x1d0>
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	4a27      	ldr	r2, [pc, #156]	@ (8011b04 <DMA_SetConfig+0x24c>)
 8011a66:	4293      	cmp	r3, r2
 8011a68:	d00e      	beq.n	8011a88 <DMA_SetConfig+0x1d0>
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	4a26      	ldr	r2, [pc, #152]	@ (8011b08 <DMA_SetConfig+0x250>)
 8011a70:	4293      	cmp	r3, r2
 8011a72:	d009      	beq.n	8011a88 <DMA_SetConfig+0x1d0>
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	4a24      	ldr	r2, [pc, #144]	@ (8011b0c <DMA_SetConfig+0x254>)
 8011a7a:	4293      	cmp	r3, r2
 8011a7c:	d004      	beq.n	8011a88 <DMA_SetConfig+0x1d0>
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	4a23      	ldr	r2, [pc, #140]	@ (8011b10 <DMA_SetConfig+0x258>)
 8011a84:	4293      	cmp	r3, r2
 8011a86:	d101      	bne.n	8011a8c <DMA_SetConfig+0x1d4>
 8011a88:	2301      	movs	r3, #1
 8011a8a:	e000      	b.n	8011a8e <DMA_SetConfig+0x1d6>
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d059      	beq.n	8011b46 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011a96:	f003 031f 	and.w	r3, r3, #31
 8011a9a:	223f      	movs	r2, #63	@ 0x3f
 8011a9c:	409a      	lsls	r2, r3
 8011a9e:	697b      	ldr	r3, [r7, #20]
 8011aa0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	681a      	ldr	r2, [r3, #0]
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8011ab0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	683a      	ldr	r2, [r7, #0]
 8011ab8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	689b      	ldr	r3, [r3, #8]
 8011abe:	2b40      	cmp	r3, #64	@ 0x40
 8011ac0:	d138      	bne.n	8011b34 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	687a      	ldr	r2, [r7, #4]
 8011ac8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	68ba      	ldr	r2, [r7, #8]
 8011ad0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8011ad2:	e086      	b.n	8011be2 <DMA_SetConfig+0x32a>
 8011ad4:	40020010 	.word	0x40020010
 8011ad8:	40020028 	.word	0x40020028
 8011adc:	40020040 	.word	0x40020040
 8011ae0:	40020058 	.word	0x40020058
 8011ae4:	40020070 	.word	0x40020070
 8011ae8:	40020088 	.word	0x40020088
 8011aec:	400200a0 	.word	0x400200a0
 8011af0:	400200b8 	.word	0x400200b8
 8011af4:	40020410 	.word	0x40020410
 8011af8:	40020428 	.word	0x40020428
 8011afc:	40020440 	.word	0x40020440
 8011b00:	40020458 	.word	0x40020458
 8011b04:	40020470 	.word	0x40020470
 8011b08:	40020488 	.word	0x40020488
 8011b0c:	400204a0 	.word	0x400204a0
 8011b10:	400204b8 	.word	0x400204b8
 8011b14:	58025408 	.word	0x58025408
 8011b18:	5802541c 	.word	0x5802541c
 8011b1c:	58025430 	.word	0x58025430
 8011b20:	58025444 	.word	0x58025444
 8011b24:	58025458 	.word	0x58025458
 8011b28:	5802546c 	.word	0x5802546c
 8011b2c:	58025480 	.word	0x58025480
 8011b30:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	68ba      	ldr	r2, [r7, #8]
 8011b3a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	687a      	ldr	r2, [r7, #4]
 8011b42:	60da      	str	r2, [r3, #12]
}
 8011b44:	e04d      	b.n	8011be2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	4a29      	ldr	r2, [pc, #164]	@ (8011bf0 <DMA_SetConfig+0x338>)
 8011b4c:	4293      	cmp	r3, r2
 8011b4e:	d022      	beq.n	8011b96 <DMA_SetConfig+0x2de>
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	4a27      	ldr	r2, [pc, #156]	@ (8011bf4 <DMA_SetConfig+0x33c>)
 8011b56:	4293      	cmp	r3, r2
 8011b58:	d01d      	beq.n	8011b96 <DMA_SetConfig+0x2de>
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	4a26      	ldr	r2, [pc, #152]	@ (8011bf8 <DMA_SetConfig+0x340>)
 8011b60:	4293      	cmp	r3, r2
 8011b62:	d018      	beq.n	8011b96 <DMA_SetConfig+0x2de>
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	4a24      	ldr	r2, [pc, #144]	@ (8011bfc <DMA_SetConfig+0x344>)
 8011b6a:	4293      	cmp	r3, r2
 8011b6c:	d013      	beq.n	8011b96 <DMA_SetConfig+0x2de>
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	4a23      	ldr	r2, [pc, #140]	@ (8011c00 <DMA_SetConfig+0x348>)
 8011b74:	4293      	cmp	r3, r2
 8011b76:	d00e      	beq.n	8011b96 <DMA_SetConfig+0x2de>
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	4a21      	ldr	r2, [pc, #132]	@ (8011c04 <DMA_SetConfig+0x34c>)
 8011b7e:	4293      	cmp	r3, r2
 8011b80:	d009      	beq.n	8011b96 <DMA_SetConfig+0x2de>
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	4a20      	ldr	r2, [pc, #128]	@ (8011c08 <DMA_SetConfig+0x350>)
 8011b88:	4293      	cmp	r3, r2
 8011b8a:	d004      	beq.n	8011b96 <DMA_SetConfig+0x2de>
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	4a1e      	ldr	r2, [pc, #120]	@ (8011c0c <DMA_SetConfig+0x354>)
 8011b92:	4293      	cmp	r3, r2
 8011b94:	d101      	bne.n	8011b9a <DMA_SetConfig+0x2e2>
 8011b96:	2301      	movs	r3, #1
 8011b98:	e000      	b.n	8011b9c <DMA_SetConfig+0x2e4>
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d020      	beq.n	8011be2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011ba4:	f003 031f 	and.w	r3, r3, #31
 8011ba8:	2201      	movs	r2, #1
 8011baa:	409a      	lsls	r2, r3
 8011bac:	693b      	ldr	r3, [r7, #16]
 8011bae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	683a      	ldr	r2, [r7, #0]
 8011bb6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	689b      	ldr	r3, [r3, #8]
 8011bbc:	2b40      	cmp	r3, #64	@ 0x40
 8011bbe:	d108      	bne.n	8011bd2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	687a      	ldr	r2, [r7, #4]
 8011bc6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	68ba      	ldr	r2, [r7, #8]
 8011bce:	60da      	str	r2, [r3, #12]
}
 8011bd0:	e007      	b.n	8011be2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	68ba      	ldr	r2, [r7, #8]
 8011bd8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	687a      	ldr	r2, [r7, #4]
 8011be0:	60da      	str	r2, [r3, #12]
}
 8011be2:	bf00      	nop
 8011be4:	371c      	adds	r7, #28
 8011be6:	46bd      	mov	sp, r7
 8011be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bec:	4770      	bx	lr
 8011bee:	bf00      	nop
 8011bf0:	58025408 	.word	0x58025408
 8011bf4:	5802541c 	.word	0x5802541c
 8011bf8:	58025430 	.word	0x58025430
 8011bfc:	58025444 	.word	0x58025444
 8011c00:	58025458 	.word	0x58025458
 8011c04:	5802546c 	.word	0x5802546c
 8011c08:	58025480 	.word	0x58025480
 8011c0c:	58025494 	.word	0x58025494

08011c10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8011c10:	b480      	push	{r7}
 8011c12:	b085      	sub	sp, #20
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	4a42      	ldr	r2, [pc, #264]	@ (8011d28 <DMA_CalcBaseAndBitshift+0x118>)
 8011c1e:	4293      	cmp	r3, r2
 8011c20:	d04a      	beq.n	8011cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	4a41      	ldr	r2, [pc, #260]	@ (8011d2c <DMA_CalcBaseAndBitshift+0x11c>)
 8011c28:	4293      	cmp	r3, r2
 8011c2a:	d045      	beq.n	8011cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	4a3f      	ldr	r2, [pc, #252]	@ (8011d30 <DMA_CalcBaseAndBitshift+0x120>)
 8011c32:	4293      	cmp	r3, r2
 8011c34:	d040      	beq.n	8011cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	4a3e      	ldr	r2, [pc, #248]	@ (8011d34 <DMA_CalcBaseAndBitshift+0x124>)
 8011c3c:	4293      	cmp	r3, r2
 8011c3e:	d03b      	beq.n	8011cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	4a3c      	ldr	r2, [pc, #240]	@ (8011d38 <DMA_CalcBaseAndBitshift+0x128>)
 8011c46:	4293      	cmp	r3, r2
 8011c48:	d036      	beq.n	8011cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	4a3b      	ldr	r2, [pc, #236]	@ (8011d3c <DMA_CalcBaseAndBitshift+0x12c>)
 8011c50:	4293      	cmp	r3, r2
 8011c52:	d031      	beq.n	8011cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	4a39      	ldr	r2, [pc, #228]	@ (8011d40 <DMA_CalcBaseAndBitshift+0x130>)
 8011c5a:	4293      	cmp	r3, r2
 8011c5c:	d02c      	beq.n	8011cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	4a38      	ldr	r2, [pc, #224]	@ (8011d44 <DMA_CalcBaseAndBitshift+0x134>)
 8011c64:	4293      	cmp	r3, r2
 8011c66:	d027      	beq.n	8011cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	4a36      	ldr	r2, [pc, #216]	@ (8011d48 <DMA_CalcBaseAndBitshift+0x138>)
 8011c6e:	4293      	cmp	r3, r2
 8011c70:	d022      	beq.n	8011cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	4a35      	ldr	r2, [pc, #212]	@ (8011d4c <DMA_CalcBaseAndBitshift+0x13c>)
 8011c78:	4293      	cmp	r3, r2
 8011c7a:	d01d      	beq.n	8011cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	4a33      	ldr	r2, [pc, #204]	@ (8011d50 <DMA_CalcBaseAndBitshift+0x140>)
 8011c82:	4293      	cmp	r3, r2
 8011c84:	d018      	beq.n	8011cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	4a32      	ldr	r2, [pc, #200]	@ (8011d54 <DMA_CalcBaseAndBitshift+0x144>)
 8011c8c:	4293      	cmp	r3, r2
 8011c8e:	d013      	beq.n	8011cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	4a30      	ldr	r2, [pc, #192]	@ (8011d58 <DMA_CalcBaseAndBitshift+0x148>)
 8011c96:	4293      	cmp	r3, r2
 8011c98:	d00e      	beq.n	8011cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	4a2f      	ldr	r2, [pc, #188]	@ (8011d5c <DMA_CalcBaseAndBitshift+0x14c>)
 8011ca0:	4293      	cmp	r3, r2
 8011ca2:	d009      	beq.n	8011cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	4a2d      	ldr	r2, [pc, #180]	@ (8011d60 <DMA_CalcBaseAndBitshift+0x150>)
 8011caa:	4293      	cmp	r3, r2
 8011cac:	d004      	beq.n	8011cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	4a2c      	ldr	r2, [pc, #176]	@ (8011d64 <DMA_CalcBaseAndBitshift+0x154>)
 8011cb4:	4293      	cmp	r3, r2
 8011cb6:	d101      	bne.n	8011cbc <DMA_CalcBaseAndBitshift+0xac>
 8011cb8:	2301      	movs	r3, #1
 8011cba:	e000      	b.n	8011cbe <DMA_CalcBaseAndBitshift+0xae>
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d024      	beq.n	8011d0c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	b2db      	uxtb	r3, r3
 8011cc8:	3b10      	subs	r3, #16
 8011cca:	4a27      	ldr	r2, [pc, #156]	@ (8011d68 <DMA_CalcBaseAndBitshift+0x158>)
 8011ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8011cd0:	091b      	lsrs	r3, r3, #4
 8011cd2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	f003 0307 	and.w	r3, r3, #7
 8011cda:	4a24      	ldr	r2, [pc, #144]	@ (8011d6c <DMA_CalcBaseAndBitshift+0x15c>)
 8011cdc:	5cd3      	ldrb	r3, [r2, r3]
 8011cde:	461a      	mov	r2, r3
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	2b03      	cmp	r3, #3
 8011ce8:	d908      	bls.n	8011cfc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	461a      	mov	r2, r3
 8011cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8011d70 <DMA_CalcBaseAndBitshift+0x160>)
 8011cf2:	4013      	ands	r3, r2
 8011cf4:	1d1a      	adds	r2, r3, #4
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	659a      	str	r2, [r3, #88]	@ 0x58
 8011cfa:	e00d      	b.n	8011d18 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	461a      	mov	r2, r3
 8011d02:	4b1b      	ldr	r3, [pc, #108]	@ (8011d70 <DMA_CalcBaseAndBitshift+0x160>)
 8011d04:	4013      	ands	r3, r2
 8011d06:	687a      	ldr	r2, [r7, #4]
 8011d08:	6593      	str	r3, [r2, #88]	@ 0x58
 8011d0a:	e005      	b.n	8011d18 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	3714      	adds	r7, #20
 8011d20:	46bd      	mov	sp, r7
 8011d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d26:	4770      	bx	lr
 8011d28:	40020010 	.word	0x40020010
 8011d2c:	40020028 	.word	0x40020028
 8011d30:	40020040 	.word	0x40020040
 8011d34:	40020058 	.word	0x40020058
 8011d38:	40020070 	.word	0x40020070
 8011d3c:	40020088 	.word	0x40020088
 8011d40:	400200a0 	.word	0x400200a0
 8011d44:	400200b8 	.word	0x400200b8
 8011d48:	40020410 	.word	0x40020410
 8011d4c:	40020428 	.word	0x40020428
 8011d50:	40020440 	.word	0x40020440
 8011d54:	40020458 	.word	0x40020458
 8011d58:	40020470 	.word	0x40020470
 8011d5c:	40020488 	.word	0x40020488
 8011d60:	400204a0 	.word	0x400204a0
 8011d64:	400204b8 	.word	0x400204b8
 8011d68:	aaaaaaab 	.word	0xaaaaaaab
 8011d6c:	0801ea8c 	.word	0x0801ea8c
 8011d70:	fffffc00 	.word	0xfffffc00

08011d74 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8011d74:	b480      	push	{r7}
 8011d76:	b085      	sub	sp, #20
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	699b      	ldr	r3, [r3, #24]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d120      	bne.n	8011dca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d8c:	2b03      	cmp	r3, #3
 8011d8e:	d858      	bhi.n	8011e42 <DMA_CheckFifoParam+0xce>
 8011d90:	a201      	add	r2, pc, #4	@ (adr r2, 8011d98 <DMA_CheckFifoParam+0x24>)
 8011d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d96:	bf00      	nop
 8011d98:	08011da9 	.word	0x08011da9
 8011d9c:	08011dbb 	.word	0x08011dbb
 8011da0:	08011da9 	.word	0x08011da9
 8011da4:	08011e43 	.word	0x08011e43
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d048      	beq.n	8011e46 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8011db4:	2301      	movs	r3, #1
 8011db6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8011db8:	e045      	b.n	8011e46 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dbe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8011dc2:	d142      	bne.n	8011e4a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8011dc8:	e03f      	b.n	8011e4a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	699b      	ldr	r3, [r3, #24]
 8011dce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011dd2:	d123      	bne.n	8011e1c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dd8:	2b03      	cmp	r3, #3
 8011dda:	d838      	bhi.n	8011e4e <DMA_CheckFifoParam+0xda>
 8011ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8011de4 <DMA_CheckFifoParam+0x70>)
 8011dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011de2:	bf00      	nop
 8011de4:	08011df5 	.word	0x08011df5
 8011de8:	08011dfb 	.word	0x08011dfb
 8011dec:	08011df5 	.word	0x08011df5
 8011df0:	08011e0d 	.word	0x08011e0d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8011df4:	2301      	movs	r3, #1
 8011df6:	73fb      	strb	r3, [r7, #15]
        break;
 8011df8:	e030      	b.n	8011e5c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dfe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d025      	beq.n	8011e52 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8011e06:	2301      	movs	r3, #1
 8011e08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8011e0a:	e022      	b.n	8011e52 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e10:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8011e14:	d11f      	bne.n	8011e56 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8011e16:	2301      	movs	r3, #1
 8011e18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8011e1a:	e01c      	b.n	8011e56 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e20:	2b02      	cmp	r3, #2
 8011e22:	d902      	bls.n	8011e2a <DMA_CheckFifoParam+0xb6>
 8011e24:	2b03      	cmp	r3, #3
 8011e26:	d003      	beq.n	8011e30 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8011e28:	e018      	b.n	8011e5c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8011e2a:	2301      	movs	r3, #1
 8011e2c:	73fb      	strb	r3, [r7, #15]
        break;
 8011e2e:	e015      	b.n	8011e5c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d00e      	beq.n	8011e5a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8011e40:	e00b      	b.n	8011e5a <DMA_CheckFifoParam+0xe6>
        break;
 8011e42:	bf00      	nop
 8011e44:	e00a      	b.n	8011e5c <DMA_CheckFifoParam+0xe8>
        break;
 8011e46:	bf00      	nop
 8011e48:	e008      	b.n	8011e5c <DMA_CheckFifoParam+0xe8>
        break;
 8011e4a:	bf00      	nop
 8011e4c:	e006      	b.n	8011e5c <DMA_CheckFifoParam+0xe8>
        break;
 8011e4e:	bf00      	nop
 8011e50:	e004      	b.n	8011e5c <DMA_CheckFifoParam+0xe8>
        break;
 8011e52:	bf00      	nop
 8011e54:	e002      	b.n	8011e5c <DMA_CheckFifoParam+0xe8>
        break;
 8011e56:	bf00      	nop
 8011e58:	e000      	b.n	8011e5c <DMA_CheckFifoParam+0xe8>
    break;
 8011e5a:	bf00      	nop
    }
  }

  return status;
 8011e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3714      	adds	r7, #20
 8011e62:	46bd      	mov	sp, r7
 8011e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e68:	4770      	bx	lr
 8011e6a:	bf00      	nop

08011e6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8011e6c:	b480      	push	{r7}
 8011e6e:	b085      	sub	sp, #20
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	4a38      	ldr	r2, [pc, #224]	@ (8011f60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8011e80:	4293      	cmp	r3, r2
 8011e82:	d022      	beq.n	8011eca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	4a36      	ldr	r2, [pc, #216]	@ (8011f64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8011e8a:	4293      	cmp	r3, r2
 8011e8c:	d01d      	beq.n	8011eca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	4a35      	ldr	r2, [pc, #212]	@ (8011f68 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8011e94:	4293      	cmp	r3, r2
 8011e96:	d018      	beq.n	8011eca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	4a33      	ldr	r2, [pc, #204]	@ (8011f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8011e9e:	4293      	cmp	r3, r2
 8011ea0:	d013      	beq.n	8011eca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	4a32      	ldr	r2, [pc, #200]	@ (8011f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8011ea8:	4293      	cmp	r3, r2
 8011eaa:	d00e      	beq.n	8011eca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	4a30      	ldr	r2, [pc, #192]	@ (8011f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8011eb2:	4293      	cmp	r3, r2
 8011eb4:	d009      	beq.n	8011eca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	4a2f      	ldr	r2, [pc, #188]	@ (8011f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8011ebc:	4293      	cmp	r3, r2
 8011ebe:	d004      	beq.n	8011eca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	4a2d      	ldr	r2, [pc, #180]	@ (8011f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8011ec6:	4293      	cmp	r3, r2
 8011ec8:	d101      	bne.n	8011ece <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8011eca:	2301      	movs	r3, #1
 8011ecc:	e000      	b.n	8011ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8011ece:	2300      	movs	r3, #0
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d01a      	beq.n	8011f0a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	b2db      	uxtb	r3, r3
 8011eda:	3b08      	subs	r3, #8
 8011edc:	4a28      	ldr	r2, [pc, #160]	@ (8011f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8011ede:	fba2 2303 	umull	r2, r3, r2, r3
 8011ee2:	091b      	lsrs	r3, r3, #4
 8011ee4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8011ee6:	68fa      	ldr	r2, [r7, #12]
 8011ee8:	4b26      	ldr	r3, [pc, #152]	@ (8011f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8011eea:	4413      	add	r3, r2
 8011eec:	009b      	lsls	r3, r3, #2
 8011eee:	461a      	mov	r2, r3
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	4a24      	ldr	r2, [pc, #144]	@ (8011f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8011ef8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	f003 031f 	and.w	r3, r3, #31
 8011f00:	2201      	movs	r2, #1
 8011f02:	409a      	lsls	r2, r3
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8011f08:	e024      	b.n	8011f54 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	b2db      	uxtb	r3, r3
 8011f10:	3b10      	subs	r3, #16
 8011f12:	4a1e      	ldr	r2, [pc, #120]	@ (8011f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8011f14:	fba2 2303 	umull	r2, r3, r2, r3
 8011f18:	091b      	lsrs	r3, r3, #4
 8011f1a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8011f1c:	68bb      	ldr	r3, [r7, #8]
 8011f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8011f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8011f20:	4293      	cmp	r3, r2
 8011f22:	d806      	bhi.n	8011f32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8011f24:	68bb      	ldr	r3, [r7, #8]
 8011f26:	4a1b      	ldr	r2, [pc, #108]	@ (8011f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8011f28:	4293      	cmp	r3, r2
 8011f2a:	d902      	bls.n	8011f32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	3308      	adds	r3, #8
 8011f30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8011f32:	68fa      	ldr	r2, [r7, #12]
 8011f34:	4b18      	ldr	r3, [pc, #96]	@ (8011f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8011f36:	4413      	add	r3, r2
 8011f38:	009b      	lsls	r3, r3, #2
 8011f3a:	461a      	mov	r2, r3
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	4a16      	ldr	r2, [pc, #88]	@ (8011f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8011f44:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	f003 031f 	and.w	r3, r3, #31
 8011f4c:	2201      	movs	r2, #1
 8011f4e:	409a      	lsls	r2, r3
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8011f54:	bf00      	nop
 8011f56:	3714      	adds	r7, #20
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5e:	4770      	bx	lr
 8011f60:	58025408 	.word	0x58025408
 8011f64:	5802541c 	.word	0x5802541c
 8011f68:	58025430 	.word	0x58025430
 8011f6c:	58025444 	.word	0x58025444
 8011f70:	58025458 	.word	0x58025458
 8011f74:	5802546c 	.word	0x5802546c
 8011f78:	58025480 	.word	0x58025480
 8011f7c:	58025494 	.word	0x58025494
 8011f80:	cccccccd 	.word	0xcccccccd
 8011f84:	16009600 	.word	0x16009600
 8011f88:	58025880 	.word	0x58025880
 8011f8c:	aaaaaaab 	.word	0xaaaaaaab
 8011f90:	400204b8 	.word	0x400204b8
 8011f94:	4002040f 	.word	0x4002040f
 8011f98:	10008200 	.word	0x10008200
 8011f9c:	40020880 	.word	0x40020880

08011fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8011fa0:	b480      	push	{r7}
 8011fa2:	b085      	sub	sp, #20
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	685b      	ldr	r3, [r3, #4]
 8011fac:	b2db      	uxtb	r3, r3
 8011fae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d04a      	beq.n	801204c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	2b08      	cmp	r3, #8
 8011fba:	d847      	bhi.n	801204c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	4a25      	ldr	r2, [pc, #148]	@ (8012058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8011fc2:	4293      	cmp	r3, r2
 8011fc4:	d022      	beq.n	801200c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	4a24      	ldr	r2, [pc, #144]	@ (801205c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8011fcc:	4293      	cmp	r3, r2
 8011fce:	d01d      	beq.n	801200c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	4a22      	ldr	r2, [pc, #136]	@ (8012060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8011fd6:	4293      	cmp	r3, r2
 8011fd8:	d018      	beq.n	801200c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	4a21      	ldr	r2, [pc, #132]	@ (8012064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8011fe0:	4293      	cmp	r3, r2
 8011fe2:	d013      	beq.n	801200c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8012068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8011fea:	4293      	cmp	r3, r2
 8011fec:	d00e      	beq.n	801200c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	4a1e      	ldr	r2, [pc, #120]	@ (801206c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8011ff4:	4293      	cmp	r3, r2
 8011ff6:	d009      	beq.n	801200c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8012070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8011ffe:	4293      	cmp	r3, r2
 8012000:	d004      	beq.n	801200c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	4a1b      	ldr	r2, [pc, #108]	@ (8012074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8012008:	4293      	cmp	r3, r2
 801200a:	d101      	bne.n	8012010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801200c:	2301      	movs	r3, #1
 801200e:	e000      	b.n	8012012 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8012010:	2300      	movs	r3, #0
 8012012:	2b00      	cmp	r3, #0
 8012014:	d00a      	beq.n	801202c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8012016:	68fa      	ldr	r2, [r7, #12]
 8012018:	4b17      	ldr	r3, [pc, #92]	@ (8012078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801201a:	4413      	add	r3, r2
 801201c:	009b      	lsls	r3, r3, #2
 801201e:	461a      	mov	r2, r3
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	4a15      	ldr	r2, [pc, #84]	@ (801207c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8012028:	671a      	str	r2, [r3, #112]	@ 0x70
 801202a:	e009      	b.n	8012040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801202c:	68fa      	ldr	r2, [r7, #12]
 801202e:	4b14      	ldr	r3, [pc, #80]	@ (8012080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8012030:	4413      	add	r3, r2
 8012032:	009b      	lsls	r3, r3, #2
 8012034:	461a      	mov	r2, r3
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	4a11      	ldr	r2, [pc, #68]	@ (8012084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801203e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	3b01      	subs	r3, #1
 8012044:	2201      	movs	r2, #1
 8012046:	409a      	lsls	r2, r3
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801204c:	bf00      	nop
 801204e:	3714      	adds	r7, #20
 8012050:	46bd      	mov	sp, r7
 8012052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012056:	4770      	bx	lr
 8012058:	58025408 	.word	0x58025408
 801205c:	5802541c 	.word	0x5802541c
 8012060:	58025430 	.word	0x58025430
 8012064:	58025444 	.word	0x58025444
 8012068:	58025458 	.word	0x58025458
 801206c:	5802546c 	.word	0x5802546c
 8012070:	58025480 	.word	0x58025480
 8012074:	58025494 	.word	0x58025494
 8012078:	1600963f 	.word	0x1600963f
 801207c:	58025940 	.word	0x58025940
 8012080:	1000823f 	.word	0x1000823f
 8012084:	40020940 	.word	0x40020940

08012088 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b086      	sub	sp, #24
 801208c:	af00      	add	r7, sp, #0
 801208e:	60f8      	str	r0, [r7, #12]
 8012090:	60b9      	str	r1, [r7, #8]
 8012092:	607a      	str	r2, [r7, #4]
 8012094:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012096:	2300      	movs	r3, #0
 8012098:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	689b      	ldr	r3, [r3, #8]
 801209e:	2b80      	cmp	r3, #128	@ 0x80
 80120a0:	d105      	bne.n	80120ae <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80120a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80120aa:	2301      	movs	r3, #1
 80120ac:	e315      	b.n	80126da <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80120b4:	2b01      	cmp	r3, #1
 80120b6:	d101      	bne.n	80120bc <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80120b8:	2302      	movs	r3, #2
 80120ba:	e30e      	b.n	80126da <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	2201      	movs	r2, #1
 80120c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80120ca:	b2db      	uxtb	r3, r3
 80120cc:	2b01      	cmp	r3, #1
 80120ce:	f040 82fd 	bne.w	80126cc <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	2202      	movs	r2, #2
 80120d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	2200      	movs	r2, #0
 80120de:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	4a82      	ldr	r2, [pc, #520]	@ (80122f0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80120e6:	4293      	cmp	r3, r2
 80120e8:	d04a      	beq.n	8012180 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	4a81      	ldr	r2, [pc, #516]	@ (80122f4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80120f0:	4293      	cmp	r3, r2
 80120f2:	d045      	beq.n	8012180 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	4a7f      	ldr	r2, [pc, #508]	@ (80122f8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80120fa:	4293      	cmp	r3, r2
 80120fc:	d040      	beq.n	8012180 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	4a7e      	ldr	r2, [pc, #504]	@ (80122fc <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8012104:	4293      	cmp	r3, r2
 8012106:	d03b      	beq.n	8012180 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	4a7c      	ldr	r2, [pc, #496]	@ (8012300 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 801210e:	4293      	cmp	r3, r2
 8012110:	d036      	beq.n	8012180 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	4a7b      	ldr	r2, [pc, #492]	@ (8012304 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8012118:	4293      	cmp	r3, r2
 801211a:	d031      	beq.n	8012180 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	4a79      	ldr	r2, [pc, #484]	@ (8012308 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8012122:	4293      	cmp	r3, r2
 8012124:	d02c      	beq.n	8012180 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	4a78      	ldr	r2, [pc, #480]	@ (801230c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 801212c:	4293      	cmp	r3, r2
 801212e:	d027      	beq.n	8012180 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	4a76      	ldr	r2, [pc, #472]	@ (8012310 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8012136:	4293      	cmp	r3, r2
 8012138:	d022      	beq.n	8012180 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	4a75      	ldr	r2, [pc, #468]	@ (8012314 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8012140:	4293      	cmp	r3, r2
 8012142:	d01d      	beq.n	8012180 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	4a73      	ldr	r2, [pc, #460]	@ (8012318 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 801214a:	4293      	cmp	r3, r2
 801214c:	d018      	beq.n	8012180 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	4a72      	ldr	r2, [pc, #456]	@ (801231c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8012154:	4293      	cmp	r3, r2
 8012156:	d013      	beq.n	8012180 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	4a70      	ldr	r2, [pc, #448]	@ (8012320 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 801215e:	4293      	cmp	r3, r2
 8012160:	d00e      	beq.n	8012180 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	4a6f      	ldr	r2, [pc, #444]	@ (8012324 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8012168:	4293      	cmp	r3, r2
 801216a:	d009      	beq.n	8012180 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	4a6d      	ldr	r2, [pc, #436]	@ (8012328 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8012172:	4293      	cmp	r3, r2
 8012174:	d004      	beq.n	8012180 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	4a6c      	ldr	r2, [pc, #432]	@ (801232c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 801217c:	4293      	cmp	r3, r2
 801217e:	d101      	bne.n	8012184 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8012180:	2301      	movs	r3, #1
 8012182:	e000      	b.n	8012186 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8012184:	2300      	movs	r3, #0
 8012186:	2b00      	cmp	r3, #0
 8012188:	d018      	beq.n	80121bc <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	681a      	ldr	r2, [r3, #0]
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8012198:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	683a      	ldr	r2, [r7, #0]
 80121a0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80121a6:	3308      	adds	r3, #8
 80121a8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80121ae:	f003 031f 	and.w	r3, r3, #31
 80121b2:	223f      	movs	r2, #63	@ 0x3f
 80121b4:	409a      	lsls	r2, r3
 80121b6:	693b      	ldr	r3, [r7, #16]
 80121b8:	601a      	str	r2, [r3, #0]
 80121ba:	e018      	b.n	80121ee <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	6819      	ldr	r1, [r3, #0]
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	681a      	ldr	r2, [r3, #0]
 80121c6:	f248 0320 	movw	r3, #32800	@ 0x8020
 80121ca:	430b      	orrs	r3, r1
 80121cc:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	683a      	ldr	r2, [r7, #0]
 80121d4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80121da:	3304      	adds	r3, #4
 80121dc:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80121e2:	f003 031f 	and.w	r3, r3, #31
 80121e6:	2201      	movs	r2, #1
 80121e8:	409a      	lsls	r2, r3
 80121ea:	693b      	ldr	r3, [r7, #16]
 80121ec:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80121ee:	6a3b      	ldr	r3, [r7, #32]
 80121f0:	687a      	ldr	r2, [r7, #4]
 80121f2:	68b9      	ldr	r1, [r7, #8]
 80121f4:	68f8      	ldr	r0, [r7, #12]
 80121f6:	f000 faa5 	bl	8012744 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	4a3c      	ldr	r2, [pc, #240]	@ (80122f0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8012200:	4293      	cmp	r3, r2
 8012202:	d072      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	4a3a      	ldr	r2, [pc, #232]	@ (80122f4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 801220a:	4293      	cmp	r3, r2
 801220c:	d06d      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	4a39      	ldr	r2, [pc, #228]	@ (80122f8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8012214:	4293      	cmp	r3, r2
 8012216:	d068      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	4a37      	ldr	r2, [pc, #220]	@ (80122fc <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 801221e:	4293      	cmp	r3, r2
 8012220:	d063      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	4a36      	ldr	r2, [pc, #216]	@ (8012300 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8012228:	4293      	cmp	r3, r2
 801222a:	d05e      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	4a34      	ldr	r2, [pc, #208]	@ (8012304 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8012232:	4293      	cmp	r3, r2
 8012234:	d059      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	4a33      	ldr	r2, [pc, #204]	@ (8012308 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 801223c:	4293      	cmp	r3, r2
 801223e:	d054      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	4a31      	ldr	r2, [pc, #196]	@ (801230c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8012246:	4293      	cmp	r3, r2
 8012248:	d04f      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	4a30      	ldr	r2, [pc, #192]	@ (8012310 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8012250:	4293      	cmp	r3, r2
 8012252:	d04a      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	4a2e      	ldr	r2, [pc, #184]	@ (8012314 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 801225a:	4293      	cmp	r3, r2
 801225c:	d045      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	4a2d      	ldr	r2, [pc, #180]	@ (8012318 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8012264:	4293      	cmp	r3, r2
 8012266:	d040      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	4a2b      	ldr	r2, [pc, #172]	@ (801231c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 801226e:	4293      	cmp	r3, r2
 8012270:	d03b      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	4a2a      	ldr	r2, [pc, #168]	@ (8012320 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8012278:	4293      	cmp	r3, r2
 801227a:	d036      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	4a28      	ldr	r2, [pc, #160]	@ (8012324 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8012282:	4293      	cmp	r3, r2
 8012284:	d031      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	4a27      	ldr	r2, [pc, #156]	@ (8012328 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 801228c:	4293      	cmp	r3, r2
 801228e:	d02c      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	4a25      	ldr	r2, [pc, #148]	@ (801232c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8012296:	4293      	cmp	r3, r2
 8012298:	d027      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	4a24      	ldr	r2, [pc, #144]	@ (8012330 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80122a0:	4293      	cmp	r3, r2
 80122a2:	d022      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	4a22      	ldr	r2, [pc, #136]	@ (8012334 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80122aa:	4293      	cmp	r3, r2
 80122ac:	d01d      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	4a21      	ldr	r2, [pc, #132]	@ (8012338 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80122b4:	4293      	cmp	r3, r2
 80122b6:	d018      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	4a1f      	ldr	r2, [pc, #124]	@ (801233c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80122be:	4293      	cmp	r3, r2
 80122c0:	d013      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	4a1e      	ldr	r2, [pc, #120]	@ (8012340 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80122c8:	4293      	cmp	r3, r2
 80122ca:	d00e      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	4a1c      	ldr	r2, [pc, #112]	@ (8012344 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80122d2:	4293      	cmp	r3, r2
 80122d4:	d009      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	4a1b      	ldr	r2, [pc, #108]	@ (8012348 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80122dc:	4293      	cmp	r3, r2
 80122de:	d004      	beq.n	80122ea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	4a19      	ldr	r2, [pc, #100]	@ (801234c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80122e6:	4293      	cmp	r3, r2
 80122e8:	d132      	bne.n	8012350 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80122ea:	2301      	movs	r3, #1
 80122ec:	e031      	b.n	8012352 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80122ee:	bf00      	nop
 80122f0:	40020010 	.word	0x40020010
 80122f4:	40020028 	.word	0x40020028
 80122f8:	40020040 	.word	0x40020040
 80122fc:	40020058 	.word	0x40020058
 8012300:	40020070 	.word	0x40020070
 8012304:	40020088 	.word	0x40020088
 8012308:	400200a0 	.word	0x400200a0
 801230c:	400200b8 	.word	0x400200b8
 8012310:	40020410 	.word	0x40020410
 8012314:	40020428 	.word	0x40020428
 8012318:	40020440 	.word	0x40020440
 801231c:	40020458 	.word	0x40020458
 8012320:	40020470 	.word	0x40020470
 8012324:	40020488 	.word	0x40020488
 8012328:	400204a0 	.word	0x400204a0
 801232c:	400204b8 	.word	0x400204b8
 8012330:	58025408 	.word	0x58025408
 8012334:	5802541c 	.word	0x5802541c
 8012338:	58025430 	.word	0x58025430
 801233c:	58025444 	.word	0x58025444
 8012340:	58025458 	.word	0x58025458
 8012344:	5802546c 	.word	0x5802546c
 8012348:	58025480 	.word	0x58025480
 801234c:	58025494 	.word	0x58025494
 8012350:	2300      	movs	r3, #0
 8012352:	2b00      	cmp	r3, #0
 8012354:	d00d      	beq.n	8012372 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801235a:	68fa      	ldr	r2, [r7, #12]
 801235c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801235e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012364:	2b00      	cmp	r3, #0
 8012366:	d004      	beq.n	8012372 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801236c:	68fa      	ldr	r2, [r7, #12]
 801236e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8012370:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	4a3b      	ldr	r2, [pc, #236]	@ (8012464 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8012378:	4293      	cmp	r3, r2
 801237a:	d04a      	beq.n	8012412 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	4a39      	ldr	r2, [pc, #228]	@ (8012468 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8012382:	4293      	cmp	r3, r2
 8012384:	d045      	beq.n	8012412 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	4a38      	ldr	r2, [pc, #224]	@ (801246c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 801238c:	4293      	cmp	r3, r2
 801238e:	d040      	beq.n	8012412 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	4a36      	ldr	r2, [pc, #216]	@ (8012470 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8012396:	4293      	cmp	r3, r2
 8012398:	d03b      	beq.n	8012412 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	4a35      	ldr	r2, [pc, #212]	@ (8012474 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 80123a0:	4293      	cmp	r3, r2
 80123a2:	d036      	beq.n	8012412 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	4a33      	ldr	r2, [pc, #204]	@ (8012478 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 80123aa:	4293      	cmp	r3, r2
 80123ac:	d031      	beq.n	8012412 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	4a32      	ldr	r2, [pc, #200]	@ (801247c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 80123b4:	4293      	cmp	r3, r2
 80123b6:	d02c      	beq.n	8012412 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	4a30      	ldr	r2, [pc, #192]	@ (8012480 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 80123be:	4293      	cmp	r3, r2
 80123c0:	d027      	beq.n	8012412 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	4a2f      	ldr	r2, [pc, #188]	@ (8012484 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 80123c8:	4293      	cmp	r3, r2
 80123ca:	d022      	beq.n	8012412 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	4a2d      	ldr	r2, [pc, #180]	@ (8012488 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 80123d2:	4293      	cmp	r3, r2
 80123d4:	d01d      	beq.n	8012412 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	4a2c      	ldr	r2, [pc, #176]	@ (801248c <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80123dc:	4293      	cmp	r3, r2
 80123de:	d018      	beq.n	8012412 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	4a2a      	ldr	r2, [pc, #168]	@ (8012490 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 80123e6:	4293      	cmp	r3, r2
 80123e8:	d013      	beq.n	8012412 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	4a29      	ldr	r2, [pc, #164]	@ (8012494 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 80123f0:	4293      	cmp	r3, r2
 80123f2:	d00e      	beq.n	8012412 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	4a27      	ldr	r2, [pc, #156]	@ (8012498 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 80123fa:	4293      	cmp	r3, r2
 80123fc:	d009      	beq.n	8012412 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	4a26      	ldr	r2, [pc, #152]	@ (801249c <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8012404:	4293      	cmp	r3, r2
 8012406:	d004      	beq.n	8012412 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	4a24      	ldr	r2, [pc, #144]	@ (80124a0 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 801240e:	4293      	cmp	r3, r2
 8012410:	d101      	bne.n	8012416 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8012412:	2301      	movs	r3, #1
 8012414:	e000      	b.n	8012418 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8012416:	2300      	movs	r3, #0
 8012418:	2b00      	cmp	r3, #0
 801241a:	d043      	beq.n	80124a4 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	f023 021e 	bic.w	r2, r3, #30
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	f042 0216 	orr.w	r2, r2, #22
 801242e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	695a      	ldr	r2, [r3, #20]
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801243e:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012444:	2b00      	cmp	r3, #0
 8012446:	d103      	bne.n	8012450 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801244c:	2b00      	cmp	r3, #0
 801244e:	d043      	beq.n	80124d8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	681a      	ldr	r2, [r3, #0]
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	f042 0208 	orr.w	r2, r2, #8
 801245e:	601a      	str	r2, [r3, #0]
 8012460:	e03a      	b.n	80124d8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8012462:	bf00      	nop
 8012464:	40020010 	.word	0x40020010
 8012468:	40020028 	.word	0x40020028
 801246c:	40020040 	.word	0x40020040
 8012470:	40020058 	.word	0x40020058
 8012474:	40020070 	.word	0x40020070
 8012478:	40020088 	.word	0x40020088
 801247c:	400200a0 	.word	0x400200a0
 8012480:	400200b8 	.word	0x400200b8
 8012484:	40020410 	.word	0x40020410
 8012488:	40020428 	.word	0x40020428
 801248c:	40020440 	.word	0x40020440
 8012490:	40020458 	.word	0x40020458
 8012494:	40020470 	.word	0x40020470
 8012498:	40020488 	.word	0x40020488
 801249c:	400204a0 	.word	0x400204a0
 80124a0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	f023 020e 	bic.w	r2, r3, #14
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	f042 020a 	orr.w	r2, r2, #10
 80124b6:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d103      	bne.n	80124c8 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d007      	beq.n	80124d8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	681a      	ldr	r2, [r3, #0]
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	f042 0204 	orr.w	r2, r2, #4
 80124d6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	4a81      	ldr	r2, [pc, #516]	@ (80126e4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80124de:	4293      	cmp	r3, r2
 80124e0:	d072      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	4a80      	ldr	r2, [pc, #512]	@ (80126e8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80124e8:	4293      	cmp	r3, r2
 80124ea:	d06d      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	4a7e      	ldr	r2, [pc, #504]	@ (80126ec <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80124f2:	4293      	cmp	r3, r2
 80124f4:	d068      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	4a7d      	ldr	r2, [pc, #500]	@ (80126f0 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80124fc:	4293      	cmp	r3, r2
 80124fe:	d063      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	4a7b      	ldr	r2, [pc, #492]	@ (80126f4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8012506:	4293      	cmp	r3, r2
 8012508:	d05e      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	4a7a      	ldr	r2, [pc, #488]	@ (80126f8 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8012510:	4293      	cmp	r3, r2
 8012512:	d059      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	4a78      	ldr	r2, [pc, #480]	@ (80126fc <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 801251a:	4293      	cmp	r3, r2
 801251c:	d054      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	4a77      	ldr	r2, [pc, #476]	@ (8012700 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8012524:	4293      	cmp	r3, r2
 8012526:	d04f      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	4a75      	ldr	r2, [pc, #468]	@ (8012704 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 801252e:	4293      	cmp	r3, r2
 8012530:	d04a      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	4a74      	ldr	r2, [pc, #464]	@ (8012708 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8012538:	4293      	cmp	r3, r2
 801253a:	d045      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	4a72      	ldr	r2, [pc, #456]	@ (801270c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8012542:	4293      	cmp	r3, r2
 8012544:	d040      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	4a71      	ldr	r2, [pc, #452]	@ (8012710 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 801254c:	4293      	cmp	r3, r2
 801254e:	d03b      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	4a6f      	ldr	r2, [pc, #444]	@ (8012714 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8012556:	4293      	cmp	r3, r2
 8012558:	d036      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	4a6e      	ldr	r2, [pc, #440]	@ (8012718 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8012560:	4293      	cmp	r3, r2
 8012562:	d031      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	4a6c      	ldr	r2, [pc, #432]	@ (801271c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 801256a:	4293      	cmp	r3, r2
 801256c:	d02c      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	4a6b      	ldr	r2, [pc, #428]	@ (8012720 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8012574:	4293      	cmp	r3, r2
 8012576:	d027      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	4a69      	ldr	r2, [pc, #420]	@ (8012724 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 801257e:	4293      	cmp	r3, r2
 8012580:	d022      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	4a68      	ldr	r2, [pc, #416]	@ (8012728 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8012588:	4293      	cmp	r3, r2
 801258a:	d01d      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	4a66      	ldr	r2, [pc, #408]	@ (801272c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8012592:	4293      	cmp	r3, r2
 8012594:	d018      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	4a65      	ldr	r2, [pc, #404]	@ (8012730 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 801259c:	4293      	cmp	r3, r2
 801259e:	d013      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	4a63      	ldr	r2, [pc, #396]	@ (8012734 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80125a6:	4293      	cmp	r3, r2
 80125a8:	d00e      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	4a62      	ldr	r2, [pc, #392]	@ (8012738 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80125b0:	4293      	cmp	r3, r2
 80125b2:	d009      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	4a60      	ldr	r2, [pc, #384]	@ (801273c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80125ba:	4293      	cmp	r3, r2
 80125bc:	d004      	beq.n	80125c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	4a5f      	ldr	r2, [pc, #380]	@ (8012740 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80125c4:	4293      	cmp	r3, r2
 80125c6:	d101      	bne.n	80125cc <HAL_DMAEx_MultiBufferStart_IT+0x544>
 80125c8:	2301      	movs	r3, #1
 80125ca:	e000      	b.n	80125ce <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80125cc:	2300      	movs	r3, #0
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d01a      	beq.n	8012608 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d007      	beq.n	80125f0 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80125e4:	681a      	ldr	r2, [r3, #0]
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80125ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80125ee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d007      	beq.n	8012608 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80125fc:	681a      	ldr	r2, [r3, #0]
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012602:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012606:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	4a35      	ldr	r2, [pc, #212]	@ (80126e4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 801260e:	4293      	cmp	r3, r2
 8012610:	d04a      	beq.n	80126a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	4a34      	ldr	r2, [pc, #208]	@ (80126e8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8012618:	4293      	cmp	r3, r2
 801261a:	d045      	beq.n	80126a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	4a32      	ldr	r2, [pc, #200]	@ (80126ec <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8012622:	4293      	cmp	r3, r2
 8012624:	d040      	beq.n	80126a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	4a31      	ldr	r2, [pc, #196]	@ (80126f0 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 801262c:	4293      	cmp	r3, r2
 801262e:	d03b      	beq.n	80126a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	4a2f      	ldr	r2, [pc, #188]	@ (80126f4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8012636:	4293      	cmp	r3, r2
 8012638:	d036      	beq.n	80126a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	4a2e      	ldr	r2, [pc, #184]	@ (80126f8 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8012640:	4293      	cmp	r3, r2
 8012642:	d031      	beq.n	80126a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	4a2c      	ldr	r2, [pc, #176]	@ (80126fc <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 801264a:	4293      	cmp	r3, r2
 801264c:	d02c      	beq.n	80126a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	4a2b      	ldr	r2, [pc, #172]	@ (8012700 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8012654:	4293      	cmp	r3, r2
 8012656:	d027      	beq.n	80126a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	4a29      	ldr	r2, [pc, #164]	@ (8012704 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 801265e:	4293      	cmp	r3, r2
 8012660:	d022      	beq.n	80126a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	4a28      	ldr	r2, [pc, #160]	@ (8012708 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8012668:	4293      	cmp	r3, r2
 801266a:	d01d      	beq.n	80126a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	4a26      	ldr	r2, [pc, #152]	@ (801270c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8012672:	4293      	cmp	r3, r2
 8012674:	d018      	beq.n	80126a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	4a25      	ldr	r2, [pc, #148]	@ (8012710 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 801267c:	4293      	cmp	r3, r2
 801267e:	d013      	beq.n	80126a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	4a23      	ldr	r2, [pc, #140]	@ (8012714 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8012686:	4293      	cmp	r3, r2
 8012688:	d00e      	beq.n	80126a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	4a22      	ldr	r2, [pc, #136]	@ (8012718 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8012690:	4293      	cmp	r3, r2
 8012692:	d009      	beq.n	80126a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	4a20      	ldr	r2, [pc, #128]	@ (801271c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 801269a:	4293      	cmp	r3, r2
 801269c:	d004      	beq.n	80126a8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	4a1f      	ldr	r2, [pc, #124]	@ (8012720 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80126a4:	4293      	cmp	r3, r2
 80126a6:	d108      	bne.n	80126ba <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	681a      	ldr	r2, [r3, #0]
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	f042 0201 	orr.w	r2, r2, #1
 80126b6:	601a      	str	r2, [r3, #0]
 80126b8:	e00e      	b.n	80126d8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	681a      	ldr	r2, [r3, #0]
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	f042 0201 	orr.w	r2, r2, #1
 80126c8:	601a      	str	r2, [r3, #0]
 80126ca:	e005      	b.n	80126d8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80126d2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 80126d4:	2301      	movs	r3, #1
 80126d6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80126d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80126da:	4618      	mov	r0, r3
 80126dc:	3718      	adds	r7, #24
 80126de:	46bd      	mov	sp, r7
 80126e0:	bd80      	pop	{r7, pc}
 80126e2:	bf00      	nop
 80126e4:	40020010 	.word	0x40020010
 80126e8:	40020028 	.word	0x40020028
 80126ec:	40020040 	.word	0x40020040
 80126f0:	40020058 	.word	0x40020058
 80126f4:	40020070 	.word	0x40020070
 80126f8:	40020088 	.word	0x40020088
 80126fc:	400200a0 	.word	0x400200a0
 8012700:	400200b8 	.word	0x400200b8
 8012704:	40020410 	.word	0x40020410
 8012708:	40020428 	.word	0x40020428
 801270c:	40020440 	.word	0x40020440
 8012710:	40020458 	.word	0x40020458
 8012714:	40020470 	.word	0x40020470
 8012718:	40020488 	.word	0x40020488
 801271c:	400204a0 	.word	0x400204a0
 8012720:	400204b8 	.word	0x400204b8
 8012724:	58025408 	.word	0x58025408
 8012728:	5802541c 	.word	0x5802541c
 801272c:	58025430 	.word	0x58025430
 8012730:	58025444 	.word	0x58025444
 8012734:	58025458 	.word	0x58025458
 8012738:	5802546c 	.word	0x5802546c
 801273c:	58025480 	.word	0x58025480
 8012740:	58025494 	.word	0x58025494

08012744 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012744:	b480      	push	{r7}
 8012746:	b085      	sub	sp, #20
 8012748:	af00      	add	r7, sp, #0
 801274a:	60f8      	str	r0, [r7, #12]
 801274c:	60b9      	str	r1, [r7, #8]
 801274e:	607a      	str	r2, [r7, #4]
 8012750:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	4a46      	ldr	r2, [pc, #280]	@ (8012870 <DMA_MultiBufferSetConfig+0x12c>)
 8012758:	4293      	cmp	r3, r2
 801275a:	d04a      	beq.n	80127f2 <DMA_MultiBufferSetConfig+0xae>
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	4a44      	ldr	r2, [pc, #272]	@ (8012874 <DMA_MultiBufferSetConfig+0x130>)
 8012762:	4293      	cmp	r3, r2
 8012764:	d045      	beq.n	80127f2 <DMA_MultiBufferSetConfig+0xae>
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	4a43      	ldr	r2, [pc, #268]	@ (8012878 <DMA_MultiBufferSetConfig+0x134>)
 801276c:	4293      	cmp	r3, r2
 801276e:	d040      	beq.n	80127f2 <DMA_MultiBufferSetConfig+0xae>
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	4a41      	ldr	r2, [pc, #260]	@ (801287c <DMA_MultiBufferSetConfig+0x138>)
 8012776:	4293      	cmp	r3, r2
 8012778:	d03b      	beq.n	80127f2 <DMA_MultiBufferSetConfig+0xae>
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	4a40      	ldr	r2, [pc, #256]	@ (8012880 <DMA_MultiBufferSetConfig+0x13c>)
 8012780:	4293      	cmp	r3, r2
 8012782:	d036      	beq.n	80127f2 <DMA_MultiBufferSetConfig+0xae>
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	4a3e      	ldr	r2, [pc, #248]	@ (8012884 <DMA_MultiBufferSetConfig+0x140>)
 801278a:	4293      	cmp	r3, r2
 801278c:	d031      	beq.n	80127f2 <DMA_MultiBufferSetConfig+0xae>
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	4a3d      	ldr	r2, [pc, #244]	@ (8012888 <DMA_MultiBufferSetConfig+0x144>)
 8012794:	4293      	cmp	r3, r2
 8012796:	d02c      	beq.n	80127f2 <DMA_MultiBufferSetConfig+0xae>
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	4a3b      	ldr	r2, [pc, #236]	@ (801288c <DMA_MultiBufferSetConfig+0x148>)
 801279e:	4293      	cmp	r3, r2
 80127a0:	d027      	beq.n	80127f2 <DMA_MultiBufferSetConfig+0xae>
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	4a3a      	ldr	r2, [pc, #232]	@ (8012890 <DMA_MultiBufferSetConfig+0x14c>)
 80127a8:	4293      	cmp	r3, r2
 80127aa:	d022      	beq.n	80127f2 <DMA_MultiBufferSetConfig+0xae>
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	4a38      	ldr	r2, [pc, #224]	@ (8012894 <DMA_MultiBufferSetConfig+0x150>)
 80127b2:	4293      	cmp	r3, r2
 80127b4:	d01d      	beq.n	80127f2 <DMA_MultiBufferSetConfig+0xae>
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	4a37      	ldr	r2, [pc, #220]	@ (8012898 <DMA_MultiBufferSetConfig+0x154>)
 80127bc:	4293      	cmp	r3, r2
 80127be:	d018      	beq.n	80127f2 <DMA_MultiBufferSetConfig+0xae>
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	4a35      	ldr	r2, [pc, #212]	@ (801289c <DMA_MultiBufferSetConfig+0x158>)
 80127c6:	4293      	cmp	r3, r2
 80127c8:	d013      	beq.n	80127f2 <DMA_MultiBufferSetConfig+0xae>
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	4a34      	ldr	r2, [pc, #208]	@ (80128a0 <DMA_MultiBufferSetConfig+0x15c>)
 80127d0:	4293      	cmp	r3, r2
 80127d2:	d00e      	beq.n	80127f2 <DMA_MultiBufferSetConfig+0xae>
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	4a32      	ldr	r2, [pc, #200]	@ (80128a4 <DMA_MultiBufferSetConfig+0x160>)
 80127da:	4293      	cmp	r3, r2
 80127dc:	d009      	beq.n	80127f2 <DMA_MultiBufferSetConfig+0xae>
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	4a31      	ldr	r2, [pc, #196]	@ (80128a8 <DMA_MultiBufferSetConfig+0x164>)
 80127e4:	4293      	cmp	r3, r2
 80127e6:	d004      	beq.n	80127f2 <DMA_MultiBufferSetConfig+0xae>
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	4a2f      	ldr	r2, [pc, #188]	@ (80128ac <DMA_MultiBufferSetConfig+0x168>)
 80127ee:	4293      	cmp	r3, r2
 80127f0:	d101      	bne.n	80127f6 <DMA_MultiBufferSetConfig+0xb2>
 80127f2:	2301      	movs	r3, #1
 80127f4:	e000      	b.n	80127f8 <DMA_MultiBufferSetConfig+0xb4>
 80127f6:	2300      	movs	r3, #0
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d019      	beq.n	8012830 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	683a      	ldr	r2, [r7, #0]
 8012802:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	689b      	ldr	r3, [r3, #8]
 8012808:	2b40      	cmp	r3, #64	@ 0x40
 801280a:	d108      	bne.n	801281e <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	687a      	ldr	r2, [r7, #4]
 8012812:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	68ba      	ldr	r2, [r7, #8]
 801281a:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 801281c:	e021      	b.n	8012862 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	68ba      	ldr	r2, [r7, #8]
 8012824:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	687a      	ldr	r2, [r7, #4]
 801282c:	60da      	str	r2, [r3, #12]
}
 801282e:	e018      	b.n	8012862 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	683a      	ldr	r2, [r7, #0]
 8012836:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	689b      	ldr	r3, [r3, #8]
 801283c:	2b40      	cmp	r3, #64	@ 0x40
 801283e:	d108      	bne.n	8012852 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	687a      	ldr	r2, [r7, #4]
 8012846:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	68ba      	ldr	r2, [r7, #8]
 801284e:	60da      	str	r2, [r3, #12]
}
 8012850:	e007      	b.n	8012862 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	68ba      	ldr	r2, [r7, #8]
 8012858:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	687a      	ldr	r2, [r7, #4]
 8012860:	60da      	str	r2, [r3, #12]
}
 8012862:	bf00      	nop
 8012864:	3714      	adds	r7, #20
 8012866:	46bd      	mov	sp, r7
 8012868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286c:	4770      	bx	lr
 801286e:	bf00      	nop
 8012870:	40020010 	.word	0x40020010
 8012874:	40020028 	.word	0x40020028
 8012878:	40020040 	.word	0x40020040
 801287c:	40020058 	.word	0x40020058
 8012880:	40020070 	.word	0x40020070
 8012884:	40020088 	.word	0x40020088
 8012888:	400200a0 	.word	0x400200a0
 801288c:	400200b8 	.word	0x400200b8
 8012890:	40020410 	.word	0x40020410
 8012894:	40020428 	.word	0x40020428
 8012898:	40020440 	.word	0x40020440
 801289c:	40020458 	.word	0x40020458
 80128a0:	40020470 	.word	0x40020470
 80128a4:	40020488 	.word	0x40020488
 80128a8:	400204a0 	.word	0x400204a0
 80128ac:	400204b8 	.word	0x400204b8

080128b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80128b0:	b480      	push	{r7}
 80128b2:	b089      	sub	sp, #36	@ 0x24
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
 80128b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80128ba:	2300      	movs	r3, #0
 80128bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80128be:	4b89      	ldr	r3, [pc, #548]	@ (8012ae4 <HAL_GPIO_Init+0x234>)
 80128c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80128c2:	e194      	b.n	8012bee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80128c4:	683b      	ldr	r3, [r7, #0]
 80128c6:	681a      	ldr	r2, [r3, #0]
 80128c8:	2101      	movs	r1, #1
 80128ca:	69fb      	ldr	r3, [r7, #28]
 80128cc:	fa01 f303 	lsl.w	r3, r1, r3
 80128d0:	4013      	ands	r3, r2
 80128d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80128d4:	693b      	ldr	r3, [r7, #16]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	f000 8186 	beq.w	8012be8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	685b      	ldr	r3, [r3, #4]
 80128e0:	f003 0303 	and.w	r3, r3, #3
 80128e4:	2b01      	cmp	r3, #1
 80128e6:	d005      	beq.n	80128f4 <HAL_GPIO_Init+0x44>
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	685b      	ldr	r3, [r3, #4]
 80128ec:	f003 0303 	and.w	r3, r3, #3
 80128f0:	2b02      	cmp	r3, #2
 80128f2:	d130      	bne.n	8012956 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	689b      	ldr	r3, [r3, #8]
 80128f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80128fa:	69fb      	ldr	r3, [r7, #28]
 80128fc:	005b      	lsls	r3, r3, #1
 80128fe:	2203      	movs	r2, #3
 8012900:	fa02 f303 	lsl.w	r3, r2, r3
 8012904:	43db      	mvns	r3, r3
 8012906:	69ba      	ldr	r2, [r7, #24]
 8012908:	4013      	ands	r3, r2
 801290a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	68da      	ldr	r2, [r3, #12]
 8012910:	69fb      	ldr	r3, [r7, #28]
 8012912:	005b      	lsls	r3, r3, #1
 8012914:	fa02 f303 	lsl.w	r3, r2, r3
 8012918:	69ba      	ldr	r2, [r7, #24]
 801291a:	4313      	orrs	r3, r2
 801291c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	69ba      	ldr	r2, [r7, #24]
 8012922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	685b      	ldr	r3, [r3, #4]
 8012928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801292a:	2201      	movs	r2, #1
 801292c:	69fb      	ldr	r3, [r7, #28]
 801292e:	fa02 f303 	lsl.w	r3, r2, r3
 8012932:	43db      	mvns	r3, r3
 8012934:	69ba      	ldr	r2, [r7, #24]
 8012936:	4013      	ands	r3, r2
 8012938:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801293a:	683b      	ldr	r3, [r7, #0]
 801293c:	685b      	ldr	r3, [r3, #4]
 801293e:	091b      	lsrs	r3, r3, #4
 8012940:	f003 0201 	and.w	r2, r3, #1
 8012944:	69fb      	ldr	r3, [r7, #28]
 8012946:	fa02 f303 	lsl.w	r3, r2, r3
 801294a:	69ba      	ldr	r2, [r7, #24]
 801294c:	4313      	orrs	r3, r2
 801294e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	69ba      	ldr	r2, [r7, #24]
 8012954:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	685b      	ldr	r3, [r3, #4]
 801295a:	f003 0303 	and.w	r3, r3, #3
 801295e:	2b03      	cmp	r3, #3
 8012960:	d017      	beq.n	8012992 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	68db      	ldr	r3, [r3, #12]
 8012966:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8012968:	69fb      	ldr	r3, [r7, #28]
 801296a:	005b      	lsls	r3, r3, #1
 801296c:	2203      	movs	r2, #3
 801296e:	fa02 f303 	lsl.w	r3, r2, r3
 8012972:	43db      	mvns	r3, r3
 8012974:	69ba      	ldr	r2, [r7, #24]
 8012976:	4013      	ands	r3, r2
 8012978:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	689a      	ldr	r2, [r3, #8]
 801297e:	69fb      	ldr	r3, [r7, #28]
 8012980:	005b      	lsls	r3, r3, #1
 8012982:	fa02 f303 	lsl.w	r3, r2, r3
 8012986:	69ba      	ldr	r2, [r7, #24]
 8012988:	4313      	orrs	r3, r2
 801298a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	69ba      	ldr	r2, [r7, #24]
 8012990:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	685b      	ldr	r3, [r3, #4]
 8012996:	f003 0303 	and.w	r3, r3, #3
 801299a:	2b02      	cmp	r3, #2
 801299c:	d123      	bne.n	80129e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801299e:	69fb      	ldr	r3, [r7, #28]
 80129a0:	08da      	lsrs	r2, r3, #3
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	3208      	adds	r2, #8
 80129a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80129ac:	69fb      	ldr	r3, [r7, #28]
 80129ae:	f003 0307 	and.w	r3, r3, #7
 80129b2:	009b      	lsls	r3, r3, #2
 80129b4:	220f      	movs	r2, #15
 80129b6:	fa02 f303 	lsl.w	r3, r2, r3
 80129ba:	43db      	mvns	r3, r3
 80129bc:	69ba      	ldr	r2, [r7, #24]
 80129be:	4013      	ands	r3, r2
 80129c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80129c2:	683b      	ldr	r3, [r7, #0]
 80129c4:	691a      	ldr	r2, [r3, #16]
 80129c6:	69fb      	ldr	r3, [r7, #28]
 80129c8:	f003 0307 	and.w	r3, r3, #7
 80129cc:	009b      	lsls	r3, r3, #2
 80129ce:	fa02 f303 	lsl.w	r3, r2, r3
 80129d2:	69ba      	ldr	r2, [r7, #24]
 80129d4:	4313      	orrs	r3, r2
 80129d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80129d8:	69fb      	ldr	r3, [r7, #28]
 80129da:	08da      	lsrs	r2, r3, #3
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	3208      	adds	r2, #8
 80129e0:	69b9      	ldr	r1, [r7, #24]
 80129e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80129ec:	69fb      	ldr	r3, [r7, #28]
 80129ee:	005b      	lsls	r3, r3, #1
 80129f0:	2203      	movs	r2, #3
 80129f2:	fa02 f303 	lsl.w	r3, r2, r3
 80129f6:	43db      	mvns	r3, r3
 80129f8:	69ba      	ldr	r2, [r7, #24]
 80129fa:	4013      	ands	r3, r2
 80129fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80129fe:	683b      	ldr	r3, [r7, #0]
 8012a00:	685b      	ldr	r3, [r3, #4]
 8012a02:	f003 0203 	and.w	r2, r3, #3
 8012a06:	69fb      	ldr	r3, [r7, #28]
 8012a08:	005b      	lsls	r3, r3, #1
 8012a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8012a0e:	69ba      	ldr	r2, [r7, #24]
 8012a10:	4313      	orrs	r3, r2
 8012a12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	69ba      	ldr	r2, [r7, #24]
 8012a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	685b      	ldr	r3, [r3, #4]
 8012a1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	f000 80e0 	beq.w	8012be8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012a28:	4b2f      	ldr	r3, [pc, #188]	@ (8012ae8 <HAL_GPIO_Init+0x238>)
 8012a2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8012a2e:	4a2e      	ldr	r2, [pc, #184]	@ (8012ae8 <HAL_GPIO_Init+0x238>)
 8012a30:	f043 0302 	orr.w	r3, r3, #2
 8012a34:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8012a38:	4b2b      	ldr	r3, [pc, #172]	@ (8012ae8 <HAL_GPIO_Init+0x238>)
 8012a3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8012a3e:	f003 0302 	and.w	r3, r3, #2
 8012a42:	60fb      	str	r3, [r7, #12]
 8012a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012a46:	4a29      	ldr	r2, [pc, #164]	@ (8012aec <HAL_GPIO_Init+0x23c>)
 8012a48:	69fb      	ldr	r3, [r7, #28]
 8012a4a:	089b      	lsrs	r3, r3, #2
 8012a4c:	3302      	adds	r3, #2
 8012a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8012a54:	69fb      	ldr	r3, [r7, #28]
 8012a56:	f003 0303 	and.w	r3, r3, #3
 8012a5a:	009b      	lsls	r3, r3, #2
 8012a5c:	220f      	movs	r2, #15
 8012a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8012a62:	43db      	mvns	r3, r3
 8012a64:	69ba      	ldr	r2, [r7, #24]
 8012a66:	4013      	ands	r3, r2
 8012a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	4a20      	ldr	r2, [pc, #128]	@ (8012af0 <HAL_GPIO_Init+0x240>)
 8012a6e:	4293      	cmp	r3, r2
 8012a70:	d052      	beq.n	8012b18 <HAL_GPIO_Init+0x268>
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	4a1f      	ldr	r2, [pc, #124]	@ (8012af4 <HAL_GPIO_Init+0x244>)
 8012a76:	4293      	cmp	r3, r2
 8012a78:	d031      	beq.n	8012ade <HAL_GPIO_Init+0x22e>
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	4a1e      	ldr	r2, [pc, #120]	@ (8012af8 <HAL_GPIO_Init+0x248>)
 8012a7e:	4293      	cmp	r3, r2
 8012a80:	d02b      	beq.n	8012ada <HAL_GPIO_Init+0x22a>
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	4a1d      	ldr	r2, [pc, #116]	@ (8012afc <HAL_GPIO_Init+0x24c>)
 8012a86:	4293      	cmp	r3, r2
 8012a88:	d025      	beq.n	8012ad6 <HAL_GPIO_Init+0x226>
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8012b00 <HAL_GPIO_Init+0x250>)
 8012a8e:	4293      	cmp	r3, r2
 8012a90:	d01f      	beq.n	8012ad2 <HAL_GPIO_Init+0x222>
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	4a1b      	ldr	r2, [pc, #108]	@ (8012b04 <HAL_GPIO_Init+0x254>)
 8012a96:	4293      	cmp	r3, r2
 8012a98:	d019      	beq.n	8012ace <HAL_GPIO_Init+0x21e>
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8012b08 <HAL_GPIO_Init+0x258>)
 8012a9e:	4293      	cmp	r3, r2
 8012aa0:	d013      	beq.n	8012aca <HAL_GPIO_Init+0x21a>
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	4a19      	ldr	r2, [pc, #100]	@ (8012b0c <HAL_GPIO_Init+0x25c>)
 8012aa6:	4293      	cmp	r3, r2
 8012aa8:	d00d      	beq.n	8012ac6 <HAL_GPIO_Init+0x216>
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	4a18      	ldr	r2, [pc, #96]	@ (8012b10 <HAL_GPIO_Init+0x260>)
 8012aae:	4293      	cmp	r3, r2
 8012ab0:	d007      	beq.n	8012ac2 <HAL_GPIO_Init+0x212>
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	4a17      	ldr	r2, [pc, #92]	@ (8012b14 <HAL_GPIO_Init+0x264>)
 8012ab6:	4293      	cmp	r3, r2
 8012ab8:	d101      	bne.n	8012abe <HAL_GPIO_Init+0x20e>
 8012aba:	2309      	movs	r3, #9
 8012abc:	e02d      	b.n	8012b1a <HAL_GPIO_Init+0x26a>
 8012abe:	230a      	movs	r3, #10
 8012ac0:	e02b      	b.n	8012b1a <HAL_GPIO_Init+0x26a>
 8012ac2:	2308      	movs	r3, #8
 8012ac4:	e029      	b.n	8012b1a <HAL_GPIO_Init+0x26a>
 8012ac6:	2307      	movs	r3, #7
 8012ac8:	e027      	b.n	8012b1a <HAL_GPIO_Init+0x26a>
 8012aca:	2306      	movs	r3, #6
 8012acc:	e025      	b.n	8012b1a <HAL_GPIO_Init+0x26a>
 8012ace:	2305      	movs	r3, #5
 8012ad0:	e023      	b.n	8012b1a <HAL_GPIO_Init+0x26a>
 8012ad2:	2304      	movs	r3, #4
 8012ad4:	e021      	b.n	8012b1a <HAL_GPIO_Init+0x26a>
 8012ad6:	2303      	movs	r3, #3
 8012ad8:	e01f      	b.n	8012b1a <HAL_GPIO_Init+0x26a>
 8012ada:	2302      	movs	r3, #2
 8012adc:	e01d      	b.n	8012b1a <HAL_GPIO_Init+0x26a>
 8012ade:	2301      	movs	r3, #1
 8012ae0:	e01b      	b.n	8012b1a <HAL_GPIO_Init+0x26a>
 8012ae2:	bf00      	nop
 8012ae4:	58000080 	.word	0x58000080
 8012ae8:	58024400 	.word	0x58024400
 8012aec:	58000400 	.word	0x58000400
 8012af0:	58020000 	.word	0x58020000
 8012af4:	58020400 	.word	0x58020400
 8012af8:	58020800 	.word	0x58020800
 8012afc:	58020c00 	.word	0x58020c00
 8012b00:	58021000 	.word	0x58021000
 8012b04:	58021400 	.word	0x58021400
 8012b08:	58021800 	.word	0x58021800
 8012b0c:	58021c00 	.word	0x58021c00
 8012b10:	58022000 	.word	0x58022000
 8012b14:	58022400 	.word	0x58022400
 8012b18:	2300      	movs	r3, #0
 8012b1a:	69fa      	ldr	r2, [r7, #28]
 8012b1c:	f002 0203 	and.w	r2, r2, #3
 8012b20:	0092      	lsls	r2, r2, #2
 8012b22:	4093      	lsls	r3, r2
 8012b24:	69ba      	ldr	r2, [r7, #24]
 8012b26:	4313      	orrs	r3, r2
 8012b28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012b2a:	4938      	ldr	r1, [pc, #224]	@ (8012c0c <HAL_GPIO_Init+0x35c>)
 8012b2c:	69fb      	ldr	r3, [r7, #28]
 8012b2e:	089b      	lsrs	r3, r3, #2
 8012b30:	3302      	adds	r3, #2
 8012b32:	69ba      	ldr	r2, [r7, #24]
 8012b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8012b38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8012b40:	693b      	ldr	r3, [r7, #16]
 8012b42:	43db      	mvns	r3, r3
 8012b44:	69ba      	ldr	r2, [r7, #24]
 8012b46:	4013      	ands	r3, r2
 8012b48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8012b4a:	683b      	ldr	r3, [r7, #0]
 8012b4c:	685b      	ldr	r3, [r3, #4]
 8012b4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d003      	beq.n	8012b5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8012b56:	69ba      	ldr	r2, [r7, #24]
 8012b58:	693b      	ldr	r3, [r7, #16]
 8012b5a:	4313      	orrs	r3, r2
 8012b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8012b5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8012b62:	69bb      	ldr	r3, [r7, #24]
 8012b64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8012b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012b6a:	685b      	ldr	r3, [r3, #4]
 8012b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8012b6e:	693b      	ldr	r3, [r7, #16]
 8012b70:	43db      	mvns	r3, r3
 8012b72:	69ba      	ldr	r2, [r7, #24]
 8012b74:	4013      	ands	r3, r2
 8012b76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	685b      	ldr	r3, [r3, #4]
 8012b7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d003      	beq.n	8012b8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8012b84:	69ba      	ldr	r2, [r7, #24]
 8012b86:	693b      	ldr	r3, [r7, #16]
 8012b88:	4313      	orrs	r3, r2
 8012b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8012b8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8012b90:	69bb      	ldr	r3, [r7, #24]
 8012b92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8012b94:	697b      	ldr	r3, [r7, #20]
 8012b96:	685b      	ldr	r3, [r3, #4]
 8012b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8012b9a:	693b      	ldr	r3, [r7, #16]
 8012b9c:	43db      	mvns	r3, r3
 8012b9e:	69ba      	ldr	r2, [r7, #24]
 8012ba0:	4013      	ands	r3, r2
 8012ba2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8012ba4:	683b      	ldr	r3, [r7, #0]
 8012ba6:	685b      	ldr	r3, [r3, #4]
 8012ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d003      	beq.n	8012bb8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8012bb0:	69ba      	ldr	r2, [r7, #24]
 8012bb2:	693b      	ldr	r3, [r7, #16]
 8012bb4:	4313      	orrs	r3, r2
 8012bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8012bb8:	697b      	ldr	r3, [r7, #20]
 8012bba:	69ba      	ldr	r2, [r7, #24]
 8012bbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8012bc4:	693b      	ldr	r3, [r7, #16]
 8012bc6:	43db      	mvns	r3, r3
 8012bc8:	69ba      	ldr	r2, [r7, #24]
 8012bca:	4013      	ands	r3, r2
 8012bcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8012bce:	683b      	ldr	r3, [r7, #0]
 8012bd0:	685b      	ldr	r3, [r3, #4]
 8012bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d003      	beq.n	8012be2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8012bda:	69ba      	ldr	r2, [r7, #24]
 8012bdc:	693b      	ldr	r3, [r7, #16]
 8012bde:	4313      	orrs	r3, r2
 8012be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	69ba      	ldr	r2, [r7, #24]
 8012be6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8012be8:	69fb      	ldr	r3, [r7, #28]
 8012bea:	3301      	adds	r3, #1
 8012bec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8012bee:	683b      	ldr	r3, [r7, #0]
 8012bf0:	681a      	ldr	r2, [r3, #0]
 8012bf2:	69fb      	ldr	r3, [r7, #28]
 8012bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	f47f ae63 	bne.w	80128c4 <HAL_GPIO_Init+0x14>
  }
}
 8012bfe:	bf00      	nop
 8012c00:	bf00      	nop
 8012c02:	3724      	adds	r7, #36	@ 0x24
 8012c04:	46bd      	mov	sp, r7
 8012c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0a:	4770      	bx	lr
 8012c0c:	58000400 	.word	0x58000400

08012c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012c10:	b480      	push	{r7}
 8012c12:	b083      	sub	sp, #12
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
 8012c18:	460b      	mov	r3, r1
 8012c1a:	807b      	strh	r3, [r7, #2]
 8012c1c:	4613      	mov	r3, r2
 8012c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8012c20:	787b      	ldrb	r3, [r7, #1]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d003      	beq.n	8012c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012c26:	887a      	ldrh	r2, [r7, #2]
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8012c2c:	e003      	b.n	8012c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8012c2e:	887b      	ldrh	r3, [r7, #2]
 8012c30:	041a      	lsls	r2, r3, #16
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	619a      	str	r2, [r3, #24]
}
 8012c36:	bf00      	nop
 8012c38:	370c      	adds	r7, #12
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c40:	4770      	bx	lr
	...

08012c44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b084      	sub	sp, #16
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8012c4c:	4b19      	ldr	r3, [pc, #100]	@ (8012cb4 <HAL_PWREx_ConfigSupply+0x70>)
 8012c4e:	68db      	ldr	r3, [r3, #12]
 8012c50:	f003 0304 	and.w	r3, r3, #4
 8012c54:	2b04      	cmp	r3, #4
 8012c56:	d00a      	beq.n	8012c6e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8012c58:	4b16      	ldr	r3, [pc, #88]	@ (8012cb4 <HAL_PWREx_ConfigSupply+0x70>)
 8012c5a:	68db      	ldr	r3, [r3, #12]
 8012c5c:	f003 0307 	and.w	r3, r3, #7
 8012c60:	687a      	ldr	r2, [r7, #4]
 8012c62:	429a      	cmp	r2, r3
 8012c64:	d001      	beq.n	8012c6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8012c66:	2301      	movs	r3, #1
 8012c68:	e01f      	b.n	8012caa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	e01d      	b.n	8012caa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8012c6e:	4b11      	ldr	r3, [pc, #68]	@ (8012cb4 <HAL_PWREx_ConfigSupply+0x70>)
 8012c70:	68db      	ldr	r3, [r3, #12]
 8012c72:	f023 0207 	bic.w	r2, r3, #7
 8012c76:	490f      	ldr	r1, [pc, #60]	@ (8012cb4 <HAL_PWREx_ConfigSupply+0x70>)
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	4313      	orrs	r3, r2
 8012c7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8012c7e:	f7fd f8f9 	bl	800fe74 <HAL_GetTick>
 8012c82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8012c84:	e009      	b.n	8012c9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8012c86:	f7fd f8f5 	bl	800fe74 <HAL_GetTick>
 8012c8a:	4602      	mov	r2, r0
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	1ad3      	subs	r3, r2, r3
 8012c90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012c94:	d901      	bls.n	8012c9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8012c96:	2301      	movs	r3, #1
 8012c98:	e007      	b.n	8012caa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8012c9a:	4b06      	ldr	r3, [pc, #24]	@ (8012cb4 <HAL_PWREx_ConfigSupply+0x70>)
 8012c9c:	685b      	ldr	r3, [r3, #4]
 8012c9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012ca6:	d1ee      	bne.n	8012c86 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8012ca8:	2300      	movs	r3, #0
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	3710      	adds	r7, #16
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}
 8012cb2:	bf00      	nop
 8012cb4:	58024800 	.word	0x58024800

08012cb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b08c      	sub	sp, #48	@ 0x30
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d102      	bne.n	8012ccc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8012cc6:	2301      	movs	r3, #1
 8012cc8:	f000 bc48 	b.w	801355c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	f003 0301 	and.w	r3, r3, #1
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	f000 8088 	beq.w	8012dea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012cda:	4b99      	ldr	r3, [pc, #612]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012cdc:	691b      	ldr	r3, [r3, #16]
 8012cde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8012ce4:	4b96      	ldr	r3, [pc, #600]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8012cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cec:	2b10      	cmp	r3, #16
 8012cee:	d007      	beq.n	8012d00 <HAL_RCC_OscConfig+0x48>
 8012cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cf2:	2b18      	cmp	r3, #24
 8012cf4:	d111      	bne.n	8012d1a <HAL_RCC_OscConfig+0x62>
 8012cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cf8:	f003 0303 	and.w	r3, r3, #3
 8012cfc:	2b02      	cmp	r3, #2
 8012cfe:	d10c      	bne.n	8012d1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012d00:	4b8f      	ldr	r3, [pc, #572]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d06d      	beq.n	8012de8 <HAL_RCC_OscConfig+0x130>
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	685b      	ldr	r3, [r3, #4]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d169      	bne.n	8012de8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8012d14:	2301      	movs	r3, #1
 8012d16:	f000 bc21 	b.w	801355c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	685b      	ldr	r3, [r3, #4]
 8012d1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012d22:	d106      	bne.n	8012d32 <HAL_RCC_OscConfig+0x7a>
 8012d24:	4b86      	ldr	r3, [pc, #536]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	4a85      	ldr	r2, [pc, #532]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012d2e:	6013      	str	r3, [r2, #0]
 8012d30:	e02e      	b.n	8012d90 <HAL_RCC_OscConfig+0xd8>
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	685b      	ldr	r3, [r3, #4]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d10c      	bne.n	8012d54 <HAL_RCC_OscConfig+0x9c>
 8012d3a:	4b81      	ldr	r3, [pc, #516]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	4a80      	ldr	r2, [pc, #512]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012d40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012d44:	6013      	str	r3, [r2, #0]
 8012d46:	4b7e      	ldr	r3, [pc, #504]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	4a7d      	ldr	r2, [pc, #500]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012d4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8012d50:	6013      	str	r3, [r2, #0]
 8012d52:	e01d      	b.n	8012d90 <HAL_RCC_OscConfig+0xd8>
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	685b      	ldr	r3, [r3, #4]
 8012d58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012d5c:	d10c      	bne.n	8012d78 <HAL_RCC_OscConfig+0xc0>
 8012d5e:	4b78      	ldr	r3, [pc, #480]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	4a77      	ldr	r2, [pc, #476]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012d68:	6013      	str	r3, [r2, #0]
 8012d6a:	4b75      	ldr	r3, [pc, #468]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	4a74      	ldr	r2, [pc, #464]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012d74:	6013      	str	r3, [r2, #0]
 8012d76:	e00b      	b.n	8012d90 <HAL_RCC_OscConfig+0xd8>
 8012d78:	4b71      	ldr	r3, [pc, #452]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	4a70      	ldr	r2, [pc, #448]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012d82:	6013      	str	r3, [r2, #0]
 8012d84:	4b6e      	ldr	r3, [pc, #440]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	4a6d      	ldr	r2, [pc, #436]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8012d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	685b      	ldr	r3, [r3, #4]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d013      	beq.n	8012dc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012d98:	f7fd f86c 	bl	800fe74 <HAL_GetTick>
 8012d9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8012d9e:	e008      	b.n	8012db2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012da0:	f7fd f868 	bl	800fe74 <HAL_GetTick>
 8012da4:	4602      	mov	r2, r0
 8012da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012da8:	1ad3      	subs	r3, r2, r3
 8012daa:	2b64      	cmp	r3, #100	@ 0x64
 8012dac:	d901      	bls.n	8012db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012dae:	2303      	movs	r3, #3
 8012db0:	e3d4      	b.n	801355c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8012db2:	4b63      	ldr	r3, [pc, #396]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d0f0      	beq.n	8012da0 <HAL_RCC_OscConfig+0xe8>
 8012dbe:	e014      	b.n	8012dea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012dc0:	f7fd f858 	bl	800fe74 <HAL_GetTick>
 8012dc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8012dc6:	e008      	b.n	8012dda <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012dc8:	f7fd f854 	bl	800fe74 <HAL_GetTick>
 8012dcc:	4602      	mov	r2, r0
 8012dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dd0:	1ad3      	subs	r3, r2, r3
 8012dd2:	2b64      	cmp	r3, #100	@ 0x64
 8012dd4:	d901      	bls.n	8012dda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8012dd6:	2303      	movs	r3, #3
 8012dd8:	e3c0      	b.n	801355c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8012dda:	4b59      	ldr	r3, [pc, #356]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d1f0      	bne.n	8012dc8 <HAL_RCC_OscConfig+0x110>
 8012de6:	e000      	b.n	8012dea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	f003 0302 	and.w	r3, r3, #2
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	f000 80ca 	beq.w	8012f8c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012df8:	4b51      	ldr	r3, [pc, #324]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012dfa:	691b      	ldr	r3, [r3, #16]
 8012dfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012e00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8012e02:	4b4f      	ldr	r3, [pc, #316]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e06:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8012e08:	6a3b      	ldr	r3, [r7, #32]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d007      	beq.n	8012e1e <HAL_RCC_OscConfig+0x166>
 8012e0e:	6a3b      	ldr	r3, [r7, #32]
 8012e10:	2b18      	cmp	r3, #24
 8012e12:	d156      	bne.n	8012ec2 <HAL_RCC_OscConfig+0x20a>
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	f003 0303 	and.w	r3, r3, #3
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d151      	bne.n	8012ec2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012e1e:	4b48      	ldr	r3, [pc, #288]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	f003 0304 	and.w	r3, r3, #4
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d005      	beq.n	8012e36 <HAL_RCC_OscConfig+0x17e>
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	68db      	ldr	r3, [r3, #12]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d101      	bne.n	8012e36 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8012e32:	2301      	movs	r3, #1
 8012e34:	e392      	b.n	801355c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8012e36:	4b42      	ldr	r3, [pc, #264]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	f023 0219 	bic.w	r2, r3, #25
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	68db      	ldr	r3, [r3, #12]
 8012e42:	493f      	ldr	r1, [pc, #252]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012e44:	4313      	orrs	r3, r2
 8012e46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012e48:	f7fd f814 	bl	800fe74 <HAL_GetTick>
 8012e4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012e4e:	e008      	b.n	8012e62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012e50:	f7fd f810 	bl	800fe74 <HAL_GetTick>
 8012e54:	4602      	mov	r2, r0
 8012e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e58:	1ad3      	subs	r3, r2, r3
 8012e5a:	2b02      	cmp	r3, #2
 8012e5c:	d901      	bls.n	8012e62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8012e5e:	2303      	movs	r3, #3
 8012e60:	e37c      	b.n	801355c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012e62:	4b37      	ldr	r3, [pc, #220]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	f003 0304 	and.w	r3, r3, #4
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d0f0      	beq.n	8012e50 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012e6e:	f7fd f831 	bl	800fed4 <HAL_GetREVID>
 8012e72:	4603      	mov	r3, r0
 8012e74:	f241 0203 	movw	r2, #4099	@ 0x1003
 8012e78:	4293      	cmp	r3, r2
 8012e7a:	d817      	bhi.n	8012eac <HAL_RCC_OscConfig+0x1f4>
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	691b      	ldr	r3, [r3, #16]
 8012e80:	2b40      	cmp	r3, #64	@ 0x40
 8012e82:	d108      	bne.n	8012e96 <HAL_RCC_OscConfig+0x1de>
 8012e84:	4b2e      	ldr	r3, [pc, #184]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012e86:	685b      	ldr	r3, [r3, #4]
 8012e88:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8012e8c:	4a2c      	ldr	r2, [pc, #176]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012e8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012e92:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012e94:	e07a      	b.n	8012f8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012e96:	4b2a      	ldr	r3, [pc, #168]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012e98:	685b      	ldr	r3, [r3, #4]
 8012e9a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	691b      	ldr	r3, [r3, #16]
 8012ea2:	031b      	lsls	r3, r3, #12
 8012ea4:	4926      	ldr	r1, [pc, #152]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012ea6:	4313      	orrs	r3, r2
 8012ea8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012eaa:	e06f      	b.n	8012f8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012eac:	4b24      	ldr	r3, [pc, #144]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012eae:	685b      	ldr	r3, [r3, #4]
 8012eb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	691b      	ldr	r3, [r3, #16]
 8012eb8:	061b      	lsls	r3, r3, #24
 8012eba:	4921      	ldr	r1, [pc, #132]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012ebc:	4313      	orrs	r3, r2
 8012ebe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012ec0:	e064      	b.n	8012f8c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	68db      	ldr	r3, [r3, #12]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d047      	beq.n	8012f5a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8012eca:	4b1d      	ldr	r3, [pc, #116]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	f023 0219 	bic.w	r2, r3, #25
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	68db      	ldr	r3, [r3, #12]
 8012ed6:	491a      	ldr	r1, [pc, #104]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012ed8:	4313      	orrs	r3, r2
 8012eda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012edc:	f7fc ffca 	bl	800fe74 <HAL_GetTick>
 8012ee0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012ee2:	e008      	b.n	8012ef6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012ee4:	f7fc ffc6 	bl	800fe74 <HAL_GetTick>
 8012ee8:	4602      	mov	r2, r0
 8012eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eec:	1ad3      	subs	r3, r2, r3
 8012eee:	2b02      	cmp	r3, #2
 8012ef0:	d901      	bls.n	8012ef6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8012ef2:	2303      	movs	r3, #3
 8012ef4:	e332      	b.n	801355c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012ef6:	4b12      	ldr	r3, [pc, #72]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	f003 0304 	and.w	r3, r3, #4
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d0f0      	beq.n	8012ee4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012f02:	f7fc ffe7 	bl	800fed4 <HAL_GetREVID>
 8012f06:	4603      	mov	r3, r0
 8012f08:	f241 0203 	movw	r2, #4099	@ 0x1003
 8012f0c:	4293      	cmp	r3, r2
 8012f0e:	d819      	bhi.n	8012f44 <HAL_RCC_OscConfig+0x28c>
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	691b      	ldr	r3, [r3, #16]
 8012f14:	2b40      	cmp	r3, #64	@ 0x40
 8012f16:	d108      	bne.n	8012f2a <HAL_RCC_OscConfig+0x272>
 8012f18:	4b09      	ldr	r3, [pc, #36]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012f1a:	685b      	ldr	r3, [r3, #4]
 8012f1c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8012f20:	4a07      	ldr	r2, [pc, #28]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012f26:	6053      	str	r3, [r2, #4]
 8012f28:	e030      	b.n	8012f8c <HAL_RCC_OscConfig+0x2d4>
 8012f2a:	4b05      	ldr	r3, [pc, #20]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012f2c:	685b      	ldr	r3, [r3, #4]
 8012f2e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	691b      	ldr	r3, [r3, #16]
 8012f36:	031b      	lsls	r3, r3, #12
 8012f38:	4901      	ldr	r1, [pc, #4]	@ (8012f40 <HAL_RCC_OscConfig+0x288>)
 8012f3a:	4313      	orrs	r3, r2
 8012f3c:	604b      	str	r3, [r1, #4]
 8012f3e:	e025      	b.n	8012f8c <HAL_RCC_OscConfig+0x2d4>
 8012f40:	58024400 	.word	0x58024400
 8012f44:	4b9a      	ldr	r3, [pc, #616]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8012f46:	685b      	ldr	r3, [r3, #4]
 8012f48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	691b      	ldr	r3, [r3, #16]
 8012f50:	061b      	lsls	r3, r3, #24
 8012f52:	4997      	ldr	r1, [pc, #604]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8012f54:	4313      	orrs	r3, r2
 8012f56:	604b      	str	r3, [r1, #4]
 8012f58:	e018      	b.n	8012f8c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012f5a:	4b95      	ldr	r3, [pc, #596]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	4a94      	ldr	r2, [pc, #592]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8012f60:	f023 0301 	bic.w	r3, r3, #1
 8012f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012f66:	f7fc ff85 	bl	800fe74 <HAL_GetTick>
 8012f6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8012f6c:	e008      	b.n	8012f80 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012f6e:	f7fc ff81 	bl	800fe74 <HAL_GetTick>
 8012f72:	4602      	mov	r2, r0
 8012f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f76:	1ad3      	subs	r3, r2, r3
 8012f78:	2b02      	cmp	r3, #2
 8012f7a:	d901      	bls.n	8012f80 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8012f7c:	2303      	movs	r3, #3
 8012f7e:	e2ed      	b.n	801355c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8012f80:	4b8b      	ldr	r3, [pc, #556]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	f003 0304 	and.w	r3, r3, #4
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d1f0      	bne.n	8012f6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	f003 0310 	and.w	r3, r3, #16
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	f000 80a9 	beq.w	80130ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012f9a:	4b85      	ldr	r3, [pc, #532]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8012f9c:	691b      	ldr	r3, [r3, #16]
 8012f9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012fa2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8012fa4:	4b82      	ldr	r3, [pc, #520]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8012fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012fa8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8012faa:	69bb      	ldr	r3, [r7, #24]
 8012fac:	2b08      	cmp	r3, #8
 8012fae:	d007      	beq.n	8012fc0 <HAL_RCC_OscConfig+0x308>
 8012fb0:	69bb      	ldr	r3, [r7, #24]
 8012fb2:	2b18      	cmp	r3, #24
 8012fb4:	d13a      	bne.n	801302c <HAL_RCC_OscConfig+0x374>
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	f003 0303 	and.w	r3, r3, #3
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	d135      	bne.n	801302c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8012fc0:	4b7b      	ldr	r3, [pc, #492]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d005      	beq.n	8012fd8 <HAL_RCC_OscConfig+0x320>
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	69db      	ldr	r3, [r3, #28]
 8012fd0:	2b80      	cmp	r3, #128	@ 0x80
 8012fd2:	d001      	beq.n	8012fd8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8012fd4:	2301      	movs	r3, #1
 8012fd6:	e2c1      	b.n	801355c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8012fd8:	f7fc ff7c 	bl	800fed4 <HAL_GetREVID>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	f241 0203 	movw	r2, #4099	@ 0x1003
 8012fe2:	4293      	cmp	r3, r2
 8012fe4:	d817      	bhi.n	8013016 <HAL_RCC_OscConfig+0x35e>
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	6a1b      	ldr	r3, [r3, #32]
 8012fea:	2b20      	cmp	r3, #32
 8012fec:	d108      	bne.n	8013000 <HAL_RCC_OscConfig+0x348>
 8012fee:	4b70      	ldr	r3, [pc, #448]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8012ff0:	685b      	ldr	r3, [r3, #4]
 8012ff2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8012ff6:	4a6e      	ldr	r2, [pc, #440]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8012ff8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012ffc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8012ffe:	e075      	b.n	80130ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8013000:	4b6b      	ldr	r3, [pc, #428]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8013002:	685b      	ldr	r3, [r3, #4]
 8013004:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	6a1b      	ldr	r3, [r3, #32]
 801300c:	069b      	lsls	r3, r3, #26
 801300e:	4968      	ldr	r1, [pc, #416]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8013010:	4313      	orrs	r3, r2
 8013012:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8013014:	e06a      	b.n	80130ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8013016:	4b66      	ldr	r3, [pc, #408]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8013018:	68db      	ldr	r3, [r3, #12]
 801301a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	6a1b      	ldr	r3, [r3, #32]
 8013022:	061b      	lsls	r3, r3, #24
 8013024:	4962      	ldr	r1, [pc, #392]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8013026:	4313      	orrs	r3, r2
 8013028:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801302a:	e05f      	b.n	80130ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	69db      	ldr	r3, [r3, #28]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d042      	beq.n	80130ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8013034:	4b5e      	ldr	r3, [pc, #376]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	4a5d      	ldr	r2, [pc, #372]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 801303a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801303e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013040:	f7fc ff18 	bl	800fe74 <HAL_GetTick>
 8013044:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8013046:	e008      	b.n	801305a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8013048:	f7fc ff14 	bl	800fe74 <HAL_GetTick>
 801304c:	4602      	mov	r2, r0
 801304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013050:	1ad3      	subs	r3, r2, r3
 8013052:	2b02      	cmp	r3, #2
 8013054:	d901      	bls.n	801305a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8013056:	2303      	movs	r3, #3
 8013058:	e280      	b.n	801355c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801305a:	4b55      	ldr	r3, [pc, #340]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013062:	2b00      	cmp	r3, #0
 8013064:	d0f0      	beq.n	8013048 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8013066:	f7fc ff35 	bl	800fed4 <HAL_GetREVID>
 801306a:	4603      	mov	r3, r0
 801306c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8013070:	4293      	cmp	r3, r2
 8013072:	d817      	bhi.n	80130a4 <HAL_RCC_OscConfig+0x3ec>
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	6a1b      	ldr	r3, [r3, #32]
 8013078:	2b20      	cmp	r3, #32
 801307a:	d108      	bne.n	801308e <HAL_RCC_OscConfig+0x3d6>
 801307c:	4b4c      	ldr	r3, [pc, #304]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 801307e:	685b      	ldr	r3, [r3, #4]
 8013080:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8013084:	4a4a      	ldr	r2, [pc, #296]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8013086:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801308a:	6053      	str	r3, [r2, #4]
 801308c:	e02e      	b.n	80130ec <HAL_RCC_OscConfig+0x434>
 801308e:	4b48      	ldr	r3, [pc, #288]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8013090:	685b      	ldr	r3, [r3, #4]
 8013092:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	6a1b      	ldr	r3, [r3, #32]
 801309a:	069b      	lsls	r3, r3, #26
 801309c:	4944      	ldr	r1, [pc, #272]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 801309e:	4313      	orrs	r3, r2
 80130a0:	604b      	str	r3, [r1, #4]
 80130a2:	e023      	b.n	80130ec <HAL_RCC_OscConfig+0x434>
 80130a4:	4b42      	ldr	r3, [pc, #264]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 80130a6:	68db      	ldr	r3, [r3, #12]
 80130a8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	6a1b      	ldr	r3, [r3, #32]
 80130b0:	061b      	lsls	r3, r3, #24
 80130b2:	493f      	ldr	r1, [pc, #252]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 80130b4:	4313      	orrs	r3, r2
 80130b6:	60cb      	str	r3, [r1, #12]
 80130b8:	e018      	b.n	80130ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80130ba:	4b3d      	ldr	r3, [pc, #244]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	4a3c      	ldr	r2, [pc, #240]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 80130c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80130c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80130c6:	f7fc fed5 	bl	800fe74 <HAL_GetTick>
 80130ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80130cc:	e008      	b.n	80130e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80130ce:	f7fc fed1 	bl	800fe74 <HAL_GetTick>
 80130d2:	4602      	mov	r2, r0
 80130d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130d6:	1ad3      	subs	r3, r2, r3
 80130d8:	2b02      	cmp	r3, #2
 80130da:	d901      	bls.n	80130e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80130dc:	2303      	movs	r3, #3
 80130de:	e23d      	b.n	801355c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80130e0:	4b33      	ldr	r3, [pc, #204]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d1f0      	bne.n	80130ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	f003 0308 	and.w	r3, r3, #8
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d036      	beq.n	8013166 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	695b      	ldr	r3, [r3, #20]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d019      	beq.n	8013134 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013100:	4b2b      	ldr	r3, [pc, #172]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8013102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013104:	4a2a      	ldr	r2, [pc, #168]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8013106:	f043 0301 	orr.w	r3, r3, #1
 801310a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801310c:	f7fc feb2 	bl	800fe74 <HAL_GetTick>
 8013110:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8013112:	e008      	b.n	8013126 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013114:	f7fc feae 	bl	800fe74 <HAL_GetTick>
 8013118:	4602      	mov	r2, r0
 801311a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801311c:	1ad3      	subs	r3, r2, r3
 801311e:	2b02      	cmp	r3, #2
 8013120:	d901      	bls.n	8013126 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8013122:	2303      	movs	r3, #3
 8013124:	e21a      	b.n	801355c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8013126:	4b22      	ldr	r3, [pc, #136]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8013128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801312a:	f003 0302 	and.w	r3, r3, #2
 801312e:	2b00      	cmp	r3, #0
 8013130:	d0f0      	beq.n	8013114 <HAL_RCC_OscConfig+0x45c>
 8013132:	e018      	b.n	8013166 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013134:	4b1e      	ldr	r3, [pc, #120]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8013136:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013138:	4a1d      	ldr	r2, [pc, #116]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 801313a:	f023 0301 	bic.w	r3, r3, #1
 801313e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013140:	f7fc fe98 	bl	800fe74 <HAL_GetTick>
 8013144:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8013146:	e008      	b.n	801315a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013148:	f7fc fe94 	bl	800fe74 <HAL_GetTick>
 801314c:	4602      	mov	r2, r0
 801314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013150:	1ad3      	subs	r3, r2, r3
 8013152:	2b02      	cmp	r3, #2
 8013154:	d901      	bls.n	801315a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8013156:	2303      	movs	r3, #3
 8013158:	e200      	b.n	801355c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801315a:	4b15      	ldr	r3, [pc, #84]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 801315c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801315e:	f003 0302 	and.w	r3, r3, #2
 8013162:	2b00      	cmp	r3, #0
 8013164:	d1f0      	bne.n	8013148 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	f003 0320 	and.w	r3, r3, #32
 801316e:	2b00      	cmp	r3, #0
 8013170:	d039      	beq.n	80131e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	699b      	ldr	r3, [r3, #24]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d01c      	beq.n	80131b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801317a:	4b0d      	ldr	r3, [pc, #52]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	4a0c      	ldr	r2, [pc, #48]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 8013180:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8013184:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8013186:	f7fc fe75 	bl	800fe74 <HAL_GetTick>
 801318a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801318c:	e008      	b.n	80131a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801318e:	f7fc fe71 	bl	800fe74 <HAL_GetTick>
 8013192:	4602      	mov	r2, r0
 8013194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013196:	1ad3      	subs	r3, r2, r3
 8013198:	2b02      	cmp	r3, #2
 801319a:	d901      	bls.n	80131a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801319c:	2303      	movs	r3, #3
 801319e:	e1dd      	b.n	801355c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80131a0:	4b03      	ldr	r3, [pc, #12]	@ (80131b0 <HAL_RCC_OscConfig+0x4f8>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d0f0      	beq.n	801318e <HAL_RCC_OscConfig+0x4d6>
 80131ac:	e01b      	b.n	80131e6 <HAL_RCC_OscConfig+0x52e>
 80131ae:	bf00      	nop
 80131b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80131b4:	4b9b      	ldr	r3, [pc, #620]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	4a9a      	ldr	r2, [pc, #616]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 80131ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80131be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80131c0:	f7fc fe58 	bl	800fe74 <HAL_GetTick>
 80131c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80131c6:	e008      	b.n	80131da <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80131c8:	f7fc fe54 	bl	800fe74 <HAL_GetTick>
 80131cc:	4602      	mov	r2, r0
 80131ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131d0:	1ad3      	subs	r3, r2, r3
 80131d2:	2b02      	cmp	r3, #2
 80131d4:	d901      	bls.n	80131da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80131d6:	2303      	movs	r3, #3
 80131d8:	e1c0      	b.n	801355c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80131da:	4b92      	ldr	r3, [pc, #584]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d1f0      	bne.n	80131c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	f003 0304 	and.w	r3, r3, #4
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	f000 8081 	beq.w	80132f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80131f4:	4b8c      	ldr	r3, [pc, #560]	@ (8013428 <HAL_RCC_OscConfig+0x770>)
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	4a8b      	ldr	r2, [pc, #556]	@ (8013428 <HAL_RCC_OscConfig+0x770>)
 80131fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80131fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8013200:	f7fc fe38 	bl	800fe74 <HAL_GetTick>
 8013204:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013206:	e008      	b.n	801321a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013208:	f7fc fe34 	bl	800fe74 <HAL_GetTick>
 801320c:	4602      	mov	r2, r0
 801320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013210:	1ad3      	subs	r3, r2, r3
 8013212:	2b64      	cmp	r3, #100	@ 0x64
 8013214:	d901      	bls.n	801321a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8013216:	2303      	movs	r3, #3
 8013218:	e1a0      	b.n	801355c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801321a:	4b83      	ldr	r3, [pc, #524]	@ (8013428 <HAL_RCC_OscConfig+0x770>)
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013222:	2b00      	cmp	r3, #0
 8013224:	d0f0      	beq.n	8013208 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	689b      	ldr	r3, [r3, #8]
 801322a:	2b01      	cmp	r3, #1
 801322c:	d106      	bne.n	801323c <HAL_RCC_OscConfig+0x584>
 801322e:	4b7d      	ldr	r3, [pc, #500]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 8013230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013232:	4a7c      	ldr	r2, [pc, #496]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 8013234:	f043 0301 	orr.w	r3, r3, #1
 8013238:	6713      	str	r3, [r2, #112]	@ 0x70
 801323a:	e02d      	b.n	8013298 <HAL_RCC_OscConfig+0x5e0>
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	689b      	ldr	r3, [r3, #8]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d10c      	bne.n	801325e <HAL_RCC_OscConfig+0x5a6>
 8013244:	4b77      	ldr	r3, [pc, #476]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 8013246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013248:	4a76      	ldr	r2, [pc, #472]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 801324a:	f023 0301 	bic.w	r3, r3, #1
 801324e:	6713      	str	r3, [r2, #112]	@ 0x70
 8013250:	4b74      	ldr	r3, [pc, #464]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 8013252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013254:	4a73      	ldr	r2, [pc, #460]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 8013256:	f023 0304 	bic.w	r3, r3, #4
 801325a:	6713      	str	r3, [r2, #112]	@ 0x70
 801325c:	e01c      	b.n	8013298 <HAL_RCC_OscConfig+0x5e0>
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	689b      	ldr	r3, [r3, #8]
 8013262:	2b05      	cmp	r3, #5
 8013264:	d10c      	bne.n	8013280 <HAL_RCC_OscConfig+0x5c8>
 8013266:	4b6f      	ldr	r3, [pc, #444]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 8013268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801326a:	4a6e      	ldr	r2, [pc, #440]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 801326c:	f043 0304 	orr.w	r3, r3, #4
 8013270:	6713      	str	r3, [r2, #112]	@ 0x70
 8013272:	4b6c      	ldr	r3, [pc, #432]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 8013274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013276:	4a6b      	ldr	r2, [pc, #428]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 8013278:	f043 0301 	orr.w	r3, r3, #1
 801327c:	6713      	str	r3, [r2, #112]	@ 0x70
 801327e:	e00b      	b.n	8013298 <HAL_RCC_OscConfig+0x5e0>
 8013280:	4b68      	ldr	r3, [pc, #416]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 8013282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013284:	4a67      	ldr	r2, [pc, #412]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 8013286:	f023 0301 	bic.w	r3, r3, #1
 801328a:	6713      	str	r3, [r2, #112]	@ 0x70
 801328c:	4b65      	ldr	r3, [pc, #404]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 801328e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013290:	4a64      	ldr	r2, [pc, #400]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 8013292:	f023 0304 	bic.w	r3, r3, #4
 8013296:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	689b      	ldr	r3, [r3, #8]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d015      	beq.n	80132cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80132a0:	f7fc fde8 	bl	800fe74 <HAL_GetTick>
 80132a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80132a6:	e00a      	b.n	80132be <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80132a8:	f7fc fde4 	bl	800fe74 <HAL_GetTick>
 80132ac:	4602      	mov	r2, r0
 80132ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132b0:	1ad3      	subs	r3, r2, r3
 80132b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80132b6:	4293      	cmp	r3, r2
 80132b8:	d901      	bls.n	80132be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80132ba:	2303      	movs	r3, #3
 80132bc:	e14e      	b.n	801355c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80132be:	4b59      	ldr	r3, [pc, #356]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 80132c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80132c2:	f003 0302 	and.w	r3, r3, #2
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d0ee      	beq.n	80132a8 <HAL_RCC_OscConfig+0x5f0>
 80132ca:	e014      	b.n	80132f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80132cc:	f7fc fdd2 	bl	800fe74 <HAL_GetTick>
 80132d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80132d2:	e00a      	b.n	80132ea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80132d4:	f7fc fdce 	bl	800fe74 <HAL_GetTick>
 80132d8:	4602      	mov	r2, r0
 80132da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132dc:	1ad3      	subs	r3, r2, r3
 80132de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80132e2:	4293      	cmp	r3, r2
 80132e4:	d901      	bls.n	80132ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80132e6:	2303      	movs	r3, #3
 80132e8:	e138      	b.n	801355c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80132ea:	4b4e      	ldr	r3, [pc, #312]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 80132ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80132ee:	f003 0302 	and.w	r3, r3, #2
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d1ee      	bne.n	80132d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	f000 812d 	beq.w	801355a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8013300:	4b48      	ldr	r3, [pc, #288]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 8013302:	691b      	ldr	r3, [r3, #16]
 8013304:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013308:	2b18      	cmp	r3, #24
 801330a:	f000 80bd 	beq.w	8013488 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013312:	2b02      	cmp	r3, #2
 8013314:	f040 809e 	bne.w	8013454 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013318:	4b42      	ldr	r3, [pc, #264]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	4a41      	ldr	r2, [pc, #260]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 801331e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013324:	f7fc fda6 	bl	800fe74 <HAL_GetTick>
 8013328:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801332a:	e008      	b.n	801333e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801332c:	f7fc fda2 	bl	800fe74 <HAL_GetTick>
 8013330:	4602      	mov	r2, r0
 8013332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013334:	1ad3      	subs	r3, r2, r3
 8013336:	2b02      	cmp	r3, #2
 8013338:	d901      	bls.n	801333e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801333a:	2303      	movs	r3, #3
 801333c:	e10e      	b.n	801355c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801333e:	4b39      	ldr	r3, [pc, #228]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013346:	2b00      	cmp	r3, #0
 8013348:	d1f0      	bne.n	801332c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801334a:	4b36      	ldr	r3, [pc, #216]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 801334c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801334e:	4b37      	ldr	r3, [pc, #220]	@ (801342c <HAL_RCC_OscConfig+0x774>)
 8013350:	4013      	ands	r3, r2
 8013352:	687a      	ldr	r2, [r7, #4]
 8013354:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8013356:	687a      	ldr	r2, [r7, #4]
 8013358:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801335a:	0112      	lsls	r2, r2, #4
 801335c:	430a      	orrs	r2, r1
 801335e:	4931      	ldr	r1, [pc, #196]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 8013360:	4313      	orrs	r3, r2
 8013362:	628b      	str	r3, [r1, #40]	@ 0x28
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013368:	3b01      	subs	r3, #1
 801336a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013372:	3b01      	subs	r3, #1
 8013374:	025b      	lsls	r3, r3, #9
 8013376:	b29b      	uxth	r3, r3
 8013378:	431a      	orrs	r2, r3
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801337e:	3b01      	subs	r3, #1
 8013380:	041b      	lsls	r3, r3, #16
 8013382:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8013386:	431a      	orrs	r2, r3
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801338c:	3b01      	subs	r3, #1
 801338e:	061b      	lsls	r3, r3, #24
 8013390:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8013394:	4923      	ldr	r1, [pc, #140]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 8013396:	4313      	orrs	r3, r2
 8013398:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801339a:	4b22      	ldr	r3, [pc, #136]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 801339c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801339e:	4a21      	ldr	r2, [pc, #132]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 80133a0:	f023 0301 	bic.w	r3, r3, #1
 80133a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80133a6:	4b1f      	ldr	r3, [pc, #124]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 80133a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80133aa:	4b21      	ldr	r3, [pc, #132]	@ (8013430 <HAL_RCC_OscConfig+0x778>)
 80133ac:	4013      	ands	r3, r2
 80133ae:	687a      	ldr	r2, [r7, #4]
 80133b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80133b2:	00d2      	lsls	r2, r2, #3
 80133b4:	491b      	ldr	r1, [pc, #108]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 80133b6:	4313      	orrs	r3, r2
 80133b8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80133ba:	4b1a      	ldr	r3, [pc, #104]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 80133bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133be:	f023 020c 	bic.w	r2, r3, #12
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80133c6:	4917      	ldr	r1, [pc, #92]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 80133c8:	4313      	orrs	r3, r2
 80133ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80133cc:	4b15      	ldr	r3, [pc, #84]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 80133ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133d0:	f023 0202 	bic.w	r2, r3, #2
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80133d8:	4912      	ldr	r1, [pc, #72]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 80133da:	4313      	orrs	r3, r2
 80133dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80133de:	4b11      	ldr	r3, [pc, #68]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 80133e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133e2:	4a10      	ldr	r2, [pc, #64]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 80133e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80133e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80133ea:	4b0e      	ldr	r3, [pc, #56]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 80133ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133ee:	4a0d      	ldr	r2, [pc, #52]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 80133f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80133f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80133f6:	4b0b      	ldr	r3, [pc, #44]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 80133f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133fa:	4a0a      	ldr	r2, [pc, #40]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 80133fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8013400:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8013402:	4b08      	ldr	r3, [pc, #32]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 8013404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013406:	4a07      	ldr	r2, [pc, #28]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 8013408:	f043 0301 	orr.w	r3, r3, #1
 801340c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801340e:	4b05      	ldr	r3, [pc, #20]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	4a04      	ldr	r2, [pc, #16]	@ (8013424 <HAL_RCC_OscConfig+0x76c>)
 8013414:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8013418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801341a:	f7fc fd2b 	bl	800fe74 <HAL_GetTick>
 801341e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8013420:	e011      	b.n	8013446 <HAL_RCC_OscConfig+0x78e>
 8013422:	bf00      	nop
 8013424:	58024400 	.word	0x58024400
 8013428:	58024800 	.word	0x58024800
 801342c:	fffffc0c 	.word	0xfffffc0c
 8013430:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013434:	f7fc fd1e 	bl	800fe74 <HAL_GetTick>
 8013438:	4602      	mov	r2, r0
 801343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801343c:	1ad3      	subs	r3, r2, r3
 801343e:	2b02      	cmp	r3, #2
 8013440:	d901      	bls.n	8013446 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8013442:	2303      	movs	r3, #3
 8013444:	e08a      	b.n	801355c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8013446:	4b47      	ldr	r3, [pc, #284]	@ (8013564 <HAL_RCC_OscConfig+0x8ac>)
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801344e:	2b00      	cmp	r3, #0
 8013450:	d0f0      	beq.n	8013434 <HAL_RCC_OscConfig+0x77c>
 8013452:	e082      	b.n	801355a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013454:	4b43      	ldr	r3, [pc, #268]	@ (8013564 <HAL_RCC_OscConfig+0x8ac>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	4a42      	ldr	r2, [pc, #264]	@ (8013564 <HAL_RCC_OscConfig+0x8ac>)
 801345a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801345e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013460:	f7fc fd08 	bl	800fe74 <HAL_GetTick>
 8013464:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8013466:	e008      	b.n	801347a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013468:	f7fc fd04 	bl	800fe74 <HAL_GetTick>
 801346c:	4602      	mov	r2, r0
 801346e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013470:	1ad3      	subs	r3, r2, r3
 8013472:	2b02      	cmp	r3, #2
 8013474:	d901      	bls.n	801347a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8013476:	2303      	movs	r3, #3
 8013478:	e070      	b.n	801355c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801347a:	4b3a      	ldr	r3, [pc, #232]	@ (8013564 <HAL_RCC_OscConfig+0x8ac>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013482:	2b00      	cmp	r3, #0
 8013484:	d1f0      	bne.n	8013468 <HAL_RCC_OscConfig+0x7b0>
 8013486:	e068      	b.n	801355a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8013488:	4b36      	ldr	r3, [pc, #216]	@ (8013564 <HAL_RCC_OscConfig+0x8ac>)
 801348a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801348c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801348e:	4b35      	ldr	r3, [pc, #212]	@ (8013564 <HAL_RCC_OscConfig+0x8ac>)
 8013490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013492:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013498:	2b01      	cmp	r3, #1
 801349a:	d031      	beq.n	8013500 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801349c:	693b      	ldr	r3, [r7, #16]
 801349e:	f003 0203 	and.w	r2, r3, #3
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80134a6:	429a      	cmp	r2, r3
 80134a8:	d12a      	bne.n	8013500 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80134aa:	693b      	ldr	r3, [r7, #16]
 80134ac:	091b      	lsrs	r3, r3, #4
 80134ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80134b6:	429a      	cmp	r2, r3
 80134b8:	d122      	bne.n	8013500 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80134c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80134c6:	429a      	cmp	r2, r3
 80134c8:	d11a      	bne.n	8013500 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	0a5b      	lsrs	r3, r3, #9
 80134ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80134d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80134d8:	429a      	cmp	r2, r3
 80134da:	d111      	bne.n	8013500 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	0c1b      	lsrs	r3, r3, #16
 80134e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80134ea:	429a      	cmp	r2, r3
 80134ec:	d108      	bne.n	8013500 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	0e1b      	lsrs	r3, r3, #24
 80134f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80134fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d001      	beq.n	8013504 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8013500:	2301      	movs	r3, #1
 8013502:	e02b      	b.n	801355c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8013504:	4b17      	ldr	r3, [pc, #92]	@ (8013564 <HAL_RCC_OscConfig+0x8ac>)
 8013506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013508:	08db      	lsrs	r3, r3, #3
 801350a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801350e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013514:	693a      	ldr	r2, [r7, #16]
 8013516:	429a      	cmp	r2, r3
 8013518:	d01f      	beq.n	801355a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801351a:	4b12      	ldr	r3, [pc, #72]	@ (8013564 <HAL_RCC_OscConfig+0x8ac>)
 801351c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801351e:	4a11      	ldr	r2, [pc, #68]	@ (8013564 <HAL_RCC_OscConfig+0x8ac>)
 8013520:	f023 0301 	bic.w	r3, r3, #1
 8013524:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8013526:	f7fc fca5 	bl	800fe74 <HAL_GetTick>
 801352a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801352c:	bf00      	nop
 801352e:	f7fc fca1 	bl	800fe74 <HAL_GetTick>
 8013532:	4602      	mov	r2, r0
 8013534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013536:	4293      	cmp	r3, r2
 8013538:	d0f9      	beq.n	801352e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801353a:	4b0a      	ldr	r3, [pc, #40]	@ (8013564 <HAL_RCC_OscConfig+0x8ac>)
 801353c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801353e:	4b0a      	ldr	r3, [pc, #40]	@ (8013568 <HAL_RCC_OscConfig+0x8b0>)
 8013540:	4013      	ands	r3, r2
 8013542:	687a      	ldr	r2, [r7, #4]
 8013544:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8013546:	00d2      	lsls	r2, r2, #3
 8013548:	4906      	ldr	r1, [pc, #24]	@ (8013564 <HAL_RCC_OscConfig+0x8ac>)
 801354a:	4313      	orrs	r3, r2
 801354c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801354e:	4b05      	ldr	r3, [pc, #20]	@ (8013564 <HAL_RCC_OscConfig+0x8ac>)
 8013550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013552:	4a04      	ldr	r2, [pc, #16]	@ (8013564 <HAL_RCC_OscConfig+0x8ac>)
 8013554:	f043 0301 	orr.w	r3, r3, #1
 8013558:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801355a:	2300      	movs	r3, #0
}
 801355c:	4618      	mov	r0, r3
 801355e:	3730      	adds	r7, #48	@ 0x30
 8013560:	46bd      	mov	sp, r7
 8013562:	bd80      	pop	{r7, pc}
 8013564:	58024400 	.word	0x58024400
 8013568:	ffff0007 	.word	0xffff0007

0801356c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b086      	sub	sp, #24
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
 8013574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d101      	bne.n	8013580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801357c:	2301      	movs	r3, #1
 801357e:	e19c      	b.n	80138ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8013580:	4b8a      	ldr	r3, [pc, #552]	@ (80137ac <HAL_RCC_ClockConfig+0x240>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	f003 030f 	and.w	r3, r3, #15
 8013588:	683a      	ldr	r2, [r7, #0]
 801358a:	429a      	cmp	r2, r3
 801358c:	d910      	bls.n	80135b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801358e:	4b87      	ldr	r3, [pc, #540]	@ (80137ac <HAL_RCC_ClockConfig+0x240>)
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	f023 020f 	bic.w	r2, r3, #15
 8013596:	4985      	ldr	r1, [pc, #532]	@ (80137ac <HAL_RCC_ClockConfig+0x240>)
 8013598:	683b      	ldr	r3, [r7, #0]
 801359a:	4313      	orrs	r3, r2
 801359c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801359e:	4b83      	ldr	r3, [pc, #524]	@ (80137ac <HAL_RCC_ClockConfig+0x240>)
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	f003 030f 	and.w	r3, r3, #15
 80135a6:	683a      	ldr	r2, [r7, #0]
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d001      	beq.n	80135b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80135ac:	2301      	movs	r3, #1
 80135ae:	e184      	b.n	80138ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	f003 0304 	and.w	r3, r3, #4
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d010      	beq.n	80135de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	691a      	ldr	r2, [r3, #16]
 80135c0:	4b7b      	ldr	r3, [pc, #492]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 80135c2:	699b      	ldr	r3, [r3, #24]
 80135c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80135c8:	429a      	cmp	r2, r3
 80135ca:	d908      	bls.n	80135de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80135cc:	4b78      	ldr	r3, [pc, #480]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 80135ce:	699b      	ldr	r3, [r3, #24]
 80135d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	691b      	ldr	r3, [r3, #16]
 80135d8:	4975      	ldr	r1, [pc, #468]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 80135da:	4313      	orrs	r3, r2
 80135dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	f003 0308 	and.w	r3, r3, #8
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d010      	beq.n	801360c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	695a      	ldr	r2, [r3, #20]
 80135ee:	4b70      	ldr	r3, [pc, #448]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 80135f0:	69db      	ldr	r3, [r3, #28]
 80135f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80135f6:	429a      	cmp	r2, r3
 80135f8:	d908      	bls.n	801360c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80135fa:	4b6d      	ldr	r3, [pc, #436]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 80135fc:	69db      	ldr	r3, [r3, #28]
 80135fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	695b      	ldr	r3, [r3, #20]
 8013606:	496a      	ldr	r1, [pc, #424]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 8013608:	4313      	orrs	r3, r2
 801360a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	f003 0310 	and.w	r3, r3, #16
 8013614:	2b00      	cmp	r3, #0
 8013616:	d010      	beq.n	801363a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	699a      	ldr	r2, [r3, #24]
 801361c:	4b64      	ldr	r3, [pc, #400]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 801361e:	69db      	ldr	r3, [r3, #28]
 8013620:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013624:	429a      	cmp	r2, r3
 8013626:	d908      	bls.n	801363a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8013628:	4b61      	ldr	r3, [pc, #388]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 801362a:	69db      	ldr	r3, [r3, #28]
 801362c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	699b      	ldr	r3, [r3, #24]
 8013634:	495e      	ldr	r1, [pc, #376]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 8013636:	4313      	orrs	r3, r2
 8013638:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	f003 0320 	and.w	r3, r3, #32
 8013642:	2b00      	cmp	r3, #0
 8013644:	d010      	beq.n	8013668 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	69da      	ldr	r2, [r3, #28]
 801364a:	4b59      	ldr	r3, [pc, #356]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 801364c:	6a1b      	ldr	r3, [r3, #32]
 801364e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8013652:	429a      	cmp	r2, r3
 8013654:	d908      	bls.n	8013668 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8013656:	4b56      	ldr	r3, [pc, #344]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 8013658:	6a1b      	ldr	r3, [r3, #32]
 801365a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	69db      	ldr	r3, [r3, #28]
 8013662:	4953      	ldr	r1, [pc, #332]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 8013664:	4313      	orrs	r3, r2
 8013666:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	f003 0302 	and.w	r3, r3, #2
 8013670:	2b00      	cmp	r3, #0
 8013672:	d010      	beq.n	8013696 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	68da      	ldr	r2, [r3, #12]
 8013678:	4b4d      	ldr	r3, [pc, #308]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 801367a:	699b      	ldr	r3, [r3, #24]
 801367c:	f003 030f 	and.w	r3, r3, #15
 8013680:	429a      	cmp	r2, r3
 8013682:	d908      	bls.n	8013696 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013684:	4b4a      	ldr	r3, [pc, #296]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 8013686:	699b      	ldr	r3, [r3, #24]
 8013688:	f023 020f 	bic.w	r2, r3, #15
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	68db      	ldr	r3, [r3, #12]
 8013690:	4947      	ldr	r1, [pc, #284]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 8013692:	4313      	orrs	r3, r2
 8013694:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	f003 0301 	and.w	r3, r3, #1
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d055      	beq.n	801374e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80136a2:	4b43      	ldr	r3, [pc, #268]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 80136a4:	699b      	ldr	r3, [r3, #24]
 80136a6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	689b      	ldr	r3, [r3, #8]
 80136ae:	4940      	ldr	r1, [pc, #256]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 80136b0:	4313      	orrs	r3, r2
 80136b2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	685b      	ldr	r3, [r3, #4]
 80136b8:	2b02      	cmp	r3, #2
 80136ba:	d107      	bne.n	80136cc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80136bc:	4b3c      	ldr	r3, [pc, #240]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d121      	bne.n	801370c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80136c8:	2301      	movs	r3, #1
 80136ca:	e0f6      	b.n	80138ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	685b      	ldr	r3, [r3, #4]
 80136d0:	2b03      	cmp	r3, #3
 80136d2:	d107      	bne.n	80136e4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80136d4:	4b36      	ldr	r3, [pc, #216]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d115      	bne.n	801370c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80136e0:	2301      	movs	r3, #1
 80136e2:	e0ea      	b.n	80138ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	685b      	ldr	r3, [r3, #4]
 80136e8:	2b01      	cmp	r3, #1
 80136ea:	d107      	bne.n	80136fc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80136ec:	4b30      	ldr	r3, [pc, #192]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d109      	bne.n	801370c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80136f8:	2301      	movs	r3, #1
 80136fa:	e0de      	b.n	80138ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80136fc:	4b2c      	ldr	r3, [pc, #176]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	f003 0304 	and.w	r3, r3, #4
 8013704:	2b00      	cmp	r3, #0
 8013706:	d101      	bne.n	801370c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8013708:	2301      	movs	r3, #1
 801370a:	e0d6      	b.n	80138ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801370c:	4b28      	ldr	r3, [pc, #160]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 801370e:	691b      	ldr	r3, [r3, #16]
 8013710:	f023 0207 	bic.w	r2, r3, #7
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	685b      	ldr	r3, [r3, #4]
 8013718:	4925      	ldr	r1, [pc, #148]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 801371a:	4313      	orrs	r3, r2
 801371c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801371e:	f7fc fba9 	bl	800fe74 <HAL_GetTick>
 8013722:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013724:	e00a      	b.n	801373c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013726:	f7fc fba5 	bl	800fe74 <HAL_GetTick>
 801372a:	4602      	mov	r2, r0
 801372c:	697b      	ldr	r3, [r7, #20]
 801372e:	1ad3      	subs	r3, r2, r3
 8013730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013734:	4293      	cmp	r3, r2
 8013736:	d901      	bls.n	801373c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8013738:	2303      	movs	r3, #3
 801373a:	e0be      	b.n	80138ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801373c:	4b1c      	ldr	r3, [pc, #112]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 801373e:	691b      	ldr	r3, [r3, #16]
 8013740:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	685b      	ldr	r3, [r3, #4]
 8013748:	00db      	lsls	r3, r3, #3
 801374a:	429a      	cmp	r2, r3
 801374c:	d1eb      	bne.n	8013726 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	f003 0302 	and.w	r3, r3, #2
 8013756:	2b00      	cmp	r3, #0
 8013758:	d010      	beq.n	801377c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	68da      	ldr	r2, [r3, #12]
 801375e:	4b14      	ldr	r3, [pc, #80]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 8013760:	699b      	ldr	r3, [r3, #24]
 8013762:	f003 030f 	and.w	r3, r3, #15
 8013766:	429a      	cmp	r2, r3
 8013768:	d208      	bcs.n	801377c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801376a:	4b11      	ldr	r3, [pc, #68]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 801376c:	699b      	ldr	r3, [r3, #24]
 801376e:	f023 020f 	bic.w	r2, r3, #15
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	68db      	ldr	r3, [r3, #12]
 8013776:	490e      	ldr	r1, [pc, #56]	@ (80137b0 <HAL_RCC_ClockConfig+0x244>)
 8013778:	4313      	orrs	r3, r2
 801377a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801377c:	4b0b      	ldr	r3, [pc, #44]	@ (80137ac <HAL_RCC_ClockConfig+0x240>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	f003 030f 	and.w	r3, r3, #15
 8013784:	683a      	ldr	r2, [r7, #0]
 8013786:	429a      	cmp	r2, r3
 8013788:	d214      	bcs.n	80137b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801378a:	4b08      	ldr	r3, [pc, #32]	@ (80137ac <HAL_RCC_ClockConfig+0x240>)
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	f023 020f 	bic.w	r2, r3, #15
 8013792:	4906      	ldr	r1, [pc, #24]	@ (80137ac <HAL_RCC_ClockConfig+0x240>)
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	4313      	orrs	r3, r2
 8013798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801379a:	4b04      	ldr	r3, [pc, #16]	@ (80137ac <HAL_RCC_ClockConfig+0x240>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	f003 030f 	and.w	r3, r3, #15
 80137a2:	683a      	ldr	r2, [r7, #0]
 80137a4:	429a      	cmp	r2, r3
 80137a6:	d005      	beq.n	80137b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80137a8:	2301      	movs	r3, #1
 80137aa:	e086      	b.n	80138ba <HAL_RCC_ClockConfig+0x34e>
 80137ac:	52002000 	.word	0x52002000
 80137b0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	f003 0304 	and.w	r3, r3, #4
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d010      	beq.n	80137e2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	691a      	ldr	r2, [r3, #16]
 80137c4:	4b3f      	ldr	r3, [pc, #252]	@ (80138c4 <HAL_RCC_ClockConfig+0x358>)
 80137c6:	699b      	ldr	r3, [r3, #24]
 80137c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80137cc:	429a      	cmp	r2, r3
 80137ce:	d208      	bcs.n	80137e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80137d0:	4b3c      	ldr	r3, [pc, #240]	@ (80138c4 <HAL_RCC_ClockConfig+0x358>)
 80137d2:	699b      	ldr	r3, [r3, #24]
 80137d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	691b      	ldr	r3, [r3, #16]
 80137dc:	4939      	ldr	r1, [pc, #228]	@ (80138c4 <HAL_RCC_ClockConfig+0x358>)
 80137de:	4313      	orrs	r3, r2
 80137e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	f003 0308 	and.w	r3, r3, #8
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d010      	beq.n	8013810 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	695a      	ldr	r2, [r3, #20]
 80137f2:	4b34      	ldr	r3, [pc, #208]	@ (80138c4 <HAL_RCC_ClockConfig+0x358>)
 80137f4:	69db      	ldr	r3, [r3, #28]
 80137f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80137fa:	429a      	cmp	r2, r3
 80137fc:	d208      	bcs.n	8013810 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80137fe:	4b31      	ldr	r3, [pc, #196]	@ (80138c4 <HAL_RCC_ClockConfig+0x358>)
 8013800:	69db      	ldr	r3, [r3, #28]
 8013802:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	695b      	ldr	r3, [r3, #20]
 801380a:	492e      	ldr	r1, [pc, #184]	@ (80138c4 <HAL_RCC_ClockConfig+0x358>)
 801380c:	4313      	orrs	r3, r2
 801380e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	f003 0310 	and.w	r3, r3, #16
 8013818:	2b00      	cmp	r3, #0
 801381a:	d010      	beq.n	801383e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	699a      	ldr	r2, [r3, #24]
 8013820:	4b28      	ldr	r3, [pc, #160]	@ (80138c4 <HAL_RCC_ClockConfig+0x358>)
 8013822:	69db      	ldr	r3, [r3, #28]
 8013824:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013828:	429a      	cmp	r2, r3
 801382a:	d208      	bcs.n	801383e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801382c:	4b25      	ldr	r3, [pc, #148]	@ (80138c4 <HAL_RCC_ClockConfig+0x358>)
 801382e:	69db      	ldr	r3, [r3, #28]
 8013830:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	699b      	ldr	r3, [r3, #24]
 8013838:	4922      	ldr	r1, [pc, #136]	@ (80138c4 <HAL_RCC_ClockConfig+0x358>)
 801383a:	4313      	orrs	r3, r2
 801383c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	f003 0320 	and.w	r3, r3, #32
 8013846:	2b00      	cmp	r3, #0
 8013848:	d010      	beq.n	801386c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	69da      	ldr	r2, [r3, #28]
 801384e:	4b1d      	ldr	r3, [pc, #116]	@ (80138c4 <HAL_RCC_ClockConfig+0x358>)
 8013850:	6a1b      	ldr	r3, [r3, #32]
 8013852:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8013856:	429a      	cmp	r2, r3
 8013858:	d208      	bcs.n	801386c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801385a:	4b1a      	ldr	r3, [pc, #104]	@ (80138c4 <HAL_RCC_ClockConfig+0x358>)
 801385c:	6a1b      	ldr	r3, [r3, #32]
 801385e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	69db      	ldr	r3, [r3, #28]
 8013866:	4917      	ldr	r1, [pc, #92]	@ (80138c4 <HAL_RCC_ClockConfig+0x358>)
 8013868:	4313      	orrs	r3, r2
 801386a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801386c:	f000 f834 	bl	80138d8 <HAL_RCC_GetSysClockFreq>
 8013870:	4602      	mov	r2, r0
 8013872:	4b14      	ldr	r3, [pc, #80]	@ (80138c4 <HAL_RCC_ClockConfig+0x358>)
 8013874:	699b      	ldr	r3, [r3, #24]
 8013876:	0a1b      	lsrs	r3, r3, #8
 8013878:	f003 030f 	and.w	r3, r3, #15
 801387c:	4912      	ldr	r1, [pc, #72]	@ (80138c8 <HAL_RCC_ClockConfig+0x35c>)
 801387e:	5ccb      	ldrb	r3, [r1, r3]
 8013880:	f003 031f 	and.w	r3, r3, #31
 8013884:	fa22 f303 	lsr.w	r3, r2, r3
 8013888:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801388a:	4b0e      	ldr	r3, [pc, #56]	@ (80138c4 <HAL_RCC_ClockConfig+0x358>)
 801388c:	699b      	ldr	r3, [r3, #24]
 801388e:	f003 030f 	and.w	r3, r3, #15
 8013892:	4a0d      	ldr	r2, [pc, #52]	@ (80138c8 <HAL_RCC_ClockConfig+0x35c>)
 8013894:	5cd3      	ldrb	r3, [r2, r3]
 8013896:	f003 031f 	and.w	r3, r3, #31
 801389a:	693a      	ldr	r2, [r7, #16]
 801389c:	fa22 f303 	lsr.w	r3, r2, r3
 80138a0:	4a0a      	ldr	r2, [pc, #40]	@ (80138cc <HAL_RCC_ClockConfig+0x360>)
 80138a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80138a4:	4a0a      	ldr	r2, [pc, #40]	@ (80138d0 <HAL_RCC_ClockConfig+0x364>)
 80138a6:	693b      	ldr	r3, [r7, #16]
 80138a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80138aa:	4b0a      	ldr	r3, [pc, #40]	@ (80138d4 <HAL_RCC_ClockConfig+0x368>)
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	4618      	mov	r0, r3
 80138b0:	f7fc fa96 	bl	800fde0 <HAL_InitTick>
 80138b4:	4603      	mov	r3, r0
 80138b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80138b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80138ba:	4618      	mov	r0, r3
 80138bc:	3718      	adds	r7, #24
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd80      	pop	{r7, pc}
 80138c2:	bf00      	nop
 80138c4:	58024400 	.word	0x58024400
 80138c8:	0801e9a4 	.word	0x0801e9a4
 80138cc:	24000020 	.word	0x24000020
 80138d0:	2400001c 	.word	0x2400001c
 80138d4:	24000024 	.word	0x24000024

080138d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80138d8:	b480      	push	{r7}
 80138da:	b089      	sub	sp, #36	@ 0x24
 80138dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80138de:	4bb3      	ldr	r3, [pc, #716]	@ (8013bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80138e0:	691b      	ldr	r3, [r3, #16]
 80138e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80138e6:	2b18      	cmp	r3, #24
 80138e8:	f200 8155 	bhi.w	8013b96 <HAL_RCC_GetSysClockFreq+0x2be>
 80138ec:	a201      	add	r2, pc, #4	@ (adr r2, 80138f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80138ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138f2:	bf00      	nop
 80138f4:	08013959 	.word	0x08013959
 80138f8:	08013b97 	.word	0x08013b97
 80138fc:	08013b97 	.word	0x08013b97
 8013900:	08013b97 	.word	0x08013b97
 8013904:	08013b97 	.word	0x08013b97
 8013908:	08013b97 	.word	0x08013b97
 801390c:	08013b97 	.word	0x08013b97
 8013910:	08013b97 	.word	0x08013b97
 8013914:	0801397f 	.word	0x0801397f
 8013918:	08013b97 	.word	0x08013b97
 801391c:	08013b97 	.word	0x08013b97
 8013920:	08013b97 	.word	0x08013b97
 8013924:	08013b97 	.word	0x08013b97
 8013928:	08013b97 	.word	0x08013b97
 801392c:	08013b97 	.word	0x08013b97
 8013930:	08013b97 	.word	0x08013b97
 8013934:	08013985 	.word	0x08013985
 8013938:	08013b97 	.word	0x08013b97
 801393c:	08013b97 	.word	0x08013b97
 8013940:	08013b97 	.word	0x08013b97
 8013944:	08013b97 	.word	0x08013b97
 8013948:	08013b97 	.word	0x08013b97
 801394c:	08013b97 	.word	0x08013b97
 8013950:	08013b97 	.word	0x08013b97
 8013954:	0801398b 	.word	0x0801398b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013958:	4b94      	ldr	r3, [pc, #592]	@ (8013bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	f003 0320 	and.w	r3, r3, #32
 8013960:	2b00      	cmp	r3, #0
 8013962:	d009      	beq.n	8013978 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013964:	4b91      	ldr	r3, [pc, #580]	@ (8013bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	08db      	lsrs	r3, r3, #3
 801396a:	f003 0303 	and.w	r3, r3, #3
 801396e:	4a90      	ldr	r2, [pc, #576]	@ (8013bb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8013970:	fa22 f303 	lsr.w	r3, r2, r3
 8013974:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8013976:	e111      	b.n	8013b9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8013978:	4b8d      	ldr	r3, [pc, #564]	@ (8013bb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801397a:	61bb      	str	r3, [r7, #24]
      break;
 801397c:	e10e      	b.n	8013b9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801397e:	4b8d      	ldr	r3, [pc, #564]	@ (8013bb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8013980:	61bb      	str	r3, [r7, #24]
      break;
 8013982:	e10b      	b.n	8013b9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8013984:	4b8c      	ldr	r3, [pc, #560]	@ (8013bb8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8013986:	61bb      	str	r3, [r7, #24]
      break;
 8013988:	e108      	b.n	8013b9c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801398a:	4b88      	ldr	r3, [pc, #544]	@ (8013bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 801398c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801398e:	f003 0303 	and.w	r3, r3, #3
 8013992:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8013994:	4b85      	ldr	r3, [pc, #532]	@ (8013bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013998:	091b      	lsrs	r3, r3, #4
 801399a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801399e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80139a0:	4b82      	ldr	r3, [pc, #520]	@ (8013bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80139a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139a4:	f003 0301 	and.w	r3, r3, #1
 80139a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80139aa:	4b80      	ldr	r3, [pc, #512]	@ (8013bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80139ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80139ae:	08db      	lsrs	r3, r3, #3
 80139b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80139b4:	68fa      	ldr	r2, [r7, #12]
 80139b6:	fb02 f303 	mul.w	r3, r2, r3
 80139ba:	ee07 3a90 	vmov	s15, r3
 80139be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80139c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80139c6:	693b      	ldr	r3, [r7, #16]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	f000 80e1 	beq.w	8013b90 <HAL_RCC_GetSysClockFreq+0x2b8>
 80139ce:	697b      	ldr	r3, [r7, #20]
 80139d0:	2b02      	cmp	r3, #2
 80139d2:	f000 8083 	beq.w	8013adc <HAL_RCC_GetSysClockFreq+0x204>
 80139d6:	697b      	ldr	r3, [r7, #20]
 80139d8:	2b02      	cmp	r3, #2
 80139da:	f200 80a1 	bhi.w	8013b20 <HAL_RCC_GetSysClockFreq+0x248>
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d003      	beq.n	80139ec <HAL_RCC_GetSysClockFreq+0x114>
 80139e4:	697b      	ldr	r3, [r7, #20]
 80139e6:	2b01      	cmp	r3, #1
 80139e8:	d056      	beq.n	8013a98 <HAL_RCC_GetSysClockFreq+0x1c0>
 80139ea:	e099      	b.n	8013b20 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80139ec:	4b6f      	ldr	r3, [pc, #444]	@ (8013bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	f003 0320 	and.w	r3, r3, #32
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d02d      	beq.n	8013a54 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80139f8:	4b6c      	ldr	r3, [pc, #432]	@ (8013bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	08db      	lsrs	r3, r3, #3
 80139fe:	f003 0303 	and.w	r3, r3, #3
 8013a02:	4a6b      	ldr	r2, [pc, #428]	@ (8013bb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8013a04:	fa22 f303 	lsr.w	r3, r2, r3
 8013a08:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	ee07 3a90 	vmov	s15, r3
 8013a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013a14:	693b      	ldr	r3, [r7, #16]
 8013a16:	ee07 3a90 	vmov	s15, r3
 8013a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013a22:	4b62      	ldr	r3, [pc, #392]	@ (8013bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a2a:	ee07 3a90 	vmov	s15, r3
 8013a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013a32:	ed97 6a02 	vldr	s12, [r7, #8]
 8013a36:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8013bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8013a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a4e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8013a52:	e087      	b.n	8013b64 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013a54:	693b      	ldr	r3, [r7, #16]
 8013a56:	ee07 3a90 	vmov	s15, r3
 8013a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a5e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8013bc0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8013a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013a66:	4b51      	ldr	r3, [pc, #324]	@ (8013bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a6e:	ee07 3a90 	vmov	s15, r3
 8013a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013a76:	ed97 6a02 	vldr	s12, [r7, #8]
 8013a7a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8013bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8013a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8013a96:	e065      	b.n	8013b64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013a98:	693b      	ldr	r3, [r7, #16]
 8013a9a:	ee07 3a90 	vmov	s15, r3
 8013a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013aa2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8013bc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8013aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013aaa:	4b40      	ldr	r3, [pc, #256]	@ (8013bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ab2:	ee07 3a90 	vmov	s15, r3
 8013ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8013abe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8013bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8013ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ad6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8013ada:	e043      	b.n	8013b64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013adc:	693b      	ldr	r3, [r7, #16]
 8013ade:	ee07 3a90 	vmov	s15, r3
 8013ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ae6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8013bc8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8013aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013aee:	4b2f      	ldr	r3, [pc, #188]	@ (8013bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013af6:	ee07 3a90 	vmov	s15, r3
 8013afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013afe:	ed97 6a02 	vldr	s12, [r7, #8]
 8013b02:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8013bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8013b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8013b1e:	e021      	b.n	8013b64 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013b20:	693b      	ldr	r3, [r7, #16]
 8013b22:	ee07 3a90 	vmov	s15, r3
 8013b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b2a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8013bc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8013b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013b32:	4b1e      	ldr	r3, [pc, #120]	@ (8013bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b3a:	ee07 3a90 	vmov	s15, r3
 8013b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b42:	ed97 6a02 	vldr	s12, [r7, #8]
 8013b46:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8013bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8013b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8013b62:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8013b64:	4b11      	ldr	r3, [pc, #68]	@ (8013bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b68:	0a5b      	lsrs	r3, r3, #9
 8013b6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013b6e:	3301      	adds	r3, #1
 8013b70:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8013b72:	683b      	ldr	r3, [r7, #0]
 8013b74:	ee07 3a90 	vmov	s15, r3
 8013b78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013b7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8013b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013b88:	ee17 3a90 	vmov	r3, s15
 8013b8c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8013b8e:	e005      	b.n	8013b9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8013b90:	2300      	movs	r3, #0
 8013b92:	61bb      	str	r3, [r7, #24]
      break;
 8013b94:	e002      	b.n	8013b9c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8013b96:	4b07      	ldr	r3, [pc, #28]	@ (8013bb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8013b98:	61bb      	str	r3, [r7, #24]
      break;
 8013b9a:	bf00      	nop
  }

  return sysclockfreq;
 8013b9c:	69bb      	ldr	r3, [r7, #24]
}
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	3724      	adds	r7, #36	@ 0x24
 8013ba2:	46bd      	mov	sp, r7
 8013ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba8:	4770      	bx	lr
 8013baa:	bf00      	nop
 8013bac:	58024400 	.word	0x58024400
 8013bb0:	03d09000 	.word	0x03d09000
 8013bb4:	003d0900 	.word	0x003d0900
 8013bb8:	017d7840 	.word	0x017d7840
 8013bbc:	46000000 	.word	0x46000000
 8013bc0:	4c742400 	.word	0x4c742400
 8013bc4:	4a742400 	.word	0x4a742400
 8013bc8:	4bbebc20 	.word	0x4bbebc20

08013bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b082      	sub	sp, #8
 8013bd0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8013bd2:	f7ff fe81 	bl	80138d8 <HAL_RCC_GetSysClockFreq>
 8013bd6:	4602      	mov	r2, r0
 8013bd8:	4b10      	ldr	r3, [pc, #64]	@ (8013c1c <HAL_RCC_GetHCLKFreq+0x50>)
 8013bda:	699b      	ldr	r3, [r3, #24]
 8013bdc:	0a1b      	lsrs	r3, r3, #8
 8013bde:	f003 030f 	and.w	r3, r3, #15
 8013be2:	490f      	ldr	r1, [pc, #60]	@ (8013c20 <HAL_RCC_GetHCLKFreq+0x54>)
 8013be4:	5ccb      	ldrb	r3, [r1, r3]
 8013be6:	f003 031f 	and.w	r3, r3, #31
 8013bea:	fa22 f303 	lsr.w	r3, r2, r3
 8013bee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8013bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8013c1c <HAL_RCC_GetHCLKFreq+0x50>)
 8013bf2:	699b      	ldr	r3, [r3, #24]
 8013bf4:	f003 030f 	and.w	r3, r3, #15
 8013bf8:	4a09      	ldr	r2, [pc, #36]	@ (8013c20 <HAL_RCC_GetHCLKFreq+0x54>)
 8013bfa:	5cd3      	ldrb	r3, [r2, r3]
 8013bfc:	f003 031f 	and.w	r3, r3, #31
 8013c00:	687a      	ldr	r2, [r7, #4]
 8013c02:	fa22 f303 	lsr.w	r3, r2, r3
 8013c06:	4a07      	ldr	r2, [pc, #28]	@ (8013c24 <HAL_RCC_GetHCLKFreq+0x58>)
 8013c08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8013c0a:	4a07      	ldr	r2, [pc, #28]	@ (8013c28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8013c10:	4b04      	ldr	r3, [pc, #16]	@ (8013c24 <HAL_RCC_GetHCLKFreq+0x58>)
 8013c12:	681b      	ldr	r3, [r3, #0]
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	3708      	adds	r7, #8
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}
 8013c1c:	58024400 	.word	0x58024400
 8013c20:	0801e9a4 	.word	0x0801e9a4
 8013c24:	24000020 	.word	0x24000020
 8013c28:	2400001c 	.word	0x2400001c

08013c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8013c30:	f7ff ffcc 	bl	8013bcc <HAL_RCC_GetHCLKFreq>
 8013c34:	4602      	mov	r2, r0
 8013c36:	4b06      	ldr	r3, [pc, #24]	@ (8013c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013c38:	69db      	ldr	r3, [r3, #28]
 8013c3a:	091b      	lsrs	r3, r3, #4
 8013c3c:	f003 0307 	and.w	r3, r3, #7
 8013c40:	4904      	ldr	r1, [pc, #16]	@ (8013c54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8013c42:	5ccb      	ldrb	r3, [r1, r3]
 8013c44:	f003 031f 	and.w	r3, r3, #31
 8013c48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	bd80      	pop	{r7, pc}
 8013c50:	58024400 	.word	0x58024400
 8013c54:	0801e9a4 	.word	0x0801e9a4

08013c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8013c5c:	f7ff ffb6 	bl	8013bcc <HAL_RCC_GetHCLKFreq>
 8013c60:	4602      	mov	r2, r0
 8013c62:	4b06      	ldr	r3, [pc, #24]	@ (8013c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8013c64:	69db      	ldr	r3, [r3, #28]
 8013c66:	0a1b      	lsrs	r3, r3, #8
 8013c68:	f003 0307 	and.w	r3, r3, #7
 8013c6c:	4904      	ldr	r1, [pc, #16]	@ (8013c80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8013c6e:	5ccb      	ldrb	r3, [r1, r3]
 8013c70:	f003 031f 	and.w	r3, r3, #31
 8013c74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8013c78:	4618      	mov	r0, r3
 8013c7a:	bd80      	pop	{r7, pc}
 8013c7c:	58024400 	.word	0x58024400
 8013c80:	0801e9a4 	.word	0x0801e9a4

08013c84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013c88:	b0ca      	sub	sp, #296	@ 0x128
 8013c8a:	af00      	add	r7, sp, #0
 8013c8c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8013c90:	2300      	movs	r3, #0
 8013c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8013c96:	2300      	movs	r3, #0
 8013c98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8013c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ca4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8013ca8:	2500      	movs	r5, #0
 8013caa:	ea54 0305 	orrs.w	r3, r4, r5
 8013cae:	d049      	beq.n	8013d44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8013cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013cb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013cb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8013cba:	d02f      	beq.n	8013d1c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8013cbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8013cc0:	d828      	bhi.n	8013d14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8013cc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013cc6:	d01a      	beq.n	8013cfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8013cc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013ccc:	d822      	bhi.n	8013d14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d003      	beq.n	8013cda <HAL_RCCEx_PeriphCLKConfig+0x56>
 8013cd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013cd6:	d007      	beq.n	8013ce8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8013cd8:	e01c      	b.n	8013d14 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013cda:	4bb8      	ldr	r3, [pc, #736]	@ (8013fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cde:	4ab7      	ldr	r2, [pc, #732]	@ (8013fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8013ce6:	e01a      	b.n	8013d1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013cec:	3308      	adds	r3, #8
 8013cee:	2102      	movs	r1, #2
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f002 fb61 	bl	80163b8 <RCCEx_PLL2_Config>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8013cfc:	e00f      	b.n	8013d1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8013cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013d02:	3328      	adds	r3, #40	@ 0x28
 8013d04:	2102      	movs	r1, #2
 8013d06:	4618      	mov	r0, r3
 8013d08:	f002 fc08 	bl	801651c <RCCEx_PLL3_Config>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8013d12:	e004      	b.n	8013d1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013d14:	2301      	movs	r3, #1
 8013d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8013d1a:	e000      	b.n	8013d1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8013d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d10a      	bne.n	8013d3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8013d26:	4ba5      	ldr	r3, [pc, #660]	@ (8013fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013d2a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8013d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013d32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013d34:	4aa1      	ldr	r2, [pc, #644]	@ (8013fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013d36:	430b      	orrs	r3, r1
 8013d38:	6513      	str	r3, [r2, #80]	@ 0x50
 8013d3a:	e003      	b.n	8013d44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013d40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8013d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d4c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8013d50:	f04f 0900 	mov.w	r9, #0
 8013d54:	ea58 0309 	orrs.w	r3, r8, r9
 8013d58:	d047      	beq.n	8013dea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8013d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013d60:	2b04      	cmp	r3, #4
 8013d62:	d82a      	bhi.n	8013dba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8013d64:	a201      	add	r2, pc, #4	@ (adr r2, 8013d6c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8013d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d6a:	bf00      	nop
 8013d6c:	08013d81 	.word	0x08013d81
 8013d70:	08013d8f 	.word	0x08013d8f
 8013d74:	08013da5 	.word	0x08013da5
 8013d78:	08013dc3 	.word	0x08013dc3
 8013d7c:	08013dc3 	.word	0x08013dc3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013d80:	4b8e      	ldr	r3, [pc, #568]	@ (8013fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d84:	4a8d      	ldr	r2, [pc, #564]	@ (8013fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013d86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013d8c:	e01a      	b.n	8013dc4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013d92:	3308      	adds	r3, #8
 8013d94:	2100      	movs	r1, #0
 8013d96:	4618      	mov	r0, r3
 8013d98:	f002 fb0e 	bl	80163b8 <RCCEx_PLL2_Config>
 8013d9c:	4603      	mov	r3, r0
 8013d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013da2:	e00f      	b.n	8013dc4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013da8:	3328      	adds	r3, #40	@ 0x28
 8013daa:	2100      	movs	r1, #0
 8013dac:	4618      	mov	r0, r3
 8013dae:	f002 fbb5 	bl	801651c <RCCEx_PLL3_Config>
 8013db2:	4603      	mov	r3, r0
 8013db4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013db8:	e004      	b.n	8013dc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013dba:	2301      	movs	r3, #1
 8013dbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8013dc0:	e000      	b.n	8013dc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8013dc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d10a      	bne.n	8013de2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8013dcc:	4b7b      	ldr	r3, [pc, #492]	@ (8013fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013dd0:	f023 0107 	bic.w	r1, r3, #7
 8013dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013dda:	4a78      	ldr	r2, [pc, #480]	@ (8013fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013ddc:	430b      	orrs	r3, r1
 8013dde:	6513      	str	r3, [r2, #80]	@ 0x50
 8013de0:	e003      	b.n	8013dea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013de6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8013dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8013df6:	f04f 0b00 	mov.w	fp, #0
 8013dfa:	ea5a 030b 	orrs.w	r3, sl, fp
 8013dfe:	d04c      	beq.n	8013e9a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8013e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013e0a:	d030      	beq.n	8013e6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8013e0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013e10:	d829      	bhi.n	8013e66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8013e12:	2bc0      	cmp	r3, #192	@ 0xc0
 8013e14:	d02d      	beq.n	8013e72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8013e16:	2bc0      	cmp	r3, #192	@ 0xc0
 8013e18:	d825      	bhi.n	8013e66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8013e1a:	2b80      	cmp	r3, #128	@ 0x80
 8013e1c:	d018      	beq.n	8013e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8013e1e:	2b80      	cmp	r3, #128	@ 0x80
 8013e20:	d821      	bhi.n	8013e66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d002      	beq.n	8013e2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8013e26:	2b40      	cmp	r3, #64	@ 0x40
 8013e28:	d007      	beq.n	8013e3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8013e2a:	e01c      	b.n	8013e66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013e2c:	4b63      	ldr	r3, [pc, #396]	@ (8013fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e30:	4a62      	ldr	r2, [pc, #392]	@ (8013fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013e32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013e36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8013e38:	e01c      	b.n	8013e74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013e3e:	3308      	adds	r3, #8
 8013e40:	2100      	movs	r1, #0
 8013e42:	4618      	mov	r0, r3
 8013e44:	f002 fab8 	bl	80163b8 <RCCEx_PLL2_Config>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8013e4e:	e011      	b.n	8013e74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013e54:	3328      	adds	r3, #40	@ 0x28
 8013e56:	2100      	movs	r1, #0
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f002 fb5f 	bl	801651c <RCCEx_PLL3_Config>
 8013e5e:	4603      	mov	r3, r0
 8013e60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8013e64:	e006      	b.n	8013e74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013e66:	2301      	movs	r3, #1
 8013e68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8013e6c:	e002      	b.n	8013e74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8013e6e:	bf00      	nop
 8013e70:	e000      	b.n	8013e74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8013e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013e74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d10a      	bne.n	8013e92 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8013e7c:	4b4f      	ldr	r3, [pc, #316]	@ (8013fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013e80:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8013e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013e8a:	4a4c      	ldr	r2, [pc, #304]	@ (8013fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013e8c:	430b      	orrs	r3, r1
 8013e8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8013e90:	e003      	b.n	8013e9a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013e96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8013e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ea2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8013ea6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8013eaa:	2300      	movs	r3, #0
 8013eac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8013eb0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8013eb4:	460b      	mov	r3, r1
 8013eb6:	4313      	orrs	r3, r2
 8013eb8:	d053      	beq.n	8013f62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8013eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013ebe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8013ec2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013ec6:	d035      	beq.n	8013f34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8013ec8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013ecc:	d82e      	bhi.n	8013f2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8013ece:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013ed2:	d031      	beq.n	8013f38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8013ed4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013ed8:	d828      	bhi.n	8013f2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8013eda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013ede:	d01a      	beq.n	8013f16 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8013ee0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013ee4:	d822      	bhi.n	8013f2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d003      	beq.n	8013ef2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8013eea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013eee:	d007      	beq.n	8013f00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8013ef0:	e01c      	b.n	8013f2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013ef2:	4b32      	ldr	r3, [pc, #200]	@ (8013fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ef6:	4a31      	ldr	r2, [pc, #196]	@ (8013fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013efc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013efe:	e01c      	b.n	8013f3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013f04:	3308      	adds	r3, #8
 8013f06:	2100      	movs	r1, #0
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f002 fa55 	bl	80163b8 <RCCEx_PLL2_Config>
 8013f0e:	4603      	mov	r3, r0
 8013f10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8013f14:	e011      	b.n	8013f3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013f1a:	3328      	adds	r3, #40	@ 0x28
 8013f1c:	2100      	movs	r1, #0
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f002 fafc 	bl	801651c <RCCEx_PLL3_Config>
 8013f24:	4603      	mov	r3, r0
 8013f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013f2a:	e006      	b.n	8013f3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8013f2c:	2301      	movs	r3, #1
 8013f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8013f32:	e002      	b.n	8013f3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8013f34:	bf00      	nop
 8013f36:	e000      	b.n	8013f3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8013f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d10b      	bne.n	8013f5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8013f42:	4b1e      	ldr	r3, [pc, #120]	@ (8013fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013f46:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8013f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013f4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8013f52:	4a1a      	ldr	r2, [pc, #104]	@ (8013fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8013f54:	430b      	orrs	r3, r1
 8013f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8013f58:	e003      	b.n	8013f62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013f5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8013f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f6a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8013f6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8013f72:	2300      	movs	r3, #0
 8013f74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8013f78:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8013f7c:	460b      	mov	r3, r1
 8013f7e:	4313      	orrs	r3, r2
 8013f80:	d056      	beq.n	8014030 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8013f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013f86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8013f8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8013f8e:	d038      	beq.n	8014002 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8013f90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8013f94:	d831      	bhi.n	8013ffa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8013f96:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8013f9a:	d034      	beq.n	8014006 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8013f9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8013fa0:	d82b      	bhi.n	8013ffa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8013fa2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013fa6:	d01d      	beq.n	8013fe4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8013fa8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013fac:	d825      	bhi.n	8013ffa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d006      	beq.n	8013fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8013fb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013fb6:	d00a      	beq.n	8013fce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8013fb8:	e01f      	b.n	8013ffa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8013fba:	bf00      	nop
 8013fbc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013fc0:	4ba2      	ldr	r3, [pc, #648]	@ (801424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8013fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fc4:	4aa1      	ldr	r2, [pc, #644]	@ (801424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8013fc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013fca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013fcc:	e01c      	b.n	8014008 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013fd2:	3308      	adds	r3, #8
 8013fd4:	2100      	movs	r1, #0
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f002 f9ee 	bl	80163b8 <RCCEx_PLL2_Config>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8013fe2:	e011      	b.n	8014008 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013fe8:	3328      	adds	r3, #40	@ 0x28
 8013fea:	2100      	movs	r1, #0
 8013fec:	4618      	mov	r0, r3
 8013fee:	f002 fa95 	bl	801651c <RCCEx_PLL3_Config>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013ff8:	e006      	b.n	8014008 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8013ffa:	2301      	movs	r3, #1
 8013ffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014000:	e002      	b.n	8014008 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8014002:	bf00      	nop
 8014004:	e000      	b.n	8014008 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8014006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801400c:	2b00      	cmp	r3, #0
 801400e:	d10b      	bne.n	8014028 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8014010:	4b8e      	ldr	r3, [pc, #568]	@ (801424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014014:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8014018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801401c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8014020:	4a8a      	ldr	r2, [pc, #552]	@ (801424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014022:	430b      	orrs	r3, r1
 8014024:	6593      	str	r3, [r2, #88]	@ 0x58
 8014026:	e003      	b.n	8014030 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801402c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8014030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014038:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801403c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8014040:	2300      	movs	r3, #0
 8014042:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8014046:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801404a:	460b      	mov	r3, r1
 801404c:	4313      	orrs	r3, r2
 801404e:	d03a      	beq.n	80140c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8014050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014056:	2b30      	cmp	r3, #48	@ 0x30
 8014058:	d01f      	beq.n	801409a <HAL_RCCEx_PeriphCLKConfig+0x416>
 801405a:	2b30      	cmp	r3, #48	@ 0x30
 801405c:	d819      	bhi.n	8014092 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801405e:	2b20      	cmp	r3, #32
 8014060:	d00c      	beq.n	801407c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8014062:	2b20      	cmp	r3, #32
 8014064:	d815      	bhi.n	8014092 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8014066:	2b00      	cmp	r3, #0
 8014068:	d019      	beq.n	801409e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801406a:	2b10      	cmp	r3, #16
 801406c:	d111      	bne.n	8014092 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801406e:	4b77      	ldr	r3, [pc, #476]	@ (801424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014072:	4a76      	ldr	r2, [pc, #472]	@ (801424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014078:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801407a:	e011      	b.n	80140a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801407c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014080:	3308      	adds	r3, #8
 8014082:	2102      	movs	r1, #2
 8014084:	4618      	mov	r0, r3
 8014086:	f002 f997 	bl	80163b8 <RCCEx_PLL2_Config>
 801408a:	4603      	mov	r3, r0
 801408c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8014090:	e006      	b.n	80140a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8014092:	2301      	movs	r3, #1
 8014094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014098:	e002      	b.n	80140a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801409a:	bf00      	nop
 801409c:	e000      	b.n	80140a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801409e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80140a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d10a      	bne.n	80140be <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80140a8:	4b68      	ldr	r3, [pc, #416]	@ (801424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80140aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80140ac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80140b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80140b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80140b6:	4a65      	ldr	r2, [pc, #404]	@ (801424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80140b8:	430b      	orrs	r3, r1
 80140ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80140bc:	e003      	b.n	80140c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80140be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80140c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80140c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80140ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80140d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80140d6:	2300      	movs	r3, #0
 80140d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80140dc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80140e0:	460b      	mov	r3, r1
 80140e2:	4313      	orrs	r3, r2
 80140e4:	d051      	beq.n	801418a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80140e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80140ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80140ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80140f0:	d035      	beq.n	801415e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80140f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80140f6:	d82e      	bhi.n	8014156 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80140f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80140fc:	d031      	beq.n	8014162 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80140fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8014102:	d828      	bhi.n	8014156 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8014104:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014108:	d01a      	beq.n	8014140 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801410a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801410e:	d822      	bhi.n	8014156 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8014110:	2b00      	cmp	r3, #0
 8014112:	d003      	beq.n	801411c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8014114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014118:	d007      	beq.n	801412a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801411a:	e01c      	b.n	8014156 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801411c:	4b4b      	ldr	r3, [pc, #300]	@ (801424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801411e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014120:	4a4a      	ldr	r2, [pc, #296]	@ (801424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014122:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014126:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8014128:	e01c      	b.n	8014164 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801412e:	3308      	adds	r3, #8
 8014130:	2100      	movs	r1, #0
 8014132:	4618      	mov	r0, r3
 8014134:	f002 f940 	bl	80163b8 <RCCEx_PLL2_Config>
 8014138:	4603      	mov	r3, r0
 801413a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801413e:	e011      	b.n	8014164 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8014140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014144:	3328      	adds	r3, #40	@ 0x28
 8014146:	2100      	movs	r1, #0
 8014148:	4618      	mov	r0, r3
 801414a:	f002 f9e7 	bl	801651c <RCCEx_PLL3_Config>
 801414e:	4603      	mov	r3, r0
 8014150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8014154:	e006      	b.n	8014164 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014156:	2301      	movs	r3, #1
 8014158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801415c:	e002      	b.n	8014164 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801415e:	bf00      	nop
 8014160:	e000      	b.n	8014164 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8014162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014164:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014168:	2b00      	cmp	r3, #0
 801416a:	d10a      	bne.n	8014182 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801416c:	4b37      	ldr	r3, [pc, #220]	@ (801424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801416e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014170:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8014174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801417a:	4a34      	ldr	r2, [pc, #208]	@ (801424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801417c:	430b      	orrs	r3, r1
 801417e:	6513      	str	r3, [r2, #80]	@ 0x50
 8014180:	e003      	b.n	801418a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014186:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014192:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8014196:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801419a:	2300      	movs	r3, #0
 801419c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80141a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80141a4:	460b      	mov	r3, r1
 80141a6:	4313      	orrs	r3, r2
 80141a8:	d056      	beq.n	8014258 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80141aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80141ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80141b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80141b4:	d033      	beq.n	801421e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80141b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80141ba:	d82c      	bhi.n	8014216 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80141bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80141c0:	d02f      	beq.n	8014222 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80141c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80141c6:	d826      	bhi.n	8014216 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80141c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80141cc:	d02b      	beq.n	8014226 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80141ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80141d2:	d820      	bhi.n	8014216 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80141d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80141d8:	d012      	beq.n	8014200 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80141da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80141de:	d81a      	bhi.n	8014216 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d022      	beq.n	801422a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80141e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80141e8:	d115      	bne.n	8014216 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80141ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80141ee:	3308      	adds	r3, #8
 80141f0:	2101      	movs	r1, #1
 80141f2:	4618      	mov	r0, r3
 80141f4:	f002 f8e0 	bl	80163b8 <RCCEx_PLL2_Config>
 80141f8:	4603      	mov	r3, r0
 80141fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80141fe:	e015      	b.n	801422c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8014200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014204:	3328      	adds	r3, #40	@ 0x28
 8014206:	2101      	movs	r1, #1
 8014208:	4618      	mov	r0, r3
 801420a:	f002 f987 	bl	801651c <RCCEx_PLL3_Config>
 801420e:	4603      	mov	r3, r0
 8014210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8014214:	e00a      	b.n	801422c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014216:	2301      	movs	r3, #1
 8014218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801421c:	e006      	b.n	801422c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801421e:	bf00      	nop
 8014220:	e004      	b.n	801422c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8014222:	bf00      	nop
 8014224:	e002      	b.n	801422c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8014226:	bf00      	nop
 8014228:	e000      	b.n	801422c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801422a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801422c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014230:	2b00      	cmp	r3, #0
 8014232:	d10d      	bne.n	8014250 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8014234:	4b05      	ldr	r3, [pc, #20]	@ (801424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014238:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801423c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014240:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014242:	4a02      	ldr	r2, [pc, #8]	@ (801424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8014244:	430b      	orrs	r3, r1
 8014246:	6513      	str	r3, [r2, #80]	@ 0x50
 8014248:	e006      	b.n	8014258 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801424a:	bf00      	nop
 801424c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014250:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014254:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8014258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014260:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8014264:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8014268:	2300      	movs	r3, #0
 801426a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801426e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8014272:	460b      	mov	r3, r1
 8014274:	4313      	orrs	r3, r2
 8014276:	d055      	beq.n	8014324 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8014278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801427c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8014280:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8014284:	d033      	beq.n	80142ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8014286:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801428a:	d82c      	bhi.n	80142e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801428c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014290:	d02f      	beq.n	80142f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8014292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014296:	d826      	bhi.n	80142e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8014298:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801429c:	d02b      	beq.n	80142f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801429e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80142a2:	d820      	bhi.n	80142e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80142a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80142a8:	d012      	beq.n	80142d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80142aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80142ae:	d81a      	bhi.n	80142e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d022      	beq.n	80142fa <HAL_RCCEx_PeriphCLKConfig+0x676>
 80142b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80142b8:	d115      	bne.n	80142e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80142ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80142be:	3308      	adds	r3, #8
 80142c0:	2101      	movs	r1, #1
 80142c2:	4618      	mov	r0, r3
 80142c4:	f002 f878 	bl	80163b8 <RCCEx_PLL2_Config>
 80142c8:	4603      	mov	r3, r0
 80142ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80142ce:	e015      	b.n	80142fc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80142d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80142d4:	3328      	adds	r3, #40	@ 0x28
 80142d6:	2101      	movs	r1, #1
 80142d8:	4618      	mov	r0, r3
 80142da:	f002 f91f 	bl	801651c <RCCEx_PLL3_Config>
 80142de:	4603      	mov	r3, r0
 80142e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80142e4:	e00a      	b.n	80142fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80142e6:	2301      	movs	r3, #1
 80142e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80142ec:	e006      	b.n	80142fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80142ee:	bf00      	nop
 80142f0:	e004      	b.n	80142fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80142f2:	bf00      	nop
 80142f4:	e002      	b.n	80142fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80142f6:	bf00      	nop
 80142f8:	e000      	b.n	80142fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80142fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80142fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014300:	2b00      	cmp	r3, #0
 8014302:	d10b      	bne.n	801431c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8014304:	4ba3      	ldr	r3, [pc, #652]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014308:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801430c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014310:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8014314:	4a9f      	ldr	r2, [pc, #636]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014316:	430b      	orrs	r3, r1
 8014318:	6593      	str	r3, [r2, #88]	@ 0x58
 801431a:	e003      	b.n	8014324 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801431c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014320:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8014324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801432c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8014330:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8014334:	2300      	movs	r3, #0
 8014336:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801433a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801433e:	460b      	mov	r3, r1
 8014340:	4313      	orrs	r3, r2
 8014342:	d037      	beq.n	80143b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8014344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801434a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801434e:	d00e      	beq.n	801436e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8014350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014354:	d816      	bhi.n	8014384 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8014356:	2b00      	cmp	r3, #0
 8014358:	d018      	beq.n	801438c <HAL_RCCEx_PeriphCLKConfig+0x708>
 801435a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801435e:	d111      	bne.n	8014384 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014360:	4b8c      	ldr	r3, [pc, #560]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014364:	4a8b      	ldr	r2, [pc, #556]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801436a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801436c:	e00f      	b.n	801438e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014372:	3308      	adds	r3, #8
 8014374:	2101      	movs	r1, #1
 8014376:	4618      	mov	r0, r3
 8014378:	f002 f81e 	bl	80163b8 <RCCEx_PLL2_Config>
 801437c:	4603      	mov	r3, r0
 801437e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8014382:	e004      	b.n	801438e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014384:	2301      	movs	r3, #1
 8014386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801438a:	e000      	b.n	801438e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801438c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801438e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014392:	2b00      	cmp	r3, #0
 8014394:	d10a      	bne.n	80143ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8014396:	4b7f      	ldr	r3, [pc, #508]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801439a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801439e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80143a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80143a4:	4a7b      	ldr	r2, [pc, #492]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80143a6:	430b      	orrs	r3, r1
 80143a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80143aa:	e003      	b.n	80143b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80143ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80143b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80143b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80143b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143bc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80143c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80143c4:	2300      	movs	r3, #0
 80143c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80143ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80143ce:	460b      	mov	r3, r1
 80143d0:	4313      	orrs	r3, r2
 80143d2:	d039      	beq.n	8014448 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80143d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80143d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80143da:	2b03      	cmp	r3, #3
 80143dc:	d81c      	bhi.n	8014418 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80143de:	a201      	add	r2, pc, #4	@ (adr r2, 80143e4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80143e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143e4:	08014421 	.word	0x08014421
 80143e8:	080143f5 	.word	0x080143f5
 80143ec:	08014403 	.word	0x08014403
 80143f0:	08014421 	.word	0x08014421
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80143f4:	4b67      	ldr	r3, [pc, #412]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80143f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143f8:	4a66      	ldr	r2, [pc, #408]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80143fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80143fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8014400:	e00f      	b.n	8014422 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8014402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014406:	3308      	adds	r3, #8
 8014408:	2102      	movs	r1, #2
 801440a:	4618      	mov	r0, r3
 801440c:	f001 ffd4 	bl	80163b8 <RCCEx_PLL2_Config>
 8014410:	4603      	mov	r3, r0
 8014412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8014416:	e004      	b.n	8014422 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8014418:	2301      	movs	r3, #1
 801441a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801441e:	e000      	b.n	8014422 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8014420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014426:	2b00      	cmp	r3, #0
 8014428:	d10a      	bne.n	8014440 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801442a:	4b5a      	ldr	r3, [pc, #360]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801442c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801442e:	f023 0103 	bic.w	r1, r3, #3
 8014432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014438:	4a56      	ldr	r2, [pc, #344]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801443a:	430b      	orrs	r3, r1
 801443c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801443e:	e003      	b.n	8014448 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014444:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8014448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014450:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8014454:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8014458:	2300      	movs	r3, #0
 801445a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801445e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8014462:	460b      	mov	r3, r1
 8014464:	4313      	orrs	r3, r2
 8014466:	f000 809f 	beq.w	80145a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801446a:	4b4b      	ldr	r3, [pc, #300]	@ (8014598 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	4a4a      	ldr	r2, [pc, #296]	@ (8014598 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8014470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014474:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8014476:	f7fb fcfd 	bl	800fe74 <HAL_GetTick>
 801447a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801447e:	e00b      	b.n	8014498 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014480:	f7fb fcf8 	bl	800fe74 <HAL_GetTick>
 8014484:	4602      	mov	r2, r0
 8014486:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801448a:	1ad3      	subs	r3, r2, r3
 801448c:	2b64      	cmp	r3, #100	@ 0x64
 801448e:	d903      	bls.n	8014498 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8014490:	2303      	movs	r3, #3
 8014492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014496:	e005      	b.n	80144a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014498:	4b3f      	ldr	r3, [pc, #252]	@ (8014598 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d0ed      	beq.n	8014480 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80144a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d179      	bne.n	80145a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80144ac:	4b39      	ldr	r3, [pc, #228]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80144ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80144b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80144b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80144b8:	4053      	eors	r3, r2
 80144ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d015      	beq.n	80144ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80144c2:	4b34      	ldr	r3, [pc, #208]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80144c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80144c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80144ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80144ce:	4b31      	ldr	r3, [pc, #196]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80144d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80144d2:	4a30      	ldr	r2, [pc, #192]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80144d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80144d8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80144da:	4b2e      	ldr	r3, [pc, #184]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80144dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80144de:	4a2d      	ldr	r2, [pc, #180]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80144e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80144e4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80144e6:	4a2b      	ldr	r2, [pc, #172]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80144e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80144ec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80144ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80144f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80144f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80144fa:	d118      	bne.n	801452e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80144fc:	f7fb fcba 	bl	800fe74 <HAL_GetTick>
 8014500:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014504:	e00d      	b.n	8014522 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014506:	f7fb fcb5 	bl	800fe74 <HAL_GetTick>
 801450a:	4602      	mov	r2, r0
 801450c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8014510:	1ad2      	subs	r2, r2, r3
 8014512:	f241 3388 	movw	r3, #5000	@ 0x1388
 8014516:	429a      	cmp	r2, r3
 8014518:	d903      	bls.n	8014522 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801451a:	2303      	movs	r3, #3
 801451c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8014520:	e005      	b.n	801452e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014522:	4b1c      	ldr	r3, [pc, #112]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014526:	f003 0302 	and.w	r3, r3, #2
 801452a:	2b00      	cmp	r3, #0
 801452c:	d0eb      	beq.n	8014506 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801452e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014532:	2b00      	cmp	r3, #0
 8014534:	d129      	bne.n	801458a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8014536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801453a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801453e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8014542:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014546:	d10e      	bne.n	8014566 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8014548:	4b12      	ldr	r3, [pc, #72]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801454a:	691b      	ldr	r3, [r3, #16]
 801454c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8014550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014554:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8014558:	091a      	lsrs	r2, r3, #4
 801455a:	4b10      	ldr	r3, [pc, #64]	@ (801459c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801455c:	4013      	ands	r3, r2
 801455e:	4a0d      	ldr	r2, [pc, #52]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014560:	430b      	orrs	r3, r1
 8014562:	6113      	str	r3, [r2, #16]
 8014564:	e005      	b.n	8014572 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8014566:	4b0b      	ldr	r3, [pc, #44]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014568:	691b      	ldr	r3, [r3, #16]
 801456a:	4a0a      	ldr	r2, [pc, #40]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801456c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8014570:	6113      	str	r3, [r2, #16]
 8014572:	4b08      	ldr	r3, [pc, #32]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014574:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8014576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801457a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801457e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014582:	4a04      	ldr	r2, [pc, #16]	@ (8014594 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8014584:	430b      	orrs	r3, r1
 8014586:	6713      	str	r3, [r2, #112]	@ 0x70
 8014588:	e00e      	b.n	80145a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801458a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801458e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8014592:	e009      	b.n	80145a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8014594:	58024400 	.word	0x58024400
 8014598:	58024800 	.word	0x58024800
 801459c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80145a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80145a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80145a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80145ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145b0:	f002 0301 	and.w	r3, r2, #1
 80145b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80145b8:	2300      	movs	r3, #0
 80145ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80145be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80145c2:	460b      	mov	r3, r1
 80145c4:	4313      	orrs	r3, r2
 80145c6:	f000 8089 	beq.w	80146dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80145ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80145ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80145d0:	2b28      	cmp	r3, #40	@ 0x28
 80145d2:	d86b      	bhi.n	80146ac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80145d4:	a201      	add	r2, pc, #4	@ (adr r2, 80145dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80145d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145da:	bf00      	nop
 80145dc:	080146b5 	.word	0x080146b5
 80145e0:	080146ad 	.word	0x080146ad
 80145e4:	080146ad 	.word	0x080146ad
 80145e8:	080146ad 	.word	0x080146ad
 80145ec:	080146ad 	.word	0x080146ad
 80145f0:	080146ad 	.word	0x080146ad
 80145f4:	080146ad 	.word	0x080146ad
 80145f8:	080146ad 	.word	0x080146ad
 80145fc:	08014681 	.word	0x08014681
 8014600:	080146ad 	.word	0x080146ad
 8014604:	080146ad 	.word	0x080146ad
 8014608:	080146ad 	.word	0x080146ad
 801460c:	080146ad 	.word	0x080146ad
 8014610:	080146ad 	.word	0x080146ad
 8014614:	080146ad 	.word	0x080146ad
 8014618:	080146ad 	.word	0x080146ad
 801461c:	08014697 	.word	0x08014697
 8014620:	080146ad 	.word	0x080146ad
 8014624:	080146ad 	.word	0x080146ad
 8014628:	080146ad 	.word	0x080146ad
 801462c:	080146ad 	.word	0x080146ad
 8014630:	080146ad 	.word	0x080146ad
 8014634:	080146ad 	.word	0x080146ad
 8014638:	080146ad 	.word	0x080146ad
 801463c:	080146b5 	.word	0x080146b5
 8014640:	080146ad 	.word	0x080146ad
 8014644:	080146ad 	.word	0x080146ad
 8014648:	080146ad 	.word	0x080146ad
 801464c:	080146ad 	.word	0x080146ad
 8014650:	080146ad 	.word	0x080146ad
 8014654:	080146ad 	.word	0x080146ad
 8014658:	080146ad 	.word	0x080146ad
 801465c:	080146b5 	.word	0x080146b5
 8014660:	080146ad 	.word	0x080146ad
 8014664:	080146ad 	.word	0x080146ad
 8014668:	080146ad 	.word	0x080146ad
 801466c:	080146ad 	.word	0x080146ad
 8014670:	080146ad 	.word	0x080146ad
 8014674:	080146ad 	.word	0x080146ad
 8014678:	080146ad 	.word	0x080146ad
 801467c:	080146b5 	.word	0x080146b5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014684:	3308      	adds	r3, #8
 8014686:	2101      	movs	r1, #1
 8014688:	4618      	mov	r0, r3
 801468a:	f001 fe95 	bl	80163b8 <RCCEx_PLL2_Config>
 801468e:	4603      	mov	r3, r0
 8014690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8014694:	e00f      	b.n	80146b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8014696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801469a:	3328      	adds	r3, #40	@ 0x28
 801469c:	2101      	movs	r1, #1
 801469e:	4618      	mov	r0, r3
 80146a0:	f001 ff3c 	bl	801651c <RCCEx_PLL3_Config>
 80146a4:	4603      	mov	r3, r0
 80146a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80146aa:	e004      	b.n	80146b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80146ac:	2301      	movs	r3, #1
 80146ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80146b2:	e000      	b.n	80146b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80146b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80146b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d10a      	bne.n	80146d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80146be:	4bbf      	ldr	r3, [pc, #764]	@ (80149bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80146c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80146c2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80146c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80146ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80146cc:	4abb      	ldr	r2, [pc, #748]	@ (80149bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80146ce:	430b      	orrs	r3, r1
 80146d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80146d2:	e003      	b.n	80146dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80146d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80146d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80146dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80146e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146e4:	f002 0302 	and.w	r3, r2, #2
 80146e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80146ec:	2300      	movs	r3, #0
 80146ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80146f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80146f6:	460b      	mov	r3, r1
 80146f8:	4313      	orrs	r3, r2
 80146fa:	d041      	beq.n	8014780 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80146fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014700:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014702:	2b05      	cmp	r3, #5
 8014704:	d824      	bhi.n	8014750 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8014706:	a201      	add	r2, pc, #4	@ (adr r2, 801470c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8014708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801470c:	08014759 	.word	0x08014759
 8014710:	08014725 	.word	0x08014725
 8014714:	0801473b 	.word	0x0801473b
 8014718:	08014759 	.word	0x08014759
 801471c:	08014759 	.word	0x08014759
 8014720:	08014759 	.word	0x08014759
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014728:	3308      	adds	r3, #8
 801472a:	2101      	movs	r1, #1
 801472c:	4618      	mov	r0, r3
 801472e:	f001 fe43 	bl	80163b8 <RCCEx_PLL2_Config>
 8014732:	4603      	mov	r3, r0
 8014734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8014738:	e00f      	b.n	801475a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801473a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801473e:	3328      	adds	r3, #40	@ 0x28
 8014740:	2101      	movs	r1, #1
 8014742:	4618      	mov	r0, r3
 8014744:	f001 feea 	bl	801651c <RCCEx_PLL3_Config>
 8014748:	4603      	mov	r3, r0
 801474a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801474e:	e004      	b.n	801475a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014750:	2301      	movs	r3, #1
 8014752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014756:	e000      	b.n	801475a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8014758:	bf00      	nop
    }

    if (ret == HAL_OK)
 801475a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801475e:	2b00      	cmp	r3, #0
 8014760:	d10a      	bne.n	8014778 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8014762:	4b96      	ldr	r3, [pc, #600]	@ (80149bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8014764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014766:	f023 0107 	bic.w	r1, r3, #7
 801476a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801476e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014770:	4a92      	ldr	r2, [pc, #584]	@ (80149bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8014772:	430b      	orrs	r3, r1
 8014774:	6553      	str	r3, [r2, #84]	@ 0x54
 8014776:	e003      	b.n	8014780 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801477c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8014780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014788:	f002 0304 	and.w	r3, r2, #4
 801478c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8014790:	2300      	movs	r3, #0
 8014792:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8014796:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801479a:	460b      	mov	r3, r1
 801479c:	4313      	orrs	r3, r2
 801479e:	d044      	beq.n	801482a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80147a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80147a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80147a8:	2b05      	cmp	r3, #5
 80147aa:	d825      	bhi.n	80147f8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80147ac:	a201      	add	r2, pc, #4	@ (adr r2, 80147b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80147ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147b2:	bf00      	nop
 80147b4:	08014801 	.word	0x08014801
 80147b8:	080147cd 	.word	0x080147cd
 80147bc:	080147e3 	.word	0x080147e3
 80147c0:	08014801 	.word	0x08014801
 80147c4:	08014801 	.word	0x08014801
 80147c8:	08014801 	.word	0x08014801
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80147cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80147d0:	3308      	adds	r3, #8
 80147d2:	2101      	movs	r1, #1
 80147d4:	4618      	mov	r0, r3
 80147d6:	f001 fdef 	bl	80163b8 <RCCEx_PLL2_Config>
 80147da:	4603      	mov	r3, r0
 80147dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80147e0:	e00f      	b.n	8014802 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80147e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80147e6:	3328      	adds	r3, #40	@ 0x28
 80147e8:	2101      	movs	r1, #1
 80147ea:	4618      	mov	r0, r3
 80147ec:	f001 fe96 	bl	801651c <RCCEx_PLL3_Config>
 80147f0:	4603      	mov	r3, r0
 80147f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80147f6:	e004      	b.n	8014802 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80147f8:	2301      	movs	r3, #1
 80147fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80147fe:	e000      	b.n	8014802 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8014800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014806:	2b00      	cmp	r3, #0
 8014808:	d10b      	bne.n	8014822 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801480a:	4b6c      	ldr	r3, [pc, #432]	@ (80149bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801480c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801480e:	f023 0107 	bic.w	r1, r3, #7
 8014812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801481a:	4a68      	ldr	r2, [pc, #416]	@ (80149bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801481c:	430b      	orrs	r3, r1
 801481e:	6593      	str	r3, [r2, #88]	@ 0x58
 8014820:	e003      	b.n	801482a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801482a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801482e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014832:	f002 0320 	and.w	r3, r2, #32
 8014836:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801483a:	2300      	movs	r3, #0
 801483c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8014840:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8014844:	460b      	mov	r3, r1
 8014846:	4313      	orrs	r3, r2
 8014848:	d055      	beq.n	80148f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014852:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8014856:	d033      	beq.n	80148c0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8014858:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801485c:	d82c      	bhi.n	80148b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801485e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014862:	d02f      	beq.n	80148c4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8014864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014868:	d826      	bhi.n	80148b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801486a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801486e:	d02b      	beq.n	80148c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8014870:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8014874:	d820      	bhi.n	80148b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8014876:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801487a:	d012      	beq.n	80148a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801487c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014880:	d81a      	bhi.n	80148b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8014882:	2b00      	cmp	r3, #0
 8014884:	d022      	beq.n	80148cc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8014886:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801488a:	d115      	bne.n	80148b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801488c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014890:	3308      	adds	r3, #8
 8014892:	2100      	movs	r1, #0
 8014894:	4618      	mov	r0, r3
 8014896:	f001 fd8f 	bl	80163b8 <RCCEx_PLL2_Config>
 801489a:	4603      	mov	r3, r0
 801489c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80148a0:	e015      	b.n	80148ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80148a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80148a6:	3328      	adds	r3, #40	@ 0x28
 80148a8:	2102      	movs	r1, #2
 80148aa:	4618      	mov	r0, r3
 80148ac:	f001 fe36 	bl	801651c <RCCEx_PLL3_Config>
 80148b0:	4603      	mov	r3, r0
 80148b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80148b6:	e00a      	b.n	80148ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80148b8:	2301      	movs	r3, #1
 80148ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80148be:	e006      	b.n	80148ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80148c0:	bf00      	nop
 80148c2:	e004      	b.n	80148ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80148c4:	bf00      	nop
 80148c6:	e002      	b.n	80148ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80148c8:	bf00      	nop
 80148ca:	e000      	b.n	80148ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80148cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80148ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d10b      	bne.n	80148ee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80148d6:	4b39      	ldr	r3, [pc, #228]	@ (80149bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80148d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80148da:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80148de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80148e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80148e6:	4a35      	ldr	r2, [pc, #212]	@ (80149bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80148e8:	430b      	orrs	r3, r1
 80148ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80148ec:	e003      	b.n	80148f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80148ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80148f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80148f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80148fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148fe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8014902:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8014906:	2300      	movs	r3, #0
 8014908:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801490c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8014910:	460b      	mov	r3, r1
 8014912:	4313      	orrs	r3, r2
 8014914:	d058      	beq.n	80149c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8014916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801491a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801491e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8014922:	d033      	beq.n	801498c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8014924:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8014928:	d82c      	bhi.n	8014984 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801492a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801492e:	d02f      	beq.n	8014990 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8014930:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014934:	d826      	bhi.n	8014984 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8014936:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801493a:	d02b      	beq.n	8014994 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801493c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014940:	d820      	bhi.n	8014984 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8014942:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014946:	d012      	beq.n	801496e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8014948:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801494c:	d81a      	bhi.n	8014984 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801494e:	2b00      	cmp	r3, #0
 8014950:	d022      	beq.n	8014998 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8014952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014956:	d115      	bne.n	8014984 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801495c:	3308      	adds	r3, #8
 801495e:	2100      	movs	r1, #0
 8014960:	4618      	mov	r0, r3
 8014962:	f001 fd29 	bl	80163b8 <RCCEx_PLL2_Config>
 8014966:	4603      	mov	r3, r0
 8014968:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801496c:	e015      	b.n	801499a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014972:	3328      	adds	r3, #40	@ 0x28
 8014974:	2102      	movs	r1, #2
 8014976:	4618      	mov	r0, r3
 8014978:	f001 fdd0 	bl	801651c <RCCEx_PLL3_Config>
 801497c:	4603      	mov	r3, r0
 801497e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8014982:	e00a      	b.n	801499a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014984:	2301      	movs	r3, #1
 8014986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801498a:	e006      	b.n	801499a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801498c:	bf00      	nop
 801498e:	e004      	b.n	801499a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8014990:	bf00      	nop
 8014992:	e002      	b.n	801499a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8014994:	bf00      	nop
 8014996:	e000      	b.n	801499a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8014998:	bf00      	nop
    }

    if (ret == HAL_OK)
 801499a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d10e      	bne.n	80149c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80149a2:	4b06      	ldr	r3, [pc, #24]	@ (80149bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80149a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80149a6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80149aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80149ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80149b2:	4a02      	ldr	r2, [pc, #8]	@ (80149bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80149b4:	430b      	orrs	r3, r1
 80149b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80149b8:	e006      	b.n	80149c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80149ba:	bf00      	nop
 80149bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80149c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80149c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80149c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80149cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149d0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80149d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80149d8:	2300      	movs	r3, #0
 80149da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80149de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80149e2:	460b      	mov	r3, r1
 80149e4:	4313      	orrs	r3, r2
 80149e6:	d055      	beq.n	8014a94 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80149e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80149ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80149f0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80149f4:	d033      	beq.n	8014a5e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80149f6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80149fa:	d82c      	bhi.n	8014a56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80149fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014a00:	d02f      	beq.n	8014a62 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8014a02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014a06:	d826      	bhi.n	8014a56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8014a08:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8014a0c:	d02b      	beq.n	8014a66 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8014a0e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8014a12:	d820      	bhi.n	8014a56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8014a14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014a18:	d012      	beq.n	8014a40 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8014a1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014a1e:	d81a      	bhi.n	8014a56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d022      	beq.n	8014a6a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8014a24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014a28:	d115      	bne.n	8014a56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014a2e:	3308      	adds	r3, #8
 8014a30:	2100      	movs	r1, #0
 8014a32:	4618      	mov	r0, r3
 8014a34:	f001 fcc0 	bl	80163b8 <RCCEx_PLL2_Config>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8014a3e:	e015      	b.n	8014a6c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8014a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014a44:	3328      	adds	r3, #40	@ 0x28
 8014a46:	2102      	movs	r1, #2
 8014a48:	4618      	mov	r0, r3
 8014a4a:	f001 fd67 	bl	801651c <RCCEx_PLL3_Config>
 8014a4e:	4603      	mov	r3, r0
 8014a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8014a54:	e00a      	b.n	8014a6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014a56:	2301      	movs	r3, #1
 8014a58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014a5c:	e006      	b.n	8014a6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8014a5e:	bf00      	nop
 8014a60:	e004      	b.n	8014a6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8014a62:	bf00      	nop
 8014a64:	e002      	b.n	8014a6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8014a66:	bf00      	nop
 8014a68:	e000      	b.n	8014a6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8014a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d10b      	bne.n	8014a8c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8014a74:	4ba1      	ldr	r3, [pc, #644]	@ (8014cfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014a78:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8014a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014a80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014a84:	4a9d      	ldr	r2, [pc, #628]	@ (8014cfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014a86:	430b      	orrs	r3, r1
 8014a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8014a8a:	e003      	b.n	8014a94 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014a8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014a90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8014a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a9c:	f002 0308 	and.w	r3, r2, #8
 8014aa0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014aaa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8014aae:	460b      	mov	r3, r1
 8014ab0:	4313      	orrs	r3, r2
 8014ab2:	d01e      	beq.n	8014af2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8014ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014abc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014ac0:	d10c      	bne.n	8014adc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8014ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014ac6:	3328      	adds	r3, #40	@ 0x28
 8014ac8:	2102      	movs	r1, #2
 8014aca:	4618      	mov	r0, r3
 8014acc:	f001 fd26 	bl	801651c <RCCEx_PLL3_Config>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d002      	beq.n	8014adc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8014ad6:	2301      	movs	r3, #1
 8014ad8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8014adc:	4b87      	ldr	r3, [pc, #540]	@ (8014cfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014ae0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8014ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014aec:	4a83      	ldr	r2, [pc, #524]	@ (8014cfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014aee:	430b      	orrs	r3, r1
 8014af0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8014af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014afa:	f002 0310 	and.w	r3, r2, #16
 8014afe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014b02:	2300      	movs	r3, #0
 8014b04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014b08:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8014b0c:	460b      	mov	r3, r1
 8014b0e:	4313      	orrs	r3, r2
 8014b10:	d01e      	beq.n	8014b50 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8014b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014b16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014b1e:	d10c      	bne.n	8014b3a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8014b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014b24:	3328      	adds	r3, #40	@ 0x28
 8014b26:	2102      	movs	r1, #2
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f001 fcf7 	bl	801651c <RCCEx_PLL3_Config>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d002      	beq.n	8014b3a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8014b34:	2301      	movs	r3, #1
 8014b36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8014b3a:	4b70      	ldr	r3, [pc, #448]	@ (8014cfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014b3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8014b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014b4a:	4a6c      	ldr	r2, [pc, #432]	@ (8014cfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014b4c:	430b      	orrs	r3, r1
 8014b4e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8014b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b58:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8014b5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8014b60:	2300      	movs	r3, #0
 8014b62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014b66:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8014b6a:	460b      	mov	r3, r1
 8014b6c:	4313      	orrs	r3, r2
 8014b6e:	d03e      	beq.n	8014bee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8014b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014b74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014b78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014b7c:	d022      	beq.n	8014bc4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8014b7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014b82:	d81b      	bhi.n	8014bbc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d003      	beq.n	8014b90 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8014b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014b8c:	d00b      	beq.n	8014ba6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8014b8e:	e015      	b.n	8014bbc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014b94:	3308      	adds	r3, #8
 8014b96:	2100      	movs	r1, #0
 8014b98:	4618      	mov	r0, r3
 8014b9a:	f001 fc0d 	bl	80163b8 <RCCEx_PLL2_Config>
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8014ba4:	e00f      	b.n	8014bc6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8014ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014baa:	3328      	adds	r3, #40	@ 0x28
 8014bac:	2102      	movs	r1, #2
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f001 fcb4 	bl	801651c <RCCEx_PLL3_Config>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8014bba:	e004      	b.n	8014bc6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014bbc:	2301      	movs	r3, #1
 8014bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014bc2:	e000      	b.n	8014bc6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8014bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d10b      	bne.n	8014be6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8014bce:	4b4b      	ldr	r3, [pc, #300]	@ (8014cfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014bd2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8014bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014bda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014bde:	4a47      	ldr	r2, [pc, #284]	@ (8014cfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014be0:	430b      	orrs	r3, r1
 8014be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8014be4:	e003      	b.n	8014bee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014bea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8014bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bf6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8014bfa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014c00:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8014c04:	460b      	mov	r3, r1
 8014c06:	4313      	orrs	r3, r2
 8014c08:	d03b      	beq.n	8014c82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8014c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014c12:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8014c16:	d01f      	beq.n	8014c58 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8014c18:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8014c1c:	d818      	bhi.n	8014c50 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8014c1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014c22:	d003      	beq.n	8014c2c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8014c24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014c28:	d007      	beq.n	8014c3a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8014c2a:	e011      	b.n	8014c50 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014c2c:	4b33      	ldr	r3, [pc, #204]	@ (8014cfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c30:	4a32      	ldr	r2, [pc, #200]	@ (8014cfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014c32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014c36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8014c38:	e00f      	b.n	8014c5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8014c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014c3e:	3328      	adds	r3, #40	@ 0x28
 8014c40:	2101      	movs	r1, #1
 8014c42:	4618      	mov	r0, r3
 8014c44:	f001 fc6a 	bl	801651c <RCCEx_PLL3_Config>
 8014c48:	4603      	mov	r3, r0
 8014c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8014c4e:	e004      	b.n	8014c5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014c50:	2301      	movs	r3, #1
 8014c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014c56:	e000      	b.n	8014c5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8014c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d10b      	bne.n	8014c7a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8014c62:	4b26      	ldr	r3, [pc, #152]	@ (8014cfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014c66:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8014c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014c72:	4a22      	ldr	r2, [pc, #136]	@ (8014cfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014c74:	430b      	orrs	r3, r1
 8014c76:	6553      	str	r3, [r2, #84]	@ 0x54
 8014c78:	e003      	b.n	8014c82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014c7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8014c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c8a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8014c8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8014c90:	2300      	movs	r3, #0
 8014c92:	677b      	str	r3, [r7, #116]	@ 0x74
 8014c94:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8014c98:	460b      	mov	r3, r1
 8014c9a:	4313      	orrs	r3, r2
 8014c9c:	d034      	beq.n	8014d08 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8014c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d003      	beq.n	8014cb0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8014ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014cac:	d007      	beq.n	8014cbe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8014cae:	e011      	b.n	8014cd4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014cb0:	4b12      	ldr	r3, [pc, #72]	@ (8014cfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cb4:	4a11      	ldr	r2, [pc, #68]	@ (8014cfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014cb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014cba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8014cbc:	e00e      	b.n	8014cdc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8014cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014cc2:	3308      	adds	r3, #8
 8014cc4:	2102      	movs	r1, #2
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	f001 fb76 	bl	80163b8 <RCCEx_PLL2_Config>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8014cd2:	e003      	b.n	8014cdc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8014cd4:	2301      	movs	r3, #1
 8014cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d10d      	bne.n	8014d00 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8014ce4:	4b05      	ldr	r3, [pc, #20]	@ (8014cfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014ce8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8014cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014cf2:	4a02      	ldr	r2, [pc, #8]	@ (8014cfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8014cf4:	430b      	orrs	r3, r1
 8014cf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8014cf8:	e006      	b.n	8014d08 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8014cfa:	bf00      	nop
 8014cfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014d00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014d04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8014d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d10:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8014d14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014d16:	2300      	movs	r3, #0
 8014d18:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014d1a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8014d1e:	460b      	mov	r3, r1
 8014d20:	4313      	orrs	r3, r2
 8014d22:	d00c      	beq.n	8014d3e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8014d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014d28:	3328      	adds	r3, #40	@ 0x28
 8014d2a:	2102      	movs	r1, #2
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	f001 fbf5 	bl	801651c <RCCEx_PLL3_Config>
 8014d32:	4603      	mov	r3, r0
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d002      	beq.n	8014d3e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8014d38:	2301      	movs	r3, #1
 8014d3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8014d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d46:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8014d4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8014d50:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8014d54:	460b      	mov	r3, r1
 8014d56:	4313      	orrs	r3, r2
 8014d58:	d038      	beq.n	8014dcc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8014d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014d62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014d66:	d018      	beq.n	8014d9a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8014d68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014d6c:	d811      	bhi.n	8014d92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8014d6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014d72:	d014      	beq.n	8014d9e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8014d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014d78:	d80b      	bhi.n	8014d92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d011      	beq.n	8014da2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8014d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014d82:	d106      	bne.n	8014d92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014d84:	4bc3      	ldr	r3, [pc, #780]	@ (8015094 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d88:	4ac2      	ldr	r2, [pc, #776]	@ (8015094 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8014d90:	e008      	b.n	8014da4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014d92:	2301      	movs	r3, #1
 8014d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8014d98:	e004      	b.n	8014da4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8014d9a:	bf00      	nop
 8014d9c:	e002      	b.n	8014da4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8014d9e:	bf00      	nop
 8014da0:	e000      	b.n	8014da4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8014da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d10b      	bne.n	8014dc4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8014dac:	4bb9      	ldr	r3, [pc, #740]	@ (8015094 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014db0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8014db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014dbc:	4ab5      	ldr	r2, [pc, #724]	@ (8015094 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014dbe:	430b      	orrs	r3, r1
 8014dc0:	6553      	str	r3, [r2, #84]	@ 0x54
 8014dc2:	e003      	b.n	8014dcc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014dc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8014dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dd4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8014dd8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014dda:	2300      	movs	r3, #0
 8014ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014dde:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8014de2:	460b      	mov	r3, r1
 8014de4:	4313      	orrs	r3, r2
 8014de6:	d009      	beq.n	8014dfc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8014de8:	4baa      	ldr	r3, [pc, #680]	@ (8015094 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014dec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014df6:	4aa7      	ldr	r2, [pc, #668]	@ (8015094 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014df8:	430b      	orrs	r3, r1
 8014dfa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8014dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e04:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8014e08:	653b      	str	r3, [r7, #80]	@ 0x50
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8014e0e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8014e12:	460b      	mov	r3, r1
 8014e14:	4313      	orrs	r3, r2
 8014e16:	d00a      	beq.n	8014e2e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8014e18:	4b9e      	ldr	r3, [pc, #632]	@ (8015094 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014e1a:	691b      	ldr	r3, [r3, #16]
 8014e1c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8014e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014e24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8014e28:	4a9a      	ldr	r2, [pc, #616]	@ (8015094 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014e2a:	430b      	orrs	r3, r1
 8014e2c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8014e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e36:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8014e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014e40:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8014e44:	460b      	mov	r3, r1
 8014e46:	4313      	orrs	r3, r2
 8014e48:	d009      	beq.n	8014e5e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8014e4a:	4b92      	ldr	r3, [pc, #584]	@ (8015094 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014e4e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8014e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e58:	4a8e      	ldr	r2, [pc, #568]	@ (8015094 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014e5a:	430b      	orrs	r3, r1
 8014e5c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8014e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e66:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8014e6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8014e70:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8014e74:	460b      	mov	r3, r1
 8014e76:	4313      	orrs	r3, r2
 8014e78:	d00e      	beq.n	8014e98 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8014e7a:	4b86      	ldr	r3, [pc, #536]	@ (8015094 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014e7c:	691b      	ldr	r3, [r3, #16]
 8014e7e:	4a85      	ldr	r2, [pc, #532]	@ (8015094 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014e80:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8014e84:	6113      	str	r3, [r2, #16]
 8014e86:	4b83      	ldr	r3, [pc, #524]	@ (8015094 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014e88:	6919      	ldr	r1, [r3, #16]
 8014e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014e8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8014e92:	4a80      	ldr	r2, [pc, #512]	@ (8015094 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014e94:	430b      	orrs	r3, r1
 8014e96:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8014e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ea0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8014ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014eaa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8014eae:	460b      	mov	r3, r1
 8014eb0:	4313      	orrs	r3, r2
 8014eb2:	d009      	beq.n	8014ec8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8014eb4:	4b77      	ldr	r3, [pc, #476]	@ (8015094 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014eb8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8014ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014ec2:	4a74      	ldr	r2, [pc, #464]	@ (8015094 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014ec4:	430b      	orrs	r3, r1
 8014ec6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8014ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ed0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8014ed4:	633b      	str	r3, [r7, #48]	@ 0x30
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8014eda:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8014ede:	460b      	mov	r3, r1
 8014ee0:	4313      	orrs	r3, r2
 8014ee2:	d00a      	beq.n	8014efa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8014ee4:	4b6b      	ldr	r3, [pc, #428]	@ (8015094 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014ee8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8014eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014ef4:	4a67      	ldr	r2, [pc, #412]	@ (8015094 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8014ef6:	430b      	orrs	r3, r1
 8014ef8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8014efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f02:	2100      	movs	r1, #0
 8014f04:	62b9      	str	r1, [r7, #40]	@ 0x28
 8014f06:	f003 0301 	and.w	r3, r3, #1
 8014f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014f0c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8014f10:	460b      	mov	r3, r1
 8014f12:	4313      	orrs	r3, r2
 8014f14:	d011      	beq.n	8014f3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014f1a:	3308      	adds	r3, #8
 8014f1c:	2100      	movs	r1, #0
 8014f1e:	4618      	mov	r0, r3
 8014f20:	f001 fa4a 	bl	80163b8 <RCCEx_PLL2_Config>
 8014f24:	4603      	mov	r3, r0
 8014f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8014f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d003      	beq.n	8014f3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014f32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014f36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8014f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f42:	2100      	movs	r1, #0
 8014f44:	6239      	str	r1, [r7, #32]
 8014f46:	f003 0302 	and.w	r3, r3, #2
 8014f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8014f4c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8014f50:	460b      	mov	r3, r1
 8014f52:	4313      	orrs	r3, r2
 8014f54:	d011      	beq.n	8014f7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014f5a:	3308      	adds	r3, #8
 8014f5c:	2101      	movs	r1, #1
 8014f5e:	4618      	mov	r0, r3
 8014f60:	f001 fa2a 	bl	80163b8 <RCCEx_PLL2_Config>
 8014f64:	4603      	mov	r3, r0
 8014f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8014f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d003      	beq.n	8014f7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014f76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8014f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f82:	2100      	movs	r1, #0
 8014f84:	61b9      	str	r1, [r7, #24]
 8014f86:	f003 0304 	and.w	r3, r3, #4
 8014f8a:	61fb      	str	r3, [r7, #28]
 8014f8c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8014f90:	460b      	mov	r3, r1
 8014f92:	4313      	orrs	r3, r2
 8014f94:	d011      	beq.n	8014fba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8014f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014f9a:	3308      	adds	r3, #8
 8014f9c:	2102      	movs	r1, #2
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f001 fa0a 	bl	80163b8 <RCCEx_PLL2_Config>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8014faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d003      	beq.n	8014fba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014fb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8014fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fc2:	2100      	movs	r1, #0
 8014fc4:	6139      	str	r1, [r7, #16]
 8014fc6:	f003 0308 	and.w	r3, r3, #8
 8014fca:	617b      	str	r3, [r7, #20]
 8014fcc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8014fd0:	460b      	mov	r3, r1
 8014fd2:	4313      	orrs	r3, r2
 8014fd4:	d011      	beq.n	8014ffa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8014fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014fda:	3328      	adds	r3, #40	@ 0x28
 8014fdc:	2100      	movs	r1, #0
 8014fde:	4618      	mov	r0, r3
 8014fe0:	f001 fa9c 	bl	801651c <RCCEx_PLL3_Config>
 8014fe4:	4603      	mov	r3, r0
 8014fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8014fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d003      	beq.n	8014ffa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8014ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8014ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015002:	2100      	movs	r1, #0
 8015004:	60b9      	str	r1, [r7, #8]
 8015006:	f003 0310 	and.w	r3, r3, #16
 801500a:	60fb      	str	r3, [r7, #12]
 801500c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8015010:	460b      	mov	r3, r1
 8015012:	4313      	orrs	r3, r2
 8015014:	d011      	beq.n	801503a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801501a:	3328      	adds	r3, #40	@ 0x28
 801501c:	2101      	movs	r1, #1
 801501e:	4618      	mov	r0, r3
 8015020:	f001 fa7c 	bl	801651c <RCCEx_PLL3_Config>
 8015024:	4603      	mov	r3, r0
 8015026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801502a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801502e:	2b00      	cmp	r3, #0
 8015030:	d003      	beq.n	801503a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801503a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015042:	2100      	movs	r1, #0
 8015044:	6039      	str	r1, [r7, #0]
 8015046:	f003 0320 	and.w	r3, r3, #32
 801504a:	607b      	str	r3, [r7, #4]
 801504c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8015050:	460b      	mov	r3, r1
 8015052:	4313      	orrs	r3, r2
 8015054:	d011      	beq.n	801507a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8015056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801505a:	3328      	adds	r3, #40	@ 0x28
 801505c:	2102      	movs	r1, #2
 801505e:	4618      	mov	r0, r3
 8015060:	f001 fa5c 	bl	801651c <RCCEx_PLL3_Config>
 8015064:	4603      	mov	r3, r0
 8015066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801506a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801506e:	2b00      	cmp	r3, #0
 8015070:	d003      	beq.n	801507a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801507a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801507e:	2b00      	cmp	r3, #0
 8015080:	d101      	bne.n	8015086 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8015082:	2300      	movs	r3, #0
 8015084:	e000      	b.n	8015088 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8015086:	2301      	movs	r3, #1
}
 8015088:	4618      	mov	r0, r3
 801508a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801508e:	46bd      	mov	sp, r7
 8015090:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015094:	58024400 	.word	0x58024400

08015098 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b090      	sub	sp, #64	@ 0x40
 801509c:	af00      	add	r7, sp, #0
 801509e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80150a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80150a6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80150aa:	430b      	orrs	r3, r1
 80150ac:	f040 8094 	bne.w	80151d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80150b0:	4b9e      	ldr	r3, [pc, #632]	@ (801532c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80150b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80150b4:	f003 0307 	and.w	r3, r3, #7
 80150b8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80150ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150bc:	2b04      	cmp	r3, #4
 80150be:	f200 8087 	bhi.w	80151d0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80150c2:	a201      	add	r2, pc, #4	@ (adr r2, 80150c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80150c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150c8:	080150dd 	.word	0x080150dd
 80150cc:	08015105 	.word	0x08015105
 80150d0:	0801512d 	.word	0x0801512d
 80150d4:	080151c9 	.word	0x080151c9
 80150d8:	08015155 	.word	0x08015155
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80150dc:	4b93      	ldr	r3, [pc, #588]	@ (801532c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80150e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80150e8:	d108      	bne.n	80150fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80150ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80150ee:	4618      	mov	r0, r3
 80150f0:	f001 f810 	bl	8016114 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80150f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80150f8:	f000 bd45 	b.w	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80150fc:	2300      	movs	r3, #0
 80150fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015100:	f000 bd41 	b.w	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015104:	4b89      	ldr	r3, [pc, #548]	@ (801532c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801510c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015110:	d108      	bne.n	8015124 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015112:	f107 0318 	add.w	r3, r7, #24
 8015116:	4618      	mov	r0, r3
 8015118:	f000 fd54 	bl	8015bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801511c:	69bb      	ldr	r3, [r7, #24]
 801511e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015120:	f000 bd31 	b.w	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015124:	2300      	movs	r3, #0
 8015126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015128:	f000 bd2d 	b.w	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801512c:	4b7f      	ldr	r3, [pc, #508]	@ (801532c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8015134:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015138:	d108      	bne.n	801514c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801513a:	f107 030c 	add.w	r3, r7, #12
 801513e:	4618      	mov	r0, r3
 8015140:	f000 fe94 	bl	8015e6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015148:	f000 bd1d 	b.w	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801514c:	2300      	movs	r3, #0
 801514e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015150:	f000 bd19 	b.w	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8015154:	4b75      	ldr	r3, [pc, #468]	@ (801532c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015158:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801515c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801515e:	4b73      	ldr	r3, [pc, #460]	@ (801532c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	f003 0304 	and.w	r3, r3, #4
 8015166:	2b04      	cmp	r3, #4
 8015168:	d10c      	bne.n	8015184 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801516a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801516c:	2b00      	cmp	r3, #0
 801516e:	d109      	bne.n	8015184 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015170:	4b6e      	ldr	r3, [pc, #440]	@ (801532c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	08db      	lsrs	r3, r3, #3
 8015176:	f003 0303 	and.w	r3, r3, #3
 801517a:	4a6d      	ldr	r2, [pc, #436]	@ (8015330 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801517c:	fa22 f303 	lsr.w	r3, r2, r3
 8015180:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015182:	e01f      	b.n	80151c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8015184:	4b69      	ldr	r3, [pc, #420]	@ (801532c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801518c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015190:	d106      	bne.n	80151a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8015192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015194:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015198:	d102      	bne.n	80151a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801519a:	4b66      	ldr	r3, [pc, #408]	@ (8015334 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801519c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801519e:	e011      	b.n	80151c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80151a0:	4b62      	ldr	r3, [pc, #392]	@ (801532c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80151a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80151ac:	d106      	bne.n	80151bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80151ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80151b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80151b4:	d102      	bne.n	80151bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80151b6:	4b60      	ldr	r3, [pc, #384]	@ (8015338 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80151b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80151ba:	e003      	b.n	80151c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80151bc:	2300      	movs	r3, #0
 80151be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80151c0:	f000 bce1 	b.w	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80151c4:	f000 bcdf 	b.w	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80151c8:	4b5c      	ldr	r3, [pc, #368]	@ (801533c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80151ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80151cc:	f000 bcdb 	b.w	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80151d0:	2300      	movs	r3, #0
 80151d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80151d4:	f000 bcd7 	b.w	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80151d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80151dc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80151e0:	430b      	orrs	r3, r1
 80151e2:	f040 80ad 	bne.w	8015340 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80151e6:	4b51      	ldr	r3, [pc, #324]	@ (801532c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80151e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80151ea:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80151ee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80151f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80151f6:	d056      	beq.n	80152a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80151f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80151fe:	f200 8090 	bhi.w	8015322 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8015202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015204:	2bc0      	cmp	r3, #192	@ 0xc0
 8015206:	f000 8088 	beq.w	801531a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 801520a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801520c:	2bc0      	cmp	r3, #192	@ 0xc0
 801520e:	f200 8088 	bhi.w	8015322 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8015212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015214:	2b80      	cmp	r3, #128	@ 0x80
 8015216:	d032      	beq.n	801527e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8015218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801521a:	2b80      	cmp	r3, #128	@ 0x80
 801521c:	f200 8081 	bhi.w	8015322 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8015220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015222:	2b00      	cmp	r3, #0
 8015224:	d003      	beq.n	801522e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8015226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015228:	2b40      	cmp	r3, #64	@ 0x40
 801522a:	d014      	beq.n	8015256 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 801522c:	e079      	b.n	8015322 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801522e:	4b3f      	ldr	r3, [pc, #252]	@ (801532c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015236:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801523a:	d108      	bne.n	801524e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801523c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015240:	4618      	mov	r0, r3
 8015242:	f000 ff67 	bl	8016114 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8015246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801524a:	f000 bc9c 	b.w	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801524e:	2300      	movs	r3, #0
 8015250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015252:	f000 bc98 	b.w	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015256:	4b35      	ldr	r3, [pc, #212]	@ (801532c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801525e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015262:	d108      	bne.n	8015276 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015264:	f107 0318 	add.w	r3, r7, #24
 8015268:	4618      	mov	r0, r3
 801526a:	f000 fcab 	bl	8015bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801526e:	69bb      	ldr	r3, [r7, #24]
 8015270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015272:	f000 bc88 	b.w	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015276:	2300      	movs	r3, #0
 8015278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801527a:	f000 bc84 	b.w	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801527e:	4b2b      	ldr	r3, [pc, #172]	@ (801532c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8015286:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801528a:	d108      	bne.n	801529e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801528c:	f107 030c 	add.w	r3, r7, #12
 8015290:	4618      	mov	r0, r3
 8015292:	f000 fdeb 	bl	8015e6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801529a:	f000 bc74 	b.w	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801529e:	2300      	movs	r3, #0
 80152a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80152a2:	f000 bc70 	b.w	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80152a6:	4b21      	ldr	r3, [pc, #132]	@ (801532c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80152a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80152aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80152ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80152b0:	4b1e      	ldr	r3, [pc, #120]	@ (801532c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	f003 0304 	and.w	r3, r3, #4
 80152b8:	2b04      	cmp	r3, #4
 80152ba:	d10c      	bne.n	80152d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80152bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d109      	bne.n	80152d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80152c2:	4b1a      	ldr	r3, [pc, #104]	@ (801532c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	08db      	lsrs	r3, r3, #3
 80152c8:	f003 0303 	and.w	r3, r3, #3
 80152cc:	4a18      	ldr	r2, [pc, #96]	@ (8015330 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80152ce:	fa22 f303 	lsr.w	r3, r2, r3
 80152d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80152d4:	e01f      	b.n	8015316 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80152d6:	4b15      	ldr	r3, [pc, #84]	@ (801532c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80152de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80152e2:	d106      	bne.n	80152f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80152e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80152e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80152ea:	d102      	bne.n	80152f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80152ec:	4b11      	ldr	r3, [pc, #68]	@ (8015334 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80152ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80152f0:	e011      	b.n	8015316 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80152f2:	4b0e      	ldr	r3, [pc, #56]	@ (801532c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80152fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80152fe:	d106      	bne.n	801530e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8015300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015302:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015306:	d102      	bne.n	801530e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8015308:	4b0b      	ldr	r3, [pc, #44]	@ (8015338 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801530a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801530c:	e003      	b.n	8015316 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801530e:	2300      	movs	r3, #0
 8015310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8015312:	f000 bc38 	b.w	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8015316:	f000 bc36 	b.w	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801531a:	4b08      	ldr	r3, [pc, #32]	@ (801533c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801531c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801531e:	f000 bc32 	b.w	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8015322:	2300      	movs	r3, #0
 8015324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015326:	f000 bc2e 	b.w	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801532a:	bf00      	nop
 801532c:	58024400 	.word	0x58024400
 8015330:	03d09000 	.word	0x03d09000
 8015334:	003d0900 	.word	0x003d0900
 8015338:	017d7840 	.word	0x017d7840
 801533c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8015340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015344:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8015348:	430b      	orrs	r3, r1
 801534a:	f040 809c 	bne.w	8015486 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801534e:	4b9e      	ldr	r3, [pc, #632]	@ (80155c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015352:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8015356:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8015358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801535a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801535e:	d054      	beq.n	801540a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8015360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015362:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8015366:	f200 808b 	bhi.w	8015480 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801536a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801536c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8015370:	f000 8083 	beq.w	801547a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8015374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015376:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801537a:	f200 8081 	bhi.w	8015480 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801537e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015380:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015384:	d02f      	beq.n	80153e6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8015386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015388:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801538c:	d878      	bhi.n	8015480 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801538e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015390:	2b00      	cmp	r3, #0
 8015392:	d004      	beq.n	801539e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8015394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015396:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801539a:	d012      	beq.n	80153c2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 801539c:	e070      	b.n	8015480 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801539e:	4b8a      	ldr	r3, [pc, #552]	@ (80155c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80153a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80153aa:	d107      	bne.n	80153bc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80153ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80153b0:	4618      	mov	r0, r3
 80153b2:	f000 feaf 	bl	8016114 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80153b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80153ba:	e3e4      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80153bc:	2300      	movs	r3, #0
 80153be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80153c0:	e3e1      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80153c2:	4b81      	ldr	r3, [pc, #516]	@ (80155c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80153ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80153ce:	d107      	bne.n	80153e0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80153d0:	f107 0318 	add.w	r3, r7, #24
 80153d4:	4618      	mov	r0, r3
 80153d6:	f000 fbf5 	bl	8015bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80153da:	69bb      	ldr	r3, [r7, #24]
 80153dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80153de:	e3d2      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80153e0:	2300      	movs	r3, #0
 80153e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80153e4:	e3cf      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80153e6:	4b78      	ldr	r3, [pc, #480]	@ (80155c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80153ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80153f2:	d107      	bne.n	8015404 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80153f4:	f107 030c 	add.w	r3, r7, #12
 80153f8:	4618      	mov	r0, r3
 80153fa:	f000 fd37 	bl	8015e6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015402:	e3c0      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015404:	2300      	movs	r3, #0
 8015406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015408:	e3bd      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801540a:	4b6f      	ldr	r3, [pc, #444]	@ (80155c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801540c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801540e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8015412:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8015414:	4b6c      	ldr	r3, [pc, #432]	@ (80155c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	f003 0304 	and.w	r3, r3, #4
 801541c:	2b04      	cmp	r3, #4
 801541e:	d10c      	bne.n	801543a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8015420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015422:	2b00      	cmp	r3, #0
 8015424:	d109      	bne.n	801543a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015426:	4b68      	ldr	r3, [pc, #416]	@ (80155c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	08db      	lsrs	r3, r3, #3
 801542c:	f003 0303 	and.w	r3, r3, #3
 8015430:	4a66      	ldr	r2, [pc, #408]	@ (80155cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8015432:	fa22 f303 	lsr.w	r3, r2, r3
 8015436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015438:	e01e      	b.n	8015478 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801543a:	4b63      	ldr	r3, [pc, #396]	@ (80155c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015446:	d106      	bne.n	8015456 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8015448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801544a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801544e:	d102      	bne.n	8015456 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8015450:	4b5f      	ldr	r3, [pc, #380]	@ (80155d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8015452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015454:	e010      	b.n	8015478 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8015456:	4b5c      	ldr	r3, [pc, #368]	@ (80155c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801545e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015462:	d106      	bne.n	8015472 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8015464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015466:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801546a:	d102      	bne.n	8015472 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801546c:	4b59      	ldr	r3, [pc, #356]	@ (80155d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801546e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015470:	e002      	b.n	8015478 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8015472:	2300      	movs	r3, #0
 8015474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8015476:	e386      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8015478:	e385      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801547a:	4b57      	ldr	r3, [pc, #348]	@ (80155d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 801547c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801547e:	e382      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8015480:	2300      	movs	r3, #0
 8015482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015484:	e37f      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8015486:	e9d7 2300 	ldrd	r2, r3, [r7]
 801548a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 801548e:	430b      	orrs	r3, r1
 8015490:	f040 80a7 	bne.w	80155e2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8015494:	4b4c      	ldr	r3, [pc, #304]	@ (80155c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015498:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 801549c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801549e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80154a4:	d055      	beq.n	8015552 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80154a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80154ac:	f200 8096 	bhi.w	80155dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80154b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80154b6:	f000 8084 	beq.w	80155c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80154ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80154c0:	f200 808c 	bhi.w	80155dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80154c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80154ca:	d030      	beq.n	801552e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80154cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80154d2:	f200 8083 	bhi.w	80155dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80154d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d004      	beq.n	80154e6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80154dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80154e2:	d012      	beq.n	801550a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80154e4:	e07a      	b.n	80155dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80154e6:	4b38      	ldr	r3, [pc, #224]	@ (80155c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80154ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80154f2:	d107      	bne.n	8015504 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80154f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80154f8:	4618      	mov	r0, r3
 80154fa:	f000 fe0b 	bl	8016114 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80154fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015502:	e340      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015504:	2300      	movs	r3, #0
 8015506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015508:	e33d      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801550a:	4b2f      	ldr	r3, [pc, #188]	@ (80155c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015512:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015516:	d107      	bne.n	8015528 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015518:	f107 0318 	add.w	r3, r7, #24
 801551c:	4618      	mov	r0, r3
 801551e:	f000 fb51 	bl	8015bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8015522:	69bb      	ldr	r3, [r7, #24]
 8015524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015526:	e32e      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015528:	2300      	movs	r3, #0
 801552a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801552c:	e32b      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801552e:	4b26      	ldr	r3, [pc, #152]	@ (80155c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8015536:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801553a:	d107      	bne.n	801554c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801553c:	f107 030c 	add.w	r3, r7, #12
 8015540:	4618      	mov	r0, r3
 8015542:	f000 fc93 	bl	8015e6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801554a:	e31c      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801554c:	2300      	movs	r3, #0
 801554e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015550:	e319      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8015552:	4b1d      	ldr	r3, [pc, #116]	@ (80155c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015556:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801555a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801555c:	4b1a      	ldr	r3, [pc, #104]	@ (80155c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	f003 0304 	and.w	r3, r3, #4
 8015564:	2b04      	cmp	r3, #4
 8015566:	d10c      	bne.n	8015582 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8015568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801556a:	2b00      	cmp	r3, #0
 801556c:	d109      	bne.n	8015582 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801556e:	4b16      	ldr	r3, [pc, #88]	@ (80155c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	08db      	lsrs	r3, r3, #3
 8015574:	f003 0303 	and.w	r3, r3, #3
 8015578:	4a14      	ldr	r2, [pc, #80]	@ (80155cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801557a:	fa22 f303 	lsr.w	r3, r2, r3
 801557e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015580:	e01e      	b.n	80155c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8015582:	4b11      	ldr	r3, [pc, #68]	@ (80155c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801558a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801558e:	d106      	bne.n	801559e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8015590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015592:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015596:	d102      	bne.n	801559e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8015598:	4b0d      	ldr	r3, [pc, #52]	@ (80155d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801559a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801559c:	e010      	b.n	80155c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801559e:	4b0a      	ldr	r3, [pc, #40]	@ (80155c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80155a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80155aa:	d106      	bne.n	80155ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80155ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80155ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80155b2:	d102      	bne.n	80155ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80155b4:	4b07      	ldr	r3, [pc, #28]	@ (80155d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80155b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80155b8:	e002      	b.n	80155c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80155ba:	2300      	movs	r3, #0
 80155bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80155be:	e2e2      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80155c0:	e2e1      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80155c2:	4b05      	ldr	r3, [pc, #20]	@ (80155d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80155c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80155c6:	e2de      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80155c8:	58024400 	.word	0x58024400
 80155cc:	03d09000 	.word	0x03d09000
 80155d0:	003d0900 	.word	0x003d0900
 80155d4:	017d7840 	.word	0x017d7840
 80155d8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80155dc:	2300      	movs	r3, #0
 80155de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80155e0:	e2d1      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80155e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80155e6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80155ea:	430b      	orrs	r3, r1
 80155ec:	f040 809c 	bne.w	8015728 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80155f0:	4b93      	ldr	r3, [pc, #588]	@ (8015840 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80155f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80155f4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80155f8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80155fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015600:	d054      	beq.n	80156ac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8015602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015604:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015608:	f200 808b 	bhi.w	8015722 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801560c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801560e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8015612:	f000 8083 	beq.w	801571c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8015616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015618:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801561c:	f200 8081 	bhi.w	8015722 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8015620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015626:	d02f      	beq.n	8015688 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8015628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801562a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801562e:	d878      	bhi.n	8015722 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8015630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015632:	2b00      	cmp	r3, #0
 8015634:	d004      	beq.n	8015640 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8015636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015638:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801563c:	d012      	beq.n	8015664 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 801563e:	e070      	b.n	8015722 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015640:	4b7f      	ldr	r3, [pc, #508]	@ (8015840 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015648:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801564c:	d107      	bne.n	801565e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801564e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015652:	4618      	mov	r0, r3
 8015654:	f000 fd5e 	bl	8016114 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8015658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801565a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801565c:	e293      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801565e:	2300      	movs	r3, #0
 8015660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015662:	e290      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015664:	4b76      	ldr	r3, [pc, #472]	@ (8015840 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801566c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015670:	d107      	bne.n	8015682 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015672:	f107 0318 	add.w	r3, r7, #24
 8015676:	4618      	mov	r0, r3
 8015678:	f000 faa4 	bl	8015bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801567c:	69bb      	ldr	r3, [r7, #24]
 801567e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015680:	e281      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015682:	2300      	movs	r3, #0
 8015684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015686:	e27e      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8015688:	4b6d      	ldr	r3, [pc, #436]	@ (8015840 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8015690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015694:	d107      	bne.n	80156a6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015696:	f107 030c 	add.w	r3, r7, #12
 801569a:	4618      	mov	r0, r3
 801569c:	f000 fbe6 	bl	8015e6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80156a4:	e26f      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80156a6:	2300      	movs	r3, #0
 80156a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80156aa:	e26c      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80156ac:	4b64      	ldr	r3, [pc, #400]	@ (8015840 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80156ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80156b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80156b4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80156b6:	4b62      	ldr	r3, [pc, #392]	@ (8015840 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	f003 0304 	and.w	r3, r3, #4
 80156be:	2b04      	cmp	r3, #4
 80156c0:	d10c      	bne.n	80156dc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80156c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d109      	bne.n	80156dc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80156c8:	4b5d      	ldr	r3, [pc, #372]	@ (8015840 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	08db      	lsrs	r3, r3, #3
 80156ce:	f003 0303 	and.w	r3, r3, #3
 80156d2:	4a5c      	ldr	r2, [pc, #368]	@ (8015844 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80156d4:	fa22 f303 	lsr.w	r3, r2, r3
 80156d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80156da:	e01e      	b.n	801571a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80156dc:	4b58      	ldr	r3, [pc, #352]	@ (8015840 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80156e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80156e8:	d106      	bne.n	80156f8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80156ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80156ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80156f0:	d102      	bne.n	80156f8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80156f2:	4b55      	ldr	r3, [pc, #340]	@ (8015848 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80156f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80156f6:	e010      	b.n	801571a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80156f8:	4b51      	ldr	r3, [pc, #324]	@ (8015840 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015700:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015704:	d106      	bne.n	8015714 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8015706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015708:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801570c:	d102      	bne.n	8015714 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801570e:	4b4f      	ldr	r3, [pc, #316]	@ (801584c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8015710:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015712:	e002      	b.n	801571a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8015714:	2300      	movs	r3, #0
 8015716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8015718:	e235      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801571a:	e234      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801571c:	4b4c      	ldr	r3, [pc, #304]	@ (8015850 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 801571e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015720:	e231      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8015722:	2300      	movs	r3, #0
 8015724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015726:	e22e      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8015728:	e9d7 2300 	ldrd	r2, r3, [r7]
 801572c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8015730:	430b      	orrs	r3, r1
 8015732:	f040 808f 	bne.w	8015854 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8015736:	4b42      	ldr	r3, [pc, #264]	@ (8015840 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8015738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801573a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 801573e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8015740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015742:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8015746:	d06b      	beq.n	8015820 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8015748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801574a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801574e:	d874      	bhi.n	801583a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8015750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015752:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015756:	d056      	beq.n	8015806 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8015758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801575a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801575e:	d86c      	bhi.n	801583a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8015760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015762:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8015766:	d03b      	beq.n	80157e0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8015768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801576a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801576e:	d864      	bhi.n	801583a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8015770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015772:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015776:	d021      	beq.n	80157bc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8015778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801577a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801577e:	d85c      	bhi.n	801583a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8015780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015782:	2b00      	cmp	r3, #0
 8015784:	d004      	beq.n	8015790 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8015786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801578c:	d004      	beq.n	8015798 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 801578e:	e054      	b.n	801583a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8015790:	f7fe fa4c 	bl	8013c2c <HAL_RCC_GetPCLK1Freq>
 8015794:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8015796:	e1f6      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015798:	4b29      	ldr	r3, [pc, #164]	@ (8015840 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80157a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80157a4:	d107      	bne.n	80157b6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80157a6:	f107 0318 	add.w	r3, r7, #24
 80157aa:	4618      	mov	r0, r3
 80157ac:	f000 fa0a 	bl	8015bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80157b0:	69fb      	ldr	r3, [r7, #28]
 80157b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80157b4:	e1e7      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80157b6:	2300      	movs	r3, #0
 80157b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80157ba:	e1e4      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80157bc:	4b20      	ldr	r3, [pc, #128]	@ (8015840 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80157c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80157c8:	d107      	bne.n	80157da <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80157ca:	f107 030c 	add.w	r3, r7, #12
 80157ce:	4618      	mov	r0, r3
 80157d0:	f000 fb4c 	bl	8015e6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80157d4:	693b      	ldr	r3, [r7, #16]
 80157d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80157d8:	e1d5      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80157da:	2300      	movs	r3, #0
 80157dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80157de:	e1d2      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80157e0:	4b17      	ldr	r3, [pc, #92]	@ (8015840 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	f003 0304 	and.w	r3, r3, #4
 80157e8:	2b04      	cmp	r3, #4
 80157ea:	d109      	bne.n	8015800 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80157ec:	4b14      	ldr	r3, [pc, #80]	@ (8015840 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	08db      	lsrs	r3, r3, #3
 80157f2:	f003 0303 	and.w	r3, r3, #3
 80157f6:	4a13      	ldr	r2, [pc, #76]	@ (8015844 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80157f8:	fa22 f303 	lsr.w	r3, r2, r3
 80157fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80157fe:	e1c2      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015800:	2300      	movs	r3, #0
 8015802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015804:	e1bf      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8015806:	4b0e      	ldr	r3, [pc, #56]	@ (8015840 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801580e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015812:	d102      	bne.n	801581a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8015814:	4b0c      	ldr	r3, [pc, #48]	@ (8015848 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8015816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015818:	e1b5      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801581a:	2300      	movs	r3, #0
 801581c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801581e:	e1b2      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8015820:	4b07      	ldr	r3, [pc, #28]	@ (8015840 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015828:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801582c:	d102      	bne.n	8015834 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 801582e:	4b07      	ldr	r3, [pc, #28]	@ (801584c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8015830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015832:	e1a8      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015834:	2300      	movs	r3, #0
 8015836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015838:	e1a5      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801583a:	2300      	movs	r3, #0
 801583c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801583e:	e1a2      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8015840:	58024400 	.word	0x58024400
 8015844:	03d09000 	.word	0x03d09000
 8015848:	003d0900 	.word	0x003d0900
 801584c:	017d7840 	.word	0x017d7840
 8015850:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8015854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015858:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 801585c:	430b      	orrs	r3, r1
 801585e:	d173      	bne.n	8015948 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8015860:	4b9c      	ldr	r3, [pc, #624]	@ (8015ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015864:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8015868:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801586a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801586c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015870:	d02f      	beq.n	80158d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8015872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015874:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015878:	d863      	bhi.n	8015942 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 801587a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801587c:	2b00      	cmp	r3, #0
 801587e:	d004      	beq.n	801588a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8015880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015886:	d012      	beq.n	80158ae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8015888:	e05b      	b.n	8015942 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801588a:	4b92      	ldr	r3, [pc, #584]	@ (8015ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015892:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015896:	d107      	bne.n	80158a8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015898:	f107 0318 	add.w	r3, r7, #24
 801589c:	4618      	mov	r0, r3
 801589e:	f000 f991 	bl	8015bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80158a2:	69bb      	ldr	r3, [r7, #24]
 80158a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80158a6:	e16e      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80158a8:	2300      	movs	r3, #0
 80158aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80158ac:	e16b      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80158ae:	4b89      	ldr	r3, [pc, #548]	@ (8015ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80158b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80158ba:	d107      	bne.n	80158cc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80158bc:	f107 030c 	add.w	r3, r7, #12
 80158c0:	4618      	mov	r0, r3
 80158c2:	f000 fad3 	bl	8015e6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80158c6:	697b      	ldr	r3, [r7, #20]
 80158c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80158ca:	e15c      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80158cc:	2300      	movs	r3, #0
 80158ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80158d0:	e159      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80158d2:	4b80      	ldr	r3, [pc, #512]	@ (8015ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80158d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80158d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80158da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80158dc:	4b7d      	ldr	r3, [pc, #500]	@ (8015ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	f003 0304 	and.w	r3, r3, #4
 80158e4:	2b04      	cmp	r3, #4
 80158e6:	d10c      	bne.n	8015902 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80158e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d109      	bne.n	8015902 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80158ee:	4b79      	ldr	r3, [pc, #484]	@ (8015ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	08db      	lsrs	r3, r3, #3
 80158f4:	f003 0303 	and.w	r3, r3, #3
 80158f8:	4a77      	ldr	r2, [pc, #476]	@ (8015ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80158fa:	fa22 f303 	lsr.w	r3, r2, r3
 80158fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015900:	e01e      	b.n	8015940 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8015902:	4b74      	ldr	r3, [pc, #464]	@ (8015ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801590a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801590e:	d106      	bne.n	801591e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8015910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015912:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015916:	d102      	bne.n	801591e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8015918:	4b70      	ldr	r3, [pc, #448]	@ (8015adc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801591a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801591c:	e010      	b.n	8015940 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801591e:	4b6d      	ldr	r3, [pc, #436]	@ (8015ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015926:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801592a:	d106      	bne.n	801593a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 801592c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801592e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015932:	d102      	bne.n	801593a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8015934:	4b6a      	ldr	r3, [pc, #424]	@ (8015ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8015936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015938:	e002      	b.n	8015940 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801593a:	2300      	movs	r3, #0
 801593c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801593e:	e122      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8015940:	e121      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8015942:	2300      	movs	r3, #0
 8015944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015946:	e11e      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8015948:	e9d7 2300 	ldrd	r2, r3, [r7]
 801594c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8015950:	430b      	orrs	r3, r1
 8015952:	d133      	bne.n	80159bc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8015954:	4b5f      	ldr	r3, [pc, #380]	@ (8015ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801595c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801595e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015960:	2b00      	cmp	r3, #0
 8015962:	d004      	beq.n	801596e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8015964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801596a:	d012      	beq.n	8015992 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 801596c:	e023      	b.n	80159b6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801596e:	4b59      	ldr	r3, [pc, #356]	@ (8015ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015976:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801597a:	d107      	bne.n	801598c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801597c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015980:	4618      	mov	r0, r3
 8015982:	f000 fbc7 	bl	8016114 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8015986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801598a:	e0fc      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801598c:	2300      	movs	r3, #0
 801598e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015990:	e0f9      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015992:	4b50      	ldr	r3, [pc, #320]	@ (8015ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801599a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801599e:	d107      	bne.n	80159b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80159a0:	f107 0318 	add.w	r3, r7, #24
 80159a4:	4618      	mov	r0, r3
 80159a6:	f000 f90d 	bl	8015bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80159aa:	6a3b      	ldr	r3, [r7, #32]
 80159ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80159ae:	e0ea      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80159b0:	2300      	movs	r3, #0
 80159b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80159b4:	e0e7      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80159b6:	2300      	movs	r3, #0
 80159b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80159ba:	e0e4      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80159bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80159c0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80159c4:	430b      	orrs	r3, r1
 80159c6:	f040 808d 	bne.w	8015ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80159ca:	4b42      	ldr	r3, [pc, #264]	@ (8015ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80159cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80159ce:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80159d2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80159d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80159da:	d06b      	beq.n	8015ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80159dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80159e2:	d874      	bhi.n	8015ace <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80159e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80159ea:	d056      	beq.n	8015a9a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80159ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80159f2:	d86c      	bhi.n	8015ace <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80159f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80159fa:	d03b      	beq.n	8015a74 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80159fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8015a02:	d864      	bhi.n	8015ace <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8015a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015a0a:	d021      	beq.n	8015a50 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8015a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015a12:	d85c      	bhi.n	8015ace <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8015a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d004      	beq.n	8015a24 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8015a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015a20:	d004      	beq.n	8015a2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8015a22:	e054      	b.n	8015ace <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8015a24:	f000 f8b8 	bl	8015b98 <HAL_RCCEx_GetD3PCLK1Freq>
 8015a28:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8015a2a:	e0ac      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015a2c:	4b29      	ldr	r3, [pc, #164]	@ (8015ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015a34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015a38:	d107      	bne.n	8015a4a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015a3a:	f107 0318 	add.w	r3, r7, #24
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f000 f8c0 	bl	8015bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8015a44:	69fb      	ldr	r3, [r7, #28]
 8015a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015a48:	e09d      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015a4e:	e09a      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8015a50:	4b20      	ldr	r3, [pc, #128]	@ (8015ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8015a58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015a5c:	d107      	bne.n	8015a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015a5e:	f107 030c 	add.w	r3, r7, #12
 8015a62:	4618      	mov	r0, r3
 8015a64:	f000 fa02 	bl	8015e6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8015a68:	693b      	ldr	r3, [r7, #16]
 8015a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015a6c:	e08b      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015a6e:	2300      	movs	r3, #0
 8015a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015a72:	e088      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8015a74:	4b17      	ldr	r3, [pc, #92]	@ (8015ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	f003 0304 	and.w	r3, r3, #4
 8015a7c:	2b04      	cmp	r3, #4
 8015a7e:	d109      	bne.n	8015a94 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015a80:	4b14      	ldr	r3, [pc, #80]	@ (8015ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	08db      	lsrs	r3, r3, #3
 8015a86:	f003 0303 	and.w	r3, r3, #3
 8015a8a:	4a13      	ldr	r2, [pc, #76]	@ (8015ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8015a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8015a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015a92:	e078      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015a94:	2300      	movs	r3, #0
 8015a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015a98:	e075      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8015a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8015ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015aa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015aa6:	d102      	bne.n	8015aae <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8015aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8015adc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8015aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015aac:	e06b      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015aae:	2300      	movs	r3, #0
 8015ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015ab2:	e068      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8015ab4:	4b07      	ldr	r3, [pc, #28]	@ (8015ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015abc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015ac0:	d102      	bne.n	8015ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8015ac2:	4b07      	ldr	r3, [pc, #28]	@ (8015ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8015ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015ac6:	e05e      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015ac8:	2300      	movs	r3, #0
 8015aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015acc:	e05b      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8015ace:	2300      	movs	r3, #0
 8015ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015ad2:	e058      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8015ad4:	58024400 	.word	0x58024400
 8015ad8:	03d09000 	.word	0x03d09000
 8015adc:	003d0900 	.word	0x003d0900
 8015ae0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8015ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015ae8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8015aec:	430b      	orrs	r3, r1
 8015aee:	d148      	bne.n	8015b82 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8015af0:	4b27      	ldr	r3, [pc, #156]	@ (8015b90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8015af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015af4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8015af8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8015afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015afc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015b00:	d02a      	beq.n	8015b58 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8015b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015b08:	d838      	bhi.n	8015b7c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8015b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d004      	beq.n	8015b1a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8015b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015b16:	d00d      	beq.n	8015b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8015b18:	e030      	b.n	8015b7c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8015b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8015b90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015b22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015b26:	d102      	bne.n	8015b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8015b28:	4b1a      	ldr	r3, [pc, #104]	@ (8015b94 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8015b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015b2c:	e02b      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015b2e:	2300      	movs	r3, #0
 8015b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015b32:	e028      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015b34:	4b16      	ldr	r3, [pc, #88]	@ (8015b90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015b3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015b40:	d107      	bne.n	8015b52 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8015b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015b46:	4618      	mov	r0, r3
 8015b48:	f000 fae4 	bl	8016114 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8015b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015b50:	e019      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015b52:	2300      	movs	r3, #0
 8015b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015b56:	e016      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015b58:	4b0d      	ldr	r3, [pc, #52]	@ (8015b90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015b60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015b64:	d107      	bne.n	8015b76 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015b66:	f107 0318 	add.w	r3, r7, #24
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	f000 f82a 	bl	8015bc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8015b70:	69fb      	ldr	r3, [r7, #28]
 8015b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015b74:	e007      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8015b76:	2300      	movs	r3, #0
 8015b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015b7a:	e004      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8015b7c:	2300      	movs	r3, #0
 8015b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015b80:	e001      	b.n	8015b86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8015b82:	2300      	movs	r3, #0
 8015b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8015b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8015b88:	4618      	mov	r0, r3
 8015b8a:	3740      	adds	r7, #64	@ 0x40
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	bd80      	pop	{r7, pc}
 8015b90:	58024400 	.word	0x58024400
 8015b94:	017d7840 	.word	0x017d7840

08015b98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8015b9c:	f7fe f816 	bl	8013bcc <HAL_RCC_GetHCLKFreq>
 8015ba0:	4602      	mov	r2, r0
 8015ba2:	4b06      	ldr	r3, [pc, #24]	@ (8015bbc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8015ba4:	6a1b      	ldr	r3, [r3, #32]
 8015ba6:	091b      	lsrs	r3, r3, #4
 8015ba8:	f003 0307 	and.w	r3, r3, #7
 8015bac:	4904      	ldr	r1, [pc, #16]	@ (8015bc0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8015bae:	5ccb      	ldrb	r3, [r1, r3]
 8015bb0:	f003 031f 	and.w	r3, r3, #31
 8015bb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8015bb8:	4618      	mov	r0, r3
 8015bba:	bd80      	pop	{r7, pc}
 8015bbc:	58024400 	.word	0x58024400
 8015bc0:	0801e9a4 	.word	0x0801e9a4

08015bc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8015bc4:	b480      	push	{r7}
 8015bc6:	b089      	sub	sp, #36	@ 0x24
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8015bcc:	4ba1      	ldr	r3, [pc, #644]	@ (8015e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015bd0:	f003 0303 	and.w	r3, r3, #3
 8015bd4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8015bd6:	4b9f      	ldr	r3, [pc, #636]	@ (8015e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015bda:	0b1b      	lsrs	r3, r3, #12
 8015bdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015be0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8015be2:	4b9c      	ldr	r3, [pc, #624]	@ (8015e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015be6:	091b      	lsrs	r3, r3, #4
 8015be8:	f003 0301 	and.w	r3, r3, #1
 8015bec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8015bee:	4b99      	ldr	r3, [pc, #612]	@ (8015e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015bf2:	08db      	lsrs	r3, r3, #3
 8015bf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015bf8:	693a      	ldr	r2, [r7, #16]
 8015bfa:	fb02 f303 	mul.w	r3, r2, r3
 8015bfe:	ee07 3a90 	vmov	s15, r3
 8015c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015c06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8015c0a:	697b      	ldr	r3, [r7, #20]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	f000 8111 	beq.w	8015e34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8015c12:	69bb      	ldr	r3, [r7, #24]
 8015c14:	2b02      	cmp	r3, #2
 8015c16:	f000 8083 	beq.w	8015d20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8015c1a:	69bb      	ldr	r3, [r7, #24]
 8015c1c:	2b02      	cmp	r3, #2
 8015c1e:	f200 80a1 	bhi.w	8015d64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8015c22:	69bb      	ldr	r3, [r7, #24]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d003      	beq.n	8015c30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8015c28:	69bb      	ldr	r3, [r7, #24]
 8015c2a:	2b01      	cmp	r3, #1
 8015c2c:	d056      	beq.n	8015cdc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8015c2e:	e099      	b.n	8015d64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015c30:	4b88      	ldr	r3, [pc, #544]	@ (8015e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	f003 0320 	and.w	r3, r3, #32
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d02d      	beq.n	8015c98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015c3c:	4b85      	ldr	r3, [pc, #532]	@ (8015e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	08db      	lsrs	r3, r3, #3
 8015c42:	f003 0303 	and.w	r3, r3, #3
 8015c46:	4a84      	ldr	r2, [pc, #528]	@ (8015e58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8015c48:	fa22 f303 	lsr.w	r3, r2, r3
 8015c4c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8015c4e:	68bb      	ldr	r3, [r7, #8]
 8015c50:	ee07 3a90 	vmov	s15, r3
 8015c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015c58:	697b      	ldr	r3, [r7, #20]
 8015c5a:	ee07 3a90 	vmov	s15, r3
 8015c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015c66:	4b7b      	ldr	r3, [pc, #492]	@ (8015e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015c6e:	ee07 3a90 	vmov	s15, r3
 8015c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8015c7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8015e5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8015c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015c92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8015c96:	e087      	b.n	8015da8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8015c98:	697b      	ldr	r3, [r7, #20]
 8015c9a:	ee07 3a90 	vmov	s15, r3
 8015c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015ca2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8015e60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8015ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015caa:	4b6a      	ldr	r3, [pc, #424]	@ (8015e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015cb2:	ee07 3a90 	vmov	s15, r3
 8015cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8015cbe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8015e5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8015cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015cda:	e065      	b.n	8015da8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8015cdc:	697b      	ldr	r3, [r7, #20]
 8015cde:	ee07 3a90 	vmov	s15, r3
 8015ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015ce6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8015e64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8015cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015cee:	4b59      	ldr	r3, [pc, #356]	@ (8015e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015cf6:	ee07 3a90 	vmov	s15, r3
 8015cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8015d02:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8015e5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8015d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015d1e:	e043      	b.n	8015da8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8015d20:	697b      	ldr	r3, [r7, #20]
 8015d22:	ee07 3a90 	vmov	s15, r3
 8015d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d2a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8015e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8015d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015d32:	4b48      	ldr	r3, [pc, #288]	@ (8015e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015d3a:	ee07 3a90 	vmov	s15, r3
 8015d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8015d46:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8015e5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8015d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015d62:	e021      	b.n	8015da8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8015d64:	697b      	ldr	r3, [r7, #20]
 8015d66:	ee07 3a90 	vmov	s15, r3
 8015d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d6e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8015e64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8015d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015d76:	4b37      	ldr	r3, [pc, #220]	@ (8015e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015d7e:	ee07 3a90 	vmov	s15, r3
 8015d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8015d8a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8015e5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8015d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015da6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8015da8:	4b2a      	ldr	r3, [pc, #168]	@ (8015e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015dac:	0a5b      	lsrs	r3, r3, #9
 8015dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015db2:	ee07 3a90 	vmov	s15, r3
 8015db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015dba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015dbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8015dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015dce:	ee17 2a90 	vmov	r2, s15
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8015dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8015e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015dda:	0c1b      	lsrs	r3, r3, #16
 8015ddc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015de0:	ee07 3a90 	vmov	s15, r3
 8015de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015de8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015dec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015df0:	edd7 6a07 	vldr	s13, [r7, #28]
 8015df4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015df8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015dfc:	ee17 2a90 	vmov	r2, s15
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8015e04:	4b13      	ldr	r3, [pc, #76]	@ (8015e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e08:	0e1b      	lsrs	r3, r3, #24
 8015e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015e0e:	ee07 3a90 	vmov	s15, r3
 8015e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015e16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015e1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015e1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8015e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015e2a:	ee17 2a90 	vmov	r2, s15
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8015e32:	e008      	b.n	8015e46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	2200      	movs	r2, #0
 8015e38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	2200      	movs	r2, #0
 8015e44:	609a      	str	r2, [r3, #8]
}
 8015e46:	bf00      	nop
 8015e48:	3724      	adds	r7, #36	@ 0x24
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e50:	4770      	bx	lr
 8015e52:	bf00      	nop
 8015e54:	58024400 	.word	0x58024400
 8015e58:	03d09000 	.word	0x03d09000
 8015e5c:	46000000 	.word	0x46000000
 8015e60:	4c742400 	.word	0x4c742400
 8015e64:	4a742400 	.word	0x4a742400
 8015e68:	4bbebc20 	.word	0x4bbebc20

08015e6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8015e6c:	b480      	push	{r7}
 8015e6e:	b089      	sub	sp, #36	@ 0x24
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8015e74:	4ba1      	ldr	r3, [pc, #644]	@ (80160fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e78:	f003 0303 	and.w	r3, r3, #3
 8015e7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8015e7e:	4b9f      	ldr	r3, [pc, #636]	@ (80160fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e82:	0d1b      	lsrs	r3, r3, #20
 8015e84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015e88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8015e8a:	4b9c      	ldr	r3, [pc, #624]	@ (80160fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e8e:	0a1b      	lsrs	r3, r3, #8
 8015e90:	f003 0301 	and.w	r3, r3, #1
 8015e94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8015e96:	4b99      	ldr	r3, [pc, #612]	@ (80160fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015e9a:	08db      	lsrs	r3, r3, #3
 8015e9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ea0:	693a      	ldr	r2, [r7, #16]
 8015ea2:	fb02 f303 	mul.w	r3, r2, r3
 8015ea6:	ee07 3a90 	vmov	s15, r3
 8015eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015eae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8015eb2:	697b      	ldr	r3, [r7, #20]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	f000 8111 	beq.w	80160dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8015eba:	69bb      	ldr	r3, [r7, #24]
 8015ebc:	2b02      	cmp	r3, #2
 8015ebe:	f000 8083 	beq.w	8015fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8015ec2:	69bb      	ldr	r3, [r7, #24]
 8015ec4:	2b02      	cmp	r3, #2
 8015ec6:	f200 80a1 	bhi.w	801600c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8015eca:	69bb      	ldr	r3, [r7, #24]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d003      	beq.n	8015ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8015ed0:	69bb      	ldr	r3, [r7, #24]
 8015ed2:	2b01      	cmp	r3, #1
 8015ed4:	d056      	beq.n	8015f84 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8015ed6:	e099      	b.n	801600c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015ed8:	4b88      	ldr	r3, [pc, #544]	@ (80160fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	f003 0320 	and.w	r3, r3, #32
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d02d      	beq.n	8015f40 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015ee4:	4b85      	ldr	r3, [pc, #532]	@ (80160fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	08db      	lsrs	r3, r3, #3
 8015eea:	f003 0303 	and.w	r3, r3, #3
 8015eee:	4a84      	ldr	r2, [pc, #528]	@ (8016100 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8015ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8015ef4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8015ef6:	68bb      	ldr	r3, [r7, #8]
 8015ef8:	ee07 3a90 	vmov	s15, r3
 8015efc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015f00:	697b      	ldr	r3, [r7, #20]
 8015f02:	ee07 3a90 	vmov	s15, r3
 8015f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015f0e:	4b7b      	ldr	r3, [pc, #492]	@ (80160fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015f16:	ee07 3a90 	vmov	s15, r3
 8015f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8015f22:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8016104 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8015f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8015f3e:	e087      	b.n	8016050 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8015f40:	697b      	ldr	r3, [r7, #20]
 8015f42:	ee07 3a90 	vmov	s15, r3
 8015f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015f4a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8016108 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8015f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015f52:	4b6a      	ldr	r3, [pc, #424]	@ (80160fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015f5a:	ee07 3a90 	vmov	s15, r3
 8015f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8015f66:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8016104 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8015f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015f82:	e065      	b.n	8016050 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8015f84:	697b      	ldr	r3, [r7, #20]
 8015f86:	ee07 3a90 	vmov	s15, r3
 8015f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015f8e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8015f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015f96:	4b59      	ldr	r3, [pc, #356]	@ (80160fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015f9e:	ee07 3a90 	vmov	s15, r3
 8015fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8015faa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8016104 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8015fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015fc6:	e043      	b.n	8016050 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8015fc8:	697b      	ldr	r3, [r7, #20]
 8015fca:	ee07 3a90 	vmov	s15, r3
 8015fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015fd2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8016110 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8015fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015fda:	4b48      	ldr	r3, [pc, #288]	@ (80160fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015fe2:	ee07 3a90 	vmov	s15, r3
 8015fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8015fee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8016104 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8015ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801600a:	e021      	b.n	8016050 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801600c:	697b      	ldr	r3, [r7, #20]
 801600e:	ee07 3a90 	vmov	s15, r3
 8016012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016016:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801610c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801601a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801601e:	4b37      	ldr	r3, [pc, #220]	@ (80160fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016026:	ee07 3a90 	vmov	s15, r3
 801602a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801602e:	ed97 6a03 	vldr	s12, [r7, #12]
 8016032:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8016104 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8016036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801603a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801603e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016046:	ee67 7a27 	vmul.f32	s15, s14, s15
 801604a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801604e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8016050:	4b2a      	ldr	r3, [pc, #168]	@ (80160fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016054:	0a5b      	lsrs	r3, r3, #9
 8016056:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801605a:	ee07 3a90 	vmov	s15, r3
 801605e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016062:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016066:	ee37 7a87 	vadd.f32	s14, s15, s14
 801606a:	edd7 6a07 	vldr	s13, [r7, #28]
 801606e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016076:	ee17 2a90 	vmov	r2, s15
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801607e:	4b1f      	ldr	r3, [pc, #124]	@ (80160fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016082:	0c1b      	lsrs	r3, r3, #16
 8016084:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016088:	ee07 3a90 	vmov	s15, r3
 801608c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016090:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016094:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016098:	edd7 6a07 	vldr	s13, [r7, #28]
 801609c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80160a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80160a4:	ee17 2a90 	vmov	r2, s15
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80160ac:	4b13      	ldr	r3, [pc, #76]	@ (80160fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80160ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80160b0:	0e1b      	lsrs	r3, r3, #24
 80160b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80160b6:	ee07 3a90 	vmov	s15, r3
 80160ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80160be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80160c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80160c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80160ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80160ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80160d2:	ee17 2a90 	vmov	r2, s15
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80160da:	e008      	b.n	80160ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	2200      	movs	r2, #0
 80160e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	2200      	movs	r2, #0
 80160e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	2200      	movs	r2, #0
 80160ec:	609a      	str	r2, [r3, #8]
}
 80160ee:	bf00      	nop
 80160f0:	3724      	adds	r7, #36	@ 0x24
 80160f2:	46bd      	mov	sp, r7
 80160f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f8:	4770      	bx	lr
 80160fa:	bf00      	nop
 80160fc:	58024400 	.word	0x58024400
 8016100:	03d09000 	.word	0x03d09000
 8016104:	46000000 	.word	0x46000000
 8016108:	4c742400 	.word	0x4c742400
 801610c:	4a742400 	.word	0x4a742400
 8016110:	4bbebc20 	.word	0x4bbebc20

08016114 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8016114:	b480      	push	{r7}
 8016116:	b089      	sub	sp, #36	@ 0x24
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801611c:	4ba0      	ldr	r3, [pc, #640]	@ (80163a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801611e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016120:	f003 0303 	and.w	r3, r3, #3
 8016124:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8016126:	4b9e      	ldr	r3, [pc, #632]	@ (80163a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801612a:	091b      	lsrs	r3, r3, #4
 801612c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016130:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8016132:	4b9b      	ldr	r3, [pc, #620]	@ (80163a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016136:	f003 0301 	and.w	r3, r3, #1
 801613a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801613c:	4b98      	ldr	r3, [pc, #608]	@ (80163a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801613e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016140:	08db      	lsrs	r3, r3, #3
 8016142:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016146:	693a      	ldr	r2, [r7, #16]
 8016148:	fb02 f303 	mul.w	r3, r2, r3
 801614c:	ee07 3a90 	vmov	s15, r3
 8016150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016154:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8016158:	697b      	ldr	r3, [r7, #20]
 801615a:	2b00      	cmp	r3, #0
 801615c:	f000 8111 	beq.w	8016382 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8016160:	69bb      	ldr	r3, [r7, #24]
 8016162:	2b02      	cmp	r3, #2
 8016164:	f000 8083 	beq.w	801626e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8016168:	69bb      	ldr	r3, [r7, #24]
 801616a:	2b02      	cmp	r3, #2
 801616c:	f200 80a1 	bhi.w	80162b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8016170:	69bb      	ldr	r3, [r7, #24]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d003      	beq.n	801617e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8016176:	69bb      	ldr	r3, [r7, #24]
 8016178:	2b01      	cmp	r3, #1
 801617a:	d056      	beq.n	801622a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801617c:	e099      	b.n	80162b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801617e:	4b88      	ldr	r3, [pc, #544]	@ (80163a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	f003 0320 	and.w	r3, r3, #32
 8016186:	2b00      	cmp	r3, #0
 8016188:	d02d      	beq.n	80161e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801618a:	4b85      	ldr	r3, [pc, #532]	@ (80163a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	08db      	lsrs	r3, r3, #3
 8016190:	f003 0303 	and.w	r3, r3, #3
 8016194:	4a83      	ldr	r2, [pc, #524]	@ (80163a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8016196:	fa22 f303 	lsr.w	r3, r2, r3
 801619a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801619c:	68bb      	ldr	r3, [r7, #8]
 801619e:	ee07 3a90 	vmov	s15, r3
 80161a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80161a6:	697b      	ldr	r3, [r7, #20]
 80161a8:	ee07 3a90 	vmov	s15, r3
 80161ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80161b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80161b4:	4b7a      	ldr	r3, [pc, #488]	@ (80163a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80161b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80161b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80161bc:	ee07 3a90 	vmov	s15, r3
 80161c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80161c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80161c8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80163a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80161cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80161d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80161d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80161d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80161dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80161e0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80161e4:	e087      	b.n	80162f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80161e6:	697b      	ldr	r3, [r7, #20]
 80161e8:	ee07 3a90 	vmov	s15, r3
 80161ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80161f0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80163ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80161f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80161f8:	4b69      	ldr	r3, [pc, #420]	@ (80163a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80161fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80161fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016200:	ee07 3a90 	vmov	s15, r3
 8016204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016208:	ed97 6a03 	vldr	s12, [r7, #12]
 801620c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80163a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8016210:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016214:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016218:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801621c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016224:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016228:	e065      	b.n	80162f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801622a:	697b      	ldr	r3, [r7, #20]
 801622c:	ee07 3a90 	vmov	s15, r3
 8016230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016234:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80163b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8016238:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801623c:	4b58      	ldr	r3, [pc, #352]	@ (80163a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801623e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016244:	ee07 3a90 	vmov	s15, r3
 8016248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801624c:	ed97 6a03 	vldr	s12, [r7, #12]
 8016250:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80163a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8016254:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016258:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801625c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016260:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016268:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801626c:	e043      	b.n	80162f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801626e:	697b      	ldr	r3, [r7, #20]
 8016270:	ee07 3a90 	vmov	s15, r3
 8016274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016278:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80163b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801627c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016280:	4b47      	ldr	r3, [pc, #284]	@ (80163a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016288:	ee07 3a90 	vmov	s15, r3
 801628c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016290:	ed97 6a03 	vldr	s12, [r7, #12]
 8016294:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80163a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8016298:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801629c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80162a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80162a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80162a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80162ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80162b0:	e021      	b.n	80162f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80162b2:	697b      	ldr	r3, [r7, #20]
 80162b4:	ee07 3a90 	vmov	s15, r3
 80162b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80162bc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80163ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80162c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80162c4:	4b36      	ldr	r3, [pc, #216]	@ (80163a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80162c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80162c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80162cc:	ee07 3a90 	vmov	s15, r3
 80162d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80162d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80162d8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80163a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80162dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80162e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80162e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80162e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80162ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80162f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80162f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80162f6:	4b2a      	ldr	r3, [pc, #168]	@ (80163a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80162f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80162fa:	0a5b      	lsrs	r3, r3, #9
 80162fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016300:	ee07 3a90 	vmov	s15, r3
 8016304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016308:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801630c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016310:	edd7 6a07 	vldr	s13, [r7, #28]
 8016314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801631c:	ee17 2a90 	vmov	r2, s15
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8016324:	4b1e      	ldr	r3, [pc, #120]	@ (80163a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016328:	0c1b      	lsrs	r3, r3, #16
 801632a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801632e:	ee07 3a90 	vmov	s15, r3
 8016332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016336:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801633a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801633e:	edd7 6a07 	vldr	s13, [r7, #28]
 8016342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801634a:	ee17 2a90 	vmov	r2, s15
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8016352:	4b13      	ldr	r3, [pc, #76]	@ (80163a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016356:	0e1b      	lsrs	r3, r3, #24
 8016358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801635c:	ee07 3a90 	vmov	s15, r3
 8016360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016364:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016368:	ee37 7a87 	vadd.f32	s14, s15, s14
 801636c:	edd7 6a07 	vldr	s13, [r7, #28]
 8016370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016378:	ee17 2a90 	vmov	r2, s15
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8016380:	e008      	b.n	8016394 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	2200      	movs	r2, #0
 8016386:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	2200      	movs	r2, #0
 801638c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	2200      	movs	r2, #0
 8016392:	609a      	str	r2, [r3, #8]
}
 8016394:	bf00      	nop
 8016396:	3724      	adds	r7, #36	@ 0x24
 8016398:	46bd      	mov	sp, r7
 801639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639e:	4770      	bx	lr
 80163a0:	58024400 	.word	0x58024400
 80163a4:	03d09000 	.word	0x03d09000
 80163a8:	46000000 	.word	0x46000000
 80163ac:	4c742400 	.word	0x4c742400
 80163b0:	4a742400 	.word	0x4a742400
 80163b4:	4bbebc20 	.word	0x4bbebc20

080163b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b084      	sub	sp, #16
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
 80163c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80163c2:	2300      	movs	r3, #0
 80163c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80163c6:	4b53      	ldr	r3, [pc, #332]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 80163c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163ca:	f003 0303 	and.w	r3, r3, #3
 80163ce:	2b03      	cmp	r3, #3
 80163d0:	d101      	bne.n	80163d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80163d2:	2301      	movs	r3, #1
 80163d4:	e099      	b.n	801650a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80163d6:	4b4f      	ldr	r3, [pc, #316]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	4a4e      	ldr	r2, [pc, #312]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 80163dc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80163e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80163e2:	f7f9 fd47 	bl	800fe74 <HAL_GetTick>
 80163e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80163e8:	e008      	b.n	80163fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80163ea:	f7f9 fd43 	bl	800fe74 <HAL_GetTick>
 80163ee:	4602      	mov	r2, r0
 80163f0:	68bb      	ldr	r3, [r7, #8]
 80163f2:	1ad3      	subs	r3, r2, r3
 80163f4:	2b02      	cmp	r3, #2
 80163f6:	d901      	bls.n	80163fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80163f8:	2303      	movs	r3, #3
 80163fa:	e086      	b.n	801650a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80163fc:	4b45      	ldr	r3, [pc, #276]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016404:	2b00      	cmp	r3, #0
 8016406:	d1f0      	bne.n	80163ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8016408:	4b42      	ldr	r3, [pc, #264]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 801640a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801640c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	031b      	lsls	r3, r3, #12
 8016416:	493f      	ldr	r1, [pc, #252]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 8016418:	4313      	orrs	r3, r2
 801641a:	628b      	str	r3, [r1, #40]	@ 0x28
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	685b      	ldr	r3, [r3, #4]
 8016420:	3b01      	subs	r3, #1
 8016422:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	689b      	ldr	r3, [r3, #8]
 801642a:	3b01      	subs	r3, #1
 801642c:	025b      	lsls	r3, r3, #9
 801642e:	b29b      	uxth	r3, r3
 8016430:	431a      	orrs	r2, r3
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	68db      	ldr	r3, [r3, #12]
 8016436:	3b01      	subs	r3, #1
 8016438:	041b      	lsls	r3, r3, #16
 801643a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801643e:	431a      	orrs	r2, r3
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	691b      	ldr	r3, [r3, #16]
 8016444:	3b01      	subs	r3, #1
 8016446:	061b      	lsls	r3, r3, #24
 8016448:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801644c:	4931      	ldr	r1, [pc, #196]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 801644e:	4313      	orrs	r3, r2
 8016450:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8016452:	4b30      	ldr	r3, [pc, #192]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 8016454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016456:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	695b      	ldr	r3, [r3, #20]
 801645e:	492d      	ldr	r1, [pc, #180]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 8016460:	4313      	orrs	r3, r2
 8016462:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8016464:	4b2b      	ldr	r3, [pc, #172]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 8016466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016468:	f023 0220 	bic.w	r2, r3, #32
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	699b      	ldr	r3, [r3, #24]
 8016470:	4928      	ldr	r1, [pc, #160]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 8016472:	4313      	orrs	r3, r2
 8016474:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8016476:	4b27      	ldr	r3, [pc, #156]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 8016478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801647a:	4a26      	ldr	r2, [pc, #152]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 801647c:	f023 0310 	bic.w	r3, r3, #16
 8016480:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8016482:	4b24      	ldr	r3, [pc, #144]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 8016484:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016486:	4b24      	ldr	r3, [pc, #144]	@ (8016518 <RCCEx_PLL2_Config+0x160>)
 8016488:	4013      	ands	r3, r2
 801648a:	687a      	ldr	r2, [r7, #4]
 801648c:	69d2      	ldr	r2, [r2, #28]
 801648e:	00d2      	lsls	r2, r2, #3
 8016490:	4920      	ldr	r1, [pc, #128]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 8016492:	4313      	orrs	r3, r2
 8016494:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8016496:	4b1f      	ldr	r3, [pc, #124]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 8016498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801649a:	4a1e      	ldr	r2, [pc, #120]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 801649c:	f043 0310 	orr.w	r3, r3, #16
 80164a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80164a2:	683b      	ldr	r3, [r7, #0]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d106      	bne.n	80164b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80164a8:	4b1a      	ldr	r3, [pc, #104]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 80164aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164ac:	4a19      	ldr	r2, [pc, #100]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 80164ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80164b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80164b4:	e00f      	b.n	80164d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80164b6:	683b      	ldr	r3, [r7, #0]
 80164b8:	2b01      	cmp	r3, #1
 80164ba:	d106      	bne.n	80164ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80164bc:	4b15      	ldr	r3, [pc, #84]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 80164be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164c0:	4a14      	ldr	r2, [pc, #80]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 80164c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80164c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80164c8:	e005      	b.n	80164d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80164ca:	4b12      	ldr	r3, [pc, #72]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 80164cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164ce:	4a11      	ldr	r2, [pc, #68]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 80164d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80164d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80164d6:	4b0f      	ldr	r3, [pc, #60]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	4a0e      	ldr	r2, [pc, #56]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 80164dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80164e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80164e2:	f7f9 fcc7 	bl	800fe74 <HAL_GetTick>
 80164e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80164e8:	e008      	b.n	80164fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80164ea:	f7f9 fcc3 	bl	800fe74 <HAL_GetTick>
 80164ee:	4602      	mov	r2, r0
 80164f0:	68bb      	ldr	r3, [r7, #8]
 80164f2:	1ad3      	subs	r3, r2, r3
 80164f4:	2b02      	cmp	r3, #2
 80164f6:	d901      	bls.n	80164fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80164f8:	2303      	movs	r3, #3
 80164fa:	e006      	b.n	801650a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80164fc:	4b05      	ldr	r3, [pc, #20]	@ (8016514 <RCCEx_PLL2_Config+0x15c>)
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016504:	2b00      	cmp	r3, #0
 8016506:	d0f0      	beq.n	80164ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8016508:	7bfb      	ldrb	r3, [r7, #15]
}
 801650a:	4618      	mov	r0, r3
 801650c:	3710      	adds	r7, #16
 801650e:	46bd      	mov	sp, r7
 8016510:	bd80      	pop	{r7, pc}
 8016512:	bf00      	nop
 8016514:	58024400 	.word	0x58024400
 8016518:	ffff0007 	.word	0xffff0007

0801651c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801651c:	b580      	push	{r7, lr}
 801651e:	b084      	sub	sp, #16
 8016520:	af00      	add	r7, sp, #0
 8016522:	6078      	str	r0, [r7, #4]
 8016524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8016526:	2300      	movs	r3, #0
 8016528:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801652a:	4b53      	ldr	r3, [pc, #332]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 801652c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801652e:	f003 0303 	and.w	r3, r3, #3
 8016532:	2b03      	cmp	r3, #3
 8016534:	d101      	bne.n	801653a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8016536:	2301      	movs	r3, #1
 8016538:	e099      	b.n	801666e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801653a:	4b4f      	ldr	r3, [pc, #316]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	4a4e      	ldr	r2, [pc, #312]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 8016540:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8016544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016546:	f7f9 fc95 	bl	800fe74 <HAL_GetTick>
 801654a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801654c:	e008      	b.n	8016560 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801654e:	f7f9 fc91 	bl	800fe74 <HAL_GetTick>
 8016552:	4602      	mov	r2, r0
 8016554:	68bb      	ldr	r3, [r7, #8]
 8016556:	1ad3      	subs	r3, r2, r3
 8016558:	2b02      	cmp	r3, #2
 801655a:	d901      	bls.n	8016560 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801655c:	2303      	movs	r3, #3
 801655e:	e086      	b.n	801666e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8016560:	4b45      	ldr	r3, [pc, #276]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016568:	2b00      	cmp	r3, #0
 801656a:	d1f0      	bne.n	801654e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801656c:	4b42      	ldr	r3, [pc, #264]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 801656e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016570:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	051b      	lsls	r3, r3, #20
 801657a:	493f      	ldr	r1, [pc, #252]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 801657c:	4313      	orrs	r3, r2
 801657e:	628b      	str	r3, [r1, #40]	@ 0x28
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	685b      	ldr	r3, [r3, #4]
 8016584:	3b01      	subs	r3, #1
 8016586:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	689b      	ldr	r3, [r3, #8]
 801658e:	3b01      	subs	r3, #1
 8016590:	025b      	lsls	r3, r3, #9
 8016592:	b29b      	uxth	r3, r3
 8016594:	431a      	orrs	r2, r3
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	68db      	ldr	r3, [r3, #12]
 801659a:	3b01      	subs	r3, #1
 801659c:	041b      	lsls	r3, r3, #16
 801659e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80165a2:	431a      	orrs	r2, r3
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	691b      	ldr	r3, [r3, #16]
 80165a8:	3b01      	subs	r3, #1
 80165aa:	061b      	lsls	r3, r3, #24
 80165ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80165b0:	4931      	ldr	r1, [pc, #196]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 80165b2:	4313      	orrs	r3, r2
 80165b4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80165b6:	4b30      	ldr	r3, [pc, #192]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 80165b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	695b      	ldr	r3, [r3, #20]
 80165c2:	492d      	ldr	r1, [pc, #180]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 80165c4:	4313      	orrs	r3, r2
 80165c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80165c8:	4b2b      	ldr	r3, [pc, #172]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 80165ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	699b      	ldr	r3, [r3, #24]
 80165d4:	4928      	ldr	r1, [pc, #160]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 80165d6:	4313      	orrs	r3, r2
 80165d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80165da:	4b27      	ldr	r3, [pc, #156]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 80165dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165de:	4a26      	ldr	r2, [pc, #152]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 80165e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80165e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80165e6:	4b24      	ldr	r3, [pc, #144]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 80165e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80165ea:	4b24      	ldr	r3, [pc, #144]	@ (801667c <RCCEx_PLL3_Config+0x160>)
 80165ec:	4013      	ands	r3, r2
 80165ee:	687a      	ldr	r2, [r7, #4]
 80165f0:	69d2      	ldr	r2, [r2, #28]
 80165f2:	00d2      	lsls	r2, r2, #3
 80165f4:	4920      	ldr	r1, [pc, #128]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 80165f6:	4313      	orrs	r3, r2
 80165f8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80165fa:	4b1f      	ldr	r3, [pc, #124]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 80165fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165fe:	4a1e      	ldr	r2, [pc, #120]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 8016600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016604:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8016606:	683b      	ldr	r3, [r7, #0]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d106      	bne.n	801661a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801660c:	4b1a      	ldr	r3, [pc, #104]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 801660e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016610:	4a19      	ldr	r2, [pc, #100]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 8016612:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8016616:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8016618:	e00f      	b.n	801663a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801661a:	683b      	ldr	r3, [r7, #0]
 801661c:	2b01      	cmp	r3, #1
 801661e:	d106      	bne.n	801662e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8016620:	4b15      	ldr	r3, [pc, #84]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 8016622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016624:	4a14      	ldr	r2, [pc, #80]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 8016626:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801662a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801662c:	e005      	b.n	801663a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801662e:	4b12      	ldr	r3, [pc, #72]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 8016630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016632:	4a11      	ldr	r2, [pc, #68]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 8016634:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8016638:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801663a:	4b0f      	ldr	r3, [pc, #60]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	4a0e      	ldr	r2, [pc, #56]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 8016640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016646:	f7f9 fc15 	bl	800fe74 <HAL_GetTick>
 801664a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801664c:	e008      	b.n	8016660 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801664e:	f7f9 fc11 	bl	800fe74 <HAL_GetTick>
 8016652:	4602      	mov	r2, r0
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	1ad3      	subs	r3, r2, r3
 8016658:	2b02      	cmp	r3, #2
 801665a:	d901      	bls.n	8016660 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801665c:	2303      	movs	r3, #3
 801665e:	e006      	b.n	801666e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8016660:	4b05      	ldr	r3, [pc, #20]	@ (8016678 <RCCEx_PLL3_Config+0x15c>)
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016668:	2b00      	cmp	r3, #0
 801666a:	d0f0      	beq.n	801664e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801666c:	7bfb      	ldrb	r3, [r7, #15]
}
 801666e:	4618      	mov	r0, r3
 8016670:	3710      	adds	r7, #16
 8016672:	46bd      	mov	sp, r7
 8016674:	bd80      	pop	{r7, pc}
 8016676:	bf00      	nop
 8016678:	58024400 	.word	0x58024400
 801667c:	ffff0007 	.word	0xffff0007

08016680 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b08a      	sub	sp, #40	@ 0x28
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d101      	bne.n	8016692 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 801668e:	2301      	movs	r3, #1
 8016690:	e075      	b.n	801677e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016698:	b2db      	uxtb	r3, r3
 801669a:	2b00      	cmp	r3, #0
 801669c:	d105      	bne.n	80166aa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	2200      	movs	r2, #0
 80166a2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80166a4:	6878      	ldr	r0, [r7, #4]
 80166a6:	f7f5 f813 	bl	800b6d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	2204      	movs	r2, #4
 80166ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80166b2:	6878      	ldr	r0, [r7, #4]
 80166b4:	f000 f868 	bl	8016788 <HAL_SD_InitCard>
 80166b8:	4603      	mov	r3, r0
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d001      	beq.n	80166c2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80166be:	2301      	movs	r3, #1
 80166c0:	e05d      	b.n	801677e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80166c2:	f107 0308 	add.w	r3, r7, #8
 80166c6:	4619      	mov	r1, r3
 80166c8:	6878      	ldr	r0, [r7, #4]
 80166ca:	f000 fdaf 	bl	801722c <HAL_SD_GetCardStatus>
 80166ce:	4603      	mov	r3, r0
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d001      	beq.n	80166d8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80166d4:	2301      	movs	r3, #1
 80166d6:	e052      	b.n	801677e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80166d8:	7e3b      	ldrb	r3, [r7, #24]
 80166da:	b2db      	uxtb	r3, r3
 80166dc:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80166de:	7e7b      	ldrb	r3, [r7, #25]
 80166e0:	b2db      	uxtb	r3, r3
 80166e2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80166e8:	2b01      	cmp	r3, #1
 80166ea:	d10a      	bne.n	8016702 <HAL_SD_Init+0x82>
 80166ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d102      	bne.n	80166f8 <HAL_SD_Init+0x78>
 80166f2:	6a3b      	ldr	r3, [r7, #32]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d004      	beq.n	8016702 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80166fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8016700:	e00b      	b.n	801671a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016706:	2b01      	cmp	r3, #1
 8016708:	d104      	bne.n	8016714 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016710:	659a      	str	r2, [r3, #88]	@ 0x58
 8016712:	e002      	b.n	801671a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	2200      	movs	r2, #0
 8016718:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	68db      	ldr	r3, [r3, #12]
 801671e:	4619      	mov	r1, r3
 8016720:	6878      	ldr	r0, [r7, #4]
 8016722:	f000 fe6d 	bl	8017400 <HAL_SD_ConfigWideBusOperation>
 8016726:	4603      	mov	r3, r0
 8016728:	2b00      	cmp	r3, #0
 801672a:	d001      	beq.n	8016730 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 801672c:	2301      	movs	r3, #1
 801672e:	e026      	b.n	801677e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8016730:	f7f9 fba0 	bl	800fe74 <HAL_GetTick>
 8016734:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8016736:	e011      	b.n	801675c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8016738:	f7f9 fb9c 	bl	800fe74 <HAL_GetTick>
 801673c:	4602      	mov	r2, r0
 801673e:	69fb      	ldr	r3, [r7, #28]
 8016740:	1ad3      	subs	r3, r2, r3
 8016742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016746:	d109      	bne.n	801675c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801674e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	2201      	movs	r2, #1
 8016754:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8016758:	2303      	movs	r3, #3
 801675a:	e010      	b.n	801677e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 801675c:	6878      	ldr	r0, [r7, #4]
 801675e:	f000 ff61 	bl	8017624 <HAL_SD_GetCardState>
 8016762:	4603      	mov	r3, r0
 8016764:	2b04      	cmp	r3, #4
 8016766:	d1e7      	bne.n	8016738 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	2200      	movs	r2, #0
 801676c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	2200      	movs	r2, #0
 8016772:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	2201      	movs	r2, #1
 8016778:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 801677c:	2300      	movs	r3, #0
}
 801677e:	4618      	mov	r0, r3
 8016780:	3728      	adds	r7, #40	@ 0x28
 8016782:	46bd      	mov	sp, r7
 8016784:	bd80      	pop	{r7, pc}
	...

08016788 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8016788:	b590      	push	{r4, r7, lr}
 801678a:	b08d      	sub	sp, #52	@ 0x34
 801678c:	af02      	add	r7, sp, #8
 801678e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8016790:	2300      	movs	r3, #0
 8016792:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8016794:	2300      	movs	r3, #0
 8016796:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8016798:	2300      	movs	r3, #0
 801679a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801679c:	2300      	movs	r3, #0
 801679e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80167a0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80167a4:	f04f 0100 	mov.w	r1, #0
 80167a8:	f7fe fc76 	bl	8015098 <HAL_RCCEx_GetPeriphCLKFreq>
 80167ac:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80167ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d109      	bne.n	80167c8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	2201      	movs	r2, #1
 80167b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80167c2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80167c4:	2301      	movs	r3, #1
 80167c6:	e070      	b.n	80168aa <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80167c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167ca:	0a1b      	lsrs	r3, r3, #8
 80167cc:	4a39      	ldr	r2, [pc, #228]	@ (80168b4 <HAL_SD_InitCard+0x12c>)
 80167ce:	fba2 2303 	umull	r2, r3, r2, r3
 80167d2:	091b      	lsrs	r3, r3, #4
 80167d4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	681c      	ldr	r4, [r3, #0]
 80167da:	466a      	mov	r2, sp
 80167dc:	f107 0318 	add.w	r3, r7, #24
 80167e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80167e4:	e882 0003 	stmia.w	r2, {r0, r1}
 80167e8:	f107 030c 	add.w	r3, r7, #12
 80167ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80167ee:	4620      	mov	r0, r4
 80167f0:	f002 fe5e 	bl	80194b0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	4618      	mov	r0, r3
 80167fa:	f002 fea1 	bl	8019540 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80167fe:	69fb      	ldr	r3, [r7, #28]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d005      	beq.n	8016810 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8016804:	69fb      	ldr	r3, [r7, #28]
 8016806:	005b      	lsls	r3, r3, #1
 8016808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801680a:	fbb2 f3f3 	udiv	r3, r2, r3
 801680e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8016810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016812:	2b00      	cmp	r3, #0
 8016814:	d007      	beq.n	8016826 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8016816:	4a28      	ldr	r2, [pc, #160]	@ (80168b8 <HAL_SD_InitCard+0x130>)
 8016818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801681a:	fbb2 f3f3 	udiv	r3, r2, r3
 801681e:	3301      	adds	r3, #1
 8016820:	4618      	mov	r0, r3
 8016822:	f7f9 fb33 	bl	800fe8c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8016826:	6878      	ldr	r0, [r7, #4]
 8016828:	f000 ffea 	bl	8017800 <SD_PowerON>
 801682c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801682e:	6a3b      	ldr	r3, [r7, #32]
 8016830:	2b00      	cmp	r3, #0
 8016832:	d00b      	beq.n	801684c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	2201      	movs	r2, #1
 8016838:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016840:	6a3b      	ldr	r3, [r7, #32]
 8016842:	431a      	orrs	r2, r3
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8016848:	2301      	movs	r3, #1
 801684a:	e02e      	b.n	80168aa <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 801684c:	6878      	ldr	r0, [r7, #4]
 801684e:	f000 ff09 	bl	8017664 <SD_InitCard>
 8016852:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8016854:	6a3b      	ldr	r3, [r7, #32]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d00b      	beq.n	8016872 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	2201      	movs	r2, #1
 801685e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016866:	6a3b      	ldr	r3, [r7, #32]
 8016868:	431a      	orrs	r2, r3
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801686e:	2301      	movs	r3, #1
 8016870:	e01b      	b.n	80168aa <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801687a:	4618      	mov	r0, r3
 801687c:	f002 fef6 	bl	801966c <SDMMC_CmdBlockLength>
 8016880:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8016882:	6a3b      	ldr	r3, [r7, #32]
 8016884:	2b00      	cmp	r3, #0
 8016886:	d00f      	beq.n	80168a8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	4a0b      	ldr	r2, [pc, #44]	@ (80168bc <HAL_SD_InitCard+0x134>)
 801688e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016894:	6a3b      	ldr	r3, [r7, #32]
 8016896:	431a      	orrs	r2, r3
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2201      	movs	r2, #1
 80168a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80168a4:	2301      	movs	r3, #1
 80168a6:	e000      	b.n	80168aa <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80168a8:	2300      	movs	r3, #0
}
 80168aa:	4618      	mov	r0, r3
 80168ac:	372c      	adds	r7, #44	@ 0x2c
 80168ae:	46bd      	mov	sp, r7
 80168b0:	bd90      	pop	{r4, r7, pc}
 80168b2:	bf00      	nop
 80168b4:	014f8b59 	.word	0x014f8b59
 80168b8:	00012110 	.word	0x00012110
 80168bc:	1fe00fff 	.word	0x1fe00fff

080168c0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b08c      	sub	sp, #48	@ 0x30
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	60f8      	str	r0, [r7, #12]
 80168c8:	60b9      	str	r1, [r7, #8]
 80168ca:	607a      	str	r2, [r7, #4]
 80168cc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 80168d2:	68bb      	ldr	r3, [r7, #8]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d107      	bne.n	80168e8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80168dc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80168e4:	2301      	movs	r3, #1
 80168e6:	e08d      	b.n	8016a04 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80168ee:	b2db      	uxtb	r3, r3
 80168f0:	2b01      	cmp	r3, #1
 80168f2:	f040 8086 	bne.w	8016a02 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	2200      	movs	r2, #0
 80168fa:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80168fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80168fe:	683b      	ldr	r3, [r7, #0]
 8016900:	441a      	add	r2, r3
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016906:	429a      	cmp	r2, r3
 8016908:	d907      	bls.n	801691a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801690e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8016916:	2301      	movs	r3, #1
 8016918:	e074      	b.n	8016a04 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	2203      	movs	r2, #3
 801691e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	2200      	movs	r2, #0
 8016928:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	68ba      	ldr	r2, [r7, #8]
 801692e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8016930:	683b      	ldr	r3, [r7, #0]
 8016932:	025a      	lsls	r2, r3, #9
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801693c:	2b01      	cmp	r3, #1
 801693e:	d002      	beq.n	8016946 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8016940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016942:	025b      	lsls	r3, r3, #9
 8016944:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8016946:	f04f 33ff 	mov.w	r3, #4294967295
 801694a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 801694c:	683b      	ldr	r3, [r7, #0]
 801694e:	025b      	lsls	r3, r3, #9
 8016950:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8016952:	2390      	movs	r3, #144	@ 0x90
 8016954:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8016956:	2302      	movs	r3, #2
 8016958:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801695a:	2300      	movs	r3, #0
 801695c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801695e:	2300      	movs	r3, #0
 8016960:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	f107 0210 	add.w	r2, r7, #16
 801696a:	4611      	mov	r1, r2
 801696c:	4618      	mov	r0, r3
 801696e:	f002 fe51 	bl	8019614 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	68da      	ldr	r2, [r3, #12]
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016980:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	68ba      	ldr	r2, [r7, #8]
 8016988:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	2201      	movs	r2, #1
 8016990:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8016992:	683b      	ldr	r3, [r7, #0]
 8016994:	2b01      	cmp	r3, #1
 8016996:	d90a      	bls.n	80169ae <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	2282      	movs	r2, #130	@ 0x82
 801699c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80169a4:	4618      	mov	r0, r3
 80169a6:	f002 fea7 	bl	80196f8 <SDMMC_CmdReadMultiBlock>
 80169aa:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80169ac:	e009      	b.n	80169c2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	2281      	movs	r2, #129	@ 0x81
 80169b2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80169ba:	4618      	mov	r0, r3
 80169bc:	f002 fe79 	bl	80196b2 <SDMMC_CmdReadSingleBlock>
 80169c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80169c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d012      	beq.n	80169ee <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	4a0f      	ldr	r2, [pc, #60]	@ (8016a0c <HAL_SD_ReadBlocks_DMA+0x14c>)
 80169ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80169d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169d6:	431a      	orrs	r2, r3
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	2201      	movs	r2, #1
 80169e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	2200      	movs	r2, #0
 80169e8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80169ea:	2301      	movs	r3, #1
 80169ec:	e00a      	b.n	8016a04 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80169fc:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 80169fe:	2300      	movs	r3, #0
 8016a00:	e000      	b.n	8016a04 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8016a02:	2302      	movs	r3, #2
  }
}
 8016a04:	4618      	mov	r0, r3
 8016a06:	3730      	adds	r7, #48	@ 0x30
 8016a08:	46bd      	mov	sp, r7
 8016a0a:	bd80      	pop	{r7, pc}
 8016a0c:	1fe00fff 	.word	0x1fe00fff

08016a10 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8016a10:	b580      	push	{r7, lr}
 8016a12:	b08c      	sub	sp, #48	@ 0x30
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	60f8      	str	r0, [r7, #12]
 8016a18:	60b9      	str	r1, [r7, #8]
 8016a1a:	607a      	str	r2, [r7, #4]
 8016a1c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8016a22:	68bb      	ldr	r3, [r7, #8]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d107      	bne.n	8016a38 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016a2c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8016a34:	2301      	movs	r3, #1
 8016a36:	e08d      	b.n	8016b54 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016a3e:	b2db      	uxtb	r3, r3
 8016a40:	2b01      	cmp	r3, #1
 8016a42:	f040 8086 	bne.w	8016b52 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	2200      	movs	r2, #0
 8016a4a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8016a4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016a4e:	683b      	ldr	r3, [r7, #0]
 8016a50:	441a      	add	r2, r3
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016a56:	429a      	cmp	r2, r3
 8016a58:	d907      	bls.n	8016a6a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016a5e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8016a66:	2301      	movs	r3, #1
 8016a68:	e074      	b.n	8016b54 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	2203      	movs	r2, #3
 8016a6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	2200      	movs	r2, #0
 8016a78:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	68ba      	ldr	r2, [r7, #8]
 8016a7e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8016a80:	683b      	ldr	r3, [r7, #0]
 8016a82:	025a      	lsls	r2, r3, #9
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016a8c:	2b01      	cmp	r3, #1
 8016a8e:	d002      	beq.n	8016a96 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8016a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a92:	025b      	lsls	r3, r3, #9
 8016a94:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8016a96:	f04f 33ff 	mov.w	r3, #4294967295
 8016a9a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8016a9c:	683b      	ldr	r3, [r7, #0]
 8016a9e:	025b      	lsls	r3, r3, #9
 8016aa0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8016aa2:	2390      	movs	r3, #144	@ 0x90
 8016aa4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8016aaa:	2300      	movs	r3, #0
 8016aac:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8016aae:	2300      	movs	r3, #0
 8016ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	f107 0210 	add.w	r2, r7, #16
 8016aba:	4611      	mov	r1, r2
 8016abc:	4618      	mov	r0, r3
 8016abe:	f002 fda9 	bl	8019614 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	68da      	ldr	r2, [r3, #12]
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016ad0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	68ba      	ldr	r2, [r7, #8]
 8016ad8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	2201      	movs	r2, #1
 8016ae0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8016ae2:	683b      	ldr	r3, [r7, #0]
 8016ae4:	2b01      	cmp	r3, #1
 8016ae6:	d90a      	bls.n	8016afe <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	22a0      	movs	r2, #160	@ 0xa0
 8016aec:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016af4:	4618      	mov	r0, r3
 8016af6:	f002 fe45 	bl	8019784 <SDMMC_CmdWriteMultiBlock>
 8016afa:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8016afc:	e009      	b.n	8016b12 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	2290      	movs	r2, #144	@ 0x90
 8016b02:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f002 fe17 	bl	801973e <SDMMC_CmdWriteSingleBlock>
 8016b10:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8016b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d012      	beq.n	8016b3e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	4a0f      	ldr	r2, [pc, #60]	@ (8016b5c <HAL_SD_WriteBlocks_DMA+0x14c>)
 8016b1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b26:	431a      	orrs	r2, r3
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	2201      	movs	r2, #1
 8016b30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	2200      	movs	r2, #0
 8016b38:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8016b3a:	2301      	movs	r3, #1
 8016b3c:	e00a      	b.n	8016b54 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8016b4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8016b4e:	2300      	movs	r3, #0
 8016b50:	e000      	b.n	8016b54 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8016b52:	2302      	movs	r3, #2
  }
}
 8016b54:	4618      	mov	r0, r3
 8016b56:	3730      	adds	r7, #48	@ 0x30
 8016b58:	46bd      	mov	sp, r7
 8016b5a:	bd80      	pop	{r7, pc}
 8016b5c:	1fe00fff 	.word	0x1fe00fff

08016b60 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b084      	sub	sp, #16
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b6c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016b74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d008      	beq.n	8016b8e <HAL_SD_IRQHandler+0x2e>
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	f003 0308 	and.w	r3, r3, #8
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d003      	beq.n	8016b8e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8016b86:	6878      	ldr	r0, [r7, #4]
 8016b88:	f001 f926 	bl	8017dd8 <SD_Read_IT>
 8016b8c:	e19a      	b.n	8016ec4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	f000 80ac 	beq.w	8016cf6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016ba6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	681a      	ldr	r2, [r3, #0]
 8016bb2:	4b59      	ldr	r3, [pc, #356]	@ (8016d18 <HAL_SD_IRQHandler+0x1b8>)
 8016bb4:	400b      	ands	r3, r1
 8016bb6:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	681b      	ldr	r3, [r3, #0]
 8016bc2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8016bc6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	68da      	ldr	r2, [r3, #12]
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8016bd6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	f003 0308 	and.w	r3, r3, #8
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d038      	beq.n	8016c54 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	f003 0302 	and.w	r3, r3, #2
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d104      	bne.n	8016bf6 <HAL_SD_IRQHandler+0x96>
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	f003 0320 	and.w	r3, r3, #32
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d011      	beq.n	8016c1a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	f002 fde6 	bl	80197cc <SDMMC_CmdStopTransfer>
 8016c00:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8016c02:	68bb      	ldr	r3, [r7, #8]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d008      	beq.n	8016c1a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016c0c:	68bb      	ldr	r3, [r7, #8]
 8016c0e:	431a      	orrs	r2, r3
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8016c14:	6878      	ldr	r0, [r7, #4]
 8016c16:	f000 f95b 	bl	8016ed0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	4a3f      	ldr	r2, [pc, #252]	@ (8016d1c <HAL_SD_IRQHandler+0x1bc>)
 8016c20:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	2201      	movs	r2, #1
 8016c26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	2200      	movs	r2, #0
 8016c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	f003 0301 	and.w	r3, r3, #1
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d104      	bne.n	8016c44 <HAL_SD_IRQHandler+0xe4>
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	f003 0302 	and.w	r3, r3, #2
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d003      	beq.n	8016c4c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8016c44:	6878      	ldr	r0, [r7, #4]
 8016c46:	f003 fa73 	bl	801a130 <HAL_SD_RxCpltCallback>
 8016c4a:	e13b      	b.n	8016ec4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8016c4c:	6878      	ldr	r0, [r7, #4]
 8016c4e:	f003 fa65 	bl	801a11c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8016c52:	e137      	b.n	8016ec4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	f000 8132 	beq.w	8016ec4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	2200      	movs	r2, #0
 8016c66:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	2200      	movs	r2, #0
 8016c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	2200      	movs	r2, #0
 8016c76:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	f003 0302 	and.w	r3, r3, #2
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d104      	bne.n	8016c8c <HAL_SD_IRQHandler+0x12c>
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	f003 0320 	and.w	r3, r3, #32
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d011      	beq.n	8016cb0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	4618      	mov	r0, r3
 8016c92:	f002 fd9b 	bl	80197cc <SDMMC_CmdStopTransfer>
 8016c96:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8016c98:	68bb      	ldr	r3, [r7, #8]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d008      	beq.n	8016cb0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016ca2:	68bb      	ldr	r3, [r7, #8]
 8016ca4:	431a      	orrs	r2, r3
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8016caa:	6878      	ldr	r0, [r7, #4]
 8016cac:	f000 f910 	bl	8016ed0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	2201      	movs	r2, #1
 8016cb4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	2200      	movs	r2, #0
 8016cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	f003 0310 	and.w	r3, r3, #16
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d104      	bne.n	8016cd2 <HAL_SD_IRQHandler+0x172>
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	f003 0320 	and.w	r3, r3, #32
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d002      	beq.n	8016cd8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8016cd2:	6878      	ldr	r0, [r7, #4]
 8016cd4:	f003 fa22 	bl	801a11c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	f003 0301 	and.w	r3, r3, #1
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d105      	bne.n	8016cee <HAL_SD_IRQHandler+0x18e>
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	f003 0302 	and.w	r3, r3, #2
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	f000 80eb 	beq.w	8016ec4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8016cee:	6878      	ldr	r0, [r7, #4]
 8016cf0:	f003 fa1e 	bl	801a130 <HAL_SD_RxCpltCallback>
}
 8016cf4:	e0e6      	b.n	8016ec4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016cfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d00d      	beq.n	8016d20 <HAL_SD_IRQHandler+0x1c0>
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	f003 0308 	and.w	r3, r3, #8
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d008      	beq.n	8016d20 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8016d0e:	6878      	ldr	r0, [r7, #4]
 8016d10:	f001 f8a8 	bl	8017e64 <SD_Write_IT>
 8016d14:	e0d6      	b.n	8016ec4 <HAL_SD_IRQHandler+0x364>
 8016d16:	bf00      	nop
 8016d18:	ffff3ec5 	.word	0xffff3ec5
 8016d1c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d26:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	f000 809d 	beq.w	8016e6a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d36:	f003 0302 	and.w	r3, r3, #2
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d005      	beq.n	8016d4a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d42:	f043 0202 	orr.w	r2, r3, #2
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d50:	f003 0308 	and.w	r3, r3, #8
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d005      	beq.n	8016d64 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d5c:	f043 0208 	orr.w	r2, r3, #8
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d6a:	f003 0320 	and.w	r3, r3, #32
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d005      	beq.n	8016d7e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d76:	f043 0220 	orr.w	r2, r3, #32
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d84:	f003 0310 	and.w	r3, r3, #16
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d005      	beq.n	8016d98 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d90:	f043 0210 	orr.w	r2, r3, #16
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	4a4b      	ldr	r2, [pc, #300]	@ (8016ecc <HAL_SD_IRQHandler+0x36c>)
 8016d9e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8016dae:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	68da      	ldr	r2, [r3, #12]
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8016dbe:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8016dce:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	68da      	ldr	r2, [r3, #12]
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8016dde:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	4618      	mov	r0, r3
 8016de6:	f002 fcf1 	bl	80197cc <SDMMC_CmdStopTransfer>
 8016dea:	4602      	mov	r2, r0
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016df0:	431a      	orrs	r2, r3
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	68da      	ldr	r2, [r3, #12]
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8016e04:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016e0e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	f003 0308 	and.w	r3, r3, #8
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d00a      	beq.n	8016e30 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	2201      	movs	r2, #1
 8016e1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	2200      	movs	r2, #0
 8016e26:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8016e28:	6878      	ldr	r0, [r7, #4]
 8016e2a:	f000 f851 	bl	8016ed0 <HAL_SD_ErrorCallback>
}
 8016e2e:	e049      	b.n	8016ec4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d044      	beq.n	8016ec4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d040      	beq.n	8016ec4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8016e50:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	2200      	movs	r2, #0
 8016e58:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	2201      	movs	r2, #1
 8016e5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8016e62:	6878      	ldr	r0, [r7, #4]
 8016e64:	f000 f834 	bl	8016ed0 <HAL_SD_ErrorCallback>
}
 8016e68:	e02c      	b.n	8016ec4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d025      	beq.n	8016ec4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016e80:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016e88:	f003 0304 	and.w	r3, r3, #4
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d10c      	bne.n	8016eaa <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	f003 0320 	and.w	r3, r3, #32
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d003      	beq.n	8016ea2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8016e9a:	6878      	ldr	r0, [r7, #4]
 8016e9c:	f001 f84a 	bl	8017f34 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8016ea0:	e010      	b.n	8016ec4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8016ea2:	6878      	ldr	r0, [r7, #4]
 8016ea4:	f001 f832 	bl	8017f0c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8016ea8:	e00c      	b.n	8016ec4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	f003 0320 	and.w	r3, r3, #32
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d003      	beq.n	8016ebc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8016eb4:	6878      	ldr	r0, [r7, #4]
 8016eb6:	f001 f833 	bl	8017f20 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8016eba:	e003      	b.n	8016ec4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8016ebc:	6878      	ldr	r0, [r7, #4]
 8016ebe:	f001 f81b 	bl	8017ef8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8016ec2:	e7ff      	b.n	8016ec4 <HAL_SD_IRQHandler+0x364>
 8016ec4:	bf00      	nop
 8016ec6:	3710      	adds	r7, #16
 8016ec8:	46bd      	mov	sp, r7
 8016eca:	bd80      	pop	{r7, pc}
 8016ecc:	18000f3a 	.word	0x18000f3a

08016ed0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8016ed0:	b480      	push	{r7}
 8016ed2:	b083      	sub	sp, #12
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8016ed8:	bf00      	nop
 8016eda:	370c      	adds	r7, #12
 8016edc:	46bd      	mov	sp, r7
 8016ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ee2:	4770      	bx	lr

08016ee4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8016ee4:	b480      	push	{r7}
 8016ee6:	b083      	sub	sp, #12
 8016ee8:	af00      	add	r7, sp, #0
 8016eea:	6078      	str	r0, [r7, #4]
 8016eec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016ef2:	0f9b      	lsrs	r3, r3, #30
 8016ef4:	b2da      	uxtb	r2, r3
 8016ef6:	683b      	ldr	r3, [r7, #0]
 8016ef8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016efe:	0e9b      	lsrs	r3, r3, #26
 8016f00:	b2db      	uxtb	r3, r3
 8016f02:	f003 030f 	and.w	r3, r3, #15
 8016f06:	b2da      	uxtb	r2, r3
 8016f08:	683b      	ldr	r3, [r7, #0]
 8016f0a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016f10:	0e1b      	lsrs	r3, r3, #24
 8016f12:	b2db      	uxtb	r3, r3
 8016f14:	f003 0303 	and.w	r3, r3, #3
 8016f18:	b2da      	uxtb	r2, r3
 8016f1a:	683b      	ldr	r3, [r7, #0]
 8016f1c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016f22:	0c1b      	lsrs	r3, r3, #16
 8016f24:	b2da      	uxtb	r2, r3
 8016f26:	683b      	ldr	r3, [r7, #0]
 8016f28:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016f2e:	0a1b      	lsrs	r3, r3, #8
 8016f30:	b2da      	uxtb	r2, r3
 8016f32:	683b      	ldr	r3, [r7, #0]
 8016f34:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016f3a:	b2da      	uxtb	r2, r3
 8016f3c:	683b      	ldr	r3, [r7, #0]
 8016f3e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016f44:	0d1b      	lsrs	r3, r3, #20
 8016f46:	b29a      	uxth	r2, r3
 8016f48:	683b      	ldr	r3, [r7, #0]
 8016f4a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016f50:	0c1b      	lsrs	r3, r3, #16
 8016f52:	b2db      	uxtb	r3, r3
 8016f54:	f003 030f 	and.w	r3, r3, #15
 8016f58:	b2da      	uxtb	r2, r3
 8016f5a:	683b      	ldr	r3, [r7, #0]
 8016f5c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016f62:	0bdb      	lsrs	r3, r3, #15
 8016f64:	b2db      	uxtb	r3, r3
 8016f66:	f003 0301 	and.w	r3, r3, #1
 8016f6a:	b2da      	uxtb	r2, r3
 8016f6c:	683b      	ldr	r3, [r7, #0]
 8016f6e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016f74:	0b9b      	lsrs	r3, r3, #14
 8016f76:	b2db      	uxtb	r3, r3
 8016f78:	f003 0301 	and.w	r3, r3, #1
 8016f7c:	b2da      	uxtb	r2, r3
 8016f7e:	683b      	ldr	r3, [r7, #0]
 8016f80:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016f86:	0b5b      	lsrs	r3, r3, #13
 8016f88:	b2db      	uxtb	r3, r3
 8016f8a:	f003 0301 	and.w	r3, r3, #1
 8016f8e:	b2da      	uxtb	r2, r3
 8016f90:	683b      	ldr	r3, [r7, #0]
 8016f92:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016f98:	0b1b      	lsrs	r3, r3, #12
 8016f9a:	b2db      	uxtb	r3, r3
 8016f9c:	f003 0301 	and.w	r3, r3, #1
 8016fa0:	b2da      	uxtb	r2, r3
 8016fa2:	683b      	ldr	r3, [r7, #0]
 8016fa4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8016fa6:	683b      	ldr	r3, [r7, #0]
 8016fa8:	2200      	movs	r2, #0
 8016faa:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d163      	bne.n	801707c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016fb8:	009a      	lsls	r2, r3, #2
 8016fba:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8016fbe:	4013      	ands	r3, r2
 8016fc0:	687a      	ldr	r2, [r7, #4]
 8016fc2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8016fc4:	0f92      	lsrs	r2, r2, #30
 8016fc6:	431a      	orrs	r2, r3
 8016fc8:	683b      	ldr	r3, [r7, #0]
 8016fca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016fd0:	0edb      	lsrs	r3, r3, #27
 8016fd2:	b2db      	uxtb	r3, r3
 8016fd4:	f003 0307 	and.w	r3, r3, #7
 8016fd8:	b2da      	uxtb	r2, r3
 8016fda:	683b      	ldr	r3, [r7, #0]
 8016fdc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016fe2:	0e1b      	lsrs	r3, r3, #24
 8016fe4:	b2db      	uxtb	r3, r3
 8016fe6:	f003 0307 	and.w	r3, r3, #7
 8016fea:	b2da      	uxtb	r2, r3
 8016fec:	683b      	ldr	r3, [r7, #0]
 8016fee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016ff4:	0d5b      	lsrs	r3, r3, #21
 8016ff6:	b2db      	uxtb	r3, r3
 8016ff8:	f003 0307 	and.w	r3, r3, #7
 8016ffc:	b2da      	uxtb	r2, r3
 8016ffe:	683b      	ldr	r3, [r7, #0]
 8017000:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017006:	0c9b      	lsrs	r3, r3, #18
 8017008:	b2db      	uxtb	r3, r3
 801700a:	f003 0307 	and.w	r3, r3, #7
 801700e:	b2da      	uxtb	r2, r3
 8017010:	683b      	ldr	r3, [r7, #0]
 8017012:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017018:	0bdb      	lsrs	r3, r3, #15
 801701a:	b2db      	uxtb	r3, r3
 801701c:	f003 0307 	and.w	r3, r3, #7
 8017020:	b2da      	uxtb	r2, r3
 8017022:	683b      	ldr	r3, [r7, #0]
 8017024:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8017026:	683b      	ldr	r3, [r7, #0]
 8017028:	691b      	ldr	r3, [r3, #16]
 801702a:	1c5a      	adds	r2, r3, #1
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8017030:	683b      	ldr	r3, [r7, #0]
 8017032:	7e1b      	ldrb	r3, [r3, #24]
 8017034:	b2db      	uxtb	r3, r3
 8017036:	f003 0307 	and.w	r3, r3, #7
 801703a:	3302      	adds	r3, #2
 801703c:	2201      	movs	r2, #1
 801703e:	fa02 f303 	lsl.w	r3, r2, r3
 8017042:	687a      	ldr	r2, [r7, #4]
 8017044:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8017046:	fb03 f202 	mul.w	r2, r3, r2
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 801704e:	683b      	ldr	r3, [r7, #0]
 8017050:	7a1b      	ldrb	r3, [r3, #8]
 8017052:	b2db      	uxtb	r3, r3
 8017054:	f003 030f 	and.w	r3, r3, #15
 8017058:	2201      	movs	r2, #1
 801705a:	409a      	lsls	r2, r3
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017064:	687a      	ldr	r2, [r7, #4]
 8017066:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8017068:	0a52      	lsrs	r2, r2, #9
 801706a:	fb03 f202 	mul.w	r2, r3, r2
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017078:	655a      	str	r2, [r3, #84]	@ 0x54
 801707a:	e031      	b.n	80170e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017080:	2b01      	cmp	r3, #1
 8017082:	d11d      	bne.n	80170c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017088:	041b      	lsls	r3, r3, #16
 801708a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017092:	0c1b      	lsrs	r3, r3, #16
 8017094:	431a      	orrs	r2, r3
 8017096:	683b      	ldr	r3, [r7, #0]
 8017098:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 801709a:	683b      	ldr	r3, [r7, #0]
 801709c:	691b      	ldr	r3, [r3, #16]
 801709e:	3301      	adds	r3, #1
 80170a0:	029a      	lsls	r2, r3, #10
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80170b4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	655a      	str	r2, [r3, #84]	@ 0x54
 80170be:	e00f      	b.n	80170e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	4a58      	ldr	r2, [pc, #352]	@ (8017228 <HAL_SD_GetCardCSD+0x344>)
 80170c6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80170cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	2201      	movs	r2, #1
 80170d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80170dc:	2301      	movs	r3, #1
 80170de:	e09d      	b.n	801721c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80170e4:	0b9b      	lsrs	r3, r3, #14
 80170e6:	b2db      	uxtb	r3, r3
 80170e8:	f003 0301 	and.w	r3, r3, #1
 80170ec:	b2da      	uxtb	r2, r3
 80170ee:	683b      	ldr	r3, [r7, #0]
 80170f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80170f6:	09db      	lsrs	r3, r3, #7
 80170f8:	b2db      	uxtb	r3, r3
 80170fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80170fe:	b2da      	uxtb	r2, r3
 8017100:	683b      	ldr	r3, [r7, #0]
 8017102:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017108:	b2db      	uxtb	r3, r3
 801710a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801710e:	b2da      	uxtb	r2, r3
 8017110:	683b      	ldr	r3, [r7, #0]
 8017112:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017118:	0fdb      	lsrs	r3, r3, #31
 801711a:	b2da      	uxtb	r2, r3
 801711c:	683b      	ldr	r3, [r7, #0]
 801711e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017124:	0f5b      	lsrs	r3, r3, #29
 8017126:	b2db      	uxtb	r3, r3
 8017128:	f003 0303 	and.w	r3, r3, #3
 801712c:	b2da      	uxtb	r2, r3
 801712e:	683b      	ldr	r3, [r7, #0]
 8017130:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017136:	0e9b      	lsrs	r3, r3, #26
 8017138:	b2db      	uxtb	r3, r3
 801713a:	f003 0307 	and.w	r3, r3, #7
 801713e:	b2da      	uxtb	r2, r3
 8017140:	683b      	ldr	r3, [r7, #0]
 8017142:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017148:	0d9b      	lsrs	r3, r3, #22
 801714a:	b2db      	uxtb	r3, r3
 801714c:	f003 030f 	and.w	r3, r3, #15
 8017150:	b2da      	uxtb	r2, r3
 8017152:	683b      	ldr	r3, [r7, #0]
 8017154:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801715a:	0d5b      	lsrs	r3, r3, #21
 801715c:	b2db      	uxtb	r3, r3
 801715e:	f003 0301 	and.w	r3, r3, #1
 8017162:	b2da      	uxtb	r2, r3
 8017164:	683b      	ldr	r3, [r7, #0]
 8017166:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 801716a:	683b      	ldr	r3, [r7, #0]
 801716c:	2200      	movs	r2, #0
 801716e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017176:	0c1b      	lsrs	r3, r3, #16
 8017178:	b2db      	uxtb	r3, r3
 801717a:	f003 0301 	and.w	r3, r3, #1
 801717e:	b2da      	uxtb	r2, r3
 8017180:	683b      	ldr	r3, [r7, #0]
 8017182:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801718a:	0bdb      	lsrs	r3, r3, #15
 801718c:	b2db      	uxtb	r3, r3
 801718e:	f003 0301 	and.w	r3, r3, #1
 8017192:	b2da      	uxtb	r2, r3
 8017194:	683b      	ldr	r3, [r7, #0]
 8017196:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801719e:	0b9b      	lsrs	r3, r3, #14
 80171a0:	b2db      	uxtb	r3, r3
 80171a2:	f003 0301 	and.w	r3, r3, #1
 80171a6:	b2da      	uxtb	r2, r3
 80171a8:	683b      	ldr	r3, [r7, #0]
 80171aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80171b2:	0b5b      	lsrs	r3, r3, #13
 80171b4:	b2db      	uxtb	r3, r3
 80171b6:	f003 0301 	and.w	r3, r3, #1
 80171ba:	b2da      	uxtb	r2, r3
 80171bc:	683b      	ldr	r3, [r7, #0]
 80171be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80171c6:	0b1b      	lsrs	r3, r3, #12
 80171c8:	b2db      	uxtb	r3, r3
 80171ca:	f003 0301 	and.w	r3, r3, #1
 80171ce:	b2da      	uxtb	r2, r3
 80171d0:	683b      	ldr	r3, [r7, #0]
 80171d2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80171da:	0a9b      	lsrs	r3, r3, #10
 80171dc:	b2db      	uxtb	r3, r3
 80171de:	f003 0303 	and.w	r3, r3, #3
 80171e2:	b2da      	uxtb	r2, r3
 80171e4:	683b      	ldr	r3, [r7, #0]
 80171e6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80171ee:	0a1b      	lsrs	r3, r3, #8
 80171f0:	b2db      	uxtb	r3, r3
 80171f2:	f003 0303 	and.w	r3, r3, #3
 80171f6:	b2da      	uxtb	r2, r3
 80171f8:	683b      	ldr	r3, [r7, #0]
 80171fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017202:	085b      	lsrs	r3, r3, #1
 8017204:	b2db      	uxtb	r3, r3
 8017206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801720a:	b2da      	uxtb	r2, r3
 801720c:	683b      	ldr	r3, [r7, #0]
 801720e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8017212:	683b      	ldr	r3, [r7, #0]
 8017214:	2201      	movs	r2, #1
 8017216:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 801721a:	2300      	movs	r3, #0
}
 801721c:	4618      	mov	r0, r3
 801721e:	370c      	adds	r7, #12
 8017220:	46bd      	mov	sp, r7
 8017222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017226:	4770      	bx	lr
 8017228:	1fe00fff 	.word	0x1fe00fff

0801722c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 801722c:	b580      	push	{r7, lr}
 801722e:	b094      	sub	sp, #80	@ 0x50
 8017230:	af00      	add	r7, sp, #0
 8017232:	6078      	str	r0, [r7, #4]
 8017234:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8017236:	2300      	movs	r3, #0
 8017238:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017242:	b2db      	uxtb	r3, r3
 8017244:	2b03      	cmp	r3, #3
 8017246:	d101      	bne.n	801724c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8017248:	2301      	movs	r3, #1
 801724a:	e0a7      	b.n	801739c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 801724c:	f107 0308 	add.w	r3, r7, #8
 8017250:	4619      	mov	r1, r3
 8017252:	6878      	ldr	r0, [r7, #4]
 8017254:	f000 fb62 	bl	801791c <SD_SendSDStatus>
 8017258:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 801725a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801725c:	2b00      	cmp	r3, #0
 801725e:	d011      	beq.n	8017284 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	4a4f      	ldr	r2, [pc, #316]	@ (80173a4 <HAL_SD_GetCardStatus+0x178>)
 8017266:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801726c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801726e:	431a      	orrs	r2, r3
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	2201      	movs	r2, #1
 8017278:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 801727c:	2301      	movs	r3, #1
 801727e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8017282:	e070      	b.n	8017366 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8017284:	68bb      	ldr	r3, [r7, #8]
 8017286:	099b      	lsrs	r3, r3, #6
 8017288:	b2db      	uxtb	r3, r3
 801728a:	f003 0303 	and.w	r3, r3, #3
 801728e:	b2da      	uxtb	r2, r3
 8017290:	683b      	ldr	r3, [r7, #0]
 8017292:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8017294:	68bb      	ldr	r3, [r7, #8]
 8017296:	095b      	lsrs	r3, r3, #5
 8017298:	b2db      	uxtb	r3, r3
 801729a:	f003 0301 	and.w	r3, r3, #1
 801729e:	b2da      	uxtb	r2, r3
 80172a0:	683b      	ldr	r3, [r7, #0]
 80172a2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80172a4:	68bb      	ldr	r3, [r7, #8]
 80172a6:	0a1b      	lsrs	r3, r3, #8
 80172a8:	b29b      	uxth	r3, r3
 80172aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80172ae:	b29a      	uxth	r2, r3
 80172b0:	68bb      	ldr	r3, [r7, #8]
 80172b2:	0e1b      	lsrs	r3, r3, #24
 80172b4:	b29b      	uxth	r3, r3
 80172b6:	4313      	orrs	r3, r2
 80172b8:	b29a      	uxth	r2, r3
 80172ba:	683b      	ldr	r3, [r7, #0]
 80172bc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	061a      	lsls	r2, r3, #24
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	021b      	lsls	r3, r3, #8
 80172c6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80172ca:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	0a1b      	lsrs	r3, r3, #8
 80172d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80172d4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	0e1b      	lsrs	r3, r3, #24
 80172da:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80172dc:	683b      	ldr	r3, [r7, #0]
 80172de:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80172e0:	693b      	ldr	r3, [r7, #16]
 80172e2:	b2da      	uxtb	r2, r3
 80172e4:	683b      	ldr	r3, [r7, #0]
 80172e6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80172e8:	693b      	ldr	r3, [r7, #16]
 80172ea:	0a1b      	lsrs	r3, r3, #8
 80172ec:	b2da      	uxtb	r2, r3
 80172ee:	683b      	ldr	r3, [r7, #0]
 80172f0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80172f2:	693b      	ldr	r3, [r7, #16]
 80172f4:	0d1b      	lsrs	r3, r3, #20
 80172f6:	b2db      	uxtb	r3, r3
 80172f8:	f003 030f 	and.w	r3, r3, #15
 80172fc:	b2da      	uxtb	r2, r3
 80172fe:	683b      	ldr	r3, [r7, #0]
 8017300:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8017302:	693b      	ldr	r3, [r7, #16]
 8017304:	0c1b      	lsrs	r3, r3, #16
 8017306:	b29b      	uxth	r3, r3
 8017308:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801730c:	b29a      	uxth	r2, r3
 801730e:	697b      	ldr	r3, [r7, #20]
 8017310:	b29b      	uxth	r3, r3
 8017312:	b2db      	uxtb	r3, r3
 8017314:	b29b      	uxth	r3, r3
 8017316:	4313      	orrs	r3, r2
 8017318:	b29a      	uxth	r2, r3
 801731a:	683b      	ldr	r3, [r7, #0]
 801731c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 801731e:	697b      	ldr	r3, [r7, #20]
 8017320:	0a9b      	lsrs	r3, r3, #10
 8017322:	b2db      	uxtb	r3, r3
 8017324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017328:	b2da      	uxtb	r2, r3
 801732a:	683b      	ldr	r3, [r7, #0]
 801732c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 801732e:	697b      	ldr	r3, [r7, #20]
 8017330:	0a1b      	lsrs	r3, r3, #8
 8017332:	b2db      	uxtb	r3, r3
 8017334:	f003 0303 	and.w	r3, r3, #3
 8017338:	b2da      	uxtb	r2, r3
 801733a:	683b      	ldr	r3, [r7, #0]
 801733c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 801733e:	697b      	ldr	r3, [r7, #20]
 8017340:	091b      	lsrs	r3, r3, #4
 8017342:	b2db      	uxtb	r3, r3
 8017344:	f003 030f 	and.w	r3, r3, #15
 8017348:	b2da      	uxtb	r2, r3
 801734a:	683b      	ldr	r3, [r7, #0]
 801734c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 801734e:	697b      	ldr	r3, [r7, #20]
 8017350:	b2db      	uxtb	r3, r3
 8017352:	f003 030f 	and.w	r3, r3, #15
 8017356:	b2da      	uxtb	r2, r3
 8017358:	683b      	ldr	r3, [r7, #0]
 801735a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 801735c:	69bb      	ldr	r3, [r7, #24]
 801735e:	0e1b      	lsrs	r3, r3, #24
 8017360:	b2da      	uxtb	r2, r3
 8017362:	683b      	ldr	r3, [r7, #0]
 8017364:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801736e:	4618      	mov	r0, r3
 8017370:	f002 f97c 	bl	801966c <SDMMC_CmdBlockLength>
 8017374:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8017376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017378:	2b00      	cmp	r3, #0
 801737a:	d00d      	beq.n	8017398 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	4a08      	ldr	r2, [pc, #32]	@ (80173a4 <HAL_SD_GetCardStatus+0x178>)
 8017382:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017388:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	2201      	movs	r2, #1
 801738e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8017392:	2301      	movs	r3, #1
 8017394:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8017398:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 801739c:	4618      	mov	r0, r3
 801739e:	3750      	adds	r7, #80	@ 0x50
 80173a0:	46bd      	mov	sp, r7
 80173a2:	bd80      	pop	{r7, pc}
 80173a4:	1fe00fff 	.word	0x1fe00fff

080173a8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80173a8:	b480      	push	{r7}
 80173aa:	b083      	sub	sp, #12
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	6078      	str	r0, [r7, #4]
 80173b0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80173b6:	683b      	ldr	r3, [r7, #0]
 80173b8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80173be:	683b      	ldr	r3, [r7, #0]
 80173c0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80173c6:	683b      	ldr	r3, [r7, #0]
 80173c8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80173ce:	683b      	ldr	r3, [r7, #0]
 80173d0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80173d6:	683b      	ldr	r3, [r7, #0]
 80173d8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80173de:	683b      	ldr	r3, [r7, #0]
 80173e0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80173e6:	683b      	ldr	r3, [r7, #0]
 80173e8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80173ee:	683b      	ldr	r3, [r7, #0]
 80173f0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80173f2:	2300      	movs	r3, #0
}
 80173f4:	4618      	mov	r0, r3
 80173f6:	370c      	adds	r7, #12
 80173f8:	46bd      	mov	sp, r7
 80173fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173fe:	4770      	bx	lr

08017400 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8017400:	b590      	push	{r4, r7, lr}
 8017402:	b08d      	sub	sp, #52	@ 0x34
 8017404:	af02      	add	r7, sp, #8
 8017406:	6078      	str	r0, [r7, #4]
 8017408:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 801740a:	2300      	movs	r3, #0
 801740c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	2203      	movs	r2, #3
 8017414:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801741c:	2b03      	cmp	r3, #3
 801741e:	d02e      	beq.n	801747e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8017420:	683b      	ldr	r3, [r7, #0]
 8017422:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017426:	d106      	bne.n	8017436 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801742c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	635a      	str	r2, [r3, #52]	@ 0x34
 8017434:	e029      	b.n	801748a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8017436:	683b      	ldr	r3, [r7, #0]
 8017438:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801743c:	d10a      	bne.n	8017454 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 801743e:	6878      	ldr	r0, [r7, #4]
 8017440:	f000 fb64 	bl	8017b0c <SD_WideBus_Enable>
 8017444:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801744a:	6a3b      	ldr	r3, [r7, #32]
 801744c:	431a      	orrs	r2, r3
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	635a      	str	r2, [r3, #52]	@ 0x34
 8017452:	e01a      	b.n	801748a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8017454:	683b      	ldr	r3, [r7, #0]
 8017456:	2b00      	cmp	r3, #0
 8017458:	d10a      	bne.n	8017470 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 801745a:	6878      	ldr	r0, [r7, #4]
 801745c:	f000 fba1 	bl	8017ba2 <SD_WideBus_Disable>
 8017460:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017466:	6a3b      	ldr	r3, [r7, #32]
 8017468:	431a      	orrs	r2, r3
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	635a      	str	r2, [r3, #52]	@ 0x34
 801746e:	e00c      	b.n	801748a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017474:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	635a      	str	r2, [r3, #52]	@ 0x34
 801747c:	e005      	b.n	801748a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017482:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801748e:	2b00      	cmp	r3, #0
 8017490:	d007      	beq.n	80174a2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	4a5f      	ldr	r2, [pc, #380]	@ (8017614 <HAL_SD_ConfigWideBusOperation+0x214>)
 8017498:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 801749a:	2301      	movs	r3, #1
 801749c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80174a0:	e096      	b.n	80175d0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80174a2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80174a6:	f04f 0100 	mov.w	r1, #0
 80174aa:	f7fd fdf5 	bl	8015098 <HAL_RCCEx_GetPeriphCLKFreq>
 80174ae:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80174b0:	69fb      	ldr	r3, [r7, #28]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	f000 8083 	beq.w	80175be <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	685b      	ldr	r3, [r3, #4]
 80174bc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	689b      	ldr	r3, [r3, #8]
 80174c2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80174c4:	683b      	ldr	r3, [r7, #0]
 80174c6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	691b      	ldr	r3, [r3, #16]
 80174cc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	695a      	ldr	r2, [r3, #20]
 80174d2:	69fb      	ldr	r3, [r7, #28]
 80174d4:	4950      	ldr	r1, [pc, #320]	@ (8017618 <HAL_SD_ConfigWideBusOperation+0x218>)
 80174d6:	fba1 1303 	umull	r1, r3, r1, r3
 80174da:	0e1b      	lsrs	r3, r3, #24
 80174dc:	429a      	cmp	r2, r3
 80174de:	d303      	bcc.n	80174e8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	695b      	ldr	r3, [r3, #20]
 80174e4:	61bb      	str	r3, [r7, #24]
 80174e6:	e05a      	b.n	801759e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80174ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80174f0:	d103      	bne.n	80174fa <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	695b      	ldr	r3, [r3, #20]
 80174f6:	61bb      	str	r3, [r7, #24]
 80174f8:	e051      	b.n	801759e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80174fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017502:	d126      	bne.n	8017552 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	695b      	ldr	r3, [r3, #20]
 8017508:	2b00      	cmp	r3, #0
 801750a:	d10e      	bne.n	801752a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 801750c:	69fb      	ldr	r3, [r7, #28]
 801750e:	4a43      	ldr	r2, [pc, #268]	@ (801761c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8017510:	4293      	cmp	r3, r2
 8017512:	d906      	bls.n	8017522 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8017514:	69fb      	ldr	r3, [r7, #28]
 8017516:	4a40      	ldr	r2, [pc, #256]	@ (8017618 <HAL_SD_ConfigWideBusOperation+0x218>)
 8017518:	fba2 2303 	umull	r2, r3, r2, r3
 801751c:	0e5b      	lsrs	r3, r3, #25
 801751e:	61bb      	str	r3, [r7, #24]
 8017520:	e03d      	b.n	801759e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	695b      	ldr	r3, [r3, #20]
 8017526:	61bb      	str	r3, [r7, #24]
 8017528:	e039      	b.n	801759e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	695b      	ldr	r3, [r3, #20]
 801752e:	005b      	lsls	r3, r3, #1
 8017530:	69fa      	ldr	r2, [r7, #28]
 8017532:	fbb2 f3f3 	udiv	r3, r2, r3
 8017536:	4a39      	ldr	r2, [pc, #228]	@ (801761c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8017538:	4293      	cmp	r3, r2
 801753a:	d906      	bls.n	801754a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 801753c:	69fb      	ldr	r3, [r7, #28]
 801753e:	4a36      	ldr	r2, [pc, #216]	@ (8017618 <HAL_SD_ConfigWideBusOperation+0x218>)
 8017540:	fba2 2303 	umull	r2, r3, r2, r3
 8017544:	0e5b      	lsrs	r3, r3, #25
 8017546:	61bb      	str	r3, [r7, #24]
 8017548:	e029      	b.n	801759e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	695b      	ldr	r3, [r3, #20]
 801754e:	61bb      	str	r3, [r7, #24]
 8017550:	e025      	b.n	801759e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	695b      	ldr	r3, [r3, #20]
 8017556:	2b00      	cmp	r3, #0
 8017558:	d10e      	bne.n	8017578 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 801755a:	69fb      	ldr	r3, [r7, #28]
 801755c:	4a30      	ldr	r2, [pc, #192]	@ (8017620 <HAL_SD_ConfigWideBusOperation+0x220>)
 801755e:	4293      	cmp	r3, r2
 8017560:	d906      	bls.n	8017570 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8017562:	69fb      	ldr	r3, [r7, #28]
 8017564:	4a2c      	ldr	r2, [pc, #176]	@ (8017618 <HAL_SD_ConfigWideBusOperation+0x218>)
 8017566:	fba2 2303 	umull	r2, r3, r2, r3
 801756a:	0e1b      	lsrs	r3, r3, #24
 801756c:	61bb      	str	r3, [r7, #24]
 801756e:	e016      	b.n	801759e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	695b      	ldr	r3, [r3, #20]
 8017574:	61bb      	str	r3, [r7, #24]
 8017576:	e012      	b.n	801759e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	695b      	ldr	r3, [r3, #20]
 801757c:	005b      	lsls	r3, r3, #1
 801757e:	69fa      	ldr	r2, [r7, #28]
 8017580:	fbb2 f3f3 	udiv	r3, r2, r3
 8017584:	4a26      	ldr	r2, [pc, #152]	@ (8017620 <HAL_SD_ConfigWideBusOperation+0x220>)
 8017586:	4293      	cmp	r3, r2
 8017588:	d906      	bls.n	8017598 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 801758a:	69fb      	ldr	r3, [r7, #28]
 801758c:	4a22      	ldr	r2, [pc, #136]	@ (8017618 <HAL_SD_ConfigWideBusOperation+0x218>)
 801758e:	fba2 2303 	umull	r2, r3, r2, r3
 8017592:	0e1b      	lsrs	r3, r3, #24
 8017594:	61bb      	str	r3, [r7, #24]
 8017596:	e002      	b.n	801759e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	695b      	ldr	r3, [r3, #20]
 801759c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	681c      	ldr	r4, [r3, #0]
 80175a2:	466a      	mov	r2, sp
 80175a4:	f107 0314 	add.w	r3, r7, #20
 80175a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80175ac:	e882 0003 	stmia.w	r2, {r0, r1}
 80175b0:	f107 0308 	add.w	r3, r7, #8
 80175b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80175b6:	4620      	mov	r0, r4
 80175b8:	f001 ff7a 	bl	80194b0 <SDMMC_Init>
 80175bc:	e008      	b.n	80175d0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80175c2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80175ca:	2301      	movs	r3, #1
 80175cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80175d8:	4618      	mov	r0, r3
 80175da:	f002 f847 	bl	801966c <SDMMC_CmdBlockLength>
 80175de:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80175e0:	6a3b      	ldr	r3, [r7, #32]
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d00c      	beq.n	8017600 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	4a0a      	ldr	r2, [pc, #40]	@ (8017614 <HAL_SD_ConfigWideBusOperation+0x214>)
 80175ec:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80175f2:	6a3b      	ldr	r3, [r7, #32]
 80175f4:	431a      	orrs	r2, r3
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80175fa:	2301      	movs	r3, #1
 80175fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	2201      	movs	r2, #1
 8017604:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8017608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801760c:	4618      	mov	r0, r3
 801760e:	372c      	adds	r7, #44	@ 0x2c
 8017610:	46bd      	mov	sp, r7
 8017612:	bd90      	pop	{r4, r7, pc}
 8017614:	1fe00fff 	.word	0x1fe00fff
 8017618:	55e63b89 	.word	0x55e63b89
 801761c:	02faf080 	.word	0x02faf080
 8017620:	017d7840 	.word	0x017d7840

08017624 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b086      	sub	sp, #24
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 801762c:	2300      	movs	r3, #0
 801762e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8017630:	f107 030c 	add.w	r3, r7, #12
 8017634:	4619      	mov	r1, r3
 8017636:	6878      	ldr	r0, [r7, #4]
 8017638:	f000 fa40 	bl	8017abc <SD_SendStatus>
 801763c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 801763e:	697b      	ldr	r3, [r7, #20]
 8017640:	2b00      	cmp	r3, #0
 8017642:	d005      	beq.n	8017650 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017648:	697b      	ldr	r3, [r7, #20]
 801764a:	431a      	orrs	r2, r3
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	0a5b      	lsrs	r3, r3, #9
 8017654:	f003 030f 	and.w	r3, r3, #15
 8017658:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 801765a:	693b      	ldr	r3, [r7, #16]
}
 801765c:	4618      	mov	r0, r3
 801765e:	3718      	adds	r7, #24
 8017660:	46bd      	mov	sp, r7
 8017662:	bd80      	pop	{r7, pc}

08017664 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b090      	sub	sp, #64	@ 0x40
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 801766c:	2300      	movs	r3, #0
 801766e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8017670:	f7f8 fc00 	bl	800fe74 <HAL_GetTick>
 8017674:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	4618      	mov	r0, r3
 801767c:	f001 ff71 	bl	8019562 <SDMMC_GetPowerState>
 8017680:	4603      	mov	r3, r0
 8017682:	2b00      	cmp	r3, #0
 8017684:	d102      	bne.n	801768c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8017686:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 801768a:	e0b5      	b.n	80177f8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017690:	2b03      	cmp	r3, #3
 8017692:	d02e      	beq.n	80176f2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	4618      	mov	r0, r3
 801769a:	f002 f9bc 	bl	8019a16 <SDMMC_CmdSendCID>
 801769e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80176a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d001      	beq.n	80176aa <SD_InitCard+0x46>
    {
      return errorstate;
 80176a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80176a8:	e0a6      	b.n	80177f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	2100      	movs	r1, #0
 80176b0:	4618      	mov	r0, r3
 80176b2:	f001 ff9c 	bl	80195ee <SDMMC_GetResponse>
 80176b6:	4602      	mov	r2, r0
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	2104      	movs	r1, #4
 80176c2:	4618      	mov	r0, r3
 80176c4:	f001 ff93 	bl	80195ee <SDMMC_GetResponse>
 80176c8:	4602      	mov	r2, r0
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	2108      	movs	r1, #8
 80176d4:	4618      	mov	r0, r3
 80176d6:	f001 ff8a 	bl	80195ee <SDMMC_GetResponse>
 80176da:	4602      	mov	r2, r0
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	210c      	movs	r1, #12
 80176e6:	4618      	mov	r0, r3
 80176e8:	f001 ff81 	bl	80195ee <SDMMC_GetResponse>
 80176ec:	4602      	mov	r2, r0
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80176f6:	2b03      	cmp	r3, #3
 80176f8:	d01d      	beq.n	8017736 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80176fa:	e019      	b.n	8017730 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	f107 020a 	add.w	r2, r7, #10
 8017704:	4611      	mov	r1, r2
 8017706:	4618      	mov	r0, r3
 8017708:	f002 f9c4 	bl	8019a94 <SDMMC_CmdSetRelAdd>
 801770c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 801770e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017710:	2b00      	cmp	r3, #0
 8017712:	d001      	beq.n	8017718 <SD_InitCard+0xb4>
      {
        return errorstate;
 8017714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017716:	e06f      	b.n	80177f8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8017718:	f7f8 fbac 	bl	800fe74 <HAL_GetTick>
 801771c:	4602      	mov	r2, r0
 801771e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017720:	1ad3      	subs	r3, r2, r3
 8017722:	f241 3287 	movw	r2, #4999	@ 0x1387
 8017726:	4293      	cmp	r3, r2
 8017728:	d902      	bls.n	8017730 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 801772a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801772e:	e063      	b.n	80177f8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8017730:	897b      	ldrh	r3, [r7, #10]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d0e2      	beq.n	80176fc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801773a:	2b03      	cmp	r3, #3
 801773c:	d036      	beq.n	80177ac <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801773e:	897b      	ldrh	r3, [r7, #10]
 8017740:	461a      	mov	r2, r3
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	681a      	ldr	r2, [r3, #0]
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801774e:	041b      	lsls	r3, r3, #16
 8017750:	4619      	mov	r1, r3
 8017752:	4610      	mov	r0, r2
 8017754:	f002 f97e 	bl	8019a54 <SDMMC_CmdSendCSD>
 8017758:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 801775a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801775c:	2b00      	cmp	r3, #0
 801775e:	d001      	beq.n	8017764 <SD_InitCard+0x100>
    {
      return errorstate;
 8017760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017762:	e049      	b.n	80177f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	2100      	movs	r1, #0
 801776a:	4618      	mov	r0, r3
 801776c:	f001 ff3f 	bl	80195ee <SDMMC_GetResponse>
 8017770:	4602      	mov	r2, r0
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	2104      	movs	r1, #4
 801777c:	4618      	mov	r0, r3
 801777e:	f001 ff36 	bl	80195ee <SDMMC_GetResponse>
 8017782:	4602      	mov	r2, r0
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	2108      	movs	r1, #8
 801778e:	4618      	mov	r0, r3
 8017790:	f001 ff2d 	bl	80195ee <SDMMC_GetResponse>
 8017794:	4602      	mov	r2, r0
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	210c      	movs	r1, #12
 80177a0:	4618      	mov	r0, r3
 80177a2:	f001 ff24 	bl	80195ee <SDMMC_GetResponse>
 80177a6:	4602      	mov	r2, r0
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	2104      	movs	r1, #4
 80177b2:	4618      	mov	r0, r3
 80177b4:	f001 ff1b 	bl	80195ee <SDMMC_GetResponse>
 80177b8:	4603      	mov	r3, r0
 80177ba:	0d1a      	lsrs	r2, r3, #20
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80177c0:	f107 030c 	add.w	r3, r7, #12
 80177c4:	4619      	mov	r1, r3
 80177c6:	6878      	ldr	r0, [r7, #4]
 80177c8:	f7ff fb8c 	bl	8016ee4 <HAL_SD_GetCardCSD>
 80177cc:	4603      	mov	r3, r0
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d002      	beq.n	80177d8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80177d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80177d6:	e00f      	b.n	80177f8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	681a      	ldr	r2, [r3, #0]
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80177e0:	041b      	lsls	r3, r3, #16
 80177e2:	4619      	mov	r1, r3
 80177e4:	4610      	mov	r0, r2
 80177e6:	f002 f82d 	bl	8019844 <SDMMC_CmdSelDesel>
 80177ea:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80177ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d001      	beq.n	80177f6 <SD_InitCard+0x192>
  {
    return errorstate;
 80177f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80177f4:	e000      	b.n	80177f8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80177f6:	2300      	movs	r3, #0
}
 80177f8:	4618      	mov	r0, r3
 80177fa:	3740      	adds	r7, #64	@ 0x40
 80177fc:	46bd      	mov	sp, r7
 80177fe:	bd80      	pop	{r7, pc}

08017800 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8017800:	b580      	push	{r7, lr}
 8017802:	b086      	sub	sp, #24
 8017804:	af00      	add	r7, sp, #0
 8017806:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8017808:	2300      	movs	r3, #0
 801780a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 801780c:	2300      	movs	r3, #0
 801780e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8017810:	2300      	movs	r3, #0
 8017812:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	681b      	ldr	r3, [r3, #0]
 8017818:	4618      	mov	r0, r3
 801781a:	f002 f836 	bl	801988a <SDMMC_CmdGoIdleState>
 801781e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d001      	beq.n	801782a <SD_PowerON+0x2a>
  {
    return errorstate;
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	e072      	b.n	8017910 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	4618      	mov	r0, r3
 8017830:	f002 f849 	bl	80198c6 <SDMMC_CmdOperCond>
 8017834:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801783c:	d10d      	bne.n	801785a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	2200      	movs	r2, #0
 8017842:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	4618      	mov	r0, r3
 801784a:	f002 f81e 	bl	801988a <SDMMC_CmdGoIdleState>
 801784e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d004      	beq.n	8017860 <SD_PowerON+0x60>
    {
      return errorstate;
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	e05a      	b.n	8017910 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	2201      	movs	r2, #1
 801785e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017864:	2b01      	cmp	r3, #1
 8017866:	d137      	bne.n	80178d8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	2100      	movs	r1, #0
 801786e:	4618      	mov	r0, r3
 8017870:	f002 f849 	bl	8019906 <SDMMC_CmdAppCommand>
 8017874:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d02d      	beq.n	80178d8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801787c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8017880:	e046      	b.n	8017910 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	2100      	movs	r1, #0
 8017888:	4618      	mov	r0, r3
 801788a:	f002 f83c 	bl	8019906 <SDMMC_CmdAppCommand>
 801788e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d001      	beq.n	801789a <SD_PowerON+0x9a>
    {
      return errorstate;
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	e03a      	b.n	8017910 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	491e      	ldr	r1, [pc, #120]	@ (8017918 <SD_PowerON+0x118>)
 80178a0:	4618      	mov	r0, r3
 80178a2:	f002 f853 	bl	801994c <SDMMC_CmdAppOperCommand>
 80178a6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d002      	beq.n	80178b4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80178ae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80178b2:	e02d      	b.n	8017910 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	2100      	movs	r1, #0
 80178ba:	4618      	mov	r0, r3
 80178bc:	f001 fe97 	bl	80195ee <SDMMC_GetResponse>
 80178c0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80178c2:	697b      	ldr	r3, [r7, #20]
 80178c4:	0fdb      	lsrs	r3, r3, #31
 80178c6:	2b01      	cmp	r3, #1
 80178c8:	d101      	bne.n	80178ce <SD_PowerON+0xce>
 80178ca:	2301      	movs	r3, #1
 80178cc:	e000      	b.n	80178d0 <SD_PowerON+0xd0>
 80178ce:	2300      	movs	r3, #0
 80178d0:	613b      	str	r3, [r7, #16]

    count++;
 80178d2:	68bb      	ldr	r3, [r7, #8]
 80178d4:	3301      	adds	r3, #1
 80178d6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80178d8:	68bb      	ldr	r3, [r7, #8]
 80178da:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80178de:	4293      	cmp	r3, r2
 80178e0:	d802      	bhi.n	80178e8 <SD_PowerON+0xe8>
 80178e2:	693b      	ldr	r3, [r7, #16]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d0cc      	beq.n	8017882 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80178e8:	68bb      	ldr	r3, [r7, #8]
 80178ea:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80178ee:	4293      	cmp	r3, r2
 80178f0:	d902      	bls.n	80178f8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80178f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80178f6:	e00b      	b.n	8017910 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	2200      	movs	r2, #0
 80178fc:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80178fe:	697b      	ldr	r3, [r7, #20]
 8017900:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8017904:	2b00      	cmp	r3, #0
 8017906:	d002      	beq.n	801790e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	2201      	movs	r2, #1
 801790c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 801790e:	2300      	movs	r3, #0
}
 8017910:	4618      	mov	r0, r3
 8017912:	3718      	adds	r7, #24
 8017914:	46bd      	mov	sp, r7
 8017916:	bd80      	pop	{r7, pc}
 8017918:	c1100000 	.word	0xc1100000

0801791c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 801791c:	b580      	push	{r7, lr}
 801791e:	b08c      	sub	sp, #48	@ 0x30
 8017920:	af00      	add	r7, sp, #0
 8017922:	6078      	str	r0, [r7, #4]
 8017924:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8017926:	f7f8 faa5 	bl	800fe74 <HAL_GetTick>
 801792a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 801792c:	683b      	ldr	r3, [r7, #0]
 801792e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	2100      	movs	r1, #0
 8017936:	4618      	mov	r0, r3
 8017938:	f001 fe59 	bl	80195ee <SDMMC_GetResponse>
 801793c:	4603      	mov	r3, r0
 801793e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017942:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017946:	d102      	bne.n	801794e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8017948:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801794c:	e0b0      	b.n	8017ab0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	2140      	movs	r1, #64	@ 0x40
 8017954:	4618      	mov	r0, r3
 8017956:	f001 fe89 	bl	801966c <SDMMC_CmdBlockLength>
 801795a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801795c:	6a3b      	ldr	r3, [r7, #32]
 801795e:	2b00      	cmp	r3, #0
 8017960:	d005      	beq.n	801796e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 801796a:	6a3b      	ldr	r3, [r7, #32]
 801796c:	e0a0      	b.n	8017ab0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	681a      	ldr	r2, [r3, #0]
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017976:	041b      	lsls	r3, r3, #16
 8017978:	4619      	mov	r1, r3
 801797a:	4610      	mov	r0, r2
 801797c:	f001 ffc3 	bl	8019906 <SDMMC_CmdAppCommand>
 8017980:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8017982:	6a3b      	ldr	r3, [r7, #32]
 8017984:	2b00      	cmp	r3, #0
 8017986:	d005      	beq.n	8017994 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8017990:	6a3b      	ldr	r3, [r7, #32]
 8017992:	e08d      	b.n	8017ab0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8017994:	f04f 33ff 	mov.w	r3, #4294967295
 8017998:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 801799a:	2340      	movs	r3, #64	@ 0x40
 801799c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 801799e:	2360      	movs	r3, #96	@ 0x60
 80179a0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80179a2:	2302      	movs	r3, #2
 80179a4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80179a6:	2300      	movs	r3, #0
 80179a8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80179aa:	2301      	movs	r3, #1
 80179ac:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	f107 0208 	add.w	r2, r7, #8
 80179b6:	4611      	mov	r1, r2
 80179b8:	4618      	mov	r0, r3
 80179ba:	f001 fe2b 	bl	8019614 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	4618      	mov	r0, r3
 80179c4:	f002 f8ab 	bl	8019b1e <SDMMC_CmdStatusRegister>
 80179c8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80179ca:	6a3b      	ldr	r3, [r7, #32]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d02b      	beq.n	8017a28 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80179d8:	6a3b      	ldr	r3, [r7, #32]
 80179da:	e069      	b.n	8017ab0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80179e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d013      	beq.n	8017a12 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80179ea:	2300      	movs	r3, #0
 80179ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80179ee:	e00d      	b.n	8017a0c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	4618      	mov	r0, r3
 80179f6:	f001 fd85 	bl	8019504 <SDMMC_ReadFIFO>
 80179fa:	4602      	mov	r2, r0
 80179fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179fe:	601a      	str	r2, [r3, #0]
        pData++;
 8017a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a02:	3304      	adds	r3, #4
 8017a04:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8017a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a08:	3301      	adds	r3, #1
 8017a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a0e:	2b07      	cmp	r3, #7
 8017a10:	d9ee      	bls.n	80179f0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8017a12:	f7f8 fa2f 	bl	800fe74 <HAL_GetTick>
 8017a16:	4602      	mov	r2, r0
 8017a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a1a:	1ad3      	subs	r3, r2, r3
 8017a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a20:	d102      	bne.n	8017a28 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8017a22:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8017a26:	e043      	b.n	8017ab0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017a2e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d0d2      	beq.n	80179dc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017a3c:	f003 0308 	and.w	r3, r3, #8
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d001      	beq.n	8017a48 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8017a44:	2308      	movs	r3, #8
 8017a46:	e033      	b.n	8017ab0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017a4e:	f003 0302 	and.w	r3, r3, #2
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d001      	beq.n	8017a5a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8017a56:	2302      	movs	r3, #2
 8017a58:	e02a      	b.n	8017ab0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017a60:	f003 0320 	and.w	r3, r3, #32
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d017      	beq.n	8017a98 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8017a68:	2320      	movs	r3, #32
 8017a6a:	e021      	b.n	8017ab0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	4618      	mov	r0, r3
 8017a72:	f001 fd47 	bl	8019504 <SDMMC_ReadFIFO>
 8017a76:	4602      	mov	r2, r0
 8017a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a7a:	601a      	str	r2, [r3, #0]
    pData++;
 8017a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a7e:	3304      	adds	r3, #4
 8017a80:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8017a82:	f7f8 f9f7 	bl	800fe74 <HAL_GetTick>
 8017a86:	4602      	mov	r2, r0
 8017a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a8a:	1ad3      	subs	r3, r2, r3
 8017a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a90:	d102      	bne.n	8017a98 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8017a92:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8017a96:	e00b      	b.n	8017ab0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017a9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d1e2      	bne.n	8017a6c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	4a03      	ldr	r2, [pc, #12]	@ (8017ab8 <SD_SendSDStatus+0x19c>)
 8017aac:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8017aae:	2300      	movs	r3, #0
}
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	3730      	adds	r7, #48	@ 0x30
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	bd80      	pop	{r7, pc}
 8017ab8:	18000f3a 	.word	0x18000f3a

08017abc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b084      	sub	sp, #16
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
 8017ac4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8017ac6:	683b      	ldr	r3, [r7, #0]
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d102      	bne.n	8017ad2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8017acc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8017ad0:	e018      	b.n	8017b04 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	681a      	ldr	r2, [r3, #0]
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017ada:	041b      	lsls	r3, r3, #16
 8017adc:	4619      	mov	r1, r3
 8017ade:	4610      	mov	r0, r2
 8017ae0:	f001 fffa 	bl	8019ad8 <SDMMC_CmdSendStatus>
 8017ae4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d001      	beq.n	8017af0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	e009      	b.n	8017b04 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	2100      	movs	r1, #0
 8017af6:	4618      	mov	r0, r3
 8017af8:	f001 fd79 	bl	80195ee <SDMMC_GetResponse>
 8017afc:	4602      	mov	r2, r0
 8017afe:	683b      	ldr	r3, [r7, #0]
 8017b00:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8017b02:	2300      	movs	r3, #0
}
 8017b04:	4618      	mov	r0, r3
 8017b06:	3710      	adds	r7, #16
 8017b08:	46bd      	mov	sp, r7
 8017b0a:	bd80      	pop	{r7, pc}

08017b0c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8017b0c:	b580      	push	{r7, lr}
 8017b0e:	b086      	sub	sp, #24
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8017b14:	2300      	movs	r3, #0
 8017b16:	60fb      	str	r3, [r7, #12]
 8017b18:	2300      	movs	r3, #0
 8017b1a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	2100      	movs	r1, #0
 8017b22:	4618      	mov	r0, r3
 8017b24:	f001 fd63 	bl	80195ee <SDMMC_GetResponse>
 8017b28:	4603      	mov	r3, r0
 8017b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017b2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017b32:	d102      	bne.n	8017b3a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8017b34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017b38:	e02f      	b.n	8017b9a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8017b3a:	f107 030c 	add.w	r3, r7, #12
 8017b3e:	4619      	mov	r1, r3
 8017b40:	6878      	ldr	r0, [r7, #4]
 8017b42:	f000 f879 	bl	8017c38 <SD_FindSCR>
 8017b46:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8017b48:	697b      	ldr	r3, [r7, #20]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d001      	beq.n	8017b52 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8017b4e:	697b      	ldr	r3, [r7, #20]
 8017b50:	e023      	b.n	8017b9a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8017b52:	693b      	ldr	r3, [r7, #16]
 8017b54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d01c      	beq.n	8017b96 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	681a      	ldr	r2, [r3, #0]
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017b64:	041b      	lsls	r3, r3, #16
 8017b66:	4619      	mov	r1, r3
 8017b68:	4610      	mov	r0, r2
 8017b6a:	f001 fecc 	bl	8019906 <SDMMC_CmdAppCommand>
 8017b6e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8017b70:	697b      	ldr	r3, [r7, #20]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d001      	beq.n	8017b7a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8017b76:	697b      	ldr	r3, [r7, #20]
 8017b78:	e00f      	b.n	8017b9a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	2102      	movs	r1, #2
 8017b80:	4618      	mov	r0, r3
 8017b82:	f001 ff03 	bl	801998c <SDMMC_CmdBusWidth>
 8017b86:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8017b88:	697b      	ldr	r3, [r7, #20]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d001      	beq.n	8017b92 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8017b8e:	697b      	ldr	r3, [r7, #20]
 8017b90:	e003      	b.n	8017b9a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8017b92:	2300      	movs	r3, #0
 8017b94:	e001      	b.n	8017b9a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8017b96:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	3718      	adds	r7, #24
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	bd80      	pop	{r7, pc}

08017ba2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8017ba2:	b580      	push	{r7, lr}
 8017ba4:	b086      	sub	sp, #24
 8017ba6:	af00      	add	r7, sp, #0
 8017ba8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8017baa:	2300      	movs	r3, #0
 8017bac:	60fb      	str	r3, [r7, #12]
 8017bae:	2300      	movs	r3, #0
 8017bb0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	2100      	movs	r1, #0
 8017bb8:	4618      	mov	r0, r3
 8017bba:	f001 fd18 	bl	80195ee <SDMMC_GetResponse>
 8017bbe:	4603      	mov	r3, r0
 8017bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017bc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017bc8:	d102      	bne.n	8017bd0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8017bca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017bce:	e02f      	b.n	8017c30 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8017bd0:	f107 030c 	add.w	r3, r7, #12
 8017bd4:	4619      	mov	r1, r3
 8017bd6:	6878      	ldr	r0, [r7, #4]
 8017bd8:	f000 f82e 	bl	8017c38 <SD_FindSCR>
 8017bdc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8017bde:	697b      	ldr	r3, [r7, #20]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d001      	beq.n	8017be8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8017be4:	697b      	ldr	r3, [r7, #20]
 8017be6:	e023      	b.n	8017c30 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8017be8:	693b      	ldr	r3, [r7, #16]
 8017bea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d01c      	beq.n	8017c2c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	681a      	ldr	r2, [r3, #0]
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017bfa:	041b      	lsls	r3, r3, #16
 8017bfc:	4619      	mov	r1, r3
 8017bfe:	4610      	mov	r0, r2
 8017c00:	f001 fe81 	bl	8019906 <SDMMC_CmdAppCommand>
 8017c04:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8017c06:	697b      	ldr	r3, [r7, #20]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d001      	beq.n	8017c10 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8017c0c:	697b      	ldr	r3, [r7, #20]
 8017c0e:	e00f      	b.n	8017c30 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	2100      	movs	r1, #0
 8017c16:	4618      	mov	r0, r3
 8017c18:	f001 feb8 	bl	801998c <SDMMC_CmdBusWidth>
 8017c1c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8017c1e:	697b      	ldr	r3, [r7, #20]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d001      	beq.n	8017c28 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8017c24:	697b      	ldr	r3, [r7, #20]
 8017c26:	e003      	b.n	8017c30 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8017c28:	2300      	movs	r3, #0
 8017c2a:	e001      	b.n	8017c30 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8017c2c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8017c30:	4618      	mov	r0, r3
 8017c32:	3718      	adds	r7, #24
 8017c34:	46bd      	mov	sp, r7
 8017c36:	bd80      	pop	{r7, pc}

08017c38 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8017c38:	b580      	push	{r7, lr}
 8017c3a:	b08e      	sub	sp, #56	@ 0x38
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	6078      	str	r0, [r7, #4]
 8017c40:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8017c42:	f7f8 f917 	bl	800fe74 <HAL_GetTick>
 8017c46:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8017c48:	2300      	movs	r3, #0
 8017c4a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	60bb      	str	r3, [r7, #8]
 8017c50:	2300      	movs	r3, #0
 8017c52:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8017c54:	683b      	ldr	r3, [r7, #0]
 8017c56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	2108      	movs	r1, #8
 8017c5e:	4618      	mov	r0, r3
 8017c60:	f001 fd04 	bl	801966c <SDMMC_CmdBlockLength>
 8017c64:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8017c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d001      	beq.n	8017c70 <SD_FindSCR+0x38>
  {
    return errorstate;
 8017c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c6e:	e0ad      	b.n	8017dcc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	681a      	ldr	r2, [r3, #0]
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017c78:	041b      	lsls	r3, r3, #16
 8017c7a:	4619      	mov	r1, r3
 8017c7c:	4610      	mov	r0, r2
 8017c7e:	f001 fe42 	bl	8019906 <SDMMC_CmdAppCommand>
 8017c82:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8017c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d001      	beq.n	8017c8e <SD_FindSCR+0x56>
  {
    return errorstate;
 8017c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c8c:	e09e      	b.n	8017dcc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8017c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8017c92:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8017c94:	2308      	movs	r3, #8
 8017c96:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8017c98:	2330      	movs	r3, #48	@ 0x30
 8017c9a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8017c9c:	2302      	movs	r3, #2
 8017c9e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8017ca4:	2301      	movs	r3, #1
 8017ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	f107 0210 	add.w	r2, r7, #16
 8017cb0:	4611      	mov	r1, r2
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	f001 fcae 	bl	8019614 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	f001 fe88 	bl	80199d2 <SDMMC_CmdSendSCR>
 8017cc2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8017cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d027      	beq.n	8017d1a <SD_FindSCR+0xe2>
  {
    return errorstate;
 8017cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ccc:	e07e      	b.n	8017dcc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017cd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d113      	bne.n	8017d04 <SD_FindSCR+0xcc>
 8017cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d110      	bne.n	8017d04 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	4618      	mov	r0, r3
 8017ce8:	f001 fc0c 	bl	8019504 <SDMMC_ReadFIFO>
 8017cec:	4603      	mov	r3, r0
 8017cee:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	f001 fc05 	bl	8019504 <SDMMC_ReadFIFO>
 8017cfa:	4603      	mov	r3, r0
 8017cfc:	60fb      	str	r3, [r7, #12]
      index++;
 8017cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d00:	3301      	adds	r3, #1
 8017d02:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8017d04:	f7f8 f8b6 	bl	800fe74 <HAL_GetTick>
 8017d08:	4602      	mov	r2, r0
 8017d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d0c:	1ad3      	subs	r3, r2, r3
 8017d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d12:	d102      	bne.n	8017d1a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8017d14:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8017d18:	e058      	b.n	8017dcc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017d20:	f240 532a 	movw	r3, #1322	@ 0x52a
 8017d24:	4013      	ands	r3, r2
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d0d1      	beq.n	8017cce <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017d30:	f003 0308 	and.w	r3, r3, #8
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d005      	beq.n	8017d44 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	2208      	movs	r2, #8
 8017d3e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8017d40:	2308      	movs	r3, #8
 8017d42:	e043      	b.n	8017dcc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017d4a:	f003 0302 	and.w	r3, r3, #2
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d005      	beq.n	8017d5e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	2202      	movs	r2, #2
 8017d58:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8017d5a:	2302      	movs	r3, #2
 8017d5c:	e036      	b.n	8017dcc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017d64:	f003 0320 	and.w	r3, r3, #32
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d005      	beq.n	8017d78 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	2220      	movs	r2, #32
 8017d72:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8017d74:	2320      	movs	r3, #32
 8017d76:	e029      	b.n	8017dcc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	4a15      	ldr	r2, [pc, #84]	@ (8017dd4 <SD_FindSCR+0x19c>)
 8017d7e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	061a      	lsls	r2, r3, #24
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	021b      	lsls	r3, r3, #8
 8017d88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8017d8c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	0a1b      	lsrs	r3, r3, #8
 8017d92:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8017d96:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	0e1b      	lsrs	r3, r3, #24
 8017d9c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8017d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017da0:	601a      	str	r2, [r3, #0]
    scr++;
 8017da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017da4:	3304      	adds	r3, #4
 8017da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8017da8:	68bb      	ldr	r3, [r7, #8]
 8017daa:	061a      	lsls	r2, r3, #24
 8017dac:	68bb      	ldr	r3, [r7, #8]
 8017dae:	021b      	lsls	r3, r3, #8
 8017db0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8017db4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8017db6:	68bb      	ldr	r3, [r7, #8]
 8017db8:	0a1b      	lsrs	r3, r3, #8
 8017dba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8017dbe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8017dc0:	68bb      	ldr	r3, [r7, #8]
 8017dc2:	0e1b      	lsrs	r3, r3, #24
 8017dc4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8017dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017dc8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8017dca:	2300      	movs	r3, #0
}
 8017dcc:	4618      	mov	r0, r3
 8017dce:	3738      	adds	r7, #56	@ 0x38
 8017dd0:	46bd      	mov	sp, r7
 8017dd2:	bd80      	pop	{r7, pc}
 8017dd4:	18000f3a 	.word	0x18000f3a

08017dd8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	b086      	sub	sp, #24
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017de4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017dea:	2b1f      	cmp	r3, #31
 8017dec:	d936      	bls.n	8017e5c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8017dee:	2300      	movs	r3, #0
 8017df0:	617b      	str	r3, [r7, #20]
 8017df2:	e027      	b.n	8017e44 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	4618      	mov	r0, r3
 8017dfa:	f001 fb83 	bl	8019504 <SDMMC_ReadFIFO>
 8017dfe:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	b2da      	uxtb	r2, r3
 8017e04:	693b      	ldr	r3, [r7, #16]
 8017e06:	701a      	strb	r2, [r3, #0]
      tmp++;
 8017e08:	693b      	ldr	r3, [r7, #16]
 8017e0a:	3301      	adds	r3, #1
 8017e0c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	0a1b      	lsrs	r3, r3, #8
 8017e12:	b2da      	uxtb	r2, r3
 8017e14:	693b      	ldr	r3, [r7, #16]
 8017e16:	701a      	strb	r2, [r3, #0]
      tmp++;
 8017e18:	693b      	ldr	r3, [r7, #16]
 8017e1a:	3301      	adds	r3, #1
 8017e1c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8017e1e:	68fb      	ldr	r3, [r7, #12]
 8017e20:	0c1b      	lsrs	r3, r3, #16
 8017e22:	b2da      	uxtb	r2, r3
 8017e24:	693b      	ldr	r3, [r7, #16]
 8017e26:	701a      	strb	r2, [r3, #0]
      tmp++;
 8017e28:	693b      	ldr	r3, [r7, #16]
 8017e2a:	3301      	adds	r3, #1
 8017e2c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	0e1b      	lsrs	r3, r3, #24
 8017e32:	b2da      	uxtb	r2, r3
 8017e34:	693b      	ldr	r3, [r7, #16]
 8017e36:	701a      	strb	r2, [r3, #0]
      tmp++;
 8017e38:	693b      	ldr	r3, [r7, #16]
 8017e3a:	3301      	adds	r3, #1
 8017e3c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8017e3e:	697b      	ldr	r3, [r7, #20]
 8017e40:	3301      	adds	r3, #1
 8017e42:	617b      	str	r3, [r7, #20]
 8017e44:	697b      	ldr	r3, [r7, #20]
 8017e46:	2b07      	cmp	r3, #7
 8017e48:	d9d4      	bls.n	8017df4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	693a      	ldr	r2, [r7, #16]
 8017e4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e54:	f1a3 0220 	sub.w	r2, r3, #32
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8017e5c:	bf00      	nop
 8017e5e:	3718      	adds	r7, #24
 8017e60:	46bd      	mov	sp, r7
 8017e62:	bd80      	pop	{r7, pc}

08017e64 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8017e64:	b580      	push	{r7, lr}
 8017e66:	b086      	sub	sp, #24
 8017e68:	af00      	add	r7, sp, #0
 8017e6a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	69db      	ldr	r3, [r3, #28]
 8017e70:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	6a1b      	ldr	r3, [r3, #32]
 8017e76:	2b1f      	cmp	r3, #31
 8017e78:	d93a      	bls.n	8017ef0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8017e7a:	2300      	movs	r3, #0
 8017e7c:	617b      	str	r3, [r7, #20]
 8017e7e:	e02b      	b.n	8017ed8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8017e80:	693b      	ldr	r3, [r7, #16]
 8017e82:	781b      	ldrb	r3, [r3, #0]
 8017e84:	60fb      	str	r3, [r7, #12]
      tmp++;
 8017e86:	693b      	ldr	r3, [r7, #16]
 8017e88:	3301      	adds	r3, #1
 8017e8a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8017e8c:	693b      	ldr	r3, [r7, #16]
 8017e8e:	781b      	ldrb	r3, [r3, #0]
 8017e90:	021a      	lsls	r2, r3, #8
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	4313      	orrs	r3, r2
 8017e96:	60fb      	str	r3, [r7, #12]
      tmp++;
 8017e98:	693b      	ldr	r3, [r7, #16]
 8017e9a:	3301      	adds	r3, #1
 8017e9c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8017e9e:	693b      	ldr	r3, [r7, #16]
 8017ea0:	781b      	ldrb	r3, [r3, #0]
 8017ea2:	041a      	lsls	r2, r3, #16
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	4313      	orrs	r3, r2
 8017ea8:	60fb      	str	r3, [r7, #12]
      tmp++;
 8017eaa:	693b      	ldr	r3, [r7, #16]
 8017eac:	3301      	adds	r3, #1
 8017eae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8017eb0:	693b      	ldr	r3, [r7, #16]
 8017eb2:	781b      	ldrb	r3, [r3, #0]
 8017eb4:	061a      	lsls	r2, r3, #24
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	4313      	orrs	r3, r2
 8017eba:	60fb      	str	r3, [r7, #12]
      tmp++;
 8017ebc:	693b      	ldr	r3, [r7, #16]
 8017ebe:	3301      	adds	r3, #1
 8017ec0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	f107 020c 	add.w	r2, r7, #12
 8017eca:	4611      	mov	r1, r2
 8017ecc:	4618      	mov	r0, r3
 8017ece:	f001 fb26 	bl	801951e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8017ed2:	697b      	ldr	r3, [r7, #20]
 8017ed4:	3301      	adds	r3, #1
 8017ed6:	617b      	str	r3, [r7, #20]
 8017ed8:	697b      	ldr	r3, [r7, #20]
 8017eda:	2b07      	cmp	r3, #7
 8017edc:	d9d0      	bls.n	8017e80 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	693a      	ldr	r2, [r7, #16]
 8017ee2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	6a1b      	ldr	r3, [r3, #32]
 8017ee8:	f1a3 0220 	sub.w	r2, r3, #32
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	621a      	str	r2, [r3, #32]
  }
}
 8017ef0:	bf00      	nop
 8017ef2:	3718      	adds	r7, #24
 8017ef4:	46bd      	mov	sp, r7
 8017ef6:	bd80      	pop	{r7, pc}

08017ef8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8017ef8:	b480      	push	{r7}
 8017efa:	b083      	sub	sp, #12
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8017f00:	bf00      	nop
 8017f02:	370c      	adds	r7, #12
 8017f04:	46bd      	mov	sp, r7
 8017f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f0a:	4770      	bx	lr

08017f0c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8017f0c:	b480      	push	{r7}
 8017f0e:	b083      	sub	sp, #12
 8017f10:	af00      	add	r7, sp, #0
 8017f12:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8017f14:	bf00      	nop
 8017f16:	370c      	adds	r7, #12
 8017f18:	46bd      	mov	sp, r7
 8017f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f1e:	4770      	bx	lr

08017f20 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8017f20:	b480      	push	{r7}
 8017f22:	b083      	sub	sp, #12
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8017f28:	bf00      	nop
 8017f2a:	370c      	adds	r7, #12
 8017f2c:	46bd      	mov	sp, r7
 8017f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f32:	4770      	bx	lr

08017f34 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8017f34:	b480      	push	{r7}
 8017f36:	b083      	sub	sp, #12
 8017f38:	af00      	add	r7, sp, #0
 8017f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8017f3c:	bf00      	nop
 8017f3e:	370c      	adds	r7, #12
 8017f40:	46bd      	mov	sp, r7
 8017f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f46:	4770      	bx	lr

08017f48 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8017f48:	b580      	push	{r7, lr}
 8017f4a:	b084      	sub	sp, #16
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d101      	bne.n	8017f5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8017f56:	2301      	movs	r3, #1
 8017f58:	e10f      	b.n	801817a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	2200      	movs	r2, #0
 8017f5e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	4a87      	ldr	r2, [pc, #540]	@ (8018184 <HAL_SPI_Init+0x23c>)
 8017f66:	4293      	cmp	r3, r2
 8017f68:	d00f      	beq.n	8017f8a <HAL_SPI_Init+0x42>
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	4a86      	ldr	r2, [pc, #536]	@ (8018188 <HAL_SPI_Init+0x240>)
 8017f70:	4293      	cmp	r3, r2
 8017f72:	d00a      	beq.n	8017f8a <HAL_SPI_Init+0x42>
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	4a84      	ldr	r2, [pc, #528]	@ (801818c <HAL_SPI_Init+0x244>)
 8017f7a:	4293      	cmp	r3, r2
 8017f7c:	d005      	beq.n	8017f8a <HAL_SPI_Init+0x42>
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	68db      	ldr	r3, [r3, #12]
 8017f82:	2b0f      	cmp	r3, #15
 8017f84:	d901      	bls.n	8017f8a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8017f86:	2301      	movs	r3, #1
 8017f88:	e0f7      	b.n	801817a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8017f8a:	6878      	ldr	r0, [r7, #4]
 8017f8c:	f000 f90a 	bl	80181a4 <SPI_GetPacketSize>
 8017f90:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	4a7b      	ldr	r2, [pc, #492]	@ (8018184 <HAL_SPI_Init+0x23c>)
 8017f98:	4293      	cmp	r3, r2
 8017f9a:	d00c      	beq.n	8017fb6 <HAL_SPI_Init+0x6e>
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	4a79      	ldr	r2, [pc, #484]	@ (8018188 <HAL_SPI_Init+0x240>)
 8017fa2:	4293      	cmp	r3, r2
 8017fa4:	d007      	beq.n	8017fb6 <HAL_SPI_Init+0x6e>
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	4a78      	ldr	r2, [pc, #480]	@ (801818c <HAL_SPI_Init+0x244>)
 8017fac:	4293      	cmp	r3, r2
 8017fae:	d002      	beq.n	8017fb6 <HAL_SPI_Init+0x6e>
 8017fb0:	68fb      	ldr	r3, [r7, #12]
 8017fb2:	2b08      	cmp	r3, #8
 8017fb4:	d811      	bhi.n	8017fda <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8017fba:	4a72      	ldr	r2, [pc, #456]	@ (8018184 <HAL_SPI_Init+0x23c>)
 8017fbc:	4293      	cmp	r3, r2
 8017fbe:	d009      	beq.n	8017fd4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	4a70      	ldr	r2, [pc, #448]	@ (8018188 <HAL_SPI_Init+0x240>)
 8017fc6:	4293      	cmp	r3, r2
 8017fc8:	d004      	beq.n	8017fd4 <HAL_SPI_Init+0x8c>
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	4a6f      	ldr	r2, [pc, #444]	@ (801818c <HAL_SPI_Init+0x244>)
 8017fd0:	4293      	cmp	r3, r2
 8017fd2:	d104      	bne.n	8017fde <HAL_SPI_Init+0x96>
 8017fd4:	68fb      	ldr	r3, [r7, #12]
 8017fd6:	2b10      	cmp	r3, #16
 8017fd8:	d901      	bls.n	8017fde <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8017fda:	2301      	movs	r3, #1
 8017fdc:	e0cd      	b.n	801817a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8017fe4:	b2db      	uxtb	r3, r3
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d106      	bne.n	8017ff8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	2200      	movs	r2, #0
 8017fee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8017ff2:	6878      	ldr	r0, [r7, #4]
 8017ff4:	f000 f8cc 	bl	8018190 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	2202      	movs	r2, #2
 8017ffc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	681a      	ldr	r2, [r3, #0]
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	f022 0201 	bic.w	r2, r2, #1
 801800e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	689b      	ldr	r3, [r3, #8]
 8018016:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801801a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	699b      	ldr	r3, [r3, #24]
 8018020:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8018024:	d119      	bne.n	801805a <HAL_SPI_Init+0x112>
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	685b      	ldr	r3, [r3, #4]
 801802a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801802e:	d103      	bne.n	8018038 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8018034:	2b00      	cmp	r3, #0
 8018036:	d008      	beq.n	801804a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801803c:	2b00      	cmp	r3, #0
 801803e:	d10c      	bne.n	801805a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8018044:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018048:	d107      	bne.n	801805a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	681a      	ldr	r2, [r3, #0]
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8018058:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	685b      	ldr	r3, [r3, #4]
 801805e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018062:	2b00      	cmp	r3, #0
 8018064:	d00f      	beq.n	8018086 <HAL_SPI_Init+0x13e>
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	68db      	ldr	r3, [r3, #12]
 801806a:	2b06      	cmp	r3, #6
 801806c:	d90b      	bls.n	8018086 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	430a      	orrs	r2, r1
 8018082:	601a      	str	r2, [r3, #0]
 8018084:	e007      	b.n	8018096 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	681a      	ldr	r2, [r3, #0]
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8018094:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	69da      	ldr	r2, [r3, #28]
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801809e:	431a      	orrs	r2, r3
 80180a0:	68bb      	ldr	r3, [r7, #8]
 80180a2:	431a      	orrs	r2, r3
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80180a8:	ea42 0103 	orr.w	r1, r2, r3
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	68da      	ldr	r2, [r3, #12]
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	430a      	orrs	r2, r1
 80180b6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180c0:	431a      	orrs	r2, r3
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80180c6:	431a      	orrs	r2, r3
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	699b      	ldr	r3, [r3, #24]
 80180cc:	431a      	orrs	r2, r3
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	691b      	ldr	r3, [r3, #16]
 80180d2:	431a      	orrs	r2, r3
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	695b      	ldr	r3, [r3, #20]
 80180d8:	431a      	orrs	r2, r3
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	6a1b      	ldr	r3, [r3, #32]
 80180de:	431a      	orrs	r2, r3
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	685b      	ldr	r3, [r3, #4]
 80180e4:	431a      	orrs	r2, r3
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80180ea:	431a      	orrs	r2, r3
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	689b      	ldr	r3, [r3, #8]
 80180f0:	431a      	orrs	r2, r3
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80180f6:	ea42 0103 	orr.w	r1, r2, r3
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	430a      	orrs	r2, r1
 8018104:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	685b      	ldr	r3, [r3, #4]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d113      	bne.n	8018136 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	689b      	ldr	r3, [r3, #8]
 8018114:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8018120:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	689b      	ldr	r3, [r3, #8]
 8018128:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8018134:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	f022 0201 	bic.w	r2, r2, #1
 8018144:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	685b      	ldr	r3, [r3, #4]
 801814a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801814e:	2b00      	cmp	r3, #0
 8018150:	d00a      	beq.n	8018168 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	68db      	ldr	r3, [r3, #12]
 8018158:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	430a      	orrs	r2, r1
 8018166:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	2200      	movs	r2, #0
 801816c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	2201      	movs	r2, #1
 8018174:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8018178:	2300      	movs	r3, #0
}
 801817a:	4618      	mov	r0, r3
 801817c:	3710      	adds	r7, #16
 801817e:	46bd      	mov	sp, r7
 8018180:	bd80      	pop	{r7, pc}
 8018182:	bf00      	nop
 8018184:	40013000 	.word	0x40013000
 8018188:	40003800 	.word	0x40003800
 801818c:	40003c00 	.word	0x40003c00

08018190 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8018190:	b480      	push	{r7}
 8018192:	b083      	sub	sp, #12
 8018194:	af00      	add	r7, sp, #0
 8018196:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8018198:	bf00      	nop
 801819a:	370c      	adds	r7, #12
 801819c:	46bd      	mov	sp, r7
 801819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a2:	4770      	bx	lr

080181a4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80181a4:	b480      	push	{r7}
 80181a6:	b085      	sub	sp, #20
 80181a8:	af00      	add	r7, sp, #0
 80181aa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80181b0:	095b      	lsrs	r3, r3, #5
 80181b2:	3301      	adds	r3, #1
 80181b4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	68db      	ldr	r3, [r3, #12]
 80181ba:	3301      	adds	r3, #1
 80181bc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80181be:	68bb      	ldr	r3, [r7, #8]
 80181c0:	3307      	adds	r3, #7
 80181c2:	08db      	lsrs	r3, r3, #3
 80181c4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80181c6:	68bb      	ldr	r3, [r7, #8]
 80181c8:	68fa      	ldr	r2, [r7, #12]
 80181ca:	fb02 f303 	mul.w	r3, r2, r3
}
 80181ce:	4618      	mov	r0, r3
 80181d0:	3714      	adds	r7, #20
 80181d2:	46bd      	mov	sp, r7
 80181d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d8:	4770      	bx	lr

080181da <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80181da:	b580      	push	{r7, lr}
 80181dc:	b082      	sub	sp, #8
 80181de:	af00      	add	r7, sp, #0
 80181e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d101      	bne.n	80181ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80181e8:	2301      	movs	r3, #1
 80181ea:	e042      	b.n	8018272 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d106      	bne.n	8018204 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	2200      	movs	r2, #0
 80181fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80181fe:	6878      	ldr	r0, [r7, #4]
 8018200:	f7f3 fafc 	bl	800b7fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	2224      	movs	r2, #36	@ 0x24
 8018208:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	681a      	ldr	r2, [r3, #0]
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	f022 0201 	bic.w	r2, r2, #1
 801821a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018220:	2b00      	cmp	r3, #0
 8018222:	d002      	beq.n	801822a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8018224:	6878      	ldr	r0, [r7, #4]
 8018226:	f000 fe1f 	bl	8018e68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801822a:	6878      	ldr	r0, [r7, #4]
 801822c:	f000 f8b4 	bl	8018398 <UART_SetConfig>
 8018230:	4603      	mov	r3, r0
 8018232:	2b01      	cmp	r3, #1
 8018234:	d101      	bne.n	801823a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8018236:	2301      	movs	r3, #1
 8018238:	e01b      	b.n	8018272 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	685a      	ldr	r2, [r3, #4]
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8018248:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	689a      	ldr	r2, [r3, #8]
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8018258:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	681a      	ldr	r2, [r3, #0]
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	f042 0201 	orr.w	r2, r2, #1
 8018268:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801826a:	6878      	ldr	r0, [r7, #4]
 801826c:	f000 fe9e 	bl	8018fac <UART_CheckIdleState>
 8018270:	4603      	mov	r3, r0
}
 8018272:	4618      	mov	r0, r3
 8018274:	3708      	adds	r7, #8
 8018276:	46bd      	mov	sp, r7
 8018278:	bd80      	pop	{r7, pc}

0801827a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801827a:	b580      	push	{r7, lr}
 801827c:	b08a      	sub	sp, #40	@ 0x28
 801827e:	af02      	add	r7, sp, #8
 8018280:	60f8      	str	r0, [r7, #12]
 8018282:	60b9      	str	r1, [r7, #8]
 8018284:	603b      	str	r3, [r7, #0]
 8018286:	4613      	mov	r3, r2
 8018288:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018290:	2b20      	cmp	r3, #32
 8018292:	d17b      	bne.n	801838c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8018294:	68bb      	ldr	r3, [r7, #8]
 8018296:	2b00      	cmp	r3, #0
 8018298:	d002      	beq.n	80182a0 <HAL_UART_Transmit+0x26>
 801829a:	88fb      	ldrh	r3, [r7, #6]
 801829c:	2b00      	cmp	r3, #0
 801829e:	d101      	bne.n	80182a4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80182a0:	2301      	movs	r3, #1
 80182a2:	e074      	b.n	801838e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	2200      	movs	r2, #0
 80182a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80182ac:	68fb      	ldr	r3, [r7, #12]
 80182ae:	2221      	movs	r2, #33	@ 0x21
 80182b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80182b4:	f7f7 fdde 	bl	800fe74 <HAL_GetTick>
 80182b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80182ba:	68fb      	ldr	r3, [r7, #12]
 80182bc:	88fa      	ldrh	r2, [r7, #6]
 80182be:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	88fa      	ldrh	r2, [r7, #6]
 80182c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	689b      	ldr	r3, [r3, #8]
 80182ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80182d2:	d108      	bne.n	80182e6 <HAL_UART_Transmit+0x6c>
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	691b      	ldr	r3, [r3, #16]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d104      	bne.n	80182e6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80182dc:	2300      	movs	r3, #0
 80182de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80182e0:	68bb      	ldr	r3, [r7, #8]
 80182e2:	61bb      	str	r3, [r7, #24]
 80182e4:	e003      	b.n	80182ee <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80182e6:	68bb      	ldr	r3, [r7, #8]
 80182e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80182ea:	2300      	movs	r3, #0
 80182ec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80182ee:	e030      	b.n	8018352 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80182f0:	683b      	ldr	r3, [r7, #0]
 80182f2:	9300      	str	r3, [sp, #0]
 80182f4:	697b      	ldr	r3, [r7, #20]
 80182f6:	2200      	movs	r2, #0
 80182f8:	2180      	movs	r1, #128	@ 0x80
 80182fa:	68f8      	ldr	r0, [r7, #12]
 80182fc:	f000 ff00 	bl	8019100 <UART_WaitOnFlagUntilTimeout>
 8018300:	4603      	mov	r3, r0
 8018302:	2b00      	cmp	r3, #0
 8018304:	d005      	beq.n	8018312 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	2220      	movs	r2, #32
 801830a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 801830e:	2303      	movs	r3, #3
 8018310:	e03d      	b.n	801838e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8018312:	69fb      	ldr	r3, [r7, #28]
 8018314:	2b00      	cmp	r3, #0
 8018316:	d10b      	bne.n	8018330 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8018318:	69bb      	ldr	r3, [r7, #24]
 801831a:	881b      	ldrh	r3, [r3, #0]
 801831c:	461a      	mov	r2, r3
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8018326:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8018328:	69bb      	ldr	r3, [r7, #24]
 801832a:	3302      	adds	r3, #2
 801832c:	61bb      	str	r3, [r7, #24]
 801832e:	e007      	b.n	8018340 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8018330:	69fb      	ldr	r3, [r7, #28]
 8018332:	781a      	ldrb	r2, [r3, #0]
 8018334:	68fb      	ldr	r3, [r7, #12]
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801833a:	69fb      	ldr	r3, [r7, #28]
 801833c:	3301      	adds	r3, #1
 801833e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8018346:	b29b      	uxth	r3, r3
 8018348:	3b01      	subs	r3, #1
 801834a:	b29a      	uxth	r2, r3
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8018358:	b29b      	uxth	r3, r3
 801835a:	2b00      	cmp	r3, #0
 801835c:	d1c8      	bne.n	80182f0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801835e:	683b      	ldr	r3, [r7, #0]
 8018360:	9300      	str	r3, [sp, #0]
 8018362:	697b      	ldr	r3, [r7, #20]
 8018364:	2200      	movs	r2, #0
 8018366:	2140      	movs	r1, #64	@ 0x40
 8018368:	68f8      	ldr	r0, [r7, #12]
 801836a:	f000 fec9 	bl	8019100 <UART_WaitOnFlagUntilTimeout>
 801836e:	4603      	mov	r3, r0
 8018370:	2b00      	cmp	r3, #0
 8018372:	d005      	beq.n	8018380 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	2220      	movs	r2, #32
 8018378:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801837c:	2303      	movs	r3, #3
 801837e:	e006      	b.n	801838e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	2220      	movs	r2, #32
 8018384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8018388:	2300      	movs	r3, #0
 801838a:	e000      	b.n	801838e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801838c:	2302      	movs	r3, #2
  }
}
 801838e:	4618      	mov	r0, r3
 8018390:	3720      	adds	r7, #32
 8018392:	46bd      	mov	sp, r7
 8018394:	bd80      	pop	{r7, pc}
	...

08018398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801839c:	b092      	sub	sp, #72	@ 0x48
 801839e:	af00      	add	r7, sp, #0
 80183a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80183a2:	2300      	movs	r3, #0
 80183a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80183a8:	697b      	ldr	r3, [r7, #20]
 80183aa:	689a      	ldr	r2, [r3, #8]
 80183ac:	697b      	ldr	r3, [r7, #20]
 80183ae:	691b      	ldr	r3, [r3, #16]
 80183b0:	431a      	orrs	r2, r3
 80183b2:	697b      	ldr	r3, [r7, #20]
 80183b4:	695b      	ldr	r3, [r3, #20]
 80183b6:	431a      	orrs	r2, r3
 80183b8:	697b      	ldr	r3, [r7, #20]
 80183ba:	69db      	ldr	r3, [r3, #28]
 80183bc:	4313      	orrs	r3, r2
 80183be:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80183c0:	697b      	ldr	r3, [r7, #20]
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	681a      	ldr	r2, [r3, #0]
 80183c6:	4bbe      	ldr	r3, [pc, #760]	@ (80186c0 <UART_SetConfig+0x328>)
 80183c8:	4013      	ands	r3, r2
 80183ca:	697a      	ldr	r2, [r7, #20]
 80183cc:	6812      	ldr	r2, [r2, #0]
 80183ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80183d0:	430b      	orrs	r3, r1
 80183d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80183d4:	697b      	ldr	r3, [r7, #20]
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	685b      	ldr	r3, [r3, #4]
 80183da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80183de:	697b      	ldr	r3, [r7, #20]
 80183e0:	68da      	ldr	r2, [r3, #12]
 80183e2:	697b      	ldr	r3, [r7, #20]
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	430a      	orrs	r2, r1
 80183e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80183ea:	697b      	ldr	r3, [r7, #20]
 80183ec:	699b      	ldr	r3, [r3, #24]
 80183ee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80183f0:	697b      	ldr	r3, [r7, #20]
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	4ab3      	ldr	r2, [pc, #716]	@ (80186c4 <UART_SetConfig+0x32c>)
 80183f6:	4293      	cmp	r3, r2
 80183f8:	d004      	beq.n	8018404 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80183fa:	697b      	ldr	r3, [r7, #20]
 80183fc:	6a1b      	ldr	r3, [r3, #32]
 80183fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018400:	4313      	orrs	r3, r2
 8018402:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018404:	697b      	ldr	r3, [r7, #20]
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	689a      	ldr	r2, [r3, #8]
 801840a:	4baf      	ldr	r3, [pc, #700]	@ (80186c8 <UART_SetConfig+0x330>)
 801840c:	4013      	ands	r3, r2
 801840e:	697a      	ldr	r2, [r7, #20]
 8018410:	6812      	ldr	r2, [r2, #0]
 8018412:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018414:	430b      	orrs	r3, r1
 8018416:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018418:	697b      	ldr	r3, [r7, #20]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801841e:	f023 010f 	bic.w	r1, r3, #15
 8018422:	697b      	ldr	r3, [r7, #20]
 8018424:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018426:	697b      	ldr	r3, [r7, #20]
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	430a      	orrs	r2, r1
 801842c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801842e:	697b      	ldr	r3, [r7, #20]
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	4aa6      	ldr	r2, [pc, #664]	@ (80186cc <UART_SetConfig+0x334>)
 8018434:	4293      	cmp	r3, r2
 8018436:	d177      	bne.n	8018528 <UART_SetConfig+0x190>
 8018438:	4ba5      	ldr	r3, [pc, #660]	@ (80186d0 <UART_SetConfig+0x338>)
 801843a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801843c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018440:	2b28      	cmp	r3, #40	@ 0x28
 8018442:	d86d      	bhi.n	8018520 <UART_SetConfig+0x188>
 8018444:	a201      	add	r2, pc, #4	@ (adr r2, 801844c <UART_SetConfig+0xb4>)
 8018446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801844a:	bf00      	nop
 801844c:	080184f1 	.word	0x080184f1
 8018450:	08018521 	.word	0x08018521
 8018454:	08018521 	.word	0x08018521
 8018458:	08018521 	.word	0x08018521
 801845c:	08018521 	.word	0x08018521
 8018460:	08018521 	.word	0x08018521
 8018464:	08018521 	.word	0x08018521
 8018468:	08018521 	.word	0x08018521
 801846c:	080184f9 	.word	0x080184f9
 8018470:	08018521 	.word	0x08018521
 8018474:	08018521 	.word	0x08018521
 8018478:	08018521 	.word	0x08018521
 801847c:	08018521 	.word	0x08018521
 8018480:	08018521 	.word	0x08018521
 8018484:	08018521 	.word	0x08018521
 8018488:	08018521 	.word	0x08018521
 801848c:	08018501 	.word	0x08018501
 8018490:	08018521 	.word	0x08018521
 8018494:	08018521 	.word	0x08018521
 8018498:	08018521 	.word	0x08018521
 801849c:	08018521 	.word	0x08018521
 80184a0:	08018521 	.word	0x08018521
 80184a4:	08018521 	.word	0x08018521
 80184a8:	08018521 	.word	0x08018521
 80184ac:	08018509 	.word	0x08018509
 80184b0:	08018521 	.word	0x08018521
 80184b4:	08018521 	.word	0x08018521
 80184b8:	08018521 	.word	0x08018521
 80184bc:	08018521 	.word	0x08018521
 80184c0:	08018521 	.word	0x08018521
 80184c4:	08018521 	.word	0x08018521
 80184c8:	08018521 	.word	0x08018521
 80184cc:	08018511 	.word	0x08018511
 80184d0:	08018521 	.word	0x08018521
 80184d4:	08018521 	.word	0x08018521
 80184d8:	08018521 	.word	0x08018521
 80184dc:	08018521 	.word	0x08018521
 80184e0:	08018521 	.word	0x08018521
 80184e4:	08018521 	.word	0x08018521
 80184e8:	08018521 	.word	0x08018521
 80184ec:	08018519 	.word	0x08018519
 80184f0:	2301      	movs	r3, #1
 80184f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80184f6:	e222      	b.n	801893e <UART_SetConfig+0x5a6>
 80184f8:	2304      	movs	r3, #4
 80184fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80184fe:	e21e      	b.n	801893e <UART_SetConfig+0x5a6>
 8018500:	2308      	movs	r3, #8
 8018502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018506:	e21a      	b.n	801893e <UART_SetConfig+0x5a6>
 8018508:	2310      	movs	r3, #16
 801850a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801850e:	e216      	b.n	801893e <UART_SetConfig+0x5a6>
 8018510:	2320      	movs	r3, #32
 8018512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018516:	e212      	b.n	801893e <UART_SetConfig+0x5a6>
 8018518:	2340      	movs	r3, #64	@ 0x40
 801851a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801851e:	e20e      	b.n	801893e <UART_SetConfig+0x5a6>
 8018520:	2380      	movs	r3, #128	@ 0x80
 8018522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018526:	e20a      	b.n	801893e <UART_SetConfig+0x5a6>
 8018528:	697b      	ldr	r3, [r7, #20]
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	4a69      	ldr	r2, [pc, #420]	@ (80186d4 <UART_SetConfig+0x33c>)
 801852e:	4293      	cmp	r3, r2
 8018530:	d130      	bne.n	8018594 <UART_SetConfig+0x1fc>
 8018532:	4b67      	ldr	r3, [pc, #412]	@ (80186d0 <UART_SetConfig+0x338>)
 8018534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018536:	f003 0307 	and.w	r3, r3, #7
 801853a:	2b05      	cmp	r3, #5
 801853c:	d826      	bhi.n	801858c <UART_SetConfig+0x1f4>
 801853e:	a201      	add	r2, pc, #4	@ (adr r2, 8018544 <UART_SetConfig+0x1ac>)
 8018540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018544:	0801855d 	.word	0x0801855d
 8018548:	08018565 	.word	0x08018565
 801854c:	0801856d 	.word	0x0801856d
 8018550:	08018575 	.word	0x08018575
 8018554:	0801857d 	.word	0x0801857d
 8018558:	08018585 	.word	0x08018585
 801855c:	2300      	movs	r3, #0
 801855e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018562:	e1ec      	b.n	801893e <UART_SetConfig+0x5a6>
 8018564:	2304      	movs	r3, #4
 8018566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801856a:	e1e8      	b.n	801893e <UART_SetConfig+0x5a6>
 801856c:	2308      	movs	r3, #8
 801856e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018572:	e1e4      	b.n	801893e <UART_SetConfig+0x5a6>
 8018574:	2310      	movs	r3, #16
 8018576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801857a:	e1e0      	b.n	801893e <UART_SetConfig+0x5a6>
 801857c:	2320      	movs	r3, #32
 801857e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018582:	e1dc      	b.n	801893e <UART_SetConfig+0x5a6>
 8018584:	2340      	movs	r3, #64	@ 0x40
 8018586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801858a:	e1d8      	b.n	801893e <UART_SetConfig+0x5a6>
 801858c:	2380      	movs	r3, #128	@ 0x80
 801858e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018592:	e1d4      	b.n	801893e <UART_SetConfig+0x5a6>
 8018594:	697b      	ldr	r3, [r7, #20]
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	4a4f      	ldr	r2, [pc, #316]	@ (80186d8 <UART_SetConfig+0x340>)
 801859a:	4293      	cmp	r3, r2
 801859c:	d130      	bne.n	8018600 <UART_SetConfig+0x268>
 801859e:	4b4c      	ldr	r3, [pc, #304]	@ (80186d0 <UART_SetConfig+0x338>)
 80185a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80185a2:	f003 0307 	and.w	r3, r3, #7
 80185a6:	2b05      	cmp	r3, #5
 80185a8:	d826      	bhi.n	80185f8 <UART_SetConfig+0x260>
 80185aa:	a201      	add	r2, pc, #4	@ (adr r2, 80185b0 <UART_SetConfig+0x218>)
 80185ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185b0:	080185c9 	.word	0x080185c9
 80185b4:	080185d1 	.word	0x080185d1
 80185b8:	080185d9 	.word	0x080185d9
 80185bc:	080185e1 	.word	0x080185e1
 80185c0:	080185e9 	.word	0x080185e9
 80185c4:	080185f1 	.word	0x080185f1
 80185c8:	2300      	movs	r3, #0
 80185ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185ce:	e1b6      	b.n	801893e <UART_SetConfig+0x5a6>
 80185d0:	2304      	movs	r3, #4
 80185d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185d6:	e1b2      	b.n	801893e <UART_SetConfig+0x5a6>
 80185d8:	2308      	movs	r3, #8
 80185da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185de:	e1ae      	b.n	801893e <UART_SetConfig+0x5a6>
 80185e0:	2310      	movs	r3, #16
 80185e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185e6:	e1aa      	b.n	801893e <UART_SetConfig+0x5a6>
 80185e8:	2320      	movs	r3, #32
 80185ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185ee:	e1a6      	b.n	801893e <UART_SetConfig+0x5a6>
 80185f0:	2340      	movs	r3, #64	@ 0x40
 80185f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185f6:	e1a2      	b.n	801893e <UART_SetConfig+0x5a6>
 80185f8:	2380      	movs	r3, #128	@ 0x80
 80185fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185fe:	e19e      	b.n	801893e <UART_SetConfig+0x5a6>
 8018600:	697b      	ldr	r3, [r7, #20]
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	4a35      	ldr	r2, [pc, #212]	@ (80186dc <UART_SetConfig+0x344>)
 8018606:	4293      	cmp	r3, r2
 8018608:	d130      	bne.n	801866c <UART_SetConfig+0x2d4>
 801860a:	4b31      	ldr	r3, [pc, #196]	@ (80186d0 <UART_SetConfig+0x338>)
 801860c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801860e:	f003 0307 	and.w	r3, r3, #7
 8018612:	2b05      	cmp	r3, #5
 8018614:	d826      	bhi.n	8018664 <UART_SetConfig+0x2cc>
 8018616:	a201      	add	r2, pc, #4	@ (adr r2, 801861c <UART_SetConfig+0x284>)
 8018618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801861c:	08018635 	.word	0x08018635
 8018620:	0801863d 	.word	0x0801863d
 8018624:	08018645 	.word	0x08018645
 8018628:	0801864d 	.word	0x0801864d
 801862c:	08018655 	.word	0x08018655
 8018630:	0801865d 	.word	0x0801865d
 8018634:	2300      	movs	r3, #0
 8018636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801863a:	e180      	b.n	801893e <UART_SetConfig+0x5a6>
 801863c:	2304      	movs	r3, #4
 801863e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018642:	e17c      	b.n	801893e <UART_SetConfig+0x5a6>
 8018644:	2308      	movs	r3, #8
 8018646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801864a:	e178      	b.n	801893e <UART_SetConfig+0x5a6>
 801864c:	2310      	movs	r3, #16
 801864e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018652:	e174      	b.n	801893e <UART_SetConfig+0x5a6>
 8018654:	2320      	movs	r3, #32
 8018656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801865a:	e170      	b.n	801893e <UART_SetConfig+0x5a6>
 801865c:	2340      	movs	r3, #64	@ 0x40
 801865e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018662:	e16c      	b.n	801893e <UART_SetConfig+0x5a6>
 8018664:	2380      	movs	r3, #128	@ 0x80
 8018666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801866a:	e168      	b.n	801893e <UART_SetConfig+0x5a6>
 801866c:	697b      	ldr	r3, [r7, #20]
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	4a1b      	ldr	r2, [pc, #108]	@ (80186e0 <UART_SetConfig+0x348>)
 8018672:	4293      	cmp	r3, r2
 8018674:	d142      	bne.n	80186fc <UART_SetConfig+0x364>
 8018676:	4b16      	ldr	r3, [pc, #88]	@ (80186d0 <UART_SetConfig+0x338>)
 8018678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801867a:	f003 0307 	and.w	r3, r3, #7
 801867e:	2b05      	cmp	r3, #5
 8018680:	d838      	bhi.n	80186f4 <UART_SetConfig+0x35c>
 8018682:	a201      	add	r2, pc, #4	@ (adr r2, 8018688 <UART_SetConfig+0x2f0>)
 8018684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018688:	080186a1 	.word	0x080186a1
 801868c:	080186a9 	.word	0x080186a9
 8018690:	080186b1 	.word	0x080186b1
 8018694:	080186b9 	.word	0x080186b9
 8018698:	080186e5 	.word	0x080186e5
 801869c:	080186ed 	.word	0x080186ed
 80186a0:	2300      	movs	r3, #0
 80186a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186a6:	e14a      	b.n	801893e <UART_SetConfig+0x5a6>
 80186a8:	2304      	movs	r3, #4
 80186aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186ae:	e146      	b.n	801893e <UART_SetConfig+0x5a6>
 80186b0:	2308      	movs	r3, #8
 80186b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186b6:	e142      	b.n	801893e <UART_SetConfig+0x5a6>
 80186b8:	2310      	movs	r3, #16
 80186ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186be:	e13e      	b.n	801893e <UART_SetConfig+0x5a6>
 80186c0:	cfff69f3 	.word	0xcfff69f3
 80186c4:	58000c00 	.word	0x58000c00
 80186c8:	11fff4ff 	.word	0x11fff4ff
 80186cc:	40011000 	.word	0x40011000
 80186d0:	58024400 	.word	0x58024400
 80186d4:	40004400 	.word	0x40004400
 80186d8:	40004800 	.word	0x40004800
 80186dc:	40004c00 	.word	0x40004c00
 80186e0:	40005000 	.word	0x40005000
 80186e4:	2320      	movs	r3, #32
 80186e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186ea:	e128      	b.n	801893e <UART_SetConfig+0x5a6>
 80186ec:	2340      	movs	r3, #64	@ 0x40
 80186ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186f2:	e124      	b.n	801893e <UART_SetConfig+0x5a6>
 80186f4:	2380      	movs	r3, #128	@ 0x80
 80186f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186fa:	e120      	b.n	801893e <UART_SetConfig+0x5a6>
 80186fc:	697b      	ldr	r3, [r7, #20]
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	4acb      	ldr	r2, [pc, #812]	@ (8018a30 <UART_SetConfig+0x698>)
 8018702:	4293      	cmp	r3, r2
 8018704:	d176      	bne.n	80187f4 <UART_SetConfig+0x45c>
 8018706:	4bcb      	ldr	r3, [pc, #812]	@ (8018a34 <UART_SetConfig+0x69c>)
 8018708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801870a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801870e:	2b28      	cmp	r3, #40	@ 0x28
 8018710:	d86c      	bhi.n	80187ec <UART_SetConfig+0x454>
 8018712:	a201      	add	r2, pc, #4	@ (adr r2, 8018718 <UART_SetConfig+0x380>)
 8018714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018718:	080187bd 	.word	0x080187bd
 801871c:	080187ed 	.word	0x080187ed
 8018720:	080187ed 	.word	0x080187ed
 8018724:	080187ed 	.word	0x080187ed
 8018728:	080187ed 	.word	0x080187ed
 801872c:	080187ed 	.word	0x080187ed
 8018730:	080187ed 	.word	0x080187ed
 8018734:	080187ed 	.word	0x080187ed
 8018738:	080187c5 	.word	0x080187c5
 801873c:	080187ed 	.word	0x080187ed
 8018740:	080187ed 	.word	0x080187ed
 8018744:	080187ed 	.word	0x080187ed
 8018748:	080187ed 	.word	0x080187ed
 801874c:	080187ed 	.word	0x080187ed
 8018750:	080187ed 	.word	0x080187ed
 8018754:	080187ed 	.word	0x080187ed
 8018758:	080187cd 	.word	0x080187cd
 801875c:	080187ed 	.word	0x080187ed
 8018760:	080187ed 	.word	0x080187ed
 8018764:	080187ed 	.word	0x080187ed
 8018768:	080187ed 	.word	0x080187ed
 801876c:	080187ed 	.word	0x080187ed
 8018770:	080187ed 	.word	0x080187ed
 8018774:	080187ed 	.word	0x080187ed
 8018778:	080187d5 	.word	0x080187d5
 801877c:	080187ed 	.word	0x080187ed
 8018780:	080187ed 	.word	0x080187ed
 8018784:	080187ed 	.word	0x080187ed
 8018788:	080187ed 	.word	0x080187ed
 801878c:	080187ed 	.word	0x080187ed
 8018790:	080187ed 	.word	0x080187ed
 8018794:	080187ed 	.word	0x080187ed
 8018798:	080187dd 	.word	0x080187dd
 801879c:	080187ed 	.word	0x080187ed
 80187a0:	080187ed 	.word	0x080187ed
 80187a4:	080187ed 	.word	0x080187ed
 80187a8:	080187ed 	.word	0x080187ed
 80187ac:	080187ed 	.word	0x080187ed
 80187b0:	080187ed 	.word	0x080187ed
 80187b4:	080187ed 	.word	0x080187ed
 80187b8:	080187e5 	.word	0x080187e5
 80187bc:	2301      	movs	r3, #1
 80187be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187c2:	e0bc      	b.n	801893e <UART_SetConfig+0x5a6>
 80187c4:	2304      	movs	r3, #4
 80187c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187ca:	e0b8      	b.n	801893e <UART_SetConfig+0x5a6>
 80187cc:	2308      	movs	r3, #8
 80187ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187d2:	e0b4      	b.n	801893e <UART_SetConfig+0x5a6>
 80187d4:	2310      	movs	r3, #16
 80187d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187da:	e0b0      	b.n	801893e <UART_SetConfig+0x5a6>
 80187dc:	2320      	movs	r3, #32
 80187de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187e2:	e0ac      	b.n	801893e <UART_SetConfig+0x5a6>
 80187e4:	2340      	movs	r3, #64	@ 0x40
 80187e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187ea:	e0a8      	b.n	801893e <UART_SetConfig+0x5a6>
 80187ec:	2380      	movs	r3, #128	@ 0x80
 80187ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187f2:	e0a4      	b.n	801893e <UART_SetConfig+0x5a6>
 80187f4:	697b      	ldr	r3, [r7, #20]
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	4a8f      	ldr	r2, [pc, #572]	@ (8018a38 <UART_SetConfig+0x6a0>)
 80187fa:	4293      	cmp	r3, r2
 80187fc:	d130      	bne.n	8018860 <UART_SetConfig+0x4c8>
 80187fe:	4b8d      	ldr	r3, [pc, #564]	@ (8018a34 <UART_SetConfig+0x69c>)
 8018800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018802:	f003 0307 	and.w	r3, r3, #7
 8018806:	2b05      	cmp	r3, #5
 8018808:	d826      	bhi.n	8018858 <UART_SetConfig+0x4c0>
 801880a:	a201      	add	r2, pc, #4	@ (adr r2, 8018810 <UART_SetConfig+0x478>)
 801880c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018810:	08018829 	.word	0x08018829
 8018814:	08018831 	.word	0x08018831
 8018818:	08018839 	.word	0x08018839
 801881c:	08018841 	.word	0x08018841
 8018820:	08018849 	.word	0x08018849
 8018824:	08018851 	.word	0x08018851
 8018828:	2300      	movs	r3, #0
 801882a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801882e:	e086      	b.n	801893e <UART_SetConfig+0x5a6>
 8018830:	2304      	movs	r3, #4
 8018832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018836:	e082      	b.n	801893e <UART_SetConfig+0x5a6>
 8018838:	2308      	movs	r3, #8
 801883a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801883e:	e07e      	b.n	801893e <UART_SetConfig+0x5a6>
 8018840:	2310      	movs	r3, #16
 8018842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018846:	e07a      	b.n	801893e <UART_SetConfig+0x5a6>
 8018848:	2320      	movs	r3, #32
 801884a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801884e:	e076      	b.n	801893e <UART_SetConfig+0x5a6>
 8018850:	2340      	movs	r3, #64	@ 0x40
 8018852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018856:	e072      	b.n	801893e <UART_SetConfig+0x5a6>
 8018858:	2380      	movs	r3, #128	@ 0x80
 801885a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801885e:	e06e      	b.n	801893e <UART_SetConfig+0x5a6>
 8018860:	697b      	ldr	r3, [r7, #20]
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	4a75      	ldr	r2, [pc, #468]	@ (8018a3c <UART_SetConfig+0x6a4>)
 8018866:	4293      	cmp	r3, r2
 8018868:	d130      	bne.n	80188cc <UART_SetConfig+0x534>
 801886a:	4b72      	ldr	r3, [pc, #456]	@ (8018a34 <UART_SetConfig+0x69c>)
 801886c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801886e:	f003 0307 	and.w	r3, r3, #7
 8018872:	2b05      	cmp	r3, #5
 8018874:	d826      	bhi.n	80188c4 <UART_SetConfig+0x52c>
 8018876:	a201      	add	r2, pc, #4	@ (adr r2, 801887c <UART_SetConfig+0x4e4>)
 8018878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801887c:	08018895 	.word	0x08018895
 8018880:	0801889d 	.word	0x0801889d
 8018884:	080188a5 	.word	0x080188a5
 8018888:	080188ad 	.word	0x080188ad
 801888c:	080188b5 	.word	0x080188b5
 8018890:	080188bd 	.word	0x080188bd
 8018894:	2300      	movs	r3, #0
 8018896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801889a:	e050      	b.n	801893e <UART_SetConfig+0x5a6>
 801889c:	2304      	movs	r3, #4
 801889e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188a2:	e04c      	b.n	801893e <UART_SetConfig+0x5a6>
 80188a4:	2308      	movs	r3, #8
 80188a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188aa:	e048      	b.n	801893e <UART_SetConfig+0x5a6>
 80188ac:	2310      	movs	r3, #16
 80188ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188b2:	e044      	b.n	801893e <UART_SetConfig+0x5a6>
 80188b4:	2320      	movs	r3, #32
 80188b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188ba:	e040      	b.n	801893e <UART_SetConfig+0x5a6>
 80188bc:	2340      	movs	r3, #64	@ 0x40
 80188be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188c2:	e03c      	b.n	801893e <UART_SetConfig+0x5a6>
 80188c4:	2380      	movs	r3, #128	@ 0x80
 80188c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188ca:	e038      	b.n	801893e <UART_SetConfig+0x5a6>
 80188cc:	697b      	ldr	r3, [r7, #20]
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	4a5b      	ldr	r2, [pc, #364]	@ (8018a40 <UART_SetConfig+0x6a8>)
 80188d2:	4293      	cmp	r3, r2
 80188d4:	d130      	bne.n	8018938 <UART_SetConfig+0x5a0>
 80188d6:	4b57      	ldr	r3, [pc, #348]	@ (8018a34 <UART_SetConfig+0x69c>)
 80188d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80188da:	f003 0307 	and.w	r3, r3, #7
 80188de:	2b05      	cmp	r3, #5
 80188e0:	d826      	bhi.n	8018930 <UART_SetConfig+0x598>
 80188e2:	a201      	add	r2, pc, #4	@ (adr r2, 80188e8 <UART_SetConfig+0x550>)
 80188e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188e8:	08018901 	.word	0x08018901
 80188ec:	08018909 	.word	0x08018909
 80188f0:	08018911 	.word	0x08018911
 80188f4:	08018919 	.word	0x08018919
 80188f8:	08018921 	.word	0x08018921
 80188fc:	08018929 	.word	0x08018929
 8018900:	2302      	movs	r3, #2
 8018902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018906:	e01a      	b.n	801893e <UART_SetConfig+0x5a6>
 8018908:	2304      	movs	r3, #4
 801890a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801890e:	e016      	b.n	801893e <UART_SetConfig+0x5a6>
 8018910:	2308      	movs	r3, #8
 8018912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018916:	e012      	b.n	801893e <UART_SetConfig+0x5a6>
 8018918:	2310      	movs	r3, #16
 801891a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801891e:	e00e      	b.n	801893e <UART_SetConfig+0x5a6>
 8018920:	2320      	movs	r3, #32
 8018922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018926:	e00a      	b.n	801893e <UART_SetConfig+0x5a6>
 8018928:	2340      	movs	r3, #64	@ 0x40
 801892a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801892e:	e006      	b.n	801893e <UART_SetConfig+0x5a6>
 8018930:	2380      	movs	r3, #128	@ 0x80
 8018932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018936:	e002      	b.n	801893e <UART_SetConfig+0x5a6>
 8018938:	2380      	movs	r3, #128	@ 0x80
 801893a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801893e:	697b      	ldr	r3, [r7, #20]
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	4a3f      	ldr	r2, [pc, #252]	@ (8018a40 <UART_SetConfig+0x6a8>)
 8018944:	4293      	cmp	r3, r2
 8018946:	f040 80f8 	bne.w	8018b3a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801894a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801894e:	2b20      	cmp	r3, #32
 8018950:	dc46      	bgt.n	80189e0 <UART_SetConfig+0x648>
 8018952:	2b02      	cmp	r3, #2
 8018954:	f2c0 8082 	blt.w	8018a5c <UART_SetConfig+0x6c4>
 8018958:	3b02      	subs	r3, #2
 801895a:	2b1e      	cmp	r3, #30
 801895c:	d87e      	bhi.n	8018a5c <UART_SetConfig+0x6c4>
 801895e:	a201      	add	r2, pc, #4	@ (adr r2, 8018964 <UART_SetConfig+0x5cc>)
 8018960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018964:	080189e7 	.word	0x080189e7
 8018968:	08018a5d 	.word	0x08018a5d
 801896c:	080189ef 	.word	0x080189ef
 8018970:	08018a5d 	.word	0x08018a5d
 8018974:	08018a5d 	.word	0x08018a5d
 8018978:	08018a5d 	.word	0x08018a5d
 801897c:	080189ff 	.word	0x080189ff
 8018980:	08018a5d 	.word	0x08018a5d
 8018984:	08018a5d 	.word	0x08018a5d
 8018988:	08018a5d 	.word	0x08018a5d
 801898c:	08018a5d 	.word	0x08018a5d
 8018990:	08018a5d 	.word	0x08018a5d
 8018994:	08018a5d 	.word	0x08018a5d
 8018998:	08018a5d 	.word	0x08018a5d
 801899c:	08018a0f 	.word	0x08018a0f
 80189a0:	08018a5d 	.word	0x08018a5d
 80189a4:	08018a5d 	.word	0x08018a5d
 80189a8:	08018a5d 	.word	0x08018a5d
 80189ac:	08018a5d 	.word	0x08018a5d
 80189b0:	08018a5d 	.word	0x08018a5d
 80189b4:	08018a5d 	.word	0x08018a5d
 80189b8:	08018a5d 	.word	0x08018a5d
 80189bc:	08018a5d 	.word	0x08018a5d
 80189c0:	08018a5d 	.word	0x08018a5d
 80189c4:	08018a5d 	.word	0x08018a5d
 80189c8:	08018a5d 	.word	0x08018a5d
 80189cc:	08018a5d 	.word	0x08018a5d
 80189d0:	08018a5d 	.word	0x08018a5d
 80189d4:	08018a5d 	.word	0x08018a5d
 80189d8:	08018a5d 	.word	0x08018a5d
 80189dc:	08018a4f 	.word	0x08018a4f
 80189e0:	2b40      	cmp	r3, #64	@ 0x40
 80189e2:	d037      	beq.n	8018a54 <UART_SetConfig+0x6bc>
 80189e4:	e03a      	b.n	8018a5c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80189e6:	f7fd f8d7 	bl	8015b98 <HAL_RCCEx_GetD3PCLK1Freq>
 80189ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80189ec:	e03c      	b.n	8018a68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80189ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80189f2:	4618      	mov	r0, r3
 80189f4:	f7fd f8e6 	bl	8015bc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80189f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80189fc:	e034      	b.n	8018a68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80189fe:	f107 0318 	add.w	r3, r7, #24
 8018a02:	4618      	mov	r0, r3
 8018a04:	f7fd fa32 	bl	8015e6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018a08:	69fb      	ldr	r3, [r7, #28]
 8018a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018a0c:	e02c      	b.n	8018a68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018a0e:	4b09      	ldr	r3, [pc, #36]	@ (8018a34 <UART_SetConfig+0x69c>)
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	f003 0320 	and.w	r3, r3, #32
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d016      	beq.n	8018a48 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018a1a:	4b06      	ldr	r3, [pc, #24]	@ (8018a34 <UART_SetConfig+0x69c>)
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	08db      	lsrs	r3, r3, #3
 8018a20:	f003 0303 	and.w	r3, r3, #3
 8018a24:	4a07      	ldr	r2, [pc, #28]	@ (8018a44 <UART_SetConfig+0x6ac>)
 8018a26:	fa22 f303 	lsr.w	r3, r2, r3
 8018a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018a2c:	e01c      	b.n	8018a68 <UART_SetConfig+0x6d0>
 8018a2e:	bf00      	nop
 8018a30:	40011400 	.word	0x40011400
 8018a34:	58024400 	.word	0x58024400
 8018a38:	40007800 	.word	0x40007800
 8018a3c:	40007c00 	.word	0x40007c00
 8018a40:	58000c00 	.word	0x58000c00
 8018a44:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8018a48:	4b9d      	ldr	r3, [pc, #628]	@ (8018cc0 <UART_SetConfig+0x928>)
 8018a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018a4c:	e00c      	b.n	8018a68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018a4e:	4b9d      	ldr	r3, [pc, #628]	@ (8018cc4 <UART_SetConfig+0x92c>)
 8018a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018a52:	e009      	b.n	8018a68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018a54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018a5a:	e005      	b.n	8018a68 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8018a5c:	2300      	movs	r3, #0
 8018a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018a60:	2301      	movs	r3, #1
 8018a62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018a66:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8018a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	f000 81de 	beq.w	8018e2c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8018a70:	697b      	ldr	r3, [r7, #20]
 8018a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a74:	4a94      	ldr	r2, [pc, #592]	@ (8018cc8 <UART_SetConfig+0x930>)
 8018a76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018a7a:	461a      	mov	r2, r3
 8018a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8018a82:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018a84:	697b      	ldr	r3, [r7, #20]
 8018a86:	685a      	ldr	r2, [r3, #4]
 8018a88:	4613      	mov	r3, r2
 8018a8a:	005b      	lsls	r3, r3, #1
 8018a8c:	4413      	add	r3, r2
 8018a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018a90:	429a      	cmp	r2, r3
 8018a92:	d305      	bcc.n	8018aa0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8018a94:	697b      	ldr	r3, [r7, #20]
 8018a96:	685b      	ldr	r3, [r3, #4]
 8018a98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018a9c:	429a      	cmp	r2, r3
 8018a9e:	d903      	bls.n	8018aa8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8018aa0:	2301      	movs	r3, #1
 8018aa2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018aa6:	e1c1      	b.n	8018e2c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018aaa:	2200      	movs	r2, #0
 8018aac:	60bb      	str	r3, [r7, #8]
 8018aae:	60fa      	str	r2, [r7, #12]
 8018ab0:	697b      	ldr	r3, [r7, #20]
 8018ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ab4:	4a84      	ldr	r2, [pc, #528]	@ (8018cc8 <UART_SetConfig+0x930>)
 8018ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018aba:	b29b      	uxth	r3, r3
 8018abc:	2200      	movs	r2, #0
 8018abe:	603b      	str	r3, [r7, #0]
 8018ac0:	607a      	str	r2, [r7, #4]
 8018ac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018ac6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018aca:	f7e7 ff3b 	bl	8000944 <__aeabi_uldivmod>
 8018ace:	4602      	mov	r2, r0
 8018ad0:	460b      	mov	r3, r1
 8018ad2:	4610      	mov	r0, r2
 8018ad4:	4619      	mov	r1, r3
 8018ad6:	f04f 0200 	mov.w	r2, #0
 8018ada:	f04f 0300 	mov.w	r3, #0
 8018ade:	020b      	lsls	r3, r1, #8
 8018ae0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018ae4:	0202      	lsls	r2, r0, #8
 8018ae6:	6979      	ldr	r1, [r7, #20]
 8018ae8:	6849      	ldr	r1, [r1, #4]
 8018aea:	0849      	lsrs	r1, r1, #1
 8018aec:	2000      	movs	r0, #0
 8018aee:	460c      	mov	r4, r1
 8018af0:	4605      	mov	r5, r0
 8018af2:	eb12 0804 	adds.w	r8, r2, r4
 8018af6:	eb43 0905 	adc.w	r9, r3, r5
 8018afa:	697b      	ldr	r3, [r7, #20]
 8018afc:	685b      	ldr	r3, [r3, #4]
 8018afe:	2200      	movs	r2, #0
 8018b00:	469a      	mov	sl, r3
 8018b02:	4693      	mov	fp, r2
 8018b04:	4652      	mov	r2, sl
 8018b06:	465b      	mov	r3, fp
 8018b08:	4640      	mov	r0, r8
 8018b0a:	4649      	mov	r1, r9
 8018b0c:	f7e7 ff1a 	bl	8000944 <__aeabi_uldivmod>
 8018b10:	4602      	mov	r2, r0
 8018b12:	460b      	mov	r3, r1
 8018b14:	4613      	mov	r3, r2
 8018b16:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018b1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8018b1e:	d308      	bcc.n	8018b32 <UART_SetConfig+0x79a>
 8018b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018b22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018b26:	d204      	bcs.n	8018b32 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8018b28:	697b      	ldr	r3, [r7, #20]
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018b2e:	60da      	str	r2, [r3, #12]
 8018b30:	e17c      	b.n	8018e2c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8018b32:	2301      	movs	r3, #1
 8018b34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018b38:	e178      	b.n	8018e2c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018b3a:	697b      	ldr	r3, [r7, #20]
 8018b3c:	69db      	ldr	r3, [r3, #28]
 8018b3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018b42:	f040 80c5 	bne.w	8018cd0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8018b46:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018b4a:	2b20      	cmp	r3, #32
 8018b4c:	dc48      	bgt.n	8018be0 <UART_SetConfig+0x848>
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	db7b      	blt.n	8018c4a <UART_SetConfig+0x8b2>
 8018b52:	2b20      	cmp	r3, #32
 8018b54:	d879      	bhi.n	8018c4a <UART_SetConfig+0x8b2>
 8018b56:	a201      	add	r2, pc, #4	@ (adr r2, 8018b5c <UART_SetConfig+0x7c4>)
 8018b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b5c:	08018be7 	.word	0x08018be7
 8018b60:	08018bef 	.word	0x08018bef
 8018b64:	08018c4b 	.word	0x08018c4b
 8018b68:	08018c4b 	.word	0x08018c4b
 8018b6c:	08018bf7 	.word	0x08018bf7
 8018b70:	08018c4b 	.word	0x08018c4b
 8018b74:	08018c4b 	.word	0x08018c4b
 8018b78:	08018c4b 	.word	0x08018c4b
 8018b7c:	08018c07 	.word	0x08018c07
 8018b80:	08018c4b 	.word	0x08018c4b
 8018b84:	08018c4b 	.word	0x08018c4b
 8018b88:	08018c4b 	.word	0x08018c4b
 8018b8c:	08018c4b 	.word	0x08018c4b
 8018b90:	08018c4b 	.word	0x08018c4b
 8018b94:	08018c4b 	.word	0x08018c4b
 8018b98:	08018c4b 	.word	0x08018c4b
 8018b9c:	08018c17 	.word	0x08018c17
 8018ba0:	08018c4b 	.word	0x08018c4b
 8018ba4:	08018c4b 	.word	0x08018c4b
 8018ba8:	08018c4b 	.word	0x08018c4b
 8018bac:	08018c4b 	.word	0x08018c4b
 8018bb0:	08018c4b 	.word	0x08018c4b
 8018bb4:	08018c4b 	.word	0x08018c4b
 8018bb8:	08018c4b 	.word	0x08018c4b
 8018bbc:	08018c4b 	.word	0x08018c4b
 8018bc0:	08018c4b 	.word	0x08018c4b
 8018bc4:	08018c4b 	.word	0x08018c4b
 8018bc8:	08018c4b 	.word	0x08018c4b
 8018bcc:	08018c4b 	.word	0x08018c4b
 8018bd0:	08018c4b 	.word	0x08018c4b
 8018bd4:	08018c4b 	.word	0x08018c4b
 8018bd8:	08018c4b 	.word	0x08018c4b
 8018bdc:	08018c3d 	.word	0x08018c3d
 8018be0:	2b40      	cmp	r3, #64	@ 0x40
 8018be2:	d02e      	beq.n	8018c42 <UART_SetConfig+0x8aa>
 8018be4:	e031      	b.n	8018c4a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018be6:	f7fb f821 	bl	8013c2c <HAL_RCC_GetPCLK1Freq>
 8018bea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018bec:	e033      	b.n	8018c56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018bee:	f7fb f833 	bl	8013c58 <HAL_RCC_GetPCLK2Freq>
 8018bf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018bf4:	e02f      	b.n	8018c56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018bf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	f7fc ffe2 	bl	8015bc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018c04:	e027      	b.n	8018c56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018c06:	f107 0318 	add.w	r3, r7, #24
 8018c0a:	4618      	mov	r0, r3
 8018c0c:	f7fd f92e 	bl	8015e6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018c10:	69fb      	ldr	r3, [r7, #28]
 8018c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018c14:	e01f      	b.n	8018c56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018c16:	4b2d      	ldr	r3, [pc, #180]	@ (8018ccc <UART_SetConfig+0x934>)
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	f003 0320 	and.w	r3, r3, #32
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d009      	beq.n	8018c36 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018c22:	4b2a      	ldr	r3, [pc, #168]	@ (8018ccc <UART_SetConfig+0x934>)
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	08db      	lsrs	r3, r3, #3
 8018c28:	f003 0303 	and.w	r3, r3, #3
 8018c2c:	4a24      	ldr	r2, [pc, #144]	@ (8018cc0 <UART_SetConfig+0x928>)
 8018c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8018c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018c34:	e00f      	b.n	8018c56 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8018c36:	4b22      	ldr	r3, [pc, #136]	@ (8018cc0 <UART_SetConfig+0x928>)
 8018c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018c3a:	e00c      	b.n	8018c56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018c3c:	4b21      	ldr	r3, [pc, #132]	@ (8018cc4 <UART_SetConfig+0x92c>)
 8018c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018c40:	e009      	b.n	8018c56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018c48:	e005      	b.n	8018c56 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8018c4a:	2300      	movs	r3, #0
 8018c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018c4e:	2301      	movs	r3, #1
 8018c50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018c54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	f000 80e7 	beq.w	8018e2c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018c5e:	697b      	ldr	r3, [r7, #20]
 8018c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c62:	4a19      	ldr	r2, [pc, #100]	@ (8018cc8 <UART_SetConfig+0x930>)
 8018c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018c68:	461a      	mov	r2, r3
 8018c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8018c70:	005a      	lsls	r2, r3, #1
 8018c72:	697b      	ldr	r3, [r7, #20]
 8018c74:	685b      	ldr	r3, [r3, #4]
 8018c76:	085b      	lsrs	r3, r3, #1
 8018c78:	441a      	add	r2, r3
 8018c7a:	697b      	ldr	r3, [r7, #20]
 8018c7c:	685b      	ldr	r3, [r3, #4]
 8018c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018c82:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c86:	2b0f      	cmp	r3, #15
 8018c88:	d916      	bls.n	8018cb8 <UART_SetConfig+0x920>
 8018c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018c90:	d212      	bcs.n	8018cb8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c94:	b29b      	uxth	r3, r3
 8018c96:	f023 030f 	bic.w	r3, r3, #15
 8018c9a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c9e:	085b      	lsrs	r3, r3, #1
 8018ca0:	b29b      	uxth	r3, r3
 8018ca2:	f003 0307 	and.w	r3, r3, #7
 8018ca6:	b29a      	uxth	r2, r3
 8018ca8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018caa:	4313      	orrs	r3, r2
 8018cac:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8018cae:	697b      	ldr	r3, [r7, #20]
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8018cb4:	60da      	str	r2, [r3, #12]
 8018cb6:	e0b9      	b.n	8018e2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8018cb8:	2301      	movs	r3, #1
 8018cba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018cbe:	e0b5      	b.n	8018e2c <UART_SetConfig+0xa94>
 8018cc0:	03d09000 	.word	0x03d09000
 8018cc4:	003d0900 	.word	0x003d0900
 8018cc8:	0801ea94 	.word	0x0801ea94
 8018ccc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8018cd0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018cd4:	2b20      	cmp	r3, #32
 8018cd6:	dc49      	bgt.n	8018d6c <UART_SetConfig+0x9d4>
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	db7c      	blt.n	8018dd6 <UART_SetConfig+0xa3e>
 8018cdc:	2b20      	cmp	r3, #32
 8018cde:	d87a      	bhi.n	8018dd6 <UART_SetConfig+0xa3e>
 8018ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8018ce8 <UART_SetConfig+0x950>)
 8018ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ce6:	bf00      	nop
 8018ce8:	08018d73 	.word	0x08018d73
 8018cec:	08018d7b 	.word	0x08018d7b
 8018cf0:	08018dd7 	.word	0x08018dd7
 8018cf4:	08018dd7 	.word	0x08018dd7
 8018cf8:	08018d83 	.word	0x08018d83
 8018cfc:	08018dd7 	.word	0x08018dd7
 8018d00:	08018dd7 	.word	0x08018dd7
 8018d04:	08018dd7 	.word	0x08018dd7
 8018d08:	08018d93 	.word	0x08018d93
 8018d0c:	08018dd7 	.word	0x08018dd7
 8018d10:	08018dd7 	.word	0x08018dd7
 8018d14:	08018dd7 	.word	0x08018dd7
 8018d18:	08018dd7 	.word	0x08018dd7
 8018d1c:	08018dd7 	.word	0x08018dd7
 8018d20:	08018dd7 	.word	0x08018dd7
 8018d24:	08018dd7 	.word	0x08018dd7
 8018d28:	08018da3 	.word	0x08018da3
 8018d2c:	08018dd7 	.word	0x08018dd7
 8018d30:	08018dd7 	.word	0x08018dd7
 8018d34:	08018dd7 	.word	0x08018dd7
 8018d38:	08018dd7 	.word	0x08018dd7
 8018d3c:	08018dd7 	.word	0x08018dd7
 8018d40:	08018dd7 	.word	0x08018dd7
 8018d44:	08018dd7 	.word	0x08018dd7
 8018d48:	08018dd7 	.word	0x08018dd7
 8018d4c:	08018dd7 	.word	0x08018dd7
 8018d50:	08018dd7 	.word	0x08018dd7
 8018d54:	08018dd7 	.word	0x08018dd7
 8018d58:	08018dd7 	.word	0x08018dd7
 8018d5c:	08018dd7 	.word	0x08018dd7
 8018d60:	08018dd7 	.word	0x08018dd7
 8018d64:	08018dd7 	.word	0x08018dd7
 8018d68:	08018dc9 	.word	0x08018dc9
 8018d6c:	2b40      	cmp	r3, #64	@ 0x40
 8018d6e:	d02e      	beq.n	8018dce <UART_SetConfig+0xa36>
 8018d70:	e031      	b.n	8018dd6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018d72:	f7fa ff5b 	bl	8013c2c <HAL_RCC_GetPCLK1Freq>
 8018d76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018d78:	e033      	b.n	8018de2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018d7a:	f7fa ff6d 	bl	8013c58 <HAL_RCC_GetPCLK2Freq>
 8018d7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018d80:	e02f      	b.n	8018de2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018d82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018d86:	4618      	mov	r0, r3
 8018d88:	f7fc ff1c 	bl	8015bc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018d90:	e027      	b.n	8018de2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018d92:	f107 0318 	add.w	r3, r7, #24
 8018d96:	4618      	mov	r0, r3
 8018d98:	f7fd f868 	bl	8015e6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018d9c:	69fb      	ldr	r3, [r7, #28]
 8018d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018da0:	e01f      	b.n	8018de2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018da2:	4b2d      	ldr	r3, [pc, #180]	@ (8018e58 <UART_SetConfig+0xac0>)
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	f003 0320 	and.w	r3, r3, #32
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d009      	beq.n	8018dc2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018dae:	4b2a      	ldr	r3, [pc, #168]	@ (8018e58 <UART_SetConfig+0xac0>)
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	08db      	lsrs	r3, r3, #3
 8018db4:	f003 0303 	and.w	r3, r3, #3
 8018db8:	4a28      	ldr	r2, [pc, #160]	@ (8018e5c <UART_SetConfig+0xac4>)
 8018dba:	fa22 f303 	lsr.w	r3, r2, r3
 8018dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018dc0:	e00f      	b.n	8018de2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8018dc2:	4b26      	ldr	r3, [pc, #152]	@ (8018e5c <UART_SetConfig+0xac4>)
 8018dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018dc6:	e00c      	b.n	8018de2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018dc8:	4b25      	ldr	r3, [pc, #148]	@ (8018e60 <UART_SetConfig+0xac8>)
 8018dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018dcc:	e009      	b.n	8018de2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018dce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018dd4:	e005      	b.n	8018de2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8018dd6:	2300      	movs	r3, #0
 8018dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018dda:	2301      	movs	r3, #1
 8018ddc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018de0:	bf00      	nop
    }

    if (pclk != 0U)
 8018de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d021      	beq.n	8018e2c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018de8:	697b      	ldr	r3, [r7, #20]
 8018dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018dec:	4a1d      	ldr	r2, [pc, #116]	@ (8018e64 <UART_SetConfig+0xacc>)
 8018dee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018df2:	461a      	mov	r2, r3
 8018df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018df6:	fbb3 f2f2 	udiv	r2, r3, r2
 8018dfa:	697b      	ldr	r3, [r7, #20]
 8018dfc:	685b      	ldr	r3, [r3, #4]
 8018dfe:	085b      	lsrs	r3, r3, #1
 8018e00:	441a      	add	r2, r3
 8018e02:	697b      	ldr	r3, [r7, #20]
 8018e04:	685b      	ldr	r3, [r3, #4]
 8018e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8018e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e0e:	2b0f      	cmp	r3, #15
 8018e10:	d909      	bls.n	8018e26 <UART_SetConfig+0xa8e>
 8018e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018e18:	d205      	bcs.n	8018e26 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8018e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e1c:	b29a      	uxth	r2, r3
 8018e1e:	697b      	ldr	r3, [r7, #20]
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	60da      	str	r2, [r3, #12]
 8018e24:	e002      	b.n	8018e2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8018e26:	2301      	movs	r3, #1
 8018e28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8018e2c:	697b      	ldr	r3, [r7, #20]
 8018e2e:	2201      	movs	r2, #1
 8018e30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8018e34:	697b      	ldr	r3, [r7, #20]
 8018e36:	2201      	movs	r2, #1
 8018e38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8018e3c:	697b      	ldr	r3, [r7, #20]
 8018e3e:	2200      	movs	r2, #0
 8018e40:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8018e42:	697b      	ldr	r3, [r7, #20]
 8018e44:	2200      	movs	r2, #0
 8018e46:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8018e48:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8018e4c:	4618      	mov	r0, r3
 8018e4e:	3748      	adds	r7, #72	@ 0x48
 8018e50:	46bd      	mov	sp, r7
 8018e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018e56:	bf00      	nop
 8018e58:	58024400 	.word	0x58024400
 8018e5c:	03d09000 	.word	0x03d09000
 8018e60:	003d0900 	.word	0x003d0900
 8018e64:	0801ea94 	.word	0x0801ea94

08018e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018e68:	b480      	push	{r7}
 8018e6a:	b083      	sub	sp, #12
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e74:	f003 0308 	and.w	r3, r3, #8
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d00a      	beq.n	8018e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	685b      	ldr	r3, [r3, #4]
 8018e82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	430a      	orrs	r2, r1
 8018e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e96:	f003 0301 	and.w	r3, r3, #1
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d00a      	beq.n	8018eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	685b      	ldr	r3, [r3, #4]
 8018ea4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	430a      	orrs	r2, r1
 8018eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018eb8:	f003 0302 	and.w	r3, r3, #2
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d00a      	beq.n	8018ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	685b      	ldr	r3, [r3, #4]
 8018ec6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	430a      	orrs	r2, r1
 8018ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018eda:	f003 0304 	and.w	r3, r3, #4
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d00a      	beq.n	8018ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	685b      	ldr	r3, [r3, #4]
 8018ee8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	430a      	orrs	r2, r1
 8018ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018efc:	f003 0310 	and.w	r3, r3, #16
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d00a      	beq.n	8018f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	689b      	ldr	r3, [r3, #8]
 8018f0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	430a      	orrs	r2, r1
 8018f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f1e:	f003 0320 	and.w	r3, r3, #32
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d00a      	beq.n	8018f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	689b      	ldr	r3, [r3, #8]
 8018f2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	430a      	orrs	r2, r1
 8018f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d01a      	beq.n	8018f7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	685b      	ldr	r3, [r3, #4]
 8018f4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	430a      	orrs	r2, r1
 8018f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018f62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018f66:	d10a      	bne.n	8018f7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	685b      	ldr	r3, [r3, #4]
 8018f6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	430a      	orrs	r2, r1
 8018f7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d00a      	beq.n	8018fa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	685b      	ldr	r3, [r3, #4]
 8018f90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	430a      	orrs	r2, r1
 8018f9e:	605a      	str	r2, [r3, #4]
  }
}
 8018fa0:	bf00      	nop
 8018fa2:	370c      	adds	r7, #12
 8018fa4:	46bd      	mov	sp, r7
 8018fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018faa:	4770      	bx	lr

08018fac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018fac:	b580      	push	{r7, lr}
 8018fae:	b098      	sub	sp, #96	@ 0x60
 8018fb0:	af02      	add	r7, sp, #8
 8018fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	2200      	movs	r2, #0
 8018fb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018fbc:	f7f6 ff5a 	bl	800fe74 <HAL_GetTick>
 8018fc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	f003 0308 	and.w	r3, r3, #8
 8018fcc:	2b08      	cmp	r3, #8
 8018fce:	d12f      	bne.n	8019030 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018fd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8018fd4:	9300      	str	r3, [sp, #0]
 8018fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018fd8:	2200      	movs	r2, #0
 8018fda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8018fde:	6878      	ldr	r0, [r7, #4]
 8018fe0:	f000 f88e 	bl	8019100 <UART_WaitOnFlagUntilTimeout>
 8018fe4:	4603      	mov	r3, r0
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d022      	beq.n	8019030 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ff2:	e853 3f00 	ldrex	r3, [r3]
 8018ff6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8018ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018ffa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018ffe:	653b      	str	r3, [r7, #80]	@ 0x50
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	461a      	mov	r2, r3
 8019006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019008:	647b      	str	r3, [r7, #68]	@ 0x44
 801900a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801900c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801900e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019010:	e841 2300 	strex	r3, r2, [r1]
 8019014:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8019016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019018:	2b00      	cmp	r3, #0
 801901a:	d1e6      	bne.n	8018fea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	2220      	movs	r2, #32
 8019020:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	2200      	movs	r2, #0
 8019028:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801902c:	2303      	movs	r3, #3
 801902e:	e063      	b.n	80190f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	f003 0304 	and.w	r3, r3, #4
 801903a:	2b04      	cmp	r3, #4
 801903c:	d149      	bne.n	80190d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801903e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019042:	9300      	str	r3, [sp, #0]
 8019044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019046:	2200      	movs	r2, #0
 8019048:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801904c:	6878      	ldr	r0, [r7, #4]
 801904e:	f000 f857 	bl	8019100 <UART_WaitOnFlagUntilTimeout>
 8019052:	4603      	mov	r3, r0
 8019054:	2b00      	cmp	r3, #0
 8019056:	d03c      	beq.n	80190d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801905e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019060:	e853 3f00 	ldrex	r3, [r3]
 8019064:	623b      	str	r3, [r7, #32]
   return(result);
 8019066:	6a3b      	ldr	r3, [r7, #32]
 8019068:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801906c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	461a      	mov	r2, r3
 8019074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019076:	633b      	str	r3, [r7, #48]	@ 0x30
 8019078:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801907a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801907c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801907e:	e841 2300 	strex	r3, r2, [r1]
 8019082:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019086:	2b00      	cmp	r3, #0
 8019088:	d1e6      	bne.n	8019058 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	3308      	adds	r3, #8
 8019090:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019092:	693b      	ldr	r3, [r7, #16]
 8019094:	e853 3f00 	ldrex	r3, [r3]
 8019098:	60fb      	str	r3, [r7, #12]
   return(result);
 801909a:	68fb      	ldr	r3, [r7, #12]
 801909c:	f023 0301 	bic.w	r3, r3, #1
 80190a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	3308      	adds	r3, #8
 80190a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80190aa:	61fa      	str	r2, [r7, #28]
 80190ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80190ae:	69b9      	ldr	r1, [r7, #24]
 80190b0:	69fa      	ldr	r2, [r7, #28]
 80190b2:	e841 2300 	strex	r3, r2, [r1]
 80190b6:	617b      	str	r3, [r7, #20]
   return(result);
 80190b8:	697b      	ldr	r3, [r7, #20]
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d1e5      	bne.n	801908a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	2220      	movs	r2, #32
 80190c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	2200      	movs	r2, #0
 80190ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80190ce:	2303      	movs	r3, #3
 80190d0:	e012      	b.n	80190f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	2220      	movs	r2, #32
 80190d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	2220      	movs	r2, #32
 80190de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	2200      	movs	r2, #0
 80190e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	2200      	movs	r2, #0
 80190ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	2200      	movs	r2, #0
 80190f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80190f6:	2300      	movs	r3, #0
}
 80190f8:	4618      	mov	r0, r3
 80190fa:	3758      	adds	r7, #88	@ 0x58
 80190fc:	46bd      	mov	sp, r7
 80190fe:	bd80      	pop	{r7, pc}

08019100 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8019100:	b580      	push	{r7, lr}
 8019102:	b084      	sub	sp, #16
 8019104:	af00      	add	r7, sp, #0
 8019106:	60f8      	str	r0, [r7, #12]
 8019108:	60b9      	str	r1, [r7, #8]
 801910a:	603b      	str	r3, [r7, #0]
 801910c:	4613      	mov	r3, r2
 801910e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019110:	e04f      	b.n	80191b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019112:	69bb      	ldr	r3, [r7, #24]
 8019114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019118:	d04b      	beq.n	80191b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801911a:	f7f6 feab 	bl	800fe74 <HAL_GetTick>
 801911e:	4602      	mov	r2, r0
 8019120:	683b      	ldr	r3, [r7, #0]
 8019122:	1ad3      	subs	r3, r2, r3
 8019124:	69ba      	ldr	r2, [r7, #24]
 8019126:	429a      	cmp	r2, r3
 8019128:	d302      	bcc.n	8019130 <UART_WaitOnFlagUntilTimeout+0x30>
 801912a:	69bb      	ldr	r3, [r7, #24]
 801912c:	2b00      	cmp	r3, #0
 801912e:	d101      	bne.n	8019134 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8019130:	2303      	movs	r3, #3
 8019132:	e04e      	b.n	80191d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8019134:	68fb      	ldr	r3, [r7, #12]
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	f003 0304 	and.w	r3, r3, #4
 801913e:	2b00      	cmp	r3, #0
 8019140:	d037      	beq.n	80191b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8019142:	68bb      	ldr	r3, [r7, #8]
 8019144:	2b80      	cmp	r3, #128	@ 0x80
 8019146:	d034      	beq.n	80191b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8019148:	68bb      	ldr	r3, [r7, #8]
 801914a:	2b40      	cmp	r3, #64	@ 0x40
 801914c:	d031      	beq.n	80191b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801914e:	68fb      	ldr	r3, [r7, #12]
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	69db      	ldr	r3, [r3, #28]
 8019154:	f003 0308 	and.w	r3, r3, #8
 8019158:	2b08      	cmp	r3, #8
 801915a:	d110      	bne.n	801917e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801915c:	68fb      	ldr	r3, [r7, #12]
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	2208      	movs	r2, #8
 8019162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019164:	68f8      	ldr	r0, [r7, #12]
 8019166:	f000 f839 	bl	80191dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	2208      	movs	r2, #8
 801916e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	2200      	movs	r2, #0
 8019176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801917a:	2301      	movs	r3, #1
 801917c:	e029      	b.n	80191d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	69db      	ldr	r3, [r3, #28]
 8019184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801918c:	d111      	bne.n	80191b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019198:	68f8      	ldr	r0, [r7, #12]
 801919a:	f000 f81f 	bl	80191dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	2220      	movs	r2, #32
 80191a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	2200      	movs	r2, #0
 80191aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80191ae:	2303      	movs	r3, #3
 80191b0:	e00f      	b.n	80191d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80191b2:	68fb      	ldr	r3, [r7, #12]
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	69da      	ldr	r2, [r3, #28]
 80191b8:	68bb      	ldr	r3, [r7, #8]
 80191ba:	4013      	ands	r3, r2
 80191bc:	68ba      	ldr	r2, [r7, #8]
 80191be:	429a      	cmp	r2, r3
 80191c0:	bf0c      	ite	eq
 80191c2:	2301      	moveq	r3, #1
 80191c4:	2300      	movne	r3, #0
 80191c6:	b2db      	uxtb	r3, r3
 80191c8:	461a      	mov	r2, r3
 80191ca:	79fb      	ldrb	r3, [r7, #7]
 80191cc:	429a      	cmp	r2, r3
 80191ce:	d0a0      	beq.n	8019112 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80191d0:	2300      	movs	r3, #0
}
 80191d2:	4618      	mov	r0, r3
 80191d4:	3710      	adds	r7, #16
 80191d6:	46bd      	mov	sp, r7
 80191d8:	bd80      	pop	{r7, pc}
	...

080191dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80191dc:	b480      	push	{r7}
 80191de:	b095      	sub	sp, #84	@ 0x54
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80191ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80191ec:	e853 3f00 	ldrex	r3, [r3]
 80191f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80191f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80191f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	681b      	ldr	r3, [r3, #0]
 80191fe:	461a      	mov	r2, r3
 8019200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019202:	643b      	str	r3, [r7, #64]	@ 0x40
 8019204:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019206:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019208:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801920a:	e841 2300 	strex	r3, r2, [r1]
 801920e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019212:	2b00      	cmp	r3, #0
 8019214:	d1e6      	bne.n	80191e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	3308      	adds	r3, #8
 801921c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801921e:	6a3b      	ldr	r3, [r7, #32]
 8019220:	e853 3f00 	ldrex	r3, [r3]
 8019224:	61fb      	str	r3, [r7, #28]
   return(result);
 8019226:	69fa      	ldr	r2, [r7, #28]
 8019228:	4b1e      	ldr	r3, [pc, #120]	@ (80192a4 <UART_EndRxTransfer+0xc8>)
 801922a:	4013      	ands	r3, r2
 801922c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	3308      	adds	r3, #8
 8019234:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019236:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019238:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801923a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801923c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801923e:	e841 2300 	strex	r3, r2, [r1]
 8019242:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019246:	2b00      	cmp	r3, #0
 8019248:	d1e5      	bne.n	8019216 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801924e:	2b01      	cmp	r3, #1
 8019250:	d118      	bne.n	8019284 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	681b      	ldr	r3, [r3, #0]
 8019256:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	e853 3f00 	ldrex	r3, [r3]
 801925e:	60bb      	str	r3, [r7, #8]
   return(result);
 8019260:	68bb      	ldr	r3, [r7, #8]
 8019262:	f023 0310 	bic.w	r3, r3, #16
 8019266:	647b      	str	r3, [r7, #68]	@ 0x44
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	461a      	mov	r2, r3
 801926e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019270:	61bb      	str	r3, [r7, #24]
 8019272:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019274:	6979      	ldr	r1, [r7, #20]
 8019276:	69ba      	ldr	r2, [r7, #24]
 8019278:	e841 2300 	strex	r3, r2, [r1]
 801927c:	613b      	str	r3, [r7, #16]
   return(result);
 801927e:	693b      	ldr	r3, [r7, #16]
 8019280:	2b00      	cmp	r3, #0
 8019282:	d1e6      	bne.n	8019252 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	2220      	movs	r2, #32
 8019288:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	2200      	movs	r2, #0
 8019290:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	2200      	movs	r2, #0
 8019296:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8019298:	bf00      	nop
 801929a:	3754      	adds	r7, #84	@ 0x54
 801929c:	46bd      	mov	sp, r7
 801929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192a2:	4770      	bx	lr
 80192a4:	effffffe 	.word	0xeffffffe

080192a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80192a8:	b480      	push	{r7}
 80192aa:	b085      	sub	sp, #20
 80192ac:	af00      	add	r7, sp, #0
 80192ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80192b6:	2b01      	cmp	r3, #1
 80192b8:	d101      	bne.n	80192be <HAL_UARTEx_DisableFifoMode+0x16>
 80192ba:	2302      	movs	r3, #2
 80192bc:	e027      	b.n	801930e <HAL_UARTEx_DisableFifoMode+0x66>
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	2201      	movs	r2, #1
 80192c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	2224      	movs	r2, #36	@ 0x24
 80192ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	681a      	ldr	r2, [r3, #0]
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	f022 0201 	bic.w	r2, r2, #1
 80192e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80192e6:	68fb      	ldr	r3, [r7, #12]
 80192e8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80192ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	2200      	movs	r2, #0
 80192f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	68fa      	ldr	r2, [r7, #12]
 80192fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	2220      	movs	r2, #32
 8019300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	2200      	movs	r2, #0
 8019308:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801930c:	2300      	movs	r3, #0
}
 801930e:	4618      	mov	r0, r3
 8019310:	3714      	adds	r7, #20
 8019312:	46bd      	mov	sp, r7
 8019314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019318:	4770      	bx	lr

0801931a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801931a:	b580      	push	{r7, lr}
 801931c:	b084      	sub	sp, #16
 801931e:	af00      	add	r7, sp, #0
 8019320:	6078      	str	r0, [r7, #4]
 8019322:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801932a:	2b01      	cmp	r3, #1
 801932c:	d101      	bne.n	8019332 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801932e:	2302      	movs	r3, #2
 8019330:	e02d      	b.n	801938e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	2201      	movs	r2, #1
 8019336:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	2224      	movs	r2, #36	@ 0x24
 801933e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	681a      	ldr	r2, [r3, #0]
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	f022 0201 	bic.w	r2, r2, #1
 8019358:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	689b      	ldr	r3, [r3, #8]
 8019360:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	683a      	ldr	r2, [r7, #0]
 801936a:	430a      	orrs	r2, r1
 801936c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801936e:	6878      	ldr	r0, [r7, #4]
 8019370:	f000 f850 	bl	8019414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	68fa      	ldr	r2, [r7, #12]
 801937a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	2220      	movs	r2, #32
 8019380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	2200      	movs	r2, #0
 8019388:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801938c:	2300      	movs	r3, #0
}
 801938e:	4618      	mov	r0, r3
 8019390:	3710      	adds	r7, #16
 8019392:	46bd      	mov	sp, r7
 8019394:	bd80      	pop	{r7, pc}

08019396 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8019396:	b580      	push	{r7, lr}
 8019398:	b084      	sub	sp, #16
 801939a:	af00      	add	r7, sp, #0
 801939c:	6078      	str	r0, [r7, #4]
 801939e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80193a6:	2b01      	cmp	r3, #1
 80193a8:	d101      	bne.n	80193ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80193aa:	2302      	movs	r3, #2
 80193ac:	e02d      	b.n	801940a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	2201      	movs	r2, #1
 80193b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	2224      	movs	r2, #36	@ 0x24
 80193ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	681a      	ldr	r2, [r3, #0]
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	f022 0201 	bic.w	r2, r2, #1
 80193d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	689b      	ldr	r3, [r3, #8]
 80193dc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	683a      	ldr	r2, [r7, #0]
 80193e6:	430a      	orrs	r2, r1
 80193e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80193ea:	6878      	ldr	r0, [r7, #4]
 80193ec:	f000 f812 	bl	8019414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	68fa      	ldr	r2, [r7, #12]
 80193f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	2220      	movs	r2, #32
 80193fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	2200      	movs	r2, #0
 8019404:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8019408:	2300      	movs	r3, #0
}
 801940a:	4618      	mov	r0, r3
 801940c:	3710      	adds	r7, #16
 801940e:	46bd      	mov	sp, r7
 8019410:	bd80      	pop	{r7, pc}
	...

08019414 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8019414:	b480      	push	{r7}
 8019416:	b085      	sub	sp, #20
 8019418:	af00      	add	r7, sp, #0
 801941a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019420:	2b00      	cmp	r3, #0
 8019422:	d108      	bne.n	8019436 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	2201      	movs	r2, #1
 8019428:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	2201      	movs	r2, #1
 8019430:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8019434:	e031      	b.n	801949a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8019436:	2310      	movs	r3, #16
 8019438:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801943a:	2310      	movs	r3, #16
 801943c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	689b      	ldr	r3, [r3, #8]
 8019444:	0e5b      	lsrs	r3, r3, #25
 8019446:	b2db      	uxtb	r3, r3
 8019448:	f003 0307 	and.w	r3, r3, #7
 801944c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	689b      	ldr	r3, [r3, #8]
 8019454:	0f5b      	lsrs	r3, r3, #29
 8019456:	b2db      	uxtb	r3, r3
 8019458:	f003 0307 	and.w	r3, r3, #7
 801945c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801945e:	7bbb      	ldrb	r3, [r7, #14]
 8019460:	7b3a      	ldrb	r2, [r7, #12]
 8019462:	4911      	ldr	r1, [pc, #68]	@ (80194a8 <UARTEx_SetNbDataToProcess+0x94>)
 8019464:	5c8a      	ldrb	r2, [r1, r2]
 8019466:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801946a:	7b3a      	ldrb	r2, [r7, #12]
 801946c:	490f      	ldr	r1, [pc, #60]	@ (80194ac <UARTEx_SetNbDataToProcess+0x98>)
 801946e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8019470:	fb93 f3f2 	sdiv	r3, r3, r2
 8019474:	b29a      	uxth	r2, r3
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801947c:	7bfb      	ldrb	r3, [r7, #15]
 801947e:	7b7a      	ldrb	r2, [r7, #13]
 8019480:	4909      	ldr	r1, [pc, #36]	@ (80194a8 <UARTEx_SetNbDataToProcess+0x94>)
 8019482:	5c8a      	ldrb	r2, [r1, r2]
 8019484:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8019488:	7b7a      	ldrb	r2, [r7, #13]
 801948a:	4908      	ldr	r1, [pc, #32]	@ (80194ac <UARTEx_SetNbDataToProcess+0x98>)
 801948c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801948e:	fb93 f3f2 	sdiv	r3, r3, r2
 8019492:	b29a      	uxth	r2, r3
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801949a:	bf00      	nop
 801949c:	3714      	adds	r7, #20
 801949e:	46bd      	mov	sp, r7
 80194a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194a4:	4770      	bx	lr
 80194a6:	bf00      	nop
 80194a8:	0801eaac 	.word	0x0801eaac
 80194ac:	0801eab4 	.word	0x0801eab4

080194b0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80194b0:	b084      	sub	sp, #16
 80194b2:	b480      	push	{r7}
 80194b4:	b085      	sub	sp, #20
 80194b6:	af00      	add	r7, sp, #0
 80194b8:	6078      	str	r0, [r7, #4]
 80194ba:	f107 001c 	add.w	r0, r7, #28
 80194be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80194c2:	2300      	movs	r3, #0
 80194c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80194c6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80194c8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80194ca:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80194cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 80194ce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80194d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 80194d2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80194d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 80194d6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80194d8:	68fa      	ldr	r2, [r7, #12]
 80194da:	4313      	orrs	r3, r2
 80194dc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	685a      	ldr	r2, [r3, #4]
 80194e2:	4b07      	ldr	r3, [pc, #28]	@ (8019500 <SDMMC_Init+0x50>)
 80194e4:	4013      	ands	r3, r2
 80194e6:	68fa      	ldr	r2, [r7, #12]
 80194e8:	431a      	orrs	r2, r3
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80194ee:	2300      	movs	r3, #0
}
 80194f0:	4618      	mov	r0, r3
 80194f2:	3714      	adds	r7, #20
 80194f4:	46bd      	mov	sp, r7
 80194f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194fa:	b004      	add	sp, #16
 80194fc:	4770      	bx	lr
 80194fe:	bf00      	nop
 8019500:	ffc02c00 	.word	0xffc02c00

08019504 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8019504:	b480      	push	{r7}
 8019506:	b083      	sub	sp, #12
 8019508:	af00      	add	r7, sp, #0
 801950a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8019512:	4618      	mov	r0, r3
 8019514:	370c      	adds	r7, #12
 8019516:	46bd      	mov	sp, r7
 8019518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801951c:	4770      	bx	lr

0801951e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801951e:	b480      	push	{r7}
 8019520:	b083      	sub	sp, #12
 8019522:	af00      	add	r7, sp, #0
 8019524:	6078      	str	r0, [r7, #4]
 8019526:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8019528:	683b      	ldr	r3, [r7, #0]
 801952a:	681a      	ldr	r2, [r3, #0]
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8019532:	2300      	movs	r3, #0
}
 8019534:	4618      	mov	r0, r3
 8019536:	370c      	adds	r7, #12
 8019538:	46bd      	mov	sp, r7
 801953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801953e:	4770      	bx	lr

08019540 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8019540:	b480      	push	{r7}
 8019542:	b083      	sub	sp, #12
 8019544:	af00      	add	r7, sp, #0
 8019546:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	f043 0203 	orr.w	r2, r3, #3
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8019554:	2300      	movs	r3, #0
}
 8019556:	4618      	mov	r0, r3
 8019558:	370c      	adds	r7, #12
 801955a:	46bd      	mov	sp, r7
 801955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019560:	4770      	bx	lr

08019562 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8019562:	b480      	push	{r7}
 8019564:	b083      	sub	sp, #12
 8019566:	af00      	add	r7, sp, #0
 8019568:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	f003 0303 	and.w	r3, r3, #3
}
 8019572:	4618      	mov	r0, r3
 8019574:	370c      	adds	r7, #12
 8019576:	46bd      	mov	sp, r7
 8019578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801957c:	4770      	bx	lr
	...

08019580 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8019580:	b480      	push	{r7}
 8019582:	b085      	sub	sp, #20
 8019584:	af00      	add	r7, sp, #0
 8019586:	6078      	str	r0, [r7, #4]
 8019588:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801958a:	2300      	movs	r3, #0
 801958c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801958e:	683b      	ldr	r3, [r7, #0]
 8019590:	681a      	ldr	r2, [r3, #0]
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8019596:	683b      	ldr	r3, [r7, #0]
 8019598:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801959a:	683b      	ldr	r3, [r7, #0]
 801959c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801959e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80195a0:	683b      	ldr	r3, [r7, #0]
 80195a2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80195a4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80195a6:	683b      	ldr	r3, [r7, #0]
 80195a8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80195aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80195ac:	68fa      	ldr	r2, [r7, #12]
 80195ae:	4313      	orrs	r3, r2
 80195b0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	68da      	ldr	r2, [r3, #12]
 80195b6:	4b06      	ldr	r3, [pc, #24]	@ (80195d0 <SDMMC_SendCommand+0x50>)
 80195b8:	4013      	ands	r3, r2
 80195ba:	68fa      	ldr	r2, [r7, #12]
 80195bc:	431a      	orrs	r2, r3
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80195c2:	2300      	movs	r3, #0
}
 80195c4:	4618      	mov	r0, r3
 80195c6:	3714      	adds	r7, #20
 80195c8:	46bd      	mov	sp, r7
 80195ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ce:	4770      	bx	lr
 80195d0:	fffee0c0 	.word	0xfffee0c0

080195d4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80195d4:	b480      	push	{r7}
 80195d6:	b083      	sub	sp, #12
 80195d8:	af00      	add	r7, sp, #0
 80195da:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	691b      	ldr	r3, [r3, #16]
 80195e0:	b2db      	uxtb	r3, r3
}
 80195e2:	4618      	mov	r0, r3
 80195e4:	370c      	adds	r7, #12
 80195e6:	46bd      	mov	sp, r7
 80195e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ec:	4770      	bx	lr

080195ee <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80195ee:	b480      	push	{r7}
 80195f0:	b085      	sub	sp, #20
 80195f2:	af00      	add	r7, sp, #0
 80195f4:	6078      	str	r0, [r7, #4]
 80195f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	3314      	adds	r3, #20
 80195fc:	461a      	mov	r2, r3
 80195fe:	683b      	ldr	r3, [r7, #0]
 8019600:	4413      	add	r3, r2
 8019602:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8019604:	68fb      	ldr	r3, [r7, #12]
 8019606:	681b      	ldr	r3, [r3, #0]
}
 8019608:	4618      	mov	r0, r3
 801960a:	3714      	adds	r7, #20
 801960c:	46bd      	mov	sp, r7
 801960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019612:	4770      	bx	lr

08019614 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8019614:	b480      	push	{r7}
 8019616:	b085      	sub	sp, #20
 8019618:	af00      	add	r7, sp, #0
 801961a:	6078      	str	r0, [r7, #4]
 801961c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801961e:	2300      	movs	r3, #0
 8019620:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8019622:	683b      	ldr	r3, [r7, #0]
 8019624:	681a      	ldr	r2, [r3, #0]
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801962a:	683b      	ldr	r3, [r7, #0]
 801962c:	685a      	ldr	r2, [r3, #4]
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8019632:	683b      	ldr	r3, [r7, #0]
 8019634:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8019636:	683b      	ldr	r3, [r7, #0]
 8019638:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801963a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 801963c:	683b      	ldr	r3, [r7, #0]
 801963e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8019640:	431a      	orrs	r2, r3
                       Data->DPSM);
 8019642:	683b      	ldr	r3, [r7, #0]
 8019644:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8019646:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8019648:	68fa      	ldr	r2, [r7, #12]
 801964a:	4313      	orrs	r3, r2
 801964c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019652:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8019656:	68fb      	ldr	r3, [r7, #12]
 8019658:	431a      	orrs	r2, r3
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 801965e:	2300      	movs	r3, #0

}
 8019660:	4618      	mov	r0, r3
 8019662:	3714      	adds	r7, #20
 8019664:	46bd      	mov	sp, r7
 8019666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801966a:	4770      	bx	lr

0801966c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801966c:	b580      	push	{r7, lr}
 801966e:	b088      	sub	sp, #32
 8019670:	af00      	add	r7, sp, #0
 8019672:	6078      	str	r0, [r7, #4]
 8019674:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8019676:	683b      	ldr	r3, [r7, #0]
 8019678:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801967a:	2310      	movs	r3, #16
 801967c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801967e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019682:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019684:	2300      	movs	r3, #0
 8019686:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019688:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801968c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801968e:	f107 0308 	add.w	r3, r7, #8
 8019692:	4619      	mov	r1, r3
 8019694:	6878      	ldr	r0, [r7, #4]
 8019696:	f7ff ff73 	bl	8019580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801969a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801969e:	2110      	movs	r1, #16
 80196a0:	6878      	ldr	r0, [r7, #4]
 80196a2:	f000 fa5f 	bl	8019b64 <SDMMC_GetCmdResp1>
 80196a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80196a8:	69fb      	ldr	r3, [r7, #28]
}
 80196aa:	4618      	mov	r0, r3
 80196ac:	3720      	adds	r7, #32
 80196ae:	46bd      	mov	sp, r7
 80196b0:	bd80      	pop	{r7, pc}

080196b2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80196b2:	b580      	push	{r7, lr}
 80196b4:	b088      	sub	sp, #32
 80196b6:	af00      	add	r7, sp, #0
 80196b8:	6078      	str	r0, [r7, #4]
 80196ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80196bc:	683b      	ldr	r3, [r7, #0]
 80196be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80196c0:	2311      	movs	r3, #17
 80196c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80196c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80196c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80196ca:	2300      	movs	r3, #0
 80196cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80196ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80196d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80196d4:	f107 0308 	add.w	r3, r7, #8
 80196d8:	4619      	mov	r1, r3
 80196da:	6878      	ldr	r0, [r7, #4]
 80196dc:	f7ff ff50 	bl	8019580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80196e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80196e4:	2111      	movs	r1, #17
 80196e6:	6878      	ldr	r0, [r7, #4]
 80196e8:	f000 fa3c 	bl	8019b64 <SDMMC_GetCmdResp1>
 80196ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80196ee:	69fb      	ldr	r3, [r7, #28]
}
 80196f0:	4618      	mov	r0, r3
 80196f2:	3720      	adds	r7, #32
 80196f4:	46bd      	mov	sp, r7
 80196f6:	bd80      	pop	{r7, pc}

080196f8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80196f8:	b580      	push	{r7, lr}
 80196fa:	b088      	sub	sp, #32
 80196fc:	af00      	add	r7, sp, #0
 80196fe:	6078      	str	r0, [r7, #4]
 8019700:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8019702:	683b      	ldr	r3, [r7, #0]
 8019704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8019706:	2312      	movs	r3, #18
 8019708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801970a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801970e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019710:	2300      	movs	r3, #0
 8019712:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019714:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019718:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801971a:	f107 0308 	add.w	r3, r7, #8
 801971e:	4619      	mov	r1, r3
 8019720:	6878      	ldr	r0, [r7, #4]
 8019722:	f7ff ff2d 	bl	8019580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8019726:	f241 3288 	movw	r2, #5000	@ 0x1388
 801972a:	2112      	movs	r1, #18
 801972c:	6878      	ldr	r0, [r7, #4]
 801972e:	f000 fa19 	bl	8019b64 <SDMMC_GetCmdResp1>
 8019732:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019734:	69fb      	ldr	r3, [r7, #28]
}
 8019736:	4618      	mov	r0, r3
 8019738:	3720      	adds	r7, #32
 801973a:	46bd      	mov	sp, r7
 801973c:	bd80      	pop	{r7, pc}

0801973e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801973e:	b580      	push	{r7, lr}
 8019740:	b088      	sub	sp, #32
 8019742:	af00      	add	r7, sp, #0
 8019744:	6078      	str	r0, [r7, #4]
 8019746:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8019748:	683b      	ldr	r3, [r7, #0]
 801974a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801974c:	2318      	movs	r3, #24
 801974e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019750:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019754:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019756:	2300      	movs	r3, #0
 8019758:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801975a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801975e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019760:	f107 0308 	add.w	r3, r7, #8
 8019764:	4619      	mov	r1, r3
 8019766:	6878      	ldr	r0, [r7, #4]
 8019768:	f7ff ff0a 	bl	8019580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801976c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019770:	2118      	movs	r1, #24
 8019772:	6878      	ldr	r0, [r7, #4]
 8019774:	f000 f9f6 	bl	8019b64 <SDMMC_GetCmdResp1>
 8019778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801977a:	69fb      	ldr	r3, [r7, #28]
}
 801977c:	4618      	mov	r0, r3
 801977e:	3720      	adds	r7, #32
 8019780:	46bd      	mov	sp, r7
 8019782:	bd80      	pop	{r7, pc}

08019784 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8019784:	b580      	push	{r7, lr}
 8019786:	b088      	sub	sp, #32
 8019788:	af00      	add	r7, sp, #0
 801978a:	6078      	str	r0, [r7, #4]
 801978c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801978e:	683b      	ldr	r3, [r7, #0]
 8019790:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8019792:	2319      	movs	r3, #25
 8019794:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019796:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801979a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801979c:	2300      	movs	r3, #0
 801979e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80197a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80197a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80197a6:	f107 0308 	add.w	r3, r7, #8
 80197aa:	4619      	mov	r1, r3
 80197ac:	6878      	ldr	r0, [r7, #4]
 80197ae:	f7ff fee7 	bl	8019580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80197b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80197b6:	2119      	movs	r1, #25
 80197b8:	6878      	ldr	r0, [r7, #4]
 80197ba:	f000 f9d3 	bl	8019b64 <SDMMC_GetCmdResp1>
 80197be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80197c0:	69fb      	ldr	r3, [r7, #28]
}
 80197c2:	4618      	mov	r0, r3
 80197c4:	3720      	adds	r7, #32
 80197c6:	46bd      	mov	sp, r7
 80197c8:	bd80      	pop	{r7, pc}
	...

080197cc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80197cc:	b580      	push	{r7, lr}
 80197ce:	b088      	sub	sp, #32
 80197d0:	af00      	add	r7, sp, #0
 80197d2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80197d4:	2300      	movs	r3, #0
 80197d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80197d8:	230c      	movs	r3, #12
 80197da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80197dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80197e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80197e2:	2300      	movs	r3, #0
 80197e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80197e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80197ea:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	68db      	ldr	r3, [r3, #12]
 80197f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	68db      	ldr	r3, [r3, #12]
 80197fc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019804:	f107 0308 	add.w	r3, r7, #8
 8019808:	4619      	mov	r1, r3
 801980a:	6878      	ldr	r0, [r7, #4]
 801980c:	f7ff feb8 	bl	8019580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8019810:	4a0b      	ldr	r2, [pc, #44]	@ (8019840 <SDMMC_CmdStopTransfer+0x74>)
 8019812:	210c      	movs	r1, #12
 8019814:	6878      	ldr	r0, [r7, #4]
 8019816:	f000 f9a5 	bl	8019b64 <SDMMC_GetCmdResp1>
 801981a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	68db      	ldr	r3, [r3, #12]
 8019820:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8019828:	69fb      	ldr	r3, [r7, #28]
 801982a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801982e:	d101      	bne.n	8019834 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8019830:	2300      	movs	r3, #0
 8019832:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8019834:	69fb      	ldr	r3, [r7, #28]
}
 8019836:	4618      	mov	r0, r3
 8019838:	3720      	adds	r7, #32
 801983a:	46bd      	mov	sp, r7
 801983c:	bd80      	pop	{r7, pc}
 801983e:	bf00      	nop
 8019840:	05f5e100 	.word	0x05f5e100

08019844 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8019844:	b580      	push	{r7, lr}
 8019846:	b088      	sub	sp, #32
 8019848:	af00      	add	r7, sp, #0
 801984a:	6078      	str	r0, [r7, #4]
 801984c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801984e:	683b      	ldr	r3, [r7, #0]
 8019850:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8019852:	2307      	movs	r3, #7
 8019854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019856:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801985a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801985c:	2300      	movs	r3, #0
 801985e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019860:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019864:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019866:	f107 0308 	add.w	r3, r7, #8
 801986a:	4619      	mov	r1, r3
 801986c:	6878      	ldr	r0, [r7, #4]
 801986e:	f7ff fe87 	bl	8019580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8019872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019876:	2107      	movs	r1, #7
 8019878:	6878      	ldr	r0, [r7, #4]
 801987a:	f000 f973 	bl	8019b64 <SDMMC_GetCmdResp1>
 801987e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019880:	69fb      	ldr	r3, [r7, #28]
}
 8019882:	4618      	mov	r0, r3
 8019884:	3720      	adds	r7, #32
 8019886:	46bd      	mov	sp, r7
 8019888:	bd80      	pop	{r7, pc}

0801988a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801988a:	b580      	push	{r7, lr}
 801988c:	b088      	sub	sp, #32
 801988e:	af00      	add	r7, sp, #0
 8019890:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8019892:	2300      	movs	r3, #0
 8019894:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8019896:	2300      	movs	r3, #0
 8019898:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801989a:	2300      	movs	r3, #0
 801989c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801989e:	2300      	movs	r3, #0
 80198a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80198a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80198a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80198a8:	f107 0308 	add.w	r3, r7, #8
 80198ac:	4619      	mov	r1, r3
 80198ae:	6878      	ldr	r0, [r7, #4]
 80198b0:	f7ff fe66 	bl	8019580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80198b4:	6878      	ldr	r0, [r7, #4]
 80198b6:	f000 fb97 	bl	8019fe8 <SDMMC_GetCmdError>
 80198ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80198bc:	69fb      	ldr	r3, [r7, #28]
}
 80198be:	4618      	mov	r0, r3
 80198c0:	3720      	adds	r7, #32
 80198c2:	46bd      	mov	sp, r7
 80198c4:	bd80      	pop	{r7, pc}

080198c6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80198c6:	b580      	push	{r7, lr}
 80198c8:	b088      	sub	sp, #32
 80198ca:	af00      	add	r7, sp, #0
 80198cc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80198ce:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80198d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80198d4:	2308      	movs	r3, #8
 80198d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80198d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80198dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80198de:	2300      	movs	r3, #0
 80198e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80198e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80198e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80198e8:	f107 0308 	add.w	r3, r7, #8
 80198ec:	4619      	mov	r1, r3
 80198ee:	6878      	ldr	r0, [r7, #4]
 80198f0:	f7ff fe46 	bl	8019580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80198f4:	6878      	ldr	r0, [r7, #4]
 80198f6:	f000 fb29 	bl	8019f4c <SDMMC_GetCmdResp7>
 80198fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80198fc:	69fb      	ldr	r3, [r7, #28]
}
 80198fe:	4618      	mov	r0, r3
 8019900:	3720      	adds	r7, #32
 8019902:	46bd      	mov	sp, r7
 8019904:	bd80      	pop	{r7, pc}

08019906 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8019906:	b580      	push	{r7, lr}
 8019908:	b088      	sub	sp, #32
 801990a:	af00      	add	r7, sp, #0
 801990c:	6078      	str	r0, [r7, #4]
 801990e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8019910:	683b      	ldr	r3, [r7, #0]
 8019912:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8019914:	2337      	movs	r3, #55	@ 0x37
 8019916:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019918:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801991c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801991e:	2300      	movs	r3, #0
 8019920:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019922:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019926:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019928:	f107 0308 	add.w	r3, r7, #8
 801992c:	4619      	mov	r1, r3
 801992e:	6878      	ldr	r0, [r7, #4]
 8019930:	f7ff fe26 	bl	8019580 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8019934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019938:	2137      	movs	r1, #55	@ 0x37
 801993a:	6878      	ldr	r0, [r7, #4]
 801993c:	f000 f912 	bl	8019b64 <SDMMC_GetCmdResp1>
 8019940:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019942:	69fb      	ldr	r3, [r7, #28]
}
 8019944:	4618      	mov	r0, r3
 8019946:	3720      	adds	r7, #32
 8019948:	46bd      	mov	sp, r7
 801994a:	bd80      	pop	{r7, pc}

0801994c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801994c:	b580      	push	{r7, lr}
 801994e:	b088      	sub	sp, #32
 8019950:	af00      	add	r7, sp, #0
 8019952:	6078      	str	r0, [r7, #4]
 8019954:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8019956:	683b      	ldr	r3, [r7, #0]
 8019958:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801995a:	2329      	movs	r3, #41	@ 0x29
 801995c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801995e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019962:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019964:	2300      	movs	r3, #0
 8019966:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801996c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801996e:	f107 0308 	add.w	r3, r7, #8
 8019972:	4619      	mov	r1, r3
 8019974:	6878      	ldr	r0, [r7, #4]
 8019976:	f7ff fe03 	bl	8019580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801997a:	6878      	ldr	r0, [r7, #4]
 801997c:	f000 fa2e 	bl	8019ddc <SDMMC_GetCmdResp3>
 8019980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019982:	69fb      	ldr	r3, [r7, #28]
}
 8019984:	4618      	mov	r0, r3
 8019986:	3720      	adds	r7, #32
 8019988:	46bd      	mov	sp, r7
 801998a:	bd80      	pop	{r7, pc}

0801998c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801998c:	b580      	push	{r7, lr}
 801998e:	b088      	sub	sp, #32
 8019990:	af00      	add	r7, sp, #0
 8019992:	6078      	str	r0, [r7, #4]
 8019994:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8019996:	683b      	ldr	r3, [r7, #0]
 8019998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801999a:	2306      	movs	r3, #6
 801999c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801999e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80199a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80199a4:	2300      	movs	r3, #0
 80199a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80199a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80199ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80199ae:	f107 0308 	add.w	r3, r7, #8
 80199b2:	4619      	mov	r1, r3
 80199b4:	6878      	ldr	r0, [r7, #4]
 80199b6:	f7ff fde3 	bl	8019580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80199ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80199be:	2106      	movs	r1, #6
 80199c0:	6878      	ldr	r0, [r7, #4]
 80199c2:	f000 f8cf 	bl	8019b64 <SDMMC_GetCmdResp1>
 80199c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80199c8:	69fb      	ldr	r3, [r7, #28]
}
 80199ca:	4618      	mov	r0, r3
 80199cc:	3720      	adds	r7, #32
 80199ce:	46bd      	mov	sp, r7
 80199d0:	bd80      	pop	{r7, pc}

080199d2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80199d2:	b580      	push	{r7, lr}
 80199d4:	b088      	sub	sp, #32
 80199d6:	af00      	add	r7, sp, #0
 80199d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80199da:	2300      	movs	r3, #0
 80199dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80199de:	2333      	movs	r3, #51	@ 0x33
 80199e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80199e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80199e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80199e8:	2300      	movs	r3, #0
 80199ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80199ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80199f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80199f2:	f107 0308 	add.w	r3, r7, #8
 80199f6:	4619      	mov	r1, r3
 80199f8:	6878      	ldr	r0, [r7, #4]
 80199fa:	f7ff fdc1 	bl	8019580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80199fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019a02:	2133      	movs	r1, #51	@ 0x33
 8019a04:	6878      	ldr	r0, [r7, #4]
 8019a06:	f000 f8ad 	bl	8019b64 <SDMMC_GetCmdResp1>
 8019a0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019a0c:	69fb      	ldr	r3, [r7, #28]
}
 8019a0e:	4618      	mov	r0, r3
 8019a10:	3720      	adds	r7, #32
 8019a12:	46bd      	mov	sp, r7
 8019a14:	bd80      	pop	{r7, pc}

08019a16 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8019a16:	b580      	push	{r7, lr}
 8019a18:	b088      	sub	sp, #32
 8019a1a:	af00      	add	r7, sp, #0
 8019a1c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8019a1e:	2300      	movs	r3, #0
 8019a20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8019a22:	2302      	movs	r3, #2
 8019a24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8019a26:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8019a2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019a30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019a34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019a36:	f107 0308 	add.w	r3, r7, #8
 8019a3a:	4619      	mov	r1, r3
 8019a3c:	6878      	ldr	r0, [r7, #4]
 8019a3e:	f7ff fd9f 	bl	8019580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8019a42:	6878      	ldr	r0, [r7, #4]
 8019a44:	f000 f980 	bl	8019d48 <SDMMC_GetCmdResp2>
 8019a48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019a4a:	69fb      	ldr	r3, [r7, #28]
}
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	3720      	adds	r7, #32
 8019a50:	46bd      	mov	sp, r7
 8019a52:	bd80      	pop	{r7, pc}

08019a54 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8019a54:	b580      	push	{r7, lr}
 8019a56:	b088      	sub	sp, #32
 8019a58:	af00      	add	r7, sp, #0
 8019a5a:	6078      	str	r0, [r7, #4]
 8019a5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8019a5e:	683b      	ldr	r3, [r7, #0]
 8019a60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8019a62:	2309      	movs	r3, #9
 8019a64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8019a66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8019a6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019a6c:	2300      	movs	r3, #0
 8019a6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019a70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019a74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019a76:	f107 0308 	add.w	r3, r7, #8
 8019a7a:	4619      	mov	r1, r3
 8019a7c:	6878      	ldr	r0, [r7, #4]
 8019a7e:	f7ff fd7f 	bl	8019580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8019a82:	6878      	ldr	r0, [r7, #4]
 8019a84:	f000 f960 	bl	8019d48 <SDMMC_GetCmdResp2>
 8019a88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019a8a:	69fb      	ldr	r3, [r7, #28]
}
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	3720      	adds	r7, #32
 8019a90:	46bd      	mov	sp, r7
 8019a92:	bd80      	pop	{r7, pc}

08019a94 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8019a94:	b580      	push	{r7, lr}
 8019a96:	b088      	sub	sp, #32
 8019a98:	af00      	add	r7, sp, #0
 8019a9a:	6078      	str	r0, [r7, #4]
 8019a9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8019a9e:	2300      	movs	r3, #0
 8019aa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8019aa2:	2303      	movs	r3, #3
 8019aa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019aa6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019aaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019aac:	2300      	movs	r3, #0
 8019aae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019ab0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019ab4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019ab6:	f107 0308 	add.w	r3, r7, #8
 8019aba:	4619      	mov	r1, r3
 8019abc:	6878      	ldr	r0, [r7, #4]
 8019abe:	f7ff fd5f 	bl	8019580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8019ac2:	683a      	ldr	r2, [r7, #0]
 8019ac4:	2103      	movs	r1, #3
 8019ac6:	6878      	ldr	r0, [r7, #4]
 8019ac8:	f000 f9c8 	bl	8019e5c <SDMMC_GetCmdResp6>
 8019acc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019ace:	69fb      	ldr	r3, [r7, #28]
}
 8019ad0:	4618      	mov	r0, r3
 8019ad2:	3720      	adds	r7, #32
 8019ad4:	46bd      	mov	sp, r7
 8019ad6:	bd80      	pop	{r7, pc}

08019ad8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8019ad8:	b580      	push	{r7, lr}
 8019ada:	b088      	sub	sp, #32
 8019adc:	af00      	add	r7, sp, #0
 8019ade:	6078      	str	r0, [r7, #4]
 8019ae0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8019ae2:	683b      	ldr	r3, [r7, #0]
 8019ae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8019ae6:	230d      	movs	r3, #13
 8019ae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019aea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019aee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019af0:	2300      	movs	r3, #0
 8019af2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019af4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019af8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019afa:	f107 0308 	add.w	r3, r7, #8
 8019afe:	4619      	mov	r1, r3
 8019b00:	6878      	ldr	r0, [r7, #4]
 8019b02:	f7ff fd3d 	bl	8019580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8019b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019b0a:	210d      	movs	r1, #13
 8019b0c:	6878      	ldr	r0, [r7, #4]
 8019b0e:	f000 f829 	bl	8019b64 <SDMMC_GetCmdResp1>
 8019b12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019b14:	69fb      	ldr	r3, [r7, #28]
}
 8019b16:	4618      	mov	r0, r3
 8019b18:	3720      	adds	r7, #32
 8019b1a:	46bd      	mov	sp, r7
 8019b1c:	bd80      	pop	{r7, pc}

08019b1e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8019b1e:	b580      	push	{r7, lr}
 8019b20:	b088      	sub	sp, #32
 8019b22:	af00      	add	r7, sp, #0
 8019b24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8019b26:	2300      	movs	r3, #0
 8019b28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8019b2a:	230d      	movs	r3, #13
 8019b2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019b2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019b32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019b34:	2300      	movs	r3, #0
 8019b36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019b38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019b3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019b3e:	f107 0308 	add.w	r3, r7, #8
 8019b42:	4619      	mov	r1, r3
 8019b44:	6878      	ldr	r0, [r7, #4]
 8019b46:	f7ff fd1b 	bl	8019580 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8019b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019b4e:	210d      	movs	r1, #13
 8019b50:	6878      	ldr	r0, [r7, #4]
 8019b52:	f000 f807 	bl	8019b64 <SDMMC_GetCmdResp1>
 8019b56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019b58:	69fb      	ldr	r3, [r7, #28]
}
 8019b5a:	4618      	mov	r0, r3
 8019b5c:	3720      	adds	r7, #32
 8019b5e:	46bd      	mov	sp, r7
 8019b60:	bd80      	pop	{r7, pc}
	...

08019b64 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8019b64:	b580      	push	{r7, lr}
 8019b66:	b088      	sub	sp, #32
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	60f8      	str	r0, [r7, #12]
 8019b6c:	460b      	mov	r3, r1
 8019b6e:	607a      	str	r2, [r7, #4]
 8019b70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8019b72:	4b70      	ldr	r3, [pc, #448]	@ (8019d34 <SDMMC_GetCmdResp1+0x1d0>)
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	4a70      	ldr	r2, [pc, #448]	@ (8019d38 <SDMMC_GetCmdResp1+0x1d4>)
 8019b78:	fba2 2303 	umull	r2, r3, r2, r3
 8019b7c:	0a5a      	lsrs	r2, r3, #9
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	fb02 f303 	mul.w	r3, r2, r3
 8019b84:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8019b86:	69fb      	ldr	r3, [r7, #28]
 8019b88:	1e5a      	subs	r2, r3, #1
 8019b8a:	61fa      	str	r2, [r7, #28]
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d102      	bne.n	8019b96 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8019b90:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8019b94:	e0c9      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8019b96:	68fb      	ldr	r3, [r7, #12]
 8019b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019b9a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8019b9c:	69ba      	ldr	r2, [r7, #24]
 8019b9e:	4b67      	ldr	r3, [pc, #412]	@ (8019d3c <SDMMC_GetCmdResp1+0x1d8>)
 8019ba0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d0ef      	beq.n	8019b86 <SDMMC_GetCmdResp1+0x22>
 8019ba6:	69bb      	ldr	r3, [r7, #24]
 8019ba8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d1ea      	bne.n	8019b86 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8019bb0:	68fb      	ldr	r3, [r7, #12]
 8019bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019bb4:	f003 0304 	and.w	r3, r3, #4
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d004      	beq.n	8019bc6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8019bbc:	68fb      	ldr	r3, [r7, #12]
 8019bbe:	2204      	movs	r2, #4
 8019bc0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8019bc2:	2304      	movs	r3, #4
 8019bc4:	e0b1      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8019bc6:	68fb      	ldr	r3, [r7, #12]
 8019bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019bca:	f003 0301 	and.w	r3, r3, #1
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d004      	beq.n	8019bdc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	2201      	movs	r2, #1
 8019bd6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8019bd8:	2301      	movs	r3, #1
 8019bda:	e0a6      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8019bdc:	68fb      	ldr	r3, [r7, #12]
 8019bde:	4a58      	ldr	r2, [pc, #352]	@ (8019d40 <SDMMC_GetCmdResp1+0x1dc>)
 8019be0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8019be2:	68f8      	ldr	r0, [r7, #12]
 8019be4:	f7ff fcf6 	bl	80195d4 <SDMMC_GetCommandResponse>
 8019be8:	4603      	mov	r3, r0
 8019bea:	461a      	mov	r2, r3
 8019bec:	7afb      	ldrb	r3, [r7, #11]
 8019bee:	4293      	cmp	r3, r2
 8019bf0:	d001      	beq.n	8019bf6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8019bf2:	2301      	movs	r3, #1
 8019bf4:	e099      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8019bf6:	2100      	movs	r1, #0
 8019bf8:	68f8      	ldr	r0, [r7, #12]
 8019bfa:	f7ff fcf8 	bl	80195ee <SDMMC_GetResponse>
 8019bfe:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8019c00:	697a      	ldr	r2, [r7, #20]
 8019c02:	4b50      	ldr	r3, [pc, #320]	@ (8019d44 <SDMMC_GetCmdResp1+0x1e0>)
 8019c04:	4013      	ands	r3, r2
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d101      	bne.n	8019c0e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8019c0a:	2300      	movs	r3, #0
 8019c0c:	e08d      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8019c0e:	697b      	ldr	r3, [r7, #20]
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	da02      	bge.n	8019c1a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8019c14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8019c18:	e087      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8019c1a:	697b      	ldr	r3, [r7, #20]
 8019c1c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	d001      	beq.n	8019c28 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8019c24:	2340      	movs	r3, #64	@ 0x40
 8019c26:	e080      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8019c28:	697b      	ldr	r3, [r7, #20]
 8019c2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d001      	beq.n	8019c36 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8019c32:	2380      	movs	r3, #128	@ 0x80
 8019c34:	e079      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8019c36:	697b      	ldr	r3, [r7, #20]
 8019c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d002      	beq.n	8019c46 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8019c40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019c44:	e071      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8019c46:	697b      	ldr	r3, [r7, #20]
 8019c48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d002      	beq.n	8019c56 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8019c50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8019c54:	e069      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8019c56:	697b      	ldr	r3, [r7, #20]
 8019c58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d002      	beq.n	8019c66 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8019c60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019c64:	e061      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8019c66:	697b      	ldr	r3, [r7, #20]
 8019c68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d002      	beq.n	8019c76 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8019c70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019c74:	e059      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8019c76:	697b      	ldr	r3, [r7, #20]
 8019c78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d002      	beq.n	8019c86 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8019c80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019c84:	e051      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8019c86:	697b      	ldr	r3, [r7, #20]
 8019c88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d002      	beq.n	8019c96 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8019c90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8019c94:	e049      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8019c96:	697b      	ldr	r3, [r7, #20]
 8019c98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d002      	beq.n	8019ca6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8019ca0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8019ca4:	e041      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8019ca6:	697b      	ldr	r3, [r7, #20]
 8019ca8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d002      	beq.n	8019cb6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8019cb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019cb4:	e039      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8019cb6:	697b      	ldr	r3, [r7, #20]
 8019cb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d002      	beq.n	8019cc6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8019cc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8019cc4:	e031      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8019cc6:	697b      	ldr	r3, [r7, #20]
 8019cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d002      	beq.n	8019cd6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8019cd0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8019cd4:	e029      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8019cd6:	697b      	ldr	r3, [r7, #20]
 8019cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d002      	beq.n	8019ce6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8019ce0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8019ce4:	e021      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8019ce6:	697b      	ldr	r3, [r7, #20]
 8019ce8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d002      	beq.n	8019cf6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8019cf0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8019cf4:	e019      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8019cf6:	697b      	ldr	r3, [r7, #20]
 8019cf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d002      	beq.n	8019d06 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8019d00:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8019d04:	e011      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8019d06:	697b      	ldr	r3, [r7, #20]
 8019d08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d002      	beq.n	8019d16 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8019d10:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8019d14:	e009      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8019d16:	697b      	ldr	r3, [r7, #20]
 8019d18:	f003 0308 	and.w	r3, r3, #8
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	d002      	beq.n	8019d26 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8019d20:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8019d24:	e001      	b.n	8019d2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8019d26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8019d2a:	4618      	mov	r0, r3
 8019d2c:	3720      	adds	r7, #32
 8019d2e:	46bd      	mov	sp, r7
 8019d30:	bd80      	pop	{r7, pc}
 8019d32:	bf00      	nop
 8019d34:	2400001c 	.word	0x2400001c
 8019d38:	10624dd3 	.word	0x10624dd3
 8019d3c:	00200045 	.word	0x00200045
 8019d40:	002000c5 	.word	0x002000c5
 8019d44:	fdffe008 	.word	0xfdffe008

08019d48 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8019d48:	b480      	push	{r7}
 8019d4a:	b085      	sub	sp, #20
 8019d4c:	af00      	add	r7, sp, #0
 8019d4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8019d50:	4b1f      	ldr	r3, [pc, #124]	@ (8019dd0 <SDMMC_GetCmdResp2+0x88>)
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	4a1f      	ldr	r2, [pc, #124]	@ (8019dd4 <SDMMC_GetCmdResp2+0x8c>)
 8019d56:	fba2 2303 	umull	r2, r3, r2, r3
 8019d5a:	0a5b      	lsrs	r3, r3, #9
 8019d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019d60:	fb02 f303 	mul.w	r3, r2, r3
 8019d64:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	1e5a      	subs	r2, r3, #1
 8019d6a:	60fa      	str	r2, [r7, #12]
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	d102      	bne.n	8019d76 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8019d70:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8019d74:	e026      	b.n	8019dc4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019d7a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019d7c:	68bb      	ldr	r3, [r7, #8]
 8019d7e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d0ef      	beq.n	8019d66 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8019d86:	68bb      	ldr	r3, [r7, #8]
 8019d88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d1ea      	bne.n	8019d66 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019d94:	f003 0304 	and.w	r3, r3, #4
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d004      	beq.n	8019da6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	2204      	movs	r2, #4
 8019da0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8019da2:	2304      	movs	r3, #4
 8019da4:	e00e      	b.n	8019dc4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019daa:	f003 0301 	and.w	r3, r3, #1
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d004      	beq.n	8019dbc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	2201      	movs	r2, #1
 8019db6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8019db8:	2301      	movs	r3, #1
 8019dba:	e003      	b.n	8019dc4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	4a06      	ldr	r2, [pc, #24]	@ (8019dd8 <SDMMC_GetCmdResp2+0x90>)
 8019dc0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8019dc2:	2300      	movs	r3, #0
}
 8019dc4:	4618      	mov	r0, r3
 8019dc6:	3714      	adds	r7, #20
 8019dc8:	46bd      	mov	sp, r7
 8019dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dce:	4770      	bx	lr
 8019dd0:	2400001c 	.word	0x2400001c
 8019dd4:	10624dd3 	.word	0x10624dd3
 8019dd8:	002000c5 	.word	0x002000c5

08019ddc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8019ddc:	b480      	push	{r7}
 8019dde:	b085      	sub	sp, #20
 8019de0:	af00      	add	r7, sp, #0
 8019de2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8019de4:	4b1a      	ldr	r3, [pc, #104]	@ (8019e50 <SDMMC_GetCmdResp3+0x74>)
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	4a1a      	ldr	r2, [pc, #104]	@ (8019e54 <SDMMC_GetCmdResp3+0x78>)
 8019dea:	fba2 2303 	umull	r2, r3, r2, r3
 8019dee:	0a5b      	lsrs	r3, r3, #9
 8019df0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019df4:	fb02 f303 	mul.w	r3, r2, r3
 8019df8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	1e5a      	subs	r2, r3, #1
 8019dfe:	60fa      	str	r2, [r7, #12]
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d102      	bne.n	8019e0a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8019e04:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8019e08:	e01b      	b.n	8019e42 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019e0e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019e10:	68bb      	ldr	r3, [r7, #8]
 8019e12:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d0ef      	beq.n	8019dfa <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8019e1a:	68bb      	ldr	r3, [r7, #8]
 8019e1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d1ea      	bne.n	8019dfa <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019e28:	f003 0304 	and.w	r3, r3, #4
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d004      	beq.n	8019e3a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	2204      	movs	r2, #4
 8019e34:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8019e36:	2304      	movs	r3, #4
 8019e38:	e003      	b.n	8019e42 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	4a06      	ldr	r2, [pc, #24]	@ (8019e58 <SDMMC_GetCmdResp3+0x7c>)
 8019e3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8019e40:	2300      	movs	r3, #0
}
 8019e42:	4618      	mov	r0, r3
 8019e44:	3714      	adds	r7, #20
 8019e46:	46bd      	mov	sp, r7
 8019e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e4c:	4770      	bx	lr
 8019e4e:	bf00      	nop
 8019e50:	2400001c 	.word	0x2400001c
 8019e54:	10624dd3 	.word	0x10624dd3
 8019e58:	002000c5 	.word	0x002000c5

08019e5c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8019e5c:	b580      	push	{r7, lr}
 8019e5e:	b088      	sub	sp, #32
 8019e60:	af00      	add	r7, sp, #0
 8019e62:	60f8      	str	r0, [r7, #12]
 8019e64:	460b      	mov	r3, r1
 8019e66:	607a      	str	r2, [r7, #4]
 8019e68:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8019e6a:	4b35      	ldr	r3, [pc, #212]	@ (8019f40 <SDMMC_GetCmdResp6+0xe4>)
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	4a35      	ldr	r2, [pc, #212]	@ (8019f44 <SDMMC_GetCmdResp6+0xe8>)
 8019e70:	fba2 2303 	umull	r2, r3, r2, r3
 8019e74:	0a5b      	lsrs	r3, r3, #9
 8019e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019e7a:	fb02 f303 	mul.w	r3, r2, r3
 8019e7e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8019e80:	69fb      	ldr	r3, [r7, #28]
 8019e82:	1e5a      	subs	r2, r3, #1
 8019e84:	61fa      	str	r2, [r7, #28]
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	d102      	bne.n	8019e90 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8019e8a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8019e8e:	e052      	b.n	8019f36 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8019e90:	68fb      	ldr	r3, [r7, #12]
 8019e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019e94:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019e96:	69bb      	ldr	r3, [r7, #24]
 8019e98:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d0ef      	beq.n	8019e80 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8019ea0:	69bb      	ldr	r3, [r7, #24]
 8019ea2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d1ea      	bne.n	8019e80 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8019eaa:	68fb      	ldr	r3, [r7, #12]
 8019eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019eae:	f003 0304 	and.w	r3, r3, #4
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d004      	beq.n	8019ec0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8019eb6:	68fb      	ldr	r3, [r7, #12]
 8019eb8:	2204      	movs	r2, #4
 8019eba:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8019ebc:	2304      	movs	r3, #4
 8019ebe:	e03a      	b.n	8019f36 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019ec4:	f003 0301 	and.w	r3, r3, #1
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d004      	beq.n	8019ed6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	2201      	movs	r2, #1
 8019ed0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8019ed2:	2301      	movs	r3, #1
 8019ed4:	e02f      	b.n	8019f36 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8019ed6:	68f8      	ldr	r0, [r7, #12]
 8019ed8:	f7ff fb7c 	bl	80195d4 <SDMMC_GetCommandResponse>
 8019edc:	4603      	mov	r3, r0
 8019ede:	461a      	mov	r2, r3
 8019ee0:	7afb      	ldrb	r3, [r7, #11]
 8019ee2:	4293      	cmp	r3, r2
 8019ee4:	d001      	beq.n	8019eea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8019ee6:	2301      	movs	r3, #1
 8019ee8:	e025      	b.n	8019f36 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	4a16      	ldr	r2, [pc, #88]	@ (8019f48 <SDMMC_GetCmdResp6+0xec>)
 8019eee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8019ef0:	2100      	movs	r1, #0
 8019ef2:	68f8      	ldr	r0, [r7, #12]
 8019ef4:	f7ff fb7b 	bl	80195ee <SDMMC_GetResponse>
 8019ef8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8019efa:	697b      	ldr	r3, [r7, #20]
 8019efc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d106      	bne.n	8019f12 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8019f04:	697b      	ldr	r3, [r7, #20]
 8019f06:	0c1b      	lsrs	r3, r3, #16
 8019f08:	b29a      	uxth	r2, r3
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8019f0e:	2300      	movs	r3, #0
 8019f10:	e011      	b.n	8019f36 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8019f12:	697b      	ldr	r3, [r7, #20]
 8019f14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d002      	beq.n	8019f22 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8019f1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8019f20:	e009      	b.n	8019f36 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8019f22:	697b      	ldr	r3, [r7, #20]
 8019f24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d002      	beq.n	8019f32 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8019f2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8019f30:	e001      	b.n	8019f36 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8019f32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8019f36:	4618      	mov	r0, r3
 8019f38:	3720      	adds	r7, #32
 8019f3a:	46bd      	mov	sp, r7
 8019f3c:	bd80      	pop	{r7, pc}
 8019f3e:	bf00      	nop
 8019f40:	2400001c 	.word	0x2400001c
 8019f44:	10624dd3 	.word	0x10624dd3
 8019f48:	002000c5 	.word	0x002000c5

08019f4c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8019f4c:	b480      	push	{r7}
 8019f4e:	b085      	sub	sp, #20
 8019f50:	af00      	add	r7, sp, #0
 8019f52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8019f54:	4b22      	ldr	r3, [pc, #136]	@ (8019fe0 <SDMMC_GetCmdResp7+0x94>)
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	4a22      	ldr	r2, [pc, #136]	@ (8019fe4 <SDMMC_GetCmdResp7+0x98>)
 8019f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8019f5e:	0a5b      	lsrs	r3, r3, #9
 8019f60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8019f64:	fb02 f303 	mul.w	r3, r2, r3
 8019f68:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	1e5a      	subs	r2, r3, #1
 8019f6e:	60fa      	str	r2, [r7, #12]
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	d102      	bne.n	8019f7a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8019f74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8019f78:	e02c      	b.n	8019fd4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019f7e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019f80:	68bb      	ldr	r3, [r7, #8]
 8019f82:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d0ef      	beq.n	8019f6a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8019f8a:	68bb      	ldr	r3, [r7, #8]
 8019f8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d1ea      	bne.n	8019f6a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019f98:	f003 0304 	and.w	r3, r3, #4
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d004      	beq.n	8019faa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	2204      	movs	r2, #4
 8019fa4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8019fa6:	2304      	movs	r3, #4
 8019fa8:	e014      	b.n	8019fd4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019fae:	f003 0301 	and.w	r3, r3, #1
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	d004      	beq.n	8019fc0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	2201      	movs	r2, #1
 8019fba:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8019fbc:	2301      	movs	r3, #1
 8019fbe:	e009      	b.n	8019fd4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d002      	beq.n	8019fd2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	2240      	movs	r2, #64	@ 0x40
 8019fd0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8019fd2:	2300      	movs	r3, #0

}
 8019fd4:	4618      	mov	r0, r3
 8019fd6:	3714      	adds	r7, #20
 8019fd8:	46bd      	mov	sp, r7
 8019fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fde:	4770      	bx	lr
 8019fe0:	2400001c 	.word	0x2400001c
 8019fe4:	10624dd3 	.word	0x10624dd3

08019fe8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8019fe8:	b480      	push	{r7}
 8019fea:	b085      	sub	sp, #20
 8019fec:	af00      	add	r7, sp, #0
 8019fee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8019ff0:	4b11      	ldr	r3, [pc, #68]	@ (801a038 <SDMMC_GetCmdError+0x50>)
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	4a11      	ldr	r2, [pc, #68]	@ (801a03c <SDMMC_GetCmdError+0x54>)
 8019ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8019ffa:	0a5b      	lsrs	r3, r3, #9
 8019ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a000:	fb02 f303 	mul.w	r3, r2, r3
 801a004:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801a006:	68fb      	ldr	r3, [r7, #12]
 801a008:	1e5a      	subs	r2, r3, #1
 801a00a:	60fa      	str	r2, [r7, #12]
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	d102      	bne.n	801a016 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801a010:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801a014:	e009      	b.n	801a02a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a01a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a01e:	2b00      	cmp	r3, #0
 801a020:	d0f1      	beq.n	801a006 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	4a06      	ldr	r2, [pc, #24]	@ (801a040 <SDMMC_GetCmdError+0x58>)
 801a026:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 801a028:	2300      	movs	r3, #0
}
 801a02a:	4618      	mov	r0, r3
 801a02c:	3714      	adds	r7, #20
 801a02e:	46bd      	mov	sp, r7
 801a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a034:	4770      	bx	lr
 801a036:	bf00      	nop
 801a038:	2400001c 	.word	0x2400001c
 801a03c:	10624dd3 	.word	0x10624dd3
 801a040:	002000c5 	.word	0x002000c5

0801a044 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801a044:	b580      	push	{r7, lr}
 801a046:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801a048:	4904      	ldr	r1, [pc, #16]	@ (801a05c <MX_FATFS_Init+0x18>)
 801a04a:	4805      	ldr	r0, [pc, #20]	@ (801a060 <MX_FATFS_Init+0x1c>)
 801a04c:	f002 fc08 	bl	801c860 <FATFS_LinkDriver>
 801a050:	4603      	mov	r3, r0
 801a052:	461a      	mov	r2, r3
 801a054:	4b03      	ldr	r3, [pc, #12]	@ (801a064 <MX_FATFS_Init+0x20>)
 801a056:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801a058:	bf00      	nop
 801a05a:	bd80      	pop	{r7, pc}
 801a05c:	24000464 	.word	0x24000464
 801a060:	0801eabc 	.word	0x0801eabc
 801a064:	24000460 	.word	0x24000460

0801a068 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801a068:	b480      	push	{r7}
 801a06a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801a06c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801a06e:	4618      	mov	r0, r3
 801a070:	46bd      	mov	sp, r7
 801a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a076:	4770      	bx	lr

0801a078 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801a078:	b580      	push	{r7, lr}
 801a07a:	b086      	sub	sp, #24
 801a07c:	af00      	add	r7, sp, #0
 801a07e:	60f8      	str	r0, [r7, #12]
 801a080:	60b9      	str	r1, [r7, #8]
 801a082:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801a084:	2300      	movs	r3, #0
 801a086:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	68ba      	ldr	r2, [r7, #8]
 801a08c:	68f9      	ldr	r1, [r7, #12]
 801a08e:	4806      	ldr	r0, [pc, #24]	@ (801a0a8 <BSP_SD_ReadBlocks_DMA+0x30>)
 801a090:	f7fc fc16 	bl	80168c0 <HAL_SD_ReadBlocks_DMA>
 801a094:	4603      	mov	r3, r0
 801a096:	2b00      	cmp	r3, #0
 801a098:	d001      	beq.n	801a09e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801a09a:	2301      	movs	r3, #1
 801a09c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801a09e:	7dfb      	ldrb	r3, [r7, #23]
}
 801a0a0:	4618      	mov	r0, r3
 801a0a2:	3718      	adds	r7, #24
 801a0a4:	46bd      	mov	sp, r7
 801a0a6:	bd80      	pop	{r7, pc}
 801a0a8:	240002f8 	.word	0x240002f8

0801a0ac <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801a0ac:	b580      	push	{r7, lr}
 801a0ae:	b086      	sub	sp, #24
 801a0b0:	af00      	add	r7, sp, #0
 801a0b2:	60f8      	str	r0, [r7, #12]
 801a0b4:	60b9      	str	r1, [r7, #8]
 801a0b6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801a0b8:	2300      	movs	r3, #0
 801a0ba:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	68ba      	ldr	r2, [r7, #8]
 801a0c0:	68f9      	ldr	r1, [r7, #12]
 801a0c2:	4806      	ldr	r0, [pc, #24]	@ (801a0dc <BSP_SD_WriteBlocks_DMA+0x30>)
 801a0c4:	f7fc fca4 	bl	8016a10 <HAL_SD_WriteBlocks_DMA>
 801a0c8:	4603      	mov	r3, r0
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d001      	beq.n	801a0d2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801a0ce:	2301      	movs	r3, #1
 801a0d0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801a0d2:	7dfb      	ldrb	r3, [r7, #23]
}
 801a0d4:	4618      	mov	r0, r3
 801a0d6:	3718      	adds	r7, #24
 801a0d8:	46bd      	mov	sp, r7
 801a0da:	bd80      	pop	{r7, pc}
 801a0dc:	240002f8 	.word	0x240002f8

0801a0e0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801a0e0:	b580      	push	{r7, lr}
 801a0e2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801a0e4:	4805      	ldr	r0, [pc, #20]	@ (801a0fc <BSP_SD_GetCardState+0x1c>)
 801a0e6:	f7fd fa9d 	bl	8017624 <HAL_SD_GetCardState>
 801a0ea:	4603      	mov	r3, r0
 801a0ec:	2b04      	cmp	r3, #4
 801a0ee:	bf14      	ite	ne
 801a0f0:	2301      	movne	r3, #1
 801a0f2:	2300      	moveq	r3, #0
 801a0f4:	b2db      	uxtb	r3, r3
}
 801a0f6:	4618      	mov	r0, r3
 801a0f8:	bd80      	pop	{r7, pc}
 801a0fa:	bf00      	nop
 801a0fc:	240002f8 	.word	0x240002f8

0801a100 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801a100:	b580      	push	{r7, lr}
 801a102:	b082      	sub	sp, #8
 801a104:	af00      	add	r7, sp, #0
 801a106:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801a108:	6879      	ldr	r1, [r7, #4]
 801a10a:	4803      	ldr	r0, [pc, #12]	@ (801a118 <BSP_SD_GetCardInfo+0x18>)
 801a10c:	f7fd f94c 	bl	80173a8 <HAL_SD_GetCardInfo>
}
 801a110:	bf00      	nop
 801a112:	3708      	adds	r7, #8
 801a114:	46bd      	mov	sp, r7
 801a116:	bd80      	pop	{r7, pc}
 801a118:	240002f8 	.word	0x240002f8

0801a11c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801a11c:	b580      	push	{r7, lr}
 801a11e:	b082      	sub	sp, #8
 801a120:	af00      	add	r7, sp, #0
 801a122:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801a124:	f000 fa14 	bl	801a550 <BSP_SD_WriteCpltCallback>
}
 801a128:	bf00      	nop
 801a12a:	3708      	adds	r7, #8
 801a12c:	46bd      	mov	sp, r7
 801a12e:	bd80      	pop	{r7, pc}

0801a130 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801a130:	b580      	push	{r7, lr}
 801a132:	b082      	sub	sp, #8
 801a134:	af00      	add	r7, sp, #0
 801a136:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801a138:	f000 fa16 	bl	801a568 <BSP_SD_ReadCpltCallback>
}
 801a13c:	bf00      	nop
 801a13e:	3708      	adds	r7, #8
 801a140:	46bd      	mov	sp, r7
 801a142:	bd80      	pop	{r7, pc}

0801a144 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801a144:	b580      	push	{r7, lr}
 801a146:	b084      	sub	sp, #16
 801a148:	af00      	add	r7, sp, #0
 801a14a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801a14c:	f7f5 fe92 	bl	800fe74 <HAL_GetTick>
 801a150:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801a152:	e006      	b.n	801a162 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801a154:	f7ff ffc4 	bl	801a0e0 <BSP_SD_GetCardState>
 801a158:	4603      	mov	r3, r0
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d101      	bne.n	801a162 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801a15e:	2300      	movs	r3, #0
 801a160:	e009      	b.n	801a176 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801a162:	f7f5 fe87 	bl	800fe74 <HAL_GetTick>
 801a166:	4602      	mov	r2, r0
 801a168:	68fb      	ldr	r3, [r7, #12]
 801a16a:	1ad3      	subs	r3, r2, r3
 801a16c:	687a      	ldr	r2, [r7, #4]
 801a16e:	429a      	cmp	r2, r3
 801a170:	d8f0      	bhi.n	801a154 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801a172:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a176:	4618      	mov	r0, r3
 801a178:	3710      	adds	r7, #16
 801a17a:	46bd      	mov	sp, r7
 801a17c:	bd80      	pop	{r7, pc}
	...

0801a180 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801a180:	b580      	push	{r7, lr}
 801a182:	b082      	sub	sp, #8
 801a184:	af00      	add	r7, sp, #0
 801a186:	4603      	mov	r3, r0
 801a188:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801a18a:	4b0b      	ldr	r3, [pc, #44]	@ (801a1b8 <SD_CheckStatus+0x38>)
 801a18c:	2201      	movs	r2, #1
 801a18e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801a190:	f7ff ffa6 	bl	801a0e0 <BSP_SD_GetCardState>
 801a194:	4603      	mov	r3, r0
 801a196:	2b00      	cmp	r3, #0
 801a198:	d107      	bne.n	801a1aa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801a19a:	4b07      	ldr	r3, [pc, #28]	@ (801a1b8 <SD_CheckStatus+0x38>)
 801a19c:	781b      	ldrb	r3, [r3, #0]
 801a19e:	b2db      	uxtb	r3, r3
 801a1a0:	f023 0301 	bic.w	r3, r3, #1
 801a1a4:	b2da      	uxtb	r2, r3
 801a1a6:	4b04      	ldr	r3, [pc, #16]	@ (801a1b8 <SD_CheckStatus+0x38>)
 801a1a8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801a1aa:	4b03      	ldr	r3, [pc, #12]	@ (801a1b8 <SD_CheckStatus+0x38>)
 801a1ac:	781b      	ldrb	r3, [r3, #0]
 801a1ae:	b2db      	uxtb	r3, r3
}
 801a1b0:	4618      	mov	r0, r3
 801a1b2:	3708      	adds	r7, #8
 801a1b4:	46bd      	mov	sp, r7
 801a1b6:	bd80      	pop	{r7, pc}
 801a1b8:	24000029 	.word	0x24000029

0801a1bc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801a1bc:	b580      	push	{r7, lr}
 801a1be:	b082      	sub	sp, #8
 801a1c0:	af00      	add	r7, sp, #0
 801a1c2:	4603      	mov	r3, r0
 801a1c4:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 801a1c6:	79fb      	ldrb	r3, [r7, #7]
 801a1c8:	4618      	mov	r0, r3
 801a1ca:	f7ff ffd9 	bl	801a180 <SD_CheckStatus>
 801a1ce:	4603      	mov	r3, r0
 801a1d0:	461a      	mov	r2, r3
 801a1d2:	4b04      	ldr	r3, [pc, #16]	@ (801a1e4 <SD_initialize+0x28>)
 801a1d4:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 801a1d6:	4b03      	ldr	r3, [pc, #12]	@ (801a1e4 <SD_initialize+0x28>)
 801a1d8:	781b      	ldrb	r3, [r3, #0]
 801a1da:	b2db      	uxtb	r3, r3
}
 801a1dc:	4618      	mov	r0, r3
 801a1de:	3708      	adds	r7, #8
 801a1e0:	46bd      	mov	sp, r7
 801a1e2:	bd80      	pop	{r7, pc}
 801a1e4:	24000029 	.word	0x24000029

0801a1e8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801a1e8:	b580      	push	{r7, lr}
 801a1ea:	b082      	sub	sp, #8
 801a1ec:	af00      	add	r7, sp, #0
 801a1ee:	4603      	mov	r3, r0
 801a1f0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801a1f2:	79fb      	ldrb	r3, [r7, #7]
 801a1f4:	4618      	mov	r0, r3
 801a1f6:	f7ff ffc3 	bl	801a180 <SD_CheckStatus>
 801a1fa:	4603      	mov	r3, r0
}
 801a1fc:	4618      	mov	r0, r3
 801a1fe:	3708      	adds	r7, #8
 801a200:	46bd      	mov	sp, r7
 801a202:	bd80      	pop	{r7, pc}

0801a204 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801a204:	b580      	push	{r7, lr}
 801a206:	b088      	sub	sp, #32
 801a208:	af00      	add	r7, sp, #0
 801a20a:	60b9      	str	r1, [r7, #8]
 801a20c:	607a      	str	r2, [r7, #4]
 801a20e:	603b      	str	r3, [r7, #0]
 801a210:	4603      	mov	r3, r0
 801a212:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801a214:	2301      	movs	r3, #1
 801a216:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801a218:	f247 5030 	movw	r0, #30000	@ 0x7530
 801a21c:	f7ff ff92 	bl	801a144 <SD_CheckStatusWithTimeout>
 801a220:	4603      	mov	r3, r0
 801a222:	2b00      	cmp	r3, #0
 801a224:	da01      	bge.n	801a22a <SD_read+0x26>
  {
    return res;
 801a226:	7ffb      	ldrb	r3, [r7, #31]
 801a228:	e08b      	b.n	801a342 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801a22a:	68bb      	ldr	r3, [r7, #8]
 801a22c:	f003 0303 	and.w	r3, r3, #3
 801a230:	2b00      	cmp	r3, #0
 801a232:	d13b      	bne.n	801a2ac <SD_read+0xa8>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801a234:	683a      	ldr	r2, [r7, #0]
 801a236:	6879      	ldr	r1, [r7, #4]
 801a238:	68b8      	ldr	r0, [r7, #8]
 801a23a:	f7ff ff1d 	bl	801a078 <BSP_SD_ReadBlocks_DMA>
 801a23e:	4603      	mov	r3, r0
 801a240:	2b00      	cmp	r3, #0
 801a242:	d17d      	bne.n	801a340 <SD_read+0x13c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801a244:	4b41      	ldr	r3, [pc, #260]	@ (801a34c <SD_read+0x148>)
 801a246:	2200      	movs	r2, #0
 801a248:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801a24a:	f7f5 fe13 	bl	800fe74 <HAL_GetTick>
 801a24e:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801a250:	bf00      	nop
 801a252:	4b3e      	ldr	r3, [pc, #248]	@ (801a34c <SD_read+0x148>)
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	2b00      	cmp	r3, #0
 801a258:	d108      	bne.n	801a26c <SD_read+0x68>
 801a25a:	f7f5 fe0b 	bl	800fe74 <HAL_GetTick>
 801a25e:	4602      	mov	r2, r0
 801a260:	697b      	ldr	r3, [r7, #20]
 801a262:	1ad3      	subs	r3, r2, r3
 801a264:	f247 522f 	movw	r2, #29999	@ 0x752f
 801a268:	4293      	cmp	r3, r2
 801a26a:	d9f2      	bls.n	801a252 <SD_read+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801a26c:	4b37      	ldr	r3, [pc, #220]	@ (801a34c <SD_read+0x148>)
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	2b00      	cmp	r3, #0
 801a272:	d102      	bne.n	801a27a <SD_read+0x76>
      {
        res = RES_ERROR;
 801a274:	2301      	movs	r3, #1
 801a276:	77fb      	strb	r3, [r7, #31]
 801a278:	e062      	b.n	801a340 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 801a27a:	4b34      	ldr	r3, [pc, #208]	@ (801a34c <SD_read+0x148>)
 801a27c:	2200      	movs	r2, #0
 801a27e:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801a280:	f7f5 fdf8 	bl	800fe74 <HAL_GetTick>
 801a284:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801a286:	e007      	b.n	801a298 <SD_read+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801a288:	f7ff ff2a 	bl	801a0e0 <BSP_SD_GetCardState>
 801a28c:	4603      	mov	r3, r0
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d102      	bne.n	801a298 <SD_read+0x94>
          {
            res = RES_OK;
 801a292:	2300      	movs	r3, #0
 801a294:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801a296:	e053      	b.n	801a340 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801a298:	f7f5 fdec 	bl	800fe74 <HAL_GetTick>
 801a29c:	4602      	mov	r2, r0
 801a29e:	697b      	ldr	r3, [r7, #20]
 801a2a0:	1ad3      	subs	r3, r2, r3
 801a2a2:	f247 522f 	movw	r2, #29999	@ 0x752f
 801a2a6:	4293      	cmp	r3, r2
 801a2a8:	d9ee      	bls.n	801a288 <SD_read+0x84>
 801a2aa:	e049      	b.n	801a340 <SD_read+0x13c>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 801a2ac:	2300      	movs	r3, #0
 801a2ae:	61bb      	str	r3, [r7, #24]
 801a2b0:	e037      	b.n	801a322 <SD_read+0x11e>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	1c5a      	adds	r2, r3, #1
 801a2b6:	607a      	str	r2, [r7, #4]
 801a2b8:	2201      	movs	r2, #1
 801a2ba:	4619      	mov	r1, r3
 801a2bc:	4824      	ldr	r0, [pc, #144]	@ (801a350 <SD_read+0x14c>)
 801a2be:	f7ff fedb 	bl	801a078 <BSP_SD_ReadBlocks_DMA>
 801a2c2:	4603      	mov	r3, r0
 801a2c4:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 801a2c6:	7fbb      	ldrb	r3, [r7, #30]
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	d12f      	bne.n	801a32c <SD_read+0x128>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 801a2cc:	f7f5 fdd2 	bl	800fe74 <HAL_GetTick>
 801a2d0:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801a2d2:	bf00      	nop
 801a2d4:	4b1d      	ldr	r3, [pc, #116]	@ (801a34c <SD_read+0x148>)
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	d108      	bne.n	801a2ee <SD_read+0xea>
 801a2dc:	f7f5 fdca 	bl	800fe74 <HAL_GetTick>
 801a2e0:	4602      	mov	r2, r0
 801a2e2:	697b      	ldr	r3, [r7, #20]
 801a2e4:	1ad3      	subs	r3, r2, r3
 801a2e6:	f247 522f 	movw	r2, #29999	@ 0x752f
 801a2ea:	4293      	cmp	r3, r2
 801a2ec:	d9f2      	bls.n	801a2d4 <SD_read+0xd0>
          {
          }
          if (ReadStatus == 0)
 801a2ee:	4b17      	ldr	r3, [pc, #92]	@ (801a34c <SD_read+0x148>)
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d102      	bne.n	801a2fc <SD_read+0xf8>
          {
            res = RES_ERROR;
 801a2f6:	2301      	movs	r3, #1
 801a2f8:	77fb      	strb	r3, [r7, #31]
            break;
 801a2fa:	e018      	b.n	801a32e <SD_read+0x12a>
          }
          ReadStatus = 0;
 801a2fc:	4b13      	ldr	r3, [pc, #76]	@ (801a34c <SD_read+0x148>)
 801a2fe:	2200      	movs	r2, #0
 801a300:	601a      	str	r2, [r3, #0]
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 801a302:	68bb      	ldr	r3, [r7, #8]
 801a304:	4a12      	ldr	r2, [pc, #72]	@ (801a350 <SD_read+0x14c>)
 801a306:	4618      	mov	r0, r3
 801a308:	4611      	mov	r1, r2
 801a30a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801a30e:	461a      	mov	r2, r3
 801a310:	f003 f98d 	bl	801d62e <memcpy>
          buff += BLOCKSIZE;
 801a314:	68bb      	ldr	r3, [r7, #8]
 801a316:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801a31a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 801a31c:	69bb      	ldr	r3, [r7, #24]
 801a31e:	3301      	adds	r3, #1
 801a320:	61bb      	str	r3, [r7, #24]
 801a322:	69bb      	ldr	r3, [r7, #24]
 801a324:	683a      	ldr	r2, [r7, #0]
 801a326:	429a      	cmp	r2, r3
 801a328:	d8c3      	bhi.n	801a2b2 <SD_read+0xae>
 801a32a:	e000      	b.n	801a32e <SD_read+0x12a>
        }
        else
        {
          break;
 801a32c:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 801a32e:	69bb      	ldr	r3, [r7, #24]
 801a330:	683a      	ldr	r2, [r7, #0]
 801a332:	429a      	cmp	r2, r3
 801a334:	d104      	bne.n	801a340 <SD_read+0x13c>
 801a336:	7fbb      	ldrb	r3, [r7, #30]
 801a338:	2b00      	cmp	r3, #0
 801a33a:	d101      	bne.n	801a340 <SD_read+0x13c>
        res = RES_OK;
 801a33c:	2300      	movs	r3, #0
 801a33e:	77fb      	strb	r3, [r7, #31]
    }
#endif

  return res;
 801a340:	7ffb      	ldrb	r3, [r7, #31]
}
 801a342:	4618      	mov	r0, r3
 801a344:	3720      	adds	r7, #32
 801a346:	46bd      	mov	sp, r7
 801a348:	bd80      	pop	{r7, pc}
 801a34a:	bf00      	nop
 801a34c:	24000acc 	.word	0x24000acc
 801a350:	240008c8 	.word	0x240008c8

0801a354 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801a354:	b580      	push	{r7, lr}
 801a356:	b088      	sub	sp, #32
 801a358:	af00      	add	r7, sp, #0
 801a35a:	60b9      	str	r1, [r7, #8]
 801a35c:	607a      	str	r2, [r7, #4]
 801a35e:	603b      	str	r3, [r7, #0]
 801a360:	4603      	mov	r3, r0
 801a362:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801a364:	2301      	movs	r3, #1
 801a366:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801a368:	4b4b      	ldr	r3, [pc, #300]	@ (801a498 <SD_write+0x144>)
 801a36a:	2200      	movs	r2, #0
 801a36c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801a36e:	f247 5030 	movw	r0, #30000	@ 0x7530
 801a372:	f7ff fee7 	bl	801a144 <SD_CheckStatusWithTimeout>
 801a376:	4603      	mov	r3, r0
 801a378:	2b00      	cmp	r3, #0
 801a37a:	da01      	bge.n	801a380 <SD_write+0x2c>
  {
    return res;
 801a37c:	7ffb      	ldrb	r3, [r7, #31]
 801a37e:	e087      	b.n	801a490 <SD_write+0x13c>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801a380:	68bb      	ldr	r3, [r7, #8]
 801a382:	f003 0303 	and.w	r3, r3, #3
 801a386:	2b00      	cmp	r3, #0
 801a388:	d138      	bne.n	801a3fc <SD_write+0xa8>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801a38a:	683a      	ldr	r2, [r7, #0]
 801a38c:	6879      	ldr	r1, [r7, #4]
 801a38e:	68b8      	ldr	r0, [r7, #8]
 801a390:	f7ff fe8c 	bl	801a0ac <BSP_SD_WriteBlocks_DMA>
 801a394:	4603      	mov	r3, r0
 801a396:	2b00      	cmp	r3, #0
 801a398:	d179      	bne.n	801a48e <SD_write+0x13a>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801a39a:	f7f5 fd6b 	bl	800fe74 <HAL_GetTick>
 801a39e:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801a3a0:	bf00      	nop
 801a3a2:	4b3d      	ldr	r3, [pc, #244]	@ (801a498 <SD_write+0x144>)
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d108      	bne.n	801a3bc <SD_write+0x68>
 801a3aa:	f7f5 fd63 	bl	800fe74 <HAL_GetTick>
 801a3ae:	4602      	mov	r2, r0
 801a3b0:	697b      	ldr	r3, [r7, #20]
 801a3b2:	1ad3      	subs	r3, r2, r3
 801a3b4:	f247 522f 	movw	r2, #29999	@ 0x752f
 801a3b8:	4293      	cmp	r3, r2
 801a3ba:	d9f2      	bls.n	801a3a2 <SD_write+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801a3bc:	4b36      	ldr	r3, [pc, #216]	@ (801a498 <SD_write+0x144>)
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	d102      	bne.n	801a3ca <SD_write+0x76>
      {
        res = RES_ERROR;
 801a3c4:	2301      	movs	r3, #1
 801a3c6:	77fb      	strb	r3, [r7, #31]
 801a3c8:	e061      	b.n	801a48e <SD_write+0x13a>
      }
      else
      {
        WriteStatus = 0;
 801a3ca:	4b33      	ldr	r3, [pc, #204]	@ (801a498 <SD_write+0x144>)
 801a3cc:	2200      	movs	r2, #0
 801a3ce:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801a3d0:	f7f5 fd50 	bl	800fe74 <HAL_GetTick>
 801a3d4:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801a3d6:	e007      	b.n	801a3e8 <SD_write+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801a3d8:	f7ff fe82 	bl	801a0e0 <BSP_SD_GetCardState>
 801a3dc:	4603      	mov	r3, r0
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d102      	bne.n	801a3e8 <SD_write+0x94>
          {
            res = RES_OK;
 801a3e2:	2300      	movs	r3, #0
 801a3e4:	77fb      	strb	r3, [r7, #31]
            break;
 801a3e6:	e052      	b.n	801a48e <SD_write+0x13a>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801a3e8:	f7f5 fd44 	bl	800fe74 <HAL_GetTick>
 801a3ec:	4602      	mov	r2, r0
 801a3ee:	697b      	ldr	r3, [r7, #20]
 801a3f0:	1ad3      	subs	r3, r2, r3
 801a3f2:	f247 522f 	movw	r2, #29999	@ 0x752f
 801a3f6:	4293      	cmp	r3, r2
 801a3f8:	d9ee      	bls.n	801a3d8 <SD_write+0x84>
 801a3fa:	e048      	b.n	801a48e <SD_write+0x13a>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 801a3fc:	2300      	movs	r3, #0
 801a3fe:	61bb      	str	r3, [r7, #24]
 801a400:	e034      	b.n	801a46c <SD_write+0x118>
      {
        WriteStatus = 0;
 801a402:	4b25      	ldr	r3, [pc, #148]	@ (801a498 <SD_write+0x144>)
 801a404:	2200      	movs	r2, #0
 801a406:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 801a408:	4a24      	ldr	r2, [pc, #144]	@ (801a49c <SD_write+0x148>)
 801a40a:	68bb      	ldr	r3, [r7, #8]
 801a40c:	4610      	mov	r0, r2
 801a40e:	4619      	mov	r1, r3
 801a410:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801a414:	461a      	mov	r2, r3
 801a416:	f003 f90a 	bl	801d62e <memcpy>
        buff += BLOCKSIZE;
 801a41a:	68bb      	ldr	r3, [r7, #8]
 801a41c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801a420:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	1c5a      	adds	r2, r3, #1
 801a426:	607a      	str	r2, [r7, #4]
 801a428:	2201      	movs	r2, #1
 801a42a:	4619      	mov	r1, r3
 801a42c:	481b      	ldr	r0, [pc, #108]	@ (801a49c <SD_write+0x148>)
 801a42e:	f7ff fe3d 	bl	801a0ac <BSP_SD_WriteBlocks_DMA>
 801a432:	4603      	mov	r3, r0
 801a434:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 801a436:	7fbb      	ldrb	r3, [r7, #30]
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d11c      	bne.n	801a476 <SD_write+0x122>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 801a43c:	f7f5 fd1a 	bl	800fe74 <HAL_GetTick>
 801a440:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801a442:	bf00      	nop
 801a444:	4b14      	ldr	r3, [pc, #80]	@ (801a498 <SD_write+0x144>)
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d108      	bne.n	801a45e <SD_write+0x10a>
 801a44c:	f7f5 fd12 	bl	800fe74 <HAL_GetTick>
 801a450:	4602      	mov	r2, r0
 801a452:	697b      	ldr	r3, [r7, #20]
 801a454:	1ad3      	subs	r3, r2, r3
 801a456:	f247 522f 	movw	r2, #29999	@ 0x752f
 801a45a:	4293      	cmp	r3, r2
 801a45c:	d9f2      	bls.n	801a444 <SD_write+0xf0>
          {
          }
          if (WriteStatus == 0)
 801a45e:	4b0e      	ldr	r3, [pc, #56]	@ (801a498 <SD_write+0x144>)
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	2b00      	cmp	r3, #0
 801a464:	d009      	beq.n	801a47a <SD_write+0x126>
      for (i = 0; i < count; i++)
 801a466:	69bb      	ldr	r3, [r7, #24]
 801a468:	3301      	adds	r3, #1
 801a46a:	61bb      	str	r3, [r7, #24]
 801a46c:	69bb      	ldr	r3, [r7, #24]
 801a46e:	683a      	ldr	r2, [r7, #0]
 801a470:	429a      	cmp	r2, r3
 801a472:	d8c6      	bhi.n	801a402 <SD_write+0xae>
 801a474:	e002      	b.n	801a47c <SD_write+0x128>
          }

        }
        else
        {
          break;
 801a476:	bf00      	nop
 801a478:	e000      	b.n	801a47c <SD_write+0x128>
            break;
 801a47a:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 801a47c:	69bb      	ldr	r3, [r7, #24]
 801a47e:	683a      	ldr	r2, [r7, #0]
 801a480:	429a      	cmp	r2, r3
 801a482:	d104      	bne.n	801a48e <SD_write+0x13a>
 801a484:	7fbb      	ldrb	r3, [r7, #30]
 801a486:	2b00      	cmp	r3, #0
 801a488:	d101      	bne.n	801a48e <SD_write+0x13a>
        res = RES_OK;
 801a48a:	2300      	movs	r3, #0
 801a48c:	77fb      	strb	r3, [r7, #31]
    }
#endif
  return res;
 801a48e:	7ffb      	ldrb	r3, [r7, #31]
}
 801a490:	4618      	mov	r0, r3
 801a492:	3720      	adds	r7, #32
 801a494:	46bd      	mov	sp, r7
 801a496:	bd80      	pop	{r7, pc}
 801a498:	24000ac8 	.word	0x24000ac8
 801a49c:	240008c8 	.word	0x240008c8

0801a4a0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801a4a0:	b580      	push	{r7, lr}
 801a4a2:	b08c      	sub	sp, #48	@ 0x30
 801a4a4:	af00      	add	r7, sp, #0
 801a4a6:	4603      	mov	r3, r0
 801a4a8:	603a      	str	r2, [r7, #0]
 801a4aa:	71fb      	strb	r3, [r7, #7]
 801a4ac:	460b      	mov	r3, r1
 801a4ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801a4b0:	2301      	movs	r3, #1
 801a4b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801a4b6:	4b25      	ldr	r3, [pc, #148]	@ (801a54c <SD_ioctl+0xac>)
 801a4b8:	781b      	ldrb	r3, [r3, #0]
 801a4ba:	b2db      	uxtb	r3, r3
 801a4bc:	f003 0301 	and.w	r3, r3, #1
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	d001      	beq.n	801a4c8 <SD_ioctl+0x28>
 801a4c4:	2303      	movs	r3, #3
 801a4c6:	e03c      	b.n	801a542 <SD_ioctl+0xa2>

  switch (cmd)
 801a4c8:	79bb      	ldrb	r3, [r7, #6]
 801a4ca:	2b03      	cmp	r3, #3
 801a4cc:	d834      	bhi.n	801a538 <SD_ioctl+0x98>
 801a4ce:	a201      	add	r2, pc, #4	@ (adr r2, 801a4d4 <SD_ioctl+0x34>)
 801a4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a4d4:	0801a4e5 	.word	0x0801a4e5
 801a4d8:	0801a4ed 	.word	0x0801a4ed
 801a4dc:	0801a505 	.word	0x0801a505
 801a4e0:	0801a51f 	.word	0x0801a51f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801a4e4:	2300      	movs	r3, #0
 801a4e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801a4ea:	e028      	b.n	801a53e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801a4ec:	f107 0308 	add.w	r3, r7, #8
 801a4f0:	4618      	mov	r0, r3
 801a4f2:	f7ff fe05 	bl	801a100 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801a4f6:	6a3a      	ldr	r2, [r7, #32]
 801a4f8:	683b      	ldr	r3, [r7, #0]
 801a4fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801a4fc:	2300      	movs	r3, #0
 801a4fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801a502:	e01c      	b.n	801a53e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801a504:	f107 0308 	add.w	r3, r7, #8
 801a508:	4618      	mov	r0, r3
 801a50a:	f7ff fdf9 	bl	801a100 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801a50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a510:	b29a      	uxth	r2, r3
 801a512:	683b      	ldr	r3, [r7, #0]
 801a514:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801a516:	2300      	movs	r3, #0
 801a518:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801a51c:	e00f      	b.n	801a53e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801a51e:	f107 0308 	add.w	r3, r7, #8
 801a522:	4618      	mov	r0, r3
 801a524:	f7ff fdec 	bl	801a100 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801a528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a52a:	0a5a      	lsrs	r2, r3, #9
 801a52c:	683b      	ldr	r3, [r7, #0]
 801a52e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801a530:	2300      	movs	r3, #0
 801a532:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801a536:	e002      	b.n	801a53e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801a538:	2304      	movs	r3, #4
 801a53a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 801a53e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801a542:	4618      	mov	r0, r3
 801a544:	3730      	adds	r7, #48	@ 0x30
 801a546:	46bd      	mov	sp, r7
 801a548:	bd80      	pop	{r7, pc}
 801a54a:	bf00      	nop
 801a54c:	24000029 	.word	0x24000029

0801a550 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801a550:	b480      	push	{r7}
 801a552:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801a554:	4b03      	ldr	r3, [pc, #12]	@ (801a564 <BSP_SD_WriteCpltCallback+0x14>)
 801a556:	2201      	movs	r2, #1
 801a558:	601a      	str	r2, [r3, #0]
}
 801a55a:	bf00      	nop
 801a55c:	46bd      	mov	sp, r7
 801a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a562:	4770      	bx	lr
 801a564:	24000ac8 	.word	0x24000ac8

0801a568 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801a568:	b480      	push	{r7}
 801a56a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801a56c:	4b03      	ldr	r3, [pc, #12]	@ (801a57c <BSP_SD_ReadCpltCallback+0x14>)
 801a56e:	2201      	movs	r2, #1
 801a570:	601a      	str	r2, [r3, #0]
}
 801a572:	bf00      	nop
 801a574:	46bd      	mov	sp, r7
 801a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a57a:	4770      	bx	lr
 801a57c:	24000acc 	.word	0x24000acc

0801a580 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801a580:	b580      	push	{r7, lr}
 801a582:	b084      	sub	sp, #16
 801a584:	af00      	add	r7, sp, #0
 801a586:	4603      	mov	r3, r0
 801a588:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801a58a:	79fb      	ldrb	r3, [r7, #7]
 801a58c:	4a08      	ldr	r2, [pc, #32]	@ (801a5b0 <disk_status+0x30>)
 801a58e:	009b      	lsls	r3, r3, #2
 801a590:	4413      	add	r3, r2
 801a592:	685b      	ldr	r3, [r3, #4]
 801a594:	685b      	ldr	r3, [r3, #4]
 801a596:	79fa      	ldrb	r2, [r7, #7]
 801a598:	4905      	ldr	r1, [pc, #20]	@ (801a5b0 <disk_status+0x30>)
 801a59a:	440a      	add	r2, r1
 801a59c:	7a12      	ldrb	r2, [r2, #8]
 801a59e:	4610      	mov	r0, r2
 801a5a0:	4798      	blx	r3
 801a5a2:	4603      	mov	r3, r0
 801a5a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 801a5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 801a5a8:	4618      	mov	r0, r3
 801a5aa:	3710      	adds	r7, #16
 801a5ac:	46bd      	mov	sp, r7
 801a5ae:	bd80      	pop	{r7, pc}
 801a5b0:	24000af8 	.word	0x24000af8

0801a5b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801a5b4:	b580      	push	{r7, lr}
 801a5b6:	b084      	sub	sp, #16
 801a5b8:	af00      	add	r7, sp, #0
 801a5ba:	4603      	mov	r3, r0
 801a5bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801a5be:	2300      	movs	r3, #0
 801a5c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801a5c2:	79fb      	ldrb	r3, [r7, #7]
 801a5c4:	4a0e      	ldr	r2, [pc, #56]	@ (801a600 <disk_initialize+0x4c>)
 801a5c6:	5cd3      	ldrb	r3, [r2, r3]
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	d114      	bne.n	801a5f6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801a5cc:	79fb      	ldrb	r3, [r7, #7]
 801a5ce:	4a0c      	ldr	r2, [pc, #48]	@ (801a600 <disk_initialize+0x4c>)
 801a5d0:	009b      	lsls	r3, r3, #2
 801a5d2:	4413      	add	r3, r2
 801a5d4:	685b      	ldr	r3, [r3, #4]
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	79fa      	ldrb	r2, [r7, #7]
 801a5da:	4909      	ldr	r1, [pc, #36]	@ (801a600 <disk_initialize+0x4c>)
 801a5dc:	440a      	add	r2, r1
 801a5de:	7a12      	ldrb	r2, [r2, #8]
 801a5e0:	4610      	mov	r0, r2
 801a5e2:	4798      	blx	r3
 801a5e4:	4603      	mov	r3, r0
 801a5e6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801a5e8:	7bfb      	ldrb	r3, [r7, #15]
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d103      	bne.n	801a5f6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801a5ee:	79fb      	ldrb	r3, [r7, #7]
 801a5f0:	4a03      	ldr	r2, [pc, #12]	@ (801a600 <disk_initialize+0x4c>)
 801a5f2:	2101      	movs	r1, #1
 801a5f4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801a5f6:	7bfb      	ldrb	r3, [r7, #15]
}
 801a5f8:	4618      	mov	r0, r3
 801a5fa:	3710      	adds	r7, #16
 801a5fc:	46bd      	mov	sp, r7
 801a5fe:	bd80      	pop	{r7, pc}
 801a600:	24000af8 	.word	0x24000af8

0801a604 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801a604:	b590      	push	{r4, r7, lr}
 801a606:	b087      	sub	sp, #28
 801a608:	af00      	add	r7, sp, #0
 801a60a:	60b9      	str	r1, [r7, #8]
 801a60c:	607a      	str	r2, [r7, #4]
 801a60e:	603b      	str	r3, [r7, #0]
 801a610:	4603      	mov	r3, r0
 801a612:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801a614:	7bfb      	ldrb	r3, [r7, #15]
 801a616:	4a0a      	ldr	r2, [pc, #40]	@ (801a640 <disk_read+0x3c>)
 801a618:	009b      	lsls	r3, r3, #2
 801a61a:	4413      	add	r3, r2
 801a61c:	685b      	ldr	r3, [r3, #4]
 801a61e:	689c      	ldr	r4, [r3, #8]
 801a620:	7bfb      	ldrb	r3, [r7, #15]
 801a622:	4a07      	ldr	r2, [pc, #28]	@ (801a640 <disk_read+0x3c>)
 801a624:	4413      	add	r3, r2
 801a626:	7a18      	ldrb	r0, [r3, #8]
 801a628:	683b      	ldr	r3, [r7, #0]
 801a62a:	687a      	ldr	r2, [r7, #4]
 801a62c:	68b9      	ldr	r1, [r7, #8]
 801a62e:	47a0      	blx	r4
 801a630:	4603      	mov	r3, r0
 801a632:	75fb      	strb	r3, [r7, #23]
  return res;
 801a634:	7dfb      	ldrb	r3, [r7, #23]
}
 801a636:	4618      	mov	r0, r3
 801a638:	371c      	adds	r7, #28
 801a63a:	46bd      	mov	sp, r7
 801a63c:	bd90      	pop	{r4, r7, pc}
 801a63e:	bf00      	nop
 801a640:	24000af8 	.word	0x24000af8

0801a644 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801a644:	b590      	push	{r4, r7, lr}
 801a646:	b087      	sub	sp, #28
 801a648:	af00      	add	r7, sp, #0
 801a64a:	60b9      	str	r1, [r7, #8]
 801a64c:	607a      	str	r2, [r7, #4]
 801a64e:	603b      	str	r3, [r7, #0]
 801a650:	4603      	mov	r3, r0
 801a652:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801a654:	7bfb      	ldrb	r3, [r7, #15]
 801a656:	4a0a      	ldr	r2, [pc, #40]	@ (801a680 <disk_write+0x3c>)
 801a658:	009b      	lsls	r3, r3, #2
 801a65a:	4413      	add	r3, r2
 801a65c:	685b      	ldr	r3, [r3, #4]
 801a65e:	68dc      	ldr	r4, [r3, #12]
 801a660:	7bfb      	ldrb	r3, [r7, #15]
 801a662:	4a07      	ldr	r2, [pc, #28]	@ (801a680 <disk_write+0x3c>)
 801a664:	4413      	add	r3, r2
 801a666:	7a18      	ldrb	r0, [r3, #8]
 801a668:	683b      	ldr	r3, [r7, #0]
 801a66a:	687a      	ldr	r2, [r7, #4]
 801a66c:	68b9      	ldr	r1, [r7, #8]
 801a66e:	47a0      	blx	r4
 801a670:	4603      	mov	r3, r0
 801a672:	75fb      	strb	r3, [r7, #23]
  return res;
 801a674:	7dfb      	ldrb	r3, [r7, #23]
}
 801a676:	4618      	mov	r0, r3
 801a678:	371c      	adds	r7, #28
 801a67a:	46bd      	mov	sp, r7
 801a67c:	bd90      	pop	{r4, r7, pc}
 801a67e:	bf00      	nop
 801a680:	24000af8 	.word	0x24000af8

0801a684 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801a684:	b580      	push	{r7, lr}
 801a686:	b084      	sub	sp, #16
 801a688:	af00      	add	r7, sp, #0
 801a68a:	4603      	mov	r3, r0
 801a68c:	603a      	str	r2, [r7, #0]
 801a68e:	71fb      	strb	r3, [r7, #7]
 801a690:	460b      	mov	r3, r1
 801a692:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801a694:	79fb      	ldrb	r3, [r7, #7]
 801a696:	4a09      	ldr	r2, [pc, #36]	@ (801a6bc <disk_ioctl+0x38>)
 801a698:	009b      	lsls	r3, r3, #2
 801a69a:	4413      	add	r3, r2
 801a69c:	685b      	ldr	r3, [r3, #4]
 801a69e:	691b      	ldr	r3, [r3, #16]
 801a6a0:	79fa      	ldrb	r2, [r7, #7]
 801a6a2:	4906      	ldr	r1, [pc, #24]	@ (801a6bc <disk_ioctl+0x38>)
 801a6a4:	440a      	add	r2, r1
 801a6a6:	7a10      	ldrb	r0, [r2, #8]
 801a6a8:	79b9      	ldrb	r1, [r7, #6]
 801a6aa:	683a      	ldr	r2, [r7, #0]
 801a6ac:	4798      	blx	r3
 801a6ae:	4603      	mov	r3, r0
 801a6b0:	73fb      	strb	r3, [r7, #15]
  return res;
 801a6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 801a6b4:	4618      	mov	r0, r3
 801a6b6:	3710      	adds	r7, #16
 801a6b8:	46bd      	mov	sp, r7
 801a6ba:	bd80      	pop	{r7, pc}
 801a6bc:	24000af8 	.word	0x24000af8

0801a6c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801a6c0:	b480      	push	{r7}
 801a6c2:	b085      	sub	sp, #20
 801a6c4:	af00      	add	r7, sp, #0
 801a6c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	3301      	adds	r3, #1
 801a6cc:	781b      	ldrb	r3, [r3, #0]
 801a6ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801a6d0:	89fb      	ldrh	r3, [r7, #14]
 801a6d2:	021b      	lsls	r3, r3, #8
 801a6d4:	b21a      	sxth	r2, r3
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	781b      	ldrb	r3, [r3, #0]
 801a6da:	b21b      	sxth	r3, r3
 801a6dc:	4313      	orrs	r3, r2
 801a6de:	b21b      	sxth	r3, r3
 801a6e0:	81fb      	strh	r3, [r7, #14]
	return rv;
 801a6e2:	89fb      	ldrh	r3, [r7, #14]
}
 801a6e4:	4618      	mov	r0, r3
 801a6e6:	3714      	adds	r7, #20
 801a6e8:	46bd      	mov	sp, r7
 801a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ee:	4770      	bx	lr

0801a6f0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801a6f0:	b480      	push	{r7}
 801a6f2:	b085      	sub	sp, #20
 801a6f4:	af00      	add	r7, sp, #0
 801a6f6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	3303      	adds	r3, #3
 801a6fc:	781b      	ldrb	r3, [r3, #0]
 801a6fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801a700:	68fb      	ldr	r3, [r7, #12]
 801a702:	021b      	lsls	r3, r3, #8
 801a704:	687a      	ldr	r2, [r7, #4]
 801a706:	3202      	adds	r2, #2
 801a708:	7812      	ldrb	r2, [r2, #0]
 801a70a:	4313      	orrs	r3, r2
 801a70c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801a70e:	68fb      	ldr	r3, [r7, #12]
 801a710:	021b      	lsls	r3, r3, #8
 801a712:	687a      	ldr	r2, [r7, #4]
 801a714:	3201      	adds	r2, #1
 801a716:	7812      	ldrb	r2, [r2, #0]
 801a718:	4313      	orrs	r3, r2
 801a71a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	021b      	lsls	r3, r3, #8
 801a720:	687a      	ldr	r2, [r7, #4]
 801a722:	7812      	ldrb	r2, [r2, #0]
 801a724:	4313      	orrs	r3, r2
 801a726:	60fb      	str	r3, [r7, #12]
	return rv;
 801a728:	68fb      	ldr	r3, [r7, #12]
}
 801a72a:	4618      	mov	r0, r3
 801a72c:	3714      	adds	r7, #20
 801a72e:	46bd      	mov	sp, r7
 801a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a734:	4770      	bx	lr

0801a736 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801a736:	b480      	push	{r7}
 801a738:	b083      	sub	sp, #12
 801a73a:	af00      	add	r7, sp, #0
 801a73c:	6078      	str	r0, [r7, #4]
 801a73e:	460b      	mov	r3, r1
 801a740:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	1c5a      	adds	r2, r3, #1
 801a746:	607a      	str	r2, [r7, #4]
 801a748:	887a      	ldrh	r2, [r7, #2]
 801a74a:	b2d2      	uxtb	r2, r2
 801a74c:	701a      	strb	r2, [r3, #0]
 801a74e:	887b      	ldrh	r3, [r7, #2]
 801a750:	0a1b      	lsrs	r3, r3, #8
 801a752:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	1c5a      	adds	r2, r3, #1
 801a758:	607a      	str	r2, [r7, #4]
 801a75a:	887a      	ldrh	r2, [r7, #2]
 801a75c:	b2d2      	uxtb	r2, r2
 801a75e:	701a      	strb	r2, [r3, #0]
}
 801a760:	bf00      	nop
 801a762:	370c      	adds	r7, #12
 801a764:	46bd      	mov	sp, r7
 801a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a76a:	4770      	bx	lr

0801a76c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801a76c:	b480      	push	{r7}
 801a76e:	b083      	sub	sp, #12
 801a770:	af00      	add	r7, sp, #0
 801a772:	6078      	str	r0, [r7, #4]
 801a774:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	1c5a      	adds	r2, r3, #1
 801a77a:	607a      	str	r2, [r7, #4]
 801a77c:	683a      	ldr	r2, [r7, #0]
 801a77e:	b2d2      	uxtb	r2, r2
 801a780:	701a      	strb	r2, [r3, #0]
 801a782:	683b      	ldr	r3, [r7, #0]
 801a784:	0a1b      	lsrs	r3, r3, #8
 801a786:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	1c5a      	adds	r2, r3, #1
 801a78c:	607a      	str	r2, [r7, #4]
 801a78e:	683a      	ldr	r2, [r7, #0]
 801a790:	b2d2      	uxtb	r2, r2
 801a792:	701a      	strb	r2, [r3, #0]
 801a794:	683b      	ldr	r3, [r7, #0]
 801a796:	0a1b      	lsrs	r3, r3, #8
 801a798:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	1c5a      	adds	r2, r3, #1
 801a79e:	607a      	str	r2, [r7, #4]
 801a7a0:	683a      	ldr	r2, [r7, #0]
 801a7a2:	b2d2      	uxtb	r2, r2
 801a7a4:	701a      	strb	r2, [r3, #0]
 801a7a6:	683b      	ldr	r3, [r7, #0]
 801a7a8:	0a1b      	lsrs	r3, r3, #8
 801a7aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	1c5a      	adds	r2, r3, #1
 801a7b0:	607a      	str	r2, [r7, #4]
 801a7b2:	683a      	ldr	r2, [r7, #0]
 801a7b4:	b2d2      	uxtb	r2, r2
 801a7b6:	701a      	strb	r2, [r3, #0]
}
 801a7b8:	bf00      	nop
 801a7ba:	370c      	adds	r7, #12
 801a7bc:	46bd      	mov	sp, r7
 801a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7c2:	4770      	bx	lr

0801a7c4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801a7c4:	b480      	push	{r7}
 801a7c6:	b087      	sub	sp, #28
 801a7c8:	af00      	add	r7, sp, #0
 801a7ca:	60f8      	str	r0, [r7, #12]
 801a7cc:	60b9      	str	r1, [r7, #8]
 801a7ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801a7d0:	68fb      	ldr	r3, [r7, #12]
 801a7d2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801a7d4:	68bb      	ldr	r3, [r7, #8]
 801a7d6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	d00d      	beq.n	801a7fa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801a7de:	693a      	ldr	r2, [r7, #16]
 801a7e0:	1c53      	adds	r3, r2, #1
 801a7e2:	613b      	str	r3, [r7, #16]
 801a7e4:	697b      	ldr	r3, [r7, #20]
 801a7e6:	1c59      	adds	r1, r3, #1
 801a7e8:	6179      	str	r1, [r7, #20]
 801a7ea:	7812      	ldrb	r2, [r2, #0]
 801a7ec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	3b01      	subs	r3, #1
 801a7f2:	607b      	str	r3, [r7, #4]
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d1f1      	bne.n	801a7de <mem_cpy+0x1a>
	}
}
 801a7fa:	bf00      	nop
 801a7fc:	371c      	adds	r7, #28
 801a7fe:	46bd      	mov	sp, r7
 801a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a804:	4770      	bx	lr

0801a806 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801a806:	b480      	push	{r7}
 801a808:	b087      	sub	sp, #28
 801a80a:	af00      	add	r7, sp, #0
 801a80c:	60f8      	str	r0, [r7, #12]
 801a80e:	60b9      	str	r1, [r7, #8]
 801a810:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801a812:	68fb      	ldr	r3, [r7, #12]
 801a814:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801a816:	697b      	ldr	r3, [r7, #20]
 801a818:	1c5a      	adds	r2, r3, #1
 801a81a:	617a      	str	r2, [r7, #20]
 801a81c:	68ba      	ldr	r2, [r7, #8]
 801a81e:	b2d2      	uxtb	r2, r2
 801a820:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	3b01      	subs	r3, #1
 801a826:	607b      	str	r3, [r7, #4]
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	d1f3      	bne.n	801a816 <mem_set+0x10>
}
 801a82e:	bf00      	nop
 801a830:	bf00      	nop
 801a832:	371c      	adds	r7, #28
 801a834:	46bd      	mov	sp, r7
 801a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a83a:	4770      	bx	lr

0801a83c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801a83c:	b480      	push	{r7}
 801a83e:	b089      	sub	sp, #36	@ 0x24
 801a840:	af00      	add	r7, sp, #0
 801a842:	60f8      	str	r0, [r7, #12]
 801a844:	60b9      	str	r1, [r7, #8]
 801a846:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801a848:	68fb      	ldr	r3, [r7, #12]
 801a84a:	61fb      	str	r3, [r7, #28]
 801a84c:	68bb      	ldr	r3, [r7, #8]
 801a84e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801a850:	2300      	movs	r3, #0
 801a852:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801a854:	69fb      	ldr	r3, [r7, #28]
 801a856:	1c5a      	adds	r2, r3, #1
 801a858:	61fa      	str	r2, [r7, #28]
 801a85a:	781b      	ldrb	r3, [r3, #0]
 801a85c:	4619      	mov	r1, r3
 801a85e:	69bb      	ldr	r3, [r7, #24]
 801a860:	1c5a      	adds	r2, r3, #1
 801a862:	61ba      	str	r2, [r7, #24]
 801a864:	781b      	ldrb	r3, [r3, #0]
 801a866:	1acb      	subs	r3, r1, r3
 801a868:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	3b01      	subs	r3, #1
 801a86e:	607b      	str	r3, [r7, #4]
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	2b00      	cmp	r3, #0
 801a874:	d002      	beq.n	801a87c <mem_cmp+0x40>
 801a876:	697b      	ldr	r3, [r7, #20]
 801a878:	2b00      	cmp	r3, #0
 801a87a:	d0eb      	beq.n	801a854 <mem_cmp+0x18>

	return r;
 801a87c:	697b      	ldr	r3, [r7, #20]
}
 801a87e:	4618      	mov	r0, r3
 801a880:	3724      	adds	r7, #36	@ 0x24
 801a882:	46bd      	mov	sp, r7
 801a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a888:	4770      	bx	lr

0801a88a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801a88a:	b480      	push	{r7}
 801a88c:	b083      	sub	sp, #12
 801a88e:	af00      	add	r7, sp, #0
 801a890:	6078      	str	r0, [r7, #4]
 801a892:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801a894:	e002      	b.n	801a89c <chk_chr+0x12>
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	3301      	adds	r3, #1
 801a89a:	607b      	str	r3, [r7, #4]
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	781b      	ldrb	r3, [r3, #0]
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d005      	beq.n	801a8b0 <chk_chr+0x26>
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	781b      	ldrb	r3, [r3, #0]
 801a8a8:	461a      	mov	r2, r3
 801a8aa:	683b      	ldr	r3, [r7, #0]
 801a8ac:	4293      	cmp	r3, r2
 801a8ae:	d1f2      	bne.n	801a896 <chk_chr+0xc>
	return *str;
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	781b      	ldrb	r3, [r3, #0]
}
 801a8b4:	4618      	mov	r0, r3
 801a8b6:	370c      	adds	r7, #12
 801a8b8:	46bd      	mov	sp, r7
 801a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8be:	4770      	bx	lr

0801a8c0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801a8c0:	b480      	push	{r7}
 801a8c2:	b085      	sub	sp, #20
 801a8c4:	af00      	add	r7, sp, #0
 801a8c6:	6078      	str	r0, [r7, #4]
 801a8c8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	60bb      	str	r3, [r7, #8]
 801a8ce:	68bb      	ldr	r3, [r7, #8]
 801a8d0:	60fb      	str	r3, [r7, #12]
 801a8d2:	e029      	b.n	801a928 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801a8d4:	4a27      	ldr	r2, [pc, #156]	@ (801a974 <chk_lock+0xb4>)
 801a8d6:	68fb      	ldr	r3, [r7, #12]
 801a8d8:	011b      	lsls	r3, r3, #4
 801a8da:	4413      	add	r3, r2
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d01d      	beq.n	801a91e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a8e2:	4a24      	ldr	r2, [pc, #144]	@ (801a974 <chk_lock+0xb4>)
 801a8e4:	68fb      	ldr	r3, [r7, #12]
 801a8e6:	011b      	lsls	r3, r3, #4
 801a8e8:	4413      	add	r3, r2
 801a8ea:	681a      	ldr	r2, [r3, #0]
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	681b      	ldr	r3, [r3, #0]
 801a8f0:	429a      	cmp	r2, r3
 801a8f2:	d116      	bne.n	801a922 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801a8f4:	4a1f      	ldr	r2, [pc, #124]	@ (801a974 <chk_lock+0xb4>)
 801a8f6:	68fb      	ldr	r3, [r7, #12]
 801a8f8:	011b      	lsls	r3, r3, #4
 801a8fa:	4413      	add	r3, r2
 801a8fc:	3304      	adds	r3, #4
 801a8fe:	681a      	ldr	r2, [r3, #0]
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a904:	429a      	cmp	r2, r3
 801a906:	d10c      	bne.n	801a922 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801a908:	4a1a      	ldr	r2, [pc, #104]	@ (801a974 <chk_lock+0xb4>)
 801a90a:	68fb      	ldr	r3, [r7, #12]
 801a90c:	011b      	lsls	r3, r3, #4
 801a90e:	4413      	add	r3, r2
 801a910:	3308      	adds	r3, #8
 801a912:	681a      	ldr	r2, [r3, #0]
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801a918:	429a      	cmp	r2, r3
 801a91a:	d102      	bne.n	801a922 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801a91c:	e007      	b.n	801a92e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801a91e:	2301      	movs	r3, #1
 801a920:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a922:	68fb      	ldr	r3, [r7, #12]
 801a924:	3301      	adds	r3, #1
 801a926:	60fb      	str	r3, [r7, #12]
 801a928:	68fb      	ldr	r3, [r7, #12]
 801a92a:	2b01      	cmp	r3, #1
 801a92c:	d9d2      	bls.n	801a8d4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801a92e:	68fb      	ldr	r3, [r7, #12]
 801a930:	2b02      	cmp	r3, #2
 801a932:	d109      	bne.n	801a948 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801a934:	68bb      	ldr	r3, [r7, #8]
 801a936:	2b00      	cmp	r3, #0
 801a938:	d102      	bne.n	801a940 <chk_lock+0x80>
 801a93a:	683b      	ldr	r3, [r7, #0]
 801a93c:	2b02      	cmp	r3, #2
 801a93e:	d101      	bne.n	801a944 <chk_lock+0x84>
 801a940:	2300      	movs	r3, #0
 801a942:	e010      	b.n	801a966 <chk_lock+0xa6>
 801a944:	2312      	movs	r3, #18
 801a946:	e00e      	b.n	801a966 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801a948:	683b      	ldr	r3, [r7, #0]
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d108      	bne.n	801a960 <chk_lock+0xa0>
 801a94e:	4a09      	ldr	r2, [pc, #36]	@ (801a974 <chk_lock+0xb4>)
 801a950:	68fb      	ldr	r3, [r7, #12]
 801a952:	011b      	lsls	r3, r3, #4
 801a954:	4413      	add	r3, r2
 801a956:	330c      	adds	r3, #12
 801a958:	881b      	ldrh	r3, [r3, #0]
 801a95a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a95e:	d101      	bne.n	801a964 <chk_lock+0xa4>
 801a960:	2310      	movs	r3, #16
 801a962:	e000      	b.n	801a966 <chk_lock+0xa6>
 801a964:	2300      	movs	r3, #0
}
 801a966:	4618      	mov	r0, r3
 801a968:	3714      	adds	r7, #20
 801a96a:	46bd      	mov	sp, r7
 801a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a970:	4770      	bx	lr
 801a972:	bf00      	nop
 801a974:	24000ad8 	.word	0x24000ad8

0801a978 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801a978:	b480      	push	{r7}
 801a97a:	b083      	sub	sp, #12
 801a97c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801a97e:	2300      	movs	r3, #0
 801a980:	607b      	str	r3, [r7, #4]
 801a982:	e002      	b.n	801a98a <enq_lock+0x12>
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	3301      	adds	r3, #1
 801a988:	607b      	str	r3, [r7, #4]
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	2b01      	cmp	r3, #1
 801a98e:	d806      	bhi.n	801a99e <enq_lock+0x26>
 801a990:	4a09      	ldr	r2, [pc, #36]	@ (801a9b8 <enq_lock+0x40>)
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	011b      	lsls	r3, r3, #4
 801a996:	4413      	add	r3, r2
 801a998:	681b      	ldr	r3, [r3, #0]
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	d1f2      	bne.n	801a984 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	2b02      	cmp	r3, #2
 801a9a2:	bf14      	ite	ne
 801a9a4:	2301      	movne	r3, #1
 801a9a6:	2300      	moveq	r3, #0
 801a9a8:	b2db      	uxtb	r3, r3
}
 801a9aa:	4618      	mov	r0, r3
 801a9ac:	370c      	adds	r7, #12
 801a9ae:	46bd      	mov	sp, r7
 801a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9b4:	4770      	bx	lr
 801a9b6:	bf00      	nop
 801a9b8:	24000ad8 	.word	0x24000ad8

0801a9bc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801a9bc:	b480      	push	{r7}
 801a9be:	b085      	sub	sp, #20
 801a9c0:	af00      	add	r7, sp, #0
 801a9c2:	6078      	str	r0, [r7, #4]
 801a9c4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801a9c6:	2300      	movs	r3, #0
 801a9c8:	60fb      	str	r3, [r7, #12]
 801a9ca:	e01f      	b.n	801aa0c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801a9cc:	4a41      	ldr	r2, [pc, #260]	@ (801aad4 <inc_lock+0x118>)
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	011b      	lsls	r3, r3, #4
 801a9d2:	4413      	add	r3, r2
 801a9d4:	681a      	ldr	r2, [r3, #0]
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	681b      	ldr	r3, [r3, #0]
 801a9da:	429a      	cmp	r2, r3
 801a9dc:	d113      	bne.n	801aa06 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801a9de:	4a3d      	ldr	r2, [pc, #244]	@ (801aad4 <inc_lock+0x118>)
 801a9e0:	68fb      	ldr	r3, [r7, #12]
 801a9e2:	011b      	lsls	r3, r3, #4
 801a9e4:	4413      	add	r3, r2
 801a9e6:	3304      	adds	r3, #4
 801a9e8:	681a      	ldr	r2, [r3, #0]
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801a9ee:	429a      	cmp	r2, r3
 801a9f0:	d109      	bne.n	801aa06 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801a9f2:	4a38      	ldr	r2, [pc, #224]	@ (801aad4 <inc_lock+0x118>)
 801a9f4:	68fb      	ldr	r3, [r7, #12]
 801a9f6:	011b      	lsls	r3, r3, #4
 801a9f8:	4413      	add	r3, r2
 801a9fa:	3308      	adds	r3, #8
 801a9fc:	681a      	ldr	r2, [r3, #0]
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801aa02:	429a      	cmp	r2, r3
 801aa04:	d006      	beq.n	801aa14 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801aa06:	68fb      	ldr	r3, [r7, #12]
 801aa08:	3301      	adds	r3, #1
 801aa0a:	60fb      	str	r3, [r7, #12]
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	2b01      	cmp	r3, #1
 801aa10:	d9dc      	bls.n	801a9cc <inc_lock+0x10>
 801aa12:	e000      	b.n	801aa16 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801aa14:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801aa16:	68fb      	ldr	r3, [r7, #12]
 801aa18:	2b02      	cmp	r3, #2
 801aa1a:	d132      	bne.n	801aa82 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801aa1c:	2300      	movs	r3, #0
 801aa1e:	60fb      	str	r3, [r7, #12]
 801aa20:	e002      	b.n	801aa28 <inc_lock+0x6c>
 801aa22:	68fb      	ldr	r3, [r7, #12]
 801aa24:	3301      	adds	r3, #1
 801aa26:	60fb      	str	r3, [r7, #12]
 801aa28:	68fb      	ldr	r3, [r7, #12]
 801aa2a:	2b01      	cmp	r3, #1
 801aa2c:	d806      	bhi.n	801aa3c <inc_lock+0x80>
 801aa2e:	4a29      	ldr	r2, [pc, #164]	@ (801aad4 <inc_lock+0x118>)
 801aa30:	68fb      	ldr	r3, [r7, #12]
 801aa32:	011b      	lsls	r3, r3, #4
 801aa34:	4413      	add	r3, r2
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	2b00      	cmp	r3, #0
 801aa3a:	d1f2      	bne.n	801aa22 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801aa3c:	68fb      	ldr	r3, [r7, #12]
 801aa3e:	2b02      	cmp	r3, #2
 801aa40:	d101      	bne.n	801aa46 <inc_lock+0x8a>
 801aa42:	2300      	movs	r3, #0
 801aa44:	e040      	b.n	801aac8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	681a      	ldr	r2, [r3, #0]
 801aa4a:	4922      	ldr	r1, [pc, #136]	@ (801aad4 <inc_lock+0x118>)
 801aa4c:	68fb      	ldr	r3, [r7, #12]
 801aa4e:	011b      	lsls	r3, r3, #4
 801aa50:	440b      	add	r3, r1
 801aa52:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	689a      	ldr	r2, [r3, #8]
 801aa58:	491e      	ldr	r1, [pc, #120]	@ (801aad4 <inc_lock+0x118>)
 801aa5a:	68fb      	ldr	r3, [r7, #12]
 801aa5c:	011b      	lsls	r3, r3, #4
 801aa5e:	440b      	add	r3, r1
 801aa60:	3304      	adds	r3, #4
 801aa62:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	695a      	ldr	r2, [r3, #20]
 801aa68:	491a      	ldr	r1, [pc, #104]	@ (801aad4 <inc_lock+0x118>)
 801aa6a:	68fb      	ldr	r3, [r7, #12]
 801aa6c:	011b      	lsls	r3, r3, #4
 801aa6e:	440b      	add	r3, r1
 801aa70:	3308      	adds	r3, #8
 801aa72:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801aa74:	4a17      	ldr	r2, [pc, #92]	@ (801aad4 <inc_lock+0x118>)
 801aa76:	68fb      	ldr	r3, [r7, #12]
 801aa78:	011b      	lsls	r3, r3, #4
 801aa7a:	4413      	add	r3, r2
 801aa7c:	330c      	adds	r3, #12
 801aa7e:	2200      	movs	r2, #0
 801aa80:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801aa82:	683b      	ldr	r3, [r7, #0]
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	d009      	beq.n	801aa9c <inc_lock+0xe0>
 801aa88:	4a12      	ldr	r2, [pc, #72]	@ (801aad4 <inc_lock+0x118>)
 801aa8a:	68fb      	ldr	r3, [r7, #12]
 801aa8c:	011b      	lsls	r3, r3, #4
 801aa8e:	4413      	add	r3, r2
 801aa90:	330c      	adds	r3, #12
 801aa92:	881b      	ldrh	r3, [r3, #0]
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d001      	beq.n	801aa9c <inc_lock+0xe0>
 801aa98:	2300      	movs	r3, #0
 801aa9a:	e015      	b.n	801aac8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801aa9c:	683b      	ldr	r3, [r7, #0]
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	d108      	bne.n	801aab4 <inc_lock+0xf8>
 801aaa2:	4a0c      	ldr	r2, [pc, #48]	@ (801aad4 <inc_lock+0x118>)
 801aaa4:	68fb      	ldr	r3, [r7, #12]
 801aaa6:	011b      	lsls	r3, r3, #4
 801aaa8:	4413      	add	r3, r2
 801aaaa:	330c      	adds	r3, #12
 801aaac:	881b      	ldrh	r3, [r3, #0]
 801aaae:	3301      	adds	r3, #1
 801aab0:	b29a      	uxth	r2, r3
 801aab2:	e001      	b.n	801aab8 <inc_lock+0xfc>
 801aab4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801aab8:	4906      	ldr	r1, [pc, #24]	@ (801aad4 <inc_lock+0x118>)
 801aaba:	68fb      	ldr	r3, [r7, #12]
 801aabc:	011b      	lsls	r3, r3, #4
 801aabe:	440b      	add	r3, r1
 801aac0:	330c      	adds	r3, #12
 801aac2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	3301      	adds	r3, #1
}
 801aac8:	4618      	mov	r0, r3
 801aaca:	3714      	adds	r7, #20
 801aacc:	46bd      	mov	sp, r7
 801aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aad2:	4770      	bx	lr
 801aad4:	24000ad8 	.word	0x24000ad8

0801aad8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801aad8:	b480      	push	{r7}
 801aada:	b085      	sub	sp, #20
 801aadc:	af00      	add	r7, sp, #0
 801aade:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	3b01      	subs	r3, #1
 801aae4:	607b      	str	r3, [r7, #4]
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	2b01      	cmp	r3, #1
 801aaea:	d825      	bhi.n	801ab38 <dec_lock+0x60>
		n = Files[i].ctr;
 801aaec:	4a17      	ldr	r2, [pc, #92]	@ (801ab4c <dec_lock+0x74>)
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	011b      	lsls	r3, r3, #4
 801aaf2:	4413      	add	r3, r2
 801aaf4:	330c      	adds	r3, #12
 801aaf6:	881b      	ldrh	r3, [r3, #0]
 801aaf8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801aafa:	89fb      	ldrh	r3, [r7, #14]
 801aafc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ab00:	d101      	bne.n	801ab06 <dec_lock+0x2e>
 801ab02:	2300      	movs	r3, #0
 801ab04:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801ab06:	89fb      	ldrh	r3, [r7, #14]
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d002      	beq.n	801ab12 <dec_lock+0x3a>
 801ab0c:	89fb      	ldrh	r3, [r7, #14]
 801ab0e:	3b01      	subs	r3, #1
 801ab10:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801ab12:	4a0e      	ldr	r2, [pc, #56]	@ (801ab4c <dec_lock+0x74>)
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	011b      	lsls	r3, r3, #4
 801ab18:	4413      	add	r3, r2
 801ab1a:	330c      	adds	r3, #12
 801ab1c:	89fa      	ldrh	r2, [r7, #14]
 801ab1e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801ab20:	89fb      	ldrh	r3, [r7, #14]
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	d105      	bne.n	801ab32 <dec_lock+0x5a>
 801ab26:	4a09      	ldr	r2, [pc, #36]	@ (801ab4c <dec_lock+0x74>)
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	011b      	lsls	r3, r3, #4
 801ab2c:	4413      	add	r3, r2
 801ab2e:	2200      	movs	r2, #0
 801ab30:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801ab32:	2300      	movs	r3, #0
 801ab34:	737b      	strb	r3, [r7, #13]
 801ab36:	e001      	b.n	801ab3c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801ab38:	2302      	movs	r3, #2
 801ab3a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801ab3c:	7b7b      	ldrb	r3, [r7, #13]
}
 801ab3e:	4618      	mov	r0, r3
 801ab40:	3714      	adds	r7, #20
 801ab42:	46bd      	mov	sp, r7
 801ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab48:	4770      	bx	lr
 801ab4a:	bf00      	nop
 801ab4c:	24000ad8 	.word	0x24000ad8

0801ab50 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801ab50:	b480      	push	{r7}
 801ab52:	b085      	sub	sp, #20
 801ab54:	af00      	add	r7, sp, #0
 801ab56:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801ab58:	2300      	movs	r3, #0
 801ab5a:	60fb      	str	r3, [r7, #12]
 801ab5c:	e010      	b.n	801ab80 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801ab5e:	4a0d      	ldr	r2, [pc, #52]	@ (801ab94 <clear_lock+0x44>)
 801ab60:	68fb      	ldr	r3, [r7, #12]
 801ab62:	011b      	lsls	r3, r3, #4
 801ab64:	4413      	add	r3, r2
 801ab66:	681b      	ldr	r3, [r3, #0]
 801ab68:	687a      	ldr	r2, [r7, #4]
 801ab6a:	429a      	cmp	r2, r3
 801ab6c:	d105      	bne.n	801ab7a <clear_lock+0x2a>
 801ab6e:	4a09      	ldr	r2, [pc, #36]	@ (801ab94 <clear_lock+0x44>)
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	011b      	lsls	r3, r3, #4
 801ab74:	4413      	add	r3, r2
 801ab76:	2200      	movs	r2, #0
 801ab78:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801ab7a:	68fb      	ldr	r3, [r7, #12]
 801ab7c:	3301      	adds	r3, #1
 801ab7e:	60fb      	str	r3, [r7, #12]
 801ab80:	68fb      	ldr	r3, [r7, #12]
 801ab82:	2b01      	cmp	r3, #1
 801ab84:	d9eb      	bls.n	801ab5e <clear_lock+0xe>
	}
}
 801ab86:	bf00      	nop
 801ab88:	bf00      	nop
 801ab8a:	3714      	adds	r7, #20
 801ab8c:	46bd      	mov	sp, r7
 801ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab92:	4770      	bx	lr
 801ab94:	24000ad8 	.word	0x24000ad8

0801ab98 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801ab98:	b580      	push	{r7, lr}
 801ab9a:	b086      	sub	sp, #24
 801ab9c:	af00      	add	r7, sp, #0
 801ab9e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801aba0:	2300      	movs	r3, #0
 801aba2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	78db      	ldrb	r3, [r3, #3]
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d034      	beq.n	801ac16 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801abb0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	7858      	ldrb	r0, [r3, #1]
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801abbc:	2301      	movs	r3, #1
 801abbe:	697a      	ldr	r2, [r7, #20]
 801abc0:	f7ff fd40 	bl	801a644 <disk_write>
 801abc4:	4603      	mov	r3, r0
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	d002      	beq.n	801abd0 <sync_window+0x38>
			res = FR_DISK_ERR;
 801abca:	2301      	movs	r3, #1
 801abcc:	73fb      	strb	r3, [r7, #15]
 801abce:	e022      	b.n	801ac16 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	2200      	movs	r2, #0
 801abd4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	6a1b      	ldr	r3, [r3, #32]
 801abda:	697a      	ldr	r2, [r7, #20]
 801abdc:	1ad2      	subs	r2, r2, r3
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	699b      	ldr	r3, [r3, #24]
 801abe2:	429a      	cmp	r2, r3
 801abe4:	d217      	bcs.n	801ac16 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	789b      	ldrb	r3, [r3, #2]
 801abea:	613b      	str	r3, [r7, #16]
 801abec:	e010      	b.n	801ac10 <sync_window+0x78>
					wsect += fs->fsize;
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	699b      	ldr	r3, [r3, #24]
 801abf2:	697a      	ldr	r2, [r7, #20]
 801abf4:	4413      	add	r3, r2
 801abf6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	7858      	ldrb	r0, [r3, #1]
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801ac02:	2301      	movs	r3, #1
 801ac04:	697a      	ldr	r2, [r7, #20]
 801ac06:	f7ff fd1d 	bl	801a644 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801ac0a:	693b      	ldr	r3, [r7, #16]
 801ac0c:	3b01      	subs	r3, #1
 801ac0e:	613b      	str	r3, [r7, #16]
 801ac10:	693b      	ldr	r3, [r7, #16]
 801ac12:	2b01      	cmp	r3, #1
 801ac14:	d8eb      	bhi.n	801abee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801ac16:	7bfb      	ldrb	r3, [r7, #15]
}
 801ac18:	4618      	mov	r0, r3
 801ac1a:	3718      	adds	r7, #24
 801ac1c:	46bd      	mov	sp, r7
 801ac1e:	bd80      	pop	{r7, pc}

0801ac20 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801ac20:	b580      	push	{r7, lr}
 801ac22:	b084      	sub	sp, #16
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	6078      	str	r0, [r7, #4]
 801ac28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ac32:	683a      	ldr	r2, [r7, #0]
 801ac34:	429a      	cmp	r2, r3
 801ac36:	d01b      	beq.n	801ac70 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801ac38:	6878      	ldr	r0, [r7, #4]
 801ac3a:	f7ff ffad 	bl	801ab98 <sync_window>
 801ac3e:	4603      	mov	r3, r0
 801ac40:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801ac42:	7bfb      	ldrb	r3, [r7, #15]
 801ac44:	2b00      	cmp	r3, #0
 801ac46:	d113      	bne.n	801ac70 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	7858      	ldrb	r0, [r3, #1]
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801ac52:	2301      	movs	r3, #1
 801ac54:	683a      	ldr	r2, [r7, #0]
 801ac56:	f7ff fcd5 	bl	801a604 <disk_read>
 801ac5a:	4603      	mov	r3, r0
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d004      	beq.n	801ac6a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801ac60:	f04f 33ff 	mov.w	r3, #4294967295
 801ac64:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801ac66:	2301      	movs	r3, #1
 801ac68:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	683a      	ldr	r2, [r7, #0]
 801ac6e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 801ac70:	7bfb      	ldrb	r3, [r7, #15]
}
 801ac72:	4618      	mov	r0, r3
 801ac74:	3710      	adds	r7, #16
 801ac76:	46bd      	mov	sp, r7
 801ac78:	bd80      	pop	{r7, pc}
	...

0801ac7c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801ac7c:	b580      	push	{r7, lr}
 801ac7e:	b084      	sub	sp, #16
 801ac80:	af00      	add	r7, sp, #0
 801ac82:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801ac84:	6878      	ldr	r0, [r7, #4]
 801ac86:	f7ff ff87 	bl	801ab98 <sync_window>
 801ac8a:	4603      	mov	r3, r0
 801ac8c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801ac8e:	7bfb      	ldrb	r3, [r7, #15]
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d158      	bne.n	801ad46 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	781b      	ldrb	r3, [r3, #0]
 801ac98:	2b03      	cmp	r3, #3
 801ac9a:	d148      	bne.n	801ad2e <sync_fs+0xb2>
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	791b      	ldrb	r3, [r3, #4]
 801aca0:	2b01      	cmp	r3, #1
 801aca2:	d144      	bne.n	801ad2e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	3330      	adds	r3, #48	@ 0x30
 801aca8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801acac:	2100      	movs	r1, #0
 801acae:	4618      	mov	r0, r3
 801acb0:	f7ff fda9 	bl	801a806 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	3330      	adds	r3, #48	@ 0x30
 801acb8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801acbc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801acc0:	4618      	mov	r0, r3
 801acc2:	f7ff fd38 	bl	801a736 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	3330      	adds	r3, #48	@ 0x30
 801acca:	4921      	ldr	r1, [pc, #132]	@ (801ad50 <sync_fs+0xd4>)
 801accc:	4618      	mov	r0, r3
 801acce:	f7ff fd4d 	bl	801a76c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	3330      	adds	r3, #48	@ 0x30
 801acd6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801acda:	491e      	ldr	r1, [pc, #120]	@ (801ad54 <sync_fs+0xd8>)
 801acdc:	4618      	mov	r0, r3
 801acde:	f7ff fd45 	bl	801a76c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	3330      	adds	r3, #48	@ 0x30
 801ace6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	691b      	ldr	r3, [r3, #16]
 801acee:	4619      	mov	r1, r3
 801acf0:	4610      	mov	r0, r2
 801acf2:	f7ff fd3b 	bl	801a76c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	3330      	adds	r3, #48	@ 0x30
 801acfa:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	68db      	ldr	r3, [r3, #12]
 801ad02:	4619      	mov	r1, r3
 801ad04:	4610      	mov	r0, r2
 801ad06:	f7ff fd31 	bl	801a76c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	69db      	ldr	r3, [r3, #28]
 801ad0e:	1c5a      	adds	r2, r3, #1
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	7858      	ldrb	r0, [r3, #1]
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ad22:	2301      	movs	r3, #1
 801ad24:	f7ff fc8e 	bl	801a644 <disk_write>
			fs->fsi_flag = 0;
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	2200      	movs	r2, #0
 801ad2c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801ad2e:	687b      	ldr	r3, [r7, #4]
 801ad30:	785b      	ldrb	r3, [r3, #1]
 801ad32:	2200      	movs	r2, #0
 801ad34:	2100      	movs	r1, #0
 801ad36:	4618      	mov	r0, r3
 801ad38:	f7ff fca4 	bl	801a684 <disk_ioctl>
 801ad3c:	4603      	mov	r3, r0
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	d001      	beq.n	801ad46 <sync_fs+0xca>
 801ad42:	2301      	movs	r3, #1
 801ad44:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801ad46:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad48:	4618      	mov	r0, r3
 801ad4a:	3710      	adds	r7, #16
 801ad4c:	46bd      	mov	sp, r7
 801ad4e:	bd80      	pop	{r7, pc}
 801ad50:	41615252 	.word	0x41615252
 801ad54:	61417272 	.word	0x61417272

0801ad58 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801ad58:	b480      	push	{r7}
 801ad5a:	b083      	sub	sp, #12
 801ad5c:	af00      	add	r7, sp, #0
 801ad5e:	6078      	str	r0, [r7, #4]
 801ad60:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801ad62:	683b      	ldr	r3, [r7, #0]
 801ad64:	3b02      	subs	r3, #2
 801ad66:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801ad68:	687b      	ldr	r3, [r7, #4]
 801ad6a:	695b      	ldr	r3, [r3, #20]
 801ad6c:	3b02      	subs	r3, #2
 801ad6e:	683a      	ldr	r2, [r7, #0]
 801ad70:	429a      	cmp	r2, r3
 801ad72:	d301      	bcc.n	801ad78 <clust2sect+0x20>
 801ad74:	2300      	movs	r3, #0
 801ad76:	e008      	b.n	801ad8a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	895b      	ldrh	r3, [r3, #10]
 801ad7c:	461a      	mov	r2, r3
 801ad7e:	683b      	ldr	r3, [r7, #0]
 801ad80:	fb03 f202 	mul.w	r2, r3, r2
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ad88:	4413      	add	r3, r2
}
 801ad8a:	4618      	mov	r0, r3
 801ad8c:	370c      	adds	r7, #12
 801ad8e:	46bd      	mov	sp, r7
 801ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad94:	4770      	bx	lr

0801ad96 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801ad96:	b580      	push	{r7, lr}
 801ad98:	b086      	sub	sp, #24
 801ad9a:	af00      	add	r7, sp, #0
 801ad9c:	6078      	str	r0, [r7, #4]
 801ad9e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801ada6:	683b      	ldr	r3, [r7, #0]
 801ada8:	2b01      	cmp	r3, #1
 801adaa:	d904      	bls.n	801adb6 <get_fat+0x20>
 801adac:	693b      	ldr	r3, [r7, #16]
 801adae:	695b      	ldr	r3, [r3, #20]
 801adb0:	683a      	ldr	r2, [r7, #0]
 801adb2:	429a      	cmp	r2, r3
 801adb4:	d302      	bcc.n	801adbc <get_fat+0x26>
		val = 1;	/* Internal error */
 801adb6:	2301      	movs	r3, #1
 801adb8:	617b      	str	r3, [r7, #20]
 801adba:	e08e      	b.n	801aeda <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801adbc:	f04f 33ff 	mov.w	r3, #4294967295
 801adc0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801adc2:	693b      	ldr	r3, [r7, #16]
 801adc4:	781b      	ldrb	r3, [r3, #0]
 801adc6:	2b03      	cmp	r3, #3
 801adc8:	d061      	beq.n	801ae8e <get_fat+0xf8>
 801adca:	2b03      	cmp	r3, #3
 801adcc:	dc7b      	bgt.n	801aec6 <get_fat+0x130>
 801adce:	2b01      	cmp	r3, #1
 801add0:	d002      	beq.n	801add8 <get_fat+0x42>
 801add2:	2b02      	cmp	r3, #2
 801add4:	d041      	beq.n	801ae5a <get_fat+0xc4>
 801add6:	e076      	b.n	801aec6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801add8:	683b      	ldr	r3, [r7, #0]
 801adda:	60fb      	str	r3, [r7, #12]
 801addc:	68fb      	ldr	r3, [r7, #12]
 801adde:	085b      	lsrs	r3, r3, #1
 801ade0:	68fa      	ldr	r2, [r7, #12]
 801ade2:	4413      	add	r3, r2
 801ade4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801ade6:	693b      	ldr	r3, [r7, #16]
 801ade8:	6a1a      	ldr	r2, [r3, #32]
 801adea:	68fb      	ldr	r3, [r7, #12]
 801adec:	0a5b      	lsrs	r3, r3, #9
 801adee:	4413      	add	r3, r2
 801adf0:	4619      	mov	r1, r3
 801adf2:	6938      	ldr	r0, [r7, #16]
 801adf4:	f7ff ff14 	bl	801ac20 <move_window>
 801adf8:	4603      	mov	r3, r0
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	d166      	bne.n	801aecc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 801adfe:	68fb      	ldr	r3, [r7, #12]
 801ae00:	1c5a      	adds	r2, r3, #1
 801ae02:	60fa      	str	r2, [r7, #12]
 801ae04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ae08:	693a      	ldr	r2, [r7, #16]
 801ae0a:	4413      	add	r3, r2
 801ae0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801ae10:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801ae12:	693b      	ldr	r3, [r7, #16]
 801ae14:	6a1a      	ldr	r2, [r3, #32]
 801ae16:	68fb      	ldr	r3, [r7, #12]
 801ae18:	0a5b      	lsrs	r3, r3, #9
 801ae1a:	4413      	add	r3, r2
 801ae1c:	4619      	mov	r1, r3
 801ae1e:	6938      	ldr	r0, [r7, #16]
 801ae20:	f7ff fefe 	bl	801ac20 <move_window>
 801ae24:	4603      	mov	r3, r0
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	d152      	bne.n	801aed0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 801ae2a:	68fb      	ldr	r3, [r7, #12]
 801ae2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ae30:	693a      	ldr	r2, [r7, #16]
 801ae32:	4413      	add	r3, r2
 801ae34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801ae38:	021b      	lsls	r3, r3, #8
 801ae3a:	68ba      	ldr	r2, [r7, #8]
 801ae3c:	4313      	orrs	r3, r2
 801ae3e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801ae40:	683b      	ldr	r3, [r7, #0]
 801ae42:	f003 0301 	and.w	r3, r3, #1
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d002      	beq.n	801ae50 <get_fat+0xba>
 801ae4a:	68bb      	ldr	r3, [r7, #8]
 801ae4c:	091b      	lsrs	r3, r3, #4
 801ae4e:	e002      	b.n	801ae56 <get_fat+0xc0>
 801ae50:	68bb      	ldr	r3, [r7, #8]
 801ae52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ae56:	617b      	str	r3, [r7, #20]
			break;
 801ae58:	e03f      	b.n	801aeda <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801ae5a:	693b      	ldr	r3, [r7, #16]
 801ae5c:	6a1a      	ldr	r2, [r3, #32]
 801ae5e:	683b      	ldr	r3, [r7, #0]
 801ae60:	0a1b      	lsrs	r3, r3, #8
 801ae62:	4413      	add	r3, r2
 801ae64:	4619      	mov	r1, r3
 801ae66:	6938      	ldr	r0, [r7, #16]
 801ae68:	f7ff feda 	bl	801ac20 <move_window>
 801ae6c:	4603      	mov	r3, r0
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	d130      	bne.n	801aed4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801ae72:	693b      	ldr	r3, [r7, #16]
 801ae74:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801ae78:	683b      	ldr	r3, [r7, #0]
 801ae7a:	005b      	lsls	r3, r3, #1
 801ae7c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801ae80:	4413      	add	r3, r2
 801ae82:	4618      	mov	r0, r3
 801ae84:	f7ff fc1c 	bl	801a6c0 <ld_word>
 801ae88:	4603      	mov	r3, r0
 801ae8a:	617b      	str	r3, [r7, #20]
			break;
 801ae8c:	e025      	b.n	801aeda <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801ae8e:	693b      	ldr	r3, [r7, #16]
 801ae90:	6a1a      	ldr	r2, [r3, #32]
 801ae92:	683b      	ldr	r3, [r7, #0]
 801ae94:	09db      	lsrs	r3, r3, #7
 801ae96:	4413      	add	r3, r2
 801ae98:	4619      	mov	r1, r3
 801ae9a:	6938      	ldr	r0, [r7, #16]
 801ae9c:	f7ff fec0 	bl	801ac20 <move_window>
 801aea0:	4603      	mov	r3, r0
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d118      	bne.n	801aed8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801aea6:	693b      	ldr	r3, [r7, #16]
 801aea8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801aeac:	683b      	ldr	r3, [r7, #0]
 801aeae:	009b      	lsls	r3, r3, #2
 801aeb0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801aeb4:	4413      	add	r3, r2
 801aeb6:	4618      	mov	r0, r3
 801aeb8:	f7ff fc1a 	bl	801a6f0 <ld_dword>
 801aebc:	4603      	mov	r3, r0
 801aebe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801aec2:	617b      	str	r3, [r7, #20]
			break;
 801aec4:	e009      	b.n	801aeda <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801aec6:	2301      	movs	r3, #1
 801aec8:	617b      	str	r3, [r7, #20]
 801aeca:	e006      	b.n	801aeda <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801aecc:	bf00      	nop
 801aece:	e004      	b.n	801aeda <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801aed0:	bf00      	nop
 801aed2:	e002      	b.n	801aeda <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801aed4:	bf00      	nop
 801aed6:	e000      	b.n	801aeda <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801aed8:	bf00      	nop
		}
	}

	return val;
 801aeda:	697b      	ldr	r3, [r7, #20]
}
 801aedc:	4618      	mov	r0, r3
 801aede:	3718      	adds	r7, #24
 801aee0:	46bd      	mov	sp, r7
 801aee2:	bd80      	pop	{r7, pc}

0801aee4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801aee4:	b590      	push	{r4, r7, lr}
 801aee6:	b089      	sub	sp, #36	@ 0x24
 801aee8:	af00      	add	r7, sp, #0
 801aeea:	60f8      	str	r0, [r7, #12]
 801aeec:	60b9      	str	r1, [r7, #8]
 801aeee:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801aef0:	2302      	movs	r3, #2
 801aef2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801aef4:	68bb      	ldr	r3, [r7, #8]
 801aef6:	2b01      	cmp	r3, #1
 801aef8:	f240 80d9 	bls.w	801b0ae <put_fat+0x1ca>
 801aefc:	68fb      	ldr	r3, [r7, #12]
 801aefe:	695b      	ldr	r3, [r3, #20]
 801af00:	68ba      	ldr	r2, [r7, #8]
 801af02:	429a      	cmp	r2, r3
 801af04:	f080 80d3 	bcs.w	801b0ae <put_fat+0x1ca>
		switch (fs->fs_type) {
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	781b      	ldrb	r3, [r3, #0]
 801af0c:	2b03      	cmp	r3, #3
 801af0e:	f000 8096 	beq.w	801b03e <put_fat+0x15a>
 801af12:	2b03      	cmp	r3, #3
 801af14:	f300 80cb 	bgt.w	801b0ae <put_fat+0x1ca>
 801af18:	2b01      	cmp	r3, #1
 801af1a:	d002      	beq.n	801af22 <put_fat+0x3e>
 801af1c:	2b02      	cmp	r3, #2
 801af1e:	d06e      	beq.n	801affe <put_fat+0x11a>
 801af20:	e0c5      	b.n	801b0ae <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801af22:	68bb      	ldr	r3, [r7, #8]
 801af24:	61bb      	str	r3, [r7, #24]
 801af26:	69bb      	ldr	r3, [r7, #24]
 801af28:	085b      	lsrs	r3, r3, #1
 801af2a:	69ba      	ldr	r2, [r7, #24]
 801af2c:	4413      	add	r3, r2
 801af2e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801af30:	68fb      	ldr	r3, [r7, #12]
 801af32:	6a1a      	ldr	r2, [r3, #32]
 801af34:	69bb      	ldr	r3, [r7, #24]
 801af36:	0a5b      	lsrs	r3, r3, #9
 801af38:	4413      	add	r3, r2
 801af3a:	4619      	mov	r1, r3
 801af3c:	68f8      	ldr	r0, [r7, #12]
 801af3e:	f7ff fe6f 	bl	801ac20 <move_window>
 801af42:	4603      	mov	r3, r0
 801af44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801af46:	7ffb      	ldrb	r3, [r7, #31]
 801af48:	2b00      	cmp	r3, #0
 801af4a:	f040 80a9 	bne.w	801b0a0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801af4e:	68fb      	ldr	r3, [r7, #12]
 801af50:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801af54:	69bb      	ldr	r3, [r7, #24]
 801af56:	1c59      	adds	r1, r3, #1
 801af58:	61b9      	str	r1, [r7, #24]
 801af5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801af5e:	4413      	add	r3, r2
 801af60:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801af62:	68bb      	ldr	r3, [r7, #8]
 801af64:	f003 0301 	and.w	r3, r3, #1
 801af68:	2b00      	cmp	r3, #0
 801af6a:	d00d      	beq.n	801af88 <put_fat+0xa4>
 801af6c:	697b      	ldr	r3, [r7, #20]
 801af6e:	781b      	ldrb	r3, [r3, #0]
 801af70:	b25b      	sxtb	r3, r3
 801af72:	f003 030f 	and.w	r3, r3, #15
 801af76:	b25a      	sxtb	r2, r3
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	b2db      	uxtb	r3, r3
 801af7c:	011b      	lsls	r3, r3, #4
 801af7e:	b25b      	sxtb	r3, r3
 801af80:	4313      	orrs	r3, r2
 801af82:	b25b      	sxtb	r3, r3
 801af84:	b2db      	uxtb	r3, r3
 801af86:	e001      	b.n	801af8c <put_fat+0xa8>
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	b2db      	uxtb	r3, r3
 801af8c:	697a      	ldr	r2, [r7, #20]
 801af8e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801af90:	68fb      	ldr	r3, [r7, #12]
 801af92:	2201      	movs	r2, #1
 801af94:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801af96:	68fb      	ldr	r3, [r7, #12]
 801af98:	6a1a      	ldr	r2, [r3, #32]
 801af9a:	69bb      	ldr	r3, [r7, #24]
 801af9c:	0a5b      	lsrs	r3, r3, #9
 801af9e:	4413      	add	r3, r2
 801afa0:	4619      	mov	r1, r3
 801afa2:	68f8      	ldr	r0, [r7, #12]
 801afa4:	f7ff fe3c 	bl	801ac20 <move_window>
 801afa8:	4603      	mov	r3, r0
 801afaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801afac:	7ffb      	ldrb	r3, [r7, #31]
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d178      	bne.n	801b0a4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801afb2:	68fb      	ldr	r3, [r7, #12]
 801afb4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801afb8:	69bb      	ldr	r3, [r7, #24]
 801afba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801afbe:	4413      	add	r3, r2
 801afc0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801afc2:	68bb      	ldr	r3, [r7, #8]
 801afc4:	f003 0301 	and.w	r3, r3, #1
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d003      	beq.n	801afd4 <put_fat+0xf0>
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	091b      	lsrs	r3, r3, #4
 801afd0:	b2db      	uxtb	r3, r3
 801afd2:	e00e      	b.n	801aff2 <put_fat+0x10e>
 801afd4:	697b      	ldr	r3, [r7, #20]
 801afd6:	781b      	ldrb	r3, [r3, #0]
 801afd8:	b25b      	sxtb	r3, r3
 801afda:	f023 030f 	bic.w	r3, r3, #15
 801afde:	b25a      	sxtb	r2, r3
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	0a1b      	lsrs	r3, r3, #8
 801afe4:	b25b      	sxtb	r3, r3
 801afe6:	f003 030f 	and.w	r3, r3, #15
 801afea:	b25b      	sxtb	r3, r3
 801afec:	4313      	orrs	r3, r2
 801afee:	b25b      	sxtb	r3, r3
 801aff0:	b2db      	uxtb	r3, r3
 801aff2:	697a      	ldr	r2, [r7, #20]
 801aff4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801aff6:	68fb      	ldr	r3, [r7, #12]
 801aff8:	2201      	movs	r2, #1
 801affa:	70da      	strb	r2, [r3, #3]
			break;
 801affc:	e057      	b.n	801b0ae <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801affe:	68fb      	ldr	r3, [r7, #12]
 801b000:	6a1a      	ldr	r2, [r3, #32]
 801b002:	68bb      	ldr	r3, [r7, #8]
 801b004:	0a1b      	lsrs	r3, r3, #8
 801b006:	4413      	add	r3, r2
 801b008:	4619      	mov	r1, r3
 801b00a:	68f8      	ldr	r0, [r7, #12]
 801b00c:	f7ff fe08 	bl	801ac20 <move_window>
 801b010:	4603      	mov	r3, r0
 801b012:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b014:	7ffb      	ldrb	r3, [r7, #31]
 801b016:	2b00      	cmp	r3, #0
 801b018:	d146      	bne.n	801b0a8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b01a:	68fb      	ldr	r3, [r7, #12]
 801b01c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b020:	68bb      	ldr	r3, [r7, #8]
 801b022:	005b      	lsls	r3, r3, #1
 801b024:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801b028:	4413      	add	r3, r2
 801b02a:	687a      	ldr	r2, [r7, #4]
 801b02c:	b292      	uxth	r2, r2
 801b02e:	4611      	mov	r1, r2
 801b030:	4618      	mov	r0, r3
 801b032:	f7ff fb80 	bl	801a736 <st_word>
			fs->wflag = 1;
 801b036:	68fb      	ldr	r3, [r7, #12]
 801b038:	2201      	movs	r2, #1
 801b03a:	70da      	strb	r2, [r3, #3]
			break;
 801b03c:	e037      	b.n	801b0ae <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b03e:	68fb      	ldr	r3, [r7, #12]
 801b040:	6a1a      	ldr	r2, [r3, #32]
 801b042:	68bb      	ldr	r3, [r7, #8]
 801b044:	09db      	lsrs	r3, r3, #7
 801b046:	4413      	add	r3, r2
 801b048:	4619      	mov	r1, r3
 801b04a:	68f8      	ldr	r0, [r7, #12]
 801b04c:	f7ff fde8 	bl	801ac20 <move_window>
 801b050:	4603      	mov	r3, r0
 801b052:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b054:	7ffb      	ldrb	r3, [r7, #31]
 801b056:	2b00      	cmp	r3, #0
 801b058:	d128      	bne.n	801b0ac <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801b060:	68fb      	ldr	r3, [r7, #12]
 801b062:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b066:	68bb      	ldr	r3, [r7, #8]
 801b068:	009b      	lsls	r3, r3, #2
 801b06a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801b06e:	4413      	add	r3, r2
 801b070:	4618      	mov	r0, r3
 801b072:	f7ff fb3d 	bl	801a6f0 <ld_dword>
 801b076:	4603      	mov	r3, r0
 801b078:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801b07c:	4323      	orrs	r3, r4
 801b07e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801b080:	68fb      	ldr	r3, [r7, #12]
 801b082:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b086:	68bb      	ldr	r3, [r7, #8]
 801b088:	009b      	lsls	r3, r3, #2
 801b08a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801b08e:	4413      	add	r3, r2
 801b090:	6879      	ldr	r1, [r7, #4]
 801b092:	4618      	mov	r0, r3
 801b094:	f7ff fb6a 	bl	801a76c <st_dword>
			fs->wflag = 1;
 801b098:	68fb      	ldr	r3, [r7, #12]
 801b09a:	2201      	movs	r2, #1
 801b09c:	70da      	strb	r2, [r3, #3]
			break;
 801b09e:	e006      	b.n	801b0ae <put_fat+0x1ca>
			if (res != FR_OK) break;
 801b0a0:	bf00      	nop
 801b0a2:	e004      	b.n	801b0ae <put_fat+0x1ca>
			if (res != FR_OK) break;
 801b0a4:	bf00      	nop
 801b0a6:	e002      	b.n	801b0ae <put_fat+0x1ca>
			if (res != FR_OK) break;
 801b0a8:	bf00      	nop
 801b0aa:	e000      	b.n	801b0ae <put_fat+0x1ca>
			if (res != FR_OK) break;
 801b0ac:	bf00      	nop
		}
	}
	return res;
 801b0ae:	7ffb      	ldrb	r3, [r7, #31]
}
 801b0b0:	4618      	mov	r0, r3
 801b0b2:	3724      	adds	r7, #36	@ 0x24
 801b0b4:	46bd      	mov	sp, r7
 801b0b6:	bd90      	pop	{r4, r7, pc}

0801b0b8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801b0b8:	b580      	push	{r7, lr}
 801b0ba:	b088      	sub	sp, #32
 801b0bc:	af00      	add	r7, sp, #0
 801b0be:	60f8      	str	r0, [r7, #12]
 801b0c0:	60b9      	str	r1, [r7, #8]
 801b0c2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801b0c4:	2300      	movs	r3, #0
 801b0c6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801b0c8:	68fb      	ldr	r3, [r7, #12]
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801b0ce:	68bb      	ldr	r3, [r7, #8]
 801b0d0:	2b01      	cmp	r3, #1
 801b0d2:	d904      	bls.n	801b0de <remove_chain+0x26>
 801b0d4:	69bb      	ldr	r3, [r7, #24]
 801b0d6:	695b      	ldr	r3, [r3, #20]
 801b0d8:	68ba      	ldr	r2, [r7, #8]
 801b0da:	429a      	cmp	r2, r3
 801b0dc:	d301      	bcc.n	801b0e2 <remove_chain+0x2a>
 801b0de:	2302      	movs	r3, #2
 801b0e0:	e04b      	b.n	801b17a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d00c      	beq.n	801b102 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801b0e8:	f04f 32ff 	mov.w	r2, #4294967295
 801b0ec:	6879      	ldr	r1, [r7, #4]
 801b0ee:	69b8      	ldr	r0, [r7, #24]
 801b0f0:	f7ff fef8 	bl	801aee4 <put_fat>
 801b0f4:	4603      	mov	r3, r0
 801b0f6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801b0f8:	7ffb      	ldrb	r3, [r7, #31]
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d001      	beq.n	801b102 <remove_chain+0x4a>
 801b0fe:	7ffb      	ldrb	r3, [r7, #31]
 801b100:	e03b      	b.n	801b17a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801b102:	68b9      	ldr	r1, [r7, #8]
 801b104:	68f8      	ldr	r0, [r7, #12]
 801b106:	f7ff fe46 	bl	801ad96 <get_fat>
 801b10a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801b10c:	697b      	ldr	r3, [r7, #20]
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d031      	beq.n	801b176 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801b112:	697b      	ldr	r3, [r7, #20]
 801b114:	2b01      	cmp	r3, #1
 801b116:	d101      	bne.n	801b11c <remove_chain+0x64>
 801b118:	2302      	movs	r3, #2
 801b11a:	e02e      	b.n	801b17a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801b11c:	697b      	ldr	r3, [r7, #20]
 801b11e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b122:	d101      	bne.n	801b128 <remove_chain+0x70>
 801b124:	2301      	movs	r3, #1
 801b126:	e028      	b.n	801b17a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801b128:	2200      	movs	r2, #0
 801b12a:	68b9      	ldr	r1, [r7, #8]
 801b12c:	69b8      	ldr	r0, [r7, #24]
 801b12e:	f7ff fed9 	bl	801aee4 <put_fat>
 801b132:	4603      	mov	r3, r0
 801b134:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801b136:	7ffb      	ldrb	r3, [r7, #31]
 801b138:	2b00      	cmp	r3, #0
 801b13a:	d001      	beq.n	801b140 <remove_chain+0x88>
 801b13c:	7ffb      	ldrb	r3, [r7, #31]
 801b13e:	e01c      	b.n	801b17a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801b140:	69bb      	ldr	r3, [r7, #24]
 801b142:	691a      	ldr	r2, [r3, #16]
 801b144:	69bb      	ldr	r3, [r7, #24]
 801b146:	695b      	ldr	r3, [r3, #20]
 801b148:	3b02      	subs	r3, #2
 801b14a:	429a      	cmp	r2, r3
 801b14c:	d20b      	bcs.n	801b166 <remove_chain+0xae>
			fs->free_clst++;
 801b14e:	69bb      	ldr	r3, [r7, #24]
 801b150:	691b      	ldr	r3, [r3, #16]
 801b152:	1c5a      	adds	r2, r3, #1
 801b154:	69bb      	ldr	r3, [r7, #24]
 801b156:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801b158:	69bb      	ldr	r3, [r7, #24]
 801b15a:	791b      	ldrb	r3, [r3, #4]
 801b15c:	f043 0301 	orr.w	r3, r3, #1
 801b160:	b2da      	uxtb	r2, r3
 801b162:	69bb      	ldr	r3, [r7, #24]
 801b164:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801b166:	697b      	ldr	r3, [r7, #20]
 801b168:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801b16a:	69bb      	ldr	r3, [r7, #24]
 801b16c:	695b      	ldr	r3, [r3, #20]
 801b16e:	68ba      	ldr	r2, [r7, #8]
 801b170:	429a      	cmp	r2, r3
 801b172:	d3c6      	bcc.n	801b102 <remove_chain+0x4a>
 801b174:	e000      	b.n	801b178 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801b176:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801b178:	2300      	movs	r3, #0
}
 801b17a:	4618      	mov	r0, r3
 801b17c:	3720      	adds	r7, #32
 801b17e:	46bd      	mov	sp, r7
 801b180:	bd80      	pop	{r7, pc}

0801b182 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801b182:	b580      	push	{r7, lr}
 801b184:	b088      	sub	sp, #32
 801b186:	af00      	add	r7, sp, #0
 801b188:	6078      	str	r0, [r7, #4]
 801b18a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	681b      	ldr	r3, [r3, #0]
 801b190:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801b192:	683b      	ldr	r3, [r7, #0]
 801b194:	2b00      	cmp	r3, #0
 801b196:	d10d      	bne.n	801b1b4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801b198:	693b      	ldr	r3, [r7, #16]
 801b19a:	68db      	ldr	r3, [r3, #12]
 801b19c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801b19e:	69bb      	ldr	r3, [r7, #24]
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d004      	beq.n	801b1ae <create_chain+0x2c>
 801b1a4:	693b      	ldr	r3, [r7, #16]
 801b1a6:	695b      	ldr	r3, [r3, #20]
 801b1a8:	69ba      	ldr	r2, [r7, #24]
 801b1aa:	429a      	cmp	r2, r3
 801b1ac:	d31b      	bcc.n	801b1e6 <create_chain+0x64>
 801b1ae:	2301      	movs	r3, #1
 801b1b0:	61bb      	str	r3, [r7, #24]
 801b1b2:	e018      	b.n	801b1e6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801b1b4:	6839      	ldr	r1, [r7, #0]
 801b1b6:	6878      	ldr	r0, [r7, #4]
 801b1b8:	f7ff fded 	bl	801ad96 <get_fat>
 801b1bc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801b1be:	68fb      	ldr	r3, [r7, #12]
 801b1c0:	2b01      	cmp	r3, #1
 801b1c2:	d801      	bhi.n	801b1c8 <create_chain+0x46>
 801b1c4:	2301      	movs	r3, #1
 801b1c6:	e070      	b.n	801b2aa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801b1c8:	68fb      	ldr	r3, [r7, #12]
 801b1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b1ce:	d101      	bne.n	801b1d4 <create_chain+0x52>
 801b1d0:	68fb      	ldr	r3, [r7, #12]
 801b1d2:	e06a      	b.n	801b2aa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801b1d4:	693b      	ldr	r3, [r7, #16]
 801b1d6:	695b      	ldr	r3, [r3, #20]
 801b1d8:	68fa      	ldr	r2, [r7, #12]
 801b1da:	429a      	cmp	r2, r3
 801b1dc:	d201      	bcs.n	801b1e2 <create_chain+0x60>
 801b1de:	68fb      	ldr	r3, [r7, #12]
 801b1e0:	e063      	b.n	801b2aa <create_chain+0x128>
		scl = clst;
 801b1e2:	683b      	ldr	r3, [r7, #0]
 801b1e4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801b1e6:	69bb      	ldr	r3, [r7, #24]
 801b1e8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801b1ea:	69fb      	ldr	r3, [r7, #28]
 801b1ec:	3301      	adds	r3, #1
 801b1ee:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801b1f0:	693b      	ldr	r3, [r7, #16]
 801b1f2:	695b      	ldr	r3, [r3, #20]
 801b1f4:	69fa      	ldr	r2, [r7, #28]
 801b1f6:	429a      	cmp	r2, r3
 801b1f8:	d307      	bcc.n	801b20a <create_chain+0x88>
				ncl = 2;
 801b1fa:	2302      	movs	r3, #2
 801b1fc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801b1fe:	69fa      	ldr	r2, [r7, #28]
 801b200:	69bb      	ldr	r3, [r7, #24]
 801b202:	429a      	cmp	r2, r3
 801b204:	d901      	bls.n	801b20a <create_chain+0x88>
 801b206:	2300      	movs	r3, #0
 801b208:	e04f      	b.n	801b2aa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801b20a:	69f9      	ldr	r1, [r7, #28]
 801b20c:	6878      	ldr	r0, [r7, #4]
 801b20e:	f7ff fdc2 	bl	801ad96 <get_fat>
 801b212:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801b214:	68fb      	ldr	r3, [r7, #12]
 801b216:	2b00      	cmp	r3, #0
 801b218:	d00e      	beq.n	801b238 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801b21a:	68fb      	ldr	r3, [r7, #12]
 801b21c:	2b01      	cmp	r3, #1
 801b21e:	d003      	beq.n	801b228 <create_chain+0xa6>
 801b220:	68fb      	ldr	r3, [r7, #12]
 801b222:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b226:	d101      	bne.n	801b22c <create_chain+0xaa>
 801b228:	68fb      	ldr	r3, [r7, #12]
 801b22a:	e03e      	b.n	801b2aa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801b22c:	69fa      	ldr	r2, [r7, #28]
 801b22e:	69bb      	ldr	r3, [r7, #24]
 801b230:	429a      	cmp	r2, r3
 801b232:	d1da      	bne.n	801b1ea <create_chain+0x68>
 801b234:	2300      	movs	r3, #0
 801b236:	e038      	b.n	801b2aa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801b238:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801b23a:	f04f 32ff 	mov.w	r2, #4294967295
 801b23e:	69f9      	ldr	r1, [r7, #28]
 801b240:	6938      	ldr	r0, [r7, #16]
 801b242:	f7ff fe4f 	bl	801aee4 <put_fat>
 801b246:	4603      	mov	r3, r0
 801b248:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801b24a:	7dfb      	ldrb	r3, [r7, #23]
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	d109      	bne.n	801b264 <create_chain+0xe2>
 801b250:	683b      	ldr	r3, [r7, #0]
 801b252:	2b00      	cmp	r3, #0
 801b254:	d006      	beq.n	801b264 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801b256:	69fa      	ldr	r2, [r7, #28]
 801b258:	6839      	ldr	r1, [r7, #0]
 801b25a:	6938      	ldr	r0, [r7, #16]
 801b25c:	f7ff fe42 	bl	801aee4 <put_fat>
 801b260:	4603      	mov	r3, r0
 801b262:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801b264:	7dfb      	ldrb	r3, [r7, #23]
 801b266:	2b00      	cmp	r3, #0
 801b268:	d116      	bne.n	801b298 <create_chain+0x116>
		fs->last_clst = ncl;
 801b26a:	693b      	ldr	r3, [r7, #16]
 801b26c:	69fa      	ldr	r2, [r7, #28]
 801b26e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801b270:	693b      	ldr	r3, [r7, #16]
 801b272:	691a      	ldr	r2, [r3, #16]
 801b274:	693b      	ldr	r3, [r7, #16]
 801b276:	695b      	ldr	r3, [r3, #20]
 801b278:	3b02      	subs	r3, #2
 801b27a:	429a      	cmp	r2, r3
 801b27c:	d804      	bhi.n	801b288 <create_chain+0x106>
 801b27e:	693b      	ldr	r3, [r7, #16]
 801b280:	691b      	ldr	r3, [r3, #16]
 801b282:	1e5a      	subs	r2, r3, #1
 801b284:	693b      	ldr	r3, [r7, #16]
 801b286:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801b288:	693b      	ldr	r3, [r7, #16]
 801b28a:	791b      	ldrb	r3, [r3, #4]
 801b28c:	f043 0301 	orr.w	r3, r3, #1
 801b290:	b2da      	uxtb	r2, r3
 801b292:	693b      	ldr	r3, [r7, #16]
 801b294:	711a      	strb	r2, [r3, #4]
 801b296:	e007      	b.n	801b2a8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801b298:	7dfb      	ldrb	r3, [r7, #23]
 801b29a:	2b01      	cmp	r3, #1
 801b29c:	d102      	bne.n	801b2a4 <create_chain+0x122>
 801b29e:	f04f 33ff 	mov.w	r3, #4294967295
 801b2a2:	e000      	b.n	801b2a6 <create_chain+0x124>
 801b2a4:	2301      	movs	r3, #1
 801b2a6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801b2a8:	69fb      	ldr	r3, [r7, #28]
}
 801b2aa:	4618      	mov	r0, r3
 801b2ac:	3720      	adds	r7, #32
 801b2ae:	46bd      	mov	sp, r7
 801b2b0:	bd80      	pop	{r7, pc}

0801b2b2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801b2b2:	b480      	push	{r7}
 801b2b4:	b087      	sub	sp, #28
 801b2b6:	af00      	add	r7, sp, #0
 801b2b8:	6078      	str	r0, [r7, #4]
 801b2ba:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	681b      	ldr	r3, [r3, #0]
 801b2c0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b2c6:	3304      	adds	r3, #4
 801b2c8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801b2ca:	683b      	ldr	r3, [r7, #0]
 801b2cc:	0a5b      	lsrs	r3, r3, #9
 801b2ce:	68fa      	ldr	r2, [r7, #12]
 801b2d0:	8952      	ldrh	r2, [r2, #10]
 801b2d2:	fbb3 f3f2 	udiv	r3, r3, r2
 801b2d6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b2d8:	693b      	ldr	r3, [r7, #16]
 801b2da:	1d1a      	adds	r2, r3, #4
 801b2dc:	613a      	str	r2, [r7, #16]
 801b2de:	681b      	ldr	r3, [r3, #0]
 801b2e0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801b2e2:	68bb      	ldr	r3, [r7, #8]
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	d101      	bne.n	801b2ec <clmt_clust+0x3a>
 801b2e8:	2300      	movs	r3, #0
 801b2ea:	e010      	b.n	801b30e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801b2ec:	697a      	ldr	r2, [r7, #20]
 801b2ee:	68bb      	ldr	r3, [r7, #8]
 801b2f0:	429a      	cmp	r2, r3
 801b2f2:	d307      	bcc.n	801b304 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801b2f4:	697a      	ldr	r2, [r7, #20]
 801b2f6:	68bb      	ldr	r3, [r7, #8]
 801b2f8:	1ad3      	subs	r3, r2, r3
 801b2fa:	617b      	str	r3, [r7, #20]
 801b2fc:	693b      	ldr	r3, [r7, #16]
 801b2fe:	3304      	adds	r3, #4
 801b300:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b302:	e7e9      	b.n	801b2d8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801b304:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801b306:	693b      	ldr	r3, [r7, #16]
 801b308:	681a      	ldr	r2, [r3, #0]
 801b30a:	697b      	ldr	r3, [r7, #20]
 801b30c:	4413      	add	r3, r2
}
 801b30e:	4618      	mov	r0, r3
 801b310:	371c      	adds	r7, #28
 801b312:	46bd      	mov	sp, r7
 801b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b318:	4770      	bx	lr

0801b31a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801b31a:	b580      	push	{r7, lr}
 801b31c:	b086      	sub	sp, #24
 801b31e:	af00      	add	r7, sp, #0
 801b320:	6078      	str	r0, [r7, #4]
 801b322:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801b32a:	683b      	ldr	r3, [r7, #0]
 801b32c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b330:	d204      	bcs.n	801b33c <dir_sdi+0x22>
 801b332:	683b      	ldr	r3, [r7, #0]
 801b334:	f003 031f 	and.w	r3, r3, #31
 801b338:	2b00      	cmp	r3, #0
 801b33a:	d001      	beq.n	801b340 <dir_sdi+0x26>
		return FR_INT_ERR;
 801b33c:	2302      	movs	r3, #2
 801b33e:	e063      	b.n	801b408 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	683a      	ldr	r2, [r7, #0]
 801b344:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	689b      	ldr	r3, [r3, #8]
 801b34a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801b34c:	697b      	ldr	r3, [r7, #20]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d106      	bne.n	801b360 <dir_sdi+0x46>
 801b352:	693b      	ldr	r3, [r7, #16]
 801b354:	781b      	ldrb	r3, [r3, #0]
 801b356:	2b02      	cmp	r3, #2
 801b358:	d902      	bls.n	801b360 <dir_sdi+0x46>
		clst = fs->dirbase;
 801b35a:	693b      	ldr	r3, [r7, #16]
 801b35c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b35e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801b360:	697b      	ldr	r3, [r7, #20]
 801b362:	2b00      	cmp	r3, #0
 801b364:	d10c      	bne.n	801b380 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801b366:	683b      	ldr	r3, [r7, #0]
 801b368:	095b      	lsrs	r3, r3, #5
 801b36a:	693a      	ldr	r2, [r7, #16]
 801b36c:	8912      	ldrh	r2, [r2, #8]
 801b36e:	4293      	cmp	r3, r2
 801b370:	d301      	bcc.n	801b376 <dir_sdi+0x5c>
 801b372:	2302      	movs	r3, #2
 801b374:	e048      	b.n	801b408 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801b376:	693b      	ldr	r3, [r7, #16]
 801b378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	61da      	str	r2, [r3, #28]
 801b37e:	e029      	b.n	801b3d4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801b380:	693b      	ldr	r3, [r7, #16]
 801b382:	895b      	ldrh	r3, [r3, #10]
 801b384:	025b      	lsls	r3, r3, #9
 801b386:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b388:	e019      	b.n	801b3be <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	6979      	ldr	r1, [r7, #20]
 801b38e:	4618      	mov	r0, r3
 801b390:	f7ff fd01 	bl	801ad96 <get_fat>
 801b394:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b396:	697b      	ldr	r3, [r7, #20]
 801b398:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b39c:	d101      	bne.n	801b3a2 <dir_sdi+0x88>
 801b39e:	2301      	movs	r3, #1
 801b3a0:	e032      	b.n	801b408 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801b3a2:	697b      	ldr	r3, [r7, #20]
 801b3a4:	2b01      	cmp	r3, #1
 801b3a6:	d904      	bls.n	801b3b2 <dir_sdi+0x98>
 801b3a8:	693b      	ldr	r3, [r7, #16]
 801b3aa:	695b      	ldr	r3, [r3, #20]
 801b3ac:	697a      	ldr	r2, [r7, #20]
 801b3ae:	429a      	cmp	r2, r3
 801b3b0:	d301      	bcc.n	801b3b6 <dir_sdi+0x9c>
 801b3b2:	2302      	movs	r3, #2
 801b3b4:	e028      	b.n	801b408 <dir_sdi+0xee>
			ofs -= csz;
 801b3b6:	683a      	ldr	r2, [r7, #0]
 801b3b8:	68fb      	ldr	r3, [r7, #12]
 801b3ba:	1ad3      	subs	r3, r2, r3
 801b3bc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b3be:	683a      	ldr	r2, [r7, #0]
 801b3c0:	68fb      	ldr	r3, [r7, #12]
 801b3c2:	429a      	cmp	r2, r3
 801b3c4:	d2e1      	bcs.n	801b38a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801b3c6:	6979      	ldr	r1, [r7, #20]
 801b3c8:	6938      	ldr	r0, [r7, #16]
 801b3ca:	f7ff fcc5 	bl	801ad58 <clust2sect>
 801b3ce:	4602      	mov	r2, r0
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	697a      	ldr	r2, [r7, #20]
 801b3d8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	69db      	ldr	r3, [r3, #28]
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d101      	bne.n	801b3e6 <dir_sdi+0xcc>
 801b3e2:	2302      	movs	r3, #2
 801b3e4:	e010      	b.n	801b408 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	69da      	ldr	r2, [r3, #28]
 801b3ea:	683b      	ldr	r3, [r7, #0]
 801b3ec:	0a5b      	lsrs	r3, r3, #9
 801b3ee:	441a      	add	r2, r3
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801b3f4:	693b      	ldr	r3, [r7, #16]
 801b3f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b3fa:	683b      	ldr	r3, [r7, #0]
 801b3fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b400:	441a      	add	r2, r3
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b406:	2300      	movs	r3, #0
}
 801b408:	4618      	mov	r0, r3
 801b40a:	3718      	adds	r7, #24
 801b40c:	46bd      	mov	sp, r7
 801b40e:	bd80      	pop	{r7, pc}

0801b410 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801b410:	b580      	push	{r7, lr}
 801b412:	b086      	sub	sp, #24
 801b414:	af00      	add	r7, sp, #0
 801b416:	6078      	str	r0, [r7, #4]
 801b418:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	681b      	ldr	r3, [r3, #0]
 801b41e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	695b      	ldr	r3, [r3, #20]
 801b424:	3320      	adds	r3, #32
 801b426:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	69db      	ldr	r3, [r3, #28]
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	d003      	beq.n	801b438 <dir_next+0x28>
 801b430:	68bb      	ldr	r3, [r7, #8]
 801b432:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b436:	d301      	bcc.n	801b43c <dir_next+0x2c>
 801b438:	2304      	movs	r3, #4
 801b43a:	e0aa      	b.n	801b592 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801b43c:	68bb      	ldr	r3, [r7, #8]
 801b43e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b442:	2b00      	cmp	r3, #0
 801b444:	f040 8098 	bne.w	801b578 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	69db      	ldr	r3, [r3, #28]
 801b44c:	1c5a      	adds	r2, r3, #1
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	699b      	ldr	r3, [r3, #24]
 801b456:	2b00      	cmp	r3, #0
 801b458:	d10b      	bne.n	801b472 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801b45a:	68bb      	ldr	r3, [r7, #8]
 801b45c:	095b      	lsrs	r3, r3, #5
 801b45e:	68fa      	ldr	r2, [r7, #12]
 801b460:	8912      	ldrh	r2, [r2, #8]
 801b462:	4293      	cmp	r3, r2
 801b464:	f0c0 8088 	bcc.w	801b578 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	2200      	movs	r2, #0
 801b46c:	61da      	str	r2, [r3, #28]
 801b46e:	2304      	movs	r3, #4
 801b470:	e08f      	b.n	801b592 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801b472:	68bb      	ldr	r3, [r7, #8]
 801b474:	0a5b      	lsrs	r3, r3, #9
 801b476:	68fa      	ldr	r2, [r7, #12]
 801b478:	8952      	ldrh	r2, [r2, #10]
 801b47a:	3a01      	subs	r2, #1
 801b47c:	4013      	ands	r3, r2
 801b47e:	2b00      	cmp	r3, #0
 801b480:	d17a      	bne.n	801b578 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801b482:	687a      	ldr	r2, [r7, #4]
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	699b      	ldr	r3, [r3, #24]
 801b488:	4619      	mov	r1, r3
 801b48a:	4610      	mov	r0, r2
 801b48c:	f7ff fc83 	bl	801ad96 <get_fat>
 801b490:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801b492:	697b      	ldr	r3, [r7, #20]
 801b494:	2b01      	cmp	r3, #1
 801b496:	d801      	bhi.n	801b49c <dir_next+0x8c>
 801b498:	2302      	movs	r3, #2
 801b49a:	e07a      	b.n	801b592 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801b49c:	697b      	ldr	r3, [r7, #20]
 801b49e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b4a2:	d101      	bne.n	801b4a8 <dir_next+0x98>
 801b4a4:	2301      	movs	r3, #1
 801b4a6:	e074      	b.n	801b592 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801b4a8:	68fb      	ldr	r3, [r7, #12]
 801b4aa:	695b      	ldr	r3, [r3, #20]
 801b4ac:	697a      	ldr	r2, [r7, #20]
 801b4ae:	429a      	cmp	r2, r3
 801b4b0:	d358      	bcc.n	801b564 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801b4b2:	683b      	ldr	r3, [r7, #0]
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	d104      	bne.n	801b4c2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	2200      	movs	r2, #0
 801b4bc:	61da      	str	r2, [r3, #28]
 801b4be:	2304      	movs	r3, #4
 801b4c0:	e067      	b.n	801b592 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801b4c2:	687a      	ldr	r2, [r7, #4]
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	699b      	ldr	r3, [r3, #24]
 801b4c8:	4619      	mov	r1, r3
 801b4ca:	4610      	mov	r0, r2
 801b4cc:	f7ff fe59 	bl	801b182 <create_chain>
 801b4d0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801b4d2:	697b      	ldr	r3, [r7, #20]
 801b4d4:	2b00      	cmp	r3, #0
 801b4d6:	d101      	bne.n	801b4dc <dir_next+0xcc>
 801b4d8:	2307      	movs	r3, #7
 801b4da:	e05a      	b.n	801b592 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801b4dc:	697b      	ldr	r3, [r7, #20]
 801b4de:	2b01      	cmp	r3, #1
 801b4e0:	d101      	bne.n	801b4e6 <dir_next+0xd6>
 801b4e2:	2302      	movs	r3, #2
 801b4e4:	e055      	b.n	801b592 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b4e6:	697b      	ldr	r3, [r7, #20]
 801b4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b4ec:	d101      	bne.n	801b4f2 <dir_next+0xe2>
 801b4ee:	2301      	movs	r3, #1
 801b4f0:	e04f      	b.n	801b592 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801b4f2:	68f8      	ldr	r0, [r7, #12]
 801b4f4:	f7ff fb50 	bl	801ab98 <sync_window>
 801b4f8:	4603      	mov	r3, r0
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	d001      	beq.n	801b502 <dir_next+0xf2>
 801b4fe:	2301      	movs	r3, #1
 801b500:	e047      	b.n	801b592 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801b502:	68fb      	ldr	r3, [r7, #12]
 801b504:	3330      	adds	r3, #48	@ 0x30
 801b506:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b50a:	2100      	movs	r1, #0
 801b50c:	4618      	mov	r0, r3
 801b50e:	f7ff f97a 	bl	801a806 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b512:	2300      	movs	r3, #0
 801b514:	613b      	str	r3, [r7, #16]
 801b516:	6979      	ldr	r1, [r7, #20]
 801b518:	68f8      	ldr	r0, [r7, #12]
 801b51a:	f7ff fc1d 	bl	801ad58 <clust2sect>
 801b51e:	4602      	mov	r2, r0
 801b520:	68fb      	ldr	r3, [r7, #12]
 801b522:	62da      	str	r2, [r3, #44]	@ 0x2c
 801b524:	e012      	b.n	801b54c <dir_next+0x13c>
						fs->wflag = 1;
 801b526:	68fb      	ldr	r3, [r7, #12]
 801b528:	2201      	movs	r2, #1
 801b52a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801b52c:	68f8      	ldr	r0, [r7, #12]
 801b52e:	f7ff fb33 	bl	801ab98 <sync_window>
 801b532:	4603      	mov	r3, r0
 801b534:	2b00      	cmp	r3, #0
 801b536:	d001      	beq.n	801b53c <dir_next+0x12c>
 801b538:	2301      	movs	r3, #1
 801b53a:	e02a      	b.n	801b592 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b53c:	693b      	ldr	r3, [r7, #16]
 801b53e:	3301      	adds	r3, #1
 801b540:	613b      	str	r3, [r7, #16]
 801b542:	68fb      	ldr	r3, [r7, #12]
 801b544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b546:	1c5a      	adds	r2, r3, #1
 801b548:	68fb      	ldr	r3, [r7, #12]
 801b54a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801b54c:	68fb      	ldr	r3, [r7, #12]
 801b54e:	895b      	ldrh	r3, [r3, #10]
 801b550:	461a      	mov	r2, r3
 801b552:	693b      	ldr	r3, [r7, #16]
 801b554:	4293      	cmp	r3, r2
 801b556:	d3e6      	bcc.n	801b526 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801b558:	68fb      	ldr	r3, [r7, #12]
 801b55a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b55c:	693b      	ldr	r3, [r7, #16]
 801b55e:	1ad2      	subs	r2, r2, r3
 801b560:	68fb      	ldr	r3, [r7, #12]
 801b562:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	697a      	ldr	r2, [r7, #20]
 801b568:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801b56a:	6979      	ldr	r1, [r7, #20]
 801b56c:	68f8      	ldr	r0, [r7, #12]
 801b56e:	f7ff fbf3 	bl	801ad58 <clust2sect>
 801b572:	4602      	mov	r2, r0
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	68ba      	ldr	r2, [r7, #8]
 801b57c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801b57e:	68fb      	ldr	r3, [r7, #12]
 801b580:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b584:	68bb      	ldr	r3, [r7, #8]
 801b586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b58a:	441a      	add	r2, r3
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b590:	2300      	movs	r3, #0
}
 801b592:	4618      	mov	r0, r3
 801b594:	3718      	adds	r7, #24
 801b596:	46bd      	mov	sp, r7
 801b598:	bd80      	pop	{r7, pc}

0801b59a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801b59a:	b580      	push	{r7, lr}
 801b59c:	b086      	sub	sp, #24
 801b59e:	af00      	add	r7, sp, #0
 801b5a0:	6078      	str	r0, [r7, #4]
 801b5a2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	681b      	ldr	r3, [r3, #0]
 801b5a8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801b5aa:	2100      	movs	r1, #0
 801b5ac:	6878      	ldr	r0, [r7, #4]
 801b5ae:	f7ff feb4 	bl	801b31a <dir_sdi>
 801b5b2:	4603      	mov	r3, r0
 801b5b4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801b5b6:	7dfb      	ldrb	r3, [r7, #23]
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d12b      	bne.n	801b614 <dir_alloc+0x7a>
		n = 0;
 801b5bc:	2300      	movs	r3, #0
 801b5be:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	69db      	ldr	r3, [r3, #28]
 801b5c4:	4619      	mov	r1, r3
 801b5c6:	68f8      	ldr	r0, [r7, #12]
 801b5c8:	f7ff fb2a 	bl	801ac20 <move_window>
 801b5cc:	4603      	mov	r3, r0
 801b5ce:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801b5d0:	7dfb      	ldrb	r3, [r7, #23]
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d11d      	bne.n	801b612 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	6a1b      	ldr	r3, [r3, #32]
 801b5da:	781b      	ldrb	r3, [r3, #0]
 801b5dc:	2be5      	cmp	r3, #229	@ 0xe5
 801b5de:	d004      	beq.n	801b5ea <dir_alloc+0x50>
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	6a1b      	ldr	r3, [r3, #32]
 801b5e4:	781b      	ldrb	r3, [r3, #0]
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	d107      	bne.n	801b5fa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801b5ea:	693b      	ldr	r3, [r7, #16]
 801b5ec:	3301      	adds	r3, #1
 801b5ee:	613b      	str	r3, [r7, #16]
 801b5f0:	693a      	ldr	r2, [r7, #16]
 801b5f2:	683b      	ldr	r3, [r7, #0]
 801b5f4:	429a      	cmp	r2, r3
 801b5f6:	d102      	bne.n	801b5fe <dir_alloc+0x64>
 801b5f8:	e00c      	b.n	801b614 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801b5fa:	2300      	movs	r3, #0
 801b5fc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801b5fe:	2101      	movs	r1, #1
 801b600:	6878      	ldr	r0, [r7, #4]
 801b602:	f7ff ff05 	bl	801b410 <dir_next>
 801b606:	4603      	mov	r3, r0
 801b608:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801b60a:	7dfb      	ldrb	r3, [r7, #23]
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	d0d7      	beq.n	801b5c0 <dir_alloc+0x26>
 801b610:	e000      	b.n	801b614 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801b612:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801b614:	7dfb      	ldrb	r3, [r7, #23]
 801b616:	2b04      	cmp	r3, #4
 801b618:	d101      	bne.n	801b61e <dir_alloc+0x84>
 801b61a:	2307      	movs	r3, #7
 801b61c:	75fb      	strb	r3, [r7, #23]
	return res;
 801b61e:	7dfb      	ldrb	r3, [r7, #23]
}
 801b620:	4618      	mov	r0, r3
 801b622:	3718      	adds	r7, #24
 801b624:	46bd      	mov	sp, r7
 801b626:	bd80      	pop	{r7, pc}

0801b628 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801b628:	b580      	push	{r7, lr}
 801b62a:	b084      	sub	sp, #16
 801b62c:	af00      	add	r7, sp, #0
 801b62e:	6078      	str	r0, [r7, #4]
 801b630:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801b632:	683b      	ldr	r3, [r7, #0]
 801b634:	331a      	adds	r3, #26
 801b636:	4618      	mov	r0, r3
 801b638:	f7ff f842 	bl	801a6c0 <ld_word>
 801b63c:	4603      	mov	r3, r0
 801b63e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	781b      	ldrb	r3, [r3, #0]
 801b644:	2b03      	cmp	r3, #3
 801b646:	d109      	bne.n	801b65c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801b648:	683b      	ldr	r3, [r7, #0]
 801b64a:	3314      	adds	r3, #20
 801b64c:	4618      	mov	r0, r3
 801b64e:	f7ff f837 	bl	801a6c0 <ld_word>
 801b652:	4603      	mov	r3, r0
 801b654:	041b      	lsls	r3, r3, #16
 801b656:	68fa      	ldr	r2, [r7, #12]
 801b658:	4313      	orrs	r3, r2
 801b65a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801b65c:	68fb      	ldr	r3, [r7, #12]
}
 801b65e:	4618      	mov	r0, r3
 801b660:	3710      	adds	r7, #16
 801b662:	46bd      	mov	sp, r7
 801b664:	bd80      	pop	{r7, pc}

0801b666 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801b666:	b580      	push	{r7, lr}
 801b668:	b084      	sub	sp, #16
 801b66a:	af00      	add	r7, sp, #0
 801b66c:	60f8      	str	r0, [r7, #12]
 801b66e:	60b9      	str	r1, [r7, #8]
 801b670:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801b672:	68bb      	ldr	r3, [r7, #8]
 801b674:	331a      	adds	r3, #26
 801b676:	687a      	ldr	r2, [r7, #4]
 801b678:	b292      	uxth	r2, r2
 801b67a:	4611      	mov	r1, r2
 801b67c:	4618      	mov	r0, r3
 801b67e:	f7ff f85a 	bl	801a736 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801b682:	68fb      	ldr	r3, [r7, #12]
 801b684:	781b      	ldrb	r3, [r3, #0]
 801b686:	2b03      	cmp	r3, #3
 801b688:	d109      	bne.n	801b69e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801b68a:	68bb      	ldr	r3, [r7, #8]
 801b68c:	f103 0214 	add.w	r2, r3, #20
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	0c1b      	lsrs	r3, r3, #16
 801b694:	b29b      	uxth	r3, r3
 801b696:	4619      	mov	r1, r3
 801b698:	4610      	mov	r0, r2
 801b69a:	f7ff f84c 	bl	801a736 <st_word>
	}
}
 801b69e:	bf00      	nop
 801b6a0:	3710      	adds	r7, #16
 801b6a2:	46bd      	mov	sp, r7
 801b6a4:	bd80      	pop	{r7, pc}

0801b6a6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801b6a6:	b580      	push	{r7, lr}
 801b6a8:	b086      	sub	sp, #24
 801b6aa:	af00      	add	r7, sp, #0
 801b6ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	681b      	ldr	r3, [r3, #0]
 801b6b2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801b6b4:	2100      	movs	r1, #0
 801b6b6:	6878      	ldr	r0, [r7, #4]
 801b6b8:	f7ff fe2f 	bl	801b31a <dir_sdi>
 801b6bc:	4603      	mov	r3, r0
 801b6be:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801b6c0:	7dfb      	ldrb	r3, [r7, #23]
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	d001      	beq.n	801b6ca <dir_find+0x24>
 801b6c6:	7dfb      	ldrb	r3, [r7, #23]
 801b6c8:	e03e      	b.n	801b748 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	69db      	ldr	r3, [r3, #28]
 801b6ce:	4619      	mov	r1, r3
 801b6d0:	6938      	ldr	r0, [r7, #16]
 801b6d2:	f7ff faa5 	bl	801ac20 <move_window>
 801b6d6:	4603      	mov	r3, r0
 801b6d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801b6da:	7dfb      	ldrb	r3, [r7, #23]
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d12f      	bne.n	801b740 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	6a1b      	ldr	r3, [r3, #32]
 801b6e4:	781b      	ldrb	r3, [r3, #0]
 801b6e6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801b6e8:	7bfb      	ldrb	r3, [r7, #15]
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d102      	bne.n	801b6f4 <dir_find+0x4e>
 801b6ee:	2304      	movs	r3, #4
 801b6f0:	75fb      	strb	r3, [r7, #23]
 801b6f2:	e028      	b.n	801b746 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	6a1b      	ldr	r3, [r3, #32]
 801b6f8:	330b      	adds	r3, #11
 801b6fa:	781b      	ldrb	r3, [r3, #0]
 801b6fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b700:	b2da      	uxtb	r2, r3
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	6a1b      	ldr	r3, [r3, #32]
 801b70a:	330b      	adds	r3, #11
 801b70c:	781b      	ldrb	r3, [r3, #0]
 801b70e:	f003 0308 	and.w	r3, r3, #8
 801b712:	2b00      	cmp	r3, #0
 801b714:	d10a      	bne.n	801b72c <dir_find+0x86>
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	6a18      	ldr	r0, [r3, #32]
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	3324      	adds	r3, #36	@ 0x24
 801b71e:	220b      	movs	r2, #11
 801b720:	4619      	mov	r1, r3
 801b722:	f7ff f88b 	bl	801a83c <mem_cmp>
 801b726:	4603      	mov	r3, r0
 801b728:	2b00      	cmp	r3, #0
 801b72a:	d00b      	beq.n	801b744 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801b72c:	2100      	movs	r1, #0
 801b72e:	6878      	ldr	r0, [r7, #4]
 801b730:	f7ff fe6e 	bl	801b410 <dir_next>
 801b734:	4603      	mov	r3, r0
 801b736:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801b738:	7dfb      	ldrb	r3, [r7, #23]
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	d0c5      	beq.n	801b6ca <dir_find+0x24>
 801b73e:	e002      	b.n	801b746 <dir_find+0xa0>
		if (res != FR_OK) break;
 801b740:	bf00      	nop
 801b742:	e000      	b.n	801b746 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801b744:	bf00      	nop

	return res;
 801b746:	7dfb      	ldrb	r3, [r7, #23]
}
 801b748:	4618      	mov	r0, r3
 801b74a:	3718      	adds	r7, #24
 801b74c:	46bd      	mov	sp, r7
 801b74e:	bd80      	pop	{r7, pc}

0801b750 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801b750:	b580      	push	{r7, lr}
 801b752:	b084      	sub	sp, #16
 801b754:	af00      	add	r7, sp, #0
 801b756:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	681b      	ldr	r3, [r3, #0]
 801b75c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801b75e:	2101      	movs	r1, #1
 801b760:	6878      	ldr	r0, [r7, #4]
 801b762:	f7ff ff1a 	bl	801b59a <dir_alloc>
 801b766:	4603      	mov	r3, r0
 801b768:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801b76a:	7bfb      	ldrb	r3, [r7, #15]
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	d11c      	bne.n	801b7aa <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	69db      	ldr	r3, [r3, #28]
 801b774:	4619      	mov	r1, r3
 801b776:	68b8      	ldr	r0, [r7, #8]
 801b778:	f7ff fa52 	bl	801ac20 <move_window>
 801b77c:	4603      	mov	r3, r0
 801b77e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801b780:	7bfb      	ldrb	r3, [r7, #15]
 801b782:	2b00      	cmp	r3, #0
 801b784:	d111      	bne.n	801b7aa <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	6a1b      	ldr	r3, [r3, #32]
 801b78a:	2220      	movs	r2, #32
 801b78c:	2100      	movs	r1, #0
 801b78e:	4618      	mov	r0, r3
 801b790:	f7ff f839 	bl	801a806 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	6a18      	ldr	r0, [r3, #32]
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	3324      	adds	r3, #36	@ 0x24
 801b79c:	220b      	movs	r2, #11
 801b79e:	4619      	mov	r1, r3
 801b7a0:	f7ff f810 	bl	801a7c4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801b7a4:	68bb      	ldr	r3, [r7, #8]
 801b7a6:	2201      	movs	r2, #1
 801b7a8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801b7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 801b7ac:	4618      	mov	r0, r3
 801b7ae:	3710      	adds	r7, #16
 801b7b0:	46bd      	mov	sp, r7
 801b7b2:	bd80      	pop	{r7, pc}

0801b7b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801b7b4:	b580      	push	{r7, lr}
 801b7b6:	b088      	sub	sp, #32
 801b7b8:	af00      	add	r7, sp, #0
 801b7ba:	6078      	str	r0, [r7, #4]
 801b7bc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801b7be:	683b      	ldr	r3, [r7, #0]
 801b7c0:	681b      	ldr	r3, [r3, #0]
 801b7c2:	60fb      	str	r3, [r7, #12]
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	3324      	adds	r3, #36	@ 0x24
 801b7c8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801b7ca:	220b      	movs	r2, #11
 801b7cc:	2120      	movs	r1, #32
 801b7ce:	68b8      	ldr	r0, [r7, #8]
 801b7d0:	f7ff f819 	bl	801a806 <mem_set>
	si = i = 0; ni = 8;
 801b7d4:	2300      	movs	r3, #0
 801b7d6:	613b      	str	r3, [r7, #16]
 801b7d8:	693b      	ldr	r3, [r7, #16]
 801b7da:	61fb      	str	r3, [r7, #28]
 801b7dc:	2308      	movs	r3, #8
 801b7de:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801b7e0:	69fb      	ldr	r3, [r7, #28]
 801b7e2:	1c5a      	adds	r2, r3, #1
 801b7e4:	61fa      	str	r2, [r7, #28]
 801b7e6:	68fa      	ldr	r2, [r7, #12]
 801b7e8:	4413      	add	r3, r2
 801b7ea:	781b      	ldrb	r3, [r3, #0]
 801b7ec:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801b7ee:	7efb      	ldrb	r3, [r7, #27]
 801b7f0:	2b20      	cmp	r3, #32
 801b7f2:	d94e      	bls.n	801b892 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801b7f4:	7efb      	ldrb	r3, [r7, #27]
 801b7f6:	2b2f      	cmp	r3, #47	@ 0x2f
 801b7f8:	d006      	beq.n	801b808 <create_name+0x54>
 801b7fa:	7efb      	ldrb	r3, [r7, #27]
 801b7fc:	2b5c      	cmp	r3, #92	@ 0x5c
 801b7fe:	d110      	bne.n	801b822 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801b800:	e002      	b.n	801b808 <create_name+0x54>
 801b802:	69fb      	ldr	r3, [r7, #28]
 801b804:	3301      	adds	r3, #1
 801b806:	61fb      	str	r3, [r7, #28]
 801b808:	68fa      	ldr	r2, [r7, #12]
 801b80a:	69fb      	ldr	r3, [r7, #28]
 801b80c:	4413      	add	r3, r2
 801b80e:	781b      	ldrb	r3, [r3, #0]
 801b810:	2b2f      	cmp	r3, #47	@ 0x2f
 801b812:	d0f6      	beq.n	801b802 <create_name+0x4e>
 801b814:	68fa      	ldr	r2, [r7, #12]
 801b816:	69fb      	ldr	r3, [r7, #28]
 801b818:	4413      	add	r3, r2
 801b81a:	781b      	ldrb	r3, [r3, #0]
 801b81c:	2b5c      	cmp	r3, #92	@ 0x5c
 801b81e:	d0f0      	beq.n	801b802 <create_name+0x4e>
			break;
 801b820:	e038      	b.n	801b894 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801b822:	7efb      	ldrb	r3, [r7, #27]
 801b824:	2b2e      	cmp	r3, #46	@ 0x2e
 801b826:	d003      	beq.n	801b830 <create_name+0x7c>
 801b828:	693a      	ldr	r2, [r7, #16]
 801b82a:	697b      	ldr	r3, [r7, #20]
 801b82c:	429a      	cmp	r2, r3
 801b82e:	d30c      	bcc.n	801b84a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801b830:	697b      	ldr	r3, [r7, #20]
 801b832:	2b0b      	cmp	r3, #11
 801b834:	d002      	beq.n	801b83c <create_name+0x88>
 801b836:	7efb      	ldrb	r3, [r7, #27]
 801b838:	2b2e      	cmp	r3, #46	@ 0x2e
 801b83a:	d001      	beq.n	801b840 <create_name+0x8c>
 801b83c:	2306      	movs	r3, #6
 801b83e:	e044      	b.n	801b8ca <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801b840:	2308      	movs	r3, #8
 801b842:	613b      	str	r3, [r7, #16]
 801b844:	230b      	movs	r3, #11
 801b846:	617b      	str	r3, [r7, #20]
			continue;
 801b848:	e022      	b.n	801b890 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801b84a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b84e:	2b00      	cmp	r3, #0
 801b850:	da04      	bge.n	801b85c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801b852:	7efb      	ldrb	r3, [r7, #27]
 801b854:	3b80      	subs	r3, #128	@ 0x80
 801b856:	4a1f      	ldr	r2, [pc, #124]	@ (801b8d4 <create_name+0x120>)
 801b858:	5cd3      	ldrb	r3, [r2, r3]
 801b85a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801b85c:	7efb      	ldrb	r3, [r7, #27]
 801b85e:	4619      	mov	r1, r3
 801b860:	481d      	ldr	r0, [pc, #116]	@ (801b8d8 <create_name+0x124>)
 801b862:	f7ff f812 	bl	801a88a <chk_chr>
 801b866:	4603      	mov	r3, r0
 801b868:	2b00      	cmp	r3, #0
 801b86a:	d001      	beq.n	801b870 <create_name+0xbc>
 801b86c:	2306      	movs	r3, #6
 801b86e:	e02c      	b.n	801b8ca <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801b870:	7efb      	ldrb	r3, [r7, #27]
 801b872:	2b60      	cmp	r3, #96	@ 0x60
 801b874:	d905      	bls.n	801b882 <create_name+0xce>
 801b876:	7efb      	ldrb	r3, [r7, #27]
 801b878:	2b7a      	cmp	r3, #122	@ 0x7a
 801b87a:	d802      	bhi.n	801b882 <create_name+0xce>
 801b87c:	7efb      	ldrb	r3, [r7, #27]
 801b87e:	3b20      	subs	r3, #32
 801b880:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801b882:	693b      	ldr	r3, [r7, #16]
 801b884:	1c5a      	adds	r2, r3, #1
 801b886:	613a      	str	r2, [r7, #16]
 801b888:	68ba      	ldr	r2, [r7, #8]
 801b88a:	4413      	add	r3, r2
 801b88c:	7efa      	ldrb	r2, [r7, #27]
 801b88e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801b890:	e7a6      	b.n	801b7e0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801b892:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801b894:	68fa      	ldr	r2, [r7, #12]
 801b896:	69fb      	ldr	r3, [r7, #28]
 801b898:	441a      	add	r2, r3
 801b89a:	683b      	ldr	r3, [r7, #0]
 801b89c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801b89e:	693b      	ldr	r3, [r7, #16]
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d101      	bne.n	801b8a8 <create_name+0xf4>
 801b8a4:	2306      	movs	r3, #6
 801b8a6:	e010      	b.n	801b8ca <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801b8a8:	68bb      	ldr	r3, [r7, #8]
 801b8aa:	781b      	ldrb	r3, [r3, #0]
 801b8ac:	2be5      	cmp	r3, #229	@ 0xe5
 801b8ae:	d102      	bne.n	801b8b6 <create_name+0x102>
 801b8b0:	68bb      	ldr	r3, [r7, #8]
 801b8b2:	2205      	movs	r2, #5
 801b8b4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801b8b6:	7efb      	ldrb	r3, [r7, #27]
 801b8b8:	2b20      	cmp	r3, #32
 801b8ba:	d801      	bhi.n	801b8c0 <create_name+0x10c>
 801b8bc:	2204      	movs	r2, #4
 801b8be:	e000      	b.n	801b8c2 <create_name+0x10e>
 801b8c0:	2200      	movs	r2, #0
 801b8c2:	68bb      	ldr	r3, [r7, #8]
 801b8c4:	330b      	adds	r3, #11
 801b8c6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801b8c8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801b8ca:	4618      	mov	r0, r3
 801b8cc:	3720      	adds	r7, #32
 801b8ce:	46bd      	mov	sp, r7
 801b8d0:	bd80      	pop	{r7, pc}
 801b8d2:	bf00      	nop
 801b8d4:	0801ead0 	.word	0x0801ead0
 801b8d8:	0801e7cc 	.word	0x0801e7cc

0801b8dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801b8dc:	b580      	push	{r7, lr}
 801b8de:	b086      	sub	sp, #24
 801b8e0:	af00      	add	r7, sp, #0
 801b8e2:	6078      	str	r0, [r7, #4]
 801b8e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801b8e6:	687b      	ldr	r3, [r7, #4]
 801b8e8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801b8ea:	693b      	ldr	r3, [r7, #16]
 801b8ec:	681b      	ldr	r3, [r3, #0]
 801b8ee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801b8f0:	e002      	b.n	801b8f8 <follow_path+0x1c>
 801b8f2:	683b      	ldr	r3, [r7, #0]
 801b8f4:	3301      	adds	r3, #1
 801b8f6:	603b      	str	r3, [r7, #0]
 801b8f8:	683b      	ldr	r3, [r7, #0]
 801b8fa:	781b      	ldrb	r3, [r3, #0]
 801b8fc:	2b2f      	cmp	r3, #47	@ 0x2f
 801b8fe:	d0f8      	beq.n	801b8f2 <follow_path+0x16>
 801b900:	683b      	ldr	r3, [r7, #0]
 801b902:	781b      	ldrb	r3, [r3, #0]
 801b904:	2b5c      	cmp	r3, #92	@ 0x5c
 801b906:	d0f4      	beq.n	801b8f2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801b908:	693b      	ldr	r3, [r7, #16]
 801b90a:	2200      	movs	r2, #0
 801b90c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801b90e:	683b      	ldr	r3, [r7, #0]
 801b910:	781b      	ldrb	r3, [r3, #0]
 801b912:	2b1f      	cmp	r3, #31
 801b914:	d80a      	bhi.n	801b92c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801b916:	687b      	ldr	r3, [r7, #4]
 801b918:	2280      	movs	r2, #128	@ 0x80
 801b91a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801b91e:	2100      	movs	r1, #0
 801b920:	6878      	ldr	r0, [r7, #4]
 801b922:	f7ff fcfa 	bl	801b31a <dir_sdi>
 801b926:	4603      	mov	r3, r0
 801b928:	75fb      	strb	r3, [r7, #23]
 801b92a:	e043      	b.n	801b9b4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801b92c:	463b      	mov	r3, r7
 801b92e:	4619      	mov	r1, r3
 801b930:	6878      	ldr	r0, [r7, #4]
 801b932:	f7ff ff3f 	bl	801b7b4 <create_name>
 801b936:	4603      	mov	r3, r0
 801b938:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801b93a:	7dfb      	ldrb	r3, [r7, #23]
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	d134      	bne.n	801b9aa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801b940:	6878      	ldr	r0, [r7, #4]
 801b942:	f7ff feb0 	bl	801b6a6 <dir_find>
 801b946:	4603      	mov	r3, r0
 801b948:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801b950:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801b952:	7dfb      	ldrb	r3, [r7, #23]
 801b954:	2b00      	cmp	r3, #0
 801b956:	d00a      	beq.n	801b96e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801b958:	7dfb      	ldrb	r3, [r7, #23]
 801b95a:	2b04      	cmp	r3, #4
 801b95c:	d127      	bne.n	801b9ae <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801b95e:	7afb      	ldrb	r3, [r7, #11]
 801b960:	f003 0304 	and.w	r3, r3, #4
 801b964:	2b00      	cmp	r3, #0
 801b966:	d122      	bne.n	801b9ae <follow_path+0xd2>
 801b968:	2305      	movs	r3, #5
 801b96a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801b96c:	e01f      	b.n	801b9ae <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801b96e:	7afb      	ldrb	r3, [r7, #11]
 801b970:	f003 0304 	and.w	r3, r3, #4
 801b974:	2b00      	cmp	r3, #0
 801b976:	d11c      	bne.n	801b9b2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801b978:	693b      	ldr	r3, [r7, #16]
 801b97a:	799b      	ldrb	r3, [r3, #6]
 801b97c:	f003 0310 	and.w	r3, r3, #16
 801b980:	2b00      	cmp	r3, #0
 801b982:	d102      	bne.n	801b98a <follow_path+0xae>
				res = FR_NO_PATH; break;
 801b984:	2305      	movs	r3, #5
 801b986:	75fb      	strb	r3, [r7, #23]
 801b988:	e014      	b.n	801b9b4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801b98a:	68fb      	ldr	r3, [r7, #12]
 801b98c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	695b      	ldr	r3, [r3, #20]
 801b994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b998:	4413      	add	r3, r2
 801b99a:	4619      	mov	r1, r3
 801b99c:	68f8      	ldr	r0, [r7, #12]
 801b99e:	f7ff fe43 	bl	801b628 <ld_clust>
 801b9a2:	4602      	mov	r2, r0
 801b9a4:	693b      	ldr	r3, [r7, #16]
 801b9a6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801b9a8:	e7c0      	b.n	801b92c <follow_path+0x50>
			if (res != FR_OK) break;
 801b9aa:	bf00      	nop
 801b9ac:	e002      	b.n	801b9b4 <follow_path+0xd8>
				break;
 801b9ae:	bf00      	nop
 801b9b0:	e000      	b.n	801b9b4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801b9b2:	bf00      	nop
			}
		}
	}

	return res;
 801b9b4:	7dfb      	ldrb	r3, [r7, #23]
}
 801b9b6:	4618      	mov	r0, r3
 801b9b8:	3718      	adds	r7, #24
 801b9ba:	46bd      	mov	sp, r7
 801b9bc:	bd80      	pop	{r7, pc}

0801b9be <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801b9be:	b480      	push	{r7}
 801b9c0:	b087      	sub	sp, #28
 801b9c2:	af00      	add	r7, sp, #0
 801b9c4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801b9c6:	f04f 33ff 	mov.w	r3, #4294967295
 801b9ca:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	681b      	ldr	r3, [r3, #0]
 801b9d0:	2b00      	cmp	r3, #0
 801b9d2:	d031      	beq.n	801ba38 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	681b      	ldr	r3, [r3, #0]
 801b9d8:	617b      	str	r3, [r7, #20]
 801b9da:	e002      	b.n	801b9e2 <get_ldnumber+0x24>
 801b9dc:	697b      	ldr	r3, [r7, #20]
 801b9de:	3301      	adds	r3, #1
 801b9e0:	617b      	str	r3, [r7, #20]
 801b9e2:	697b      	ldr	r3, [r7, #20]
 801b9e4:	781b      	ldrb	r3, [r3, #0]
 801b9e6:	2b20      	cmp	r3, #32
 801b9e8:	d903      	bls.n	801b9f2 <get_ldnumber+0x34>
 801b9ea:	697b      	ldr	r3, [r7, #20]
 801b9ec:	781b      	ldrb	r3, [r3, #0]
 801b9ee:	2b3a      	cmp	r3, #58	@ 0x3a
 801b9f0:	d1f4      	bne.n	801b9dc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801b9f2:	697b      	ldr	r3, [r7, #20]
 801b9f4:	781b      	ldrb	r3, [r3, #0]
 801b9f6:	2b3a      	cmp	r3, #58	@ 0x3a
 801b9f8:	d11c      	bne.n	801ba34 <get_ldnumber+0x76>
			tp = *path;
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	681b      	ldr	r3, [r3, #0]
 801b9fe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801ba00:	68fb      	ldr	r3, [r7, #12]
 801ba02:	1c5a      	adds	r2, r3, #1
 801ba04:	60fa      	str	r2, [r7, #12]
 801ba06:	781b      	ldrb	r3, [r3, #0]
 801ba08:	3b30      	subs	r3, #48	@ 0x30
 801ba0a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801ba0c:	68bb      	ldr	r3, [r7, #8]
 801ba0e:	2b09      	cmp	r3, #9
 801ba10:	d80e      	bhi.n	801ba30 <get_ldnumber+0x72>
 801ba12:	68fa      	ldr	r2, [r7, #12]
 801ba14:	697b      	ldr	r3, [r7, #20]
 801ba16:	429a      	cmp	r2, r3
 801ba18:	d10a      	bne.n	801ba30 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801ba1a:	68bb      	ldr	r3, [r7, #8]
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d107      	bne.n	801ba30 <get_ldnumber+0x72>
					vol = (int)i;
 801ba20:	68bb      	ldr	r3, [r7, #8]
 801ba22:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801ba24:	697b      	ldr	r3, [r7, #20]
 801ba26:	3301      	adds	r3, #1
 801ba28:	617b      	str	r3, [r7, #20]
 801ba2a:	687b      	ldr	r3, [r7, #4]
 801ba2c:	697a      	ldr	r2, [r7, #20]
 801ba2e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801ba30:	693b      	ldr	r3, [r7, #16]
 801ba32:	e002      	b.n	801ba3a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801ba34:	2300      	movs	r3, #0
 801ba36:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801ba38:	693b      	ldr	r3, [r7, #16]
}
 801ba3a:	4618      	mov	r0, r3
 801ba3c:	371c      	adds	r7, #28
 801ba3e:	46bd      	mov	sp, r7
 801ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba44:	4770      	bx	lr
	...

0801ba48 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801ba48:	b580      	push	{r7, lr}
 801ba4a:	b082      	sub	sp, #8
 801ba4c:	af00      	add	r7, sp, #0
 801ba4e:	6078      	str	r0, [r7, #4]
 801ba50:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	2200      	movs	r2, #0
 801ba56:	70da      	strb	r2, [r3, #3]
 801ba58:	687b      	ldr	r3, [r7, #4]
 801ba5a:	f04f 32ff 	mov.w	r2, #4294967295
 801ba5e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801ba60:	6839      	ldr	r1, [r7, #0]
 801ba62:	6878      	ldr	r0, [r7, #4]
 801ba64:	f7ff f8dc 	bl	801ac20 <move_window>
 801ba68:	4603      	mov	r3, r0
 801ba6a:	2b00      	cmp	r3, #0
 801ba6c:	d001      	beq.n	801ba72 <check_fs+0x2a>
 801ba6e:	2304      	movs	r3, #4
 801ba70:	e038      	b.n	801bae4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801ba72:	687b      	ldr	r3, [r7, #4]
 801ba74:	3330      	adds	r3, #48	@ 0x30
 801ba76:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801ba7a:	4618      	mov	r0, r3
 801ba7c:	f7fe fe20 	bl	801a6c0 <ld_word>
 801ba80:	4603      	mov	r3, r0
 801ba82:	461a      	mov	r2, r3
 801ba84:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801ba88:	429a      	cmp	r2, r3
 801ba8a:	d001      	beq.n	801ba90 <check_fs+0x48>
 801ba8c:	2303      	movs	r3, #3
 801ba8e:	e029      	b.n	801bae4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801ba96:	2be9      	cmp	r3, #233	@ 0xe9
 801ba98:	d009      	beq.n	801baae <check_fs+0x66>
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801baa0:	2beb      	cmp	r3, #235	@ 0xeb
 801baa2:	d11e      	bne.n	801bae2 <check_fs+0x9a>
 801baa4:	687b      	ldr	r3, [r7, #4]
 801baa6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801baaa:	2b90      	cmp	r3, #144	@ 0x90
 801baac:	d119      	bne.n	801bae2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	3330      	adds	r3, #48	@ 0x30
 801bab2:	3336      	adds	r3, #54	@ 0x36
 801bab4:	4618      	mov	r0, r3
 801bab6:	f7fe fe1b 	bl	801a6f0 <ld_dword>
 801baba:	4603      	mov	r3, r0
 801babc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801bac0:	4a0a      	ldr	r2, [pc, #40]	@ (801baec <check_fs+0xa4>)
 801bac2:	4293      	cmp	r3, r2
 801bac4:	d101      	bne.n	801baca <check_fs+0x82>
 801bac6:	2300      	movs	r3, #0
 801bac8:	e00c      	b.n	801bae4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	3330      	adds	r3, #48	@ 0x30
 801bace:	3352      	adds	r3, #82	@ 0x52
 801bad0:	4618      	mov	r0, r3
 801bad2:	f7fe fe0d 	bl	801a6f0 <ld_dword>
 801bad6:	4603      	mov	r3, r0
 801bad8:	4a05      	ldr	r2, [pc, #20]	@ (801baf0 <check_fs+0xa8>)
 801bada:	4293      	cmp	r3, r2
 801badc:	d101      	bne.n	801bae2 <check_fs+0x9a>
 801bade:	2300      	movs	r3, #0
 801bae0:	e000      	b.n	801bae4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801bae2:	2302      	movs	r3, #2
}
 801bae4:	4618      	mov	r0, r3
 801bae6:	3708      	adds	r7, #8
 801bae8:	46bd      	mov	sp, r7
 801baea:	bd80      	pop	{r7, pc}
 801baec:	00544146 	.word	0x00544146
 801baf0:	33544146 	.word	0x33544146

0801baf4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801baf4:	b580      	push	{r7, lr}
 801baf6:	b096      	sub	sp, #88	@ 0x58
 801baf8:	af00      	add	r7, sp, #0
 801bafa:	60f8      	str	r0, [r7, #12]
 801bafc:	60b9      	str	r1, [r7, #8]
 801bafe:	4613      	mov	r3, r2
 801bb00:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801bb02:	68bb      	ldr	r3, [r7, #8]
 801bb04:	2200      	movs	r2, #0
 801bb06:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801bb08:	68f8      	ldr	r0, [r7, #12]
 801bb0a:	f7ff ff58 	bl	801b9be <get_ldnumber>
 801bb0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801bb10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	da01      	bge.n	801bb1a <find_volume+0x26>
 801bb16:	230b      	movs	r3, #11
 801bb18:	e22d      	b.n	801bf76 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801bb1a:	4aa1      	ldr	r2, [pc, #644]	@ (801bda0 <find_volume+0x2ac>)
 801bb1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bb1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bb22:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801bb24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d101      	bne.n	801bb2e <find_volume+0x3a>
 801bb2a:	230c      	movs	r3, #12
 801bb2c:	e223      	b.n	801bf76 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801bb2e:	68bb      	ldr	r3, [r7, #8]
 801bb30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801bb32:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801bb34:	79fb      	ldrb	r3, [r7, #7]
 801bb36:	f023 0301 	bic.w	r3, r3, #1
 801bb3a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801bb3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bb3e:	781b      	ldrb	r3, [r3, #0]
 801bb40:	2b00      	cmp	r3, #0
 801bb42:	d01a      	beq.n	801bb7a <find_volume+0x86>
		stat = disk_status(fs->drv);
 801bb44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bb46:	785b      	ldrb	r3, [r3, #1]
 801bb48:	4618      	mov	r0, r3
 801bb4a:	f7fe fd19 	bl	801a580 <disk_status>
 801bb4e:	4603      	mov	r3, r0
 801bb50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801bb54:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bb58:	f003 0301 	and.w	r3, r3, #1
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	d10c      	bne.n	801bb7a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801bb60:	79fb      	ldrb	r3, [r7, #7]
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	d007      	beq.n	801bb76 <find_volume+0x82>
 801bb66:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bb6a:	f003 0304 	and.w	r3, r3, #4
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	d001      	beq.n	801bb76 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801bb72:	230a      	movs	r3, #10
 801bb74:	e1ff      	b.n	801bf76 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801bb76:	2300      	movs	r3, #0
 801bb78:	e1fd      	b.n	801bf76 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801bb7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bb7c:	2200      	movs	r2, #0
 801bb7e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801bb80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bb82:	b2da      	uxtb	r2, r3
 801bb84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bb86:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801bb88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bb8a:	785b      	ldrb	r3, [r3, #1]
 801bb8c:	4618      	mov	r0, r3
 801bb8e:	f7fe fd11 	bl	801a5b4 <disk_initialize>
 801bb92:	4603      	mov	r3, r0
 801bb94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801bb98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bb9c:	f003 0301 	and.w	r3, r3, #1
 801bba0:	2b00      	cmp	r3, #0
 801bba2:	d001      	beq.n	801bba8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801bba4:	2303      	movs	r3, #3
 801bba6:	e1e6      	b.n	801bf76 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801bba8:	79fb      	ldrb	r3, [r7, #7]
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	d007      	beq.n	801bbbe <find_volume+0xca>
 801bbae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bbb2:	f003 0304 	and.w	r3, r3, #4
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d001      	beq.n	801bbbe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801bbba:	230a      	movs	r3, #10
 801bbbc:	e1db      	b.n	801bf76 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801bbbe:	2300      	movs	r3, #0
 801bbc0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801bbc2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801bbc4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801bbc6:	f7ff ff3f 	bl	801ba48 <check_fs>
 801bbca:	4603      	mov	r3, r0
 801bbcc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801bbd0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801bbd4:	2b02      	cmp	r3, #2
 801bbd6:	d149      	bne.n	801bc6c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801bbd8:	2300      	movs	r3, #0
 801bbda:	643b      	str	r3, [r7, #64]	@ 0x40
 801bbdc:	e01e      	b.n	801bc1c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801bbde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bbe0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801bbe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bbe6:	011b      	lsls	r3, r3, #4
 801bbe8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801bbec:	4413      	add	r3, r2
 801bbee:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801bbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bbf2:	3304      	adds	r3, #4
 801bbf4:	781b      	ldrb	r3, [r3, #0]
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	d006      	beq.n	801bc08 <find_volume+0x114>
 801bbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bbfc:	3308      	adds	r3, #8
 801bbfe:	4618      	mov	r0, r3
 801bc00:	f7fe fd76 	bl	801a6f0 <ld_dword>
 801bc04:	4602      	mov	r2, r0
 801bc06:	e000      	b.n	801bc0a <find_volume+0x116>
 801bc08:	2200      	movs	r2, #0
 801bc0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bc0c:	009b      	lsls	r3, r3, #2
 801bc0e:	3358      	adds	r3, #88	@ 0x58
 801bc10:	443b      	add	r3, r7
 801bc12:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801bc16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bc18:	3301      	adds	r3, #1
 801bc1a:	643b      	str	r3, [r7, #64]	@ 0x40
 801bc1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bc1e:	2b03      	cmp	r3, #3
 801bc20:	d9dd      	bls.n	801bbde <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801bc22:	2300      	movs	r3, #0
 801bc24:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801bc26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bc28:	2b00      	cmp	r3, #0
 801bc2a:	d002      	beq.n	801bc32 <find_volume+0x13e>
 801bc2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bc2e:	3b01      	subs	r3, #1
 801bc30:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801bc32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bc34:	009b      	lsls	r3, r3, #2
 801bc36:	3358      	adds	r3, #88	@ 0x58
 801bc38:	443b      	add	r3, r7
 801bc3a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801bc3e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801bc40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	d005      	beq.n	801bc52 <find_volume+0x15e>
 801bc46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801bc48:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801bc4a:	f7ff fefd 	bl	801ba48 <check_fs>
 801bc4e:	4603      	mov	r3, r0
 801bc50:	e000      	b.n	801bc54 <find_volume+0x160>
 801bc52:	2303      	movs	r3, #3
 801bc54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801bc58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801bc5c:	2b01      	cmp	r3, #1
 801bc5e:	d905      	bls.n	801bc6c <find_volume+0x178>
 801bc60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bc62:	3301      	adds	r3, #1
 801bc64:	643b      	str	r3, [r7, #64]	@ 0x40
 801bc66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bc68:	2b03      	cmp	r3, #3
 801bc6a:	d9e2      	bls.n	801bc32 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801bc6c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801bc70:	2b04      	cmp	r3, #4
 801bc72:	d101      	bne.n	801bc78 <find_volume+0x184>
 801bc74:	2301      	movs	r3, #1
 801bc76:	e17e      	b.n	801bf76 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801bc78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801bc7c:	2b01      	cmp	r3, #1
 801bc7e:	d901      	bls.n	801bc84 <find_volume+0x190>
 801bc80:	230d      	movs	r3, #13
 801bc82:	e178      	b.n	801bf76 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801bc84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bc86:	3330      	adds	r3, #48	@ 0x30
 801bc88:	330b      	adds	r3, #11
 801bc8a:	4618      	mov	r0, r3
 801bc8c:	f7fe fd18 	bl	801a6c0 <ld_word>
 801bc90:	4603      	mov	r3, r0
 801bc92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801bc96:	d001      	beq.n	801bc9c <find_volume+0x1a8>
 801bc98:	230d      	movs	r3, #13
 801bc9a:	e16c      	b.n	801bf76 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801bc9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bc9e:	3330      	adds	r3, #48	@ 0x30
 801bca0:	3316      	adds	r3, #22
 801bca2:	4618      	mov	r0, r3
 801bca4:	f7fe fd0c 	bl	801a6c0 <ld_word>
 801bca8:	4603      	mov	r3, r0
 801bcaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801bcac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bcae:	2b00      	cmp	r3, #0
 801bcb0:	d106      	bne.n	801bcc0 <find_volume+0x1cc>
 801bcb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bcb4:	3330      	adds	r3, #48	@ 0x30
 801bcb6:	3324      	adds	r3, #36	@ 0x24
 801bcb8:	4618      	mov	r0, r3
 801bcba:	f7fe fd19 	bl	801a6f0 <ld_dword>
 801bcbe:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801bcc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bcc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801bcc4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801bcc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bcc8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 801bccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bcce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801bcd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bcd2:	789b      	ldrb	r3, [r3, #2]
 801bcd4:	2b01      	cmp	r3, #1
 801bcd6:	d005      	beq.n	801bce4 <find_volume+0x1f0>
 801bcd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bcda:	789b      	ldrb	r3, [r3, #2]
 801bcdc:	2b02      	cmp	r3, #2
 801bcde:	d001      	beq.n	801bce4 <find_volume+0x1f0>
 801bce0:	230d      	movs	r3, #13
 801bce2:	e148      	b.n	801bf76 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801bce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bce6:	789b      	ldrb	r3, [r3, #2]
 801bce8:	461a      	mov	r2, r3
 801bcea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bcec:	fb02 f303 	mul.w	r3, r2, r3
 801bcf0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801bcf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bcf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801bcf8:	461a      	mov	r2, r3
 801bcfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bcfc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801bcfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd00:	895b      	ldrh	r3, [r3, #10]
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	d008      	beq.n	801bd18 <find_volume+0x224>
 801bd06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd08:	895b      	ldrh	r3, [r3, #10]
 801bd0a:	461a      	mov	r2, r3
 801bd0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd0e:	895b      	ldrh	r3, [r3, #10]
 801bd10:	3b01      	subs	r3, #1
 801bd12:	4013      	ands	r3, r2
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	d001      	beq.n	801bd1c <find_volume+0x228>
 801bd18:	230d      	movs	r3, #13
 801bd1a:	e12c      	b.n	801bf76 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801bd1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd1e:	3330      	adds	r3, #48	@ 0x30
 801bd20:	3311      	adds	r3, #17
 801bd22:	4618      	mov	r0, r3
 801bd24:	f7fe fccc 	bl	801a6c0 <ld_word>
 801bd28:	4603      	mov	r3, r0
 801bd2a:	461a      	mov	r2, r3
 801bd2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd2e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801bd30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd32:	891b      	ldrh	r3, [r3, #8]
 801bd34:	f003 030f 	and.w	r3, r3, #15
 801bd38:	b29b      	uxth	r3, r3
 801bd3a:	2b00      	cmp	r3, #0
 801bd3c:	d001      	beq.n	801bd42 <find_volume+0x24e>
 801bd3e:	230d      	movs	r3, #13
 801bd40:	e119      	b.n	801bf76 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801bd42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd44:	3330      	adds	r3, #48	@ 0x30
 801bd46:	3313      	adds	r3, #19
 801bd48:	4618      	mov	r0, r3
 801bd4a:	f7fe fcb9 	bl	801a6c0 <ld_word>
 801bd4e:	4603      	mov	r3, r0
 801bd50:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801bd52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d106      	bne.n	801bd66 <find_volume+0x272>
 801bd58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd5a:	3330      	adds	r3, #48	@ 0x30
 801bd5c:	3320      	adds	r3, #32
 801bd5e:	4618      	mov	r0, r3
 801bd60:	f7fe fcc6 	bl	801a6f0 <ld_dword>
 801bd64:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801bd66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bd68:	3330      	adds	r3, #48	@ 0x30
 801bd6a:	330e      	adds	r3, #14
 801bd6c:	4618      	mov	r0, r3
 801bd6e:	f7fe fca7 	bl	801a6c0 <ld_word>
 801bd72:	4603      	mov	r3, r0
 801bd74:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801bd76:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	d101      	bne.n	801bd80 <find_volume+0x28c>
 801bd7c:	230d      	movs	r3, #13
 801bd7e:	e0fa      	b.n	801bf76 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801bd80:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801bd82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bd84:	4413      	add	r3, r2
 801bd86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801bd88:	8912      	ldrh	r2, [r2, #8]
 801bd8a:	0912      	lsrs	r2, r2, #4
 801bd8c:	b292      	uxth	r2, r2
 801bd8e:	4413      	add	r3, r2
 801bd90:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801bd92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bd94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd96:	429a      	cmp	r2, r3
 801bd98:	d204      	bcs.n	801bda4 <find_volume+0x2b0>
 801bd9a:	230d      	movs	r3, #13
 801bd9c:	e0eb      	b.n	801bf76 <find_volume+0x482>
 801bd9e:	bf00      	nop
 801bda0:	24000ad0 	.word	0x24000ad0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801bda4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bda6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bda8:	1ad3      	subs	r3, r2, r3
 801bdaa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801bdac:	8952      	ldrh	r2, [r2, #10]
 801bdae:	fbb3 f3f2 	udiv	r3, r3, r2
 801bdb2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801bdb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	d101      	bne.n	801bdbe <find_volume+0x2ca>
 801bdba:	230d      	movs	r3, #13
 801bdbc:	e0db      	b.n	801bf76 <find_volume+0x482>
		fmt = FS_FAT32;
 801bdbe:	2303      	movs	r3, #3
 801bdc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801bdc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdc6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801bdca:	4293      	cmp	r3, r2
 801bdcc:	d802      	bhi.n	801bdd4 <find_volume+0x2e0>
 801bdce:	2302      	movs	r3, #2
 801bdd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801bdd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdd6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801bdda:	4293      	cmp	r3, r2
 801bddc:	d802      	bhi.n	801bde4 <find_volume+0x2f0>
 801bdde:	2301      	movs	r3, #1
 801bde0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801bde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bde6:	1c9a      	adds	r2, r3, #2
 801bde8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bdea:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801bdec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bdee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801bdf0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801bdf2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801bdf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bdf6:	441a      	add	r2, r3
 801bdf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bdfa:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801bdfc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801bdfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be00:	441a      	add	r2, r3
 801be02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801be04:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 801be06:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801be0a:	2b03      	cmp	r3, #3
 801be0c:	d11e      	bne.n	801be4c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801be0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801be10:	3330      	adds	r3, #48	@ 0x30
 801be12:	332a      	adds	r3, #42	@ 0x2a
 801be14:	4618      	mov	r0, r3
 801be16:	f7fe fc53 	bl	801a6c0 <ld_word>
 801be1a:	4603      	mov	r3, r0
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	d001      	beq.n	801be24 <find_volume+0x330>
 801be20:	230d      	movs	r3, #13
 801be22:	e0a8      	b.n	801bf76 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801be24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801be26:	891b      	ldrh	r3, [r3, #8]
 801be28:	2b00      	cmp	r3, #0
 801be2a:	d001      	beq.n	801be30 <find_volume+0x33c>
 801be2c:	230d      	movs	r3, #13
 801be2e:	e0a2      	b.n	801bf76 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801be30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801be32:	3330      	adds	r3, #48	@ 0x30
 801be34:	332c      	adds	r3, #44	@ 0x2c
 801be36:	4618      	mov	r0, r3
 801be38:	f7fe fc5a 	bl	801a6f0 <ld_dword>
 801be3c:	4602      	mov	r2, r0
 801be3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801be40:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801be42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801be44:	695b      	ldr	r3, [r3, #20]
 801be46:	009b      	lsls	r3, r3, #2
 801be48:	647b      	str	r3, [r7, #68]	@ 0x44
 801be4a:	e01f      	b.n	801be8c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801be4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801be4e:	891b      	ldrh	r3, [r3, #8]
 801be50:	2b00      	cmp	r3, #0
 801be52:	d101      	bne.n	801be58 <find_volume+0x364>
 801be54:	230d      	movs	r3, #13
 801be56:	e08e      	b.n	801bf76 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801be58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801be5a:	6a1a      	ldr	r2, [r3, #32]
 801be5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801be5e:	441a      	add	r2, r3
 801be60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801be62:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801be64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801be68:	2b02      	cmp	r3, #2
 801be6a:	d103      	bne.n	801be74 <find_volume+0x380>
 801be6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801be6e:	695b      	ldr	r3, [r3, #20]
 801be70:	005b      	lsls	r3, r3, #1
 801be72:	e00a      	b.n	801be8a <find_volume+0x396>
 801be74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801be76:	695a      	ldr	r2, [r3, #20]
 801be78:	4613      	mov	r3, r2
 801be7a:	005b      	lsls	r3, r3, #1
 801be7c:	4413      	add	r3, r2
 801be7e:	085a      	lsrs	r2, r3, #1
 801be80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801be82:	695b      	ldr	r3, [r3, #20]
 801be84:	f003 0301 	and.w	r3, r3, #1
 801be88:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801be8a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801be8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801be8e:	699a      	ldr	r2, [r3, #24]
 801be90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801be92:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801be96:	0a5b      	lsrs	r3, r3, #9
 801be98:	429a      	cmp	r2, r3
 801be9a:	d201      	bcs.n	801bea0 <find_volume+0x3ac>
 801be9c:	230d      	movs	r3, #13
 801be9e:	e06a      	b.n	801bf76 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801bea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bea2:	f04f 32ff 	mov.w	r2, #4294967295
 801bea6:	611a      	str	r2, [r3, #16]
 801bea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801beaa:	691a      	ldr	r2, [r3, #16]
 801beac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801beae:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 801beb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801beb2:	2280      	movs	r2, #128	@ 0x80
 801beb4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801beb6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801beba:	2b03      	cmp	r3, #3
 801bebc:	d149      	bne.n	801bf52 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801bebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bec0:	3330      	adds	r3, #48	@ 0x30
 801bec2:	3330      	adds	r3, #48	@ 0x30
 801bec4:	4618      	mov	r0, r3
 801bec6:	f7fe fbfb 	bl	801a6c0 <ld_word>
 801beca:	4603      	mov	r3, r0
 801becc:	2b01      	cmp	r3, #1
 801bece:	d140      	bne.n	801bf52 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801bed0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bed2:	3301      	adds	r3, #1
 801bed4:	4619      	mov	r1, r3
 801bed6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801bed8:	f7fe fea2 	bl	801ac20 <move_window>
 801bedc:	4603      	mov	r3, r0
 801bede:	2b00      	cmp	r3, #0
 801bee0:	d137      	bne.n	801bf52 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801bee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bee4:	2200      	movs	r2, #0
 801bee6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801bee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801beea:	3330      	adds	r3, #48	@ 0x30
 801beec:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801bef0:	4618      	mov	r0, r3
 801bef2:	f7fe fbe5 	bl	801a6c0 <ld_word>
 801bef6:	4603      	mov	r3, r0
 801bef8:	461a      	mov	r2, r3
 801befa:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801befe:	429a      	cmp	r2, r3
 801bf00:	d127      	bne.n	801bf52 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801bf02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf04:	3330      	adds	r3, #48	@ 0x30
 801bf06:	4618      	mov	r0, r3
 801bf08:	f7fe fbf2 	bl	801a6f0 <ld_dword>
 801bf0c:	4603      	mov	r3, r0
 801bf0e:	4a1c      	ldr	r2, [pc, #112]	@ (801bf80 <find_volume+0x48c>)
 801bf10:	4293      	cmp	r3, r2
 801bf12:	d11e      	bne.n	801bf52 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801bf14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf16:	3330      	adds	r3, #48	@ 0x30
 801bf18:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801bf1c:	4618      	mov	r0, r3
 801bf1e:	f7fe fbe7 	bl	801a6f0 <ld_dword>
 801bf22:	4603      	mov	r3, r0
 801bf24:	4a17      	ldr	r2, [pc, #92]	@ (801bf84 <find_volume+0x490>)
 801bf26:	4293      	cmp	r3, r2
 801bf28:	d113      	bne.n	801bf52 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801bf2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf2c:	3330      	adds	r3, #48	@ 0x30
 801bf2e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801bf32:	4618      	mov	r0, r3
 801bf34:	f7fe fbdc 	bl	801a6f0 <ld_dword>
 801bf38:	4602      	mov	r2, r0
 801bf3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf3c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801bf3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf40:	3330      	adds	r3, #48	@ 0x30
 801bf42:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801bf46:	4618      	mov	r0, r3
 801bf48:	f7fe fbd2 	bl	801a6f0 <ld_dword>
 801bf4c:	4602      	mov	r2, r0
 801bf4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf50:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801bf52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf54:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801bf58:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801bf5a:	4b0b      	ldr	r3, [pc, #44]	@ (801bf88 <find_volume+0x494>)
 801bf5c:	881b      	ldrh	r3, [r3, #0]
 801bf5e:	3301      	adds	r3, #1
 801bf60:	b29a      	uxth	r2, r3
 801bf62:	4b09      	ldr	r3, [pc, #36]	@ (801bf88 <find_volume+0x494>)
 801bf64:	801a      	strh	r2, [r3, #0]
 801bf66:	4b08      	ldr	r3, [pc, #32]	@ (801bf88 <find_volume+0x494>)
 801bf68:	881a      	ldrh	r2, [r3, #0]
 801bf6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf6c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801bf6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801bf70:	f7fe fdee 	bl	801ab50 <clear_lock>
#endif
	return FR_OK;
 801bf74:	2300      	movs	r3, #0
}
 801bf76:	4618      	mov	r0, r3
 801bf78:	3758      	adds	r7, #88	@ 0x58
 801bf7a:	46bd      	mov	sp, r7
 801bf7c:	bd80      	pop	{r7, pc}
 801bf7e:	bf00      	nop
 801bf80:	41615252 	.word	0x41615252
 801bf84:	61417272 	.word	0x61417272
 801bf88:	24000ad4 	.word	0x24000ad4

0801bf8c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801bf8c:	b580      	push	{r7, lr}
 801bf8e:	b084      	sub	sp, #16
 801bf90:	af00      	add	r7, sp, #0
 801bf92:	6078      	str	r0, [r7, #4]
 801bf94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801bf96:	2309      	movs	r3, #9
 801bf98:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d01c      	beq.n	801bfda <validate+0x4e>
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	2b00      	cmp	r3, #0
 801bfa6:	d018      	beq.n	801bfda <validate+0x4e>
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	681b      	ldr	r3, [r3, #0]
 801bfac:	781b      	ldrb	r3, [r3, #0]
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d013      	beq.n	801bfda <validate+0x4e>
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	889a      	ldrh	r2, [r3, #4]
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	681b      	ldr	r3, [r3, #0]
 801bfba:	88db      	ldrh	r3, [r3, #6]
 801bfbc:	429a      	cmp	r2, r3
 801bfbe:	d10c      	bne.n	801bfda <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	681b      	ldr	r3, [r3, #0]
 801bfc4:	785b      	ldrb	r3, [r3, #1]
 801bfc6:	4618      	mov	r0, r3
 801bfc8:	f7fe fada 	bl	801a580 <disk_status>
 801bfcc:	4603      	mov	r3, r0
 801bfce:	f003 0301 	and.w	r3, r3, #1
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d101      	bne.n	801bfda <validate+0x4e>
			res = FR_OK;
 801bfd6:	2300      	movs	r3, #0
 801bfd8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801bfda:	7bfb      	ldrb	r3, [r7, #15]
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	d102      	bne.n	801bfe6 <validate+0x5a>
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	681b      	ldr	r3, [r3, #0]
 801bfe4:	e000      	b.n	801bfe8 <validate+0x5c>
 801bfe6:	2300      	movs	r3, #0
 801bfe8:	683a      	ldr	r2, [r7, #0]
 801bfea:	6013      	str	r3, [r2, #0]
	return res;
 801bfec:	7bfb      	ldrb	r3, [r7, #15]
}
 801bfee:	4618      	mov	r0, r3
 801bff0:	3710      	adds	r7, #16
 801bff2:	46bd      	mov	sp, r7
 801bff4:	bd80      	pop	{r7, pc}
	...

0801bff8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801bff8:	b580      	push	{r7, lr}
 801bffa:	b088      	sub	sp, #32
 801bffc:	af00      	add	r7, sp, #0
 801bffe:	60f8      	str	r0, [r7, #12]
 801c000:	60b9      	str	r1, [r7, #8]
 801c002:	4613      	mov	r3, r2
 801c004:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801c006:	68bb      	ldr	r3, [r7, #8]
 801c008:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801c00a:	f107 0310 	add.w	r3, r7, #16
 801c00e:	4618      	mov	r0, r3
 801c010:	f7ff fcd5 	bl	801b9be <get_ldnumber>
 801c014:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801c016:	69fb      	ldr	r3, [r7, #28]
 801c018:	2b00      	cmp	r3, #0
 801c01a:	da01      	bge.n	801c020 <f_mount+0x28>
 801c01c:	230b      	movs	r3, #11
 801c01e:	e02b      	b.n	801c078 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801c020:	4a17      	ldr	r2, [pc, #92]	@ (801c080 <f_mount+0x88>)
 801c022:	69fb      	ldr	r3, [r7, #28]
 801c024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c028:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801c02a:	69bb      	ldr	r3, [r7, #24]
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	d005      	beq.n	801c03c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801c030:	69b8      	ldr	r0, [r7, #24]
 801c032:	f7fe fd8d 	bl	801ab50 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801c036:	69bb      	ldr	r3, [r7, #24]
 801c038:	2200      	movs	r2, #0
 801c03a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801c03c:	68fb      	ldr	r3, [r7, #12]
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d002      	beq.n	801c048 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801c042:	68fb      	ldr	r3, [r7, #12]
 801c044:	2200      	movs	r2, #0
 801c046:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801c048:	68fa      	ldr	r2, [r7, #12]
 801c04a:	490d      	ldr	r1, [pc, #52]	@ (801c080 <f_mount+0x88>)
 801c04c:	69fb      	ldr	r3, [r7, #28]
 801c04e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801c052:	68fb      	ldr	r3, [r7, #12]
 801c054:	2b00      	cmp	r3, #0
 801c056:	d002      	beq.n	801c05e <f_mount+0x66>
 801c058:	79fb      	ldrb	r3, [r7, #7]
 801c05a:	2b01      	cmp	r3, #1
 801c05c:	d001      	beq.n	801c062 <f_mount+0x6a>
 801c05e:	2300      	movs	r3, #0
 801c060:	e00a      	b.n	801c078 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801c062:	f107 010c 	add.w	r1, r7, #12
 801c066:	f107 0308 	add.w	r3, r7, #8
 801c06a:	2200      	movs	r2, #0
 801c06c:	4618      	mov	r0, r3
 801c06e:	f7ff fd41 	bl	801baf4 <find_volume>
 801c072:	4603      	mov	r3, r0
 801c074:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801c076:	7dfb      	ldrb	r3, [r7, #23]
}
 801c078:	4618      	mov	r0, r3
 801c07a:	3720      	adds	r7, #32
 801c07c:	46bd      	mov	sp, r7
 801c07e:	bd80      	pop	{r7, pc}
 801c080:	24000ad0 	.word	0x24000ad0

0801c084 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801c084:	b580      	push	{r7, lr}
 801c086:	b098      	sub	sp, #96	@ 0x60
 801c088:	af00      	add	r7, sp, #0
 801c08a:	60f8      	str	r0, [r7, #12]
 801c08c:	60b9      	str	r1, [r7, #8]
 801c08e:	4613      	mov	r3, r2
 801c090:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801c092:	68fb      	ldr	r3, [r7, #12]
 801c094:	2b00      	cmp	r3, #0
 801c096:	d101      	bne.n	801c09c <f_open+0x18>
 801c098:	2309      	movs	r3, #9
 801c09a:	e1a9      	b.n	801c3f0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801c09c:	79fb      	ldrb	r3, [r7, #7]
 801c09e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c0a2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801c0a4:	79fa      	ldrb	r2, [r7, #7]
 801c0a6:	f107 0110 	add.w	r1, r7, #16
 801c0aa:	f107 0308 	add.w	r3, r7, #8
 801c0ae:	4618      	mov	r0, r3
 801c0b0:	f7ff fd20 	bl	801baf4 <find_volume>
 801c0b4:	4603      	mov	r3, r0
 801c0b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 801c0ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	f040 818d 	bne.w	801c3de <f_open+0x35a>
		dj.obj.fs = fs;
 801c0c4:	693b      	ldr	r3, [r7, #16]
 801c0c6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801c0c8:	68ba      	ldr	r2, [r7, #8]
 801c0ca:	f107 0314 	add.w	r3, r7, #20
 801c0ce:	4611      	mov	r1, r2
 801c0d0:	4618      	mov	r0, r3
 801c0d2:	f7ff fc03 	bl	801b8dc <follow_path>
 801c0d6:	4603      	mov	r3, r0
 801c0d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801c0dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d118      	bne.n	801c116 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801c0e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801c0e8:	b25b      	sxtb	r3, r3
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	da03      	bge.n	801c0f6 <f_open+0x72>
				res = FR_INVALID_NAME;
 801c0ee:	2306      	movs	r3, #6
 801c0f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801c0f4:	e00f      	b.n	801c116 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801c0f6:	79fb      	ldrb	r3, [r7, #7]
 801c0f8:	2b01      	cmp	r3, #1
 801c0fa:	bf8c      	ite	hi
 801c0fc:	2301      	movhi	r3, #1
 801c0fe:	2300      	movls	r3, #0
 801c100:	b2db      	uxtb	r3, r3
 801c102:	461a      	mov	r2, r3
 801c104:	f107 0314 	add.w	r3, r7, #20
 801c108:	4611      	mov	r1, r2
 801c10a:	4618      	mov	r0, r3
 801c10c:	f7fe fbd8 	bl	801a8c0 <chk_lock>
 801c110:	4603      	mov	r3, r0
 801c112:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801c116:	79fb      	ldrb	r3, [r7, #7]
 801c118:	f003 031c 	and.w	r3, r3, #28
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	d07f      	beq.n	801c220 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801c120:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c124:	2b00      	cmp	r3, #0
 801c126:	d017      	beq.n	801c158 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801c128:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c12c:	2b04      	cmp	r3, #4
 801c12e:	d10e      	bne.n	801c14e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801c130:	f7fe fc22 	bl	801a978 <enq_lock>
 801c134:	4603      	mov	r3, r0
 801c136:	2b00      	cmp	r3, #0
 801c138:	d006      	beq.n	801c148 <f_open+0xc4>
 801c13a:	f107 0314 	add.w	r3, r7, #20
 801c13e:	4618      	mov	r0, r3
 801c140:	f7ff fb06 	bl	801b750 <dir_register>
 801c144:	4603      	mov	r3, r0
 801c146:	e000      	b.n	801c14a <f_open+0xc6>
 801c148:	2312      	movs	r3, #18
 801c14a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801c14e:	79fb      	ldrb	r3, [r7, #7]
 801c150:	f043 0308 	orr.w	r3, r3, #8
 801c154:	71fb      	strb	r3, [r7, #7]
 801c156:	e010      	b.n	801c17a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801c158:	7ebb      	ldrb	r3, [r7, #26]
 801c15a:	f003 0311 	and.w	r3, r3, #17
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d003      	beq.n	801c16a <f_open+0xe6>
					res = FR_DENIED;
 801c162:	2307      	movs	r3, #7
 801c164:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801c168:	e007      	b.n	801c17a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801c16a:	79fb      	ldrb	r3, [r7, #7]
 801c16c:	f003 0304 	and.w	r3, r3, #4
 801c170:	2b00      	cmp	r3, #0
 801c172:	d002      	beq.n	801c17a <f_open+0xf6>
 801c174:	2308      	movs	r3, #8
 801c176:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801c17a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d168      	bne.n	801c254 <f_open+0x1d0>
 801c182:	79fb      	ldrb	r3, [r7, #7]
 801c184:	f003 0308 	and.w	r3, r3, #8
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d063      	beq.n	801c254 <f_open+0x1d0>
				dw = GET_FATTIME();
 801c18c:	f7fd ff6c 	bl	801a068 <get_fattime>
 801c190:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801c192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c194:	330e      	adds	r3, #14
 801c196:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c198:	4618      	mov	r0, r3
 801c19a:	f7fe fae7 	bl	801a76c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801c19e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c1a0:	3316      	adds	r3, #22
 801c1a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c1a4:	4618      	mov	r0, r3
 801c1a6:	f7fe fae1 	bl	801a76c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801c1aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c1ac:	330b      	adds	r3, #11
 801c1ae:	2220      	movs	r2, #32
 801c1b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801c1b2:	693b      	ldr	r3, [r7, #16]
 801c1b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c1b6:	4611      	mov	r1, r2
 801c1b8:	4618      	mov	r0, r3
 801c1ba:	f7ff fa35 	bl	801b628 <ld_clust>
 801c1be:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801c1c0:	693b      	ldr	r3, [r7, #16]
 801c1c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c1c4:	2200      	movs	r2, #0
 801c1c6:	4618      	mov	r0, r3
 801c1c8:	f7ff fa4d 	bl	801b666 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801c1cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c1ce:	331c      	adds	r3, #28
 801c1d0:	2100      	movs	r1, #0
 801c1d2:	4618      	mov	r0, r3
 801c1d4:	f7fe faca 	bl	801a76c <st_dword>
					fs->wflag = 1;
 801c1d8:	693b      	ldr	r3, [r7, #16]
 801c1da:	2201      	movs	r2, #1
 801c1dc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801c1de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c1e0:	2b00      	cmp	r3, #0
 801c1e2:	d037      	beq.n	801c254 <f_open+0x1d0>
						dw = fs->winsect;
 801c1e4:	693b      	ldr	r3, [r7, #16]
 801c1e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c1e8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801c1ea:	f107 0314 	add.w	r3, r7, #20
 801c1ee:	2200      	movs	r2, #0
 801c1f0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801c1f2:	4618      	mov	r0, r3
 801c1f4:	f7fe ff60 	bl	801b0b8 <remove_chain>
 801c1f8:	4603      	mov	r3, r0
 801c1fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801c1fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c202:	2b00      	cmp	r3, #0
 801c204:	d126      	bne.n	801c254 <f_open+0x1d0>
							res = move_window(fs, dw);
 801c206:	693b      	ldr	r3, [r7, #16]
 801c208:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c20a:	4618      	mov	r0, r3
 801c20c:	f7fe fd08 	bl	801ac20 <move_window>
 801c210:	4603      	mov	r3, r0
 801c212:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801c216:	693b      	ldr	r3, [r7, #16]
 801c218:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c21a:	3a01      	subs	r2, #1
 801c21c:	60da      	str	r2, [r3, #12]
 801c21e:	e019      	b.n	801c254 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801c220:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c224:	2b00      	cmp	r3, #0
 801c226:	d115      	bne.n	801c254 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801c228:	7ebb      	ldrb	r3, [r7, #26]
 801c22a:	f003 0310 	and.w	r3, r3, #16
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d003      	beq.n	801c23a <f_open+0x1b6>
					res = FR_NO_FILE;
 801c232:	2304      	movs	r3, #4
 801c234:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801c238:	e00c      	b.n	801c254 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801c23a:	79fb      	ldrb	r3, [r7, #7]
 801c23c:	f003 0302 	and.w	r3, r3, #2
 801c240:	2b00      	cmp	r3, #0
 801c242:	d007      	beq.n	801c254 <f_open+0x1d0>
 801c244:	7ebb      	ldrb	r3, [r7, #26]
 801c246:	f003 0301 	and.w	r3, r3, #1
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	d002      	beq.n	801c254 <f_open+0x1d0>
						res = FR_DENIED;
 801c24e:	2307      	movs	r3, #7
 801c250:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801c254:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c258:	2b00      	cmp	r3, #0
 801c25a:	d126      	bne.n	801c2aa <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801c25c:	79fb      	ldrb	r3, [r7, #7]
 801c25e:	f003 0308 	and.w	r3, r3, #8
 801c262:	2b00      	cmp	r3, #0
 801c264:	d003      	beq.n	801c26e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801c266:	79fb      	ldrb	r3, [r7, #7]
 801c268:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c26c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801c26e:	693b      	ldr	r3, [r7, #16]
 801c270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801c276:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c278:	68fb      	ldr	r3, [r7, #12]
 801c27a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801c27c:	79fb      	ldrb	r3, [r7, #7]
 801c27e:	2b01      	cmp	r3, #1
 801c280:	bf8c      	ite	hi
 801c282:	2301      	movhi	r3, #1
 801c284:	2300      	movls	r3, #0
 801c286:	b2db      	uxtb	r3, r3
 801c288:	461a      	mov	r2, r3
 801c28a:	f107 0314 	add.w	r3, r7, #20
 801c28e:	4611      	mov	r1, r2
 801c290:	4618      	mov	r0, r3
 801c292:	f7fe fb93 	bl	801a9bc <inc_lock>
 801c296:	4602      	mov	r2, r0
 801c298:	68fb      	ldr	r3, [r7, #12]
 801c29a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	691b      	ldr	r3, [r3, #16]
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	d102      	bne.n	801c2aa <f_open+0x226>
 801c2a4:	2302      	movs	r3, #2
 801c2a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801c2aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	f040 8095 	bne.w	801c3de <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801c2b4:	693b      	ldr	r3, [r7, #16]
 801c2b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c2b8:	4611      	mov	r1, r2
 801c2ba:	4618      	mov	r0, r3
 801c2bc:	f7ff f9b4 	bl	801b628 <ld_clust>
 801c2c0:	4602      	mov	r2, r0
 801c2c2:	68fb      	ldr	r3, [r7, #12]
 801c2c4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801c2c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c2c8:	331c      	adds	r3, #28
 801c2ca:	4618      	mov	r0, r3
 801c2cc:	f7fe fa10 	bl	801a6f0 <ld_dword>
 801c2d0:	4602      	mov	r2, r0
 801c2d2:	68fb      	ldr	r3, [r7, #12]
 801c2d4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801c2d6:	68fb      	ldr	r3, [r7, #12]
 801c2d8:	2200      	movs	r2, #0
 801c2da:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801c2dc:	693a      	ldr	r2, [r7, #16]
 801c2de:	68fb      	ldr	r3, [r7, #12]
 801c2e0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801c2e2:	693b      	ldr	r3, [r7, #16]
 801c2e4:	88da      	ldrh	r2, [r3, #6]
 801c2e6:	68fb      	ldr	r3, [r7, #12]
 801c2e8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801c2ea:	68fb      	ldr	r3, [r7, #12]
 801c2ec:	79fa      	ldrb	r2, [r7, #7]
 801c2ee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801c2f0:	68fb      	ldr	r3, [r7, #12]
 801c2f2:	2200      	movs	r2, #0
 801c2f4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801c2f6:	68fb      	ldr	r3, [r7, #12]
 801c2f8:	2200      	movs	r2, #0
 801c2fa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801c2fc:	68fb      	ldr	r3, [r7, #12]
 801c2fe:	2200      	movs	r2, #0
 801c300:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801c302:	68fb      	ldr	r3, [r7, #12]
 801c304:	3330      	adds	r3, #48	@ 0x30
 801c306:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c30a:	2100      	movs	r1, #0
 801c30c:	4618      	mov	r0, r3
 801c30e:	f7fe fa7a 	bl	801a806 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801c312:	79fb      	ldrb	r3, [r7, #7]
 801c314:	f003 0320 	and.w	r3, r3, #32
 801c318:	2b00      	cmp	r3, #0
 801c31a:	d060      	beq.n	801c3de <f_open+0x35a>
 801c31c:	68fb      	ldr	r3, [r7, #12]
 801c31e:	68db      	ldr	r3, [r3, #12]
 801c320:	2b00      	cmp	r3, #0
 801c322:	d05c      	beq.n	801c3de <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801c324:	68fb      	ldr	r3, [r7, #12]
 801c326:	68da      	ldr	r2, [r3, #12]
 801c328:	68fb      	ldr	r3, [r7, #12]
 801c32a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801c32c:	693b      	ldr	r3, [r7, #16]
 801c32e:	895b      	ldrh	r3, [r3, #10]
 801c330:	025b      	lsls	r3, r3, #9
 801c332:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	689b      	ldr	r3, [r3, #8]
 801c338:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801c33a:	68fb      	ldr	r3, [r7, #12]
 801c33c:	68db      	ldr	r3, [r3, #12]
 801c33e:	657b      	str	r3, [r7, #84]	@ 0x54
 801c340:	e016      	b.n	801c370 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801c342:	68fb      	ldr	r3, [r7, #12]
 801c344:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801c346:	4618      	mov	r0, r3
 801c348:	f7fe fd25 	bl	801ad96 <get_fat>
 801c34c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801c34e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c350:	2b01      	cmp	r3, #1
 801c352:	d802      	bhi.n	801c35a <f_open+0x2d6>
 801c354:	2302      	movs	r3, #2
 801c356:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801c35a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c360:	d102      	bne.n	801c368 <f_open+0x2e4>
 801c362:	2301      	movs	r3, #1
 801c364:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801c368:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c36a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c36c:	1ad3      	subs	r3, r2, r3
 801c36e:	657b      	str	r3, [r7, #84]	@ 0x54
 801c370:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c374:	2b00      	cmp	r3, #0
 801c376:	d103      	bne.n	801c380 <f_open+0x2fc>
 801c378:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c37a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c37c:	429a      	cmp	r2, r3
 801c37e:	d8e0      	bhi.n	801c342 <f_open+0x2be>
				}
				fp->clust = clst;
 801c380:	68fb      	ldr	r3, [r7, #12]
 801c382:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801c384:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801c386:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	d127      	bne.n	801c3de <f_open+0x35a>
 801c38e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c394:	2b00      	cmp	r3, #0
 801c396:	d022      	beq.n	801c3de <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801c398:	693b      	ldr	r3, [r7, #16]
 801c39a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801c39c:	4618      	mov	r0, r3
 801c39e:	f7fe fcdb 	bl	801ad58 <clust2sect>
 801c3a2:	6478      	str	r0, [r7, #68]	@ 0x44
 801c3a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d103      	bne.n	801c3b2 <f_open+0x32e>
						res = FR_INT_ERR;
 801c3aa:	2302      	movs	r3, #2
 801c3ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801c3b0:	e015      	b.n	801c3de <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801c3b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c3b4:	0a5a      	lsrs	r2, r3, #9
 801c3b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c3b8:	441a      	add	r2, r3
 801c3ba:	68fb      	ldr	r3, [r7, #12]
 801c3bc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801c3be:	693b      	ldr	r3, [r7, #16]
 801c3c0:	7858      	ldrb	r0, [r3, #1]
 801c3c2:	68fb      	ldr	r3, [r7, #12]
 801c3c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c3c8:	68fb      	ldr	r3, [r7, #12]
 801c3ca:	6a1a      	ldr	r2, [r3, #32]
 801c3cc:	2301      	movs	r3, #1
 801c3ce:	f7fe f919 	bl	801a604 <disk_read>
 801c3d2:	4603      	mov	r3, r0
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	d002      	beq.n	801c3de <f_open+0x35a>
 801c3d8:	2301      	movs	r3, #1
 801c3da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801c3de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	d002      	beq.n	801c3ec <f_open+0x368>
 801c3e6:	68fb      	ldr	r3, [r7, #12]
 801c3e8:	2200      	movs	r2, #0
 801c3ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801c3ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801c3f0:	4618      	mov	r0, r3
 801c3f2:	3760      	adds	r7, #96	@ 0x60
 801c3f4:	46bd      	mov	sp, r7
 801c3f6:	bd80      	pop	{r7, pc}

0801c3f8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801c3f8:	b580      	push	{r7, lr}
 801c3fa:	b08e      	sub	sp, #56	@ 0x38
 801c3fc:	af00      	add	r7, sp, #0
 801c3fe:	60f8      	str	r0, [r7, #12]
 801c400:	60b9      	str	r1, [r7, #8]
 801c402:	607a      	str	r2, [r7, #4]
 801c404:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801c406:	68bb      	ldr	r3, [r7, #8]
 801c408:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 801c40a:	683b      	ldr	r3, [r7, #0]
 801c40c:	2200      	movs	r2, #0
 801c40e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801c410:	68fb      	ldr	r3, [r7, #12]
 801c412:	f107 0214 	add.w	r2, r7, #20
 801c416:	4611      	mov	r1, r2
 801c418:	4618      	mov	r0, r3
 801c41a:	f7ff fdb7 	bl	801bf8c <validate>
 801c41e:	4603      	mov	r3, r0
 801c420:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801c424:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d107      	bne.n	801c43c <f_read+0x44>
 801c42c:	68fb      	ldr	r3, [r7, #12]
 801c42e:	7d5b      	ldrb	r3, [r3, #21]
 801c430:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801c434:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c438:	2b00      	cmp	r3, #0
 801c43a:	d002      	beq.n	801c442 <f_read+0x4a>
 801c43c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c440:	e115      	b.n	801c66e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801c442:	68fb      	ldr	r3, [r7, #12]
 801c444:	7d1b      	ldrb	r3, [r3, #20]
 801c446:	f003 0301 	and.w	r3, r3, #1
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	d101      	bne.n	801c452 <f_read+0x5a>
 801c44e:	2307      	movs	r3, #7
 801c450:	e10d      	b.n	801c66e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801c452:	68fb      	ldr	r3, [r7, #12]
 801c454:	68da      	ldr	r2, [r3, #12]
 801c456:	68fb      	ldr	r3, [r7, #12]
 801c458:	699b      	ldr	r3, [r3, #24]
 801c45a:	1ad3      	subs	r3, r2, r3
 801c45c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801c45e:	687a      	ldr	r2, [r7, #4]
 801c460:	6a3b      	ldr	r3, [r7, #32]
 801c462:	429a      	cmp	r2, r3
 801c464:	f240 80fe 	bls.w	801c664 <f_read+0x26c>
 801c468:	6a3b      	ldr	r3, [r7, #32]
 801c46a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801c46c:	e0fa      	b.n	801c664 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801c46e:	68fb      	ldr	r3, [r7, #12]
 801c470:	699b      	ldr	r3, [r3, #24]
 801c472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c476:	2b00      	cmp	r3, #0
 801c478:	f040 80c6 	bne.w	801c608 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	699b      	ldr	r3, [r3, #24]
 801c480:	0a5b      	lsrs	r3, r3, #9
 801c482:	697a      	ldr	r2, [r7, #20]
 801c484:	8952      	ldrh	r2, [r2, #10]
 801c486:	3a01      	subs	r2, #1
 801c488:	4013      	ands	r3, r2
 801c48a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801c48c:	69fb      	ldr	r3, [r7, #28]
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d12f      	bne.n	801c4f2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	699b      	ldr	r3, [r3, #24]
 801c496:	2b00      	cmp	r3, #0
 801c498:	d103      	bne.n	801c4a2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801c49a:	68fb      	ldr	r3, [r7, #12]
 801c49c:	689b      	ldr	r3, [r3, #8]
 801c49e:	633b      	str	r3, [r7, #48]	@ 0x30
 801c4a0:	e013      	b.n	801c4ca <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801c4a2:	68fb      	ldr	r3, [r7, #12]
 801c4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	d007      	beq.n	801c4ba <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	699b      	ldr	r3, [r3, #24]
 801c4ae:	4619      	mov	r1, r3
 801c4b0:	68f8      	ldr	r0, [r7, #12]
 801c4b2:	f7fe fefe 	bl	801b2b2 <clmt_clust>
 801c4b6:	6338      	str	r0, [r7, #48]	@ 0x30
 801c4b8:	e007      	b.n	801c4ca <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801c4ba:	68fa      	ldr	r2, [r7, #12]
 801c4bc:	68fb      	ldr	r3, [r7, #12]
 801c4be:	69db      	ldr	r3, [r3, #28]
 801c4c0:	4619      	mov	r1, r3
 801c4c2:	4610      	mov	r0, r2
 801c4c4:	f7fe fc67 	bl	801ad96 <get_fat>
 801c4c8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801c4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c4cc:	2b01      	cmp	r3, #1
 801c4ce:	d804      	bhi.n	801c4da <f_read+0xe2>
 801c4d0:	68fb      	ldr	r3, [r7, #12]
 801c4d2:	2202      	movs	r2, #2
 801c4d4:	755a      	strb	r2, [r3, #21]
 801c4d6:	2302      	movs	r3, #2
 801c4d8:	e0c9      	b.n	801c66e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801c4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c4e0:	d104      	bne.n	801c4ec <f_read+0xf4>
 801c4e2:	68fb      	ldr	r3, [r7, #12]
 801c4e4:	2201      	movs	r2, #1
 801c4e6:	755a      	strb	r2, [r3, #21]
 801c4e8:	2301      	movs	r3, #1
 801c4ea:	e0c0      	b.n	801c66e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 801c4ec:	68fb      	ldr	r3, [r7, #12]
 801c4ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c4f0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801c4f2:	697a      	ldr	r2, [r7, #20]
 801c4f4:	68fb      	ldr	r3, [r7, #12]
 801c4f6:	69db      	ldr	r3, [r3, #28]
 801c4f8:	4619      	mov	r1, r3
 801c4fa:	4610      	mov	r0, r2
 801c4fc:	f7fe fc2c 	bl	801ad58 <clust2sect>
 801c500:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801c502:	69bb      	ldr	r3, [r7, #24]
 801c504:	2b00      	cmp	r3, #0
 801c506:	d104      	bne.n	801c512 <f_read+0x11a>
 801c508:	68fb      	ldr	r3, [r7, #12]
 801c50a:	2202      	movs	r2, #2
 801c50c:	755a      	strb	r2, [r3, #21]
 801c50e:	2302      	movs	r3, #2
 801c510:	e0ad      	b.n	801c66e <f_read+0x276>
			sect += csect;
 801c512:	69ba      	ldr	r2, [r7, #24]
 801c514:	69fb      	ldr	r3, [r7, #28]
 801c516:	4413      	add	r3, r2
 801c518:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	0a5b      	lsrs	r3, r3, #9
 801c51e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801c520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c522:	2b00      	cmp	r3, #0
 801c524:	d039      	beq.n	801c59a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801c526:	69fa      	ldr	r2, [r7, #28]
 801c528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c52a:	4413      	add	r3, r2
 801c52c:	697a      	ldr	r2, [r7, #20]
 801c52e:	8952      	ldrh	r2, [r2, #10]
 801c530:	4293      	cmp	r3, r2
 801c532:	d905      	bls.n	801c540 <f_read+0x148>
					cc = fs->csize - csect;
 801c534:	697b      	ldr	r3, [r7, #20]
 801c536:	895b      	ldrh	r3, [r3, #10]
 801c538:	461a      	mov	r2, r3
 801c53a:	69fb      	ldr	r3, [r7, #28]
 801c53c:	1ad3      	subs	r3, r2, r3
 801c53e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c540:	697b      	ldr	r3, [r7, #20]
 801c542:	7858      	ldrb	r0, [r3, #1]
 801c544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c546:	69ba      	ldr	r2, [r7, #24]
 801c548:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c54a:	f7fe f85b 	bl	801a604 <disk_read>
 801c54e:	4603      	mov	r3, r0
 801c550:	2b00      	cmp	r3, #0
 801c552:	d004      	beq.n	801c55e <f_read+0x166>
 801c554:	68fb      	ldr	r3, [r7, #12]
 801c556:	2201      	movs	r2, #1
 801c558:	755a      	strb	r2, [r3, #21]
 801c55a:	2301      	movs	r3, #1
 801c55c:	e087      	b.n	801c66e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801c55e:	68fb      	ldr	r3, [r7, #12]
 801c560:	7d1b      	ldrb	r3, [r3, #20]
 801c562:	b25b      	sxtb	r3, r3
 801c564:	2b00      	cmp	r3, #0
 801c566:	da14      	bge.n	801c592 <f_read+0x19a>
 801c568:	68fb      	ldr	r3, [r7, #12]
 801c56a:	6a1a      	ldr	r2, [r3, #32]
 801c56c:	69bb      	ldr	r3, [r7, #24]
 801c56e:	1ad3      	subs	r3, r2, r3
 801c570:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c572:	429a      	cmp	r2, r3
 801c574:	d90d      	bls.n	801c592 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	6a1a      	ldr	r2, [r3, #32]
 801c57a:	69bb      	ldr	r3, [r7, #24]
 801c57c:	1ad3      	subs	r3, r2, r3
 801c57e:	025b      	lsls	r3, r3, #9
 801c580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c582:	18d0      	adds	r0, r2, r3
 801c584:	68fb      	ldr	r3, [r7, #12]
 801c586:	3330      	adds	r3, #48	@ 0x30
 801c588:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c58c:	4619      	mov	r1, r3
 801c58e:	f7fe f919 	bl	801a7c4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801c592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c594:	025b      	lsls	r3, r3, #9
 801c596:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 801c598:	e050      	b.n	801c63c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801c59a:	68fb      	ldr	r3, [r7, #12]
 801c59c:	6a1b      	ldr	r3, [r3, #32]
 801c59e:	69ba      	ldr	r2, [r7, #24]
 801c5a0:	429a      	cmp	r2, r3
 801c5a2:	d02e      	beq.n	801c602 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801c5a4:	68fb      	ldr	r3, [r7, #12]
 801c5a6:	7d1b      	ldrb	r3, [r3, #20]
 801c5a8:	b25b      	sxtb	r3, r3
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	da18      	bge.n	801c5e0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c5ae:	697b      	ldr	r3, [r7, #20]
 801c5b0:	7858      	ldrb	r0, [r3, #1]
 801c5b2:	68fb      	ldr	r3, [r7, #12]
 801c5b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c5b8:	68fb      	ldr	r3, [r7, #12]
 801c5ba:	6a1a      	ldr	r2, [r3, #32]
 801c5bc:	2301      	movs	r3, #1
 801c5be:	f7fe f841 	bl	801a644 <disk_write>
 801c5c2:	4603      	mov	r3, r0
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d004      	beq.n	801c5d2 <f_read+0x1da>
 801c5c8:	68fb      	ldr	r3, [r7, #12]
 801c5ca:	2201      	movs	r2, #1
 801c5cc:	755a      	strb	r2, [r3, #21]
 801c5ce:	2301      	movs	r3, #1
 801c5d0:	e04d      	b.n	801c66e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	7d1b      	ldrb	r3, [r3, #20]
 801c5d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c5da:	b2da      	uxtb	r2, r3
 801c5dc:	68fb      	ldr	r3, [r7, #12]
 801c5de:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801c5e0:	697b      	ldr	r3, [r7, #20]
 801c5e2:	7858      	ldrb	r0, [r3, #1]
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c5ea:	2301      	movs	r3, #1
 801c5ec:	69ba      	ldr	r2, [r7, #24]
 801c5ee:	f7fe f809 	bl	801a604 <disk_read>
 801c5f2:	4603      	mov	r3, r0
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	d004      	beq.n	801c602 <f_read+0x20a>
 801c5f8:	68fb      	ldr	r3, [r7, #12]
 801c5fa:	2201      	movs	r2, #1
 801c5fc:	755a      	strb	r2, [r3, #21]
 801c5fe:	2301      	movs	r3, #1
 801c600:	e035      	b.n	801c66e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801c602:	68fb      	ldr	r3, [r7, #12]
 801c604:	69ba      	ldr	r2, [r7, #24]
 801c606:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801c608:	68fb      	ldr	r3, [r7, #12]
 801c60a:	699b      	ldr	r3, [r3, #24]
 801c60c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c610:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801c614:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801c616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c618:	687b      	ldr	r3, [r7, #4]
 801c61a:	429a      	cmp	r2, r3
 801c61c:	d901      	bls.n	801c622 <f_read+0x22a>
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801c628:	68fb      	ldr	r3, [r7, #12]
 801c62a:	699b      	ldr	r3, [r3, #24]
 801c62c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c630:	4413      	add	r3, r2
 801c632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c634:	4619      	mov	r1, r3
 801c636:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c638:	f7fe f8c4 	bl	801a7c4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801c63c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c63e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c640:	4413      	add	r3, r2
 801c642:	627b      	str	r3, [r7, #36]	@ 0x24
 801c644:	68fb      	ldr	r3, [r7, #12]
 801c646:	699a      	ldr	r2, [r3, #24]
 801c648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c64a:	441a      	add	r2, r3
 801c64c:	68fb      	ldr	r3, [r7, #12]
 801c64e:	619a      	str	r2, [r3, #24]
 801c650:	683b      	ldr	r3, [r7, #0]
 801c652:	681a      	ldr	r2, [r3, #0]
 801c654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c656:	441a      	add	r2, r3
 801c658:	683b      	ldr	r3, [r7, #0]
 801c65a:	601a      	str	r2, [r3, #0]
 801c65c:	687a      	ldr	r2, [r7, #4]
 801c65e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c660:	1ad3      	subs	r3, r2, r3
 801c662:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801c664:	687b      	ldr	r3, [r7, #4]
 801c666:	2b00      	cmp	r3, #0
 801c668:	f47f af01 	bne.w	801c46e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801c66c:	2300      	movs	r3, #0
}
 801c66e:	4618      	mov	r0, r3
 801c670:	3738      	adds	r7, #56	@ 0x38
 801c672:	46bd      	mov	sp, r7
 801c674:	bd80      	pop	{r7, pc}

0801c676 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801c676:	b580      	push	{r7, lr}
 801c678:	b086      	sub	sp, #24
 801c67a:	af00      	add	r7, sp, #0
 801c67c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	f107 0208 	add.w	r2, r7, #8
 801c684:	4611      	mov	r1, r2
 801c686:	4618      	mov	r0, r3
 801c688:	f7ff fc80 	bl	801bf8c <validate>
 801c68c:	4603      	mov	r3, r0
 801c68e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c690:	7dfb      	ldrb	r3, [r7, #23]
 801c692:	2b00      	cmp	r3, #0
 801c694:	d168      	bne.n	801c768 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	7d1b      	ldrb	r3, [r3, #20]
 801c69a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d062      	beq.n	801c768 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	7d1b      	ldrb	r3, [r3, #20]
 801c6a6:	b25b      	sxtb	r3, r3
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	da15      	bge.n	801c6d8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801c6ac:	68bb      	ldr	r3, [r7, #8]
 801c6ae:	7858      	ldrb	r0, [r3, #1]
 801c6b0:	687b      	ldr	r3, [r7, #4]
 801c6b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	6a1a      	ldr	r2, [r3, #32]
 801c6ba:	2301      	movs	r3, #1
 801c6bc:	f7fd ffc2 	bl	801a644 <disk_write>
 801c6c0:	4603      	mov	r3, r0
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	d001      	beq.n	801c6ca <f_sync+0x54>
 801c6c6:	2301      	movs	r3, #1
 801c6c8:	e04f      	b.n	801c76a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	7d1b      	ldrb	r3, [r3, #20]
 801c6ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c6d2:	b2da      	uxtb	r2, r3
 801c6d4:	687b      	ldr	r3, [r7, #4]
 801c6d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801c6d8:	f7fd fcc6 	bl	801a068 <get_fattime>
 801c6dc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801c6de:	68ba      	ldr	r2, [r7, #8]
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c6e4:	4619      	mov	r1, r3
 801c6e6:	4610      	mov	r0, r2
 801c6e8:	f7fe fa9a 	bl	801ac20 <move_window>
 801c6ec:	4603      	mov	r3, r0
 801c6ee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801c6f0:	7dfb      	ldrb	r3, [r7, #23]
 801c6f2:	2b00      	cmp	r3, #0
 801c6f4:	d138      	bne.n	801c768 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c6fa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801c6fc:	68fb      	ldr	r3, [r7, #12]
 801c6fe:	330b      	adds	r3, #11
 801c700:	781a      	ldrb	r2, [r3, #0]
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	330b      	adds	r3, #11
 801c706:	f042 0220 	orr.w	r2, r2, #32
 801c70a:	b2d2      	uxtb	r2, r2
 801c70c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	6818      	ldr	r0, [r3, #0]
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	689b      	ldr	r3, [r3, #8]
 801c716:	461a      	mov	r2, r3
 801c718:	68f9      	ldr	r1, [r7, #12]
 801c71a:	f7fe ffa4 	bl	801b666 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801c71e:	68fb      	ldr	r3, [r7, #12]
 801c720:	f103 021c 	add.w	r2, r3, #28
 801c724:	687b      	ldr	r3, [r7, #4]
 801c726:	68db      	ldr	r3, [r3, #12]
 801c728:	4619      	mov	r1, r3
 801c72a:	4610      	mov	r0, r2
 801c72c:	f7fe f81e 	bl	801a76c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801c730:	68fb      	ldr	r3, [r7, #12]
 801c732:	3316      	adds	r3, #22
 801c734:	6939      	ldr	r1, [r7, #16]
 801c736:	4618      	mov	r0, r3
 801c738:	f7fe f818 	bl	801a76c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801c73c:	68fb      	ldr	r3, [r7, #12]
 801c73e:	3312      	adds	r3, #18
 801c740:	2100      	movs	r1, #0
 801c742:	4618      	mov	r0, r3
 801c744:	f7fd fff7 	bl	801a736 <st_word>
					fs->wflag = 1;
 801c748:	68bb      	ldr	r3, [r7, #8]
 801c74a:	2201      	movs	r2, #1
 801c74c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801c74e:	68bb      	ldr	r3, [r7, #8]
 801c750:	4618      	mov	r0, r3
 801c752:	f7fe fa93 	bl	801ac7c <sync_fs>
 801c756:	4603      	mov	r3, r0
 801c758:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801c75a:	687b      	ldr	r3, [r7, #4]
 801c75c:	7d1b      	ldrb	r3, [r3, #20]
 801c75e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c762:	b2da      	uxtb	r2, r3
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801c768:	7dfb      	ldrb	r3, [r7, #23]
}
 801c76a:	4618      	mov	r0, r3
 801c76c:	3718      	adds	r7, #24
 801c76e:	46bd      	mov	sp, r7
 801c770:	bd80      	pop	{r7, pc}

0801c772 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801c772:	b580      	push	{r7, lr}
 801c774:	b084      	sub	sp, #16
 801c776:	af00      	add	r7, sp, #0
 801c778:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801c77a:	6878      	ldr	r0, [r7, #4]
 801c77c:	f7ff ff7b 	bl	801c676 <f_sync>
 801c780:	4603      	mov	r3, r0
 801c782:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801c784:	7bfb      	ldrb	r3, [r7, #15]
 801c786:	2b00      	cmp	r3, #0
 801c788:	d118      	bne.n	801c7bc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801c78a:	687b      	ldr	r3, [r7, #4]
 801c78c:	f107 0208 	add.w	r2, r7, #8
 801c790:	4611      	mov	r1, r2
 801c792:	4618      	mov	r0, r3
 801c794:	f7ff fbfa 	bl	801bf8c <validate>
 801c798:	4603      	mov	r3, r0
 801c79a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801c79c:	7bfb      	ldrb	r3, [r7, #15]
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d10c      	bne.n	801c7bc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	691b      	ldr	r3, [r3, #16]
 801c7a6:	4618      	mov	r0, r3
 801c7a8:	f7fe f996 	bl	801aad8 <dec_lock>
 801c7ac:	4603      	mov	r3, r0
 801c7ae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801c7b0:	7bfb      	ldrb	r3, [r7, #15]
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	d102      	bne.n	801c7bc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801c7b6:	687b      	ldr	r3, [r7, #4]
 801c7b8:	2200      	movs	r2, #0
 801c7ba:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801c7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 801c7be:	4618      	mov	r0, r3
 801c7c0:	3710      	adds	r7, #16
 801c7c2:	46bd      	mov	sp, r7
 801c7c4:	bd80      	pop	{r7, pc}
	...

0801c7c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801c7c8:	b480      	push	{r7}
 801c7ca:	b087      	sub	sp, #28
 801c7cc:	af00      	add	r7, sp, #0
 801c7ce:	60f8      	str	r0, [r7, #12]
 801c7d0:	60b9      	str	r1, [r7, #8]
 801c7d2:	4613      	mov	r3, r2
 801c7d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801c7d6:	2301      	movs	r3, #1
 801c7d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801c7da:	2300      	movs	r3, #0
 801c7dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801c7de:	4b1f      	ldr	r3, [pc, #124]	@ (801c85c <FATFS_LinkDriverEx+0x94>)
 801c7e0:	7a5b      	ldrb	r3, [r3, #9]
 801c7e2:	b2db      	uxtb	r3, r3
 801c7e4:	2b00      	cmp	r3, #0
 801c7e6:	d131      	bne.n	801c84c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801c7e8:	4b1c      	ldr	r3, [pc, #112]	@ (801c85c <FATFS_LinkDriverEx+0x94>)
 801c7ea:	7a5b      	ldrb	r3, [r3, #9]
 801c7ec:	b2db      	uxtb	r3, r3
 801c7ee:	461a      	mov	r2, r3
 801c7f0:	4b1a      	ldr	r3, [pc, #104]	@ (801c85c <FATFS_LinkDriverEx+0x94>)
 801c7f2:	2100      	movs	r1, #0
 801c7f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801c7f6:	4b19      	ldr	r3, [pc, #100]	@ (801c85c <FATFS_LinkDriverEx+0x94>)
 801c7f8:	7a5b      	ldrb	r3, [r3, #9]
 801c7fa:	b2db      	uxtb	r3, r3
 801c7fc:	4a17      	ldr	r2, [pc, #92]	@ (801c85c <FATFS_LinkDriverEx+0x94>)
 801c7fe:	009b      	lsls	r3, r3, #2
 801c800:	4413      	add	r3, r2
 801c802:	68fa      	ldr	r2, [r7, #12]
 801c804:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801c806:	4b15      	ldr	r3, [pc, #84]	@ (801c85c <FATFS_LinkDriverEx+0x94>)
 801c808:	7a5b      	ldrb	r3, [r3, #9]
 801c80a:	b2db      	uxtb	r3, r3
 801c80c:	461a      	mov	r2, r3
 801c80e:	4b13      	ldr	r3, [pc, #76]	@ (801c85c <FATFS_LinkDriverEx+0x94>)
 801c810:	4413      	add	r3, r2
 801c812:	79fa      	ldrb	r2, [r7, #7]
 801c814:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801c816:	4b11      	ldr	r3, [pc, #68]	@ (801c85c <FATFS_LinkDriverEx+0x94>)
 801c818:	7a5b      	ldrb	r3, [r3, #9]
 801c81a:	b2db      	uxtb	r3, r3
 801c81c:	1c5a      	adds	r2, r3, #1
 801c81e:	b2d1      	uxtb	r1, r2
 801c820:	4a0e      	ldr	r2, [pc, #56]	@ (801c85c <FATFS_LinkDriverEx+0x94>)
 801c822:	7251      	strb	r1, [r2, #9]
 801c824:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801c826:	7dbb      	ldrb	r3, [r7, #22]
 801c828:	3330      	adds	r3, #48	@ 0x30
 801c82a:	b2da      	uxtb	r2, r3
 801c82c:	68bb      	ldr	r3, [r7, #8]
 801c82e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801c830:	68bb      	ldr	r3, [r7, #8]
 801c832:	3301      	adds	r3, #1
 801c834:	223a      	movs	r2, #58	@ 0x3a
 801c836:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801c838:	68bb      	ldr	r3, [r7, #8]
 801c83a:	3302      	adds	r3, #2
 801c83c:	222f      	movs	r2, #47	@ 0x2f
 801c83e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801c840:	68bb      	ldr	r3, [r7, #8]
 801c842:	3303      	adds	r3, #3
 801c844:	2200      	movs	r2, #0
 801c846:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801c848:	2300      	movs	r3, #0
 801c84a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801c84c:	7dfb      	ldrb	r3, [r7, #23]
}
 801c84e:	4618      	mov	r0, r3
 801c850:	371c      	adds	r7, #28
 801c852:	46bd      	mov	sp, r7
 801c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c858:	4770      	bx	lr
 801c85a:	bf00      	nop
 801c85c:	24000af8 	.word	0x24000af8

0801c860 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801c860:	b580      	push	{r7, lr}
 801c862:	b082      	sub	sp, #8
 801c864:	af00      	add	r7, sp, #0
 801c866:	6078      	str	r0, [r7, #4]
 801c868:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801c86a:	2200      	movs	r2, #0
 801c86c:	6839      	ldr	r1, [r7, #0]
 801c86e:	6878      	ldr	r0, [r7, #4]
 801c870:	f7ff ffaa 	bl	801c7c8 <FATFS_LinkDriverEx>
 801c874:	4603      	mov	r3, r0
}
 801c876:	4618      	mov	r0, r3
 801c878:	3708      	adds	r7, #8
 801c87a:	46bd      	mov	sp, r7
 801c87c:	bd80      	pop	{r7, pc}

0801c87e <_ZdlPvj>:
 801c87e:	f000 ba3b 	b.w	801ccf8 <_ZdlPv>

0801c882 <__cxa_guard_acquire>:
 801c882:	6802      	ldr	r2, [r0, #0]
 801c884:	07d2      	lsls	r2, r2, #31
 801c886:	4603      	mov	r3, r0
 801c888:	d405      	bmi.n	801c896 <__cxa_guard_acquire+0x14>
 801c88a:	7842      	ldrb	r2, [r0, #1]
 801c88c:	b102      	cbz	r2, 801c890 <__cxa_guard_acquire+0xe>
 801c88e:	deff      	udf	#255	@ 0xff
 801c890:	2001      	movs	r0, #1
 801c892:	7058      	strb	r0, [r3, #1]
 801c894:	4770      	bx	lr
 801c896:	2000      	movs	r0, #0
 801c898:	4770      	bx	lr

0801c89a <__cxa_guard_release>:
 801c89a:	2301      	movs	r3, #1
 801c89c:	6003      	str	r3, [r0, #0]
 801c89e:	4770      	bx	lr

0801c8a0 <_Znwj>:
 801c8a0:	2801      	cmp	r0, #1
 801c8a2:	bf38      	it	cc
 801c8a4:	2001      	movcc	r0, #1
 801c8a6:	b510      	push	{r4, lr}
 801c8a8:	4604      	mov	r4, r0
 801c8aa:	4620      	mov	r0, r4
 801c8ac:	f000 fad0 	bl	801ce50 <malloc>
 801c8b0:	b100      	cbz	r0, 801c8b4 <_Znwj+0x14>
 801c8b2:	bd10      	pop	{r4, pc}
 801c8b4:	f000 fa22 	bl	801ccfc <_ZSt15get_new_handlerv>
 801c8b8:	b908      	cbnz	r0, 801c8be <_Znwj+0x1e>
 801c8ba:	f000 fac1 	bl	801ce40 <abort>
 801c8be:	4780      	blx	r0
 801c8c0:	e7f3      	b.n	801c8aa <_Znwj+0xa>

0801c8c2 <_ZNSaIcEC1Ev>:
 801c8c2:	4770      	bx	lr

0801c8c4 <_ZNSaIcED1Ev>:
 801c8c4:	4770      	bx	lr

0801c8c6 <_ZSt17__throw_bad_allocv>:
 801c8c6:	b508      	push	{r3, lr}
 801c8c8:	f000 faba 	bl	801ce40 <abort>

0801c8cc <_ZSt28__throw_bad_array_new_lengthv>:
 801c8cc:	b508      	push	{r3, lr}
 801c8ce:	f000 fab7 	bl	801ce40 <abort>

0801c8d2 <_ZSt19__throw_logic_errorPKc>:
 801c8d2:	b508      	push	{r3, lr}
 801c8d4:	f000 fab4 	bl	801ce40 <abort>

0801c8d8 <_ZSt20__throw_length_errorPKc>:
 801c8d8:	b508      	push	{r3, lr}
 801c8da:	f000 fab1 	bl	801ce40 <abort>

0801c8de <_ZSt25__throw_bad_function_callv>:
 801c8de:	b508      	push	{r3, lr}
 801c8e0:	f000 faae 	bl	801ce40 <abort>

0801c8e4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 801c8e4:	4901      	ldr	r1, [pc, #4]	@ (801c8ec <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 801c8e6:	f000 ba95 	b.w	801ce14 <_ZNKSt9type_info7__equalERKS_>
 801c8ea:	bf00      	nop
 801c8ec:	0801eb68 	.word	0x0801eb68

0801c8f0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 801c8f0:	b10a      	cbz	r2, 801c8f6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 801c8f2:	f000 be9c 	b.w	801d62e <memcpy>
 801c8f6:	4770      	bx	lr

0801c8f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 801c8f8:	6001      	str	r1, [r0, #0]
 801c8fa:	4770      	bx	lr

0801c8fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 801c8fc:	6800      	ldr	r0, [r0, #0]
 801c8fe:	4770      	bx	lr

0801c900 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 801c900:	3008      	adds	r0, #8
 801c902:	4770      	bx	lr

0801c904 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 801c904:	6081      	str	r1, [r0, #8]
 801c906:	4770      	bx	lr

0801c908 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 801c908:	6803      	ldr	r3, [r0, #0]
 801c90a:	6041      	str	r1, [r0, #4]
 801c90c:	2200      	movs	r2, #0
 801c90e:	545a      	strb	r2, [r3, r1]
 801c910:	4770      	bx	lr

0801c912 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 801c912:	f850 3b08 	ldr.w	r3, [r0], #8
 801c916:	1a1b      	subs	r3, r3, r0
 801c918:	4258      	negs	r0, r3
 801c91a:	4158      	adcs	r0, r3
 801c91c:	4770      	bx	lr
	...

0801c920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801c920:	b508      	push	{r3, lr}
 801c922:	680b      	ldr	r3, [r1, #0]
 801c924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c928:	d302      	bcc.n	801c930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801c92a:	480d      	ldr	r0, [pc, #52]	@ (801c960 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 801c92c:	f7ff ffd4 	bl	801c8d8 <_ZSt20__throw_length_errorPKc>
 801c930:	4293      	cmp	r3, r2
 801c932:	d90b      	bls.n	801c94c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801c934:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801c938:	ea4f 0042 	mov.w	r0, r2, lsl #1
 801c93c:	d206      	bcs.n	801c94c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801c93e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801c942:	bf2a      	itet	cs
 801c944:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 801c948:	6008      	strcc	r0, [r1, #0]
 801c94a:	600b      	strcs	r3, [r1, #0]
 801c94c:	6808      	ldr	r0, [r1, #0]
 801c94e:	3001      	adds	r0, #1
 801c950:	d501      	bpl.n	801c956 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801c952:	f7ff ffb8 	bl	801c8c6 <_ZSt17__throw_bad_allocv>
 801c956:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801c95a:	f7ff bfa1 	b.w	801c8a0 <_Znwj>
 801c95e:	bf00      	nop
 801c960:	0801eb70 	.word	0x0801eb70

0801c964 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 801c964:	b510      	push	{r4, lr}
 801c966:	4604      	mov	r4, r0
 801c968:	f7ff ffd3 	bl	801c912 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801c96c:	b920      	cbnz	r0, 801c978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 801c96e:	6820      	ldr	r0, [r4, #0]
 801c970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c974:	f000 b9c0 	b.w	801ccf8 <_ZdlPv>
 801c978:	bd10      	pop	{r4, pc}

0801c97a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 801c97a:	6840      	ldr	r0, [r0, #4]
 801c97c:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 801c980:	3901      	subs	r1, #1
 801c982:	1a09      	subs	r1, r1, r0
 801c984:	4291      	cmp	r1, r2
 801c986:	b508      	push	{r3, lr}
 801c988:	d202      	bcs.n	801c990 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 801c98a:	4618      	mov	r0, r3
 801c98c:	f7ff ffa4 	bl	801c8d8 <_ZSt20__throw_length_errorPKc>
 801c990:	bd08      	pop	{r3, pc}

0801c992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 801c992:	2a01      	cmp	r2, #1
 801c994:	b410      	push	{r4}
 801c996:	d104      	bne.n	801c9a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 801c998:	780a      	ldrb	r2, [r1, #0]
 801c99a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c99e:	7002      	strb	r2, [r0, #0]
 801c9a0:	4770      	bx	lr
 801c9a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c9a6:	f7ff bfa3 	b.w	801c8f0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0801c9aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 801c9aa:	2a01      	cmp	r2, #1
 801c9ac:	b430      	push	{r4, r5}
 801c9ae:	d103      	bne.n	801c9b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 801c9b0:	780b      	ldrb	r3, [r1, #0]
 801c9b2:	7003      	strb	r3, [r0, #0]
 801c9b4:	bc30      	pop	{r4, r5}
 801c9b6:	4770      	bx	lr
 801c9b8:	2a00      	cmp	r2, #0
 801c9ba:	d0fb      	beq.n	801c9b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 801c9bc:	bc30      	pop	{r4, r5}
 801c9be:	f000 bd4d 	b.w	801d45c <memmove>

0801c9c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 801c9c2:	460b      	mov	r3, r1
 801c9c4:	2b01      	cmp	r3, #1
 801c9c6:	b410      	push	{r4}
 801c9c8:	4611      	mov	r1, r2
 801c9ca:	4604      	mov	r4, r0
 801c9cc:	d103      	bne.n	801c9d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 801c9ce:	7022      	strb	r2, [r4, #0]
 801c9d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c9d4:	4770      	bx	lr
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	d0fa      	beq.n	801c9d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 801c9da:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c9de:	461a      	mov	r2, r3
 801c9e0:	f000 bd56 	b.w	801d490 <memset>

0801c9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 801c9e4:	b508      	push	{r3, lr}
 801c9e6:	1a52      	subs	r2, r2, r1
 801c9e8:	f7ff ffd3 	bl	801c992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801c9ec:	bd08      	pop	{r3, pc}

0801c9ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 801c9ee:	b508      	push	{r3, lr}
 801c9f0:	1a52      	subs	r2, r2, r1
 801c9f2:	f7ff ffce 	bl	801c992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801c9f6:	bd08      	pop	{r3, pc}

0801c9f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801c9f8:	b510      	push	{r4, lr}
 801c9fa:	4604      	mov	r4, r0
 801c9fc:	f7ff ffb2 	bl	801c964 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801ca00:	4620      	mov	r0, r4
 801ca02:	bd10      	pop	{r4, pc}

0801ca04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 801ca04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca06:	460c      	mov	r4, r1
 801ca08:	4605      	mov	r5, r0
 801ca0a:	f7ff ff82 	bl	801c912 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801ca0e:	4606      	mov	r6, r0
 801ca10:	4620      	mov	r0, r4
 801ca12:	f7ff ff7e 	bl	801c912 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801ca16:	b190      	cbz	r0, 801ca3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 801ca18:	42a5      	cmp	r5, r4
 801ca1a:	d00a      	beq.n	801ca32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 801ca1c:	6862      	ldr	r2, [r4, #4]
 801ca1e:	b11a      	cbz	r2, 801ca28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 801ca20:	6821      	ldr	r1, [r4, #0]
 801ca22:	6828      	ldr	r0, [r5, #0]
 801ca24:	f7ff ffb5 	bl	801c992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801ca28:	6863      	ldr	r3, [r4, #4]
 801ca2a:	682a      	ldr	r2, [r5, #0]
 801ca2c:	606b      	str	r3, [r5, #4]
 801ca2e:	2100      	movs	r1, #0
 801ca30:	54d1      	strb	r1, [r2, r3]
 801ca32:	6822      	ldr	r2, [r4, #0]
 801ca34:	2300      	movs	r3, #0
 801ca36:	6063      	str	r3, [r4, #4]
 801ca38:	7013      	strb	r3, [r2, #0]
 801ca3a:	4628      	mov	r0, r5
 801ca3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ca3e:	b90e      	cbnz	r6, 801ca44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 801ca40:	6828      	ldr	r0, [r5, #0]
 801ca42:	68af      	ldr	r7, [r5, #8]
 801ca44:	6823      	ldr	r3, [r4, #0]
 801ca46:	602b      	str	r3, [r5, #0]
 801ca48:	6863      	ldr	r3, [r4, #4]
 801ca4a:	606b      	str	r3, [r5, #4]
 801ca4c:	68a3      	ldr	r3, [r4, #8]
 801ca4e:	60ab      	str	r3, [r5, #8]
 801ca50:	b110      	cbz	r0, 801ca58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 801ca52:	6020      	str	r0, [r4, #0]
 801ca54:	60a7      	str	r7, [r4, #8]
 801ca56:	e7ec      	b.n	801ca32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 801ca58:	f104 0308 	add.w	r3, r4, #8
 801ca5c:	6023      	str	r3, [r4, #0]
 801ca5e:	e7e8      	b.n	801ca32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

0801ca60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 801ca60:	b510      	push	{r4, lr}
 801ca62:	4604      	mov	r4, r0
 801ca64:	f7ff ff55 	bl	801c912 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801ca68:	b908      	cbnz	r0, 801ca6e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 801ca6a:	68a0      	ldr	r0, [r4, #8]
 801ca6c:	bd10      	pop	{r4, pc}
 801ca6e:	200f      	movs	r0, #15
 801ca70:	e7fc      	b.n	801ca6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

0801ca72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 801ca72:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801ca76:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801ca78:	461f      	mov	r7, r3
 801ca7a:	6843      	ldr	r3, [r0, #4]
 801ca7c:	eb01 0802 	add.w	r8, r1, r2
 801ca80:	1ab2      	subs	r2, r6, r2
 801ca82:	441a      	add	r2, r3
 801ca84:	4604      	mov	r4, r0
 801ca86:	460d      	mov	r5, r1
 801ca88:	eba3 0908 	sub.w	r9, r3, r8
 801ca8c:	9201      	str	r2, [sp, #4]
 801ca8e:	f7ff ffe7 	bl	801ca60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801ca92:	a901      	add	r1, sp, #4
 801ca94:	4602      	mov	r2, r0
 801ca96:	4620      	mov	r0, r4
 801ca98:	f7ff ff42 	bl	801c920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801ca9c:	4682      	mov	sl, r0
 801ca9e:	b11d      	cbz	r5, 801caa8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 801caa0:	6821      	ldr	r1, [r4, #0]
 801caa2:	462a      	mov	r2, r5
 801caa4:	f7ff ff75 	bl	801c992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801caa8:	b137      	cbz	r7, 801cab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 801caaa:	b12e      	cbz	r6, 801cab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 801caac:	4632      	mov	r2, r6
 801caae:	4639      	mov	r1, r7
 801cab0:	eb0a 0005 	add.w	r0, sl, r5
 801cab4:	f7ff ff6d 	bl	801c992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801cab8:	f1b9 0f00 	cmp.w	r9, #0
 801cabc:	d007      	beq.n	801cace <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 801cabe:	6821      	ldr	r1, [r4, #0]
 801cac0:	4435      	add	r5, r6
 801cac2:	464a      	mov	r2, r9
 801cac4:	4441      	add	r1, r8
 801cac6:	eb0a 0005 	add.w	r0, sl, r5
 801caca:	f7ff ff62 	bl	801c992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801cace:	4620      	mov	r0, r4
 801cad0:	f7ff ff48 	bl	801c964 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801cad4:	9b01      	ldr	r3, [sp, #4]
 801cad6:	f8c4 a000 	str.w	sl, [r4]
 801cada:	60a3      	str	r3, [r4, #8]
 801cadc:	b002      	add	sp, #8
 801cade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801cae2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 801cae2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cae4:	4604      	mov	r4, r0
 801cae6:	9101      	str	r1, [sp, #4]
 801cae8:	f7ff ffba 	bl	801ca60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801caec:	9b01      	ldr	r3, [sp, #4]
 801caee:	4283      	cmp	r3, r0
 801caf0:	4602      	mov	r2, r0
 801caf2:	d90f      	bls.n	801cb14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 801caf4:	a901      	add	r1, sp, #4
 801caf6:	4620      	mov	r0, r4
 801caf8:	f7ff ff12 	bl	801c920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801cafc:	6862      	ldr	r2, [r4, #4]
 801cafe:	6821      	ldr	r1, [r4, #0]
 801cb00:	3201      	adds	r2, #1
 801cb02:	4605      	mov	r5, r0
 801cb04:	f7ff ff45 	bl	801c992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801cb08:	4620      	mov	r0, r4
 801cb0a:	f7ff ff2b 	bl	801c964 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801cb0e:	9b01      	ldr	r3, [sp, #4]
 801cb10:	6025      	str	r5, [r4, #0]
 801cb12:	60a3      	str	r3, [r4, #8]
 801cb14:	b003      	add	sp, #12
 801cb16:	bd30      	pop	{r4, r5, pc}

0801cb18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 801cb18:	6802      	ldr	r2, [r0, #0]
 801cb1a:	2300      	movs	r3, #0
 801cb1c:	6043      	str	r3, [r0, #4]
 801cb1e:	7013      	strb	r3, [r2, #0]
 801cb20:	4770      	bx	lr

0801cb22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 801cb22:	6800      	ldr	r0, [r0, #0]
 801cb24:	4408      	add	r0, r1
 801cb26:	4770      	bx	lr

0801cb28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 801cb28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cb2c:	4616      	mov	r6, r2
 801cb2e:	461d      	mov	r5, r3
 801cb30:	4604      	mov	r4, r0
 801cb32:	4b1b      	ldr	r3, [pc, #108]	@ (801cba0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 801cb34:	462a      	mov	r2, r5
 801cb36:	460f      	mov	r7, r1
 801cb38:	4631      	mov	r1, r6
 801cb3a:	f7ff ff1e 	bl	801c97a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801cb3e:	4620      	mov	r0, r4
 801cb40:	f7ff ff8e 	bl	801ca60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801cb44:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801cb48:	eba5 0806 	sub.w	r8, r5, r6
 801cb4c:	44c8      	add	r8, r9
 801cb4e:	4540      	cmp	r0, r8
 801cb50:	d31d      	bcc.n	801cb8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 801cb52:	19f3      	adds	r3, r6, r7
 801cb54:	ebb9 0203 	subs.w	r2, r9, r3
 801cb58:	d007      	beq.n	801cb6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801cb5a:	42ae      	cmp	r6, r5
 801cb5c:	d005      	beq.n	801cb6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801cb5e:	6820      	ldr	r0, [r4, #0]
 801cb60:	4438      	add	r0, r7
 801cb62:	1981      	adds	r1, r0, r6
 801cb64:	4428      	add	r0, r5
 801cb66:	f7ff ff20 	bl	801c9aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801cb6a:	b135      	cbz	r5, 801cb7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 801cb6c:	6820      	ldr	r0, [r4, #0]
 801cb6e:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 801cb72:	4629      	mov	r1, r5
 801cb74:	4438      	add	r0, r7
 801cb76:	f7ff ff24 	bl	801c9c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 801cb7a:	6823      	ldr	r3, [r4, #0]
 801cb7c:	f8c4 8004 	str.w	r8, [r4, #4]
 801cb80:	2200      	movs	r2, #0
 801cb82:	4620      	mov	r0, r4
 801cb84:	f803 2008 	strb.w	r2, [r3, r8]
 801cb88:	b003      	add	sp, #12
 801cb8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cb8e:	9500      	str	r5, [sp, #0]
 801cb90:	2300      	movs	r3, #0
 801cb92:	4632      	mov	r2, r6
 801cb94:	4639      	mov	r1, r7
 801cb96:	4620      	mov	r0, r4
 801cb98:	f7ff ff6b 	bl	801ca72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801cb9c:	e7e5      	b.n	801cb6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801cb9e:	bf00      	nop
 801cba0:	0801eb88 	.word	0x0801eb88

0801cba4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 801cba4:	b507      	push	{r0, r1, r2, lr}
 801cba6:	9200      	str	r2, [sp, #0]
 801cba8:	460b      	mov	r3, r1
 801cbaa:	2200      	movs	r2, #0
 801cbac:	6841      	ldr	r1, [r0, #4]
 801cbae:	f7ff ffbb 	bl	801cb28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 801cbb2:	b003      	add	sp, #12
 801cbb4:	f85d fb04 	ldr.w	pc, [sp], #4

0801cbb8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 801cbb8:	6800      	ldr	r0, [r0, #0]
 801cbba:	4770      	bx	lr

0801cbbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 801cbbc:	6001      	str	r1, [r0, #0]
 801cbbe:	4770      	bx	lr

0801cbc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 801cbc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cbc2:	1a53      	subs	r3, r2, r1
 801cbc4:	2b0f      	cmp	r3, #15
 801cbc6:	4604      	mov	r4, r0
 801cbc8:	460d      	mov	r5, r1
 801cbca:	4616      	mov	r6, r2
 801cbcc:	9301      	str	r3, [sp, #4]
 801cbce:	d906      	bls.n	801cbde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 801cbd0:	2200      	movs	r2, #0
 801cbd2:	a901      	add	r1, sp, #4
 801cbd4:	f7ff fea4 	bl	801c920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801cbd8:	9b01      	ldr	r3, [sp, #4]
 801cbda:	6020      	str	r0, [r4, #0]
 801cbdc:	60a3      	str	r3, [r4, #8]
 801cbde:	4632      	mov	r2, r6
 801cbe0:	4629      	mov	r1, r5
 801cbe2:	6820      	ldr	r0, [r4, #0]
 801cbe4:	f7ff fefe 	bl	801c9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 801cbe8:	9b01      	ldr	r3, [sp, #4]
 801cbea:	6822      	ldr	r2, [r4, #0]
 801cbec:	6063      	str	r3, [r4, #4]
 801cbee:	2100      	movs	r1, #0
 801cbf0:	54d1      	strb	r1, [r2, r3]
 801cbf2:	b002      	add	sp, #8
 801cbf4:	bd70      	pop	{r4, r5, r6, pc}

0801cbf6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 801cbf6:	f100 0208 	add.w	r2, r0, #8
 801cbfa:	b510      	push	{r4, lr}
 801cbfc:	6002      	str	r2, [r0, #0]
 801cbfe:	e9d1 1200 	ldrd	r1, r2, [r1]
 801cc02:	4604      	mov	r4, r0
 801cc04:	f04f 0300 	mov.w	r3, #0
 801cc08:	440a      	add	r2, r1
 801cc0a:	f7ff ffd9 	bl	801cbc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 801cc0e:	4620      	mov	r0, r4
 801cc10:	bd10      	pop	{r4, pc}

0801cc12 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 801cc12:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801cc14:	2400      	movs	r4, #0
 801cc16:	2310      	movs	r3, #16
 801cc18:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801cc1c:	6803      	ldr	r3, [r0, #0]
 801cc1e:	4615      	mov	r5, r2
 801cc20:	699e      	ldr	r6, [r3, #24]
 801cc22:	6812      	ldr	r2, [r2, #0]
 801cc24:	466b      	mov	r3, sp
 801cc26:	e9cd 4400 	strd	r4, r4, [sp]
 801cc2a:	47b0      	blx	r6
 801cc2c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801cc30:	f003 0306 	and.w	r3, r3, #6
 801cc34:	2b06      	cmp	r3, #6
 801cc36:	bf03      	ittte	eq
 801cc38:	9b00      	ldreq	r3, [sp, #0]
 801cc3a:	602b      	streq	r3, [r5, #0]
 801cc3c:	2001      	moveq	r0, #1
 801cc3e:	4620      	movne	r0, r4
 801cc40:	b004      	add	sp, #16
 801cc42:	bd70      	pop	{r4, r5, r6, pc}

0801cc44 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 801cc44:	9800      	ldr	r0, [sp, #0]
 801cc46:	4290      	cmp	r0, r2
 801cc48:	bf0c      	ite	eq
 801cc4a:	2006      	moveq	r0, #6
 801cc4c:	2001      	movne	r0, #1
 801cc4e:	4770      	bx	lr

0801cc50 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 801cc50:	b510      	push	{r4, lr}
 801cc52:	4b03      	ldr	r3, [pc, #12]	@ (801cc60 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 801cc54:	6003      	str	r3, [r0, #0]
 801cc56:	4604      	mov	r4, r0
 801cc58:	f000 f8d9 	bl	801ce0e <_ZNSt9type_infoD1Ev>
 801cc5c:	4620      	mov	r0, r4
 801cc5e:	bd10      	pop	{r4, pc}
 801cc60:	0801ebdc 	.word	0x0801ebdc

0801cc64 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 801cc64:	b510      	push	{r4, lr}
 801cc66:	4604      	mov	r4, r0
 801cc68:	f7ff fff2 	bl	801cc50 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801cc6c:	4620      	mov	r0, r4
 801cc6e:	2108      	movs	r1, #8
 801cc70:	f7ff fe05 	bl	801c87e <_ZdlPvj>
 801cc74:	4620      	mov	r0, r4
 801cc76:	bd10      	pop	{r4, pc}

0801cc78 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 801cc78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc7c:	461f      	mov	r7, r3
 801cc7e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801cc82:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801cc86:	4598      	cmp	r8, r3
 801cc88:	4606      	mov	r6, r0
 801cc8a:	4615      	mov	r5, r2
 801cc8c:	d107      	bne.n	801cc9e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801cc8e:	9907      	ldr	r1, [sp, #28]
 801cc90:	f000 f8c0 	bl	801ce14 <_ZNKSt9type_info7__equalERKS_>
 801cc94:	b118      	cbz	r0, 801cc9e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801cc96:	7165      	strb	r5, [r4, #5]
 801cc98:	2000      	movs	r0, #0
 801cc9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc9e:	4639      	mov	r1, r7
 801cca0:	4630      	mov	r0, r6
 801cca2:	f000 f8b7 	bl	801ce14 <_ZNKSt9type_info7__equalERKS_>
 801cca6:	2800      	cmp	r0, #0
 801cca8:	d0f6      	beq.n	801cc98 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 801ccaa:	2301      	movs	r3, #1
 801ccac:	f8c4 8000 	str.w	r8, [r4]
 801ccb0:	7125      	strb	r5, [r4, #4]
 801ccb2:	71a3      	strb	r3, [r4, #6]
 801ccb4:	e7f0      	b.n	801cc98 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0801ccb6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 801ccb6:	b538      	push	{r3, r4, r5, lr}
 801ccb8:	4615      	mov	r5, r2
 801ccba:	461c      	mov	r4, r3
 801ccbc:	f000 f8aa 	bl	801ce14 <_ZNKSt9type_info7__equalERKS_>
 801ccc0:	b120      	cbz	r0, 801cccc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 801ccc2:	2308      	movs	r3, #8
 801ccc4:	60e3      	str	r3, [r4, #12]
 801ccc6:	2306      	movs	r3, #6
 801ccc8:	6025      	str	r5, [r4, #0]
 801ccca:	7123      	strb	r3, [r4, #4]
 801cccc:	bd38      	pop	{r3, r4, r5, pc}

0801ccce <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 801ccce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ccd2:	4605      	mov	r5, r0
 801ccd4:	460c      	mov	r4, r1
 801ccd6:	4616      	mov	r6, r2
 801ccd8:	461f      	mov	r7, r3
 801ccda:	f000 f89b 	bl	801ce14 <_ZNKSt9type_info7__equalERKS_>
 801ccde:	b948      	cbnz	r0, 801ccf4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801cce0:	2f03      	cmp	r7, #3
 801cce2:	d807      	bhi.n	801ccf4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801cce4:	6823      	ldr	r3, [r4, #0]
 801cce6:	4632      	mov	r2, r6
 801cce8:	4629      	mov	r1, r5
 801ccea:	4620      	mov	r0, r4
 801ccec:	695b      	ldr	r3, [r3, #20]
 801ccee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ccf2:	4718      	bx	r3
 801ccf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ccf8 <_ZdlPv>:
 801ccf8:	f000 b8b2 	b.w	801ce60 <free>

0801ccfc <_ZSt15get_new_handlerv>:
 801ccfc:	4b02      	ldr	r3, [pc, #8]	@ (801cd08 <_ZSt15get_new_handlerv+0xc>)
 801ccfe:	6818      	ldr	r0, [r3, #0]
 801cd00:	f3bf 8f5b 	dmb	ish
 801cd04:	4770      	bx	lr
 801cd06:	bf00      	nop
 801cd08:	24000b04 	.word	0x24000b04

0801cd0c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 801cd0c:	b510      	push	{r4, lr}
 801cd0e:	4b03      	ldr	r3, [pc, #12]	@ (801cd1c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 801cd10:	6003      	str	r3, [r0, #0]
 801cd12:	4604      	mov	r4, r0
 801cd14:	f7ff ff9c 	bl	801cc50 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801cd18:	4620      	mov	r0, r4
 801cd1a:	bd10      	pop	{r4, pc}
 801cd1c:	0801ec3c 	.word	0x0801ec3c

0801cd20 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 801cd20:	b510      	push	{r4, lr}
 801cd22:	4604      	mov	r4, r0
 801cd24:	f7ff fff2 	bl	801cd0c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 801cd28:	4620      	mov	r0, r4
 801cd2a:	210c      	movs	r1, #12
 801cd2c:	f7ff fda7 	bl	801c87e <_ZdlPvj>
 801cd30:	4620      	mov	r0, r4
 801cd32:	bd10      	pop	{r4, pc}

0801cd34 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 801cd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd38:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801cd3c:	4590      	cmp	r8, r2
 801cd3e:	4606      	mov	r6, r0
 801cd40:	460f      	mov	r7, r1
 801cd42:	4615      	mov	r5, r2
 801cd44:	461c      	mov	r4, r3
 801cd46:	d00b      	beq.n	801cd60 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 801cd48:	68b0      	ldr	r0, [r6, #8]
 801cd4a:	6803      	ldr	r3, [r0, #0]
 801cd4c:	f8cd 8018 	str.w	r8, [sp, #24]
 801cd50:	6a1e      	ldr	r6, [r3, #32]
 801cd52:	462a      	mov	r2, r5
 801cd54:	4623      	mov	r3, r4
 801cd56:	4639      	mov	r1, r7
 801cd58:	46b4      	mov	ip, r6
 801cd5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cd5e:	4760      	bx	ip
 801cd60:	4619      	mov	r1, r3
 801cd62:	f000 f857 	bl	801ce14 <_ZNKSt9type_info7__equalERKS_>
 801cd66:	2800      	cmp	r0, #0
 801cd68:	d0ee      	beq.n	801cd48 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 801cd6a:	2006      	movs	r0, #6
 801cd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801cd70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 801cd70:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd74:	460d      	mov	r5, r1
 801cd76:	4619      	mov	r1, r3
 801cd78:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 801cd7c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 801cd80:	4681      	mov	r9, r0
 801cd82:	4617      	mov	r7, r2
 801cd84:	4698      	mov	r8, r3
 801cd86:	f000 f845 	bl	801ce14 <_ZNKSt9type_info7__equalERKS_>
 801cd8a:	b190      	cbz	r0, 801cdb2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 801cd8c:	2d00      	cmp	r5, #0
 801cd8e:	6034      	str	r4, [r6, #0]
 801cd90:	7137      	strb	r7, [r6, #4]
 801cd92:	db09      	blt.n	801cda8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 801cd94:	442c      	add	r4, r5
 801cd96:	45a2      	cmp	sl, r4
 801cd98:	bf14      	ite	ne
 801cd9a:	2401      	movne	r4, #1
 801cd9c:	2406      	moveq	r4, #6
 801cd9e:	71b4      	strb	r4, [r6, #6]
 801cda0:	2000      	movs	r0, #0
 801cda2:	b001      	add	sp, #4
 801cda4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cda8:	3502      	adds	r5, #2
 801cdaa:	d1f9      	bne.n	801cda0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801cdac:	2301      	movs	r3, #1
 801cdae:	71b3      	strb	r3, [r6, #6]
 801cdb0:	e7f6      	b.n	801cda0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801cdb2:	4554      	cmp	r4, sl
 801cdb4:	d106      	bne.n	801cdc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801cdb6:	4659      	mov	r1, fp
 801cdb8:	4648      	mov	r0, r9
 801cdba:	f000 f82b 	bl	801ce14 <_ZNKSt9type_info7__equalERKS_>
 801cdbe:	b108      	cbz	r0, 801cdc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801cdc0:	7177      	strb	r7, [r6, #5]
 801cdc2:	e7ed      	b.n	801cda0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801cdc4:	f8d9 0008 	ldr.w	r0, [r9, #8]
 801cdc8:	6803      	ldr	r3, [r0, #0]
 801cdca:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 801cdce:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 801cdd2:	69dc      	ldr	r4, [r3, #28]
 801cdd4:	463a      	mov	r2, r7
 801cdd6:	4643      	mov	r3, r8
 801cdd8:	4629      	mov	r1, r5
 801cdda:	46a4      	mov	ip, r4
 801cddc:	b001      	add	sp, #4
 801cdde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cde2:	4760      	bx	ip

0801cde4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 801cde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cde8:	4607      	mov	r7, r0
 801cdea:	460c      	mov	r4, r1
 801cdec:	4615      	mov	r5, r2
 801cdee:	461e      	mov	r6, r3
 801cdf0:	f7ff ff61 	bl	801ccb6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 801cdf4:	b948      	cbnz	r0, 801ce0a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 801cdf6:	68b8      	ldr	r0, [r7, #8]
 801cdf8:	6803      	ldr	r3, [r0, #0]
 801cdfa:	699f      	ldr	r7, [r3, #24]
 801cdfc:	462a      	mov	r2, r5
 801cdfe:	4633      	mov	r3, r6
 801ce00:	4621      	mov	r1, r4
 801ce02:	46bc      	mov	ip, r7
 801ce04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ce08:	4760      	bx	ip
 801ce0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ce0e <_ZNSt9type_infoD1Ev>:
 801ce0e:	4770      	bx	lr

0801ce10 <_ZNKSt9type_info14__is_pointer_pEv>:
 801ce10:	2000      	movs	r0, #0
 801ce12:	4770      	bx	lr

0801ce14 <_ZNKSt9type_info7__equalERKS_>:
 801ce14:	4281      	cmp	r1, r0
 801ce16:	b508      	push	{r3, lr}
 801ce18:	d00e      	beq.n	801ce38 <_ZNKSt9type_info7__equalERKS_+0x24>
 801ce1a:	6840      	ldr	r0, [r0, #4]
 801ce1c:	7803      	ldrb	r3, [r0, #0]
 801ce1e:	2b2a      	cmp	r3, #42	@ 0x2a
 801ce20:	d00c      	beq.n	801ce3c <_ZNKSt9type_info7__equalERKS_+0x28>
 801ce22:	6849      	ldr	r1, [r1, #4]
 801ce24:	780b      	ldrb	r3, [r1, #0]
 801ce26:	2b2a      	cmp	r3, #42	@ 0x2a
 801ce28:	bf08      	it	eq
 801ce2a:	3101      	addeq	r1, #1
 801ce2c:	f7e3 fa58 	bl	80002e0 <strcmp>
 801ce30:	fab0 f080 	clz	r0, r0
 801ce34:	0940      	lsrs	r0, r0, #5
 801ce36:	bd08      	pop	{r3, pc}
 801ce38:	2001      	movs	r0, #1
 801ce3a:	e7fc      	b.n	801ce36 <_ZNKSt9type_info7__equalERKS_+0x22>
 801ce3c:	2000      	movs	r0, #0
 801ce3e:	e7fa      	b.n	801ce36 <_ZNKSt9type_info7__equalERKS_+0x22>

0801ce40 <abort>:
 801ce40:	b508      	push	{r3, lr}
 801ce42:	2006      	movs	r0, #6
 801ce44:	f000 fb54 	bl	801d4f0 <raise>
 801ce48:	2001      	movs	r0, #1
 801ce4a:	f7ee fd93 	bl	800b974 <_exit>
	...

0801ce50 <malloc>:
 801ce50:	4b02      	ldr	r3, [pc, #8]	@ (801ce5c <malloc+0xc>)
 801ce52:	4601      	mov	r1, r0
 801ce54:	6818      	ldr	r0, [r3, #0]
 801ce56:	f000 b82d 	b.w	801ceb4 <_malloc_r>
 801ce5a:	bf00      	nop
 801ce5c:	24000038 	.word	0x24000038

0801ce60 <free>:
 801ce60:	4b02      	ldr	r3, [pc, #8]	@ (801ce6c <free+0xc>)
 801ce62:	4601      	mov	r1, r0
 801ce64:	6818      	ldr	r0, [r3, #0]
 801ce66:	f000 bbf1 	b.w	801d64c <_free_r>
 801ce6a:	bf00      	nop
 801ce6c:	24000038 	.word	0x24000038

0801ce70 <sbrk_aligned>:
 801ce70:	b570      	push	{r4, r5, r6, lr}
 801ce72:	4e0f      	ldr	r6, [pc, #60]	@ (801ceb0 <sbrk_aligned+0x40>)
 801ce74:	460c      	mov	r4, r1
 801ce76:	6831      	ldr	r1, [r6, #0]
 801ce78:	4605      	mov	r5, r0
 801ce7a:	b911      	cbnz	r1, 801ce82 <sbrk_aligned+0x12>
 801ce7c:	f000 fb88 	bl	801d590 <_sbrk_r>
 801ce80:	6030      	str	r0, [r6, #0]
 801ce82:	4621      	mov	r1, r4
 801ce84:	4628      	mov	r0, r5
 801ce86:	f000 fb83 	bl	801d590 <_sbrk_r>
 801ce8a:	1c43      	adds	r3, r0, #1
 801ce8c:	d103      	bne.n	801ce96 <sbrk_aligned+0x26>
 801ce8e:	f04f 34ff 	mov.w	r4, #4294967295
 801ce92:	4620      	mov	r0, r4
 801ce94:	bd70      	pop	{r4, r5, r6, pc}
 801ce96:	1cc4      	adds	r4, r0, #3
 801ce98:	f024 0403 	bic.w	r4, r4, #3
 801ce9c:	42a0      	cmp	r0, r4
 801ce9e:	d0f8      	beq.n	801ce92 <sbrk_aligned+0x22>
 801cea0:	1a21      	subs	r1, r4, r0
 801cea2:	4628      	mov	r0, r5
 801cea4:	f000 fb74 	bl	801d590 <_sbrk_r>
 801cea8:	3001      	adds	r0, #1
 801ceaa:	d1f2      	bne.n	801ce92 <sbrk_aligned+0x22>
 801ceac:	e7ef      	b.n	801ce8e <sbrk_aligned+0x1e>
 801ceae:	bf00      	nop
 801ceb0:	24000b08 	.word	0x24000b08

0801ceb4 <_malloc_r>:
 801ceb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ceb8:	1ccd      	adds	r5, r1, #3
 801ceba:	f025 0503 	bic.w	r5, r5, #3
 801cebe:	3508      	adds	r5, #8
 801cec0:	2d0c      	cmp	r5, #12
 801cec2:	bf38      	it	cc
 801cec4:	250c      	movcc	r5, #12
 801cec6:	2d00      	cmp	r5, #0
 801cec8:	4606      	mov	r6, r0
 801ceca:	db01      	blt.n	801ced0 <_malloc_r+0x1c>
 801cecc:	42a9      	cmp	r1, r5
 801cece:	d904      	bls.n	801ceda <_malloc_r+0x26>
 801ced0:	230c      	movs	r3, #12
 801ced2:	6033      	str	r3, [r6, #0]
 801ced4:	2000      	movs	r0, #0
 801ced6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ceda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801cfb0 <_malloc_r+0xfc>
 801cede:	f000 f869 	bl	801cfb4 <__malloc_lock>
 801cee2:	f8d8 3000 	ldr.w	r3, [r8]
 801cee6:	461c      	mov	r4, r3
 801cee8:	bb44      	cbnz	r4, 801cf3c <_malloc_r+0x88>
 801ceea:	4629      	mov	r1, r5
 801ceec:	4630      	mov	r0, r6
 801ceee:	f7ff ffbf 	bl	801ce70 <sbrk_aligned>
 801cef2:	1c43      	adds	r3, r0, #1
 801cef4:	4604      	mov	r4, r0
 801cef6:	d158      	bne.n	801cfaa <_malloc_r+0xf6>
 801cef8:	f8d8 4000 	ldr.w	r4, [r8]
 801cefc:	4627      	mov	r7, r4
 801cefe:	2f00      	cmp	r7, #0
 801cf00:	d143      	bne.n	801cf8a <_malloc_r+0xd6>
 801cf02:	2c00      	cmp	r4, #0
 801cf04:	d04b      	beq.n	801cf9e <_malloc_r+0xea>
 801cf06:	6823      	ldr	r3, [r4, #0]
 801cf08:	4639      	mov	r1, r7
 801cf0a:	4630      	mov	r0, r6
 801cf0c:	eb04 0903 	add.w	r9, r4, r3
 801cf10:	f000 fb3e 	bl	801d590 <_sbrk_r>
 801cf14:	4581      	cmp	r9, r0
 801cf16:	d142      	bne.n	801cf9e <_malloc_r+0xea>
 801cf18:	6821      	ldr	r1, [r4, #0]
 801cf1a:	1a6d      	subs	r5, r5, r1
 801cf1c:	4629      	mov	r1, r5
 801cf1e:	4630      	mov	r0, r6
 801cf20:	f7ff ffa6 	bl	801ce70 <sbrk_aligned>
 801cf24:	3001      	adds	r0, #1
 801cf26:	d03a      	beq.n	801cf9e <_malloc_r+0xea>
 801cf28:	6823      	ldr	r3, [r4, #0]
 801cf2a:	442b      	add	r3, r5
 801cf2c:	6023      	str	r3, [r4, #0]
 801cf2e:	f8d8 3000 	ldr.w	r3, [r8]
 801cf32:	685a      	ldr	r2, [r3, #4]
 801cf34:	bb62      	cbnz	r2, 801cf90 <_malloc_r+0xdc>
 801cf36:	f8c8 7000 	str.w	r7, [r8]
 801cf3a:	e00f      	b.n	801cf5c <_malloc_r+0xa8>
 801cf3c:	6822      	ldr	r2, [r4, #0]
 801cf3e:	1b52      	subs	r2, r2, r5
 801cf40:	d420      	bmi.n	801cf84 <_malloc_r+0xd0>
 801cf42:	2a0b      	cmp	r2, #11
 801cf44:	d917      	bls.n	801cf76 <_malloc_r+0xc2>
 801cf46:	1961      	adds	r1, r4, r5
 801cf48:	42a3      	cmp	r3, r4
 801cf4a:	6025      	str	r5, [r4, #0]
 801cf4c:	bf18      	it	ne
 801cf4e:	6059      	strne	r1, [r3, #4]
 801cf50:	6863      	ldr	r3, [r4, #4]
 801cf52:	bf08      	it	eq
 801cf54:	f8c8 1000 	streq.w	r1, [r8]
 801cf58:	5162      	str	r2, [r4, r5]
 801cf5a:	604b      	str	r3, [r1, #4]
 801cf5c:	4630      	mov	r0, r6
 801cf5e:	f000 f82f 	bl	801cfc0 <__malloc_unlock>
 801cf62:	f104 000b 	add.w	r0, r4, #11
 801cf66:	1d23      	adds	r3, r4, #4
 801cf68:	f020 0007 	bic.w	r0, r0, #7
 801cf6c:	1ac2      	subs	r2, r0, r3
 801cf6e:	bf1c      	itt	ne
 801cf70:	1a1b      	subne	r3, r3, r0
 801cf72:	50a3      	strne	r3, [r4, r2]
 801cf74:	e7af      	b.n	801ced6 <_malloc_r+0x22>
 801cf76:	6862      	ldr	r2, [r4, #4]
 801cf78:	42a3      	cmp	r3, r4
 801cf7a:	bf0c      	ite	eq
 801cf7c:	f8c8 2000 	streq.w	r2, [r8]
 801cf80:	605a      	strne	r2, [r3, #4]
 801cf82:	e7eb      	b.n	801cf5c <_malloc_r+0xa8>
 801cf84:	4623      	mov	r3, r4
 801cf86:	6864      	ldr	r4, [r4, #4]
 801cf88:	e7ae      	b.n	801cee8 <_malloc_r+0x34>
 801cf8a:	463c      	mov	r4, r7
 801cf8c:	687f      	ldr	r7, [r7, #4]
 801cf8e:	e7b6      	b.n	801cefe <_malloc_r+0x4a>
 801cf90:	461a      	mov	r2, r3
 801cf92:	685b      	ldr	r3, [r3, #4]
 801cf94:	42a3      	cmp	r3, r4
 801cf96:	d1fb      	bne.n	801cf90 <_malloc_r+0xdc>
 801cf98:	2300      	movs	r3, #0
 801cf9a:	6053      	str	r3, [r2, #4]
 801cf9c:	e7de      	b.n	801cf5c <_malloc_r+0xa8>
 801cf9e:	230c      	movs	r3, #12
 801cfa0:	6033      	str	r3, [r6, #0]
 801cfa2:	4630      	mov	r0, r6
 801cfa4:	f000 f80c 	bl	801cfc0 <__malloc_unlock>
 801cfa8:	e794      	b.n	801ced4 <_malloc_r+0x20>
 801cfaa:	6005      	str	r5, [r0, #0]
 801cfac:	e7d6      	b.n	801cf5c <_malloc_r+0xa8>
 801cfae:	bf00      	nop
 801cfb0:	24000b0c 	.word	0x24000b0c

0801cfb4 <__malloc_lock>:
 801cfb4:	4801      	ldr	r0, [pc, #4]	@ (801cfbc <__malloc_lock+0x8>)
 801cfb6:	f000 bb38 	b.w	801d62a <__retarget_lock_acquire_recursive>
 801cfba:	bf00      	nop
 801cfbc:	24000c50 	.word	0x24000c50

0801cfc0 <__malloc_unlock>:
 801cfc0:	4801      	ldr	r0, [pc, #4]	@ (801cfc8 <__malloc_unlock+0x8>)
 801cfc2:	f000 bb33 	b.w	801d62c <__retarget_lock_release_recursive>
 801cfc6:	bf00      	nop
 801cfc8:	24000c50 	.word	0x24000c50

0801cfcc <realloc>:
 801cfcc:	4b02      	ldr	r3, [pc, #8]	@ (801cfd8 <realloc+0xc>)
 801cfce:	460a      	mov	r2, r1
 801cfd0:	4601      	mov	r1, r0
 801cfd2:	6818      	ldr	r0, [r3, #0]
 801cfd4:	f000 b802 	b.w	801cfdc <_realloc_r>
 801cfd8:	24000038 	.word	0x24000038

0801cfdc <_realloc_r>:
 801cfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cfe0:	4680      	mov	r8, r0
 801cfe2:	4615      	mov	r5, r2
 801cfe4:	460c      	mov	r4, r1
 801cfe6:	b921      	cbnz	r1, 801cff2 <_realloc_r+0x16>
 801cfe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cfec:	4611      	mov	r1, r2
 801cfee:	f7ff bf61 	b.w	801ceb4 <_malloc_r>
 801cff2:	b92a      	cbnz	r2, 801d000 <_realloc_r+0x24>
 801cff4:	f000 fb2a 	bl	801d64c <_free_r>
 801cff8:	2400      	movs	r4, #0
 801cffa:	4620      	mov	r0, r4
 801cffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d000:	f000 fb6e 	bl	801d6e0 <_malloc_usable_size_r>
 801d004:	4285      	cmp	r5, r0
 801d006:	4606      	mov	r6, r0
 801d008:	d802      	bhi.n	801d010 <_realloc_r+0x34>
 801d00a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801d00e:	d8f4      	bhi.n	801cffa <_realloc_r+0x1e>
 801d010:	4629      	mov	r1, r5
 801d012:	4640      	mov	r0, r8
 801d014:	f7ff ff4e 	bl	801ceb4 <_malloc_r>
 801d018:	4607      	mov	r7, r0
 801d01a:	2800      	cmp	r0, #0
 801d01c:	d0ec      	beq.n	801cff8 <_realloc_r+0x1c>
 801d01e:	42b5      	cmp	r5, r6
 801d020:	462a      	mov	r2, r5
 801d022:	4621      	mov	r1, r4
 801d024:	bf28      	it	cs
 801d026:	4632      	movcs	r2, r6
 801d028:	f000 fb01 	bl	801d62e <memcpy>
 801d02c:	4621      	mov	r1, r4
 801d02e:	4640      	mov	r0, r8
 801d030:	f000 fb0c 	bl	801d64c <_free_r>
 801d034:	463c      	mov	r4, r7
 801d036:	e7e0      	b.n	801cffa <_realloc_r+0x1e>

0801d038 <std>:
 801d038:	2300      	movs	r3, #0
 801d03a:	b510      	push	{r4, lr}
 801d03c:	4604      	mov	r4, r0
 801d03e:	e9c0 3300 	strd	r3, r3, [r0]
 801d042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d046:	6083      	str	r3, [r0, #8]
 801d048:	8181      	strh	r1, [r0, #12]
 801d04a:	6643      	str	r3, [r0, #100]	@ 0x64
 801d04c:	81c2      	strh	r2, [r0, #14]
 801d04e:	6183      	str	r3, [r0, #24]
 801d050:	4619      	mov	r1, r3
 801d052:	2208      	movs	r2, #8
 801d054:	305c      	adds	r0, #92	@ 0x5c
 801d056:	f000 fa1b 	bl	801d490 <memset>
 801d05a:	4b0d      	ldr	r3, [pc, #52]	@ (801d090 <std+0x58>)
 801d05c:	6263      	str	r3, [r4, #36]	@ 0x24
 801d05e:	4b0d      	ldr	r3, [pc, #52]	@ (801d094 <std+0x5c>)
 801d060:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d062:	4b0d      	ldr	r3, [pc, #52]	@ (801d098 <std+0x60>)
 801d064:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d066:	4b0d      	ldr	r3, [pc, #52]	@ (801d09c <std+0x64>)
 801d068:	6323      	str	r3, [r4, #48]	@ 0x30
 801d06a:	4b0d      	ldr	r3, [pc, #52]	@ (801d0a0 <std+0x68>)
 801d06c:	6224      	str	r4, [r4, #32]
 801d06e:	429c      	cmp	r4, r3
 801d070:	d006      	beq.n	801d080 <std+0x48>
 801d072:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d076:	4294      	cmp	r4, r2
 801d078:	d002      	beq.n	801d080 <std+0x48>
 801d07a:	33d0      	adds	r3, #208	@ 0xd0
 801d07c:	429c      	cmp	r4, r3
 801d07e:	d105      	bne.n	801d08c <std+0x54>
 801d080:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d088:	f000 bace 	b.w	801d628 <__retarget_lock_init_recursive>
 801d08c:	bd10      	pop	{r4, pc}
 801d08e:	bf00      	nop
 801d090:	0801d2ad 	.word	0x0801d2ad
 801d094:	0801d2cf 	.word	0x0801d2cf
 801d098:	0801d307 	.word	0x0801d307
 801d09c:	0801d32b 	.word	0x0801d32b
 801d0a0:	24000b10 	.word	0x24000b10

0801d0a4 <stdio_exit_handler>:
 801d0a4:	4a02      	ldr	r2, [pc, #8]	@ (801d0b0 <stdio_exit_handler+0xc>)
 801d0a6:	4903      	ldr	r1, [pc, #12]	@ (801d0b4 <stdio_exit_handler+0x10>)
 801d0a8:	4803      	ldr	r0, [pc, #12]	@ (801d0b8 <stdio_exit_handler+0x14>)
 801d0aa:	f000 b869 	b.w	801d180 <_fwalk_sglue>
 801d0ae:	bf00      	nop
 801d0b0:	2400002c 	.word	0x2400002c
 801d0b4:	0801dd99 	.word	0x0801dd99
 801d0b8:	2400003c 	.word	0x2400003c

0801d0bc <cleanup_stdio>:
 801d0bc:	6841      	ldr	r1, [r0, #4]
 801d0be:	4b0c      	ldr	r3, [pc, #48]	@ (801d0f0 <cleanup_stdio+0x34>)
 801d0c0:	4299      	cmp	r1, r3
 801d0c2:	b510      	push	{r4, lr}
 801d0c4:	4604      	mov	r4, r0
 801d0c6:	d001      	beq.n	801d0cc <cleanup_stdio+0x10>
 801d0c8:	f000 fe66 	bl	801dd98 <_fflush_r>
 801d0cc:	68a1      	ldr	r1, [r4, #8]
 801d0ce:	4b09      	ldr	r3, [pc, #36]	@ (801d0f4 <cleanup_stdio+0x38>)
 801d0d0:	4299      	cmp	r1, r3
 801d0d2:	d002      	beq.n	801d0da <cleanup_stdio+0x1e>
 801d0d4:	4620      	mov	r0, r4
 801d0d6:	f000 fe5f 	bl	801dd98 <_fflush_r>
 801d0da:	68e1      	ldr	r1, [r4, #12]
 801d0dc:	4b06      	ldr	r3, [pc, #24]	@ (801d0f8 <cleanup_stdio+0x3c>)
 801d0de:	4299      	cmp	r1, r3
 801d0e0:	d004      	beq.n	801d0ec <cleanup_stdio+0x30>
 801d0e2:	4620      	mov	r0, r4
 801d0e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d0e8:	f000 be56 	b.w	801dd98 <_fflush_r>
 801d0ec:	bd10      	pop	{r4, pc}
 801d0ee:	bf00      	nop
 801d0f0:	24000b10 	.word	0x24000b10
 801d0f4:	24000b78 	.word	0x24000b78
 801d0f8:	24000be0 	.word	0x24000be0

0801d0fc <global_stdio_init.part.0>:
 801d0fc:	b510      	push	{r4, lr}
 801d0fe:	4b0b      	ldr	r3, [pc, #44]	@ (801d12c <global_stdio_init.part.0+0x30>)
 801d100:	4c0b      	ldr	r4, [pc, #44]	@ (801d130 <global_stdio_init.part.0+0x34>)
 801d102:	4a0c      	ldr	r2, [pc, #48]	@ (801d134 <global_stdio_init.part.0+0x38>)
 801d104:	601a      	str	r2, [r3, #0]
 801d106:	4620      	mov	r0, r4
 801d108:	2200      	movs	r2, #0
 801d10a:	2104      	movs	r1, #4
 801d10c:	f7ff ff94 	bl	801d038 <std>
 801d110:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d114:	2201      	movs	r2, #1
 801d116:	2109      	movs	r1, #9
 801d118:	f7ff ff8e 	bl	801d038 <std>
 801d11c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d120:	2202      	movs	r2, #2
 801d122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d126:	2112      	movs	r1, #18
 801d128:	f7ff bf86 	b.w	801d038 <std>
 801d12c:	24000c48 	.word	0x24000c48
 801d130:	24000b10 	.word	0x24000b10
 801d134:	0801d0a5 	.word	0x0801d0a5

0801d138 <__sfp_lock_acquire>:
 801d138:	4801      	ldr	r0, [pc, #4]	@ (801d140 <__sfp_lock_acquire+0x8>)
 801d13a:	f000 ba76 	b.w	801d62a <__retarget_lock_acquire_recursive>
 801d13e:	bf00      	nop
 801d140:	24000c51 	.word	0x24000c51

0801d144 <__sfp_lock_release>:
 801d144:	4801      	ldr	r0, [pc, #4]	@ (801d14c <__sfp_lock_release+0x8>)
 801d146:	f000 ba71 	b.w	801d62c <__retarget_lock_release_recursive>
 801d14a:	bf00      	nop
 801d14c:	24000c51 	.word	0x24000c51

0801d150 <__sinit>:
 801d150:	b510      	push	{r4, lr}
 801d152:	4604      	mov	r4, r0
 801d154:	f7ff fff0 	bl	801d138 <__sfp_lock_acquire>
 801d158:	6a23      	ldr	r3, [r4, #32]
 801d15a:	b11b      	cbz	r3, 801d164 <__sinit+0x14>
 801d15c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d160:	f7ff bff0 	b.w	801d144 <__sfp_lock_release>
 801d164:	4b04      	ldr	r3, [pc, #16]	@ (801d178 <__sinit+0x28>)
 801d166:	6223      	str	r3, [r4, #32]
 801d168:	4b04      	ldr	r3, [pc, #16]	@ (801d17c <__sinit+0x2c>)
 801d16a:	681b      	ldr	r3, [r3, #0]
 801d16c:	2b00      	cmp	r3, #0
 801d16e:	d1f5      	bne.n	801d15c <__sinit+0xc>
 801d170:	f7ff ffc4 	bl	801d0fc <global_stdio_init.part.0>
 801d174:	e7f2      	b.n	801d15c <__sinit+0xc>
 801d176:	bf00      	nop
 801d178:	0801d0bd 	.word	0x0801d0bd
 801d17c:	24000c48 	.word	0x24000c48

0801d180 <_fwalk_sglue>:
 801d180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d184:	4607      	mov	r7, r0
 801d186:	4688      	mov	r8, r1
 801d188:	4614      	mov	r4, r2
 801d18a:	2600      	movs	r6, #0
 801d18c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d190:	f1b9 0901 	subs.w	r9, r9, #1
 801d194:	d505      	bpl.n	801d1a2 <_fwalk_sglue+0x22>
 801d196:	6824      	ldr	r4, [r4, #0]
 801d198:	2c00      	cmp	r4, #0
 801d19a:	d1f7      	bne.n	801d18c <_fwalk_sglue+0xc>
 801d19c:	4630      	mov	r0, r6
 801d19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d1a2:	89ab      	ldrh	r3, [r5, #12]
 801d1a4:	2b01      	cmp	r3, #1
 801d1a6:	d907      	bls.n	801d1b8 <_fwalk_sglue+0x38>
 801d1a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d1ac:	3301      	adds	r3, #1
 801d1ae:	d003      	beq.n	801d1b8 <_fwalk_sglue+0x38>
 801d1b0:	4629      	mov	r1, r5
 801d1b2:	4638      	mov	r0, r7
 801d1b4:	47c0      	blx	r8
 801d1b6:	4306      	orrs	r6, r0
 801d1b8:	3568      	adds	r5, #104	@ 0x68
 801d1ba:	e7e9      	b.n	801d190 <_fwalk_sglue+0x10>

0801d1bc <iprintf>:
 801d1bc:	b40f      	push	{r0, r1, r2, r3}
 801d1be:	b507      	push	{r0, r1, r2, lr}
 801d1c0:	4906      	ldr	r1, [pc, #24]	@ (801d1dc <iprintf+0x20>)
 801d1c2:	ab04      	add	r3, sp, #16
 801d1c4:	6808      	ldr	r0, [r1, #0]
 801d1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d1ca:	6881      	ldr	r1, [r0, #8]
 801d1cc:	9301      	str	r3, [sp, #4]
 801d1ce:	f000 fab9 	bl	801d744 <_vfiprintf_r>
 801d1d2:	b003      	add	sp, #12
 801d1d4:	f85d eb04 	ldr.w	lr, [sp], #4
 801d1d8:	b004      	add	sp, #16
 801d1da:	4770      	bx	lr
 801d1dc:	24000038 	.word	0x24000038

0801d1e0 <putchar>:
 801d1e0:	4b02      	ldr	r3, [pc, #8]	@ (801d1ec <putchar+0xc>)
 801d1e2:	4601      	mov	r1, r0
 801d1e4:	6818      	ldr	r0, [r3, #0]
 801d1e6:	6882      	ldr	r2, [r0, #8]
 801d1e8:	f000 be60 	b.w	801deac <_putc_r>
 801d1ec:	24000038 	.word	0x24000038

0801d1f0 <_puts_r>:
 801d1f0:	6a03      	ldr	r3, [r0, #32]
 801d1f2:	b570      	push	{r4, r5, r6, lr}
 801d1f4:	6884      	ldr	r4, [r0, #8]
 801d1f6:	4605      	mov	r5, r0
 801d1f8:	460e      	mov	r6, r1
 801d1fa:	b90b      	cbnz	r3, 801d200 <_puts_r+0x10>
 801d1fc:	f7ff ffa8 	bl	801d150 <__sinit>
 801d200:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d202:	07db      	lsls	r3, r3, #31
 801d204:	d405      	bmi.n	801d212 <_puts_r+0x22>
 801d206:	89a3      	ldrh	r3, [r4, #12]
 801d208:	0598      	lsls	r0, r3, #22
 801d20a:	d402      	bmi.n	801d212 <_puts_r+0x22>
 801d20c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d20e:	f000 fa0c 	bl	801d62a <__retarget_lock_acquire_recursive>
 801d212:	89a3      	ldrh	r3, [r4, #12]
 801d214:	0719      	lsls	r1, r3, #28
 801d216:	d502      	bpl.n	801d21e <_puts_r+0x2e>
 801d218:	6923      	ldr	r3, [r4, #16]
 801d21a:	2b00      	cmp	r3, #0
 801d21c:	d135      	bne.n	801d28a <_puts_r+0x9a>
 801d21e:	4621      	mov	r1, r4
 801d220:	4628      	mov	r0, r5
 801d222:	f000 f8c5 	bl	801d3b0 <__swsetup_r>
 801d226:	b380      	cbz	r0, 801d28a <_puts_r+0x9a>
 801d228:	f04f 35ff 	mov.w	r5, #4294967295
 801d22c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d22e:	07da      	lsls	r2, r3, #31
 801d230:	d405      	bmi.n	801d23e <_puts_r+0x4e>
 801d232:	89a3      	ldrh	r3, [r4, #12]
 801d234:	059b      	lsls	r3, r3, #22
 801d236:	d402      	bmi.n	801d23e <_puts_r+0x4e>
 801d238:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d23a:	f000 f9f7 	bl	801d62c <__retarget_lock_release_recursive>
 801d23e:	4628      	mov	r0, r5
 801d240:	bd70      	pop	{r4, r5, r6, pc}
 801d242:	2b00      	cmp	r3, #0
 801d244:	da04      	bge.n	801d250 <_puts_r+0x60>
 801d246:	69a2      	ldr	r2, [r4, #24]
 801d248:	429a      	cmp	r2, r3
 801d24a:	dc17      	bgt.n	801d27c <_puts_r+0x8c>
 801d24c:	290a      	cmp	r1, #10
 801d24e:	d015      	beq.n	801d27c <_puts_r+0x8c>
 801d250:	6823      	ldr	r3, [r4, #0]
 801d252:	1c5a      	adds	r2, r3, #1
 801d254:	6022      	str	r2, [r4, #0]
 801d256:	7019      	strb	r1, [r3, #0]
 801d258:	68a3      	ldr	r3, [r4, #8]
 801d25a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d25e:	3b01      	subs	r3, #1
 801d260:	60a3      	str	r3, [r4, #8]
 801d262:	2900      	cmp	r1, #0
 801d264:	d1ed      	bne.n	801d242 <_puts_r+0x52>
 801d266:	2b00      	cmp	r3, #0
 801d268:	da11      	bge.n	801d28e <_puts_r+0x9e>
 801d26a:	4622      	mov	r2, r4
 801d26c:	210a      	movs	r1, #10
 801d26e:	4628      	mov	r0, r5
 801d270:	f000 f85f 	bl	801d332 <__swbuf_r>
 801d274:	3001      	adds	r0, #1
 801d276:	d0d7      	beq.n	801d228 <_puts_r+0x38>
 801d278:	250a      	movs	r5, #10
 801d27a:	e7d7      	b.n	801d22c <_puts_r+0x3c>
 801d27c:	4622      	mov	r2, r4
 801d27e:	4628      	mov	r0, r5
 801d280:	f000 f857 	bl	801d332 <__swbuf_r>
 801d284:	3001      	adds	r0, #1
 801d286:	d1e7      	bne.n	801d258 <_puts_r+0x68>
 801d288:	e7ce      	b.n	801d228 <_puts_r+0x38>
 801d28a:	3e01      	subs	r6, #1
 801d28c:	e7e4      	b.n	801d258 <_puts_r+0x68>
 801d28e:	6823      	ldr	r3, [r4, #0]
 801d290:	1c5a      	adds	r2, r3, #1
 801d292:	6022      	str	r2, [r4, #0]
 801d294:	220a      	movs	r2, #10
 801d296:	701a      	strb	r2, [r3, #0]
 801d298:	e7ee      	b.n	801d278 <_puts_r+0x88>
	...

0801d29c <puts>:
 801d29c:	4b02      	ldr	r3, [pc, #8]	@ (801d2a8 <puts+0xc>)
 801d29e:	4601      	mov	r1, r0
 801d2a0:	6818      	ldr	r0, [r3, #0]
 801d2a2:	f7ff bfa5 	b.w	801d1f0 <_puts_r>
 801d2a6:	bf00      	nop
 801d2a8:	24000038 	.word	0x24000038

0801d2ac <__sread>:
 801d2ac:	b510      	push	{r4, lr}
 801d2ae:	460c      	mov	r4, r1
 801d2b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d2b4:	f000 f946 	bl	801d544 <_read_r>
 801d2b8:	2800      	cmp	r0, #0
 801d2ba:	bfab      	itete	ge
 801d2bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d2be:	89a3      	ldrhlt	r3, [r4, #12]
 801d2c0:	181b      	addge	r3, r3, r0
 801d2c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d2c6:	bfac      	ite	ge
 801d2c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d2ca:	81a3      	strhlt	r3, [r4, #12]
 801d2cc:	bd10      	pop	{r4, pc}

0801d2ce <__swrite>:
 801d2ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2d2:	461f      	mov	r7, r3
 801d2d4:	898b      	ldrh	r3, [r1, #12]
 801d2d6:	05db      	lsls	r3, r3, #23
 801d2d8:	4605      	mov	r5, r0
 801d2da:	460c      	mov	r4, r1
 801d2dc:	4616      	mov	r6, r2
 801d2de:	d505      	bpl.n	801d2ec <__swrite+0x1e>
 801d2e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d2e4:	2302      	movs	r3, #2
 801d2e6:	2200      	movs	r2, #0
 801d2e8:	f000 f91a 	bl	801d520 <_lseek_r>
 801d2ec:	89a3      	ldrh	r3, [r4, #12]
 801d2ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d2f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d2f6:	81a3      	strh	r3, [r4, #12]
 801d2f8:	4632      	mov	r2, r6
 801d2fa:	463b      	mov	r3, r7
 801d2fc:	4628      	mov	r0, r5
 801d2fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d302:	f000 b955 	b.w	801d5b0 <_write_r>

0801d306 <__sseek>:
 801d306:	b510      	push	{r4, lr}
 801d308:	460c      	mov	r4, r1
 801d30a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d30e:	f000 f907 	bl	801d520 <_lseek_r>
 801d312:	1c43      	adds	r3, r0, #1
 801d314:	89a3      	ldrh	r3, [r4, #12]
 801d316:	bf15      	itete	ne
 801d318:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d31a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d31e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d322:	81a3      	strheq	r3, [r4, #12]
 801d324:	bf18      	it	ne
 801d326:	81a3      	strhne	r3, [r4, #12]
 801d328:	bd10      	pop	{r4, pc}

0801d32a <__sclose>:
 801d32a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d32e:	f000 b8e7 	b.w	801d500 <_close_r>

0801d332 <__swbuf_r>:
 801d332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d334:	460e      	mov	r6, r1
 801d336:	4614      	mov	r4, r2
 801d338:	4605      	mov	r5, r0
 801d33a:	b118      	cbz	r0, 801d344 <__swbuf_r+0x12>
 801d33c:	6a03      	ldr	r3, [r0, #32]
 801d33e:	b90b      	cbnz	r3, 801d344 <__swbuf_r+0x12>
 801d340:	f7ff ff06 	bl	801d150 <__sinit>
 801d344:	69a3      	ldr	r3, [r4, #24]
 801d346:	60a3      	str	r3, [r4, #8]
 801d348:	89a3      	ldrh	r3, [r4, #12]
 801d34a:	071a      	lsls	r2, r3, #28
 801d34c:	d501      	bpl.n	801d352 <__swbuf_r+0x20>
 801d34e:	6923      	ldr	r3, [r4, #16]
 801d350:	b943      	cbnz	r3, 801d364 <__swbuf_r+0x32>
 801d352:	4621      	mov	r1, r4
 801d354:	4628      	mov	r0, r5
 801d356:	f000 f82b 	bl	801d3b0 <__swsetup_r>
 801d35a:	b118      	cbz	r0, 801d364 <__swbuf_r+0x32>
 801d35c:	f04f 37ff 	mov.w	r7, #4294967295
 801d360:	4638      	mov	r0, r7
 801d362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d364:	6823      	ldr	r3, [r4, #0]
 801d366:	6922      	ldr	r2, [r4, #16]
 801d368:	1a98      	subs	r0, r3, r2
 801d36a:	6963      	ldr	r3, [r4, #20]
 801d36c:	b2f6      	uxtb	r6, r6
 801d36e:	4283      	cmp	r3, r0
 801d370:	4637      	mov	r7, r6
 801d372:	dc05      	bgt.n	801d380 <__swbuf_r+0x4e>
 801d374:	4621      	mov	r1, r4
 801d376:	4628      	mov	r0, r5
 801d378:	f000 fd0e 	bl	801dd98 <_fflush_r>
 801d37c:	2800      	cmp	r0, #0
 801d37e:	d1ed      	bne.n	801d35c <__swbuf_r+0x2a>
 801d380:	68a3      	ldr	r3, [r4, #8]
 801d382:	3b01      	subs	r3, #1
 801d384:	60a3      	str	r3, [r4, #8]
 801d386:	6823      	ldr	r3, [r4, #0]
 801d388:	1c5a      	adds	r2, r3, #1
 801d38a:	6022      	str	r2, [r4, #0]
 801d38c:	701e      	strb	r6, [r3, #0]
 801d38e:	6962      	ldr	r2, [r4, #20]
 801d390:	1c43      	adds	r3, r0, #1
 801d392:	429a      	cmp	r2, r3
 801d394:	d004      	beq.n	801d3a0 <__swbuf_r+0x6e>
 801d396:	89a3      	ldrh	r3, [r4, #12]
 801d398:	07db      	lsls	r3, r3, #31
 801d39a:	d5e1      	bpl.n	801d360 <__swbuf_r+0x2e>
 801d39c:	2e0a      	cmp	r6, #10
 801d39e:	d1df      	bne.n	801d360 <__swbuf_r+0x2e>
 801d3a0:	4621      	mov	r1, r4
 801d3a2:	4628      	mov	r0, r5
 801d3a4:	f000 fcf8 	bl	801dd98 <_fflush_r>
 801d3a8:	2800      	cmp	r0, #0
 801d3aa:	d0d9      	beq.n	801d360 <__swbuf_r+0x2e>
 801d3ac:	e7d6      	b.n	801d35c <__swbuf_r+0x2a>
	...

0801d3b0 <__swsetup_r>:
 801d3b0:	b538      	push	{r3, r4, r5, lr}
 801d3b2:	4b29      	ldr	r3, [pc, #164]	@ (801d458 <__swsetup_r+0xa8>)
 801d3b4:	4605      	mov	r5, r0
 801d3b6:	6818      	ldr	r0, [r3, #0]
 801d3b8:	460c      	mov	r4, r1
 801d3ba:	b118      	cbz	r0, 801d3c4 <__swsetup_r+0x14>
 801d3bc:	6a03      	ldr	r3, [r0, #32]
 801d3be:	b90b      	cbnz	r3, 801d3c4 <__swsetup_r+0x14>
 801d3c0:	f7ff fec6 	bl	801d150 <__sinit>
 801d3c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d3c8:	0719      	lsls	r1, r3, #28
 801d3ca:	d422      	bmi.n	801d412 <__swsetup_r+0x62>
 801d3cc:	06da      	lsls	r2, r3, #27
 801d3ce:	d407      	bmi.n	801d3e0 <__swsetup_r+0x30>
 801d3d0:	2209      	movs	r2, #9
 801d3d2:	602a      	str	r2, [r5, #0]
 801d3d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d3d8:	81a3      	strh	r3, [r4, #12]
 801d3da:	f04f 30ff 	mov.w	r0, #4294967295
 801d3de:	e033      	b.n	801d448 <__swsetup_r+0x98>
 801d3e0:	0758      	lsls	r0, r3, #29
 801d3e2:	d512      	bpl.n	801d40a <__swsetup_r+0x5a>
 801d3e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d3e6:	b141      	cbz	r1, 801d3fa <__swsetup_r+0x4a>
 801d3e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d3ec:	4299      	cmp	r1, r3
 801d3ee:	d002      	beq.n	801d3f6 <__swsetup_r+0x46>
 801d3f0:	4628      	mov	r0, r5
 801d3f2:	f000 f92b 	bl	801d64c <_free_r>
 801d3f6:	2300      	movs	r3, #0
 801d3f8:	6363      	str	r3, [r4, #52]	@ 0x34
 801d3fa:	89a3      	ldrh	r3, [r4, #12]
 801d3fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d400:	81a3      	strh	r3, [r4, #12]
 801d402:	2300      	movs	r3, #0
 801d404:	6063      	str	r3, [r4, #4]
 801d406:	6923      	ldr	r3, [r4, #16]
 801d408:	6023      	str	r3, [r4, #0]
 801d40a:	89a3      	ldrh	r3, [r4, #12]
 801d40c:	f043 0308 	orr.w	r3, r3, #8
 801d410:	81a3      	strh	r3, [r4, #12]
 801d412:	6923      	ldr	r3, [r4, #16]
 801d414:	b94b      	cbnz	r3, 801d42a <__swsetup_r+0x7a>
 801d416:	89a3      	ldrh	r3, [r4, #12]
 801d418:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d41c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d420:	d003      	beq.n	801d42a <__swsetup_r+0x7a>
 801d422:	4621      	mov	r1, r4
 801d424:	4628      	mov	r0, r5
 801d426:	f000 fd05 	bl	801de34 <__smakebuf_r>
 801d42a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d42e:	f013 0201 	ands.w	r2, r3, #1
 801d432:	d00a      	beq.n	801d44a <__swsetup_r+0x9a>
 801d434:	2200      	movs	r2, #0
 801d436:	60a2      	str	r2, [r4, #8]
 801d438:	6962      	ldr	r2, [r4, #20]
 801d43a:	4252      	negs	r2, r2
 801d43c:	61a2      	str	r2, [r4, #24]
 801d43e:	6922      	ldr	r2, [r4, #16]
 801d440:	b942      	cbnz	r2, 801d454 <__swsetup_r+0xa4>
 801d442:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d446:	d1c5      	bne.n	801d3d4 <__swsetup_r+0x24>
 801d448:	bd38      	pop	{r3, r4, r5, pc}
 801d44a:	0799      	lsls	r1, r3, #30
 801d44c:	bf58      	it	pl
 801d44e:	6962      	ldrpl	r2, [r4, #20]
 801d450:	60a2      	str	r2, [r4, #8]
 801d452:	e7f4      	b.n	801d43e <__swsetup_r+0x8e>
 801d454:	2000      	movs	r0, #0
 801d456:	e7f7      	b.n	801d448 <__swsetup_r+0x98>
 801d458:	24000038 	.word	0x24000038

0801d45c <memmove>:
 801d45c:	4288      	cmp	r0, r1
 801d45e:	b510      	push	{r4, lr}
 801d460:	eb01 0402 	add.w	r4, r1, r2
 801d464:	d902      	bls.n	801d46c <memmove+0x10>
 801d466:	4284      	cmp	r4, r0
 801d468:	4623      	mov	r3, r4
 801d46a:	d807      	bhi.n	801d47c <memmove+0x20>
 801d46c:	1e43      	subs	r3, r0, #1
 801d46e:	42a1      	cmp	r1, r4
 801d470:	d008      	beq.n	801d484 <memmove+0x28>
 801d472:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d476:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d47a:	e7f8      	b.n	801d46e <memmove+0x12>
 801d47c:	4402      	add	r2, r0
 801d47e:	4601      	mov	r1, r0
 801d480:	428a      	cmp	r2, r1
 801d482:	d100      	bne.n	801d486 <memmove+0x2a>
 801d484:	bd10      	pop	{r4, pc}
 801d486:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d48a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d48e:	e7f7      	b.n	801d480 <memmove+0x24>

0801d490 <memset>:
 801d490:	4402      	add	r2, r0
 801d492:	4603      	mov	r3, r0
 801d494:	4293      	cmp	r3, r2
 801d496:	d100      	bne.n	801d49a <memset+0xa>
 801d498:	4770      	bx	lr
 801d49a:	f803 1b01 	strb.w	r1, [r3], #1
 801d49e:	e7f9      	b.n	801d494 <memset+0x4>

0801d4a0 <_raise_r>:
 801d4a0:	291f      	cmp	r1, #31
 801d4a2:	b538      	push	{r3, r4, r5, lr}
 801d4a4:	4605      	mov	r5, r0
 801d4a6:	460c      	mov	r4, r1
 801d4a8:	d904      	bls.n	801d4b4 <_raise_r+0x14>
 801d4aa:	2316      	movs	r3, #22
 801d4ac:	6003      	str	r3, [r0, #0]
 801d4ae:	f04f 30ff 	mov.w	r0, #4294967295
 801d4b2:	bd38      	pop	{r3, r4, r5, pc}
 801d4b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801d4b6:	b112      	cbz	r2, 801d4be <_raise_r+0x1e>
 801d4b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d4bc:	b94b      	cbnz	r3, 801d4d2 <_raise_r+0x32>
 801d4be:	4628      	mov	r0, r5
 801d4c0:	f000 f864 	bl	801d58c <_getpid_r>
 801d4c4:	4622      	mov	r2, r4
 801d4c6:	4601      	mov	r1, r0
 801d4c8:	4628      	mov	r0, r5
 801d4ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d4ce:	f000 b84b 	b.w	801d568 <_kill_r>
 801d4d2:	2b01      	cmp	r3, #1
 801d4d4:	d00a      	beq.n	801d4ec <_raise_r+0x4c>
 801d4d6:	1c59      	adds	r1, r3, #1
 801d4d8:	d103      	bne.n	801d4e2 <_raise_r+0x42>
 801d4da:	2316      	movs	r3, #22
 801d4dc:	6003      	str	r3, [r0, #0]
 801d4de:	2001      	movs	r0, #1
 801d4e0:	e7e7      	b.n	801d4b2 <_raise_r+0x12>
 801d4e2:	2100      	movs	r1, #0
 801d4e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801d4e8:	4620      	mov	r0, r4
 801d4ea:	4798      	blx	r3
 801d4ec:	2000      	movs	r0, #0
 801d4ee:	e7e0      	b.n	801d4b2 <_raise_r+0x12>

0801d4f0 <raise>:
 801d4f0:	4b02      	ldr	r3, [pc, #8]	@ (801d4fc <raise+0xc>)
 801d4f2:	4601      	mov	r1, r0
 801d4f4:	6818      	ldr	r0, [r3, #0]
 801d4f6:	f7ff bfd3 	b.w	801d4a0 <_raise_r>
 801d4fa:	bf00      	nop
 801d4fc:	24000038 	.word	0x24000038

0801d500 <_close_r>:
 801d500:	b538      	push	{r3, r4, r5, lr}
 801d502:	4d06      	ldr	r5, [pc, #24]	@ (801d51c <_close_r+0x1c>)
 801d504:	2300      	movs	r3, #0
 801d506:	4604      	mov	r4, r0
 801d508:	4608      	mov	r0, r1
 801d50a:	602b      	str	r3, [r5, #0]
 801d50c:	f7ee fa76 	bl	800b9fc <_close>
 801d510:	1c43      	adds	r3, r0, #1
 801d512:	d102      	bne.n	801d51a <_close_r+0x1a>
 801d514:	682b      	ldr	r3, [r5, #0]
 801d516:	b103      	cbz	r3, 801d51a <_close_r+0x1a>
 801d518:	6023      	str	r3, [r4, #0]
 801d51a:	bd38      	pop	{r3, r4, r5, pc}
 801d51c:	24000c4c 	.word	0x24000c4c

0801d520 <_lseek_r>:
 801d520:	b538      	push	{r3, r4, r5, lr}
 801d522:	4d07      	ldr	r5, [pc, #28]	@ (801d540 <_lseek_r+0x20>)
 801d524:	4604      	mov	r4, r0
 801d526:	4608      	mov	r0, r1
 801d528:	4611      	mov	r1, r2
 801d52a:	2200      	movs	r2, #0
 801d52c:	602a      	str	r2, [r5, #0]
 801d52e:	461a      	mov	r2, r3
 801d530:	f7ee fa8b 	bl	800ba4a <_lseek>
 801d534:	1c43      	adds	r3, r0, #1
 801d536:	d102      	bne.n	801d53e <_lseek_r+0x1e>
 801d538:	682b      	ldr	r3, [r5, #0]
 801d53a:	b103      	cbz	r3, 801d53e <_lseek_r+0x1e>
 801d53c:	6023      	str	r3, [r4, #0]
 801d53e:	bd38      	pop	{r3, r4, r5, pc}
 801d540:	24000c4c 	.word	0x24000c4c

0801d544 <_read_r>:
 801d544:	b538      	push	{r3, r4, r5, lr}
 801d546:	4d07      	ldr	r5, [pc, #28]	@ (801d564 <_read_r+0x20>)
 801d548:	4604      	mov	r4, r0
 801d54a:	4608      	mov	r0, r1
 801d54c:	4611      	mov	r1, r2
 801d54e:	2200      	movs	r2, #0
 801d550:	602a      	str	r2, [r5, #0]
 801d552:	461a      	mov	r2, r3
 801d554:	f7ee fa19 	bl	800b98a <_read>
 801d558:	1c43      	adds	r3, r0, #1
 801d55a:	d102      	bne.n	801d562 <_read_r+0x1e>
 801d55c:	682b      	ldr	r3, [r5, #0]
 801d55e:	b103      	cbz	r3, 801d562 <_read_r+0x1e>
 801d560:	6023      	str	r3, [r4, #0]
 801d562:	bd38      	pop	{r3, r4, r5, pc}
 801d564:	24000c4c 	.word	0x24000c4c

0801d568 <_kill_r>:
 801d568:	b538      	push	{r3, r4, r5, lr}
 801d56a:	4d07      	ldr	r5, [pc, #28]	@ (801d588 <_kill_r+0x20>)
 801d56c:	2300      	movs	r3, #0
 801d56e:	4604      	mov	r4, r0
 801d570:	4608      	mov	r0, r1
 801d572:	4611      	mov	r1, r2
 801d574:	602b      	str	r3, [r5, #0]
 801d576:	f7ee f9ed 	bl	800b954 <_kill>
 801d57a:	1c43      	adds	r3, r0, #1
 801d57c:	d102      	bne.n	801d584 <_kill_r+0x1c>
 801d57e:	682b      	ldr	r3, [r5, #0]
 801d580:	b103      	cbz	r3, 801d584 <_kill_r+0x1c>
 801d582:	6023      	str	r3, [r4, #0]
 801d584:	bd38      	pop	{r3, r4, r5, pc}
 801d586:	bf00      	nop
 801d588:	24000c4c 	.word	0x24000c4c

0801d58c <_getpid_r>:
 801d58c:	f7ee b9da 	b.w	800b944 <_getpid>

0801d590 <_sbrk_r>:
 801d590:	b538      	push	{r3, r4, r5, lr}
 801d592:	4d06      	ldr	r5, [pc, #24]	@ (801d5ac <_sbrk_r+0x1c>)
 801d594:	2300      	movs	r3, #0
 801d596:	4604      	mov	r4, r0
 801d598:	4608      	mov	r0, r1
 801d59a:	602b      	str	r3, [r5, #0]
 801d59c:	f7ee fa62 	bl	800ba64 <_sbrk>
 801d5a0:	1c43      	adds	r3, r0, #1
 801d5a2:	d102      	bne.n	801d5aa <_sbrk_r+0x1a>
 801d5a4:	682b      	ldr	r3, [r5, #0]
 801d5a6:	b103      	cbz	r3, 801d5aa <_sbrk_r+0x1a>
 801d5a8:	6023      	str	r3, [r4, #0]
 801d5aa:	bd38      	pop	{r3, r4, r5, pc}
 801d5ac:	24000c4c 	.word	0x24000c4c

0801d5b0 <_write_r>:
 801d5b0:	b538      	push	{r3, r4, r5, lr}
 801d5b2:	4d07      	ldr	r5, [pc, #28]	@ (801d5d0 <_write_r+0x20>)
 801d5b4:	4604      	mov	r4, r0
 801d5b6:	4608      	mov	r0, r1
 801d5b8:	4611      	mov	r1, r2
 801d5ba:	2200      	movs	r2, #0
 801d5bc:	602a      	str	r2, [r5, #0]
 801d5be:	461a      	mov	r2, r3
 801d5c0:	f7ee fa00 	bl	800b9c4 <_write>
 801d5c4:	1c43      	adds	r3, r0, #1
 801d5c6:	d102      	bne.n	801d5ce <_write_r+0x1e>
 801d5c8:	682b      	ldr	r3, [r5, #0]
 801d5ca:	b103      	cbz	r3, 801d5ce <_write_r+0x1e>
 801d5cc:	6023      	str	r3, [r4, #0]
 801d5ce:	bd38      	pop	{r3, r4, r5, pc}
 801d5d0:	24000c4c 	.word	0x24000c4c

0801d5d4 <__errno>:
 801d5d4:	4b01      	ldr	r3, [pc, #4]	@ (801d5dc <__errno+0x8>)
 801d5d6:	6818      	ldr	r0, [r3, #0]
 801d5d8:	4770      	bx	lr
 801d5da:	bf00      	nop
 801d5dc:	24000038 	.word	0x24000038

0801d5e0 <__libc_init_array>:
 801d5e0:	b570      	push	{r4, r5, r6, lr}
 801d5e2:	4d0d      	ldr	r5, [pc, #52]	@ (801d618 <__libc_init_array+0x38>)
 801d5e4:	4c0d      	ldr	r4, [pc, #52]	@ (801d61c <__libc_init_array+0x3c>)
 801d5e6:	1b64      	subs	r4, r4, r5
 801d5e8:	10a4      	asrs	r4, r4, #2
 801d5ea:	2600      	movs	r6, #0
 801d5ec:	42a6      	cmp	r6, r4
 801d5ee:	d109      	bne.n	801d604 <__libc_init_array+0x24>
 801d5f0:	4d0b      	ldr	r5, [pc, #44]	@ (801d620 <__libc_init_array+0x40>)
 801d5f2:	4c0c      	ldr	r4, [pc, #48]	@ (801d624 <__libc_init_array+0x44>)
 801d5f4:	f000 fcb0 	bl	801df58 <_init>
 801d5f8:	1b64      	subs	r4, r4, r5
 801d5fa:	10a4      	asrs	r4, r4, #2
 801d5fc:	2600      	movs	r6, #0
 801d5fe:	42a6      	cmp	r6, r4
 801d600:	d105      	bne.n	801d60e <__libc_init_array+0x2e>
 801d602:	bd70      	pop	{r4, r5, r6, pc}
 801d604:	f855 3b04 	ldr.w	r3, [r5], #4
 801d608:	4798      	blx	r3
 801d60a:	3601      	adds	r6, #1
 801d60c:	e7ee      	b.n	801d5ec <__libc_init_array+0xc>
 801d60e:	f855 3b04 	ldr.w	r3, [r5], #4
 801d612:	4798      	blx	r3
 801d614:	3601      	adds	r6, #1
 801d616:	e7f2      	b.n	801d5fe <__libc_init_array+0x1e>
 801d618:	0801ecb4 	.word	0x0801ecb4
 801d61c:	0801ecb4 	.word	0x0801ecb4
 801d620:	0801ecb4 	.word	0x0801ecb4
 801d624:	0801ecc0 	.word	0x0801ecc0

0801d628 <__retarget_lock_init_recursive>:
 801d628:	4770      	bx	lr

0801d62a <__retarget_lock_acquire_recursive>:
 801d62a:	4770      	bx	lr

0801d62c <__retarget_lock_release_recursive>:
 801d62c:	4770      	bx	lr

0801d62e <memcpy>:
 801d62e:	440a      	add	r2, r1
 801d630:	4291      	cmp	r1, r2
 801d632:	f100 33ff 	add.w	r3, r0, #4294967295
 801d636:	d100      	bne.n	801d63a <memcpy+0xc>
 801d638:	4770      	bx	lr
 801d63a:	b510      	push	{r4, lr}
 801d63c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d640:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d644:	4291      	cmp	r1, r2
 801d646:	d1f9      	bne.n	801d63c <memcpy+0xe>
 801d648:	bd10      	pop	{r4, pc}
	...

0801d64c <_free_r>:
 801d64c:	b538      	push	{r3, r4, r5, lr}
 801d64e:	4605      	mov	r5, r0
 801d650:	2900      	cmp	r1, #0
 801d652:	d041      	beq.n	801d6d8 <_free_r+0x8c>
 801d654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d658:	1f0c      	subs	r4, r1, #4
 801d65a:	2b00      	cmp	r3, #0
 801d65c:	bfb8      	it	lt
 801d65e:	18e4      	addlt	r4, r4, r3
 801d660:	f7ff fca8 	bl	801cfb4 <__malloc_lock>
 801d664:	4a1d      	ldr	r2, [pc, #116]	@ (801d6dc <_free_r+0x90>)
 801d666:	6813      	ldr	r3, [r2, #0]
 801d668:	b933      	cbnz	r3, 801d678 <_free_r+0x2c>
 801d66a:	6063      	str	r3, [r4, #4]
 801d66c:	6014      	str	r4, [r2, #0]
 801d66e:	4628      	mov	r0, r5
 801d670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d674:	f7ff bca4 	b.w	801cfc0 <__malloc_unlock>
 801d678:	42a3      	cmp	r3, r4
 801d67a:	d908      	bls.n	801d68e <_free_r+0x42>
 801d67c:	6820      	ldr	r0, [r4, #0]
 801d67e:	1821      	adds	r1, r4, r0
 801d680:	428b      	cmp	r3, r1
 801d682:	bf01      	itttt	eq
 801d684:	6819      	ldreq	r1, [r3, #0]
 801d686:	685b      	ldreq	r3, [r3, #4]
 801d688:	1809      	addeq	r1, r1, r0
 801d68a:	6021      	streq	r1, [r4, #0]
 801d68c:	e7ed      	b.n	801d66a <_free_r+0x1e>
 801d68e:	461a      	mov	r2, r3
 801d690:	685b      	ldr	r3, [r3, #4]
 801d692:	b10b      	cbz	r3, 801d698 <_free_r+0x4c>
 801d694:	42a3      	cmp	r3, r4
 801d696:	d9fa      	bls.n	801d68e <_free_r+0x42>
 801d698:	6811      	ldr	r1, [r2, #0]
 801d69a:	1850      	adds	r0, r2, r1
 801d69c:	42a0      	cmp	r0, r4
 801d69e:	d10b      	bne.n	801d6b8 <_free_r+0x6c>
 801d6a0:	6820      	ldr	r0, [r4, #0]
 801d6a2:	4401      	add	r1, r0
 801d6a4:	1850      	adds	r0, r2, r1
 801d6a6:	4283      	cmp	r3, r0
 801d6a8:	6011      	str	r1, [r2, #0]
 801d6aa:	d1e0      	bne.n	801d66e <_free_r+0x22>
 801d6ac:	6818      	ldr	r0, [r3, #0]
 801d6ae:	685b      	ldr	r3, [r3, #4]
 801d6b0:	6053      	str	r3, [r2, #4]
 801d6b2:	4408      	add	r0, r1
 801d6b4:	6010      	str	r0, [r2, #0]
 801d6b6:	e7da      	b.n	801d66e <_free_r+0x22>
 801d6b8:	d902      	bls.n	801d6c0 <_free_r+0x74>
 801d6ba:	230c      	movs	r3, #12
 801d6bc:	602b      	str	r3, [r5, #0]
 801d6be:	e7d6      	b.n	801d66e <_free_r+0x22>
 801d6c0:	6820      	ldr	r0, [r4, #0]
 801d6c2:	1821      	adds	r1, r4, r0
 801d6c4:	428b      	cmp	r3, r1
 801d6c6:	bf04      	itt	eq
 801d6c8:	6819      	ldreq	r1, [r3, #0]
 801d6ca:	685b      	ldreq	r3, [r3, #4]
 801d6cc:	6063      	str	r3, [r4, #4]
 801d6ce:	bf04      	itt	eq
 801d6d0:	1809      	addeq	r1, r1, r0
 801d6d2:	6021      	streq	r1, [r4, #0]
 801d6d4:	6054      	str	r4, [r2, #4]
 801d6d6:	e7ca      	b.n	801d66e <_free_r+0x22>
 801d6d8:	bd38      	pop	{r3, r4, r5, pc}
 801d6da:	bf00      	nop
 801d6dc:	24000b0c 	.word	0x24000b0c

0801d6e0 <_malloc_usable_size_r>:
 801d6e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d6e4:	1f18      	subs	r0, r3, #4
 801d6e6:	2b00      	cmp	r3, #0
 801d6e8:	bfbc      	itt	lt
 801d6ea:	580b      	ldrlt	r3, [r1, r0]
 801d6ec:	18c0      	addlt	r0, r0, r3
 801d6ee:	4770      	bx	lr

0801d6f0 <__sfputc_r>:
 801d6f0:	6893      	ldr	r3, [r2, #8]
 801d6f2:	3b01      	subs	r3, #1
 801d6f4:	2b00      	cmp	r3, #0
 801d6f6:	b410      	push	{r4}
 801d6f8:	6093      	str	r3, [r2, #8]
 801d6fa:	da08      	bge.n	801d70e <__sfputc_r+0x1e>
 801d6fc:	6994      	ldr	r4, [r2, #24]
 801d6fe:	42a3      	cmp	r3, r4
 801d700:	db01      	blt.n	801d706 <__sfputc_r+0x16>
 801d702:	290a      	cmp	r1, #10
 801d704:	d103      	bne.n	801d70e <__sfputc_r+0x1e>
 801d706:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d70a:	f7ff be12 	b.w	801d332 <__swbuf_r>
 801d70e:	6813      	ldr	r3, [r2, #0]
 801d710:	1c58      	adds	r0, r3, #1
 801d712:	6010      	str	r0, [r2, #0]
 801d714:	7019      	strb	r1, [r3, #0]
 801d716:	4608      	mov	r0, r1
 801d718:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d71c:	4770      	bx	lr

0801d71e <__sfputs_r>:
 801d71e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d720:	4606      	mov	r6, r0
 801d722:	460f      	mov	r7, r1
 801d724:	4614      	mov	r4, r2
 801d726:	18d5      	adds	r5, r2, r3
 801d728:	42ac      	cmp	r4, r5
 801d72a:	d101      	bne.n	801d730 <__sfputs_r+0x12>
 801d72c:	2000      	movs	r0, #0
 801d72e:	e007      	b.n	801d740 <__sfputs_r+0x22>
 801d730:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d734:	463a      	mov	r2, r7
 801d736:	4630      	mov	r0, r6
 801d738:	f7ff ffda 	bl	801d6f0 <__sfputc_r>
 801d73c:	1c43      	adds	r3, r0, #1
 801d73e:	d1f3      	bne.n	801d728 <__sfputs_r+0xa>
 801d740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d744 <_vfiprintf_r>:
 801d744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d748:	460d      	mov	r5, r1
 801d74a:	b09d      	sub	sp, #116	@ 0x74
 801d74c:	4614      	mov	r4, r2
 801d74e:	4698      	mov	r8, r3
 801d750:	4606      	mov	r6, r0
 801d752:	b118      	cbz	r0, 801d75c <_vfiprintf_r+0x18>
 801d754:	6a03      	ldr	r3, [r0, #32]
 801d756:	b90b      	cbnz	r3, 801d75c <_vfiprintf_r+0x18>
 801d758:	f7ff fcfa 	bl	801d150 <__sinit>
 801d75c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d75e:	07d9      	lsls	r1, r3, #31
 801d760:	d405      	bmi.n	801d76e <_vfiprintf_r+0x2a>
 801d762:	89ab      	ldrh	r3, [r5, #12]
 801d764:	059a      	lsls	r2, r3, #22
 801d766:	d402      	bmi.n	801d76e <_vfiprintf_r+0x2a>
 801d768:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d76a:	f7ff ff5e 	bl	801d62a <__retarget_lock_acquire_recursive>
 801d76e:	89ab      	ldrh	r3, [r5, #12]
 801d770:	071b      	lsls	r3, r3, #28
 801d772:	d501      	bpl.n	801d778 <_vfiprintf_r+0x34>
 801d774:	692b      	ldr	r3, [r5, #16]
 801d776:	b99b      	cbnz	r3, 801d7a0 <_vfiprintf_r+0x5c>
 801d778:	4629      	mov	r1, r5
 801d77a:	4630      	mov	r0, r6
 801d77c:	f7ff fe18 	bl	801d3b0 <__swsetup_r>
 801d780:	b170      	cbz	r0, 801d7a0 <_vfiprintf_r+0x5c>
 801d782:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d784:	07dc      	lsls	r4, r3, #31
 801d786:	d504      	bpl.n	801d792 <_vfiprintf_r+0x4e>
 801d788:	f04f 30ff 	mov.w	r0, #4294967295
 801d78c:	b01d      	add	sp, #116	@ 0x74
 801d78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d792:	89ab      	ldrh	r3, [r5, #12]
 801d794:	0598      	lsls	r0, r3, #22
 801d796:	d4f7      	bmi.n	801d788 <_vfiprintf_r+0x44>
 801d798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d79a:	f7ff ff47 	bl	801d62c <__retarget_lock_release_recursive>
 801d79e:	e7f3      	b.n	801d788 <_vfiprintf_r+0x44>
 801d7a0:	2300      	movs	r3, #0
 801d7a2:	9309      	str	r3, [sp, #36]	@ 0x24
 801d7a4:	2320      	movs	r3, #32
 801d7a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d7aa:	f8cd 800c 	str.w	r8, [sp, #12]
 801d7ae:	2330      	movs	r3, #48	@ 0x30
 801d7b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d960 <_vfiprintf_r+0x21c>
 801d7b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d7b8:	f04f 0901 	mov.w	r9, #1
 801d7bc:	4623      	mov	r3, r4
 801d7be:	469a      	mov	sl, r3
 801d7c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d7c4:	b10a      	cbz	r2, 801d7ca <_vfiprintf_r+0x86>
 801d7c6:	2a25      	cmp	r2, #37	@ 0x25
 801d7c8:	d1f9      	bne.n	801d7be <_vfiprintf_r+0x7a>
 801d7ca:	ebba 0b04 	subs.w	fp, sl, r4
 801d7ce:	d00b      	beq.n	801d7e8 <_vfiprintf_r+0xa4>
 801d7d0:	465b      	mov	r3, fp
 801d7d2:	4622      	mov	r2, r4
 801d7d4:	4629      	mov	r1, r5
 801d7d6:	4630      	mov	r0, r6
 801d7d8:	f7ff ffa1 	bl	801d71e <__sfputs_r>
 801d7dc:	3001      	adds	r0, #1
 801d7de:	f000 80a7 	beq.w	801d930 <_vfiprintf_r+0x1ec>
 801d7e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d7e4:	445a      	add	r2, fp
 801d7e6:	9209      	str	r2, [sp, #36]	@ 0x24
 801d7e8:	f89a 3000 	ldrb.w	r3, [sl]
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	f000 809f 	beq.w	801d930 <_vfiprintf_r+0x1ec>
 801d7f2:	2300      	movs	r3, #0
 801d7f4:	f04f 32ff 	mov.w	r2, #4294967295
 801d7f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d7fc:	f10a 0a01 	add.w	sl, sl, #1
 801d800:	9304      	str	r3, [sp, #16]
 801d802:	9307      	str	r3, [sp, #28]
 801d804:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d808:	931a      	str	r3, [sp, #104]	@ 0x68
 801d80a:	4654      	mov	r4, sl
 801d80c:	2205      	movs	r2, #5
 801d80e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d812:	4853      	ldr	r0, [pc, #332]	@ (801d960 <_vfiprintf_r+0x21c>)
 801d814:	f7e2 fd74 	bl	8000300 <memchr>
 801d818:	9a04      	ldr	r2, [sp, #16]
 801d81a:	b9d8      	cbnz	r0, 801d854 <_vfiprintf_r+0x110>
 801d81c:	06d1      	lsls	r1, r2, #27
 801d81e:	bf44      	itt	mi
 801d820:	2320      	movmi	r3, #32
 801d822:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d826:	0713      	lsls	r3, r2, #28
 801d828:	bf44      	itt	mi
 801d82a:	232b      	movmi	r3, #43	@ 0x2b
 801d82c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d830:	f89a 3000 	ldrb.w	r3, [sl]
 801d834:	2b2a      	cmp	r3, #42	@ 0x2a
 801d836:	d015      	beq.n	801d864 <_vfiprintf_r+0x120>
 801d838:	9a07      	ldr	r2, [sp, #28]
 801d83a:	4654      	mov	r4, sl
 801d83c:	2000      	movs	r0, #0
 801d83e:	f04f 0c0a 	mov.w	ip, #10
 801d842:	4621      	mov	r1, r4
 801d844:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d848:	3b30      	subs	r3, #48	@ 0x30
 801d84a:	2b09      	cmp	r3, #9
 801d84c:	d94b      	bls.n	801d8e6 <_vfiprintf_r+0x1a2>
 801d84e:	b1b0      	cbz	r0, 801d87e <_vfiprintf_r+0x13a>
 801d850:	9207      	str	r2, [sp, #28]
 801d852:	e014      	b.n	801d87e <_vfiprintf_r+0x13a>
 801d854:	eba0 0308 	sub.w	r3, r0, r8
 801d858:	fa09 f303 	lsl.w	r3, r9, r3
 801d85c:	4313      	orrs	r3, r2
 801d85e:	9304      	str	r3, [sp, #16]
 801d860:	46a2      	mov	sl, r4
 801d862:	e7d2      	b.n	801d80a <_vfiprintf_r+0xc6>
 801d864:	9b03      	ldr	r3, [sp, #12]
 801d866:	1d19      	adds	r1, r3, #4
 801d868:	681b      	ldr	r3, [r3, #0]
 801d86a:	9103      	str	r1, [sp, #12]
 801d86c:	2b00      	cmp	r3, #0
 801d86e:	bfbb      	ittet	lt
 801d870:	425b      	neglt	r3, r3
 801d872:	f042 0202 	orrlt.w	r2, r2, #2
 801d876:	9307      	strge	r3, [sp, #28]
 801d878:	9307      	strlt	r3, [sp, #28]
 801d87a:	bfb8      	it	lt
 801d87c:	9204      	strlt	r2, [sp, #16]
 801d87e:	7823      	ldrb	r3, [r4, #0]
 801d880:	2b2e      	cmp	r3, #46	@ 0x2e
 801d882:	d10a      	bne.n	801d89a <_vfiprintf_r+0x156>
 801d884:	7863      	ldrb	r3, [r4, #1]
 801d886:	2b2a      	cmp	r3, #42	@ 0x2a
 801d888:	d132      	bne.n	801d8f0 <_vfiprintf_r+0x1ac>
 801d88a:	9b03      	ldr	r3, [sp, #12]
 801d88c:	1d1a      	adds	r2, r3, #4
 801d88e:	681b      	ldr	r3, [r3, #0]
 801d890:	9203      	str	r2, [sp, #12]
 801d892:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d896:	3402      	adds	r4, #2
 801d898:	9305      	str	r3, [sp, #20]
 801d89a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d970 <_vfiprintf_r+0x22c>
 801d89e:	7821      	ldrb	r1, [r4, #0]
 801d8a0:	2203      	movs	r2, #3
 801d8a2:	4650      	mov	r0, sl
 801d8a4:	f7e2 fd2c 	bl	8000300 <memchr>
 801d8a8:	b138      	cbz	r0, 801d8ba <_vfiprintf_r+0x176>
 801d8aa:	9b04      	ldr	r3, [sp, #16]
 801d8ac:	eba0 000a 	sub.w	r0, r0, sl
 801d8b0:	2240      	movs	r2, #64	@ 0x40
 801d8b2:	4082      	lsls	r2, r0
 801d8b4:	4313      	orrs	r3, r2
 801d8b6:	3401      	adds	r4, #1
 801d8b8:	9304      	str	r3, [sp, #16]
 801d8ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d8be:	4829      	ldr	r0, [pc, #164]	@ (801d964 <_vfiprintf_r+0x220>)
 801d8c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d8c4:	2206      	movs	r2, #6
 801d8c6:	f7e2 fd1b 	bl	8000300 <memchr>
 801d8ca:	2800      	cmp	r0, #0
 801d8cc:	d03f      	beq.n	801d94e <_vfiprintf_r+0x20a>
 801d8ce:	4b26      	ldr	r3, [pc, #152]	@ (801d968 <_vfiprintf_r+0x224>)
 801d8d0:	bb1b      	cbnz	r3, 801d91a <_vfiprintf_r+0x1d6>
 801d8d2:	9b03      	ldr	r3, [sp, #12]
 801d8d4:	3307      	adds	r3, #7
 801d8d6:	f023 0307 	bic.w	r3, r3, #7
 801d8da:	3308      	adds	r3, #8
 801d8dc:	9303      	str	r3, [sp, #12]
 801d8de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d8e0:	443b      	add	r3, r7
 801d8e2:	9309      	str	r3, [sp, #36]	@ 0x24
 801d8e4:	e76a      	b.n	801d7bc <_vfiprintf_r+0x78>
 801d8e6:	fb0c 3202 	mla	r2, ip, r2, r3
 801d8ea:	460c      	mov	r4, r1
 801d8ec:	2001      	movs	r0, #1
 801d8ee:	e7a8      	b.n	801d842 <_vfiprintf_r+0xfe>
 801d8f0:	2300      	movs	r3, #0
 801d8f2:	3401      	adds	r4, #1
 801d8f4:	9305      	str	r3, [sp, #20]
 801d8f6:	4619      	mov	r1, r3
 801d8f8:	f04f 0c0a 	mov.w	ip, #10
 801d8fc:	4620      	mov	r0, r4
 801d8fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d902:	3a30      	subs	r2, #48	@ 0x30
 801d904:	2a09      	cmp	r2, #9
 801d906:	d903      	bls.n	801d910 <_vfiprintf_r+0x1cc>
 801d908:	2b00      	cmp	r3, #0
 801d90a:	d0c6      	beq.n	801d89a <_vfiprintf_r+0x156>
 801d90c:	9105      	str	r1, [sp, #20]
 801d90e:	e7c4      	b.n	801d89a <_vfiprintf_r+0x156>
 801d910:	fb0c 2101 	mla	r1, ip, r1, r2
 801d914:	4604      	mov	r4, r0
 801d916:	2301      	movs	r3, #1
 801d918:	e7f0      	b.n	801d8fc <_vfiprintf_r+0x1b8>
 801d91a:	ab03      	add	r3, sp, #12
 801d91c:	9300      	str	r3, [sp, #0]
 801d91e:	462a      	mov	r2, r5
 801d920:	4b12      	ldr	r3, [pc, #72]	@ (801d96c <_vfiprintf_r+0x228>)
 801d922:	a904      	add	r1, sp, #16
 801d924:	4630      	mov	r0, r6
 801d926:	f3af 8000 	nop.w
 801d92a:	4607      	mov	r7, r0
 801d92c:	1c78      	adds	r0, r7, #1
 801d92e:	d1d6      	bne.n	801d8de <_vfiprintf_r+0x19a>
 801d930:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d932:	07d9      	lsls	r1, r3, #31
 801d934:	d405      	bmi.n	801d942 <_vfiprintf_r+0x1fe>
 801d936:	89ab      	ldrh	r3, [r5, #12]
 801d938:	059a      	lsls	r2, r3, #22
 801d93a:	d402      	bmi.n	801d942 <_vfiprintf_r+0x1fe>
 801d93c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d93e:	f7ff fe75 	bl	801d62c <__retarget_lock_release_recursive>
 801d942:	89ab      	ldrh	r3, [r5, #12]
 801d944:	065b      	lsls	r3, r3, #25
 801d946:	f53f af1f 	bmi.w	801d788 <_vfiprintf_r+0x44>
 801d94a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d94c:	e71e      	b.n	801d78c <_vfiprintf_r+0x48>
 801d94e:	ab03      	add	r3, sp, #12
 801d950:	9300      	str	r3, [sp, #0]
 801d952:	462a      	mov	r2, r5
 801d954:	4b05      	ldr	r3, [pc, #20]	@ (801d96c <_vfiprintf_r+0x228>)
 801d956:	a904      	add	r1, sp, #16
 801d958:	4630      	mov	r0, r6
 801d95a:	f000 f879 	bl	801da50 <_printf_i>
 801d95e:	e7e4      	b.n	801d92a <_vfiprintf_r+0x1e6>
 801d960:	0801ec78 	.word	0x0801ec78
 801d964:	0801ec82 	.word	0x0801ec82
 801d968:	00000000 	.word	0x00000000
 801d96c:	0801d71f 	.word	0x0801d71f
 801d970:	0801ec7e 	.word	0x0801ec7e

0801d974 <_printf_common>:
 801d974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d978:	4616      	mov	r6, r2
 801d97a:	4698      	mov	r8, r3
 801d97c:	688a      	ldr	r2, [r1, #8]
 801d97e:	690b      	ldr	r3, [r1, #16]
 801d980:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d984:	4293      	cmp	r3, r2
 801d986:	bfb8      	it	lt
 801d988:	4613      	movlt	r3, r2
 801d98a:	6033      	str	r3, [r6, #0]
 801d98c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d990:	4607      	mov	r7, r0
 801d992:	460c      	mov	r4, r1
 801d994:	b10a      	cbz	r2, 801d99a <_printf_common+0x26>
 801d996:	3301      	adds	r3, #1
 801d998:	6033      	str	r3, [r6, #0]
 801d99a:	6823      	ldr	r3, [r4, #0]
 801d99c:	0699      	lsls	r1, r3, #26
 801d99e:	bf42      	ittt	mi
 801d9a0:	6833      	ldrmi	r3, [r6, #0]
 801d9a2:	3302      	addmi	r3, #2
 801d9a4:	6033      	strmi	r3, [r6, #0]
 801d9a6:	6825      	ldr	r5, [r4, #0]
 801d9a8:	f015 0506 	ands.w	r5, r5, #6
 801d9ac:	d106      	bne.n	801d9bc <_printf_common+0x48>
 801d9ae:	f104 0a19 	add.w	sl, r4, #25
 801d9b2:	68e3      	ldr	r3, [r4, #12]
 801d9b4:	6832      	ldr	r2, [r6, #0]
 801d9b6:	1a9b      	subs	r3, r3, r2
 801d9b8:	42ab      	cmp	r3, r5
 801d9ba:	dc26      	bgt.n	801da0a <_printf_common+0x96>
 801d9bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d9c0:	6822      	ldr	r2, [r4, #0]
 801d9c2:	3b00      	subs	r3, #0
 801d9c4:	bf18      	it	ne
 801d9c6:	2301      	movne	r3, #1
 801d9c8:	0692      	lsls	r2, r2, #26
 801d9ca:	d42b      	bmi.n	801da24 <_printf_common+0xb0>
 801d9cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d9d0:	4641      	mov	r1, r8
 801d9d2:	4638      	mov	r0, r7
 801d9d4:	47c8      	blx	r9
 801d9d6:	3001      	adds	r0, #1
 801d9d8:	d01e      	beq.n	801da18 <_printf_common+0xa4>
 801d9da:	6823      	ldr	r3, [r4, #0]
 801d9dc:	6922      	ldr	r2, [r4, #16]
 801d9de:	f003 0306 	and.w	r3, r3, #6
 801d9e2:	2b04      	cmp	r3, #4
 801d9e4:	bf02      	ittt	eq
 801d9e6:	68e5      	ldreq	r5, [r4, #12]
 801d9e8:	6833      	ldreq	r3, [r6, #0]
 801d9ea:	1aed      	subeq	r5, r5, r3
 801d9ec:	68a3      	ldr	r3, [r4, #8]
 801d9ee:	bf0c      	ite	eq
 801d9f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d9f4:	2500      	movne	r5, #0
 801d9f6:	4293      	cmp	r3, r2
 801d9f8:	bfc4      	itt	gt
 801d9fa:	1a9b      	subgt	r3, r3, r2
 801d9fc:	18ed      	addgt	r5, r5, r3
 801d9fe:	2600      	movs	r6, #0
 801da00:	341a      	adds	r4, #26
 801da02:	42b5      	cmp	r5, r6
 801da04:	d11a      	bne.n	801da3c <_printf_common+0xc8>
 801da06:	2000      	movs	r0, #0
 801da08:	e008      	b.n	801da1c <_printf_common+0xa8>
 801da0a:	2301      	movs	r3, #1
 801da0c:	4652      	mov	r2, sl
 801da0e:	4641      	mov	r1, r8
 801da10:	4638      	mov	r0, r7
 801da12:	47c8      	blx	r9
 801da14:	3001      	adds	r0, #1
 801da16:	d103      	bne.n	801da20 <_printf_common+0xac>
 801da18:	f04f 30ff 	mov.w	r0, #4294967295
 801da1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da20:	3501      	adds	r5, #1
 801da22:	e7c6      	b.n	801d9b2 <_printf_common+0x3e>
 801da24:	18e1      	adds	r1, r4, r3
 801da26:	1c5a      	adds	r2, r3, #1
 801da28:	2030      	movs	r0, #48	@ 0x30
 801da2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801da2e:	4422      	add	r2, r4
 801da30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801da34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801da38:	3302      	adds	r3, #2
 801da3a:	e7c7      	b.n	801d9cc <_printf_common+0x58>
 801da3c:	2301      	movs	r3, #1
 801da3e:	4622      	mov	r2, r4
 801da40:	4641      	mov	r1, r8
 801da42:	4638      	mov	r0, r7
 801da44:	47c8      	blx	r9
 801da46:	3001      	adds	r0, #1
 801da48:	d0e6      	beq.n	801da18 <_printf_common+0xa4>
 801da4a:	3601      	adds	r6, #1
 801da4c:	e7d9      	b.n	801da02 <_printf_common+0x8e>
	...

0801da50 <_printf_i>:
 801da50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801da54:	7e0f      	ldrb	r7, [r1, #24]
 801da56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801da58:	2f78      	cmp	r7, #120	@ 0x78
 801da5a:	4691      	mov	r9, r2
 801da5c:	4680      	mov	r8, r0
 801da5e:	460c      	mov	r4, r1
 801da60:	469a      	mov	sl, r3
 801da62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801da66:	d807      	bhi.n	801da78 <_printf_i+0x28>
 801da68:	2f62      	cmp	r7, #98	@ 0x62
 801da6a:	d80a      	bhi.n	801da82 <_printf_i+0x32>
 801da6c:	2f00      	cmp	r7, #0
 801da6e:	f000 80d2 	beq.w	801dc16 <_printf_i+0x1c6>
 801da72:	2f58      	cmp	r7, #88	@ 0x58
 801da74:	f000 80b9 	beq.w	801dbea <_printf_i+0x19a>
 801da78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801da7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801da80:	e03a      	b.n	801daf8 <_printf_i+0xa8>
 801da82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801da86:	2b15      	cmp	r3, #21
 801da88:	d8f6      	bhi.n	801da78 <_printf_i+0x28>
 801da8a:	a101      	add	r1, pc, #4	@ (adr r1, 801da90 <_printf_i+0x40>)
 801da8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801da90:	0801dae9 	.word	0x0801dae9
 801da94:	0801dafd 	.word	0x0801dafd
 801da98:	0801da79 	.word	0x0801da79
 801da9c:	0801da79 	.word	0x0801da79
 801daa0:	0801da79 	.word	0x0801da79
 801daa4:	0801da79 	.word	0x0801da79
 801daa8:	0801dafd 	.word	0x0801dafd
 801daac:	0801da79 	.word	0x0801da79
 801dab0:	0801da79 	.word	0x0801da79
 801dab4:	0801da79 	.word	0x0801da79
 801dab8:	0801da79 	.word	0x0801da79
 801dabc:	0801dbfd 	.word	0x0801dbfd
 801dac0:	0801db27 	.word	0x0801db27
 801dac4:	0801dbb7 	.word	0x0801dbb7
 801dac8:	0801da79 	.word	0x0801da79
 801dacc:	0801da79 	.word	0x0801da79
 801dad0:	0801dc1f 	.word	0x0801dc1f
 801dad4:	0801da79 	.word	0x0801da79
 801dad8:	0801db27 	.word	0x0801db27
 801dadc:	0801da79 	.word	0x0801da79
 801dae0:	0801da79 	.word	0x0801da79
 801dae4:	0801dbbf 	.word	0x0801dbbf
 801dae8:	6833      	ldr	r3, [r6, #0]
 801daea:	1d1a      	adds	r2, r3, #4
 801daec:	681b      	ldr	r3, [r3, #0]
 801daee:	6032      	str	r2, [r6, #0]
 801daf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801daf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801daf8:	2301      	movs	r3, #1
 801dafa:	e09d      	b.n	801dc38 <_printf_i+0x1e8>
 801dafc:	6833      	ldr	r3, [r6, #0]
 801dafe:	6820      	ldr	r0, [r4, #0]
 801db00:	1d19      	adds	r1, r3, #4
 801db02:	6031      	str	r1, [r6, #0]
 801db04:	0606      	lsls	r6, r0, #24
 801db06:	d501      	bpl.n	801db0c <_printf_i+0xbc>
 801db08:	681d      	ldr	r5, [r3, #0]
 801db0a:	e003      	b.n	801db14 <_printf_i+0xc4>
 801db0c:	0645      	lsls	r5, r0, #25
 801db0e:	d5fb      	bpl.n	801db08 <_printf_i+0xb8>
 801db10:	f9b3 5000 	ldrsh.w	r5, [r3]
 801db14:	2d00      	cmp	r5, #0
 801db16:	da03      	bge.n	801db20 <_printf_i+0xd0>
 801db18:	232d      	movs	r3, #45	@ 0x2d
 801db1a:	426d      	negs	r5, r5
 801db1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801db20:	4859      	ldr	r0, [pc, #356]	@ (801dc88 <_printf_i+0x238>)
 801db22:	230a      	movs	r3, #10
 801db24:	e011      	b.n	801db4a <_printf_i+0xfa>
 801db26:	6821      	ldr	r1, [r4, #0]
 801db28:	6833      	ldr	r3, [r6, #0]
 801db2a:	0608      	lsls	r0, r1, #24
 801db2c:	f853 5b04 	ldr.w	r5, [r3], #4
 801db30:	d402      	bmi.n	801db38 <_printf_i+0xe8>
 801db32:	0649      	lsls	r1, r1, #25
 801db34:	bf48      	it	mi
 801db36:	b2ad      	uxthmi	r5, r5
 801db38:	2f6f      	cmp	r7, #111	@ 0x6f
 801db3a:	4853      	ldr	r0, [pc, #332]	@ (801dc88 <_printf_i+0x238>)
 801db3c:	6033      	str	r3, [r6, #0]
 801db3e:	bf14      	ite	ne
 801db40:	230a      	movne	r3, #10
 801db42:	2308      	moveq	r3, #8
 801db44:	2100      	movs	r1, #0
 801db46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801db4a:	6866      	ldr	r6, [r4, #4]
 801db4c:	60a6      	str	r6, [r4, #8]
 801db4e:	2e00      	cmp	r6, #0
 801db50:	bfa2      	ittt	ge
 801db52:	6821      	ldrge	r1, [r4, #0]
 801db54:	f021 0104 	bicge.w	r1, r1, #4
 801db58:	6021      	strge	r1, [r4, #0]
 801db5a:	b90d      	cbnz	r5, 801db60 <_printf_i+0x110>
 801db5c:	2e00      	cmp	r6, #0
 801db5e:	d04b      	beq.n	801dbf8 <_printf_i+0x1a8>
 801db60:	4616      	mov	r6, r2
 801db62:	fbb5 f1f3 	udiv	r1, r5, r3
 801db66:	fb03 5711 	mls	r7, r3, r1, r5
 801db6a:	5dc7      	ldrb	r7, [r0, r7]
 801db6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801db70:	462f      	mov	r7, r5
 801db72:	42bb      	cmp	r3, r7
 801db74:	460d      	mov	r5, r1
 801db76:	d9f4      	bls.n	801db62 <_printf_i+0x112>
 801db78:	2b08      	cmp	r3, #8
 801db7a:	d10b      	bne.n	801db94 <_printf_i+0x144>
 801db7c:	6823      	ldr	r3, [r4, #0]
 801db7e:	07df      	lsls	r7, r3, #31
 801db80:	d508      	bpl.n	801db94 <_printf_i+0x144>
 801db82:	6923      	ldr	r3, [r4, #16]
 801db84:	6861      	ldr	r1, [r4, #4]
 801db86:	4299      	cmp	r1, r3
 801db88:	bfde      	ittt	le
 801db8a:	2330      	movle	r3, #48	@ 0x30
 801db8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801db90:	f106 36ff 	addle.w	r6, r6, #4294967295
 801db94:	1b92      	subs	r2, r2, r6
 801db96:	6122      	str	r2, [r4, #16]
 801db98:	f8cd a000 	str.w	sl, [sp]
 801db9c:	464b      	mov	r3, r9
 801db9e:	aa03      	add	r2, sp, #12
 801dba0:	4621      	mov	r1, r4
 801dba2:	4640      	mov	r0, r8
 801dba4:	f7ff fee6 	bl	801d974 <_printf_common>
 801dba8:	3001      	adds	r0, #1
 801dbaa:	d14a      	bne.n	801dc42 <_printf_i+0x1f2>
 801dbac:	f04f 30ff 	mov.w	r0, #4294967295
 801dbb0:	b004      	add	sp, #16
 801dbb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dbb6:	6823      	ldr	r3, [r4, #0]
 801dbb8:	f043 0320 	orr.w	r3, r3, #32
 801dbbc:	6023      	str	r3, [r4, #0]
 801dbbe:	4833      	ldr	r0, [pc, #204]	@ (801dc8c <_printf_i+0x23c>)
 801dbc0:	2778      	movs	r7, #120	@ 0x78
 801dbc2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801dbc6:	6823      	ldr	r3, [r4, #0]
 801dbc8:	6831      	ldr	r1, [r6, #0]
 801dbca:	061f      	lsls	r7, r3, #24
 801dbcc:	f851 5b04 	ldr.w	r5, [r1], #4
 801dbd0:	d402      	bmi.n	801dbd8 <_printf_i+0x188>
 801dbd2:	065f      	lsls	r7, r3, #25
 801dbd4:	bf48      	it	mi
 801dbd6:	b2ad      	uxthmi	r5, r5
 801dbd8:	6031      	str	r1, [r6, #0]
 801dbda:	07d9      	lsls	r1, r3, #31
 801dbdc:	bf44      	itt	mi
 801dbde:	f043 0320 	orrmi.w	r3, r3, #32
 801dbe2:	6023      	strmi	r3, [r4, #0]
 801dbe4:	b11d      	cbz	r5, 801dbee <_printf_i+0x19e>
 801dbe6:	2310      	movs	r3, #16
 801dbe8:	e7ac      	b.n	801db44 <_printf_i+0xf4>
 801dbea:	4827      	ldr	r0, [pc, #156]	@ (801dc88 <_printf_i+0x238>)
 801dbec:	e7e9      	b.n	801dbc2 <_printf_i+0x172>
 801dbee:	6823      	ldr	r3, [r4, #0]
 801dbf0:	f023 0320 	bic.w	r3, r3, #32
 801dbf4:	6023      	str	r3, [r4, #0]
 801dbf6:	e7f6      	b.n	801dbe6 <_printf_i+0x196>
 801dbf8:	4616      	mov	r6, r2
 801dbfa:	e7bd      	b.n	801db78 <_printf_i+0x128>
 801dbfc:	6833      	ldr	r3, [r6, #0]
 801dbfe:	6825      	ldr	r5, [r4, #0]
 801dc00:	6961      	ldr	r1, [r4, #20]
 801dc02:	1d18      	adds	r0, r3, #4
 801dc04:	6030      	str	r0, [r6, #0]
 801dc06:	062e      	lsls	r6, r5, #24
 801dc08:	681b      	ldr	r3, [r3, #0]
 801dc0a:	d501      	bpl.n	801dc10 <_printf_i+0x1c0>
 801dc0c:	6019      	str	r1, [r3, #0]
 801dc0e:	e002      	b.n	801dc16 <_printf_i+0x1c6>
 801dc10:	0668      	lsls	r0, r5, #25
 801dc12:	d5fb      	bpl.n	801dc0c <_printf_i+0x1bc>
 801dc14:	8019      	strh	r1, [r3, #0]
 801dc16:	2300      	movs	r3, #0
 801dc18:	6123      	str	r3, [r4, #16]
 801dc1a:	4616      	mov	r6, r2
 801dc1c:	e7bc      	b.n	801db98 <_printf_i+0x148>
 801dc1e:	6833      	ldr	r3, [r6, #0]
 801dc20:	1d1a      	adds	r2, r3, #4
 801dc22:	6032      	str	r2, [r6, #0]
 801dc24:	681e      	ldr	r6, [r3, #0]
 801dc26:	6862      	ldr	r2, [r4, #4]
 801dc28:	2100      	movs	r1, #0
 801dc2a:	4630      	mov	r0, r6
 801dc2c:	f7e2 fb68 	bl	8000300 <memchr>
 801dc30:	b108      	cbz	r0, 801dc36 <_printf_i+0x1e6>
 801dc32:	1b80      	subs	r0, r0, r6
 801dc34:	6060      	str	r0, [r4, #4]
 801dc36:	6863      	ldr	r3, [r4, #4]
 801dc38:	6123      	str	r3, [r4, #16]
 801dc3a:	2300      	movs	r3, #0
 801dc3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dc40:	e7aa      	b.n	801db98 <_printf_i+0x148>
 801dc42:	6923      	ldr	r3, [r4, #16]
 801dc44:	4632      	mov	r2, r6
 801dc46:	4649      	mov	r1, r9
 801dc48:	4640      	mov	r0, r8
 801dc4a:	47d0      	blx	sl
 801dc4c:	3001      	adds	r0, #1
 801dc4e:	d0ad      	beq.n	801dbac <_printf_i+0x15c>
 801dc50:	6823      	ldr	r3, [r4, #0]
 801dc52:	079b      	lsls	r3, r3, #30
 801dc54:	d413      	bmi.n	801dc7e <_printf_i+0x22e>
 801dc56:	68e0      	ldr	r0, [r4, #12]
 801dc58:	9b03      	ldr	r3, [sp, #12]
 801dc5a:	4298      	cmp	r0, r3
 801dc5c:	bfb8      	it	lt
 801dc5e:	4618      	movlt	r0, r3
 801dc60:	e7a6      	b.n	801dbb0 <_printf_i+0x160>
 801dc62:	2301      	movs	r3, #1
 801dc64:	4632      	mov	r2, r6
 801dc66:	4649      	mov	r1, r9
 801dc68:	4640      	mov	r0, r8
 801dc6a:	47d0      	blx	sl
 801dc6c:	3001      	adds	r0, #1
 801dc6e:	d09d      	beq.n	801dbac <_printf_i+0x15c>
 801dc70:	3501      	adds	r5, #1
 801dc72:	68e3      	ldr	r3, [r4, #12]
 801dc74:	9903      	ldr	r1, [sp, #12]
 801dc76:	1a5b      	subs	r3, r3, r1
 801dc78:	42ab      	cmp	r3, r5
 801dc7a:	dcf2      	bgt.n	801dc62 <_printf_i+0x212>
 801dc7c:	e7eb      	b.n	801dc56 <_printf_i+0x206>
 801dc7e:	2500      	movs	r5, #0
 801dc80:	f104 0619 	add.w	r6, r4, #25
 801dc84:	e7f5      	b.n	801dc72 <_printf_i+0x222>
 801dc86:	bf00      	nop
 801dc88:	0801ec89 	.word	0x0801ec89
 801dc8c:	0801ec9a 	.word	0x0801ec9a

0801dc90 <__sflush_r>:
 801dc90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc98:	0716      	lsls	r6, r2, #28
 801dc9a:	4605      	mov	r5, r0
 801dc9c:	460c      	mov	r4, r1
 801dc9e:	d454      	bmi.n	801dd4a <__sflush_r+0xba>
 801dca0:	684b      	ldr	r3, [r1, #4]
 801dca2:	2b00      	cmp	r3, #0
 801dca4:	dc02      	bgt.n	801dcac <__sflush_r+0x1c>
 801dca6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801dca8:	2b00      	cmp	r3, #0
 801dcaa:	dd48      	ble.n	801dd3e <__sflush_r+0xae>
 801dcac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dcae:	2e00      	cmp	r6, #0
 801dcb0:	d045      	beq.n	801dd3e <__sflush_r+0xae>
 801dcb2:	2300      	movs	r3, #0
 801dcb4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801dcb8:	682f      	ldr	r7, [r5, #0]
 801dcba:	6a21      	ldr	r1, [r4, #32]
 801dcbc:	602b      	str	r3, [r5, #0]
 801dcbe:	d030      	beq.n	801dd22 <__sflush_r+0x92>
 801dcc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801dcc2:	89a3      	ldrh	r3, [r4, #12]
 801dcc4:	0759      	lsls	r1, r3, #29
 801dcc6:	d505      	bpl.n	801dcd4 <__sflush_r+0x44>
 801dcc8:	6863      	ldr	r3, [r4, #4]
 801dcca:	1ad2      	subs	r2, r2, r3
 801dccc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801dcce:	b10b      	cbz	r3, 801dcd4 <__sflush_r+0x44>
 801dcd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801dcd2:	1ad2      	subs	r2, r2, r3
 801dcd4:	2300      	movs	r3, #0
 801dcd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dcd8:	6a21      	ldr	r1, [r4, #32]
 801dcda:	4628      	mov	r0, r5
 801dcdc:	47b0      	blx	r6
 801dcde:	1c43      	adds	r3, r0, #1
 801dce0:	89a3      	ldrh	r3, [r4, #12]
 801dce2:	d106      	bne.n	801dcf2 <__sflush_r+0x62>
 801dce4:	6829      	ldr	r1, [r5, #0]
 801dce6:	291d      	cmp	r1, #29
 801dce8:	d82b      	bhi.n	801dd42 <__sflush_r+0xb2>
 801dcea:	4a2a      	ldr	r2, [pc, #168]	@ (801dd94 <__sflush_r+0x104>)
 801dcec:	410a      	asrs	r2, r1
 801dcee:	07d6      	lsls	r6, r2, #31
 801dcf0:	d427      	bmi.n	801dd42 <__sflush_r+0xb2>
 801dcf2:	2200      	movs	r2, #0
 801dcf4:	6062      	str	r2, [r4, #4]
 801dcf6:	04d9      	lsls	r1, r3, #19
 801dcf8:	6922      	ldr	r2, [r4, #16]
 801dcfa:	6022      	str	r2, [r4, #0]
 801dcfc:	d504      	bpl.n	801dd08 <__sflush_r+0x78>
 801dcfe:	1c42      	adds	r2, r0, #1
 801dd00:	d101      	bne.n	801dd06 <__sflush_r+0x76>
 801dd02:	682b      	ldr	r3, [r5, #0]
 801dd04:	b903      	cbnz	r3, 801dd08 <__sflush_r+0x78>
 801dd06:	6560      	str	r0, [r4, #84]	@ 0x54
 801dd08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dd0a:	602f      	str	r7, [r5, #0]
 801dd0c:	b1b9      	cbz	r1, 801dd3e <__sflush_r+0xae>
 801dd0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dd12:	4299      	cmp	r1, r3
 801dd14:	d002      	beq.n	801dd1c <__sflush_r+0x8c>
 801dd16:	4628      	mov	r0, r5
 801dd18:	f7ff fc98 	bl	801d64c <_free_r>
 801dd1c:	2300      	movs	r3, #0
 801dd1e:	6363      	str	r3, [r4, #52]	@ 0x34
 801dd20:	e00d      	b.n	801dd3e <__sflush_r+0xae>
 801dd22:	2301      	movs	r3, #1
 801dd24:	4628      	mov	r0, r5
 801dd26:	47b0      	blx	r6
 801dd28:	4602      	mov	r2, r0
 801dd2a:	1c50      	adds	r0, r2, #1
 801dd2c:	d1c9      	bne.n	801dcc2 <__sflush_r+0x32>
 801dd2e:	682b      	ldr	r3, [r5, #0]
 801dd30:	2b00      	cmp	r3, #0
 801dd32:	d0c6      	beq.n	801dcc2 <__sflush_r+0x32>
 801dd34:	2b1d      	cmp	r3, #29
 801dd36:	d001      	beq.n	801dd3c <__sflush_r+0xac>
 801dd38:	2b16      	cmp	r3, #22
 801dd3a:	d11e      	bne.n	801dd7a <__sflush_r+0xea>
 801dd3c:	602f      	str	r7, [r5, #0]
 801dd3e:	2000      	movs	r0, #0
 801dd40:	e022      	b.n	801dd88 <__sflush_r+0xf8>
 801dd42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dd46:	b21b      	sxth	r3, r3
 801dd48:	e01b      	b.n	801dd82 <__sflush_r+0xf2>
 801dd4a:	690f      	ldr	r7, [r1, #16]
 801dd4c:	2f00      	cmp	r7, #0
 801dd4e:	d0f6      	beq.n	801dd3e <__sflush_r+0xae>
 801dd50:	0793      	lsls	r3, r2, #30
 801dd52:	680e      	ldr	r6, [r1, #0]
 801dd54:	bf08      	it	eq
 801dd56:	694b      	ldreq	r3, [r1, #20]
 801dd58:	600f      	str	r7, [r1, #0]
 801dd5a:	bf18      	it	ne
 801dd5c:	2300      	movne	r3, #0
 801dd5e:	eba6 0807 	sub.w	r8, r6, r7
 801dd62:	608b      	str	r3, [r1, #8]
 801dd64:	f1b8 0f00 	cmp.w	r8, #0
 801dd68:	dde9      	ble.n	801dd3e <__sflush_r+0xae>
 801dd6a:	6a21      	ldr	r1, [r4, #32]
 801dd6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801dd6e:	4643      	mov	r3, r8
 801dd70:	463a      	mov	r2, r7
 801dd72:	4628      	mov	r0, r5
 801dd74:	47b0      	blx	r6
 801dd76:	2800      	cmp	r0, #0
 801dd78:	dc08      	bgt.n	801dd8c <__sflush_r+0xfc>
 801dd7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dd82:	81a3      	strh	r3, [r4, #12]
 801dd84:	f04f 30ff 	mov.w	r0, #4294967295
 801dd88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd8c:	4407      	add	r7, r0
 801dd8e:	eba8 0800 	sub.w	r8, r8, r0
 801dd92:	e7e7      	b.n	801dd64 <__sflush_r+0xd4>
 801dd94:	dfbffffe 	.word	0xdfbffffe

0801dd98 <_fflush_r>:
 801dd98:	b538      	push	{r3, r4, r5, lr}
 801dd9a:	690b      	ldr	r3, [r1, #16]
 801dd9c:	4605      	mov	r5, r0
 801dd9e:	460c      	mov	r4, r1
 801dda0:	b913      	cbnz	r3, 801dda8 <_fflush_r+0x10>
 801dda2:	2500      	movs	r5, #0
 801dda4:	4628      	mov	r0, r5
 801dda6:	bd38      	pop	{r3, r4, r5, pc}
 801dda8:	b118      	cbz	r0, 801ddb2 <_fflush_r+0x1a>
 801ddaa:	6a03      	ldr	r3, [r0, #32]
 801ddac:	b90b      	cbnz	r3, 801ddb2 <_fflush_r+0x1a>
 801ddae:	f7ff f9cf 	bl	801d150 <__sinit>
 801ddb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ddb6:	2b00      	cmp	r3, #0
 801ddb8:	d0f3      	beq.n	801dda2 <_fflush_r+0xa>
 801ddba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ddbc:	07d0      	lsls	r0, r2, #31
 801ddbe:	d404      	bmi.n	801ddca <_fflush_r+0x32>
 801ddc0:	0599      	lsls	r1, r3, #22
 801ddc2:	d402      	bmi.n	801ddca <_fflush_r+0x32>
 801ddc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ddc6:	f7ff fc30 	bl	801d62a <__retarget_lock_acquire_recursive>
 801ddca:	4628      	mov	r0, r5
 801ddcc:	4621      	mov	r1, r4
 801ddce:	f7ff ff5f 	bl	801dc90 <__sflush_r>
 801ddd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ddd4:	07da      	lsls	r2, r3, #31
 801ddd6:	4605      	mov	r5, r0
 801ddd8:	d4e4      	bmi.n	801dda4 <_fflush_r+0xc>
 801ddda:	89a3      	ldrh	r3, [r4, #12]
 801dddc:	059b      	lsls	r3, r3, #22
 801ddde:	d4e1      	bmi.n	801dda4 <_fflush_r+0xc>
 801dde0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dde2:	f7ff fc23 	bl	801d62c <__retarget_lock_release_recursive>
 801dde6:	e7dd      	b.n	801dda4 <_fflush_r+0xc>

0801dde8 <__swhatbuf_r>:
 801dde8:	b570      	push	{r4, r5, r6, lr}
 801ddea:	460c      	mov	r4, r1
 801ddec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ddf0:	2900      	cmp	r1, #0
 801ddf2:	b096      	sub	sp, #88	@ 0x58
 801ddf4:	4615      	mov	r5, r2
 801ddf6:	461e      	mov	r6, r3
 801ddf8:	da0d      	bge.n	801de16 <__swhatbuf_r+0x2e>
 801ddfa:	89a3      	ldrh	r3, [r4, #12]
 801ddfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801de00:	f04f 0100 	mov.w	r1, #0
 801de04:	bf14      	ite	ne
 801de06:	2340      	movne	r3, #64	@ 0x40
 801de08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801de0c:	2000      	movs	r0, #0
 801de0e:	6031      	str	r1, [r6, #0]
 801de10:	602b      	str	r3, [r5, #0]
 801de12:	b016      	add	sp, #88	@ 0x58
 801de14:	bd70      	pop	{r4, r5, r6, pc}
 801de16:	466a      	mov	r2, sp
 801de18:	f000 f87c 	bl	801df14 <_fstat_r>
 801de1c:	2800      	cmp	r0, #0
 801de1e:	dbec      	blt.n	801ddfa <__swhatbuf_r+0x12>
 801de20:	9901      	ldr	r1, [sp, #4]
 801de22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801de26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801de2a:	4259      	negs	r1, r3
 801de2c:	4159      	adcs	r1, r3
 801de2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801de32:	e7eb      	b.n	801de0c <__swhatbuf_r+0x24>

0801de34 <__smakebuf_r>:
 801de34:	898b      	ldrh	r3, [r1, #12]
 801de36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801de38:	079d      	lsls	r5, r3, #30
 801de3a:	4606      	mov	r6, r0
 801de3c:	460c      	mov	r4, r1
 801de3e:	d507      	bpl.n	801de50 <__smakebuf_r+0x1c>
 801de40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801de44:	6023      	str	r3, [r4, #0]
 801de46:	6123      	str	r3, [r4, #16]
 801de48:	2301      	movs	r3, #1
 801de4a:	6163      	str	r3, [r4, #20]
 801de4c:	b003      	add	sp, #12
 801de4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801de50:	ab01      	add	r3, sp, #4
 801de52:	466a      	mov	r2, sp
 801de54:	f7ff ffc8 	bl	801dde8 <__swhatbuf_r>
 801de58:	9f00      	ldr	r7, [sp, #0]
 801de5a:	4605      	mov	r5, r0
 801de5c:	4639      	mov	r1, r7
 801de5e:	4630      	mov	r0, r6
 801de60:	f7ff f828 	bl	801ceb4 <_malloc_r>
 801de64:	b948      	cbnz	r0, 801de7a <__smakebuf_r+0x46>
 801de66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de6a:	059a      	lsls	r2, r3, #22
 801de6c:	d4ee      	bmi.n	801de4c <__smakebuf_r+0x18>
 801de6e:	f023 0303 	bic.w	r3, r3, #3
 801de72:	f043 0302 	orr.w	r3, r3, #2
 801de76:	81a3      	strh	r3, [r4, #12]
 801de78:	e7e2      	b.n	801de40 <__smakebuf_r+0xc>
 801de7a:	89a3      	ldrh	r3, [r4, #12]
 801de7c:	6020      	str	r0, [r4, #0]
 801de7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801de82:	81a3      	strh	r3, [r4, #12]
 801de84:	9b01      	ldr	r3, [sp, #4]
 801de86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801de8a:	b15b      	cbz	r3, 801dea4 <__smakebuf_r+0x70>
 801de8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801de90:	4630      	mov	r0, r6
 801de92:	f000 f851 	bl	801df38 <_isatty_r>
 801de96:	b128      	cbz	r0, 801dea4 <__smakebuf_r+0x70>
 801de98:	89a3      	ldrh	r3, [r4, #12]
 801de9a:	f023 0303 	bic.w	r3, r3, #3
 801de9e:	f043 0301 	orr.w	r3, r3, #1
 801dea2:	81a3      	strh	r3, [r4, #12]
 801dea4:	89a3      	ldrh	r3, [r4, #12]
 801dea6:	431d      	orrs	r5, r3
 801dea8:	81a5      	strh	r5, [r4, #12]
 801deaa:	e7cf      	b.n	801de4c <__smakebuf_r+0x18>

0801deac <_putc_r>:
 801deac:	b570      	push	{r4, r5, r6, lr}
 801deae:	460d      	mov	r5, r1
 801deb0:	4614      	mov	r4, r2
 801deb2:	4606      	mov	r6, r0
 801deb4:	b118      	cbz	r0, 801debe <_putc_r+0x12>
 801deb6:	6a03      	ldr	r3, [r0, #32]
 801deb8:	b90b      	cbnz	r3, 801debe <_putc_r+0x12>
 801deba:	f7ff f949 	bl	801d150 <__sinit>
 801debe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dec0:	07d8      	lsls	r0, r3, #31
 801dec2:	d405      	bmi.n	801ded0 <_putc_r+0x24>
 801dec4:	89a3      	ldrh	r3, [r4, #12]
 801dec6:	0599      	lsls	r1, r3, #22
 801dec8:	d402      	bmi.n	801ded0 <_putc_r+0x24>
 801deca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801decc:	f7ff fbad 	bl	801d62a <__retarget_lock_acquire_recursive>
 801ded0:	68a3      	ldr	r3, [r4, #8]
 801ded2:	3b01      	subs	r3, #1
 801ded4:	2b00      	cmp	r3, #0
 801ded6:	60a3      	str	r3, [r4, #8]
 801ded8:	da05      	bge.n	801dee6 <_putc_r+0x3a>
 801deda:	69a2      	ldr	r2, [r4, #24]
 801dedc:	4293      	cmp	r3, r2
 801dede:	db12      	blt.n	801df06 <_putc_r+0x5a>
 801dee0:	b2eb      	uxtb	r3, r5
 801dee2:	2b0a      	cmp	r3, #10
 801dee4:	d00f      	beq.n	801df06 <_putc_r+0x5a>
 801dee6:	6823      	ldr	r3, [r4, #0]
 801dee8:	1c5a      	adds	r2, r3, #1
 801deea:	6022      	str	r2, [r4, #0]
 801deec:	701d      	strb	r5, [r3, #0]
 801deee:	b2ed      	uxtb	r5, r5
 801def0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801def2:	07da      	lsls	r2, r3, #31
 801def4:	d405      	bmi.n	801df02 <_putc_r+0x56>
 801def6:	89a3      	ldrh	r3, [r4, #12]
 801def8:	059b      	lsls	r3, r3, #22
 801defa:	d402      	bmi.n	801df02 <_putc_r+0x56>
 801defc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801defe:	f7ff fb95 	bl	801d62c <__retarget_lock_release_recursive>
 801df02:	4628      	mov	r0, r5
 801df04:	bd70      	pop	{r4, r5, r6, pc}
 801df06:	4629      	mov	r1, r5
 801df08:	4622      	mov	r2, r4
 801df0a:	4630      	mov	r0, r6
 801df0c:	f7ff fa11 	bl	801d332 <__swbuf_r>
 801df10:	4605      	mov	r5, r0
 801df12:	e7ed      	b.n	801def0 <_putc_r+0x44>

0801df14 <_fstat_r>:
 801df14:	b538      	push	{r3, r4, r5, lr}
 801df16:	4d07      	ldr	r5, [pc, #28]	@ (801df34 <_fstat_r+0x20>)
 801df18:	2300      	movs	r3, #0
 801df1a:	4604      	mov	r4, r0
 801df1c:	4608      	mov	r0, r1
 801df1e:	4611      	mov	r1, r2
 801df20:	602b      	str	r3, [r5, #0]
 801df22:	f7ed fd77 	bl	800ba14 <_fstat>
 801df26:	1c43      	adds	r3, r0, #1
 801df28:	d102      	bne.n	801df30 <_fstat_r+0x1c>
 801df2a:	682b      	ldr	r3, [r5, #0]
 801df2c:	b103      	cbz	r3, 801df30 <_fstat_r+0x1c>
 801df2e:	6023      	str	r3, [r4, #0]
 801df30:	bd38      	pop	{r3, r4, r5, pc}
 801df32:	bf00      	nop
 801df34:	24000c4c 	.word	0x24000c4c

0801df38 <_isatty_r>:
 801df38:	b538      	push	{r3, r4, r5, lr}
 801df3a:	4d06      	ldr	r5, [pc, #24]	@ (801df54 <_isatty_r+0x1c>)
 801df3c:	2300      	movs	r3, #0
 801df3e:	4604      	mov	r4, r0
 801df40:	4608      	mov	r0, r1
 801df42:	602b      	str	r3, [r5, #0]
 801df44:	f7ed fd76 	bl	800ba34 <_isatty>
 801df48:	1c43      	adds	r3, r0, #1
 801df4a:	d102      	bne.n	801df52 <_isatty_r+0x1a>
 801df4c:	682b      	ldr	r3, [r5, #0]
 801df4e:	b103      	cbz	r3, 801df52 <_isatty_r+0x1a>
 801df50:	6023      	str	r3, [r4, #0]
 801df52:	bd38      	pop	{r3, r4, r5, pc}
 801df54:	24000c4c 	.word	0x24000c4c

0801df58 <_init>:
 801df58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df5a:	bf00      	nop
 801df5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801df5e:	bc08      	pop	{r3}
 801df60:	469e      	mov	lr, r3
 801df62:	4770      	bx	lr

0801df64 <_fini>:
 801df64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df66:	bf00      	nop
 801df68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801df6a:	bc08      	pop	{r3}
 801df6c:	469e      	mov	lr, r3
 801df6e:	4770      	bx	lr
